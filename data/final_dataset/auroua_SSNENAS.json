{"home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.rank_searched_darts_arch.parse_single_darts_macro_graph": [[9, 24], ["open", "pickle.load", "isinstance", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load"], "function", ["None"], ["def", "parse_single_darts_macro_graph", "(", "single_model", ")", ":", "\n", "    ", "with", "open", "(", "single_model", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "isinstance", "(", "genotype", ",", "dict", ")", ":", "\n", "            ", "return", "genotype", "\n", "", "else", ":", "\n", "            ", "models", "=", "pickle", ".", "load", "(", "f", ")", "\n", "hash_key", "=", "pickle", ".", "load", "(", "f", ")", "\n", "train_loss", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "test_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "best_val_acc", "=", "pickle", ".", "load", "(", "f", ")", "\n", "loss_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_acc_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "return", "[", "genotype", ",", "models", ",", "hash_key", ",", "train_loss", ",", "val_acc", ",", "test_acc", ",", "best_val_acc", ",", "loss_list", ",", "val_acc_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.rank_searched_darts_arch.parse_darts_macro_graph": [[26, 56], ["os.listdir", "print", "print", "print", "os.path.join", "rank_searched_darts_arch.parse_single_darts_macro_graph", "isinstance", "numpy.argsort().tolist", "total_accs.append", "total_avg_accs.append", "total_model_keys.append", "total_accs.append", "total_avg_accs.append", "total_model_keys.append", "sum", "len", "numpy.argsort", "numpy.array"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.rank_searched_darts_arch.parse_single_darts_macro_graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "", "", "def", "parse_darts_macro_graph", "(", "models_path", ")", ":", "\n", "    ", "models", "=", "os", ".", "listdir", "(", "models_path", ")", "\n", "full_models", "=", "[", "os", ".", "path", ".", "join", "(", "models_path", ",", "m", ")", "for", "m", "in", "models", "]", "\n", "best_acc", "=", "0", "\n", "hash_key", "=", "None", "\n", "total_accs", "=", "[", "]", "\n", "total_avg_accs", "=", "[", "]", "\n", "total_model_keys", "=", "[", "]", "\n", "for", "fm", "in", "full_models", ":", "\n", "        ", "data", "=", "parse_single_darts_macro_graph", "(", "fm", ")", "\n", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "test_acc", "=", "data", "[", "'test_acc'", "]", "\n", "total_accs", ".", "append", "(", "test_acc", ")", "\n", "total_avg_accs", ".", "append", "(", "data", "[", "'val_acc'", "]", ")", "\n", "hash_key", "=", "data", "[", "'key'", "]", "\n", "total_model_keys", ".", "append", "(", "hash_key", ")", "\n", "", "else", ":", "\n", "            ", "test_acc", "=", "data", "[", "6", "]", "\n", "avg_val_acc", "=", "sum", "(", "data", "[", "8", "]", "[", "-", "5", ":", "]", ")", "/", "len", "(", "data", "[", "8", "]", "[", "-", "5", ":", "]", ")", "\n", "avg_val_acc", "=", "(", "test_acc", "+", "avg_val_acc", ")", "/", "2", "\n", "total_accs", ".", "append", "(", "test_acc", ")", "\n", "total_avg_accs", ".", "append", "(", "avg_val_acc", ")", "\n", "total_model_keys", ".", "append", "(", "data", "[", "2", "]", ")", "\n", "hash_key", "=", "data", "[", "2", "]", "\n", "", "if", "test_acc", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "test_acc", "\n", "", "", "idxs", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "total_avg_accs", ")", ")", ".", "tolist", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "print", "(", "[", "total_accs", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "print", "(", "[", "total_avg_accs", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "print", "(", "[", "total_model_keys", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "10", "]", "]", ")", "\n", "# print(best_acc, hash_key)", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.test_darts_cifar10.infer": [[18, 39], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "enumerate", "input.to.to", "target.to.to", "model", "criterion", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "100", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'valid %03d %e %.4f %.4f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.get_gen_hash_key": [[37, 39], ["hashlib.sha256().hexdigest", "hashlib.sha256", "str().encode", "str"], "function", ["None"], ["def", "get_gen_hash_key", "(", "gentype", ")", ":", "\n", "    ", "return", "sha256", "(", "str", "(", "gentype", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.gen_arch": [[41, 61], ["range", "Genotype", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "normal.extend", "reduction.extend", "range", "range", "range", "len"], "function", ["None"], ["", "def", "gen_arch", "(", "ops_list", ")", ":", "\n", "    ", "normal", "=", "[", "]", "\n", "reduction", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "ops", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "ops_list", ")", ")", ",", "NUM_VERTICES", ")", "\n", "\n", "# input nodes for conv", "\n", "nodes_in_normal", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "# input nodes for reduce", "\n", "nodes_in_reduce", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "\n", "normal", ".", "extend", "(", "[", "(", "ops_list", "[", "ops", "[", "0", "]", "]", ",", "nodes_in_normal", "[", "0", "]", ")", ",", "(", "ops_list", "[", "ops", "[", "1", "]", "]", ",", "nodes_in_normal", "[", "1", "]", ")", "]", ")", "\n", "reduction", ".", "extend", "(", "[", "(", "ops_list", "[", "ops", "[", "2", "]", "]", ",", "nodes_in_reduce", "[", "0", "]", ")", ",", "(", "ops_list", "[", "ops", "[", "3", "]", "]", ",", "nodes_in_reduce", "[", "1", "]", ")", "]", ")", "\n", "", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "normal", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "reduce", "=", "reduction", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.gen_arch_wo_key_lists": [[81, 96], ["range", "gen_darts_archs.gen_arch", "gen_darts_archs.get_gen_hash_key", "archs_list.append", "hash_keys_list.append", "print", "open", "pickle.dump", "pickle.dump", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.gen_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.get_gen_hash_key"], ["", "def", "gen_arch_wo_key_lists", "(", "nums", ",", "ops_list", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "archs_list", "=", "[", "]", "\n", "hash_keys_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "nums", ")", ":", "\n", "        ", "if", "len", "(", "archs_list", ")", "%", "1000", "==", "0", "and", "len", "(", "archs_list", ")", "!=", "0", ":", "\n", "            ", "print", "(", "f'{len(archs_list)} architectures have generated!'", ")", "\n", "", "genotype", "=", "gen_arch", "(", "ops_list", ")", "\n", "gen_hash_key", "=", "get_gen_hash_key", "(", "genotype", ")", "\n", "archs_list", ".", "append", "(", "genotype", ")", "\n", "hash_keys_list", ".", "append", "(", "gen_hash_key", ")", "\n", "", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "archs_list", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "hash_keys_list", ",", "f", ")", "\n", "", "", "return", "archs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.convert_genotype_form": [[98, 110], ["Genotype", "ops_list.index", "ops_list.index"], "function", ["None"], ["", "def", "convert_genotype_form", "(", "genotype", ",", "ops_list", ")", ":", "\n", "    ", "normal_cell", "=", "genotype", ".", "normal", "\n", "reduce_cell", "=", "genotype", ".", "reduce", "\n", "normal_cell_new", "=", "[", "(", "cell", "[", "1", "]", ",", "ops_list", ".", "index", "(", "cell", "[", "0", "]", ")", ")", "for", "cell", "in", "normal_cell", "]", "\n", "reduce_cell_new", "=", "[", "(", "cell", "[", "1", "]", ",", "ops_list", ".", "index", "(", "cell", "[", "0", "]", ")", ")", "for", "cell", "in", "reduce_cell", "]", "\n", "genotype_new", "=", "Genotype", "(", "\n", "normal", "=", "normal_cell_new", ",", "\n", "reduce", "=", "reduce_cell_new", ",", "\n", "normal_concat", "=", "genotype", ".", "normal_concat", ",", "\n", "reduce_concat", "=", "genotype", ".", "reduce_concat", "\n", ")", "\n", "return", "genotype_new", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.train_darts_cifar10.train": [[25, 52], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.train", "enumerate", "input.to.to", "target.to.to", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "            ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.train_darts_cifar10.infer": [[54, 75], ["nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "enumerate", "input.to.to", "target.to.to", "model", "criterion", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.supervised_ss_rl_params": [[6, 19], ["print", "sys.exit"], "function", ["None"], ["def", "supervised_ss_rl_params", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "6", "}", "\n", "# params = {'lr': 5e-4, 'batch_size': 64, 'input_dim': 6}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "1e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "8", "}", "\n", "# params = {'lr': 1e-4, 'batch_size': 64, 'input_dim': 8}", "\n", "", "elif", "param_str", "==", "'darts'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "11", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_params": [[21, 32], ["print", "sys.exit"], "function", ["None"], ["", "def", "unsupervised_ss_rl_params", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "6", "}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "1e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "8", "}", "\n", "", "elif", "param_str", "==", "'darts'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "11", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_pre_train": [[34, 45], ["print", "sys.exit"], "function", ["None"], ["", "def", "unsupervised_ss_rl_pre_train", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "6", "}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "1e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "8", "}", "\n", "", "elif", "param_str", "==", "'darts'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "11", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_ccl_params": [[47, 58], ["print", "sys.exit"], "function", ["None"], ["", "def", "unsupervised_ss_ccl_params", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "6", "}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "8", "}", "\n", "", "elif", "param_str", "==", "'darts'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "5e-3", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "11", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.brp_nas_params": [[73, 90], ["None"], "function", ["None"], ["", "def", "brp_nas_params", "(", "predictor_type", "=", "None", ")", ":", "\n", "    ", "params", "=", "{", "'num_features'", ":", "6", ",", "\n", "'num_layers'", ":", "4", ",", "\n", "'num_hidden'", ":", "600", ",", "\n", "'dropout_ratio'", ":", "0.2", ",", "\n", "'weight_init'", ":", "'thomas'", ",", "\n", "'bias_init'", ":", "'thomas'", ",", "\n", "'binary_classifier'", ":", "True", ",", "\n", "'lr'", ":", "3.5e-4", ",", "\n", "'weight_decay'", ":", "5.0e-4", ",", "\n", "'lr_patience'", ":", "10", ",", "\n", "'es_patience'", ":", "35", ",", "\n", "'batch_size'", ":", "64", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'optim_name'", ":", "'adamw'", ",", "\n", "'lr_scheduler'", ":", "'cosine'", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.semi_nas_params": [[92, 113], ["None"], "function", ["None"], ["", "def", "semi_nas_params", "(", "predictor_type", "=", "None", ")", ":", "\n", "    ", "params", "=", "{", "'nodes'", ":", "7", ",", "\n", "'encoder_layers'", ":", "1", ",", "\n", "'hidden_size'", ":", "16", ",", "\n", "'mlp_layers'", ":", "2", ",", "\n", "'mlp_hidden_size'", ":", "64", ",", "\n", "'decoder_layers'", ":", "1", ",", "\n", "'source_length'", ":", "27", ",", "\n", "'encoder_length'", ":", "27", ",", "\n", "'decoder_length'", ":", "27", ",", "\n", "'dropout'", ":", "0.1", ",", "\n", "'l2_reg'", ":", "1e-4", ",", "\n", "'vocab_size'", ":", "7", ",", "\n", "'epochs'", ":", "200", ",", "\n", "'batch_size'", ":", "100", ",", "\n", "'lr'", ":", "0.001", ",", "\n", "'optimizer'", ":", "'adam'", ",", "\n", "'grad_bound'", ":", "5.0", ",", "\n", "'iteration'", ":", "2", ",", "\n", "'trade_off'", ":", "0.8", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_params": [[115, 125], ["ValueError"], "function", ["None"], ["", "def", "bananas_params", "(", "args", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "4", ",", "'layer_width'", ":", "512", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'ensemble'", ":", "1", "}", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'ensemble'", ":", "1", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_p_params": [[127, 143], ["ValueError"], "function", ["None"], ["", "def", "bananas_p_params", "(", "args", "=", "None", ")", ":", "\n", "# if args.search_space == 'nasbench_101':", "\n", "#     params = {'loss': 'mae', 'num_layers': 10, 'layer_width': 20,", "\n", "#               'epochs': 200, 'batch_size': 32, 'lr': .01, 'regularization': 1e-4, 'verbose': 0, 'ensemble': 1}", "\n", "# elif args.search_space == 'nasbench_201':", "\n", "#     params = {'loss': 'mae', 'num_layers': 10, 'layer_width': 20,", "\n", "#               'epochs': 200, 'batch_size': 32, 'lr': .001, 'regularization': 1e-4, 'verbose': 0, 'ensemble': 1}", "\n", "    ", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "20", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'ensemble'", ":", "1", "}", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'ensemble'", ":", "1", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.mlp_params": [[145, 155], ["ValueError"], "function", ["None"], ["", "def", "mlp_params", "(", "args", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "4", ",", "'layer_width'", ":", "(", "512", ",", "2048", ",", "2048", ",", "512", ")", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'in_channel'", ":", "41", "}", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "4", ",", "'layer_width'", ":", "(", "512", ",", "2048", ",", "2048", ",", "512", ")", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", ",", "'in_channel'", ":", "58", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.np_nas_params": [[157, 175], ["NotImplementedError"], "function", ["None"], ["", "def", "np_nas_params", "(", "args", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "\n", "'lr'", ":", "1e-4", ",", "\n", "'epochs'", ":", "300", ",", "\n", "'input_dim'", ":", "6", "\n", "}", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "\n", "'lr'", ":", "1e-4", ",", "\n", "'epochs'", ":", "300", ",", "\n", "'input_dim'", ":", "8", "\n", "}", "\n", "", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "params", "=", "{", "'lr'", ":", "1e-4", ",", "'batch_size'", ":", "64", ",", "'input_dim'", ":", "11", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'This search space does not support at present!'", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.get_params": [[177, 226], ["params.unsupervised_ss_rl_params", "params.unsupervised_ss_rl_params", "params.supervised_ss_rl_params", "params.unsupervised_ss_rl_pre_train", "params.unsupervised_ss_ccl_params", "params.brp_nas_params", "params.semi_nas_params", "params.bananas_params", "params.bananas_p_params", "params.np_nas_params", "params.mlp_params", "params.unsupervised_ss_rl_params", "params.supervised_ss_rl_params", "params.unsupervised_ss_rl_pre_train", "params.unsupervised_ss_ccl_params", "params.brp_nas_params", "params.semi_nas_params", "params.bananas_params", "params.bananas_p_params", "params.np_nas_params", "params.mlp_params", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.supervised_ss_rl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_pre_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_ccl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.brp_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.semi_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_p_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.np_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.mlp_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.supervised_ss_rl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_rl_pre_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.unsupervised_ss_ccl_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.brp_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.semi_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.bananas_p_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.np_nas_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.mlp_params"], ["", "def", "get_params", "(", "args", ",", "predictor_type", ",", "load_model", "=", "False", ",", "pre_train", "=", "False", ")", ":", "\n", "    ", "if", "predictor_type", "==", "'SS_RL'", "and", "load_model", "and", "not", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_rl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "'SS_RL'", "in", "predictor_type", "and", "load_model", "and", "not", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_rl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'SS_RL'", "and", "not", "load_model", "and", "not", "pre_train", ":", "\n", "        ", "return", "supervised_ss_rl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'SS_RL'", "and", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_rl_pre_train", "(", "args", ".", "search_space", ")", "\n", "# elif predictor_type == 'SS_CCL' and pre_train:", "\n", "#     return unsupervised_ss_ccl_pre_train(args.search_space)", "\n", "", "elif", "'SS_CCL'", "in", "predictor_type", "and", "not", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_ccl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'BRP_NAS'", ":", "\n", "        ", "return", "brp_nas_params", "(", ")", "\n", "", "elif", "predictor_type", "==", "'SemiNAS'", ":", "\n", "        ", "return", "semi_nas_params", "(", ")", "\n", "", "elif", "predictor_type", "==", "'BANANAS'", "or", "predictor_type", "==", "'BANANAS_ADJ'", ":", "\n", "        ", "return", "bananas_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'BANANAS_P'", ":", "\n", "        ", "return", "bananas_p_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'NP_NAS'", ":", "\n", "        ", "return", "np_nas_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'MLP'", ":", "\n", "        ", "return", "mlp_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'ss_rl'", "and", "load_model", "and", "not", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_rl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'ss_rl'", "and", "not", "load_model", "and", "not", "pre_train", ":", "\n", "        ", "return", "supervised_ss_rl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'ss_rl'", "and", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_rl_pre_train", "(", "args", ".", "search_space", ")", "\n", "# elif predictor_type == 'SS_CCL' and pre_train:", "\n", "#     return unsupervised_ss_ccl_pre_train(args.search_space)", "\n", "", "elif", "'ss_ccl'", "in", "predictor_type", "and", "not", "pre_train", ":", "\n", "        ", "return", "unsupervised_ss_ccl_params", "(", "args", ".", "search_space", ")", "\n", "", "elif", "predictor_type", "==", "'brp_nas'", ":", "\n", "        ", "return", "brp_nas_params", "(", ")", "\n", "", "elif", "predictor_type", "==", "'seminas'", ":", "\n", "        ", "return", "semi_nas_params", "(", ")", "\n", "", "elif", "predictor_type", "==", "'bananas'", "or", "predictor_type", "==", "'bananas_adj'", ":", "\n", "        ", "return", "bananas_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'bananas_p'", ":", "\n", "        ", "return", "bananas_p_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'np_nas'", ":", "\n", "        ", "return", "np_nas_params", "(", "args", ")", "\n", "", "elif", "predictor_type", "==", "'mlp'", ":", "\n", "        ", "return", "mlp_params", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params_nas.meta_neuralnet_params": [[4, 15], ["print", "sys.exit"], "function", ["None"], ["def", "meta_neuralnet_params", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_101'", ",", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "20", ",", "\n", "'epochs'", ":", "150", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".01", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", "=", "{", "'search_space'", ":", "'nasbench_201'", ",", "'loss'", ":", "'mae'", ",", "'num_layers'", ":", "10", ",", "'layer_width'", ":", "200", ",", "\n", "'epochs'", ":", "200", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", ".001", ",", "'regularization'", ":", "0", ",", "'verbose'", ":", "0", "}", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid meta neural net params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params_nas.algo_params_close_domain": [[17, 164], ["print", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "NotImplementedError", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "params.append", "print", "sys.exit"], "function", ["None"], ["", "def", "algo_params_close_domain", "(", "param_str", ",", "search_budget", "=", "100", ",", "dataname", "=", "'cifar10'", ")", ":", "\n", "    ", "\"\"\"\n      Return params list based on param_str.\n      These are the parameters used to produce the figures in the paper\n      For AlphaX and Reinforcement Learning, we used the corresponding github repos:\n      https://github.com/linnanwang/AlphaX-NASBench101\n      https://github.com/automl/nas_benchmarks\n    \"\"\"", "\n", "params", "=", "[", "]", "\n", "\n", "if", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "rate", "=", "10.", "\n", "", "elif", "dataname", "==", "'cifar100'", ":", "\n", "        ", "rate", "=", "30.", "\n", "", "elif", "dataname", "==", "'ImageNet16-120'", ":", "\n", "        ", "rate", "=", "55", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "param_str", "==", "'nasbench_101'", ":", "\n", "        ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "1.0", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "'k'", ":", "10", ",", "\n", "'encode_paths'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_context'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_fixed_nums'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "90", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "90", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_201'", ":", "\n", "        ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'random'", ",", "'total_queries'", ":", "search_budget", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'evolution'", ",", "'total_queries'", ":", "search_budget", ",", "'population_size'", ":", "30", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'tournament_size'", ":", "10", ",", "'mutation_rate'", ":", "1.0", ",", "'allow_isomorphisms'", ":", "False", ",", "\n", "'deterministic'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "True", ",", "'eva_new'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_f'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'bananas_context'", ",", "'total_queries'", ":", "search_budget", ",", "'num_ensemble'", ":", "5", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'acq_opt_type'", ":", "'mutation'", ",", "'candidate_nums'", ":", "100", ",", "'num_init'", ":", "10", ",", "\n", "'k'", ":", "10", ",", "'encode_paths'", ":", "False", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'rate'", ":", "rate", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_fixed_nums'", ",", "'total_queries'", ":", "search_budget", ",", "'agent'", ":", "'gin_predictor'", ",", "\n", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "300", ",", "\n", "'training_nums'", ":", "50", ",", "'rate'", ":", "rate", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'rate'", ":", "rate", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_101_fixed'", ":", "\n", "        ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "20", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "80", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "110", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "150", "}", ")", "\n", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "20", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "80", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "110", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "200", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "150", "}", ")", "\n", "", "elif", "param_str", "==", "'nasbench_201_fixed'", ":", "\n", "        ", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "20", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "80", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_rl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_rl'", ",", "'training_nums'", ":", "100", "}", ")", "\n", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "20", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "50", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "80", "}", ")", "\n", "params", ".", "append", "(", "{", "'algo_name'", ":", "'gin_predictor_ss_ccl_num_fixed'", ",", "'total_queries'", ":", "search_budget", ",", "'k'", ":", "10", ",", "\n", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "'allow_isomorphisms'", ":", "False", ",", "'lr'", ":", "0.005", ",", "'rate'", ":", "rate", ",", "\n", "'candidate_nums'", ":", "100", ",", "'epochs'", ":", "150", ",", "'predictor_type'", ":", "'ss_ccl'", ",", "'training_nums'", ":", "100", "}", ")", "\n", "", "elif", "param_str", "==", "'experiment'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm params'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "print", "(", "'* Running experiment: '", "+", "param_str", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params_nas.algo_params_open_domain": [[166, 176], ["print", "NotImplementedError", "str"], "function", ["None"], ["", "def", "algo_params_open_domain", "(", "param_str", ")", ":", "\n", "    ", "if", "param_str", "==", "'gin_predictor'", ":", "# gin_predictor   gin_predictor_fixed_num", "\n", "        ", "param", "=", "{", "'algo_name'", ":", "'gin_predictor_fixed_num'", ",", "'total_queries'", ":", "30", ",", "'agent'", ":", "'gin_predictor'", ",", "'num_init'", ":", "10", ",", "\n", "'allow_isomorphisms'", ":", "False", ",", "'k'", ":", "10", ",", "'epochs'", ":", "300", ",", "'batch_size'", ":", "32", ",", "'lr'", ":", "0.005", ",", "\n", "'encode_path'", ":", "True", ",", "'candidate_nums'", ":", "100", ",", "'mutate_rate'", ":", "2.0", ",", "'filter_method'", ":", "'pape'", ",", "\n", "'fixed_num'", ":", "70", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This algorithm have not implement!\"", ")", "\n", "", "print", "(", "'* Running experiment: '", "+", "str", "(", "param", ")", ")", "\n", "return", "param", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort._compare_lists": [[4, 12], ["zip"], "function", ["None"], ["def", "_compare_lists", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "for", "(", "l1", ",", "l2", ")", "in", "zip", "(", "list1", "[", "1", "]", ",", "list2", "[", "1", "]", ")", ":", "\n", "        ", "if", "l1", "==", "l2", ":", "\n", "            ", "continue", "\n", "", "elif", "l1", "<", "l2", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort._partition_list": [[16, 40], ["algo_sort._compare_lists", "algo_sort._compare_lists"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort._compare_lists", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort._compare_lists"], ["", "", "", "def", "_partition_list", "(", "nums", ",", "low", ",", "high", ")", ":", "\n", "# We select the middle element to be the pivot. Some implementations select", "\n", "# the first element or the last element. Sometimes the median value becomes", "\n", "# the pivot, or a random one. There are many more strategies that can be", "\n", "# chosen or created.", "\n", "    ", "pivot", "=", "nums", "[", "(", "low", "+", "high", ")", "//", "2", "]", "\n", "i", "=", "low", "-", "1", "\n", "j", "=", "high", "+", "1", "\n", "while", "True", ":", "\n", "        ", "i", "+=", "1", "\n", "# while nums[i] < pivot:", "\n", "while", "_compare_lists", "(", "nums", "[", "i", "]", ",", "pivot", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "\n", "", "j", "-=", "1", "\n", "while", "_compare_lists", "(", "pivot", ",", "nums", "[", "j", "]", ")", ":", "\n", "            ", "j", "-=", "1", "\n", "\n", "", "if", "i", ">=", "j", ":", "\n", "            ", "return", "j", "\n", "\n", "# If an element at i (on the left of the pivot) is larger than the", "\n", "# element at j (on right right of the pivot), then swap them", "\n", "", "nums", "[", "i", "]", ",", "nums", "[", "j", "]", "=", "nums", "[", "j", "]", ",", "nums", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort.quick_sort_list": [[42, 55], ["copy.deepcopy", "algo_sort.quick_sort_list._quick_sort"], "function", ["None"], ["", "", "def", "quick_sort_list", "(", "nums", ")", ":", "\n", "# Create a helper function that will be called recursively", "\n", "    ", "datas", "=", "copy", ".", "deepcopy", "(", "nums", ")", "\n", "\n", "def", "_quick_sort", "(", "items", ",", "low", ",", "high", ")", ":", "\n", "        ", "if", "low", "<", "high", ":", "\n", "# This is the index after the pivot, where our lists are split", "\n", "            ", "split_index", "=", "_partition_list", "(", "items", ",", "low", ",", "high", ")", "\n", "_quick_sort", "(", "items", ",", "low", ",", "split_index", ")", "\n", "_quick_sort", "(", "items", ",", "split_index", "+", "1", ",", "high", ")", "\n", "\n", "", "", "_quick_sort", "(", "datas", ",", "0", ",", "len", "(", "datas", ")", "-", "1", ")", "\n", "return", "datas", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.__init__": [[271, 273], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info": [[274, 276], ["None"], "methods", ["None"], ["", "def", "info", "(", "self", ",", "a", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.dubeg": [[277, 279], ["None"], "methods", ["None"], ["", "def", "dubeg", "(", "self", ",", "a", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_world_size": [[19, 25], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_rank": [[27, 33], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.is_main_process": [[35, 37], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger": [[162, 178], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["", "def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "log_level", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.synchronize": [[57, 70], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.reduce_dict": [[72, 99], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_dist_info": [[101, 113], ["torch.is_initialized", "torch.get_rank", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size"], ["", "def", "get_dist_info", "(", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "        ", "initialized", "=", "dist", ".", "_initialized", "\n", "", "else", ":", "\n", "        ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed": [[115, 120], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "# tf_set_random_seed(seed)", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_config_file": [[123, 125], ["None"], "function", ["None"], ["", "def", "get_config_file", "(", "nas_type", ",", "nas_dataset", ")", ":", "\n", "    ", "return", "'../configs/%s_%s.py'", "%", "(", "nas_type", ",", "nas_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.getarrt_local": [[127, 130], ["obj_list.index"], "function", ["None"], ["", "def", "getarrt_local", "(", "obj_list", ",", "attr", ")", ":", "\n", "    ", "idx", "=", "obj_list", ".", "index", "(", "attr", ")", "\n", "return", "obj_list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.init_path": [[132, 142], ["os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "init_path", "(", "root_path", ")", ":", "\n", "    ", "folder_models", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'models'", ")", "\n", "val_models", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'val'", ")", "\n", "model_pkl_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'models_pkl_path'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder_models", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_models", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "val_models", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "val_models", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_pkl_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_pkl_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id": [[144, 152], ["range", "random.choice", "random.choice"], "function", ["None"], ["", "", "def", "random_id", "(", "length", ")", ":", "\n", "    ", "number", "=", "'0123456789'", "\n", "alpha", "=", "'abcdefghijklmnopqrstuvwxyz'", "\n", "id", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ",", "2", ")", ":", "\n", "        ", "id", "+=", "random", ".", "choice", "(", "number", ")", "\n", "id", "+=", "random", ".", "choice", "(", "alpha", ")", "\n", "", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id_int": [[154, 160], ["range", "int", "random.choice"], "function", ["None"], ["", "def", "random_id_int", "(", "length", ")", ":", "\n", "    ", "number", "=", "'0123456789'", "\n", "id", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "        ", "id", "+=", "random", ".", "choice", "(", "number", ")", "\n", "", "return", "int", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size": [[180, 208], ["sys.getsizeof", "id", "set.add", "hasattr", "isinstance", "hasattr", "set", "sum", "sum", "sum", "hasattr", "sum", "comm.get_size", "comm.get_size", "isinstance", "comm.get_size", "inspect.isgetsetdescriptor", "inspect.ismemberdescriptor", "comm.get_size", "obj.values", "obj.keys", "comm.get_size", "getattr", "hasattr"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_size"], ["", "def", "get_size", "(", "obj", ",", "seen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Recursively finds size of objects in bytes\"\"\"", "\n", "size", "=", "sys", ".", "getsizeof", "(", "obj", ")", "\n", "if", "seen", "is", "None", ":", "\n", "        ", "seen", "=", "set", "(", ")", "\n", "", "obj_id", "=", "id", "(", "obj", ")", "\n", "if", "obj_id", "in", "seen", ":", "\n", "        ", "return", "0", "\n", "# Important mark as seen *before* entering recursion to gracefully handle", "\n", "# self-referential objects", "\n", "", "seen", ".", "add", "(", "obj_id", ")", "\n", "if", "hasattr", "(", "obj", ",", "'__dict__'", ")", ":", "\n", "        ", "for", "cls", "in", "obj", ".", "__class__", ".", "__mro__", ":", "\n", "            ", "if", "'__dict__'", "in", "cls", ".", "__dict__", ":", "\n", "                ", "d", "=", "cls", ".", "__dict__", "[", "'__dict__'", "]", "\n", "if", "inspect", ".", "isgetsetdescriptor", "(", "d", ")", "or", "inspect", ".", "ismemberdescriptor", "(", "d", ")", ":", "\n", "                    ", "size", "+=", "get_size", "(", "obj", ".", "__dict__", ",", "seen", ")", "\n", "", "break", "\n", "", "", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "(", "get_size", "(", "v", ",", "seen", ")", "for", "v", "in", "obj", ".", "values", "(", ")", ")", ")", "\n", "size", "+=", "sum", "(", "(", "get_size", "(", "k", ",", "seen", ")", "for", "k", "in", "obj", ".", "keys", "(", ")", ")", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "not", "isinstance", "(", "obj", ",", "(", "str", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "(", "get_size", "(", "i", ",", "seen", ")", "for", "i", "in", "obj", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "obj", ",", "'__slots__'", ")", ":", "# can have __slots__ with __dict__", "\n", "        ", "size", "+=", "sum", "(", "get_size", "(", "getattr", "(", "obj", ",", "s", ")", ",", "seen", ")", "for", "s", "in", "obj", ".", "__slots__", "if", "hasattr", "(", "obj", ",", "s", ")", ")", "\n", "\n", "", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.dynamic_gen_params": [[210, 219], ["copy.deepcopy", "total_params.append"], "function", ["None"], ["", "def", "dynamic_gen_params", "(", "parames", ")", ":", "\n", "    ", "algo_nums", "=", "parames", "[", "0", "]", "\n", "algo_params", "=", "parames", "[", "1", "]", "\n", "total_params", "=", "[", "]", "\n", "for", "num", "in", "algo_nums", ":", "\n", "        ", "algo_params_temp", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_params_temp", "[", "'training_nums'", "]", "=", "num", "\n", "total_params", ".", "append", "(", "algo_params_temp", ")", "\n", "", "return", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_pearsonr_coorlection": [[221, 230], ["isinstance", "scipy.stats.pearsonr", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "get_pearsonr_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "pearsonr", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection": [[232, 241], ["isinstance", "scipy.stats.spearmanr", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "get_spearmanr_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "spearmanr", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection": [[243, 252], ["isinstance", "scipy.stats.kendalltau", "len", "len", "v1.tolist"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "get_kendalltau_coorlection", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "if", "isinstance", "(", "v1", ",", "list", ")", ":", "\n", "        ", "if", "len", "(", "v1", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "v1", ".", "tolist", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "", "v", ",", "p", "=", "kendalltau", "(", "v1", ",", "v2", ")", "\n", "return", "v", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.matrix_dummy_nodes_101": [[254, 268], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node"], ["", "def", "matrix_dummy_nodes_101", "(", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "    ", "NUM_VERTICES", "=", "7", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "            ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.remove_nasbench101_isolate": [[281, 291], ["ops.index", "numpy.delete", "numpy.delete", "ops.pop"], "function", ["None"], ["", "", "def", "remove_nasbench101_isolate", "(", "matrix", ",", "ops", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "indexs", "=", "ops", ".", "index", "(", "'isolate'", ")", "\n", "matrix", "=", "np", ".", "delete", "(", "matrix", ",", "indexs", ",", "axis", "=", "0", ")", "\n", "matrix", "=", "np", ".", "delete", "(", "matrix", ",", "indexs", ",", "axis", "=", "1", ")", "\n", "ops", ".", "pop", "(", "indexs", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "break", "\n", "", "", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.predictive_comparision.convert_arch_to_seq": [[1, 18], ["len", "range", "len", "range", "len", "seq.append", "seq.append", "seq.append", "seq.append", "seq.append"], "function", ["None"], ["def", "convert_arch_to_seq", "(", "matrix", ",", "ops", ")", ":", "\n", "    ", "seq", "=", "[", "]", "\n", "n", "=", "len", "(", "matrix", ")", "\n", "assert", "n", "==", "len", "(", "ops", ")", "\n", "for", "col", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "            ", "seq", ".", "append", "(", "matrix", "[", "row", "]", "[", "col", "]", "+", "1", ")", "\n", "", "if", "ops", "[", "col", "]", "==", "CONV1X1", ":", "\n", "            ", "seq", ".", "append", "(", "3", ")", "\n", "", "elif", "ops", "[", "col", "]", "==", "CONV3X3", ":", "\n", "            ", "seq", ".", "append", "(", "4", ")", "\n", "", "elif", "ops", "[", "col", "]", "==", "MAXPOOL3X3", ":", "\n", "            ", "seq", ".", "append", "(", "5", ")", "\n", "", "if", "ops", "[", "col", "]", "==", "OUTPUT", ":", "\n", "            ", "seq", ".", "append", "(", "6", ")", "\n", "", "", "assert", "len", "(", "seq", ")", "==", "(", "n", "+", "2", ")", "*", "(", "n", "-", "1", ")", "/", "2", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "avg", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_modify_model": [[5, 16], ["model.state_dict", "model_temp.load_state_dict", "model_temp.state_dict", "model_temp.state_dict.items", "model.load_state_dict", "torch.load", "print"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], ["def", "load_modify_model", "(", "model", ",", "model_temp", ",", "model_path", ",", "verbose", "=", "0", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_temp", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "model_temp_state_dict", "=", "model_temp", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "param", "in", "model_temp_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "model_state_dict", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "f'Model parameter {name} have loaded!'", ")", "\n", "", "model_state_dict", "[", "name", "]", "=", "param", "\n", "", "", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.get_temp_model": [[18, 24], ["nas_lib.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED", "NotImplementedError"], "function", ["None"], ["", "def", "get_temp_model", "(", "predictor_type", ",", "input_dim", ")", ":", "\n", "    ", "if", "predictor_type", "==", "'SS_RL'", "or", "predictor_type", "==", "'ss_rl'", ":", "\n", "        ", "predictor", "=", "PredictorSiameseGED", "(", "input_dim", "=", "input_dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The predictor type {predictor_type} have implement yet!'", ")", "\n", "", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_predictor_ged_moco": [[26, 44], ["torch.load", "list", "model.load_state_dict", "state_dict.keys", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "load_predictor_ged_moco", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "        ", "if", "k", ".", "startswith", "(", "'encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "elif", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_predictor_ged_moco_v2": [[46, 61], ["torch.load", "list", "model.load_state_dict", "state_dict.keys", "k.startswith", "k.startswith", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "load_predictor_ged_moco_v2", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q up to before the embedding layer", "\n", "        ", "if", "k", ".", "startswith", "(", "'encoder_q'", ")", "and", "'fc'", "not", "in", "k", ":", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "elif", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "'fc'", "not", "in", "k", ":", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_supervised_gin_model": [[63, 67], ["torch.load", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], ["", "def", "load_supervised_gin_model", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.Cutout.__init__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.Cutout.__call__": [[56, 72], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.AvgrageMeter.__init__": [[140, 142], ["utils_darts.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.AvgrageMeter.reset": [[143, 147], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.AvgrageMeter.update": [[148, 152], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.compute_best_test_losses": [[15, 32], ["range", "range", "total_data.append", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["def", "compute_best_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "total_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_queries", ")", ":", "\n", "        ", "total_data", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "total_data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.compute_darts_test_losses": [[34, 50], ["range", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "def", "compute_darts_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "model_archs", ",", "model_keys", "=", "data", "\n", "losses", "=", "[", "(", "model_archs", "[", "k", "]", "[", "2", "]", ",", "model_archs", "[", "k", "]", "[", "3", "]", ",", "k", ")", "for", "k", "in", "model_keys", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "losses", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.init_nasbench_macro_cifar10": [[74, 83], ["sqlite3.connect", "sqlite3.connect.execute", "sqlite3.connect.commit", "os.path.join", "print"], "function", ["None"], ["", "", "def", "init_nasbench_macro_cifar10", "(", "model_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'models.db'", ")", ")", "\n", "conn", ".", "execute", "(", "\"create table models (id text not null, hashkey text, modelpath text, train_acc real, val_acc real, \"", "\n", "\"test_acc real)\"", ")", "\n", "conn", ".", "commit", "(", ")", "\n", "", "except", "sqlite3", ".", "OperationalError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "return", "conn", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.drop_path": [[85, 92], ["torch.FloatTensor().bernoulli_().to", "x.div_", "x.mul_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor", "x.size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ",", "device", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ".", "to", "(", "device", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype": [[97, 118], ["Genotype", "logger.info", "darts_arch[].append", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["def", "convert_to_genotype", "(", "arch", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "op_dict", "=", "{", "\n", "0", ":", "'none'", ",", "\n", "1", ":", "'max_pool_3x3'", ",", "\n", "2", ":", "'avg_pool_3x3'", ",", "\n", "3", ":", "'skip_connect'", ",", "\n", "4", ":", "'sep_conv_3x3'", ",", "\n", "5", ":", "'sep_conv_5x5'", ",", "\n", "6", ":", "'dil_conv_3x3'", ",", "\n", "7", ":", "'dil_conv_5x5'", "\n", "}", "\n", "darts_arch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "i", "=", "0", "\n", "for", "cell", "in", "arch", ":", "\n", "        ", "for", "n", "in", "cell", ":", "\n", "            ", "darts_arch", "[", "i", "]", ".", "append", "(", "(", "op_dict", "[", "n", "[", "1", "]", "]", ",", "n", "[", "0", "]", ")", ")", "\n", "", "i", "+=", "1", "\n", "", "geno", "=", "Genotype", "(", "normal", "=", "darts_arch", "[", "0", "]", ",", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "darts_arch", "[", "1", "]", ",", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "if", "verbose", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "geno", ")", ")", "\n", "", "return", "geno", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.count_parameters_in_MB": [[120, 122], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy": [[124, 137], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.topk"], ["", "def", "top_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.create_exp_dir": [[154, 164], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.save_checkpoint": [[166, 172], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.load_model": [[174, 183], ["os.path.join", "os.path.exists", "os.path.join", "open", "pickle.load", "isinstance"], "function", ["None"], ["", "", "def", "load_model", "(", "root", ",", "file_name", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pre_train_models'", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'model_pkl'", ",", "file_name", ")", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gtyp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "isinstance", "(", "gtyp", ",", "dict", ")", ":", "\n", "            ", "gtyp", "=", "gtyp", "[", "'gentype'", "]", "\n", "", "", "return", "gtyp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.model_converter": [[187, 205], ["os.path.join", "os.path.exists", "os.path.join", "open", "pickle.load", "print", "print", "Genotype", "print", "print", "os.path.join", "type", "type", "open", "pickle.dump"], "function", ["None"], ["", "def", "model_converter", "(", "root", ",", "file_name", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pre_train_models'", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'model_pkl'", ",", "file_name", ")", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gtyp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "print", "(", "type", "(", "gtyp", ")", ")", "\n", "print", "(", "gtyp", ")", "\n", "gtyp_new", "=", "Genotype", "(", "normal", "=", "gtyp", ".", "normal", ",", "\n", "normal_concat", "=", "gtyp", ".", "normal_concat", ",", "\n", "reduce", "=", "gtyp", ".", "reduce", ",", "\n", "reduce_concat", "=", "gtyp", ".", "reduce_concat", ")", "\n", "print", "(", "type", "(", "gtyp_new", ")", ")", "\n", "print", "(", "gtyp_new", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'new'", ",", "file_name", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "gtyp_new", ",", "f", ")", "\n", "", "", "return", "gtyp", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.nasbench2graph2": [[224, 241], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["def", "nasbench2graph2", "(", "data", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "11", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.CosineLR.__init__": [[107, 113], ["int", "torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "epochs", ",", "train_images", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "train_image_num", "=", "train_images", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "total_steps", "=", "int", "(", "self", ".", "epochs", "*", "self", ".", "train_image_num", "/", "self", ".", "batch_size", ")", "\n", "super", "(", "CosineLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.CosineLR.get_lr": [[114, 119], ["float", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "progress_fraction", "=", "float", "(", "self", ".", "_step_count", "+", "1", ")", "/", "self", ".", "total_steps", "\n", "lr_lists", "=", "[", "(", "0.5", "*", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "return", "lr_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.CosineLR.set_train_images": [[120, 122], ["None"], "methods", ["None"], ["", "def", "set_train_images", "(", "self", ",", "new_count", ")", ":", "\n", "        ", "self", ".", "train_image_num", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx": [[9, 19], ["len", "range", "math.ceil", "idx_batch_list.append", "idx_batch_list.append"], "function", ["None"], ["def", "gen_batch_idx", "(", "idx_list", ",", "batch_size", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "ds_len", "=", "len", "(", "idx_list", ")", "\n", "idx_batch_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "math", ".", "ceil", "(", "ds_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "*", "batch_size", ">", "ds_len", "and", "not", "drop_last", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "", "return", "idx_batch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx_gen": [[21, 29], ["len", "range", "math.ceil"], "function", ["None"], ["", "def", "gen_batch_idx_gen", "(", "idx_list", ",", "batch_size", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "ds_len", "=", "len", "(", "idx_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "math", ".", "ceil", "(", "ds_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "*", "batch_size", ">", "ds_len", "and", "not", "drop_last", ":", "\n", "            ", "yield", "idx_list", "[", "i", "*", "batch_size", ":", "]", "\n", "", "else", ":", "\n", "            ", "yield", "idx_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.make_agent_optimizer": [[31, 47], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "", "", "def", "make_agent_optimizer", "(", "model", ",", "base_lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.make_agent_optimizer_std": [[49, 67], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "def", "make_agent_optimizer_std", "(", "model", ",", "base_lr", ",", "fileds", "=", "''", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "fileds", "not", "in", "key", ":", "\n", "            ", "continue", "\n", "", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.make_agent_optimizer_mean": [[69, 87], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "def", "make_agent_optimizer_mean", "(", "model", ",", "base_lr", ",", "fileds", "=", "''", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "fileds", "in", "key", ":", "\n", "            ", "continue", "\n", "", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "weight_deacy", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "if", "bias_multiply", ":", "\n", "                ", "lr", "=", "base_lr", "*", "2.0", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "\n", "", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.lr_step": [[89, 92], ["None"], "function", ["None"], ["", "def", "lr_step", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_loss_criteria": [[94, 104], ["torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "layers.gaussian_loss.Criterion", "ValueError"], "function", ["None"], ["", "", "def", "get_loss_criteria", "(", "loss_type", ")", ":", "\n", "    ", "if", "loss_type", "==", "'mse'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "loss_type", "==", "'mae'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "loss_type", "==", "'gaussian'", ":", "\n", "        ", "criterion", "=", "Criterion", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This loss type does not support!'", ")", "\n", "", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.compute_best_test_losses": [[124, 141], ["range", "range", "total_data.append", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "", "def", "compute_best_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "total_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_queries", ")", ":", "\n", "        ", "total_data", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "total_data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.compute_bananas_test_losses": [[143, 159], ["range", "results.append", "results_keys.append", "sorted"], "function", ["None"], ["", "def", "compute_bananas_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "results_keys", "=", "[", "]", "\n", "model_archs", ",", "model_keys", "=", "data", "\n", "losses", "=", "[", "(", "model_archs", "[", "k", "]", "[", "1", "]", ",", "model_archs", "[", "k", "]", "[", "2", "]", ",", "k", ")", "for", "k", "in", "model_keys", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "losses", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "1", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "results_keys", ".", "append", "(", "best_arch", "[", "2", "]", ")", "\n", "", "return", "results", ",", "results_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank": [[161, 167], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_rank"], ["", "def", "get_rank", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size": [[169, 175], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.get_world_size"], ["", "def", "get_world_size", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node": [[44, 53], ["range", "len", "numpy.all", "numpy.all", "node_list.append"], "function", ["None"], ["def", "find_isolate_node", "(", "matrix", ")", ":", "\n", "    ", "node_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "matrix", "[", "i", ",", ":", "]", "==", "0", ")", "and", "np", ".", "all", "(", "matrix", "[", ":", ",", "i", "]", "==", "0", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "matrix", "[", "0", ",", "i", "]", "=", "1", "\n", "node_list", ".", "append", "(", "i", ")", "\n", "", "", "return", "node_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101": [[55, 78], ["torch.zeros", "isinstance", "torch.zeros", "range", "int", "int", "range", "torch.sum().item", "numpy.sum", "int", "ops[].item", "torch.sum"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "nasbench2graph_101", "(", "data", ",", "is_idx", "=", "False", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES_101", ",", "6", ")", "\n", "if", "isinstance", "(", "matrix", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "edges", "=", "int", "(", "torch", ".", "sum", "(", "matrix", ")", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES_101", ")", ":", "\n", "        ", "if", "is_idx", ":", "\n", "            ", "idx", "=", "int", "(", "ops", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "NASBENCH_101_OPS", "[", "ops", "[", "i", "]", "]", "\n", "", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES_101", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201": [[80, 103], ["torch.zeros", "isinstance", "torch.zeros", "range", "int", "int", "range", "torch.sum().item", "numpy.sum", "int", "NASBENCH_201_OPS.index", "ops[].item", "torch.sum"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "nasbench2graph_201", "(", "data", ",", "is_idx", "=", "False", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES_201", ",", "8", ")", "\n", "if", "isinstance", "(", "matrix", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "edges", "=", "int", "(", "torch", ".", "sum", "(", "matrix", ")", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES_201", ")", ":", "\n", "        ", "if", "is_idx", ":", "\n", "            ", "idx", "=", "int", "(", "ops", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "NASBENCH_201_OPS", ".", "index", "(", "ops", "[", "i", "]", ")", "\n", "", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES_201", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_darts": [[105, 122], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "nasbench2graph_darts", "(", "data", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES_DARTS_HALF", ",", "11", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES_DARTS_HALF", ")", ":", "\n", "        ", "idx", "=", "DARTS_OPS_DICT", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES_DARTS_HALF", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nas2graph": [[124, 133], ["utils_data.nasbench2graph_101", "utils_data.nasbench2graph_201", "utils_data.nasbench2graph_darts", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_darts"], ["", "def", "nas2graph", "(", "nas_benchmark", ",", "data", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "if", "nas_benchmark", "==", "'nasbench_101'", ":", "\n", "        ", "return", "nasbench2graph_101", "(", "data", ",", "reverse", "=", "reverse", ")", "\n", "", "elif", "nas_benchmark", "==", "'nasbench_201'", ":", "\n", "        ", "return", "nasbench2graph_201", "(", "data", ",", "reverse", "=", "reverse", ")", "\n", "", "elif", "nas_benchmark", "==", "'darts'", ":", "\n", "        ", "return", "nasbench2graph_darts", "(", "data", ",", "reverse", "=", "reverse", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The nas benchmark type {nas_benchmark} have not implemented yet!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_num": [[135, 144], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_node_num", "(", "nas_benchmark", ")", ":", "\n", "    ", "if", "nas_benchmark", "==", "'nasbench_101'", ":", "\n", "        ", "return", "NUM_VERTICES_101", "\n", "", "elif", "nas_benchmark", "==", "'nasbench_201'", ":", "\n", "        ", "return", "NUM_VERTICES_201", "\n", "", "elif", "nas_benchmark", "==", "'darts'", ":", "\n", "        ", "return", "NUM_VERTICES_DARTS", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The nas benchmark type {nas_benchmark} have not implemented yet!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_type_num": [[146, 155], ["len", "len", "len", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_node_type_num", "(", "nas_benchmark", ")", ":", "\n", "    ", "if", "nas_benchmark", "==", "'nasbench_101'", ":", "\n", "        ", "return", "len", "(", "NASBENCH_101_OPS", ")", "\n", "", "elif", "nas_benchmark", "==", "'nasbench_201'", ":", "\n", "        ", "return", "len", "(", "NASBENCH_201_OPS", ")", "\n", "", "elif", "nas_benchmark", "==", "'darts'", ":", "\n", "        ", "return", "len", "(", "DARTS_OPS", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The nas benchmark type {nas_benchmark} have not implemented yet!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_ops_list": [[157, 166], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_ops_list", "(", "nas_benchmark", ")", ":", "\n", "    ", "if", "nas_benchmark", "==", "'nasbench_101'", ":", "\n", "        ", "return", "NASBENCH_101_OPS_LIST", "\n", "", "elif", "nas_benchmark", "==", "'nasbench_201'", ":", "\n", "        ", "return", "NASBENCH_201_OPS", "\n", "", "elif", "nas_benchmark", "==", "'darts'", ":", "\n", "        ", "return", "DARTS_OPS", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The nas benchmark type {nas_benchmark} have not implemented yet!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_input_dim": [[168, 177], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_input_dim", "(", "search_space", ")", ":", "\n", "    ", "if", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "return", "6", "\n", "", "elif", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "return", "8", "\n", "", "elif", "search_space", "==", "'darts'", ":", "\n", "        ", "return", "11", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space type {search_space} does not support!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_seq_len": [[179, 188], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_seq_len", "(", "search_space", ")", ":", "\n", "    ", "if", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "return", "120", "\n", "", "elif", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "return", "96", "\n", "", "elif", "search_space", "==", "'darts'", ":", "\n", "        ", "return", "1224", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space {search_space} does not support!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.edit_distance_normalization": [[190, 194], ["math.exp", "numpy.sum", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "edit_distance_normalization", "(", "path_encoding_1", ",", "path_endocing_2", ",", "num_nodes", ")", ":", "\n", "    ", "distance", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "path_encoding_1", ")", "!=", "np", ".", "array", "(", "path_endocing_2", ")", ")", "*", "1.0", "\n", "distance", "=", "math", ".", "exp", "(", "-", "1.", "*", "(", "distance", "/", "num_nodes", ")", ")", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.edit_distance": [[196, 199], ["numpy.sum", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "edit_distance", "(", "path_encoding_1", ",", "path_endocing_2", ")", ":", "\n", "    ", "distance", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "path_encoding_1", ")", "!=", "np", ".", "array", "(", "path_endocing_2", ")", ")", "*", "1.0", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.generate_min_vals": [[201, 212], ["p1.view.view", "p2.view.view", "torch.min", "p1.view.size", "p1.view.size", "p2.view.size", "p2.view.size", "torch.sum().int", "range", "torch.sum", "dist.size", "torch.abs"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "generate_min_vals", "(", "p1", ",", "p2", ",", "return_matrix", "=", "False", ")", ":", "\n", "    ", "p1", "=", "p1", ".", "view", "(", "1", ",", "p1", ".", "size", "(", "0", ")", ",", "p1", ".", "size", "(", "1", ")", ")", "\n", "p2", "=", "p2", ".", "view", "(", "p2", ".", "size", "(", "0", ")", ",", "1", ",", "p2", ".", "size", "(", "1", ")", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "p1", "-", "p2", ")", ",", "dim", "=", "-", "1", ")", ".", "int", "(", ")", ".", "T", "\n", "eigen_index", "=", "[", "i", "for", "i", "in", "range", "(", "dist", ".", "size", "(", "0", ")", ")", "]", "\n", "dist", "[", "eigen_index", ",", "eigen_index", "]", "=", "100", "\n", "min_vals", ",", "min_indices", "=", "torch", ".", "min", "(", "dist", ",", "dim", "=", "1", ")", "\n", "if", "return_matrix", ":", "\n", "        ", "return", "dist", "\n", "", "else", ":", "\n", "        ", "return", "min_vals", ",", "min_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.analysis_matrix": [[214, 219], ["dist_matrix.numpy", "range", "numpy.min", "print", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "", "def", "analysis_matrix", "(", "dist_matrix", ")", ":", "\n", "    ", "dist_matrix_np", "=", "dist_matrix", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "dist_matrix_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "min_val", "=", "np", ".", "min", "(", "dist_matrix_np", "[", "i", ",", ":", "]", ")", "\n", "print", "(", "min_val", ",", "np", ".", "sum", "(", "dist_matrix_np", "[", "i", ",", ":", "]", "==", "min_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_reverse": [[221, 249], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "", "def", "nasbench2graph_reverse", "(", "data", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "OPS", "=", "{", "\n", "'input'", ":", "0", ",", "\n", "'conv3x3-bn-relu'", ":", "1", ",", "\n", "'conv1x1-bn-relu'", ":", "2", ",", "\n", "'maxpool3x3'", ":", "3", ",", "\n", "'output'", ":", "4", ",", "\n", "'isolate'", ":", "5", "\n", "}", "\n", "\n", "NUM_VERTICES", "=", "7", "\n", "\n", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "if", "reverse", ":", "\n", "        ", "matrix", "=", "matrix", ".", "T", "\n", "", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "6", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.gen_batch_idx": [[251, 261], ["len", "range", "math.ceil", "idx_batch_list.append", "idx_batch_list.append"], "function", ["None"], ["", "def", "gen_batch_idx", "(", "idx_list", ",", "batch_size", ")", ":", "\n", "    ", "ds_len", "=", "len", "(", "idx_list", ")", "\n", "idx_batch_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "math", ".", "ceil", "(", "ds_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "*", "batch_size", ">", "ds_len", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "", "return", "idx_batch_list", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.isolated.contains_isolated_nodes": [[7, 22], ["num_nodes.maybe_num_nodes", "isolated..", "torch.unique().size", "torch.unique", "torch.cat"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes"], ["def", "contains_isolated_nodes", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` contains\n    isolated nodes.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: bool\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "(", "row", ",", "col", ")", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "\n", "return", "torch", ".", "unique", "(", "torch", ".", "cat", "(", "(", "row", ",", "col", ")", ")", ")", ".", "size", "(", "0", ")", "<", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.isolated.remove_isolated_nodes": [[24, 68], ["num_nodes.maybe_num_nodes", "isolated..", "torch.zeros", "torch.full", "torch.arange", "torch.zeros_like", "torch.full_like", "torch.arange", "torch.cat", "torch.zeros.sum", "loop_edge_index.size", "torch.cat", "torch.cat.view"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "remove_isolated_nodes", "(", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Removes the isolated nodes from the graph given by :attr:`edge_index`\n    with optional edge attributes :attr:`edge_attr`.\n    In addition, returns a mask of shape :obj:`[num_nodes]` to manually filter\n    out isolated node features later on.\n    Self-loops are preserved for non-isolated nodes.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (LongTensor, Tensor, BoolTensor)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "out", "=", "segregate_self_loops", "(", "edge_index", ",", "edge_attr", ")", "\n", "edge_index", ",", "edge_attr", ",", "loop_edge_index", ",", "loop_edge_attr", "=", "out", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "mask", "[", "edge_index", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "\n", "assoc", "=", "torch", ".", "full", "(", "(", "num_nodes", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "mask", ".", "device", ")", "\n", "assoc", "[", "mask", "]", "=", "torch", ".", "arange", "(", "mask", ".", "sum", "(", ")", ",", "device", "=", "assoc", ".", "device", ")", "\n", "edge_index", "=", "assoc", "[", "edge_index", "]", "\n", "\n", "loop_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "loop_mask", "[", "loop_edge_index", "[", "0", "]", "]", "=", "1", "\n", "loop_mask", "=", "loop_mask", "&", "mask", "\n", "loop_assoc", "=", "torch", ".", "full_like", "(", "assoc", ",", "-", "1", ")", "\n", "loop_assoc", "[", "loop_edge_index", "[", "0", "]", "]", "=", "torch", ".", "arange", "(", "loop_edge_index", ".", "size", "(", "1", ")", ",", "\n", "device", "=", "loop_assoc", ".", "device", ")", "\n", "loop_idx", "=", "loop_assoc", "[", "loop_mask", "]", "\n", "loop_edge_index", "=", "assoc", "[", "loop_edge_index", "[", ":", ",", "loop_idx", "]", "]", "\n", "\n", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", ",", "loop_edge_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "        ", "loop_edge_attr", "=", "loop_edge_attr", "[", "loop_idx", "]", "\n", "edge_attr", "=", "torch", ".", "cat", "(", "[", "edge_attr", ",", "loop_edge_attr", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "edge_index", ",", "edge_attr", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes": [[1, 3], ["index.max().item", "index.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["def", "maybe_num_nodes", "(", "index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "return", "index", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "num_nodes", "is", "None", "else", "num_nodes", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax": [[6, 29], ["num_nodes.maybe_num_nodes", "out.exp.exp", "torch_scatter.scatter_max", "torch_scatter.scatter_add"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes"], ["def", "softmax", "(", "src", ",", "index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Computes a sparsely evaluated softmax.\n    Given a value tensor :attr:`src`, this function first groups the values\n    along the first dimension based on the indices specified in :attr:`index`,\n    and then proceeds to compute the softmax individually for each group.\n\n    Args:\n        src (Tensor): The source tensor.\n        index (LongTensor): The indices of elements for applying the softmax.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`index`. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "index", ",", "num_nodes", ")", "\n", "\n", "out", "=", "src", "-", "scatter_max", "(", "src", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "[", "0", "]", "[", "index", "]", "\n", "out", "=", "out", ".", "exp", "(", ")", "\n", "out", "=", "out", "/", "(", "\n", "scatter_add", "(", "out", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "[", "index", "]", "+", "1e-16", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.loop.contains_self_loops": [[6, 18], ["mask.sum().item", "mask.sum"], "function", ["None"], ["def", "contains_self_loops", "(", "edge_index", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` contains\n    self-loops.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n\n    :rtype: bool\n    \"\"\"", "\n", "row", ",", "col", "=", "edge_index", "\n", "mask", "=", "row", "==", "col", "\n", "return", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.loop.remove_self_loops": [[20, 37], ["None"], "function", ["None"], ["", "def", "remove_self_loops", "(", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Removes every self-loop in the graph given by :attr:`edge_index`, so\n    that :math:`(i,i) \\not\\in \\mathcal{E}` for every :math:`i \\in \\mathcal{V}`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "row", ",", "col", "=", "edge_index", "\n", "mask", "=", "row", "!=", "col", "\n", "edge_attr", "=", "edge_attr", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "mask", "]", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "\n", "return", "edge_index", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.loop.segregate_self_loops": [[39, 60], ["None"], "function", ["None"], ["", "def", "segregate_self_loops", "(", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Segregates self-loops from the graph.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`, :class:`LongTensor`,\n        :class:`Tensor`)\n    \"\"\"", "\n", "\n", "mask", "=", "edge_index", "[", "0", "]", "!=", "edge_index", "[", "1", "]", "\n", "inv_mask", "=", "~", "mask", "\n", "\n", "loop_edge_index", "=", "edge_index", "[", ":", ",", "inv_mask", "]", "\n", "loop_edge_attr", "=", "None", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "inv_mask", "]", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "edge_attr", "=", "None", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "mask", "]", "\n", "\n", "return", "edge_index", ",", "edge_attr", ",", "loop_edge_index", ",", "loop_edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.loop.add_self_loops": [[62, 94], ["num_nodes.maybe_num_nodes", "torch.arange", "loop_index.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat.new_full", "torch.cat", "loop_index.unsqueeze().repeat.unsqueeze", "torch.cat.numel", "torch.cat.size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes"], ["", "def", "add_self_loops", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "fill_value", "=", "1", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Adds a self-loop :math:`(i,i) \\in \\mathcal{E}` to every node\n    :math:`i \\in \\mathcal{V}` in the graph given by :attr:`edge_index`.\n    In case the graph is weighted, self-loops will be added with edge weights\n    denoted by :obj:`fill_value`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_weight (Tensor, optional): One-dimensional edge weights.\n            (default: :obj:`None`)\n        fill_value (int, optional): If :obj:`edge_weight` is not :obj:`None`,\n            will add self-loops with edge weights of :obj:`fill_value` to the\n            graph. (default: :obj:`1`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "loop_index", "=", "torch", ".", "arange", "(", "0", ",", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "loop_index", "=", "loop_index", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "if", "edge_weight", "is", "not", "None", ":", "\n", "        ", "assert", "edge_weight", ".", "numel", "(", ")", "==", "edge_index", ".", "size", "(", "1", ")", "\n", "loop_weight", "=", "edge_weight", ".", "new_full", "(", "(", "num_nodes", ",", ")", ",", "fill_value", ")", "\n", "edge_weight", "=", "torch", ".", "cat", "(", "[", "edge_weight", ",", "loop_weight", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", ",", "loop_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "edge_index", ",", "edge_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.loop.add_remaining_self_loops": [[96, 139], ["num_nodes.maybe_num_nodes", "torch.arange", "loop_index.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.full", "torch.cat", "torch.cat.numel", "torch.cat.size", "remaining_edge_weight.numel", "loop_index.unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes"], ["", "def", "add_remaining_self_loops", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "fill_value", "=", "1", ",", "\n", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Adds remaining self-loop :math:`(i,i) \\in \\mathcal{E}` to every node\n    :math:`i \\in \\mathcal{V}` in the graph given by :attr:`edge_index`.\n    In case the graph is weighted and already contains a few self-loops, only\n    non-existent self-loops will be added with edge weights denoted by\n    :obj:`fill_value`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_weight (Tensor, optional): One-dimensional edge weights.\n            (default: :obj:`None`)\n        fill_value (int, optional): If :obj:`edge_weight` is not :obj:`None`,\n            will add self-loops with edge weights of :obj:`fill_value` to the\n            graph. (default: :obj:`1`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: (:class:`LongTensor`, :class:`Tensor`)\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "\n", "mask", "=", "row", "!=", "col", "\n", "\n", "if", "edge_weight", "is", "not", "None", ":", "\n", "        ", "assert", "edge_weight", ".", "numel", "(", ")", "==", "edge_index", ".", "size", "(", "1", ")", "\n", "inv_mask", "=", "~", "mask", "\n", "\n", "loop_weight", "=", "torch", ".", "full", "(", "\n", "(", "num_nodes", ",", ")", ",", "fill_value", ",", "\n", "dtype", "=", "None", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "remaining_edge_weight", "=", "edge_weight", "[", "inv_mask", "]", "\n", "if", "remaining_edge_weight", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "loop_weight", "[", "row", "[", "inv_mask", "]", "]", "=", "remaining_edge_weight", "\n", "", "edge_weight", "=", "torch", ".", "cat", "(", "[", "edge_weight", "[", "mask", "]", ",", "loop_weight", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "loop_index", "=", "torch", ".", "arange", "(", "0", ",", "num_nodes", ",", "dtype", "=", "row", ".", "dtype", ",", "device", "=", "row", ".", "device", ")", "\n", "loop_index", "=", "loop_index", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", "\n", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", "[", ":", ",", "mask", "]", ",", "loop_index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "edge_index", ",", "edge_weight", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.undirected.is_undirected": [[7, 22], ["num_nodes.maybe_num_nodes", "torch_sparse.coalesce", "undirected.to_undirected", "edge_index.size", "to_undirected.size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.undirected.to_undirected"], ["def", "is_undirected", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns :obj:`True` if the graph given by :attr:`edge_index` is\n    undirected.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: bool\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "edge_index", ",", "_", "=", "coalesce", "(", "edge_index", ",", "None", ",", "num_nodes", ",", "num_nodes", ")", "\n", "undirected_edge_index", "=", "to_undirected", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "return", "edge_index", ".", "size", "(", "1", ")", "==", "undirected_edge_index", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.undirected.to_undirected": [[24, 44], ["num_nodes.maybe_num_nodes", "torch.stack", "torch_sparse.coalesce", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce"], ["", "def", "to_undirected", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Converts the graph given by :attr:`edge_index` to an undirected graph,\n    so that :math:`(j,i) \\in \\mathcal{E}` for every edge :math:`(i,j) \\in\n    \\mathcal{E}`.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n    :rtype: :class:`LongTensor`\n    \"\"\"", "\n", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "row", ",", "col", "=", "torch", ".", "cat", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "edge_index", ",", "_", "=", "coalesce", "(", "edge_index", ",", "None", ",", "num_nodes", ",", "num_nodes", ")", "\n", "\n", "return", "edge_index", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.to_dense_batch.to_dense_batch": [[5, 50], ["torch_scatter.scatter_add", "torch.cat", "torch_scatter.scatter_add.max().item", "torch.arange", "x.new_full", "out.view.view", "torch.zeros", "torch.ones.view", "torch.ones", "batch[].item", "batch.new_ones", "batch.size", "x.size", "x.unsqueeze", "x.size", "batch.new_zeros", "torch_scatter.scatter_add.cumsum", "torch_scatter.scatter_add.max", "list", "x.size", "list", "x.size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["def", "to_dense_batch", "(", "x", ",", "batch", "=", "None", ",", "fill_value", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Given a sparse batch of node features\n    :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}` (with\n    :math:`N_i` indicating the number of nodes in graph :math:`i`), creates a\n    dense node feature tensor\n    :math:`\\mathbf{X} \\in \\mathbb{R}^{B \\times N_{\\max} \\times F}` (with\n    :math:`N_{\\max} = \\max_i^B N_i`).\n    In addition, a second tensor holding\n    :math:`[N_1, \\ldots, N_B] \\in \\mathbb{N}^B` is returned.\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor, optional): Batch vector\n            :math:`\\mathbf{b} \\in {\\{ 0, \\ldots, B-1\\}}^N`, which assigns each\n            node to a specific example. (default: :obj:`None`)\n        fill_value (float, optional): The value for invalid entries in the\n            resulting dense output tensor. (default: :obj:`0`)\n\n    :rtype: (:class:`Tensor`, :class:`BoolTensor`)\n    \"\"\"", "\n", "if", "batch", "is", "None", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "1", ",", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", ".", "unsqueeze", "(", "0", ")", ",", "mask", "\n", "\n", "", "batch_size", "=", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "num_nodes", "=", "scatter_add", "(", "batch", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ")", ",", "batch", ",", "dim", "=", "0", ",", "\n", "dim_size", "=", "batch_size", ")", "\n", "cum_nodes", "=", "torch", ".", "cat", "(", "[", "batch", ".", "new_zeros", "(", "1", ")", ",", "num_nodes", ".", "cumsum", "(", "dim", "=", "0", ")", "]", ")", "\n", "max_num_nodes", "=", "num_nodes", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "idx", "=", "torch", ".", "arange", "(", "batch", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "idx", "=", "(", "idx", "-", "cum_nodes", "[", "batch", "]", ")", "+", "(", "batch", "*", "max_num_nodes", ")", "\n", "\n", "size", "=", "[", "batch_size", "*", "max_num_nodes", "]", "+", "list", "(", "x", ".", "size", "(", ")", ")", "[", "1", ":", "]", "\n", "out", "=", "x", ".", "new_full", "(", "size", ",", "fill_value", ")", "\n", "out", "[", "idx", "]", "=", "x", "\n", "out", "=", "out", ".", "view", "(", "[", "batch_size", ",", "max_num_nodes", "]", "+", "list", "(", "x", ".", "size", "(", ")", ")", "[", "1", ":", "]", ")", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "batch_size", "*", "max_num_nodes", ",", "dtype", "=", "torch", ".", "bool", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "mask", "=", "mask", ".", "view", "(", "batch_size", ",", "max_num_nodes", ")", "\n", "\n", "return", "out", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_": [[5, 42], ["getattr", "getattr.", "isinstance", "torch.is_floating_point", "getattr."], "function", ["None"], ["def", "scatter_", "(", "name", ",", "src", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Aggregates all values from the :attr:`src` tensor at the indices\n    specified in the :attr:`index` tensor along the first dimension.\n    If multiple indices reference the same location, their contributions\n    are aggregated according to :attr:`name` (either :obj:`\"add\"`,\n    :obj:`\"mean\"` or :obj:`\"max\"`).\n\n    Args:\n        name (string): The aggregation to use (:obj:`\"add\"`, :obj:`\"mean\"`,\n            :obj:`\"max\"`).\n        src (Tensor): The source tensor.\n        index (LongTensor): The indices of elements to scatter.\n        dim (int, optional): The axis along which to index. (default: :obj:`0`)\n        dim_size (int, optional): Automatically create output tensor with size\n            :attr:`dim_size` in the first dimension. If set to :attr:`None`, a\n            minimal sized output tensor is returned. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "assert", "name", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "if", "name", "==", "'max'", ":", "\n", "        ", "op", "=", "torch", ".", "finfo", "if", "torch", ".", "is_floating_point", "(", "src", ")", "else", "torch", ".", "iinfo", "\n", "fill_value", "=", "op", "(", "src", ".", "dtype", ")", ".", "min", "\n", "", "else", ":", "\n", "        ", "fill_value", "=", "0", "\n", "\n", "", "op", "=", "getattr", "(", "torch_scatter", ",", "'scatter_{}'", ".", "format", "(", "name", ")", ")", "\n", "out", "=", "op", "(", "src", ",", "index", ",", "dim", ",", "None", ",", "dim_size", ",", "fill_value", ")", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "        ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "if", "name", "==", "'max'", ":", "\n", "        ", "out", "[", "out", "==", "fill_value", "]", "=", "0", "\n", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.uniform": [[4, 8], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["def", "uniform", "(", "size", ",", "tensor", ")", ":", "\n", "    ", "bound", "=", "1.0", "/", "math", ".", "sqrt", "(", "size", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.kaiming_uniform": [[10, 14], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["", "", "def", "kaiming_uniform", "(", "tensor", ",", "fan", ",", "a", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "6", "/", "(", "(", "1", "+", "a", "**", "2", ")", "*", "fan", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.glorot": [[16, 20], ["math.sqrt", "tensor.data.uniform_", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "glorot", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "tensor", ".", "size", "(", "-", "2", ")", "+", "tensor", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros": [[22, 25], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "zeros", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones": [[27, 30], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "ones", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.normal": [[32, 35], ["tensor.data.normal_"], "function", ["None"], ["", "", "def", "normal", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.reset": [[37, 48], ["hasattr", "item.reset_parameters", "hasattr", "nn.children", "inits.reset._reset"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "", "def", "reset", "(", "nn", ")", ":", "\n", "    ", "def", "_reset", "(", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "item", ",", "'reset_parameters'", ")", ":", "\n", "            ", "item", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "if", "nn", "is", "not", "None", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "'children'", ")", "and", "len", "(", "list", "(", "nn", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "for", "item", "in", "nn", ".", "children", "(", ")", ":", "\n", "                ", "_reset", "(", "item", ")", "\n", "", "", "else", ":", "\n", "            ", "_reset", "(", "nn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTorch.__init__": [[12, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "total_layers.append", "enumerate", "torch.Linear", "torch.Linear", "torch.Linear", "total_layers.append", "mlp_trainer.MetaNeuralnetTorch.add_module", "mlp_trainer.MetaNeuralnetTorch.model_keys.append", "total_layers.append", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_layer", ",", "layer_width", ")", ":", "\n", "        ", "super", "(", "MetaNeuralnetTorch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "total_layers", "=", "[", "]", "\n", "self", ".", "input_layer", "=", "nn", ".", "Linear", "(", "in_channel", ",", "layer_width", "[", "0", "]", ")", "\n", "total_layers", ".", "append", "(", "self", ".", "input_layer", ")", "\n", "self", ".", "model_keys", "=", "[", "]", "\n", "# for i in range(1, num_layer):", "\n", "for", "idx", ",", "layer_w", "in", "enumerate", "(", "layer_width", ")", ":", "\n", "            ", "if", "idx", "==", "len", "(", "layer_width", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "self", ".", "add_module", "(", "'layer_%d'", "%", "(", "idx", "+", "1", ")", ",", "nn", ".", "Linear", "(", "layer_width", "[", "idx", "]", ",", "layer_width", "[", "idx", "+", "1", "]", ")", ")", "\n", "self", ".", "model_keys", ".", "append", "(", "'layer_%d'", "%", "(", "idx", "+", "1", ")", ")", "\n", "total_layers", ".", "append", "(", "getattr", "(", "self", ",", "'layer_%d'", "%", "(", "idx", "+", "1", ")", ")", ")", "\n", "", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "layer_width", "[", "-", "1", "]", ",", "1", ")", "\n", "total_layers", ".", "append", "(", "self", ".", "output_layer", ")", "\n", "for", "layer", "in", "total_layers", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTorch.forward": [[31, 37], ["torch.relu", "torch.relu", "torch.relu", "mlp_trainer.MetaNeuralnetTorch.output_layer", "mlp_trainer.MetaNeuralnetTorch.input_layer", "torch.relu", "torch.relu", "torch.relu", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "input_layer", "(", "x", ")", ")", "\n", "for", "k", "in", "self", ".", "model_keys", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "k", ")", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.__init__": [[40, 48], ["mlp_trainer.MetaNeuralnetTorch", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "mlp_trainer.MetaNeuralnetTrainer.net.to", "mlp_trainer.MetaNeuralnetTrainer.net.parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_layer", ",", "layer_width", ",", "lr", ",", "regularization", ",", "epochs", ",", "batch_size", ",", "gpu", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "MetaNeuralnetTorch", "(", "in_channel", ",", "num_layer", ",", "layer_width", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "weight_decay", "=", "regularization", ")", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda: %d'", "%", "gpu", ")", "\n", "self", ".", "net", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train": [[49, 75], ["mlp_trainer.MetaNeuralnetTrainer.net.train", "range", "mlp_trainer.MetaNeuralnetTrainer.train_error", "list", "random.shuffle", "nas_lib.utils.utils_data.gen_batch_idx", "mlp_trainer.MetaNeuralnetTrainer.logger.info", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "train_d.to.to.to", "target_d.to.to.to", "mlp_trainer.MetaNeuralnetTrainer.net", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "mlp_trainer.MetaNeuralnetTrainer.optimizer.zero_grad", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "mlp_trainer.MetaNeuralnetTrainer.optimizer.step", "data_list.append", "target_list.append", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "mlp_trainer.MetaNeuralnetTrainer.item"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train_error", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step"], ["", "def", "train", "(", "self", ",", "train_data", ",", "target_data", ")", ":", "\n", "        ", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "train_data", ".", "shape", "[", "0", "]", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "for", "batch", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch", ":", "\n", "                    ", "data_list", ".", "append", "(", "train_data", "[", "idx", "]", ")", "\n", "target_list", ".", "append", "(", "target_data", "[", "idx", "]", ")", "\n", "", "train_d", "=", "torch", ".", "tensor", "(", "data_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "target_d", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "train_d", "=", "train_d", ".", "to", "(", "self", ".", "device", ")", "\n", "target_d", "=", "target_d", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "net", "(", "train_d", ")", "\n", "out", "=", "torch", ".", "squeeze", "(", "out", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "out", "-", "target_d", ")", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "error", "=", "self", ".", "train_error", "(", "train_data", ",", "target_data", ")", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Meta neural network training loss is %.5f'", "%", "error", ".", "item", "(", ")", ")", "\n", "", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.pred": [[76, 92], ["mlp_trainer.MetaNeuralnetTrainer.net.eval", "list", "nas_lib.utils.utils_data.gen_batch_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "val_d.to.to.to", "mlp_trainer.MetaNeuralnetTrainer.net", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "pred_list.append", "data_list.append"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["", "def", "pred", "(", "self", ",", "val_data", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "val_data", ")", ")", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "data_list", ".", "append", "(", "val_data", "[", "idx", "]", ")", "\n", "", "val_d", "=", "torch", ".", "tensor", "(", "data_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "val_d", "=", "val_d", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "net", "(", "val_d", ")", "\n", "out", "=", "torch", ".", "squeeze", "(", "out", ",", "dim", "=", "1", ")", "\n", "pred_list", ".", "append", "(", "out", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train_error": [[93, 98], ["mlp_trainer.MetaNeuralnetTrainer.pred().cpu().numpy", "numpy.array", "numpy.mean", "numpy.abs", "mlp_trainer.MetaNeuralnetTrainer.pred().cpu", "mlp_trainer.MetaNeuralnetTrainer.pred"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred"], ["", "def", "train_error", "(", "self", ",", "train_data", ",", "target_data", ")", ":", "\n", "        ", "output", "=", "self", ".", "pred", "(", "train_data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target_data", "=", "np", ".", "array", "(", "target_data", ")", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "output", "-", "target_data", ")", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.fit_g": [[99, 120], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "time.time", "mlp_trainer.MetaNeuralnetTrainer.train", "mlp_trainer.MetaNeuralnetTrainer.pred", "pred.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "time.time", "nas_lib.utils.comm.get_spearmanr_coorlection", "nas_lib.utils.comm.get_kendalltau_coorlection", "mlp_trainer.MetaNeuralnetTrainer.logger.info", "print", "pred.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "pred.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "def", "fit_g", "(", "self", ",", "ytrain", ",", "train_data", ",", "ytest", ",", "test_data", ")", ":", "\n", "        ", "ytrain", "=", "np", ".", "array", "(", "ytrain", ")", "\n", "train_data", "=", "np", ".", "array", "(", "train_data", ")", "\n", "ytest", "=", "np", ".", "array", "(", "ytest", ")", "\n", "test_data", "=", "np", ".", "array", "(", "test_data", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "train", "(", "train_data", ",", "ytrain", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "pred", "=", "self", ".", "pred", "(", "test_data", ")", "\n", "pred", "=", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "s_t", "=", "get_spearmanr_coorlection", "(", "pred", ",", "ytest", ")", "[", "0", "]", "\n", "k_t", "=", "get_kendalltau_coorlection", "(", "pred", ",", "ytest", ")", "[", "0", "]", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Training time cost: {duration}, Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Training time cost: {duration}, '", "\n", "f'Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "return", "s_t", ",", "k_t", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer.__init__": [[13, 32], ["torch.nn.Module.__init__", "nas_lib.predictors_compare.SemiNAS.controller.NAO", "torch.device", "torch.device", "torch.device", "torch.device", "semi_nas_trainer.semi_nas_trainer.predictor.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "semi_nas_trainer.semi_nas_trainer.predictor.parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "args", ",", "logger", ")", ":", "\n", "        ", "super", "(", "semi_nas_trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictor", "=", "NAO", "(", "\n", "params", "[", "'encoder_layers'", "]", ",", "\n", "params", "[", "'decoder_layers'", "]", ",", "\n", "params", "[", "'mlp_layers'", "]", ",", "\n", "params", "[", "'hidden_size'", "]", ",", "\n", "params", "[", "'mlp_hidden_size'", "]", ",", "\n", "params", "[", "'vocab_size'", "]", ",", "\n", "params", "[", "'dropout'", "]", ",", "\n", "params", "[", "'source_length'", "]", ",", "\n", "params", "[", "'encoder_length'", "]", ",", "\n", "params", "[", "'decoder_length'", "]", ",", "\n", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{args.gpu}'", ")", "\n", "self", ".", "predictor", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "predictor", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'lr'", "]", ",", "weight_decay", "=", "params", "[", "'l2_reg'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer.forward": [[33, 35], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer.fit_g": [[36, 72], ["nas_lib.predictors_compare.SemiNAS.utils.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "nas_lib.predictors_compare.SemiNAS.utils.ControllerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "semi_nas_trainer.semi_nas_trainer.controller_train", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "semi_nas_trainer.semi_nas_trainer.predictor.eval", "nas_lib.utils.comm.get_spearmanr_coorlection", "nas_lib.utils.comm.get_kendalltau_coorlection", "semi_nas_trainer.semi_nas_trainer.logger.info", "print", "sample[].to", "semi_nas_trainer.semi_nas_trainer.predictor.encoder", "predict_value.data.squeeze().tolist", "predict_value.data.squeeze"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer.controller_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "fit_g", "(", "self", ",", "ytrain", ",", "train_archs", ",", "ytest", ",", "test_archs", ")", ":", "\n", "# min_val = min(ytrain)", "\n", "# max_val = max(ytrain)", "\n", "# train_target = [(i - min_val) / (max_val - min_val) for i in ytrain]", "\n", "# ytest_target = [(j - min_val) / (max_val - min_val) for j in ytest]", "\n", "        ", "train_target", "=", "ytrain", "\n", "ytest_target", "=", "ytest", "\n", "controller_train_dataset", "=", "utils", ".", "ControllerDataset", "(", "train_archs", ",", "train_target", ",", "True", ")", "\n", "controller_train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "controller_train_dataset", ",", "batch_size", "=", "self", ".", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "params", "[", "'epochs'", "]", "+", "1", ")", ":", "\n", "            ", "loss", ",", "mse", ",", "ce", "=", "self", ".", "controller_train", "(", "controller_train_queue", ",", "self", ".", "predictor", ",", "self", ".", "optimizer", ")", "\n", "# self.logger.info(\"epoch %04d train loss %.6f mse %.6f ce %.6f\", epoch, loss, mse, ce)", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "test_seq", "=", "[", "test_vec", "for", "test_vec", "in", "test_archs", "]", "\n", "controller_synthetic_dataset", "=", "utils", ".", "ControllerDataset", "(", "test_seq", ",", "None", ",", "False", ")", "\n", "controller_synthetic_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "controller_synthetic_dataset", ",", "\n", "batch_size", "=", "64", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "pred_test_target", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "predictor", ".", "eval", "(", ")", "\n", "for", "sample", "in", "controller_synthetic_queue", ":", "\n", "                ", "encoder_input", "=", "sample", "[", "'encoder_input'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "_", ",", "_", ",", "predict_value", "=", "self", ".", "predictor", ".", "encoder", "(", "encoder_input", ")", "\n", "pred_test_target", "+=", "predict_value", ".", "data", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "s_t", "=", "get_spearmanr_coorlection", "(", "pred_test_target", ",", "ytest_target", ")", "[", "0", "]", "\n", "k_t", "=", "get_kendalltau_coorlection", "(", "pred_test_target", ",", "ytest_target", ")", "[", "0", "]", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Training time cost: {duration}, Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Training time cost: {duration}, '", "\n", "f'Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "return", "s_t", ",", "k_t", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer.controller_train": [[73, 99], ["nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter", "nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter", "nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter", "model.train", "enumerate", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda", "optimizer.zero_grad", "model", "torch.mse_loss", "torch.mse_loss", "torch.nll_loss", "torch.nll_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda.size", "nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter.update", "nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter.update", "nas_lib.predictors_compare.SemiNAS.utils.AvgrageMeter.update", "predict_value.squeeze", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda.squeeze", "log_prob.contiguous().view", "nas_lib.predictors_compare.SemiNAS.utils.move_to_cuda.view", "model.parameters", "log_prob.size", "log_prob.contiguous"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.move_to_cuda", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.move_to_cuda", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.move_to_cuda", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.move_to_cuda", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contiguous"], ["", "def", "controller_train", "(", "self", ",", "train_queue", ",", "model", ",", "optimizer", ")", ":", "\n", "        ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "mse", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "nll", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "sample", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "            ", "encoder_input", "=", "utils", ".", "move_to_cuda", "(", "sample", "[", "'encoder_input'", "]", ",", "self", ".", "device", ")", "\n", "encoder_target", "=", "utils", ".", "move_to_cuda", "(", "sample", "[", "'encoder_target'", "]", ",", "self", ".", "device", ")", "\n", "decoder_input", "=", "utils", ".", "move_to_cuda", "(", "sample", "[", "'decoder_input'", "]", ",", "self", ".", "device", ")", "\n", "decoder_target", "=", "utils", ".", "move_to_cuda", "(", "sample", "[", "'decoder_target'", "]", ",", "self", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "predict_value", ",", "log_prob", ",", "arch", "=", "model", "(", "encoder_input", ",", "decoder_input", ")", "\n", "loss_1", "=", "F", ".", "mse_loss", "(", "predict_value", ".", "squeeze", "(", ")", ",", "encoder_target", ".", "squeeze", "(", ")", ")", "\n", "loss_2", "=", "F", ".", "nll_loss", "(", "log_prob", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "log_prob", ".", "size", "(", "-", "1", ")", ")", ",", "decoder_target", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "self", ".", "params", "[", "'trade_off'", "]", "*", "loss_1", "+", "(", "1", "-", "self", ".", "params", "[", "'trade_off'", "]", ")", "*", "loss_2", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "self", ".", "params", "[", "'grad_bound'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "n", "=", "encoder_input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "mse", ".", "update", "(", "loss_1", ".", "data", ",", "n", ")", "\n", "nll", ".", "update", "(", "loss_2", ".", "data", ",", "n", ")", "\n", "\n", "", "return", "objs", ".", "avg", ",", "mse", ".", "avg", ",", "nll", ".", "avg", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnCascadeNnpTrainer.__init__": [[36, 52], ["nas_lib.predictors_compare.NP_NAS.gcn_np_cas.NasBenchGCNNnpCasAgent", "nas_lib.predictors_compare.NP_NAS.gcn_np.NasBenchGCNNnpAgent", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "np_nas_trainer.make_agent_optimizer", "np_nas_trainer.make_agent_optimizer", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1.to", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2.to"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "None", ",", "epochs", "=", "300", ",", "input_dim", "=", "6", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "stage1", "=", "NasBenchGCNNnpCasAgent", "(", "input_dim", "=", "input_dim", ")", "\n", "self", ".", "stage2", "=", "NasBenchGCNNnpAgent", "(", "input_dim", "=", "input_dim", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "criterion_ce", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "optimizer_cls", "=", "make_agent_optimizer", "(", "self", ".", "stage1", ",", "base_lr", "=", "0.0002", ")", "\n", "self", ".", "optimizer_regress", "=", "make_agent_optimizer", "(", "self", ".", "stage2", ",", "base_lr", "=", "0.0001", ")", "\n", "self", ".", "scheduler_cls", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer_cls", ",", "\n", "eta_min", "=", "0", ",", "T_max", "=", "20", ")", "\n", "self", ".", "scheduler_regress", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer_regress", ",", "\n", "eta_min", "=", "0", ",", "T_max", "=", "20", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "stage1", ".", "to", "(", "device", ")", "\n", "self", ".", "stage2", ".", "to", "(", "device", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnCascadeNnpTrainer.fit": [[53, 137], ["nas_lib.utils.metric_logger.MetricLogger", "nas_lib.utils.metric_logger.MetricLogger", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1.train", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2.train", "range", "list", "random.shuffle", "utils.gen_batch_idx", "enumerate", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_cls_tensor.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1().squeeze", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.criterion_ce", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.optimizer_cls.zero_grad", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.backward", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.optimizer_cls.step", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.scheduler_cls.step", "nas_lib.utils.metric_logger.MetricLogger.update", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "val_tensor.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2().squeeze", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.optimizer_regress.zero_grad", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.backward", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.optimizer_regress.step", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.scheduler_regress.step", "nas_lib.utils.metric_logger.MetricLogger.update", "len", "gnn_lib.data.Data", "data_list.append", "gnn_lib.data.Data", "data_list_reverse.append", "target_list_cls.append", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.dim", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.unsequeeze_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gnn_lib.data.Data", "data_list.append", "gnn_lib.data.Data", "data_list_reverse.append", "target_list.append", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.dim", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.criterion", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.criterion", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1", "int", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.item", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2", "int", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.item", "edge_index[].long", "node_feature[].float", "edge_index_reverse[].long", "node_feature_reverse[].float", "edge_index[].long", "node_feature[].float", "edge_index_reverse[].long", "node_feature_reverse[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update"], ["", "def", "fit", "(", "self", ",", "edge_index", ",", "node_feature", ",", "edge_index_reverse", ",", "node_feature_reverse", ",", "val_accuracy", ",", "val_accuracy_cls", ")", ":", "\n", "        ", "meters_cls", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "meters_regerss", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "self", ".", "stage1", ".", "train", "(", ")", "\n", "self", ".", "stage2", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "10", ")", "\n", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "data_list_reverse", "=", "[", "]", "\n", "target_list_cls", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "g_d_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature_reverse", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list_reverse", ".", "append", "(", "g_d_reverse", ")", "\n", "target_list_cls", ".", "append", "(", "val_accuracy_cls", "[", "idx", "]", ")", "\n", "\n", "", "val_cls_tensor", "=", "torch", ".", "tensor", "(", "target_list_cls", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_cls_tensor", "=", "val_cls_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "pred_cls", "=", "self", ".", "stage1", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", ",", "batch_nodes_reverse", ",", "\n", "batch_edge_idx_reverse", ")", ".", "squeeze", "(", ")", "\n", "loss_stage1", "=", "self", ".", "criterion_ce", "(", "pred_cls", ",", "val_cls_tensor", ")", "\n", "self", ".", "optimizer_cls", ".", "zero_grad", "(", ")", "\n", "loss_stage1", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_cls", ".", "step", "(", ")", "\n", "self", ".", "scheduler_cls", ".", "step", "(", "epoch", "+", "int", "(", "i", "/", "30", ")", ")", "\n", "meters_cls", ".", "update", "(", "loss", "=", "loss_stage1", ".", "item", "(", ")", ")", "\n", "\n", "if", "pred_cls", ".", "dim", "(", ")", "==", "1", ":", "\n", "                    ", "pred_cls", ".", "unsequeeze_", "(", "dim", "=", "0", ")", "\n", "\n", "", "pred_max", "=", "torch", ".", "argmax", "(", "pred_cls", ",", "dim", "=", "1", ")", "\n", "if", "torch", ".", "sum", "(", "pred_max", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "data_list", "=", "[", "]", "\n", "data_list_reverse", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "k", ",", "idx", "in", "enumerate", "(", "batch_idx", ")", ":", "\n", "                    ", "if", "pred_max", "[", "k", "]", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "g_d_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature_reverse", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list_reverse", ".", "append", "(", "g_d_reverse", ")", "\n", "target_list", ".", "append", "(", "val_accuracy", "[", "idx", "]", ")", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_G", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "pred_regress", "=", "self", ".", "stage2", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_G", ",", "batch_nodes_reverse", ",", "\n", "batch_edge_idx_reverse", ")", ".", "squeeze", "(", ")", "\n", "if", "pred_regress", ".", "dim", "(", ")", "==", "0", ":", "\n", "                    ", "loss_stage2", "=", "self", ".", "criterion", "(", "pred_regress", ",", "val_tensor", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss_stage2", "=", "self", ".", "criterion", "(", "pred_regress", ",", "val_tensor", ")", "\n", "", "self", ".", "optimizer_regress", ".", "zero_grad", "(", ")", "\n", "loss_stage2", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_regress", ".", "step", "(", ")", "\n", "self", ".", "scheduler_regress", ".", "step", "(", "epoch", "+", "int", "(", "i", "/", "30", ")", ")", "\n", "meters_regerss", ".", "update", "(", "loss", "=", "loss_stage2", ".", "item", "(", ")", ")", "\n", "", "", "return", "meters_cls", ".", "meters", "[", "'loss'", "]", ".", "avg", ",", "meters_regerss", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnCascadeNnpTrainer.pred": [[138, 210], ["list", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1.eval", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2.eval", "utils.gen_batch_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1().squeeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "enumerate", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2().squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "pred_list.append", "gnn_lib.data.Data", "data_list.append", "gnn_lib.data.Data", "data_list_reverse.append", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.dim", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.unsqueeze_", "torch.argmax.dim", "torch.argmax.dim", "torch.argmax.unsqueeze_", "torch.argmax.unsqueeze_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gnn_lib.data.Data", "data_list.append", "gnn_lib.data.Data", "data_list_reverse.append", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.dim", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.unsqueeze_", "torch.zeros_like.size", "torch.zeros_like.size", "len", "torch.zeros_like.unsqueeze_", "torch.zeros_like.unsqueeze_", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage1", "np_nas_trainer.NasBenchGcnCascadeNnpTrainer.stage2", "torch.zeros_like.size", "torch.zeros_like.size", "edge_index[].long", "node_feature[].float", "edge_index_reverse[].long", "node_feature_reverse[].float", "edge_index[].long", "node_feature[].float", "edge_index_reverse[].long", "node_feature_reverse[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize"], ["", "def", "pred", "(", "self", ",", "edge_index", ",", "node_feature", ",", "edge_index_reverse", ",", "node_feature_reverse", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "self", ".", "stage1", ".", "eval", "(", ")", "\n", "self", ".", "stage2", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "data_list_reverse", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "g_d_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", "[", "idx", "]", ".", "long", "(", ")", ",", "\n", "x", "=", "node_feature_reverse", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list_reverse", ".", "append", "(", "g_d_reverse", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "pred_cls", "=", "self", ".", "stage1", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", ",", "batch_nodes_reverse", ",", "\n", "batch_edge_idx_reverse", ")", ".", "squeeze", "(", ")", "\n", "if", "pred_cls", ".", "dim", "(", ")", "==", "1", ":", "\n", "                    ", "pred_cls", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "", "pred_max", "=", "torch", ".", "argmax", "(", "pred_cls", ",", "dim", "=", "1", ")", "\n", "if", "pred_max", ".", "dim", "(", ")", "==", "0", ":", "\n", "                    ", "pred_max", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "", "if", "torch", ".", "sum", "(", "pred_max", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "data_list", "=", "[", "]", "\n", "data_list_reverse", "=", "[", "]", "\n", "for", "k", ",", "idx", "in", "enumerate", "(", "batch_idx", ")", ":", "\n", "                    ", "if", "pred_max", "[", "k", "]", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "g_d_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature_reverse", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list_reverse", ".", "append", "(", "g_d_reverse", ")", "\n", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "pred_regress", "=", "self", ".", "stage2", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx_g", ",", "batch_nodes_reverse", ",", "\n", "batch_edge_idx_reverse", ")", ".", "squeeze", "(", ")", "\n", "pred", "=", "torch", ".", "zeros_like", "(", "pred_max", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "pred_regress", ".", "dim", "(", ")", "==", "0", ":", "\n", "                    ", "pred_regress", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "# print(pred_max.size(), pred_regress.size(), pred.size())", "\n", "", "counter", "=", "0", "\n", "for", "j", "in", "range", "(", "pred", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "if", "pred_max", "[", "j", "]", "==", "0", ":", "\n", "                        ", "pred", "[", "j", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "pred", "[", "j", "]", "=", "pred_regress", "[", "counter", "]", "\n", "counter", "+=", "1", "\n", "", "", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnNnpTrainer.__init__": [[261, 272], ["nas_lib.predictors_compare.NP_NAS.gcn_np.NasBenchGCNNnpAgent", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "np_nas_trainer.make_agent_optimizer", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.device", "torch.device", "torch.device", "torch.device", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1.to"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "None", ",", "epochs", "=", "300", ",", "input_dim", "=", "6", ",", "params", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "stage1", "=", "NasBenchGCNNnpAgent", "(", "input_dim", "=", "input_dim", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "stage1", ",", "base_lr", "=", "params", "[", "'lr'", "]", ")", "\n", "self", ".", "lr", "=", "params", "[", "'lr'", "]", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "eta_min", "=", "0", ",", "T_max", "=", "20", ")", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{device}'", ")", "\n", "self", ".", "stage1", ".", "to", "(", "device", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnNnpTrainer.fit": [[273, 315], ["nas_lib.utils.metric_logger.MetricLogger", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1.train", "range", "list", "random.shuffle", "utils.gen_batch_idx", "enumerate", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1", "pred.squeeze.squeeze.squeeze", "np_nas_trainer.NasBenchGcnNnpTrainer.criterion", "np_nas_trainer.NasBenchGcnNnpTrainer.optimizer.zero_grad", "np_nas_trainer.NasBenchGcnNnpTrainer.backward", "np_nas_trainer.NasBenchGcnNnpTrainer.optimizer.step", "np_nas_trainer.NasBenchGcnNnpTrainer.scheduler.step", "nas_lib.utils.metric_logger.MetricLogger.update", "len", "gnn_lib.data.Data", "data_list.append", "gnn_lib.data.Data", "data_list_reverse.append", "target_list.append", "int", "np_nas_trainer.NasBenchGcnNnpTrainer.item", "edge_index[].long", "node_feature[].float", "edge_index_reverse[].long", "node_feature_reverse[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update"], ["", "def", "fit", "(", "self", ",", "edge_index", ",", "node_feature", ",", "edge_index_reverse", ",", "node_feature_reverse", ",", "val_accuracy", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "self", ".", "stage1", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "10", ")", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "data_list_reverse", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "g_d_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature_reverse", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list_reverse", ".", "append", "(", "g_d_reverse", ")", "\n", "target_list", ".", "append", "(", "val_accuracy", "[", "idx", "]", ")", "\n", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "pred", "=", "self", ".", "stage1", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ",", "batch_nodes_reverse", ",", "\n", "batch_edge_idx_reverse", ")", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "val_tensor", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "epoch", "+", "int", "(", "i", "/", "30", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnNnpTrainer.pred": [[316, 344], ["list", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1.eval", "utils.gen_batch_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "torch.normalize", "torch.normalize", "gnn_lib.data.Batch.from_data_list", "batch_reverse.to.to.to", "torch.normalize", "torch.normalize", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1().squeeze", "pred_list.append", "len", "np_nas_trainer.NasBenchGcnNnpTrainer.unsqueeze_", "np_nas_trainer.NasBenchGcnNnpTrainer.stage1", "np_nas_trainer.NasBenchGcnNnpTrainer.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize"], ["", "def", "pred", "(", "self", ",", "g_data_list", ",", "g_data_list_reverse", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "g_data_list", ")", ")", ")", "\n", "self", ".", "stage1", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "g_data_list", "[", "idx", "]", "for", "idx", "in", "batch_idx", "]", "\n", "data_list_reverse", "=", "[", "g_data_list_reverse", "[", "idx", "]", "for", "idx", "in", "batch_idx", "]", "\n", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "batch_nodes", "=", "F", ".", "normalize", "(", "batch_nodes", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_reverse", "=", "Batch", ".", "from_data_list", "(", "data_list_reverse", ")", "\n", "batch_reverse", "=", "batch_reverse", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ",", "batch_idx_reverse", "=", "batch_reverse", ".", "x", ",", "batch_reverse", ".", "edge_index", ",", "batch_reverse", ".", "batch", "\n", "batch_nodes_reverse", "=", "F", ".", "normalize", "(", "batch_nodes_reverse", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "pred", "=", "self", ".", "stage1", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ",", "\n", "batch_nodes_reverse", ",", "batch_edge_idx_reverse", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.NasBenchGcnNnpTrainer.fit_g": [[345, 363], ["time.time", "np_nas_trainer.NasBenchGcnNnpTrainer.fit", "np_nas_trainer.NasBenchGcnNnpTrainer.pred", "predictions.cpu().numpy.cpu().numpy.cpu().numpy", "time.time", "nas_lib.utils.comm.get_spearmanr_coorlection", "nas_lib.utils.comm.get_kendalltau_coorlection", "np_nas_trainer.NasBenchGcnNnpTrainer.logger.info", "print", "predictions.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "def", "fit_g", "(", "self", ",", "ytrain", ",", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "arch_data_edge_idx_reverse_list", ",", "\n", "arch_data_node_f_reverse_list", ",", "ytest", ",", "data_list", ",", "data_list_reverse", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "arch_data_edge_idx_reverse_list", ",", "\n", "arch_data_node_f_reverse_list", ",", "ytrain", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "predictions", "=", "self", ".", "pred", "(", "data_list", ",", "data_list_reverse", ")", "\n", "predictions", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "s_t", "=", "get_spearmanr_coorlection", "(", "predictions", ",", "ytest", ")", "[", "0", "]", "\n", "k_t", "=", "get_kendalltau_coorlection", "(", "predictions", ",", "ytest", ")", "[", "0", "]", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Training time cost: {duration}, Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Training time cost: {duration}, '", "\n", "f'Spearman Correlation: {s_t}, '", "\n", "f'Kendalltau Corrlation: {k_t}'", ")", "\n", "", "return", "s_t", ",", "k_t", ",", "duration", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer": [[15, 28], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["def", "make_agent_optimizer", "(", "model", ",", "base_lr", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "base_lr", "\n", "weight_decay", "=", "0.001", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "lr", "=", "base_lr", "\n", "weight_decay", "=", "0.0", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "base_lr", ",", "(", "0.0", ",", "0.9", ")", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.lr_step": [[30, 33], ["None"], "function", ["None"], ["", "def", "lr_step", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx": [[6, 16], ["len", "range", "math.ceil", "idx_batch_list.append", "idx_batch_list.append"], "function", ["None"], ["def", "gen_batch_idx", "(", "idx_list", ",", "batch_size", ")", ":", "\n", "    ", "ds_len", "=", "len", "(", "idx_list", ")", "\n", "idx_batch_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "math", ".", "ceil", "(", "ds_len", "/", "batch_size", ")", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "*", "batch_size", ">", "ds_len", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx_batch_list", ".", "append", "(", "idx_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "", "return", "idx_batch_list", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np_cas.NasBenchGCNNnpCasAgent.__init__": [[11, 40], ["agent.BaseAgent.__init__", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "layers.append", "layers.append", "layers.append", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "NasBenchGCNNnpCasAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dim", "=", "144", "\n", "dim2", "=", "128", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "input_dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv3", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "conv1_reverse", "=", "GCNConv", "(", "input_dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv2_reverse", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv3_reverse", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ")", "\n", "self", ".", "liner2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim2", ",", "2", ")", "\n", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "self", ".", "linear", ")", "\n", "layers", ".", "append", "(", "self", ".", "liner2", ")", "\n", "layers", ".", "append", "(", "self", ".", "out_layer", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np_cas.NasBenchGCNNnpCasAgent.forward": [[41, 43], ["gcn_np_cas.NasBenchGCNNnpCasAgent.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np_cas.NasBenchGCNNnpCasAgent.forward_batch": [[44, 61], ["gcn_np_cas.NasBenchGCNNnpCasAgent.bn1", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np_cas.NasBenchGCNNnpCasAgent.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np_cas.NasBenchGCNNnpCasAgent.bn3", "torch.dropout", "torch.dropout", "torch.dropout", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np_cas.NasBenchGCNNnpCasAgent.liner2", "gcn_np_cas.NasBenchGCNNnpCasAgent.out_layer", "gcn_np_cas.NasBenchGCNNnpCasAgent.linear", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv1", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv1_reverse", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv2", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv2_reverse", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv3", "gcn_np_cas.NasBenchGCNNnpCasAgent.conv3_reverse"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", ":", "\n", "        ", "x1", "=", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv1_reverse", "(", "data_reverse", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "dropout", "(", "x1", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "x2", "=", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv2_reverse", "(", "x1", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "dropout", "(", "x2", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "x3", "=", "(", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv3_reverse", "(", "x2", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "dropout", "(", "x3", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding", "=", "F", ".", "relu", "(", "self", ".", "linear", "(", "x_embedding", ")", ")", "\n", "x_embedding", "=", "F", ".", "dropout", "(", "x_embedding", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "output", "=", "self", ".", "liner2", "(", "x_embedding", ")", "\n", "output", "=", "self", ".", "out_layer", "(", "output", ")", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample": [[9, 11], ["ValueError"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'subclass should implement this method~~'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.forward": [[12, 14], ["ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'subclass should implement this method~~'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.train_agent": [[15, 17], ["ValueError"], "methods", ["None"], ["", "def", "train_agent", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'subclass should implement this method~~'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np.NasBenchGCNNnpAgent.__init__": [[9, 38], ["agent.BaseAgent.__init__", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "gnn_lib.GCNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "layers.append", "layers.append", "layers.append", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ")", ":", "\n", "        ", "super", "(", "NasBenchGCNNnpAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dim", "=", "144", "\n", "dim2", "=", "128", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "input_dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv3", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "conv1_reverse", "=", "GCNConv", "(", "input_dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv2_reverse", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "self", ".", "conv3_reverse", "=", "GCNConv", "(", "dim", ",", "dim", ",", "improved", "=", "False", ",", "cached", "=", "False", ")", "\n", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim2", ")", "\n", "self", ".", "liner2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim2", ",", "1", ")", "\n", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "self", ".", "linear", ")", "\n", "layers", ".", "append", "(", "self", ".", "liner2", ")", "\n", "layers", ".", "append", "(", "self", ".", "out_layer", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np.NasBenchGCNNnpAgent.forward": [[39, 41], ["gcn_np.NasBenchGCNNnpAgent.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.gcn_np.NasBenchGCNNnpAgent.forward_batch": [[42, 60], ["gcn_np.NasBenchGCNNnpAgent.bn1", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np.NasBenchGCNNnpAgent.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np.NasBenchGCNNnpAgent.bn3", "torch.dropout", "torch.dropout", "torch.dropout", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "gcn_np.NasBenchGCNNnpAgent.liner2", "gcn_np.NasBenchGCNNnpAgent.out_layer", "gcn_np.NasBenchGCNNnpAgent.linear", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "gcn_np.NasBenchGCNNnpAgent.conv1", "gcn_np.NasBenchGCNNnpAgent.conv1_reverse", "gcn_np.NasBenchGCNNnpAgent.conv2", "gcn_np.NasBenchGCNNnpAgent.conv2_reverse", "gcn_np.NasBenchGCNNnpAgent.conv3", "gcn_np.NasBenchGCNNnpAgent.conv3_reverse"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "data_reverse", ",", "edge_index_reverse", ")", ":", "\n", "        ", "x1", "=", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv1_reverse", "(", "data_reverse", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "dropout", "(", "x1", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "x2", "=", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv2_reverse", "(", "x1", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "dropout", "(", "x2", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "x3", "=", "(", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "conv3_reverse", "(", "x2", ",", "edge_index_reverse", ")", ")", ")", "*", "0.5", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "x3", "=", "F", ".", "dropout", "(", "x3", ",", "training", "=", "self", ".", "training", ",", "p", "=", "0.1", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding", "=", "F", ".", "relu", "(", "self", ".", "linear", "(", "x_embedding", ")", ")", "\n", "x_embedding", "=", "F", ".", "dropout", "(", "x_embedding", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "output", "=", "self", ".", "liner2", "(", "x_embedding", ")", "\n", "output", "=", "self", ".", "out_layer", "(", "output", ")", "\n", "# output = stretch_min(output, lower=0.1)", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.__init__": [[12, 44], ["torch.Module.__init__", "encoder.Encoder", "decoder.Decoder", "controller.NAO.flatten_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.flatten_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "encoder_layers", ",", "\n", "decoder_layers", ",", "\n", "mlp_layers", ",", "\n", "mlp_hidden_size", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", "decoder_length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NAO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "encoder_layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "encoder_length", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "decoder_layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "decoder_length", ",", "\n", ")", "\n", "\n", "self", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.flatten_parameters": [[45, 48], ["controller.NAO.encoder.rnn.flatten_parameters", "controller.NAO.decoder.rnn.flatten_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.flatten_parameters", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.flatten_parameters"], ["", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "self", ".", "decoder", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.forward": [[49, 54], ["controller.NAO.encoder", "controller.NAO.decoder", "arch_emb.unsqueeze", "arch_emb.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_variable", ",", "target_variable", "=", "None", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", ".", "encoder", "(", "input_variable", ")", "\n", "decoder_hidden", "=", "(", "arch_emb", ".", "unsqueeze", "(", "0", ")", ",", "arch_emb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "decoder_outputs", ",", "archs", "=", "self", ".", "decoder", "(", "target_variable", ",", "decoder_hidden", ",", "encoder_outputs", ")", "\n", "return", "predict_value", ",", "decoder_outputs", ",", "archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.controller.NAO.generate_new_arch": [[55, 61], ["controller.NAO.encoder.infer", "controller.NAO.decoder", "new_arch_emb.unsqueeze", "new_arch_emb.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.infer"], ["", "def", "generate_new_arch", "(", "self", ",", "input_variable", ",", "predict_lambda", "=", "1", ",", "direction", "=", "'-'", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", ",", "new_encoder_outputs", ",", "new_arch_emb", ",", "new_predict_value", "=", "self", ".", "encoder", ".", "infer", "(", "\n", "input_variable", ",", "predict_lambda", ",", "direction", "=", "direction", ")", "\n", "new_encoder_hidden", "=", "(", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ",", "new_arch_emb", ".", "unsqueeze", "(", "0", ")", ")", "\n", "decoder_outputs", ",", "new_archs", "=", "self", ".", "decoder", "(", "None", ",", "new_encoder_hidden", ",", "new_encoder_outputs", ")", "\n", "return", "new_archs", ",", "new_predict_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.__init__": [[13, 43], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "encoder.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "encoder.Encoder.mlp.append", "encoder.Encoder.mlp.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "mlp_layers", ",", "\n", "hidden_size", ",", "\n", "mlp_hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "source_length", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "mlp_layers", "=", "mlp_layers", "\n", "self", ".", "mlp_hidden_size", "=", "mlp_hidden_size", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "self", ".", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mlp_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "elif", "i", "==", "self", ".", "mlp_layers", "-", "1", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "mlp_hidden_size", ",", "self", ".", "mlp_hidden_size", ")", ")", "\n", "", "", "self", ".", "regressor", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.forward_predictor": [[44, 55], ["enumerate", "encoder.Encoder.regressor", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward_predictor", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.forward": [[56, 81], ["encoder.Encoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "encoder.Encoder.rnn", "encoder.Encoder.out_proj", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "enumerate", "encoder.Encoder.regressor", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "mlp_layer", "torch.relu", "torch.relu", "torch.relu", "math.sqrt", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "encoder_outputs", "=", "x", "\n", "encoder_hidden", "=", "hidden", "\n", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "arch_emb", "=", "x", "\n", "\n", "residual", "=", "x", "\n", "for", "i", ",", "mlp_layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "x", "=", "mlp_layer", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "mlp_layers", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "regressor", "(", "x", ")", "\n", "predict_value", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.infer": [[82, 96], ["encoder.Encoder.", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.normalize", "torch.normalize", "torch.normalize", "encoder.Encoder.forward_predictor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.encoder.Encoder.forward_predictor"], ["", "def", "infer", "(", "self", ",", "x", ",", "predict_lambda", ",", "direction", "=", "'-'", ")", ":", "\n", "        ", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", "=", "self", "(", "x", ")", "\n", "grads_on_outputs", "=", "torch", ".", "autograd", ".", "grad", "(", "predict_value", ",", "encoder_outputs", ",", "torch", ".", "ones_like", "(", "predict_value", ")", ")", "[", "0", "]", "\n", "if", "direction", "==", "'+'", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "+", "predict_lambda", "*", "grads_on_outputs", "\n", "", "elif", "direction", "==", "'-'", ":", "\n", "            ", "new_encoder_outputs", "=", "encoder_outputs", "-", "predict_lambda", "*", "grads_on_outputs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Direction must be + or -, got {} instead'", ".", "format", "(", "direction", ")", ")", "\n", "", "new_encoder_outputs", "=", "F", ".", "normalize", "(", "new_encoder_outputs", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_arch_emb", "=", "torch", ".", "mean", "(", "new_encoder_outputs", ",", "dim", "=", "1", ")", "\n", "new_arch_emb", "=", "F", ".", "normalize", "(", "new_arch_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "new_predict_value", "=", "self", ".", "forward_predictor", "(", "new_arch_emb", ")", "\n", "return", "encoder_outputs", ",", "encoder_hidden", ",", "arch_emb", ",", "predict_value", ",", "new_encoder_outputs", ",", "new_arch_emb", ",", "new_predict_value", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Attention.__init__": [[13, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "source_dim", "=", "None", ",", "output_dim", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "source_dim", "is", "None", ":", "\n", "            ", "source_dim", "=", "input_dim", "\n", "", "if", "output_dim", "is", "None", ":", "\n", "            ", "output_dim", "=", "input_dim", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "source_dim", "=", "source_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "source_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "input_dim", "+", "source_dim", ",", "output_dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Attention.forward": [[25, 47], ["input.size", "source_hids.size", "decoder.Attention.input_proj", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "torch.tanh().view", "source_hids.transpose", "torch.softmax().view.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "torch.softmax().view.view", "decoder.Attention.output_proj", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "source_len", "=", "source_hids", ".", "size", "(", "1", ")", "\n", "\n", "# (batch, tgt_len, input_dim) -> (batch, tgt_len, source_dim)", "\n", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# (batch, tgt_len, source_dim) * (batch, src_len, source_dim) -> (batch, tgt_len, src_len)", "\n", "attn", "=", "torch", ".", "bmm", "(", "x", ",", "source_hids", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "attn", "=", "F", ".", "softmax", "(", "attn", ".", "view", "(", "-", "1", ",", "source_len", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "source_len", ")", "\n", "\n", "# (batch, tgt_len, src_len) * (batch, src_len, source_dim) -> (batch, tgt_len, source_dim)", "\n", "mix", "=", "torch", ".", "bmm", "(", "attn", ",", "source_hids", ")", "\n", "\n", "# concat -> (batch, tgt_len, source_dim + input_dim)", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "mix", ",", "input", ")", ",", "dim", "=", "2", ")", "\n", "# output -> (batch, tgt_len, output_dim)", "\n", "output", "=", "torch", ".", "tanh", "(", "self", ".", "output_proj", "(", "combined", ".", "view", "(", "-", "1", ",", "self", ".", "input_dim", "+", "self", ".", "source_dim", ")", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "output_dim", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Decoder.__init__": [[51, 75], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Embedding", "decoder.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "int", "range", "math.floor", "decoder.Decoder.offsets.append", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "hidden_size", ",", "\n", "vocab_size", ",", "\n", "dropout", ",", "\n", "length", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "sos_id", "=", "SOS_ID", "\n", "self", ".", "eos_id", "=", "EOS_ID", "\n", "self", ".", "init_input", "=", "None", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "vocab_size", ")", "\n", "self", ".", "n", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "(", "self", ".", "length", "+", "1", ")", "*", "2", ")", ")", ")", "\n", "self", ".", "offsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "offsets", ".", "append", "(", "(", "i", "+", "3", ")", "*", "i", "//", "2", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Decoder.forward": [[76, 126], ["decoder.Decoder._init_state", "encoder_hidden[].size", "encoder_hidden[].new().fill_().long", "encoder_hidden[].new().fill_().long", "range", "torch.dropout.size", "torch.dropout.size", "decoder.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "decoder.Decoder.rnn", "decoder.Decoder.attention", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "predicted_softmax.view.view.view", "decoder.Decoder.embedding", "torch.dropout", "torch.dropout", "torch.dropout", "decoder.Decoder.rnn", "decoder.Decoder.attention", "decoder.Decoder.out", "decoder.Decoder.forward.decode"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Decoder._init_state"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_hidden", "=", "None", ",", "encoder_outputs", "=", "None", ")", ":", "\n", "        ", "decoder_hidden", "=", "self", ".", "_init_state", "(", "encoder_hidden", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "predicted_softmax", "=", "F", ".", "log_softmax", "(", "self", ".", "out", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "predicted_softmax", "=", "predicted_softmax", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "return", "predicted_softmax", ",", "None", "\n", "\n", "\n", "# inference", "\n", "", "assert", "x", "is", "None", "\n", "bsz", "=", "encoder_hidden", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "length", "=", "self", ".", "length", "\n", "decoder_input", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "1", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "decoded_ids", "=", "encoder_hidden", "[", "0", "]", ".", "new", "(", "bsz", ",", "0", ")", ".", "fill_", "(", "0", ")", ".", "long", "(", ")", "\n", "\n", "def", "decode", "(", "step", ",", "output", ")", ":", "\n", "            ", "if", "step", "in", "self", ".", "offsets", ":", "# sample operation, should be in [3, 7]", "\n", "                ", "if", "step", "!=", "(", "self", ".", "n", "+", "2", ")", "*", "(", "self", ".", "n", "-", "1", ")", "/", "2", "-", "1", ":", "\n", "                    ", "symbol", "=", "output", "[", ":", ",", "3", ":", "6", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "3", "\n", "", "else", ":", "\n", "                    ", "symbol", "=", "output", "[", ":", ",", "6", ":", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "6", "\n", "", "", "else", ":", "# sample connection, should be in [1, 2]", "\n", "                ", "symbol", "=", "output", "[", ":", ",", "1", ":", "3", "]", ".", "topk", "(", "1", ")", "[", "1", "]", "+", "1", "\n", "", "return", "symbol", "\n", "\n", "", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "x", "=", "self", ".", "embedding", "(", "decoder_input", "[", ":", ",", "i", ":", "i", "+", "1", "]", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "residual", "=", "x", "\n", "x", ",", "decoder_hidden", "=", "self", ".", "rnn", "(", "x", ",", "decoder_hidden", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "residual", "=", "x", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "x", ",", "encoder_outputs", ")", "\n", "x", "=", "(", "residual", "+", "x", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "output", "=", "self", ".", "out", "(", "x", ".", "squeeze", "(", "1", ")", ")", "\n", "symbol", "=", "decode", "(", "i", ",", "output", ")", "\n", "decoded_ids", "=", "torch", ".", "cat", "(", "(", "decoded_ids", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "decoder_input", "=", "torch", ".", "cat", "(", "(", "decoder_input", ",", "symbol", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "None", ",", "decoded_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.decoder.Decoder._init_state": [[127, 136], ["isinstance", "tuple"], "methods", ["None"], ["", "def", "_init_state", "(", "self", ",", "encoder_hidden", ")", ":", "\n", "        ", "\"\"\" Initialize the encoder hidden state. \"\"\"", "\n", "if", "encoder_hidden", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "encoder_hidden", ",", "tuple", ")", ":", "\n", "            ", "encoder_hidden", "=", "tuple", "(", "[", "h", "for", "h", "in", "encoder_hidden", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder_hidden", "=", "encoder_hidden", "\n", "", "return", "encoder_hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.AvgrageMeter.__init__": [[28, 30], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.AvgrageMeter.reset": [[31, 35], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.AvgrageMeter.update": [[36, 40], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.ControllerDataset.__init__": [[74, 83], ["super().__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.ControllerDataset.__getitem__": [[84, 105], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.ControllerDataset.__len__": [[106, 108], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.generate_arch": [[42, 67], ["list", "numpy.random.shuffle", "nasbench.hash_iterator", "nasbench.get_metrics_from_hash", "nasbench.api.ModelSpec", "archs.append", "seqs.append", "len", "nasbench.query", "valid_accs.append", "utils.convert_arch_to_seq"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.hash_iterator", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_hash", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.convert_arch_to_seq"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.count_parameters": [[69, 71], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.convert_arch_to_seq": [[110, 127], ["len", "range", "len", "range", "len", "seq.append", "seq.append", "seq.append", "seq.append", "seq.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.convert_seq_to_arch": [[129, 147], ["int", "range", "math.floor", "range", "ops.append", "math.sqrt", "range", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.move_to_cuda": [[149, 155], ["tensor.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.convert_brp_nas.get_arch_vector_from_arch_str": [[17, 30], ["arch_str.split", "node[].split", "op_and_input.split"], "function", ["None"], ["def", "get_arch_vector_from_arch_str", "(", "arch_str", ")", ":", "\n", "    ", "''' Args:\n            arch_str : a string representation of a cell architecture,\n                for example '|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|'\n    '''", "\n", "\n", "nodes", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "nodes", "=", "[", "node", "[", "1", ":", "-", "1", "]", ".", "split", "(", "'|'", ")", "for", "node", "in", "nodes", "]", "\n", "nodes", "=", "[", "[", "op_and_input", ".", "split", "(", "'~'", ")", "[", "0", "]", "for", "op_and_input", "in", "node", "]", "for", "node", "in", "nodes", "]", "\n", "\n", "# arch_vector is equivalent to a decision vector produced by autocaml when using Nasbench201 backend", "\n", "arch_vector", "=", "[", "_opname_to_index", "[", "op", "]", "for", "node", "in", "nodes", "for", "op", "in", "node", "]", "\n", "return", "arch_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.convert_brp_nas.get_arch_str_from_arch_vector": [[32, 35], ["None"], "function", ["None"], ["", "def", "get_arch_str_from_arch_vector", "(", "arch_vector", ")", ":", "\n", "    ", "ops", "=", "[", "_opindex_to_name", "[", "opindex", "]", "for", "opindex", "in", "arch_vector", "]", "\n", "return", "'|{}~0|+|{}~0|{}~1|+|{}~0|{}~1|{}~2|'", ".", "format", "(", "*", "ops", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.get_predictor": [[27, 52], ["importlib.import_module", "importlib.import_module.get_predictor", "print", "torch.load", "print", "predictor_module.get_predictor.final_params", "predictor_module.get_predictor.load_state_dict", "predictor_module.get_predictor.load_state_dict", "predictor_module.get_predictor.named_parameters", "torch.load", "KeyError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.get_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.final_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], ["def", "get_predictor", "(", "predictor_name", ",", "predictor_args", "=", "None", ",", "checkpoint", "=", "None", ",", "ignore_last", "=", "False", ",", "augment", "=", "0", ")", ":", "\n", "    ", "predictor_args", "=", "predictor_args", "or", "{", "}", "\n", "if", "augment", ":", "\n", "        ", "predictor_args", "[", "'augments'", "]", "=", "augment", "\n", "", "predictor_module", "=", "importlib", ".", "import_module", "(", "'.'", "+", "predictor_name", ",", "'eagle.predictors'", ")", "\n", "predictor", "=", "predictor_module", ".", "get_predictor", "(", "predictor_args", ")", "\n", "if", "checkpoint", ":", "\n", "        ", "print", "(", "f\"Loading weights from {checkpoint!r}\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "if", "ignore_last", ":", "\n", "            ", "print", "(", "'   Without last layer...'", ")", "\n", "for", "p", "in", "predictor", ".", "final_params", "(", ")", ":", "\n", "                ", "found", "=", "False", "\n", "for", "name", ",", "p2", "in", "predictor", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "p2", "is", "p", ":", "\n", "                        ", "del", "state_dict", "[", "name", "]", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "raise", "KeyError", "(", "'Cannot find a parameter returned by \"predictor.final_params()\" in \"predictor.named_parameters()\"'", ")", "\n", "", "", "predictor", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "predictor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint", ")", ")", "\n", "\n", "", "", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.prepare_tensors": [[54, 122], ["torch.DoubleTensor().to", "torch.DoubleTensor().to", "torch.cuda.is_available", "torch.DoubleTensor().cuda.append", "torch.DoubleTensor().cuda.append", "model_module.get_matrix_and_ops", "model_module.get_adjacency_and_features", "torch.DoubleTensor().cuda.append", "torch.DoubleTensor().cuda.append", "torch.DoubleTensor().to", "torch.DoubleTensor().to", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "model_module.get_matrix_and_ops", "model_module.get_adjacency_and_features", "adjacency_pair.append", "features_pair.append", "torch.DoubleTensor().cuda.append", "torch.DoubleTensor().cuda.append", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "aug_pair.append", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "max", "min", "torch.DoubleTensor", "torch.DoubleTensor", "numpy.exp", "sum().tolist", "max", "min", "sum", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_matrix_and_ops", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_adjacency_and_features", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_matrix_and_ops", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_adjacency_and_features", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "prepare_tensors", "(", "gs", ",", "targets", ",", "model_module", ",", "binary_classifier", ",", "normalize", ",", "augments", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "adjacency_batch", ",", "features_batch", "=", "[", "]", ",", "[", "]", "\n", "if", "augments", ":", "\n", "        ", "augments_batch", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "augments_batch", "=", "None", "\n", "\n", "", "for", "g", "in", "gs", ":", "\n", "        ", "if", "binary_classifier", ":", "\n", "            ", "pair", "=", "g", "\n", "adjacency_pair", ",", "features_pair", "=", "[", "]", ",", "[", "]", "\n", "if", "augments", ":", "\n", "                ", "aug_pair", "=", "[", "]", "\n", "", "for", "g", "in", "pair", ":", "\n", "                ", "matrix", ",", "labels", "=", "model_module", ".", "get_matrix_and_ops", "(", "g", ",", "prune", "=", "True", ",", "keep_dims", "=", "True", ")", "\n", "adjacency", ",", "features", "=", "model_module", ".", "get_adjacency_and_features", "(", "matrix", ",", "labels", ")", "\n", "adjacency_pair", ".", "append", "(", "adjacency", ")", "\n", "features_pair", ".", "append", "(", "features", ")", "\n", "if", "augments", ":", "\n", "                    ", "augs", "=", "[", "adict", "[", "g", "]", "for", "adict", "in", "augments", "]", "\n", "aug_pair", ".", "append", "(", "augs", ")", "\n", "\n", "", "", "adjacency_batch", ".", "append", "(", "adjacency_pair", ")", "\n", "features_batch", ".", "append", "(", "features_pair", ")", "\n", "if", "augments", ":", "\n", "                ", "augments_batch", ".", "append", "(", "aug_pair", ")", "\n", "", "", "else", ":", "\n", "            ", "matrix", ",", "labels", "=", "model_module", ".", "get_matrix_and_ops", "(", "g", ",", "prune", "=", "True", ",", "keep_dims", "=", "True", ")", "\n", "adjacency", ",", "features", "=", "model_module", ".", "get_adjacency_and_features", "(", "matrix", ",", "labels", ")", "\n", "adjacency_batch", ".", "append", "(", "adjacency", ")", "\n", "features_batch", ".", "append", "(", "features", ")", "\n", "if", "augments", ":", "\n", "                ", "augs", "=", "[", "adict", "[", "g", "]", "for", "adict", "in", "augments", "]", "\n", "augments_batch", ".", "append", "(", "augs", ")", "\n", "\n", "", "", "", "if", "targets", "is", "not", "None", ":", "\n", "        ", "if", "binary_classifier", ":", "\n", "            ", "if", "binary_classifier", "==", "'oneway'", ":", "\n", "                ", "targets", "=", "[", "[", "(", "pair", "[", "0", "]", "-", "pair", "[", "1", "]", "+", "1", ")", "/", "2", "]", "for", "pair", "in", "targets", "]", "\n", "", "elif", "binary_classifier", "==", "'oneway-hard'", ":", "\n", "                ", "targets", "=", "[", "[", "1", "if", "pair", "[", "0", "]", ">", "pair", "[", "1", "]", "else", "0", "]", "for", "pair", "in", "targets", "]", "\n", "", "else", ":", "\n", "                ", "if", "normalize", ":", "\n", "                    ", "max_target", "=", "max", "(", "[", "max", "(", "pair", ")", "for", "pair", "in", "targets", "]", ")", "\n", "min_target", "=", "min", "(", "[", "min", "(", "pair", ")", "for", "pair", "in", "targets", "]", ")", "\n", "targets", "=", "[", "[", "(", "t", "-", "min_target", ")", "/", "(", "max_target", "-", "min_target", ")", "for", "t", "in", "pair", "]", "for", "pair", "in", "targets", "]", "\n", "\n", "#targets = [[t - min(pair) for t in pair] for pair in targets]", "\n", "", "targets", "=", "[", "np", ".", "exp", "(", "pair", ")", "/", "sum", "(", "np", ".", "exp", "(", "pair", ")", ")", ".", "tolist", "(", ")", "for", "pair", "in", "targets", "]", "\n", "", "", "else", ":", "\n", "            ", "targets", "=", "[", "[", "t", "]", "for", "t", "in", "targets", "]", "\n", "\n", "", "", "if", "device", ":", "\n", "        ", "adjacency_batch", "=", "torch", ".", "DoubleTensor", "(", "adjacency_batch", ")", ".", "to", "(", "device", ")", "\n", "features_batch", "=", "torch", ".", "DoubleTensor", "(", "features_batch", ")", ".", "to", "(", "device", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "torch", ".", "DoubleTensor", "(", "targets", ")", ".", "to", "(", "device", ")", "\n", "", "if", "augments", ":", "\n", "            ", "augments_batch", "=", "torch", ".", "DoubleTensor", "(", "augments_batch", ")", ".", "to", "(", "device", ")", "\n", "", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "adjacency_batch", "=", "torch", ".", "DoubleTensor", "(", "adjacency_batch", ")", ".", "cuda", "(", ")", "\n", "features_batch", "=", "torch", ".", "DoubleTensor", "(", "features_batch", ")", ".", "cuda", "(", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "torch", ".", "DoubleTensor", "(", "targets", ")", ".", "cuda", "(", ")", "\n", "", "if", "augments", ":", "\n", "            ", "augments_batch", "=", "torch", ".", "DoubleTensor", "(", "augments_batch", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "adjacency_batch", ",", "features_batch", ",", "targets", ",", "augments_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.simple_forward": [[124, 136], ["infer.prepare_tensors", "predictor.eval", "predictor.train", "torch.no_grad", "[].cpu().item", "[].cpu().item", "[].cpu", "[].cpu", "predictor", "predictor"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.prepare_tensors", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train"], ["", "def", "simple_forward", "(", "model_module", ",", "predictor", ",", "point", ",", "augments", "=", "None", ")", ":", "\n", "    ", "''' Run batch 1 inference for a specified point and extract result\n    '''", "\n", "adjacency", ",", "features", ",", "_", ",", "augments_t", "=", "prepare_tensors", "(", "[", "point", "]", ",", "None", ",", "model_module", ",", "predictor", ".", "binary_classifier", ",", "False", ",", "augments", "=", "augments", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "augments", "is", "not", "None", ":", "\n", "            ", "ret", "=", "predictor", "(", "adjacency", ",", "features", ",", "augments_t", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "predictor", "(", "adjacency", ",", "features", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "", "predictor", ".", "train", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.precompute_embeddings": [[138, 164], ["tqdm", "len", "min", "range", "infer.prepare_tensors", "embeddings.extend", "min", "len", "len", "len", "predictor.extract_features", "predictor.extract_features", "emb.detach().cpu", "len", "len", "len", "emb.detach"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.prepare_tensors", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.extract_features", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.extract_features"], ["", "def", "precompute_embeddings", "(", "model_module", ",", "predictor", ",", "models", ",", "batch", ",", "augments", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "from", "tqdm", "import", "tqdm", "\n", "embeddings", "=", "[", "]", "\n", "steps", "=", "len", "(", "models", ")", "//", "batch", "\n", "if", "len", "(", "models", ")", "%", "batch", "!=", "0", ":", "\n", "        ", "steps", "+=", "1", "\n", "\n", "", "beg", ",", "end", "=", "0", ",", "min", "(", "batch", ",", "len", "(", "models", ")", ")", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "steps", ")", ")", ":", "\n", "#while beg < len(models):", "\n", "        ", "batch_of_models", "=", "[", "m", "[", "0", "]", "for", "m", "in", "models", "[", "beg", ":", "end", "]", "]", "\n", "adjacency", ",", "features", ",", "_", ",", "augments_t", "=", "prepare_tensors", "(", "batch_of_models", ",", "None", ",", "model_module", ",", "False", ",", "False", ",", "augments", "=", "augments", ",", "device", "=", "device", ")", "\n", "if", "augments", "is", "not", "None", ":", "\n", "            ", "ret", "=", "predictor", ".", "extract_features", "(", "adjacency", ",", "features", ",", "augments_t", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "predictor", ".", "extract_features", "(", "adjacency", ",", "features", ")", "\n", "\n", "", "ret", "=", "[", "emb", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "emb", "in", "ret", "]", "\n", "embeddings", ".", "extend", "(", "ret", ")", "\n", "\n", "beg", "=", "end", "\n", "end", "=", "min", "(", "end", "+", "batch", ",", "len", "(", "models", ")", ")", "\n", "\n", "", "assert", "beg", "==", "len", "(", "models", ")", ",", "f'{beg}, {end}, {len(models)}, {steps}, {batch}, {len(embeddings)}'", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.infer.precomputed_forward": [[166, 174], ["predictor.regress"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.regress"], ["", "def", "precomputed_forward", "(", "predictor", ",", "input_idx", ",", "features", ")", ":", "\n", "    ", "if", "predictor", ".", "binary_classifier", ":", "\n", "        ", "input1", ",", "input2", "=", "input_idx", "\n", "inputs", "=", "[", "features", "[", "input1", "]", "[", "None", "]", ",", "features", "[", "input2", "]", "[", "None", "]", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "[", "features", "[", "input_idx", "]", "[", "None", "]", "]", "\n", "\n", "", "return", "predictor", ".", "regress", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GraphConvolution.__init__": [[28, 41], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gcn.GraphConvolution.reset_parameters", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gcn.GraphConvolution.register_parameter", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "weight_init", "=", "'thomas'", ",", "bias_init", "=", "'thomas'", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "DoubleTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "DoubleTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "weight_init", "=", "weight_init", "\n", "self", ".", "bias_init", "=", "bias_init", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GraphConvolution.reset_parameters": [[42, 45], ["utils.init_tensor", "utils.init_tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.init_tensor", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.init_tensor"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "utils", ".", "init_tensor", "(", "self", ".", "weight", ",", "self", ".", "weight_init", ",", "'relu'", ")", "\n", "utils", ".", "init_tensor", "(", "self", ".", "bias", ",", "self", ".", "bias_init", ",", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GraphConvolution.forward": [[46, 53], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adjacency", ",", "features", ")", ":", "\n", "        ", "support", "=", "torch", ".", "matmul", "(", "features", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "adjacency", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GraphConvolution.__repr__": [[54, 58], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.__init__": [[61, 97], ["torch.nn.modules.module.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "gcn.GraphConvolution", "torch.LayerNorm().double", "torch.LayerNorm().double", "torch.LayerNorm().double", "torch.ReLU().double", "torch.ReLU().double", "torch.ReLU().double", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Dropout().double", "torch.Dropout().double", "torch.Dropout().double", "range", "range", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "torch.Linear().double", "range", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_features", "=", "0", ",", "\n", "num_layers", "=", "2", ",", "\n", "num_hidden", "=", "32", ",", "\n", "dropout_ratio", "=", "0", ",", "\n", "weight_init", "=", "'thomas'", ",", "\n", "bias_init", "=", "'thomas'", ",", "\n", "binary_classifier", "=", "False", ",", "\n", "augments", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nfeat", "=", "num_features", "\n", "self", ".", "nlayer", "=", "num_layers", "\n", "self", ".", "nhid", "=", "num_hidden", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "gc", "=", "nn", ".", "ModuleList", "(", "[", "GraphConvolution", "(", "self", ".", "nfeat", "if", "i", "==", "0", "else", "self", ".", "nhid", ",", "self", ".", "nhid", ",", "bias", "=", "True", ",", "weight_init", "=", "weight_init", ",", "bias_init", "=", "bias_init", ")", "for", "i", "in", "range", "(", "self", ".", "nlayer", ")", "]", ")", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LayerNorm", "(", "self", ".", "nhid", ")", ".", "double", "(", ")", "for", "i", "in", "range", "(", "self", ".", "nlayer", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ReLU", "(", ")", ".", "double", "(", ")", "for", "i", "in", "range", "(", "self", ".", "nlayer", ")", "]", ")", "\n", "if", "not", "binary_classifier", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nhid", "+", "augments", ",", "1", ")", ".", "double", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "binary_classifier", "==", "'naive'", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nhid", "+", "augments", ",", "1", ")", ".", "double", "(", ")", "\n", "", "elif", "binary_classifier", "==", "'oneway'", "or", "binary_classifier", "==", "'oneway-hard'", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "(", "self", ".", "nhid", "+", "augments", ")", "*", "2", ",", "1", ")", ".", "double", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "(", "self", ".", "nhid", "+", "augments", ")", "*", "2", ",", "2", ")", ".", "double", "(", ")", "\n", "\n", "", "if", "binary_classifier", "!=", "'oneway'", "and", "binary_classifier", "!=", "'oneway-hard'", ":", "\n", "                ", "self", ".", "final_act", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "", "", "self", ".", "dropout", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Dropout", "(", "self", ".", "dropout_ratio", ")", ".", "double", "(", ")", "for", "i", "in", "range", "(", "self", ".", "nlayer", ")", "]", ")", "\n", "\n", "self", ".", "binary_classifier", "=", "binary_classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward_single_model": [[98, 106], ["range"], "methods", ["None"], ["", "def", "forward_single_model", "(", "self", ",", "adjacency", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "[", "0", "]", "(", "self", ".", "bn", "[", "0", "]", "(", "self", ".", "gc", "[", "0", "]", "(", "adjacency", ",", "features", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "nlayer", ")", ":", "\n", "            ", "x", "=", "self", ".", "relu", "[", "i", "]", "(", "self", ".", "bn", "[", "i", "]", "(", "self", ".", "gc", "[", "i", "]", "(", "adjacency", ",", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.extract_features": [[107, 113], ["gcn.GCN.forward_single_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward_single_model"], ["", "def", "extract_features", "(", "self", ",", "adjacency", ",", "features", ",", "augments", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_single_model", "(", "adjacency", ",", "features", ")", "\n", "x", "=", "x", "[", ":", ",", "0", "]", "# use global node", "\n", "if", "augments", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "augments", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.regress": [[114, 133], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn.GCN.final_act", "gcn.GCN.fc", "gcn.GCN.fc", "gcn.GCN.fc", "gcn.GCN.fc"], "methods", ["None"], ["", "def", "regress", "(", "self", ",", "features", ",", "features2", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "binary_classifier", ":", "\n", "            ", "assert", "features2", "is", "None", "\n", "return", "self", ".", "fc", "(", "features", ")", "\n", "\n", "", "assert", "features2", "is", "not", "None", "\n", "if", "self", ".", "binary_classifier", "==", "'naive'", ":", "\n", "            ", "x1", "=", "self", ".", "fc", "(", "features", ")", "\n", "x2", "=", "self", ".", "fc", "(", "features2", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "features", "\n", "x2", "=", "features2", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "binary_classifier", "!=", "'naive'", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_act", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward": [[134, 162], ["gcn.GCN.forward_single_model", "gcn.GCN.fc", "gcn.GCN.forward_single_model", "gcn.GCN.forward_single_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn.GCN.final_act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn.GCN.fc", "gcn.GCN.fc", "gcn.GCN.fc"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward_single_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward_single_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.forward_single_model"], ["", "def", "forward", "(", "self", ",", "adjacency", ",", "features", ",", "augments", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "binary_classifier", ":", "\n", "            ", "x", "=", "self", ".", "forward_single_model", "(", "adjacency", ",", "features", ")", "\n", "x", "=", "x", "[", ":", ",", "0", "]", "# use global node", "\n", "if", "augments", "is", "not", "None", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "augments", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "self", ".", "fc", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "self", ".", "forward_single_model", "(", "adjacency", "[", ":", ",", "0", "]", ",", "features", "[", ":", ",", "0", "]", ")", "\n", "x1", "=", "x1", "[", ":", ",", "0", "]", "\n", "x2", "=", "self", ".", "forward_single_model", "(", "adjacency", "[", ":", ",", "1", "]", ",", "features", "[", ":", ",", "1", "]", ")", "\n", "x2", "=", "x2", "[", ":", ",", "0", "]", "\n", "if", "augments", "is", "not", "None", ":", "\n", "                ", "a1", "=", "augments", "[", ":", ",", "0", "]", "\n", "a2", "=", "augments", "[", ":", ",", "1", "]", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "a1", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "a2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "binary_classifier", "==", "'naive'", ":", "\n", "                ", "x1", "=", "self", ".", "fc", "(", "x1", ")", "\n", "x2", "=", "self", ".", "fc", "(", "x2", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "binary_classifier", "!=", "'naive'", ":", "\n", "                ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "final_act", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.reset_last": [[163, 165], ["gcn.GCN.fc.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "", "def", "reset_last", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.final_params": [[166, 168], ["gcn.GCN.fc.parameters"], "methods", ["None"], ["", "def", "final_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fc", ".", "parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.ProductList.__init__": [[30, 32], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.ProductList.__getitem__": [[33, 36], ["utils.ProductList.unmerge"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.ProductList.unmerge"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.ProductList.__len__": [[37, 39], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.ProductList.unmerge": [[40, 49], ["IndexError", "len", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.__init__": [[53, 65], ["utils.EarlyStopping._init_is_better"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping._init_is_better"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step": [[66, 84], ["numpy.isnan", "utils.EarlyStopping.is_better"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping._init_is_better": [[85, 98], ["ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.__init__": [[101, 113], ["functools.reduce", "numpy.arange", "numpy.random.shuffle"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.__len__": [[114, 116], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.point_to_int": [[117, 130], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.int_to_point": [[131, 147], ["enumerate", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.__iter__": [[149, 151], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.__next__": [[152, 159], ["utils.SearchSpaceIterator.int_to_point"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.SearchSpaceIterator.int_to_point"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.staticproperty.__init__": [[256, 263], ["property.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.staticproperty.__get__": [[264, 268], ["utils.staticproperty.fget", "AttributeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.staticproperty.__set__": [[269, 273], ["utils.staticproperty.fset", "AttributeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.staticproperty.__delete__": [[274, 278], ["utils.staticproperty.fdel", "AttributeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.LazyModule.__init__": [[281, 283], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.LazyModule.__getattr__": [[284, 286], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.count_ops_edges": [[160, 172], ["collections.defaultdict", "len", "range", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.valid": [[173, 181], ["prediction.item", "truth.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize": [[182, 193], ["numpy.array", "np.array.sum", "numpy.power().flatten", "numpy.diag", "numpy.dot", "numpy.power", "numpy.isinf"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.init_tensor": [[195, 215], ["tensor.size", "torch.init.uniform_", "math.sqrt", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.orthogonal_", "ValueError", "torch.init.calculate_gain"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.get_predictor": [[217, 249], ["gcn.GCN", "print", "torch.load", "torch.load", "print", "gcn.GCN.final_params", "gcn.GCN.load_state_dict", "gcn.GCN.load_state_dict", "gcn.GCN.named_parameters", "torch.load", "torch.load", "KeyError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.gcn.GCN.final_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.collate_fn": [[251, 253], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.add_module_properties": [[288, 302], ["isinstance", "properties.items", "type", "type", "setattr", "type."], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.isnamedtupleinstance": [[304, 313], ["type", "getattr", "all", "isinstance", "len", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.freeze": [[315, 333], ["isinstance", "type", "isinstance", "type.", "map", "isinstance", "type", "isinstance", "utils.isnamedtupleinstance", "seq.items", "isinstance", "isinstance", "type.", "type.", "map", "utils.freeze", "utils.freeze", "map", "utils.freeze", "utils.freeze"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.isnamedtupleinstance", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.freeze", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.freeze", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.freeze", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.freeze"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.disable_warnings": [[19, 48], ["warnings.filterwarnings", "warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.get_logger().setLevel", "tf.get_logger"], "function", ["None"], ["def", "disable_warnings", "(", ")", ":", "\n", "    ", "import", "os", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "DeprecationWarning", ")", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "\n", "try", ":", "\n", "        ", "from", "tensorflow", ".", "python", ".", "util", "import", "module_wrapper", "as", "deprecation", "\n", "", "except", "ImportError", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "tensorflow", ".", "python", ".", "util", "import", "deprecation_wrapper", "as", "deprecation", "\n", "", "except", "ImportError", ":", "\n", "            ", "from", "tensorflow", ".", "python", ".", "util", "import", "deprecation", "\n", "", "", "try", ":", "\n", "        ", "deprecation", ".", "_PRINT_DEPRECATION_WARNINGS", "=", "False", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "import", "tensorflow", "as", "tf", "\n", "try", ":", "\n", "        ", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "try", ":", "\n", "        ", "tf", ".", "get_logger", "(", ")", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.save_graph": [[50, 60], ["tf.summary.FileWriter"], "function", ["None"], ["", "", "def", "save_graph", "(", "graph", ",", "output_dir", ")", ":", "\n", "    ", "''' Save a summary of the given TF Graph in the specified directory (to be viewed in tensorboard).\n\n        Args:\n            graph : tf.Graph to be saved\n            output_dir : a directory to which the summary should be written\n    '''", "\n", "import", "tensorflow", "as", "tf", "\n", "with", "tf", ".", "summary", ".", "FileWriter", "(", "logdir", "=", "output_dir", ",", "graph", "=", "graph", ")", "as", "_", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_graph_def": [[61, 100], ["tf.ConfigProto", "tf.Session", "tf.graph_util.convert_variables_to_constants", "tf.graph_util.remove_training_nodes", "graph.as_default", "sess.run", "sess.graph.as_graph_def", "pathlib.Path", "os.makedirs", "tf.train.write_graph", "tf.global_variables_initializer", "tf.train.Saver", "tf.train.Saver.restore", "str", "str"], "function", ["None"], ["", "", "def", "convert_to_graph_def", "(", "graph", ",", "output", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ")", ":", "\n", "    ", "''' Converts the given TF Graph as a graph_def and optionally save it to a protobuf file.\n\n        Args:\n            graph : tf.Graph to convert and save\n            \n            outputs : a list of tensors which are outputs of the network\n            output_file : (optional) a filename to which the converted model will be saved\n                This argument can be omitted if the user wants to skip saving to a file, in that\n                case the returned value can be used instead of saving and then reading from the file\n            checkpoint : (optional) a path to a checkpoint which will be loaded before converting\n                (i.e. the weights from this checkpoint will be used in the converted model)\n        Returns:\n            the graph definition of the converted TF model\n    '''", "\n", "output", "=", "[", "tensor", ".", "name", "[", ":", "-", "2", "]", "for", "tensor", "in", "output", "]", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "sessconfig", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "0", "}", ")", "\n", "sessconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sessconfig", ".", "gpu_options", ".", "force_gpu_compatible", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "sessconfig", ",", "graph", "=", "graph", ")", "as", "sess", ":", "\n", "        ", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "                ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "\n", "", "", "graph_def", "=", "tf", ".", "graph_util", ".", "convert_variables_to_constants", "(", "sess", ",", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "output", ")", "\n", "output_graph_def", "=", "tf", ".", "graph_util", ".", "remove_training_nodes", "(", "graph_def", ",", "protected_nodes", "=", "output", ")", "\n", "\n", "if", "output_file", ":", "\n", "            ", "import", "os", "\n", "output_file", "=", "pathlib", ".", "Path", "(", "output_file", ")", "\n", "os", ".", "makedirs", "(", "output_file", ".", "parent", ",", "exist_ok", "=", "True", ")", "\n", "tf", ".", "train", ".", "write_graph", "(", "output_graph_def", ",", "str", "(", "output_file", ".", "parent", ")", ",", "str", "(", "output_file", ".", "name", ")", ",", "as_text", "=", "False", ")", "\n", "\n", "", "return", "output_graph_def", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_tflite": [[101, 150], ["tf.ConfigProto", "tf.Session", "tf.lite.TFLiteConverter.from_session", "tf.lite.TFLiteConverter.from_session.convert", "graph.as_default", "sess.run", "pathlib.Path", "os.makedirs", "tf.global_variables_initializer", "tf.train.Saver", "tf.train.Saver.restore", "open", "of.write"], "function", ["None"], ["", "", "def", "convert_to_tflite", "(", "graph", ",", "inputs", ",", "outputs", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ",", "quantize_weights", "=", "True", ",", "quantize_activations", "=", "True", ")", ":", "\n", "    ", "''' Converts the given TF Graph as a TFLite model and optionally save it to a file.\n\n        Args:\n            graph : tf.Graph to convert and save\n            \n            inputs : a list of tensors which are inputs to the network\n            outputs : a list of tensors which are outputs of the network\n            output_file : (optional) a filename to which the converted model will be saved\n                This argument can be omitted if the user wants to skip saving to a file, in that\n                case the returned value can be used instead of saving and then reading from the file\n            checkpoint : (optional) a path to a checkpoint which will be loaded before converting\n                (i.e. the weights from this checkpoint will be used in the converted model)\n            quantize_weights : whether to enable the default post-training quantization on weights\n            quantize_activations : whether to enable the default post-training quantization on activations\n        Returns:\n            the binary form of the converted TFLite model (i.e. the content of the .tflite file)\n    '''", "\n", "import", "tensorflow", "as", "tf", "\n", "sessconfig", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "0", "}", ")", "\n", "sessconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sessconfig", ".", "gpu_options", ".", "force_gpu_compatible", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "sessconfig", ",", "graph", "=", "graph", ")", "as", "sess", ":", "\n", "        ", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "                ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "\n", "", "", "converter", "=", "tf", ".", "lite", ".", "TFLiteConverter", ".", "from_session", "(", "sess", ",", "inputs", ",", "outputs", ")", "\n", "converter", ".", "post_training_quantize", "=", "quantize_weights", "\n", "if", "quantize_activations", ":", "\n", "            ", "converter", ".", "inference_type", "=", "tf", ".", "uint8", "\n", "converter", ".", "inference_input_type", "=", "tf", ".", "uint8", "\n", "converter", ".", "inference_output_type", "=", "tf", ".", "uint8", "\n", "converter", ".", "quantized_input_stats", "=", "{", "'input'", ":", "(", "0", ",", "1", ")", "}", "\n", "converter", ".", "default_ranges_stats", "=", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "tflite_model", "=", "converter", ".", "convert", "(", ")", "\n", "\n", "if", "output_file", ":", "\n", "            ", "import", "os", "\n", "output_file", "=", "pathlib", ".", "Path", "(", "output_file", ")", "\n", "os", ".", "makedirs", "(", "output_file", ".", "parent", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "output_file", ",", "'wb'", ")", "as", "of", ":", "\n", "                ", "of", ".", "write", "(", "tflite_model", ")", "\n", "\n", "", "", "", "return", "tflite_model", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_trt": [[152, 207], ["tf.Session", "tf.graph_util.convert_variables_to_constants", "tf.graph_util.remove_training_nodes", "trt.TrtGraphConverter", "trt.TrtGraphConverter.convert", "graph.as_default", "sess.run", "sess.graph.as_graph_def", "pathlib.Path", "os.makedirs", "tf.train.write_graph", "tf.global_variables_initializer", "tf.train.Saver", "tf.train.Saver.restore", "str", "str"], "function", ["None"], ["", "def", "convert_to_trt", "(", "graph", ",", "inputs", ",", "outputs", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ",", "quantize_weights", "=", "True", ",", "quantize_activations", "=", "True", ")", ":", "\n", "    ", "''' Converts the given TF Graph as a TF model optimized by TensorRT and optionally save it to a file.\n\n        Args:\n            graph : tf.Graph to convert and save\n            \n            inputs : a list of tensors which are inputs to the network\n            outputs : a list of tensors which are outputs of the network\n            output_file : (optional) a filename to which the converted model will be saved\n                This argument can be omitted if the user wants to skip saving to a file, in that\n                case the returned value can be used instead of saving and then reading from the file\n            checkpoint : (optional) a path to a checkpoint which will be loaded before converting\n                (i.e. the weights from this checkpoint will be used in the converted model)\n            quantize_weights : whether to enable the default post-training quantization on weights\n            quantize_activations : whether to enable the default post-training quantization on activations\n        Returns:\n            the binary form of the converted TFLite model (i.e. the content of the .tflite file)\n    '''", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", ".", "compiler", ".", "tensorrt", "import", "trt_convert", "as", "trt", "\n", "\n", "with", "tf", ".", "Session", "(", "graph", "=", "graph", ")", "as", "sess", ":", "\n", "        ", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "                ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "\n", "", "", "output", "=", "[", "tensor", ".", "name", "[", ":", "-", "2", "]", "for", "tensor", "in", "outputs", "]", "\n", "graph_def", "=", "tf", ".", "graph_util", ".", "convert_variables_to_constants", "(", "sess", ",", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "output", ")", "\n", "frozen_graph", "=", "tf", ".", "graph_util", ".", "remove_training_nodes", "(", "graph_def", ",", "protected_nodes", "=", "output", ")", "\n", "\n", "if", "quantize_weights", "or", "quantize_activations", ":", "\n", "            ", "precision_mode", "=", "\"FP16\"", "\n", "", "else", ":", "\n", "            ", "precision_mode", "=", "\"FP32\"", "\n", "\n", "", "converter", "=", "trt", ".", "TrtGraphConverter", "(", "\n", "input_graph_def", "=", "frozen_graph", ",", "\n", "max_batch_size", "=", "1", ",", "\n", "max_workspace_size_bytes", "=", "1", "<<", "25", ",", "\n", "minimum_segment_size", "=", "10", ",", "\n", "precision_mode", "=", "precision_mode", ",", "\n", "use_calibration", "=", "True", ",", "\n", "is_dynamic_op", "=", "True", ",", "\n", "nodes_blacklist", "=", "output", ")", "\n", "frozen_graph", "=", "converter", ".", "convert", "(", ")", "\n", "\n", "if", "output_file", ":", "\n", "            ", "import", "os", "\n", "output_file", "=", "pathlib", ".", "Path", "(", "output_file", ")", "\n", "os", ".", "makedirs", "(", "output_file", ".", "parent", ",", "exist_ok", "=", "True", ")", "\n", "tf", ".", "train", ".", "write_graph", "(", "frozen_graph", ",", "str", "(", "output_file", ".", "parent", ")", ",", "str", "(", "output_file", ".", "name", ")", ",", "as_text", "=", "False", ")", "\n", "\n", "", "", "return", "frozen_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.get_flops_and_params": [[208, 226], ["tf_utils.convert_to_graph_def", "tf.RunMetadata", "tf.Graph().as_default", "tf.import_graph_def", "tf.profiler.ProfileOptionBuilder.float_operation", "tf.profiler.profile", "graph.as_default", "tf.profiler.ProfileOptionBuilder.trainable_variables_parameter", "tf.profiler.profile", "tf.Graph"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_graph_def"], ["", "def", "get_flops_and_params", "(", "graph", ",", "output", ")", ":", "\n", "    ", "if", "graph", "is", "None", ":", "\n", "        ", "return", "0", ",", "0", "\n", "\n", "", "graph_def", "=", "convert_to_graph_def", "(", "graph", ",", "output", ")", "\n", "\n", "import", "tensorflow", "as", "tf", "\n", "run_meta", "=", "tf", ".", "RunMetadata", "(", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph_opt", ":", "\n", "        ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "opts", "=", "tf", ".", "profiler", ".", "ProfileOptionBuilder", ".", "float_operation", "(", ")", "\n", "flops", "=", "tf", ".", "profiler", ".", "profile", "(", "graph_opt", ",", "run_meta", "=", "run_meta", ",", "cmd", "=", "'op'", ",", "options", "=", "opts", ")", "\n", "\n", "", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "opts", "=", "tf", ".", "profiler", ".", "ProfileOptionBuilder", ".", "trainable_variables_parameter", "(", ")", "\n", "params", "=", "tf", ".", "profiler", ".", "profile", "(", "graph", ",", "run_meta", "=", "run_meta", ",", "cmd", "=", "'op'", ",", "options", "=", "opts", ")", "\n", "\n", "", "return", "flops", ".", "total_float_ops", ",", "params", ".", "total_parameters", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.__init__": [[22, 36], ["set", "set", "ModelRequirements.dtypes_and_format"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "frameworks", "=", "None", ",", "data_types_and_formats", "=", "None", ",", "max_dims", "=", "None", ",", "min_dims", "=", "None", ")", ":", "\n", "        ", "''' For all arguments ``None`` means \"don't care\".\n\n            Arguments:\n                frameworks : list of supported frameworks\n                data_types_and_formats : list of tuples (data type, compute type, data format)\n                    defining what combinations of the three parameters are supported\n                max_dims : maximum number of dimensions\n                min_dims : minimum number of dimensions\n        '''", "\n", "self", ".", "frameworks", "=", "set", "(", "frameworks", ")", "if", "frameworks", "is", "not", "None", "else", "frameworks", "\n", "self", ".", "data_types_and_formats", "=", "set", "(", "ModelRequirements", ".", "dtypes_and_format", "(", "*", "v", ")", "for", "v", "in", "data_types_and_formats", ")", "if", "data_types_and_formats", "is", "not", "None", "else", "data_types_and_formats", "\n", "self", ".", "max_dims", "=", "max_dims", "\n", "self", ".", "min_dims", "=", "min_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.check_nones": [[37, 47], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_nones", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "if", "t1", "is", "None", ":", "\n", "            ", "if", "t2", "is", "None", ":", "\n", "                ", "return", "True", ",", "None", "\n", "", "return", "True", ",", "t2", "\n", "", "if", "t2", "is", "None", ":", "\n", "            ", "return", "True", ",", "t1", "\n", "\n", "", "return", "False", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.is_container": [[48, 58], ["isinstance", "isinstance", "iter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "is_container", "(", "t", ")", ":", "\n", "        ", "if", "isinstance", "(", "t", ",", "str", ")", "or", "isinstance", "(", "t", ",", "bytes", ")", ":", "\n", "            ", "return", "False", "\n", "", "try", ":", "\n", "            ", "_", "=", "iter", "(", "t", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersect_single": [[59, 69], ["model_info.ModelRequirements.check_nones", "t1.intersection"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.check_nones", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersection"], ["", "@", "staticmethod", "\n", "def", "intersect_single", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "quick", ",", "value", "=", "ModelRequirements", ".", "check_nones", "(", "t1", ",", "t2", ")", "\n", "if", "quick", ":", "\n", "            ", "return", "value", "\n", "\n", "", "ret", "=", "t1", ".", "intersection", "(", "t2", ")", "\n", "#if not ret:", "\n", "#    raise ValueError('Incompatible {} and {}'.format(t1, t2))", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersect_multiple": [[70, 110], ["model_info.ModelRequirements.check_nones", "type", "type", "TypeError", "model_info.ModelRequirements.is_container", "type", "itertools.product", "zip", "good.append", "ValueError", "type", "ValueError", "len", "len", "ValueError", "model_info.ModelRequirements.intersect_multiple", "type", "len", "len", "type", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.check_nones", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.is_container", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersect_multiple"], ["", "@", "staticmethod", "\n", "def", "intersect_multiple", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "quick", ",", "value", "=", "ModelRequirements", ".", "check_nones", "(", "t1", ",", "t2", ")", "\n", "if", "quick", ":", "\n", "            ", "return", "value", "\n", "\n", "", "if", "type", "(", "t1", ")", "is", "not", "type", "(", "t2", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Different types intersected: {} and {}'", ".", "format", "(", "type", "(", "t1", ")", ".", "__name__", ",", "type", "(", "t2", ")", ".", "__name__", ")", ")", "\n", "\n", "", "if", "not", "ModelRequirements", ".", "is_container", "(", "t1", ")", ":", "\n", "            ", "if", "t1", "!=", "t2", ":", "\n", "                ", "raise", "ValueError", "(", "'Incompatible {} and {}'", ".", "format", "(", "t1", ",", "t2", ")", ")", "\n", "", "return", "t1", "\n", "\n", "", "good", "=", "[", "]", "\n", "if", "type", "(", "t1", ")", "is", "set", ":", "\n", "            ", "values_iter", "=", "itertools", ".", "product", "(", "t1", ",", "t2", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "t1", ")", "!=", "len", "(", "t2", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Equal size expected: {} and {}'", ".", "format", "(", "t1", ",", "t2", ")", ")", "\n", "\n", "", "values_iter", "=", "zip", "(", "t1", ",", "t2", ")", "\n", "\n", "", "for", "value1", ",", "value2", "in", "values_iter", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "ModelRequirements", ".", "intersect_multiple", "(", "value1", ",", "value2", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "continue", "\n", "\n", "", "good", ".", "append", "(", "value", ")", "\n", "\n", "", "if", "type", "(", "t1", ")", "is", "not", "set", "and", "len", "(", "good", ")", "!=", "len", "(", "t1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incompatible {} and {}'", ".", "format", "(", "t1", ",", "t2", ")", ")", "\n", "\n", "", "if", "type", "(", "t1", ")", "is", "ModelRequirements", ".", "dtypes_and_format", ":", "\n", "            ", "result", "=", "type", "(", "t1", ")", "(", "*", "good", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "type", "(", "t1", ")", "(", "good", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min": [[111, 118], ["model_info.ModelRequirements.check_nones", "model_info.ModelRequirements.min"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.check_nones", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "@", "staticmethod", "\n", "def", "min", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "quick", ",", "value", "=", "ModelRequirements", ".", "check_nones", "(", "t1", ",", "t2", ")", "\n", "if", "quick", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "min", "(", "t1", ",", "t2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max": [[119, 126], ["model_info.ModelRequirements.check_nones", "model_info.ModelRequirements.max"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.check_nones", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "@", "staticmethod", "\n", "def", "max", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "quick", ",", "value", "=", "ModelRequirements", ".", "check_nones", "(", "t1", ",", "t2", ")", "\n", "if", "quick", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "max", "(", "t1", ",", "t2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersection": [[127, 133], ["model_info.ModelRequirements.intersect_single", "model_info.ModelRequirements.intersect_multiple", "model_info.ModelRequirements.min", "model_info.ModelRequirements.max", "model_info.ModelRequirements"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersect_single", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersect_multiple", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "intersection", "(", "self", ",", "other", ")", ":", "\n", "        ", "frameworks", "=", "ModelRequirements", ".", "intersect_single", "(", "self", ".", "frameworks", ",", "other", ".", "frameworks", ")", "\n", "data_types_and_formats", "=", "ModelRequirements", ".", "intersect_multiple", "(", "self", ".", "data_types_and_formats", ",", "other", ".", "data_types_and_formats", ")", "\n", "max_dims", "=", "ModelRequirements", ".", "min", "(", "self", ".", "max_dims", ",", "other", ".", "max_dims", ")", "\n", "min_dims", "=", "ModelRequirements", ".", "max", "(", "self", ".", "min_dims", ",", "other", ".", "min_dims", ")", "\n", "return", "ModelRequirements", "(", "frameworks", "=", "frameworks", ",", "data_types_and_formats", "=", "data_types_and_formats", ",", "max_dims", "=", "max_dims", ",", "min_dims", "=", "min_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.__bool__": [[134, 144], ["None"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frameworks", "is", "not", "None", "and", "not", "self", ".", "frameworks", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "data_types_and_formats", "is", "not", "None", "and", "not", "self", ".", "data_types_and_formats", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "max_dims", "is", "not", "None", "and", "self", ".", "max_dims", "<=", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "max_dims", "is", "not", "None", "and", "self", ".", "min_dims", "is", "not", "None", "and", "self", ".", "min_dims", ">", "self", ".", "max_dims", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.framework": [[145, 152], ["next", "ValueError", "iter"], "methods", ["None"], ["", "@", "property", "\n", "def", "framework", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frameworks", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "not", "self", ".", "frameworks", ":", "\n", "            ", "raise", "ValueError", "(", "'No compatible framework found'", ")", "\n", "", "return", "next", "(", "iter", "(", "self", ".", "frameworks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.data_type": [[153, 160], ["ValueError", "next", "iter"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_type", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data_types_and_formats", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "not", "self", ".", "data_types_and_formats", ":", "\n", "            ", "raise", "ValueError", "(", "'No compatible data type found'", ")", "\n", "", "return", "next", "(", "iter", "(", "self", ".", "data_types_and_formats", ")", ")", ".", "data_type", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.compute_type": [[161, 168], ["ValueError", "next", "iter"], "methods", ["None"], ["", "@", "property", "\n", "def", "compute_type", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data_types_and_formats", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "not", "self", ".", "data_types_and_formats", ":", "\n", "            ", "raise", "ValueError", "(", "'No compatible compute type found'", ")", "\n", "", "return", "next", "(", "iter", "(", "self", ".", "data_types_and_formats", ")", ")", ".", "compute_type", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.data_format": [[169, 176], ["ValueError", "next", "iter"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_format", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data_types_and_formats", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "not", "self", ".", "data_types_and_formats", ":", "\n", "            ", "raise", "ValueError", "(", "'No compatible data format found'", ")", "\n", "", "return", "next", "(", "iter", "(", "self", ".", "data_types_and_formats", ")", ")", ".", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelInfo.__init__": [[179, 201], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "framework", ",", "\n", "inputs", ",", "\n", "outputs", ",", "\n", "data_type", ",", "\n", "compute_type", ",", "\n", "data_format", ")", ":", "\n", "        ", "'''\n            Arguments:\n                framework : framework name\n                inputs : list of input dimensions\n                outputs : list of output dimensions\n                data_type : data type for weights\n                compute_type : data type for compute (and activations)\n                data_format : storage format\n        '''", "\n", "self", ".", "framework", "=", "framework", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "compute_type", "=", "compute_type", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelInfo.get_matching_requirements": [[202, 210], ["model_info.ModelRequirements", "max", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "get_matching_requirements", "(", "self", ")", ":", "\n", "        ", "return", "ModelRequirements", "(", "\n", "frameworks", "=", "[", "self", ".", "framework", "]", ",", "\n", "data_types_and_formats", "=", "[", "\n", "(", "self", ".", "data_type", ",", "self", ".", "compute_type", ",", "self", ".", "data_format", ")", "\n", "]", ",", "\n", "max_dims", "=", "max", "(", "len", "(", "tensor", ")", "for", "tensors_list", "in", "[", "self", ".", "inputs", ",", "self", ".", "outputs", "]", "for", "tensor", "in", "tensors_list", ")", ",", "\n", "min_dims", "=", "max", "(", "len", "(", "tensor", ")", "for", "tensors_list", "in", "[", "self", ".", "inputs", ",", "self", ".", "outputs", "]", "for", "tensor", "in", "tensors_list", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelInfo.check": [[212, 216], ["model_info.ModelInfo.get_matching_requirements", "model_info.ModelInfo.intersection", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelInfo.get_matching_requirements", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersection"], ["", "def", "check", "(", "self", ",", "requirements", ")", ":", "\n", "        ", "my_req", "=", "self", ".", "get_matching_requirements", "(", ")", "\n", "if", "not", "my_req", ".", "intersection", "(", "requirements", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Model incompatible with requirements: {} and {}'", ".", "format", "(", "self", ",", "requirements", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.nor_conv_1x1": [[24, 37], ["tensorflow.keras.layers.Conv2D"], "function", ["None"], ["def", "nor_conv_1x1", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "# we skip batch normalization and merge relu with conv to optimize latency", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.nor_conv_3x3": [[38, 51], ["tensorflow.keras.layers.Conv2D"], "function", ["None"], ["", "def", "nor_conv_3x3", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "# we skip batch normalization and merge relu with conv to optimize latency", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.avg_pool_3x3": [[52, 61], ["tensorflow.keras.layers.AvgPool2D"], "function", ["None"], ["", "def", "avg_pool_3x3", "(", "net", ",", "unused_channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "AvgPool2D", "(", "\n", "pool_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.reduction_avg_pool_2x2": [[62, 71], ["tensorflow.keras.layers.AvgPool2D"], "function", ["None"], ["", "def", "reduction_avg_pool_2x2", "(", "net", ",", "unused_channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "AvgPool2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.reduction_conv_1x1": [[72, 84], ["tensorflow.keras.layers.Conv2D"], "function", ["None"], ["", "def", "reduction_conv_1x1", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.reduction_conv_3x3_stride_2": [[85, 97], ["tensorflow.keras.layers.Conv2D"], "function", ["None"], ["", "def", "reduction_conv_3x3_stride_2", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.reduction_conv_3x3_stride_1": [[98, 110], ["tensorflow.keras.layers.Conv2D"], "function", ["None"], ["", "def", "reduction_conv_3x3_stride_1", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.eltwise_add": [[111, 114], ["tensorflow.keras.layers.Add"], "function", ["None"], ["", "def", "eltwise_add", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Add", "(", ")", "(", "[", "net", ",", "net", "]", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_ops": [[127, 211], ["tensorflow.placeholder", "len", "tensorflow.variable_scope", "nets.append", "range", "tensorflow.expand_dims", "len", "tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.variable_scope", "nets.append", "tensorflow.reshape", "nets.append", "nets.append", "len", "tensorflow.keras.layers.Conv2D", "tensorflow.variable_scope", "tensorflow.keras.layers.AvgPool2D", "tensorflow.keras.layers.Dense", "tensorflow.variable_scope", "nets.append", "nets.append", "tensorflow.variable_scope", "nets.append", "nets.append", "nets.append"], "function", ["None"], ["def", "build_ops", "(", "input_size", "=", "(", "1", ",", "32", ",", "32", ",", "3", ")", ",", "stacks_count", "=", "3", ",", "cells_count", "=", "5", ",", "num_classes", "=", "10", ",", "data_format", "=", "'channels_last'", ",", "data_type", "=", "'float32'", ")", ":", "\n", "    ", "input_placeholder", "=", "tf", ".", "placeholder", "(", "data_type", ",", "input_size", ",", "name", "=", "'input'", ")", "\n", "net", "=", "input_placeholder", "\n", "\n", "if", "len", "(", "net", ".", "shape", ")", "<", "4", ":", "\n", "        ", "if", "len", "(", "net", ".", "shape", ")", "<", "3", "and", "data_format", "==", "'channels_last'", ":", "\n", "            ", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "-", "1", ")", "\n", "\n", "", "while", "len", "(", "net", ".", "shape", ")", "<", "4", ":", "\n", "            ", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "0", ")", "\n", "\n", "", "", "nets", "=", "[", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'nasbench201_dnn'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'stem'", ")", ":", "\n", "            ", "input", "=", "net", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "16", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "input", ")", "\n", "\n", "", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "'stem'", ")", ")", "\n", "\n", "channels", "=", "16", "\n", "for", "stack", "in", "range", "(", "stacks_count", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'stack{stack}'", ")", ":", "\n", "# Only need to profile one cell per stack", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'cell'", ")", ":", "\n", "                    ", "input", "=", "net", "\n", "for", "op", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ":", "\n", "                        ", "net", "=", "_opindex_to_ctor", "[", "op", "]", "(", "input", ",", "channels", ",", "data_format", ",", "data_type", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "f'stack{stack}_{op}'", ")", ")", "\n", "", "input", "=", "net", "\n", "net", "=", "_opindex_to_ctor", "[", "'9'", "]", "(", "input", ",", "channels", ",", "data_format", ",", "data_type", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "f'stack{stack}_9'", ")", ")", "\n", "\n", "", "if", "stack", "+", "1", "!=", "stacks_count", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'reduction'", ")", ":", "\n", "                        ", "temp", "=", "net", "\n", "for", "op", "in", "[", "'5'", ",", "'6'", "]", ":", "\n", "                            ", "input", "=", "net", "\n", "net", "=", "_opindex_to_ctor", "[", "op", "]", "(", "input", ",", "channels", "*", "2", ",", "data_format", ",", "data_type", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "f'stack{stack}_reduction_{op}'", ")", ")", "\n", "", "net", "=", "temp", "\n", "for", "op", "in", "[", "'7'", ",", "'8'", "]", ":", "\n", "                            ", "input", "=", "net", "\n", "net", "=", "_opindex_to_ctor", "[", "op", "]", "(", "input", ",", "channels", "*", "2", ",", "data_format", ",", "data_type", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "f'stack{stack}_reduction_{op}'", ")", ")", "\n", "", "input", "=", "net", "\n", "net", "=", "_opindex_to_ctor", "[", "'9'", "]", "(", "input", ",", "channels", ",", "data_format", ",", "data_type", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "f'stack{stack}_reduction_9'", ")", ")", "\n", "\n", "", "", "", "channels", "=", "channels", "*", "2", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'last'", ")", ":", "\n", "            ", "input", "=", "net", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "AvgPool2D", "(", "\n", "pool_size", "=", "net", ".", "shape", "[", "1", ":", "3", "]", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "input", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "'last_0'", ")", ")", "\n", "\n", "input", "=", "net", "\n", "net", "=", "tf", ".", "reshape", "(", "input", ",", "[", "net", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "'last_1'", ")", ")", "\n", "\n", "input", "=", "net", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "num_classes", ",", "\n", "use_bias", "=", "True", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "input", ")", "\n", "nets", ".", "append", "(", "(", "net", ",", "input", ",", "'last_2'", ")", ")", "\n", "\n", "", "", "return", "nets", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_cell": [[213, 247], ["range", "len", "len", "ValueError", "ValueError", "ValueError", "len", "len", "tensors.append", "len", "len", "ValueError", "range", "len"], "function", ["None"], ["", "def", "build_cell", "(", "net", ",", "matrix", ",", "ops", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "if", "len", "(", "matrix", ")", "!=", "len", "(", "ops", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Dimensions mismatch'", ")", "\n", "", "for", "row", "in", "matrix", ":", "\n", "        ", "if", "len", "(", "row", ")", "!=", "len", "(", "ops", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Adjacency matrix not square'", ")", "\n", "", "", "if", "ops", "[", "0", "]", "!=", "'input'", ":", "\n", "        ", "raise", "ValueError", "(", "'First operation should be \"input\"'", ")", "\n", "", "if", "ops", "[", "-", "1", "]", "!=", "'output'", ":", "\n", "        ", "raise", "ValueError", "(", "'Last operation should be \"output\"'", ")", "\n", "\n", "", "if", "len", "(", "ops", ")", "==", "2", ":", "\n", "        ", "return", "net", "\n", "\n", "", "tensors", "=", "[", "net", "]", "\n", "for", "node", "in", "range", "(", "1", ",", "len", "(", "ops", ")", ")", ":", "\n", "        ", "op", "=", "ops", "[", "node", "]", "\n", "inputs", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "if", "matrix", "[", "i", "]", "[", "node", "]", "]", "\n", "input_tensors", "=", "[", "tensors", "[", "i", "]", "for", "i", "in", "inputs", "]", "\n", "assert", "input_tensors", ",", "f'{node}, {matrix}, {ops}'", "\n", "\n", "# Add op inputs together", "\n", "op_input", "=", "input_tensors", "[", "0", "]", "\n", "for", "input_tensor", "in", "input_tensors", "[", "1", ":", "]", ":", "\n", "            ", "op_input", "+=", "input_tensor", "\n", "\n", "", "if", "op", "!=", "'output'", ":", "\n", "            ", "output", "=", "_opindex_to_ctor", "[", "op", "]", "(", "op_input", ",", "channels", ",", "data_format", ",", "data_type", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "op_input", "\n", "\n", "", "tensors", ".", "append", "(", "output", ")", "\n", "\n", "", "return", "tensors", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_reduction": [[249, 298], ["tensorflow.variable_scope", "tensorflow.keras.layers.AvgPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "function", ["None"], ["", "def", "build_reduction", "(", "net", ",", "channels", ",", "data_format", ",", "data_type", ")", ":", "\n", "    ", "''' Args:\n            net : input tensor\n            channels : output channels (i.e. after reduction)\n            data_format : 'channels_last' or 'channels_first', see TF documentation\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "'residual'", ")", ":", "\n", "        ", "residual", "=", "tf", ".", "keras", ".", "layers", ".", "AvgPool2D", "(", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "\n", "residual", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "residual", ")", "\n", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "None", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "\n", "return", "net", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_model": [[300, 369], ["utils.get_matrix_and_ops", "tensorflow.placeholder", "bool", "bool", "getattr", "len", "tensorflow.variable_scope", "range", "tensorflow.reshape", "ValueError", "tensorflow.expand_dims", "len", "tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.keras.layers.AvgPool2D", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.Conv2D", "tensorflow.variable_scope", "range", "tf_model.build_reduction", "tensorflow.variable_scope", "tf_model.build_cell"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_matrix_and_ops", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_reduction", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_cell"], ["", "", "def", "build_model", "(", "arch_vector", ",", "input_size", "=", "(", "1", ",", "32", ",", "32", ",", "3", ")", ",", "stacks_count", "=", "3", ",", "cells_count", "=", "5", ",", "num_classes", "=", "10", ",", "data_format", "=", "'channels_last'", ",", "data_type", "=", "'float32'", ")", ":", "\n", "    ", "''' Args:\n            arch_vector : should be a point from the nasbench201 search space, as used by the Nasbench201 backend in autocaml\n                (i.e. 6 values from range [0-4])\n    '''", "\n", "matrix", ",", "ops", "=", "utils", ".", "get_matrix_and_ops", "(", "arch_vector", ")", "\n", "assert", "bool", "(", "matrix", ")", "==", "bool", "(", "ops", ")", "\n", "if", "not", "matrix", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "try", ":", "\n", "        ", "data_type", "=", "getattr", "(", "tf", ",", "data_type", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported data type: {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "input_placeholder", "=", "tf", ".", "placeholder", "(", "data_type", ",", "input_size", ",", "name", "=", "'input'", ")", "\n", "net", "=", "input_placeholder", "\n", "\n", "if", "len", "(", "net", ".", "shape", ")", "<", "4", ":", "\n", "        ", "if", "len", "(", "net", ".", "shape", ")", "<", "3", "and", "data_format", "==", "'channels_last'", ":", "\n", "            ", "net", "=", "tf", ".", "expand_dims", "(", "net", ",", "-", "1", ")", "\n", "\n", "", "while", "len", "(", "net", ".", "shape", ")", "<", "4", ":", "\n", "            ", "net", "=", "tf", ".", "expand_dims", "(", "net", ",", "0", ")", "\n", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'nasbench201_dnn'", ")", ":", "\n", "# Initial stem convolution", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'stem'", ")", ":", "\n", "            ", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "16", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dtype", "=", "data_type", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "net", ")", "\n", "\n", "", "channels", "=", "16", "\n", "for", "stack", "in", "range", "(", "stacks_count", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'stack{stack}'", ")", ":", "\n", "                ", "for", "cell", "in", "range", "(", "cells_count", ")", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "f'cell{cell}'", ")", ":", "\n", "                        ", "net", "=", "build_cell", "(", "net", ",", "matrix", ",", "ops", ",", "channels", ",", "data_format", ",", "data_type", ")", "\n", "\n", "", "", "if", "stack", "+", "1", "!=", "stacks_count", ":", "\n", "                    ", "net", "=", "build_reduction", "(", "net", ",", "channels", "*", "2", ",", "data_format", ",", "data_type", ")", "\n", "\n", "", "", "channels", "=", "channels", "*", "2", "\n", "\n", "", "net", "=", "tf", ".", "keras", ".", "layers", ".", "AvgPool2D", "(", "\n", "pool_size", "=", "net", ".", "shape", "[", "1", ":", "3", "]", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "net", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "\n", "net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "num_classes", ",", "\n", "use_bias", "=", "True", ",", "\n", "dtype", "=", "data_type", "\n", ")", "(", "net", ")", "\n", "\n", "", "return", "net", ",", "input_placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_graph": [[371, 383], ["tensorflow.Graph", "tf.Graph.as_default", "tf_model.build_model"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model"], ["", "def", "build_graph", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "''' The same as :py:func:`build_model` but captures the returned network within a new ``tf.Graph`` object which is returned\n        together with the output tensor (required for performing some operations on the graph)\n    '''", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "logits", ",", "_", "=", "build_model", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "logits", "is", "None", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "return", "graph", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_and_convert_to_graph_def": [[385, 424], ["tensorflow.Graph", "tf.Graph.as_default", "tf_model.build_ops", "tf_model.build_model", "tf_model.build_graph_def", "tf_model.build_graph_def", "build_graph_def.append", "graph_defs.append", "input.get_shape"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_ops", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_graph_def", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_graph_def"], ["", "def", "build_and_convert_to_graph_def", "(", "arch_vector", ",", "profile_layers", "=", "None", ",", "graph_dir", "=", "None", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "''' Creates a TF graph according to architecture vector 'arch_vector'.\n        The created graph is converted to TF graph_def format and returned, if the 'arch_vector' describes a valid model,\n        otherwise None is returned.\n        Optionally, if 'graph_dir' is a non-empty string, the original TF Graph (i.e. before conversion)\n        will be saved to the directory pointed by the argument (using summary mechanism).\n        The converted model can also be optionally saved in the file specified by 'output_file'.\n\n        The network created is not trained and is meant to only be used to measure inference time on-device.\n\n        Args:\n            arch_vector : list of integers describing nasbench201 model, to obtain an arch vector from an arch string see `get_arch_vector_from_arch_str`\n            \n            graph_dir : optional path to a directory in which a tf summary of the graph will be saved (to view in tensorboard), see `save_graph`\n        \n        The following arguments are passed directly to `convert_to_graph_def`:\n            output_file : file which will contain tf model\n            checkpoint : specifies a checkpoint to load before converting\n\n        The remaining arguments are passed directly to `build_model`.\n\n        Returns:\n            Graph definition of the TF model if 'arch_vector' describes a valid model,\n            otherwise None.\n    '''", "\n", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "if", "profile_layers", ":", "\n", "            ", "nets", "=", "build_ops", "(", "**", "kwargs", ")", "\n", "graph_defs", "=", "[", "]", "\n", "for", "logits", ",", "input", ",", "tag", "in", "nets", ":", "\n", "                ", "graph_def", "=", "build_graph_def", "(", "logits", ",", "input", ",", "graph", ",", "graph_dir", ",", "output_file", ",", "checkpoint", ",", "input", ".", "get_shape", "(", ")", ")", "\n", "graph_def", ".", "append", "(", "tag", ")", "\n", "graph_defs", ".", "append", "(", "graph_def", ")", "\n", "", "return", "graph_defs", "\n", "", "else", ":", "\n", "            ", "logits", ",", "input_placeholder", "=", "build_model", "(", "arch_vector", ",", "**", "kwargs", ")", "\n", "return", "build_graph_def", "(", "logits", ",", "input_placeholder", ",", "graph", ",", "graph_dir", ",", "output_file", ",", "checkpoint", ",", "kwargs", "[", "'input_size'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_graph_def": [[426, 437], ["tf_utils.convert_to_graph_def", "pathlib.Path", "tf_utils.save_graph", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_graph_def", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.save_graph"], ["", "", "", "def", "build_graph_def", "(", "logits", ",", "input_placeholder", ",", "graph", ",", "graph_dir", ",", "output_file", ",", "checkpoint", ",", "input_size", ")", ":", "\n", "    ", "if", "logits", "is", "not", "None", ":", "\n", "        ", "if", "graph_dir", ":", "\n", "            ", "gpath", "=", "pathlib", ".", "Path", "(", "graph_dir", ")", "\n", "if", "output_file", ":", "\n", "                ", "gpath", "=", "gpath", "/", "pathlib", ".", "Path", "(", "output_file", ")", ".", "name", "\n", "", "tf_utils", ".", "save_graph", "(", "graph", ",", "gpath", ")", "\n", "", "graph_def", "=", "tf_utils", ".", "convert_to_graph_def", "(", "graph", ",", "[", "logits", "]", ",", "output_file", "=", "output_file", ",", "checkpoint", "=", "checkpoint", ")", "\n", "return", "[", "graph_def", ",", "input_placeholder", ".", "name", ",", "logits", ".", "name", ",", "input_size", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_and_convert_to_tflite": [[439, 479], ["tensorflow.Graph", "tf.Graph.as_default", "tf_model.build_model", "tf_utils.convert_to_tflite", "pathlib.Path", "tf_utils.save_graph", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_tflite", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.save_graph"], ["", "", "def", "build_and_convert_to_tflite", "(", "arch_vector", ",", "graph_dir", "=", "None", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ",", "quantize_weights", "=", "True", ",", "quantize_activations", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "''' Creates a tf graph (optimized for inference, not training) according to architecture vector 'arch_vector'.\n        The created graph is converted to TFLite format and returned, if the 'arch_vector' describes a valid model,\n        otherwise None is returned.\n        Optionally, if 'graph_dir' is a non-empty string, the original TF Graph (i.e. before conversion)\n        will be saved to the directory pointed by the argument (using summary mechanism).\n        The converted model can also be optionally saved in the file specified by 'output_file'.\n\n        The network created is not trained and is meant to only be used to measure inference time on-device.\n\n        Args:\n            arch_vector : list of integers describing nasbench201 model, to obtain an arch vector from an arch string see `get_arch_vector_from_arch_str`\n            \n            graph_dir : optional path to a directory in which a tf summary of the graph will be saved (to view in tensorboard), see `save_graph`\n        \n        The following arguments are passed directly to `convert_to_tflite`:\n            output_file : file which will contain tflite model\n            checkpoint : specifies a checkpoint to load before converting\n            quantize_weights : whether to use the default post-training quantization\n            quantize_activations : whether to perform computations on quantized data (requires quantization of activations)\n\n        The remaining arguments are passed directly to `build_model`.\n\n        Returns:\n            Binary representation of the converted TFLite model  if 'arch_vector' describes a valid model,\n            otherwise None.\n    '''", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "logits", ",", "input_placeholder", "=", "build_model", "(", "arch_vector", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "logits", "is", "not", "None", ":", "\n", "        ", "if", "graph_dir", ":", "\n", "            ", "gpath", "=", "pathlib", ".", "Path", "(", "graph_dir", ")", "\n", "if", "output_file", ":", "\n", "                ", "gpath", "=", "gpath", "/", "pathlib", ".", "Path", "(", "output_file", ")", ".", "name", "\n", "", "tf_utils", ".", "save_graph", "(", "graph", ",", "gpath", ")", "\n", "", "return", "tf_utils", ".", "convert_to_tflite", "(", "graph", ",", "[", "input_placeholder", "]", ",", "[", "logits", "]", ",", "output_file", "=", "output_file", ",", "checkpoint", "=", "checkpoint", ",", "quantize_weights", "=", "quantize_weights", ",", "quantize_activations", "=", "quantize_activations", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_model.build_and_convert_to_trt": [[481, 489], ["tensorflow.Graph", "tf.Graph.as_default", "tf_model.build_model", "tf_utils.convert_to_trt"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.convert_to_trt"], ["", "", "def", "build_and_convert_to_trt", "(", "arch_vector", ",", "graph_dir", "=", "None", ",", "output_file", "=", "None", ",", "checkpoint", "=", "None", ",", "quantize_weights", "=", "True", ",", "quantize_activations", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "logits", ",", "input_placeholder", "=", "build_model", "(", "arch_vector", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "logits", "is", "not", "None", ":", "\n", "        ", "trt_graph", "=", "tf_utils", ".", "convert_to_trt", "(", "graph", ",", "[", "input_placeholder", "]", ",", "[", "logits", "]", ",", "output_file", "=", "output_file", ",", "checkpoint", "=", "checkpoint", ",", "quantize_weights", "=", "quantize_weights", ",", "quantize_activations", "=", "quantize_activations", ")", "\n", "return", "[", "trt_graph", ",", "input_placeholder", ".", "name", ",", "logits", ".", "name", ",", "kwargs", "[", "'input_size'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_supported_models": [[22, 48], ["model_info.ModelRequirements", "model_info.ModelRequirements", "model_info.ModelRequirements"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__._update_args_for_build_model": [[52, 79], ["model_args.get", "model_args.setdefault", "model_args.get", "model_args.setdefault", "model_args.get", "model_args.setdefault", "ValueError", "model_args.get", "model_args.setdefault", "ValueError", "model_args.get", "model_args.get"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_tf_func_and_args": [[81, 90], ["__init__._update_args_for_build_model", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "tf_utils.disable_warnings"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__._update_args_for_build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.disable_warnings"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_tflite_func_and_args": [[92, 109], ["__init__._update_args_for_build_model", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "tf_utils.disable_warnings"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__._update_args_for_build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.disable_warnings"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_trt_func_and_args": [[111, 128], ["__init__._update_args_for_build_model", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "_update_args_for_build_model.setdefault", "tf_utils.disable_warnings"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__._update_args_for_build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.tf_utils.disable_warnings"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_models_ctor": [[130, 142], ["functools.partial", "__init__.get_tf_func_and_args", "__init__.get_tflite_func_and_args", "__init__.get_trt_func_and_args", "ValueError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_tf_func_and_args", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_tflite_func_and_args", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.__init__.get_trt_func_and_args"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_models_iter": [[34, 64], ["range", "utils.get_models_iter.inc"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_total_models": [[66, 68], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_matrix_and_ops": [[69, 153], ["enumerate", "copy.copy", "utils.get_matrix_and_ops.bfs"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_adjacency_and_features": [[154, 173], ["matrix.insert", "enumerate", "enumerate", "row.insert", "range", "range", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_arch_vector_from_arch_str": [[174, 187], ["arch_str.split", "node[].split", "op_and_input.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.utils.get_arch_str_from_arch_vector": [[189, 192], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.PredictorMLP.__init__": [[23, 28], ["isinstance", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu", "=", "'0'", ",", "sess", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "if", "not", "isinstance", "(", "gpu", ",", "str", ")", ":", "\n", "            ", "gpu", "=", "str", "(", "gpu", ")", "\n", "", "self", ".", "gpu", "=", "gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.PredictorMLP.clear_gpu": [[29, 35], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.tensorflow_backend.clear_session"], "methods", ["None"], ["", "def", "clear_gpu", "(", "self", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "clear_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.PredictorMLP.get_dense_model": [[36, 77], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.set_session", "keras.layers.Input", "keras.models.Sequential", "model.add", "model.add", "model.add", "model.add", "model.", "keras.models.Model", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l1", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "get_dense_model", "(", "self", ",", "\n", "input_dims", ",", "\n", "num_layers", ",", "\n", "layer_width", ",", "\n", "loss", ",", "\n", "regularization", ",", "\n", "dynamic_filter", "=", "0", ",", "\n", "dynamic_kernel", "=", "0", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "keras", ".", "backend", ".", "set_session", "(", "self", ".", "sess", ")", "\n", "\n", "input_layer", "=", "keras", ".", "layers", ".", "Input", "(", "input_dims", ")", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "\n", "# if dynamic_kernel > 0 and dynamic_filter > 0:", "\n", "#     model.add(keras.layers.Conv1D(filters=dynamic_filter, kernel_size=dynamic_kernel))", "\n", "\n", "# for _ in range(num_layers):", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "512", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "2048", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "2048", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "512", ",", "activation", "=", "'relu'", ")", ")", "\n", "\n", "model", "=", "model", "(", "input_layer", ")", "\n", "if", "loss", "==", "'mle'", ":", "\n", "            ", "mean", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Activation", "(", "tf", ".", "math", ".", "softplus", ")", "(", "var", ")", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "mean", ",", "var", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "regularization", "==", "0", ":", "\n", "                ", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "", "else", ":", "\n", "                ", "reg", "=", "keras", ".", "regularizers", ".", "l1", "(", "regularization", ")", "\n", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "kernel_regularizer", "=", "reg", ")", "(", "model", ")", "\n", "\n", "", "", "dense_net", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "input_layer", ",", "outputs", "=", "output", ")", "\n", "return", "dense_net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.PredictorMLP.fit": [[78, 113], ["PredictorMLP.PredictorMLP.get_dense_model", "keras.optimizers.Adam", "PredictorMLP.PredictorMLP.model.compile", "PredictorMLP.PredictorMLP.model.fit", "numpy.squeeze", "numpy.mean", "PredictorMLP.PredictorMLP.model.predict", "abs"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.get_dense_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "\n", "num_layers", "=", "10", ",", "\n", "layer_width", "=", "20", ",", "\n", "loss", "=", "'mae'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "32", ",", "\n", "lr", "=", ".01", ",", "\n", "verbose", "=", "0", ",", "\n", "regularization", "=", "0", ",", "\n", "dynamic_filter", "=", "0", ",", "\n", "dynamic_kernel", "=", "0", ")", ":", "\n", "\n", "        ", "if", "loss", "==", "'mle'", ":", "\n", "            ", "loss_fn", "=", "mle_loss", "\n", "", "elif", "loss", "==", "'mape'", ":", "\n", "            ", "loss_fn", "=", "mape_loss", "\n", "", "else", ":", "\n", "            ", "loss_fn", "=", "'mae'", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "get_dense_model", "(", "(", "xtrain", ".", "shape", "[", "1", "]", ",", ")", ",", "\n", "loss", "=", "loss_fn", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "layer_width", "=", "layer_width", ",", "\n", "regularization", "=", "regularization", ",", "\n", "dynamic_filter", "=", "dynamic_filter", ",", "\n", "dynamic_kernel", "=", "dynamic_kernel", ")", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr", ",", "beta_1", "=", ".9", ",", "beta_2", "=", ".99", ")", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "loss_fn", ")", "\n", "self", ".", "model", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "verbose", "=", "verbose", ")", "\n", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.PredictorMLP.predict": [[114, 116], ["PredictorMLP.PredictorMLP.model.predict"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict"], ["", "def", "predict", "(", "self", ",", "xtest", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "xtest", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.mle_loss": [[7, 12], ["tensorflow.slice", "tensorflow.slice", "tensorflow.log", "tensorflow.square"], "function", ["None"], ["def", "mle_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum likelihood estimate loss function", "\n", "    ", "mean", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "var", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "0.5", "*", "tf", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "var", ")", "+", "tf", ".", "square", "(", "y_true", "-", "mean", ")", "/", "(", "2", "*", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.MLP.PredictorMLP.mape_loss": [[14, 20], ["tensorflow.math.divide", "tensorflow.abs", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.subtract"], "function", ["None"], ["", "def", "mape_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum absolute percentage error loss function", "\n", "    ", "lower_bound", "=", "4.5", "\n", "fraction", "=", "tf", ".", "math", ".", "divide", "(", "tf", ".", "subtract", "(", "y_pred", ",", "lower_bound", ")", ",", "\n", "tf", ".", "subtract", "(", "y_true", ",", "lower_bound", ")", ")", "\n", "return", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "fraction", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_darts.gin_predictor_open_search_fixed_nums.gin_predictor_fixed_num_search_open": [[14, 155], ["nas_lib.utils.utils_darts.init_nasbench_macro_cifar10", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "search_space.generate_random_dataset", "model_keys.extend", "enumerate", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "macro_graph_dict[].extend", "len", "search_space.assemble_graph", "numpy.array", "search_space.get_candidates", "enumerate", "search_space.assemble_graph", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "meta_neuralnet.pred.cpu().numpy", "numpy.argsort", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "numpy.mean", "numpy.array", "len", "ValueError", "nas_lib.models_darts.darts_graph.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "nas_lib.models_darts.darts_graph.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "model_keys.append", "temp_model_keys.append", "temp_candidate_train_arch.append", "pred_acc.append", "len", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "macro_graph_dict[].extend", "numpy.abs", "logger.info", "logger.info", "hashlib.sha256", "len", "meta_neuralnet.pred.cpu", "os.path.join", "os.path.join", "ValueError", "sorted", "str().encode", "hashlib.sha256", "enumerate", "open", "pickle.dump", "meta_neuralnet.pred.cpu().numpy", "min", "str().encode", "len", "str", "meta_neuralnet.pred.cpu", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.init_nasbench_macro_cifar10", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "gin_predictor_fixed_num_search_open", "(", "search_space", ",", "\n", "algo_info", ",", "\n", "logger", ",", "\n", "gpus", ",", "\n", "save_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "dataset", "=", "'cifar10'", ",", "\n", "load_model", "=", "None", ",", "\n", "pre_train_algo", "=", "None", ",", "\n", "seed", "=", "111222333", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "total_queries", "=", "algo_info", "[", "'total_queries'", "]", "\n", "num_init", "=", "algo_info", "[", "'num_init'", "]", "\n", "k_num", "=", "algo_info", "[", "'k'", "]", "\n", "epochs", "=", "algo_info", "[", "'epochs'", "]", "\n", "batch_size", "=", "algo_info", "[", "'batch_size'", "]", "\n", "lr", "=", "algo_info", "[", "'lr'", "]", "\n", "encode_path", "=", "algo_info", "[", "'encode_path'", "]", "\n", "candidate_nums", "=", "algo_info", "[", "'candidate_nums'", "]", "\n", "mutate_rate", "=", "algo_info", "[", "'mutate_rate'", "]", "\n", "filter_method", "=", "algo_info", "[", "'filter_method'", "]", "\n", "fixed_num", "=", "algo_info", "[", "'fixed_num'", "]", "\n", "macro_graph_dict", "=", "{", "}", "\n", "model_keys", "=", "[", "]", "\n", "init_nasbench_macro_cifar10", "(", "save_dir", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "data_dict", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", "filter_method", "=", "filter_method", ")", "# pape pe", "\n", "data_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "data_dict", "]", "\n", "data_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "data_dict_keys", "]", "\n", "model_keys", ".", "extend", "(", "data_dict_keys", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data_dict", ")", ":", "\n", "        ", "macro_graph_dict", "[", "data_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "darts_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "data_dict", ")", "\n", "data", "=", "async_macro_model_train", "(", "model_data", "=", "darts_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "# data = {k: [idx, idx] for idx, k in enumerate(darts_neural_dict)}", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "            ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "", "query", "=", "num_init", "+", "len", "(", "data_dict_keys", ")", "\n", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "train_data", "=", "search_space", ".", "assemble_graph", "(", "macro_graph_dict", ",", "model_keys", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "train_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "candidate_graph_dict", "=", "{", "}", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "macro_graph_dict", ",", "\n", "model_keys", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", "mutate_rate", "=", "mutate_rate", ",", "\n", "filter_method", "=", "filter_method", "\n", ")", "\n", "candidate_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "candidates", "]", "\n", "candidate_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "candidate_dict_keys", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "candidates", ")", ":", "\n", "            ", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "xcandidates", "=", "search_space", ".", "assemble_graph", "(", "candidate_graph_dict", ",", "candidate_dict_keys", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "xcandidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "meta_neuralnet", "=", "NasBenchGinPredictorTrainer", "(", "lr", "=", "lr", ",", "epochs", "=", "epochs", ",", "train_images", "=", "len", "(", "arch_data_edge_idx_list", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "input_dim", "=", "11", ",", "agent_type", "=", "'gin'", ",", "\n", "rate", "=", "15.", ",", "model_dir", "=", "load_model", ",", "algo_name", "=", "pre_train_algo", ",", "\n", "predictor_type", "=", "pre_train_algo", ",", "logger", "=", "logger", ")", "\n", "\n", "meta_neuralnet", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_losses", ",", "logger", "=", "logger", ")", "\n", "pred_train", "=", "meta_neuralnet", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "meta_neuralnet", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "\n", "temp_candidate_train_arch", "=", "[", "]", "\n", "pred_acc", "=", "[", "]", "\n", "temp_model_keys", "=", "[", "]", "\n", "for", "j", "in", "sorted_indices", "[", ":", "k_num", "]", ":", "\n", "            ", "model_keys", ".", "append", "(", "candidate_dict_keys", "[", "j", "]", ")", "\n", "temp_model_keys", ".", "append", "(", "candidate_dict_keys", "[", "j", "]", ")", "\n", "macro_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "=", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "\n", "temp_candidate_train_arch", ".", "append", "(", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", ")", "\n", "pred_acc", ".", "append", "(", "candidate_np", "[", "j", "]", ")", "\n", "", "darts_candidate_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "temp_candidate_train_arch", ")", "\n", "\n", "if", "len", "(", "macro_graph_dict", ")", "<=", "fixed_num", "+", "num_init", ":", "\n", "            ", "darts_candidate_acc", "=", "async_macro_model_train", "(", "model_data", "=", "darts_candidate_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "# darts_candidate_acc = {k: (idx, idx) for idx, k in enumerate(darts_candidate_neural_dict)}", "\n", "", "else", ":", "\n", "            ", "darts_candidate_acc", "=", "{", "k", ":", "(", "pred_acc", "[", "idx", "]", ",", "pred_acc", "[", "idx", "]", ")", "for", "idx", ",", "k", "in", "enumerate", "(", "temp_model_keys", ")", "}", "\n", "for", "k", "in", "temp_model_keys", ":", "\n", "                ", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'model_pkl'", ")", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_file", ",", "k", "+", "'.pkl'", ")", "\n", "model_info", "=", "{", "'key'", ":", "k", ",", "\n", "'gentype'", ":", "darts_candidate_neural_dict", "[", "k", "]", ".", "genotype", ",", "\n", "'val_acc'", ":", "darts_candidate_acc", "[", "k", "]", "[", "0", "]", ",", "\n", "'test_acc'", ":", "darts_candidate_acc", "[", "k", "]", "[", "0", "]", "}", "\n", "with", "open", "(", "save_file", ",", "'wb'", ")", "as", "fb", ":", "\n", "                    ", "pickle", ".", "dump", "(", "model_info", ",", "fb", ")", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "darts_candidate_acc", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "                ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "train_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_losses", ")", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "val_losses", ")", "[", ":", "min", "(", "5", ",", "len", "(", "val_losses", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "len", "(", "temp_candidate_train_arch", ")", "\n", "", "return", "macro_graph_dict", ",", "model_keys", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_darts.gin_predictor_open_search.gin_predictor_search_open": [[12, 132], ["nas_lib.utils.utils_darts.init_nasbench_macro_cifar10", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "search_space.generate_random_dataset", "model_keys.extend", "enumerate", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "macro_graph_dict[].extend", "len", "search_space.assemble_graph", "numpy.array", "search_space.get_candidates", "enumerate", "search_space.assemble_graph", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "meta_neuralnet.pred.cpu().numpy", "numpy.argsort", "search_space.assemble_cifar10_neural_net", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "nas_lib.eigen.trainer_nasbench_open_darts_async.async_macro_model_train.items", "numpy.mean", "numpy.array", "len", "ValueError", "nas_lib.models_darts.darts_graph.nasbench2graph2", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "list", "nas_lib.models_darts.darts_graph.nasbench2graph2", "candiate_edge_list.append", "candiate_node_list.append", "model_keys.append", "temp_candidate_train_arch.append", "macro_graph_dict[].extend", "numpy.abs", "logger.info", "logger.info", "hashlib.sha256", "len", "meta_neuralnet.pred.cpu", "ValueError", "sorted", "str().encode", "hashlib.sha256", "meta_neuralnet.pred.cpu().numpy", "min", "str().encode", "len", "str", "meta_neuralnet.pred.cpu", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.init_nasbench_macro_cifar10", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_cifar10_neural_net", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.async_macro_model_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "gin_predictor_search_open", "(", "search_space", ",", "\n", "algo_info", ",", "\n", "logger", ",", "\n", "gpus", ",", "\n", "save_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "dataset", "=", "'cifar10'", ",", "\n", "load_model", "=", "None", ",", "\n", "pre_train_algo", "=", "None", ",", "\n", "seed", "=", "111222333", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "total_queries", "=", "algo_info", "[", "'total_queries'", "]", "\n", "num_init", "=", "algo_info", "[", "'num_init'", "]", "\n", "k_num", "=", "algo_info", "[", "'k'", "]", "\n", "epochs", "=", "algo_info", "[", "'epochs'", "]", "\n", "batch_size", "=", "algo_info", "[", "'batch_size'", "]", "\n", "lr", "=", "algo_info", "[", "'lr'", "]", "\n", "encode_path", "=", "algo_info", "[", "'encode_path'", "]", "\n", "candidate_nums", "=", "algo_info", "[", "'candidate_nums'", "]", "\n", "mutate_rate", "=", "algo_info", "[", "'mutate_rate'", "]", "\n", "filter_method", "=", "algo_info", "[", "'filter_method'", "]", "\n", "macro_graph_dict", "=", "{", "}", "\n", "model_keys", "=", "[", "]", "\n", "init_nasbench_macro_cifar10", "(", "save_dir", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "data_dict", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", "filter_method", "=", "filter_method", ")", "# pape pe", "\n", "data_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "data_dict", "]", "\n", "data_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "data_dict_keys", "]", "\n", "model_keys", ".", "extend", "(", "data_dict_keys", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data_dict", ")", ":", "\n", "        ", "macro_graph_dict", "[", "data_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "darts_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "data_dict", ")", "\n", "data", "=", "async_macro_model_train", "(", "model_data", "=", "darts_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "# data = {k: [idx] for idx, k in enumerate(darts_neural_dict)}", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "            ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "", "query", "=", "num_init", "+", "len", "(", "data_dict_keys", ")", "\n", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "train_data", "=", "search_space", ".", "assemble_graph", "(", "macro_graph_dict", ",", "model_keys", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "train_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "candidate_graph_dict", "=", "{", "}", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "macro_graph_dict", ",", "\n", "model_keys", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "encode_paths", "=", "encode_path", ",", "\n", "mutate_rate", "=", "mutate_rate", ",", "\n", "filter_method", "=", "filter_method", "\n", ")", "\n", "candidate_dict_keys", "=", "[", "convert_to_genotype", "(", "d", "[", "0", "]", ",", "verbose", "=", "False", ")", "for", "d", "in", "candidates", "]", "\n", "candidate_dict_keys", "=", "[", "sha256", "(", "str", "(", "k", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "k", "in", "candidate_dict_keys", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "candidates", ")", ":", "\n", "            ", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "i", "]", "]", "=", "list", "(", "d", ")", "\n", "", "xcandidates", "=", "search_space", ".", "assemble_graph", "(", "candidate_graph_dict", ",", "candidate_dict_keys", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "xcandidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph2", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "meta_neuralnet", "=", "NasBenchGinPredictorTrainer", "(", "lr", "=", "lr", ",", "epochs", "=", "epochs", ",", "train_images", "=", "len", "(", "arch_data_edge_idx_list", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "input_dim", "=", "11", ",", "agent_type", "=", "'gin'", ",", "\n", "rate", "=", "15.", ",", "model_dir", "=", "load_model", ",", "algo_name", "=", "pre_train_algo", ",", "\n", "predictor_type", "=", "pre_train_algo", ",", "logger", "=", "logger", ")", "\n", "meta_neuralnet", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_losses", ",", "logger", "=", "logger", ")", "\n", "pred_train", "=", "meta_neuralnet", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "meta_neuralnet", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "\n", "temp_candidate_train_arch", "=", "[", "]", "\n", "for", "j", "in", "sorted_indices", "[", ":", "k_num", "]", ":", "\n", "            ", "model_keys", ".", "append", "(", "candidate_dict_keys", "[", "j", "]", ")", "\n", "macro_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "=", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", "\n", "temp_candidate_train_arch", ".", "append", "(", "candidate_graph_dict", "[", "candidate_dict_keys", "[", "j", "]", "]", ")", "\n", "", "darts_candidate_neural_dict", "=", "search_space", ".", "assemble_cifar10_neural_net", "(", "temp_candidate_train_arch", ")", "\n", "darts_candidate_acc", "=", "async_macro_model_train", "(", "model_data", "=", "darts_candidate_neural_dict", ",", "\n", "gpus", "=", "gpus", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "dataset", "=", "dataset", ")", "\n", "for", "k", ",", "v", "in", "darts_candidate_acc", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "macro_graph_dict", ":", "\n", "                ", "raise", "ValueError", "(", "'model trained acc key should in macro_graph_dict'", ")", "\n", "", "macro_graph_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "train_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "pred_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_losses", ")", ")", "\n", "val_losses", "=", "np", ".", "array", "(", "[", "macro_graph_dict", "[", "k", "]", "[", "2", "]", "for", "k", "in", "model_keys", "]", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "val_losses", ")", "[", ":", "min", "(", "5", ",", "len", "(", "val_losses", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "len", "(", "temp_candidate_train_arch", ")", "\n", "", "return", "macro_graph_dict", ",", "model_keys", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_darts.build_open_algos.build_open_algos": [[6, 8], ["getattr"], "function", ["None"], ["def", "build_open_algos", "(", "agent", ")", ":", "\n", "    ", "return", "getattr", "(", "sys", ".", "modules", "[", "__name__", "]", ",", "agent", "+", "'_search_open'", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gin.PredictorGIN.__init__": [[11, 37], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "6", ",", "dim1", "=", "32", ",", "dim2", "=", "16", ",", ")", ":", "\n", "        ", "super", "(", "PredictorGIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn2", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "GINConv", "(", "nn2", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "#", "\n", "nn3", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ")", ")", "\n", "self", ".", "conv3", "=", "GINConv", "(", "nn3", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "linear_mean", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gin.PredictorGIN.forward": [[38, 40], ["predictor_gin.PredictorGIN.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "t_sne", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ",", "t_sne", "=", "t_sne", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gin.PredictorGIN.forward_batch": [[41, 62], ["torch.relu", "torch.relu", "torch.relu", "predictor_gin.PredictorGIN.bn1", "torch.relu", "torch.relu", "torch.relu", "predictor_gin.PredictorGIN.bn2", "torch.relu", "torch.relu", "torch.relu", "predictor_gin.PredictorGIN.bn3", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "predictor_gin.PredictorGIN.linear_mean", "predictor_gin.PredictorGIN.out_layer", "predictor_gin.PredictorGIN.conv1", "predictor_gin.PredictorGIN.conv2", "predictor_gin.PredictorGIN.conv3", "predictor_gin.PredictorGIN.linear_before"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ",", "t_sne", "=", "None", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ",", "edge_index", ")", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ")", "\n", "\n", "x_embedding", "=", "gmp", "(", "x3", ",", "batch", ")", "\n", "x_embedding_mean", "=", "F", ".", "relu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding_drop", "=", "F", ".", "dropout", "(", "x_embedding_mean", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "pred", "=", "self", ".", "linear_mean", "(", "x_embedding_drop", ")", "\n", "pred", "=", "self", ".", "out_layer", "(", "pred", ")", "\n", "\n", "if", "t_sne", ":", "\n", "            ", "return", "pred", ",", "x_embedding", "\n", "", "else", ":", "\n", "            ", "return", "pred", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gcn.PredictorGCN.__init__": [[10, 37], ["torch.Module.__init__", "gnn_lib.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "gnn_lib.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "layers.append", "layers.append", "layers.append", "layers.append", "isinstance", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "dim", "=", "16", ")", ":", "\n", "        ", "super", "(", "PredictorGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "input_dim", ",", "dim", ",", "cached", "=", "False", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "dim", ",", "dim", ",", "cached", "=", "False", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "linear_before", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", "*", "2", ",", "16", ")", "\n", "self", ".", "linear_mean", "=", "torch", ".", "nn", ".", "Linear", "(", "16", ",", "1", ")", "\n", "\n", "self", ".", "out_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "layers", ".", "append", "(", "self", ".", "conv1", ")", "\n", "layers", ".", "append", "(", "self", ".", "conv2", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_before", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "GCNConv", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gcn.PredictorGCN.forward": [[38, 40], ["predictor_gcn.PredictorGCN.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data", ",", "edge_index", ",", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_gcn.PredictorGCN.forward_batch": [[41, 56], ["torch.relu", "torch.relu", "torch.relu", "predictor_gcn.PredictorGCN.bn1", "torch.relu", "torch.relu", "torch.relu", "predictor_gcn.PredictorGCN.bn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "predictor_gcn.PredictorGCN.linear_mean", "predictor_gcn.PredictorGCN.out_layer", "predictor_gcn.PredictorGCN.conv1", "predictor_gcn.PredictorGCN.conv2", "predictor_gcn.PredictorGCN.linear_before", "gnn_lib.global_mean_pool", "gnn_lib.global_max_pool"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool", "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_max_pool"], ["", "def", "forward_batch", "(", "self", ",", "data", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data", ",", "edge_index", ")", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x1", ",", "edge_index", ")", ")", "\n", "x2", "=", "self", ".", "bn2", "(", "x2", ")", "\n", "\n", "x_embedding", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x2", ",", "batch", ")", ",", "gap", "(", "x2", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "x_embedding", "=", "F", ".", "relu", "(", "self", ".", "linear_before", "(", "x_embedding", ")", ")", "\n", "x_embedding", "=", "F", ".", "dropout", "(", "x_embedding", ",", "p", "=", "0.1", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "pred", "=", "self", ".", "linear_mean", "(", "x_embedding", ")", "\n", "pred", "=", "self", ".", "out_layer", "(", "pred", ")", "\n", "\n", "return", "pred", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED.__init__": [[16, 72], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "6", ",", "dim1", "=", "32", ",", "dim2", "=", "16", ")", ":", "\n", "        ", "super", "(", "PredictorSiameseGED", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "# The first two GIN layer is shared by two pred", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn2_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2_base", "=", "GINConv", "(", "nn2_base", ")", "\n", "self", ".", "bn2_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn3_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv3_base", "=", "GINConv", "(", "nn3_base", ")", "\n", "self", ".", "bn3_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "# The first two GIN layer is shared by two pred", "\n", "nn1_residual", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1_residual", "=", "GINConv", "(", "nn1_residual", ")", "\n", "self", ".", "bn1_residual", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn2_residual", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2_residual", "=", "GINConv", "(", "nn2_residual", ")", "\n", "self", ".", "bn2_residual", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn3_residual", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv3_residual", "=", "GINConv", "(", "nn3_residual", ")", "\n", "self", ".", "bn3_residual", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "self", ".", "linear_branch1", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", "\n", "# branch1 head", "\n", "# self.linear_branch1_head = torch.nn.Linear(dim, dim, bias=True)", "\n", "# self.linear_branch1_out = torch.nn.Linear(dim, dim, bias=True)", "\n", "\n", "self", ".", "linear_branch2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", "\n", "# branch2 head", "\n", "# self.linear_branch2_head = torch.nn.Linear(dim, dim, bias=True)", "\n", "# self.linear_branch2_out = torch.nn.Linear(dim, dim, bias=True)", "\n", "\n", "layers", ".", "append", "(", "self", ".", "linear_branch1", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_branch2", ")", "\n", "\n", "# For residual predictor", "\n", "self", ".", "linear_before_residual", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", "*", "2", ",", "dim2", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear_mean_residual", "=", "Linear", "(", "dim2", ",", "1", ")", "\n", "\n", "self", ".", "output", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "layers", ".", "append", "(", "self", ".", "linear_before_residual", ")", "\n", "layers", ".", "append", "(", "self", ".", "linear_mean_residual", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED.forward": [[73, 76], ["predictor_unsupervised_siamese_ged.PredictorSiameseGED.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "data_residual", ",", "edge_index_residual", ",", "batch_residual", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "data_residual", ",", "edge_index_residual", ",", "\n", "batch_residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED.forward_batch": [[77, 109], ["torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn1", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn2_base", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn3_base", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn1_residual", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn2_residual", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.bn3_residual", "gnn_lib.global_mean_pool", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.linear_mean_residual", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.output", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv1", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv2_base", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv3_base", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.linear_branch1", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv1_residual", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv2_residual", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.conv3_residual", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.linear_branch2", "predictor_unsupervised_siamese_ged.PredictorSiameseGED.linear_before_residual"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool", "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "data_residual", ",", "edge_index_residual", ",", "batch_residual", ")", ":", "\n", "# Base predictor inference", "\n", "        ", "x1_base", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data_base", ",", "edge_index_base", ")", ")", "\n", "x1_base", "=", "self", ".", "bn1", "(", "x1_base", ")", "\n", "\n", "x2_base", "=", "F", ".", "relu", "(", "self", ".", "conv2_base", "(", "x1_base", ",", "edge_index_base", ")", ")", "\n", "x2_base", "=", "self", ".", "bn2_base", "(", "x2_base", ")", "\n", "\n", "x3_base", "=", "F", ".", "relu", "(", "self", ".", "conv3_base", "(", "x2_base", ",", "edge_index_base", ")", ")", "\n", "x3_base", "=", "self", ".", "bn3_base", "(", "x3_base", ")", "\n", "x_embedding_base", "=", "gmp", "(", "x3_base", ",", "batch_base", ")", "\n", "x_embedding_base", "=", "F", ".", "relu", "(", "self", ".", "linear_branch1", "(", "x_embedding_base", ")", ")", "\n", "\n", "# Residual predictor inference", "\n", "x1_residual", "=", "F", ".", "relu", "(", "self", ".", "conv1_residual", "(", "data_residual", ",", "edge_index_residual", ")", ")", "\n", "x1_residual", "=", "self", ".", "bn1_residual", "(", "x1_residual", ")", "\n", "\n", "x2_residual", "=", "F", ".", "relu", "(", "self", ".", "conv2_residual", "(", "x1_residual", ",", "edge_index_residual", ")", ")", "\n", "x2_residual", "=", "self", ".", "bn2_residual", "(", "x2_residual", ")", "\n", "\n", "x3_residual", "=", "F", ".", "relu", "(", "self", ".", "conv3_residual", "(", "x2_residual", ",", "edge_index_residual", ")", ")", "\n", "x3_residual", "=", "self", ".", "bn3_residual", "(", "x3_residual", ")", "\n", "x_embedding_residual", "=", "gmp", "(", "x3_residual", ",", "batch_residual", ")", "\n", "x_embedding_residual", "=", "F", ".", "relu", "(", "self", ".", "linear_branch2", "(", "x_embedding_residual", ")", ")", "\n", "\n", "x_embedding_residual", "=", "torch", ".", "cat", "(", "[", "x_embedding_base", ",", "x_embedding_residual", "]", ",", "dim", "=", "-", "1", ")", "\n", "x_embedding_residual", "=", "F", ".", "relu", "(", "self", ".", "linear_before_residual", "(", "x_embedding_residual", ")", ")", "\n", "outputs", "=", "self", ".", "linear_mean_residual", "(", "x_embedding_residual", ")", "\n", "\n", "outputs", "=", "self", ".", "output", "(", "outputs", ")", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.__init__": [[23, 28], ["isinstance", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu", "=", "'0'", ",", "sess", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "if", "not", "isinstance", "(", "gpu", ",", "str", ")", ":", "\n", "            ", "gpu", "=", "str", "(", "gpu", ")", "\n", "", "self", ".", "gpu", "=", "gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.clear_gpu": [[29, 35], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.tensorflow_backend.clear_session"], "methods", ["None"], ["", "def", "clear_gpu", "(", "self", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "clear_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.get_dense_model": [[36, 74], ["tensorflow.ConfigProto", "str", "tensorflow.Session", "keras.backend.set_session", "keras.layers.Input", "keras.models.Sequential", "range", "model.", "keras.models.Model", "model.add", "keras.layers.concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l1", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "get_dense_model", "(", "self", ",", "\n", "input_dims", ",", "\n", "num_layers", ",", "\n", "layer_width", ",", "\n", "loss", ",", "\n", "regularization", ",", "\n", "dynamic_filter", "=", "0", ",", "\n", "dynamic_kernel", "=", "0", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "self", ".", "gpu", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "keras", ".", "backend", ".", "set_session", "(", "self", ".", "sess", ")", "\n", "\n", "input_layer", "=", "keras", ".", "layers", ".", "Input", "(", "input_dims", ")", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "\n", "# if dynamic_kernel > 0 and dynamic_filter > 0:", "\n", "#     model.add(keras.layers.Conv1D(filters=dynamic_filter, kernel_size=dynamic_kernel))", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "layer_width", ",", "activation", "=", "'relu'", ")", ")", "\n", "\n", "", "model", "=", "model", "(", "input_layer", ")", "\n", "if", "loss", "==", "'mle'", ":", "\n", "            ", "mean", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "var", "=", "keras", ".", "layers", ".", "Activation", "(", "tf", ".", "math", ".", "softplus", ")", "(", "var", ")", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "mean", ",", "var", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "regularization", "==", "0", ":", "\n", "                ", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "(", "model", ")", "\n", "", "else", ":", "\n", "                ", "reg", "=", "keras", ".", "regularizers", ".", "l1", "(", "regularization", ")", "\n", "output", "=", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "kernel_regularizer", "=", "reg", ")", "(", "model", ")", "\n", "\n", "", "", "dense_net", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "input_layer", ",", "outputs", "=", "output", ")", "\n", "return", "dense_net", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.fit": [[75, 110], ["predictor_mlp.PredictorMLP.get_dense_model", "keras.optimizers.Adam", "predictor_mlp.PredictorMLP.model.compile", "predictor_mlp.PredictorMLP.model.fit", "numpy.squeeze", "numpy.mean", "predictor_mlp.PredictorMLP.model.predict", "abs"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.get_dense_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict"], ["", "def", "fit", "(", "self", ",", "xtrain", ",", "ytrain", ",", "\n", "num_layers", "=", "10", ",", "\n", "layer_width", "=", "20", ",", "\n", "loss", "=", "'mae'", ",", "\n", "epochs", "=", "200", ",", "\n", "batch_size", "=", "32", ",", "\n", "lr", "=", ".01", ",", "\n", "verbose", "=", "0", ",", "\n", "regularization", "=", "0", ",", "\n", "dynamic_filter", "=", "0", ",", "\n", "dynamic_kernel", "=", "0", ")", ":", "\n", "\n", "        ", "if", "loss", "==", "'mle'", ":", "\n", "            ", "loss_fn", "=", "mle_loss", "\n", "", "elif", "loss", "==", "'mape'", ":", "\n", "            ", "loss_fn", "=", "mape_loss", "\n", "", "else", ":", "\n", "            ", "loss_fn", "=", "'mae'", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "get_dense_model", "(", "(", "xtrain", ".", "shape", "[", "1", "]", ",", ")", ",", "\n", "loss", "=", "loss_fn", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "layer_width", "=", "layer_width", ",", "\n", "regularization", "=", "regularization", ",", "\n", "dynamic_filter", "=", "dynamic_filter", ",", "\n", "dynamic_kernel", "=", "dynamic_kernel", ")", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr", ",", "beta_1", "=", ".9", ",", "beta_2", "=", ".99", ")", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "loss_fn", ")", "\n", "self", ".", "model", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "verbose", "=", "verbose", ")", "\n", "train_pred", "=", "np", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "xtrain", ")", ")", "\n", "train_error", "=", "np", ".", "mean", "(", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "return", "train_error", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict": [[111, 113], ["predictor_mlp.PredictorMLP.model.predict"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict"], ["", "def", "predict", "(", "self", ",", "xtest", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "xtest", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.mle_loss": [[7, 12], ["tensorflow.slice", "tensorflow.slice", "tensorflow.log", "tensorflow.square"], "function", ["None"], ["def", "mle_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum likelihood estimate loss function", "\n", "    ", "mean", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "var", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "0.5", "*", "tf", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "var", ")", "+", "tf", ".", "square", "(", "y_true", "-", "mean", ")", "/", "(", "2", "*", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.mape_loss": [[14, 20], ["tensorflow.math.divide", "tensorflow.abs", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.subtract"], "function", ["None"], ["", "def", "mape_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Minimum absolute percentage error loss function", "\n", "    ", "lower_bound", "=", "4.5", "\n", "fraction", "=", "tf", ".", "math", ".", "divide", "(", "tf", ".", "subtract", "(", "y_pred", ",", "lower_bound", ")", ",", "\n", "tf", ".", "subtract", "(", "y_true", ",", "lower_bound", ")", ")", "\n", "return", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "fraction", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_ccl.PredictorGINCCL.__init__": [[16, 45], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "predictor_gin_ccl.PredictorGINCCL.fc.apply", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.apply"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "8", ",", "dim1", "=", "32", ",", "num_classes", "=", "8", ",", "reTrain", "=", "False", ")", ":", "\n", "# 64, 16", "\n", "        ", "super", "(", "PredictorGINCCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "# dim = 32", "\n", "# The first two GIN layer is shared by two pred", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn2_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2_base", "=", "GINConv", "(", "nn2_base", ")", "\n", "self", ".", "bn2_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn3_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv3_base", "=", "GINConv", "(", "nn3_base", ")", "\n", "self", ".", "bn3_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "dim1", ",", "num_classes", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "num_classes", ",", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "fc", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n", "self", ".", "reTrain", "=", "reTrain", "\n", "if", "self", ".", "reTrain", ":", "\n", "            ", "self", ".", "output_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_ccl.PredictorGINCCL.init_weights": [[46, 50], ["type", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ",", "layer", ")", ":", "\n", "        ", "if", "type", "(", "layer", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_ccl.PredictorGINCCL.forward": [[51, 53], ["predictor_gin_ccl.PredictorGINCCL.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "def", "forward", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "t_sne", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_ccl.PredictorGINCCL.forward_batch": [[54, 75], ["torch.relu", "torch.relu", "torch.relu", "predictor_gin_ccl.PredictorGINCCL.bn1", "torch.relu", "torch.relu", "torch.relu", "predictor_gin_ccl.PredictorGINCCL.bn2_base", "torch.relu", "torch.relu", "torch.relu", "predictor_gin_ccl.PredictorGINCCL.bn3_base", "gnn_lib.global_mean_pool", "predictor_gin_ccl.PredictorGINCCL.fc", "predictor_gin_ccl.PredictorGINCCL.conv1", "predictor_gin_ccl.PredictorGINCCL.conv2_base", "predictor_gin_ccl.PredictorGINCCL.conv3_base", "predictor_gin_ccl.PredictorGINCCL.output_layer"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "False", ")", ":", "\n", "# Base predictor inference", "\n", "        ", "x1_base", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data_base", ",", "edge_index_base", ")", ")", "\n", "x1_base", "=", "self", ".", "bn1", "(", "x1_base", ")", "\n", "\n", "x2_base", "=", "F", ".", "relu", "(", "self", ".", "conv2_base", "(", "x1_base", ",", "edge_index_base", ")", ")", "\n", "x2_base", "=", "self", ".", "bn2_base", "(", "x2_base", ")", "\n", "\n", "x3_base", "=", "F", ".", "relu", "(", "self", ".", "conv3_base", "(", "x2_base", ",", "edge_index_base", ")", ")", "\n", "x3_base", "=", "self", ".", "bn3_base", "(", "x3_base", ")", "\n", "x_embedding_base", "=", "gmp", "(", "x3_base", ",", "batch_base", ")", "\n", "\n", "outputs", "=", "self", ".", "fc", "(", "x_embedding_base", ")", "\n", "\n", "if", "self", ".", "reTrain", ":", "\n", "            ", "outputs", "=", "self", ".", "output_layer", "(", "outputs", ")", "\n", "\n", "", "if", "t_sne", ":", "\n", "            ", "return", "outputs", ",", "x_embedding_base", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.__init__": [[16, 43], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "gnn_lib.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "6", ",", "dim1", "=", "32", ",", "reTrain", "=", "False", ")", ":", "\n", "        ", "super", "(", "PredictorGINRL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "# dim = 32", "\n", "# The first two GIN layer is shared by two pred", "\n", "nn1", "=", "Sequential", "(", "Linear", "(", "input_dim", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "GINConv", "(", "nn1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn2_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv2_base", "=", "GINConv", "(", "nn2_base", ")", "\n", "self", ".", "bn2_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "\n", "nn3_base", "=", "Sequential", "(", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim1", ",", "dim1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv3_base", "=", "GINConv", "(", "nn3_base", ")", "\n", "self", ".", "bn3_base", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim1", ")", "\n", "# branch1 head", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "output_layer", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "layers", ".", "append", "(", "self", ".", "fc", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward": [[44, 46], ["predictor_gin_rl.PredictorGINRL.forward_batch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch"], ["", "", "", "def", "forward", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "forward_batch", "(", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "t_sne", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL.forward_batch": [[47, 68], ["torch.relu", "torch.relu", "torch.relu", "predictor_gin_rl.PredictorGINRL.bn1", "torch.relu", "torch.relu", "torch.relu", "predictor_gin_rl.PredictorGINRL.bn2_base", "torch.relu", "torch.relu", "torch.relu", "predictor_gin_rl.PredictorGINRL.bn3_base", "gnn_lib.global_mean_pool", "predictor_gin_rl.PredictorGINRL.fc", "predictor_gin_rl.PredictorGINRL.output_layer", "predictor_gin_rl.PredictorGINRL.conv1", "predictor_gin_rl.PredictorGINRL.conv2_base", "predictor_gin_rl.PredictorGINRL.conv3_base"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool"], ["", "def", "forward_batch", "(", "self", ",", "data_base", ",", "edge_index_base", ",", "batch_base", ",", "t_sne", "=", "False", ")", ":", "\n", "# Base predictor inference", "\n", "        ", "x1_base", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "data_base", ",", "edge_index_base", ")", ")", "\n", "x1_base", "=", "self", ".", "bn1", "(", "x1_base", ")", "\n", "\n", "x2_base", "=", "F", ".", "relu", "(", "self", ".", "conv2_base", "(", "x1_base", ",", "edge_index_base", ")", ")", "\n", "x2_base", "=", "self", ".", "bn2_base", "(", "x2_base", ")", "\n", "\n", "x3_base", "=", "F", ".", "relu", "(", "self", ".", "conv3_base", "(", "x2_base", ",", "edge_index_base", ")", ")", "\n", "x3_base", "=", "self", ".", "bn3_base", "(", "x3_base", ")", "\n", "x_embedding_base", "=", "gmp", "(", "x3_base", ",", "batch_base", ")", "\n", "\n", "# # branch1 output", "\n", "outputs", "=", "self", ".", "fc", "(", "x_embedding_base", ")", "\n", "\n", "outputs", "=", "self", ".", "output_layer", "(", "outputs", ")", "\n", "\n", "if", "t_sne", ":", "\n", "            ", "return", "outputs", ",", "x_embedding_base", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.async_macro_model_train": [[14, 35], ["torch.multiprocessing.Queue", "torch.Manager", "multiprocessing.Manager.dict", "torch.multiprocessing.Process", "time.sleep", "torch.multiprocessing.Process.start", "torch.multiprocessing.Process.join", "manager.dict.items", "torch.multiprocessing.Process", "p.start", "p.join", "range"], "function", ["None"], ["def", "async_macro_model_train", "(", "model_data", ",", "gpus", ",", "save_dir", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "q", "=", "Queue", "(", "10", ")", "\n", "manager", "=", "multiprocessing", ".", "Manager", "(", ")", "\n", "total_data_dict", "=", "manager", ".", "dict", "(", ")", "\n", "p_producer", "=", "Process", "(", "target", "=", "model_producer", ",", "args", "=", "(", "model_data", ",", "q", ",", "gpus", ")", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "p_consumers", "=", "[", "Process", "(", "target", "=", "model_consumer", ",", "args", "=", "(", "q", ",", "i", ",", "save_dir", ",", "total_data_dict", ",", "model_data", ",", "dataset", ")", ")", "\n", "for", "i", "in", "range", "(", "gpus", ")", "]", "\n", "p_producer", ".", "start", "(", ")", "\n", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "\n", "", "p_producer", ".", "join", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "total_data_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_dict", "[", "v", "[", "2", "]", "]", "=", "(", "100", "-", "v", "[", "0", "]", ",", "100", "-", "v", "[", "1", "]", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.model_producer": [[37, 44], ["range", "queue.put", "queue.put"], "function", ["None"], ["", "def", "model_producer", "(", "model_data", ",", "queue", ",", "gpus", ")", ":", "\n", "    ", "for", "idx", "in", "model_data", ":", "\n", "        ", "queue", ".", "put", "(", "{", "\n", "'idx'", ":", "idx", "\n", "}", ")", "\n", "", "for", "_", "in", "range", "(", "gpus", ")", ":", "\n", "        ", "queue", ".", "put", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.model_consumer": [[46, 60], ["nas_lib.utils.comm.setup_logger", "q.get", "nas_lib.utils.comm.setup_logger.info", "trainer_nasbench_open_darts_async.model_trainer_cifar10"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.model_trainer_cifar10"], ["", "", "def", "model_consumer", "(", "q", ",", "gpu", ",", "save_dir", ",", "total_data_dict", ",", "model_data", ",", "dataset", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "save_dir", ",", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "while", "True", ":", "\n", "        ", "msg", "=", "q", ".", "get", "(", ")", "\n", "if", "msg", "==", "'done'", ":", "\n", "            ", "logger", ".", "info", "(", "'thread %d end'", "%", "gpu", ")", "\n", "break", "\n", "", "model_idx", "=", "msg", "[", "'idx'", "]", "\n", "model", "=", "model_data", "[", "model_idx", "]", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "val_acc", ",", "test_acc", ",", "hash_key", "=", "model_trainer_cifar10", "(", "model", ",", "gpu", ",", "logger", ",", "save_dir", ")", "\n", "total_data_dict", "[", "model_idx", "]", "=", "[", "val_acc", ",", "test_acc", ",", "hash_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_nasbench_open_darts_async.model_trainer_cifar10": [[62, 213], ["torch.cuda.set_device", "torch.cuda.set_device", "nas_lib.data.cifar10_dataset.transforms_cifar10", "nas_lib.data.cifar10_dataset.get_cifar10_test_loader", "nas_lib.data.cifar10_dataset.get_cifar10_train_and_val_loader", "torch.device", "torch.device", "model.to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "copy.deepcopy", "range", "model.load_state_dict", "model.eval", "logger.info", "logger.info", "model.parameters", "model.state_dict", "model.train", "time.time", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "enumerate", "logger.info", "loss_list.append", "torch.no_grad", "torch.no_grad", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "input.to.to", "labels.to.to", "torch.optim.SGD.zero_grad", "time.time", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.optim.SGD.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nas_lib.utils.utils_darts.top_accuracy", "input.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "criterion.item", "len", "time.time", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "nas_lib.utils.utils_darts.AvgrageMeter", "model.eval", "logger.info", "val_acc_list.append", "images.to.to", "labels.to.to", "model", "nas_lib.utils.utils_darts.top_accuracy", "images.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "model.to", "torch.nn.CrossEntropyLoss.", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logger.info", "time.time", "torch.no_grad", "torch.no_grad", "copy.deepcopy", "prec1.item", "prec5.item", "images.to.to", "labels.to.to", "model", "torch.nn.CrossEntropyLoss.", "nas_lib.utils.utils_darts.top_accuracy", "images.to.size", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "nas_lib.utils.utils_darts.AvgrageMeter.update", "labels.to.size", "model.state_dict", "criterion.item", "prec1.item", "prec5.item"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.transforms_cifar10", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_test_loader", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_train_and_val_loader", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.top_accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict"], ["", "", "", "def", "model_trainer_cifar10", "(", "model", ",", "gpu", ",", "logger", ",", "save_dir", ",", "\n", "train_epochs", "=", "50", ",", "lr", "=", "0.025", ",", "momentum", "=", "0.9", ",", "weight_deacy", "=", "3e-4", ")", ":", "\n", "\n", "    ", "parameters", "=", "{", "\n", "'auxiliary'", ":", "False", ",", "\n", "'auxiliary_weight'", ":", "0", ",", "\n", "'cutout'", ":", "False", ",", "\n", "'cutout_length'", ":", "0", ",", "\n", "'drop_path_prob'", ":", "0.0", ",", "\n", "'grad_clip'", ":", "5", ",", "\n", "'train_portion'", ":", "0.5", "\n", "}", "\n", "\n", "auxiliary", "=", "parameters", "[", "'auxiliary'", "]", "\n", "auxiliary_weight", "=", "parameters", "[", "'auxiliary_weight'", "]", "\n", "cutout", "=", "parameters", "[", "'cutout'", "]", "\n", "cutout_length", "=", "parameters", "[", "'cutout_length'", "]", "\n", "drop_path_prob", "=", "parameters", "[", "'drop_path_prob'", "]", "\n", "train_portion", "=", "parameters", "[", "'train_portion'", "]", "\n", "grad_clip", "=", "parameters", "[", "'grad_clip'", "]", "\n", "batch_size", "=", "64", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "hash_key", "=", "model", ".", "hashkey", "\n", "genotype", "=", "model", ".", "genotype", "\n", "train_trans", ",", "test_trans", "=", "transforms_cifar10", "(", "cutout", "=", "cutout", ",", "cutout_length", "=", "cutout_length", ")", "\n", "model_test_data", "=", "get_cifar10_test_loader", "(", "cifar10_path", ",", "transform", "=", "test_trans", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "model_train_data", ",", "model_val_data", "=", "get_cifar10_train_and_val_loader", "(", "cifar10_path", ",", "transform", "=", "train_trans", ",", "\n", "train_portion", "=", "train_portion", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_deacy", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "train_epochs", ",", "0.000001", ",", "-", "1", ")", "\n", "\n", "best_val_acc", "=", "0.0", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "loss_list", "=", "[", "]", "\n", "val_acc_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "train_epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "model", ".", "drop_path_prob", "=", "drop_path_prob", "*", "epoch", "/", "train_epochs", "\n", "running_loss", "=", "0.0", "\n", "total_inference_time", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "model_train_data", ")", ":", "\n", "            ", "input", ",", "labels", "=", "data", "\n", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "begin_inference", "=", "time", ".", "time", "(", ")", "\n", "outputs", ",", "outputs_aux", "=", "model", "(", "input", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "if", "auxiliary", ":", "\n", "                ", "loss_aux", "=", "criterion", "(", "outputs_aux", ",", "labels", ")", "\n", "loss", "+=", "auxiliary_weight", "*", "loss_aux", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'train %03d %e %f %f'", ",", "i", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "inference_time", "=", "time", ".", "time", "(", ")", "-", "begin_inference", "\n", "total_inference_time", "+=", "inference_time", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "running_loss_avg", "=", "running_loss", "/", "len", "(", "model_train_data", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "logger", ".", "info", "(", "'epoch %d trainint loss is %.6f top1 acc is %.2f time duration is %.5f and avg inference time is %.5f'", "%", "\n", "(", "epoch", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "duration", ",", "total_inference_time", "/", "(", "i", "*", "1.0", ")", ")", ")", "\n", "loss_list", ".", "append", "(", "objs", ".", "avg", ")", "\n", "\n", "# if epoch != 0 and epoch % 5 == 0:", "\n", "if", "True", ":", "\n", "            ", "objs", "=", "AvgrageMeter", "(", ")", "\n", "top1", "=", "AvgrageMeter", "(", ")", "\n", "top5", "=", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", "in", "model_val_data", ":", "\n", "                    ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "model", "(", "images", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "", "", "val_acc", "=", "top1", ".", "avg", "\n", "if", "val_acc", ">", "best_val_acc", ":", "\n", "                ", "best_val_acc", "=", "val_acc", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "", "logger", ".", "info", "(", "'Accuracy of the network on validate images: %.5f %%'", "%", "(", "val_acc", ")", ")", "\n", "val_acc_list", ".", "append", "(", "val_acc", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "best_model_wts", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "top1_test", "=", "AvgrageMeter", "(", ")", "\n", "top5_test", "=", "AvgrageMeter", "(", ")", "\n", "for", "data", "in", "model_test_data", ":", "\n", "            ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "model", "(", "images", ",", "device", ")", "\n", "prec1", ",", "prec5", "=", "top_accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "top1_test", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5_test", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "", "test_acc", "=", "top1_test", ".", "avg", "\n", "", "logger", ".", "info", "(", "'Accuracy of the network on test images: %.5f %%'", "%", "(", "test_acc", ")", ")", "\n", "\n", "model_save_path", "=", "save_dir", "+", "'/model_pkl/'", "+", "hash_key", "+", "'.pkl'", "\n", "\n", "with", "open", "(", "model_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "genotype", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "model", ".", "to", "(", "'cpu'", ")", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "hash_key", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "running_loss_avg", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "val_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "test_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "best_val_acc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "loss_list", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "val_acc_list", ",", "f", ")", "\n", "", "logger", ".", "info", "(", "'##################'", "*", "15", ")", "\n", "\n", "return", "best_val_acc", ",", "test_acc", ",", "hash_key", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer.__init__": [[15, 52], ["torch.nn.MSELoss", "utils.utils_solver.make_agent_optimizer", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.to", "utils.utils_solver.CosineLR", "nas_lib.predictors.predictor_gin.PredictorGIN", "trainer_predictor.NasBenchGinPredictorTrainer._get_model_dir", "logger.info", "trainer_predictor.NasBenchGinPredictorTrainer._get_predictor", "nas_lib.utils.utils_model.get_temp_model", "nas_lib.utils.utils_model.load_modify_model", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.fc.bias.data.zero_", "nas_lib.utils.utils_model.load_predictor_ged_moco_v2", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.fc.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer._get_model_dir", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer._get_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.get_temp_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_modify_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_predictor_ged_moco_v2"], ["    ", "def", "__init__", "(", "self", ",", "agent_type", ",", "lr", "=", "0.01", ",", "device", "=", "None", ",", "epochs", "=", "10", ",", "train_images", "=", "10", ",", "batch_size", "=", "10", ",", "rate", "=", "10", ",", "\n", "input_dim", "=", "6", ",", "model_dir", "=", "None", ",", "predictor_type", "=", "None", ",", "logger", "=", "None", ",", "algo_name", "=", "None", ")", ":", "\n", "        ", "if", "algo_name", "and", "'ss'", "in", "algo_name", ":", "\n", "            ", "self", ".", "nas_agent", "=", "self", ".", "_get_predictor", "(", "algo_name", ")", "(", "input_dim", "=", "input_dim", ",", "reTrain", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "nas_agent", "=", "PredictorGIN", "(", "input_dim", "=", "input_dim", ")", "\n", "", "self", ".", "lr", "=", "lr", "\n", "\n", "if", "model_dir", ":", "\n", "            ", "model_path", "=", "self", ".", "_get_model_dir", "(", "algo_name", ",", "model_dir", ")", "\n", "if", "'ss_rl'", "in", "algo_name", ":", "\n", "                ", "temp_model", "=", "get_temp_model", "(", "predictor_type", ",", "input_dim", ")", "\n", "self", ".", "nas_agent", "=", "load_modify_model", "(", "self", ".", "nas_agent", ",", "temp_model", ",", "model_path", ")", "\n", "del", "temp_model", "\n", "self", ".", "lr", "*=", "0.1", "\n", "self", ".", "nas_agent", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ",", "bias", "=", "True", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "nas_agent", ".", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nas_agent", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "'ss_ccl'", "in", "algo_name", ":", "\n", "                ", "self", ".", "nas_agent", "=", "load_predictor_ged_moco_v2", "(", "self", ".", "nas_agent", ",", "model_path", ")", "\n", "# self.lr *= 0.1", "\n", "self", ".", "nas_agent", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ",", "bias", "=", "True", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "nas_agent", ".", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nas_agent", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "f'Predictor {predictor_type} successfully loaded!'", ")", "\n", "", "self", ".", "agent_type", "=", "agent_type", "\n", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "nas_agent", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nas_agent", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "train_images", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "self", ".", "rate", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit": [[53, 89], ["utils.metric_logger.MetricLogger", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.train", "range", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx", "enumerate", "logger.info", "range", "len", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.to.to.to", "pred.squeeze.squeeze.squeeze", "trainer_predictor.NasBenchGinPredictorTrainer.criterion", "trainer_predictor.NasBenchGinPredictorTrainer.optimizer.zero_grad", "trainer_predictor.NasBenchGinPredictorTrainer.backward", "trainer_predictor.NasBenchGinPredictorTrainer.optimizer.step", "trainer_predictor.NasBenchGinPredictorTrainer.scheduler.step", "utils.metric_logger.MetricLogger.update", "utils.metric_logger.MetricLogger.delimiter.join", "len", "gnn_lib.data.Data", "data_list.append", "target_list.append", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent", "trainer_predictor.NasBenchGinPredictorTrainer.item", "edge_index[].long", "node_feature[].float", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update"], ["", "def", "fit", "(", "self", ",", "edge_index", ",", "node_feature", ",", "val_accuracy", ",", "logger", "=", "None", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "nas_agent", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "counter", "+=", "len", "(", "batch_idx", ")", "\n", "data_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "target_list", ".", "append", "(", "val_accuracy", "[", "idx", "]", ")", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# batch_nodes = F.normalize(batch_nodes, p=2, dim=-1)", "\n", "\n", "pred", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "*", "self", ".", "rate", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "val_tensor", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "# self.scheduler.step(epoch + int(i/30))", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "", "if", "logger", ":", "\n", "            ", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred": [[90, 110], ["list", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent.eval", "utils.utils_solver.gen_batch_idx", "torch.cat", "range", "torch.no_grad", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "pred_list.append", "gnn_lib.data.Data", "data_list.append", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent().squeeze", "len", "pred.unsqueeze_", "pred.size", "edge_index[].long", "node_feature[].float", "trainer_predictor.NasBenchGinPredictorTrainer.nas_agent"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["", "def", "pred", "(", "self", ",", "edge_index", ",", "node_feature", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "self", ".", "nas_agent", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "64", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "pred", "=", "self", ".", "nas_agent", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", ".", "squeeze", "(", ")", "*", "self", ".", "rate", "\n", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer._get_predictor": [[111, 118], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_predictor", "(", "self", ",", "algo_name", ")", ":", "\n", "        ", "if", "'ss_rl'", "in", "algo_name", ":", "\n", "            ", "return", "PredictorGINRL", "\n", "", "elif", "'ss_ccl'", "in", "algo_name", ":", "\n", "            ", "return", "PredictorGINCCL", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'In module trainer_predictor the {algo_name} does not support!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen.trainer_predictor.NasBenchGinPredictorTrainer._get_model_dir": [[119, 124], ["model_dir_dict.items", "ValueError"], "methods", ["None"], ["", "", "def", "_get_model_dir", "(", "self", ",", "algo_name", ",", "model_dir_dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "model_dir_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "algo_name", ":", "\n", "                ", "return", "v", "\n", "", "", "raise", "ValueError", "(", "f'The algo name {algo_name} does not have a pre-trained ckpt file.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np": [[174, 204], ["dict", "os.listdir", "list", "os.path.join", "dict", "numpy.array", "list", "open", "range", "pickle.load", "print", "len", "enumerate", "total_dicts[].append", "print", "print", "nested_dicts[].append"], "function", ["None"], ["def", "convert2np", "(", "root_path", ",", "model_lists", ",", "end", "=", "None", ")", ":", "\n", "    ", "total_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "total_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "files", "=", "os", ".", "listdir", "(", "root_path", ")", "\n", "if", "end", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "[", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "list", "(", "files", ")", "\n", "", "for", "f", "in", "files", ":", "\n", "        ", "if", "'log'", "in", "f", ":", "\n", "            ", "continue", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "f", ")", "\n", "nested_dicts", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "            ", "nested_dicts", "[", "m", "]", "=", "[", "]", "\n", "", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "nf", ":", "\n", "            ", "try", ":", "\n", "                ", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "=", "pickle", ".", "load", "(", "nf", ")", "\n", "print", "(", "'######'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "file_path", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "results", "[", "0", "]", ")", ")", ":", "\n", "                ", "for", "idx", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "                    ", "nested_dicts", "[", "m", "]", ".", "append", "(", "results", "[", "idx", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "", "for", "m", "in", "model_lists", ":", "\n", "                ", "total_dicts", "[", "m", "]", ".", "append", "(", "nested_dicts", "[", "m", "]", ")", "\n", "", "", "", "results_np", "=", "{", "m", ":", "np", ".", "array", "(", "total_dicts", "[", "m", "]", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_np", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean": [[206, 216], ["numpy.mean", "numpy.median", "ValueError", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.metric_logger.SmoothedValue.median"], ["", "def", "getmean", "(", "results_np", ",", "model_lists", ",", "category", "=", "'mean'", ")", ":", "\n", "    ", "if", "category", "==", "'mean'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "mean", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'medium'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "median", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "elif", "category", "==", "'percentile'", ":", "\n", "        ", "results_mean", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "50", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'this type operation is not supported!'", ")", "\n", "", "return", "results_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd": [[218, 221], ["numpy.std"], "function", ["None"], ["", "def", "getstd", "(", "results_np", ",", "model_lists", ")", ":", "\n", "    ", "result_std", "=", "{", "m", ":", "np", ".", "std", "(", "results_np", "[", "m", "]", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "result_std", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile": [[223, 226], ["numpy.percentile"], "function", ["None"], ["", "def", "get_quantile", "(", "results_np", ",", "model_lists", ",", "divider", "=", "30", ")", ":", "\n", "    ", "results_quantile", "=", "{", "m", ":", "np", ".", "percentile", "(", "results_np", "[", "m", "]", ",", "divider", ",", "axis", "=", "0", ")", "for", "m", "in", "model_lists", "}", "\n", "return", "results_quantile", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_bounder": [[228, 234], ["dict", "numpy.stack"], "function", ["None"], ["", "def", "get_bounder", "(", "total_mean", ",", "quantile_30", ",", "quantile_70", ",", "model_lists", ",", "absolute", "=", "False", ")", ":", "\n", "    ", "bound_dict", "=", "dict", "(", ")", "\n", "for", "m", "in", "model_lists", ":", "\n", "        ", "bound_dict", "[", "m", "]", "=", "np", ".", "stack", "(", "[", "(", "total_mean", "[", "m", "]", "-", "quantile_30", "[", "m", "]", ")", ",", "\n", "(", "quantile_70", "[", "m", "]", "-", "total_mean", "[", "m", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "bound_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.draw_plot_nasbench_101": [[236, 286], ["visualize_close_domain.convert2np", "visualize_close_domain.getmean", "visualize_close_domain.getstd", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_size_inches", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "draw_plot_nasbench_101", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "# EA_reuslt = np_datas_dict['EA']", "\n", "# print(EA_reuslt.shape)", "\n", "# print(np.max(EA_reuslt, axis=0))", "\n", "# print(np.min(EA_reuslt, axis=0))", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_std_dict", "=", "getstd", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'std'", ")", "\n", "print", "(", "np_std_dict", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "fig", ".", "set_size_inches", "(", "6", ",", "5", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ",", "color", "=", "color_names_dict", "[", "j", "]", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.8", ",", "7.4", ",", "0.2", ")", ")", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'number of samples'", ",", "fontsize", "=", "13", ")", "\n", "ax", ".", "set_ylabel", "(", "'testing error of best neural net'", ",", "fontsize", "=", "13", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "12", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.draw_plot_nasbench_201": [[288, 343], ["visualize_close_domain.convert2np", "visualize_close_domain.getstd", "visualize_close_domain.getmean", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_size_inches", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "ax.set_yticks", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "numpy.arange", "ax.set_yticks", "matplotlib.errorbar", "numpy.arange", "ax.set_yticks", "NotImplementedError", "matplotlib.plot", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "draw_plot_nasbench_201", "(", "root_path", ",", "model_lists", ",", "model_masks", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "np_std_dict", "=", "getstd", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "\n", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'std'", ")", "\n", "print", "(", "np_std_dict", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "fig", ".", "set_size_inches", "(", "6", ",", "5", ")", "\n", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "6", ",", "capthick", "=", "2", ",", "color", "=", "color_names_dict", "[", "j", "]", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "if", "args", ".", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "8.8", ",", "10.9", ",", "0.2", ")", ")", "\n", "", "elif", "args", ".", "dataname", "==", "'cifar100'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "26.5", ",", "32.5", ",", "0.5", ")", ")", "\n", "", "elif", "args", ".", "dataname", "==", "'ImageNet16-120'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "53.2", ",", "58.2", ",", "0.5", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "# ax.grid(True)", "\n", "", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'number of samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'testing error of best neural net'", ")", "\n", "# plt.legend(bbox_to_anchor=(1.05, 1), loc='upper right', borderaxespad=0.5)", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.draw_plot_nasbench_201_merge": [[345, 420], ["visualize_close_domain.convert2np", "visualize_close_domain.getstd", "visualize_close_domain.getmean", "visualize_close_domain.convert2np", "visualize_close_domain.getstd", "visualize_close_domain.getmean", "convert2np.items", "getstd.items", "getmean.items", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_size_inches", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.show", "getmean.items", "enumerate", "ax.set_yticks", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "numpy.arange", "ax.set_yticks", "matplotlib.errorbar", "numpy.arange", "ax.set_yticks", "NotImplementedError", "matplotlib.plot", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "draw_plot_nasbench_201_merge", "(", "root_path", ",", "root_path_2", ",", "model_lists", ",", "model_lists2", ",", "\n", "model_masks", ",", "model_masks2", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists", ")", "\n", "np_std_dict", "=", "getstd", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "\n", "np_datas_dict2", "=", "convert2np", "(", "root_path_2", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists2", ")", "\n", "np_std_dict2", "=", "getstd", "(", "np_datas_dict2", ",", "model_lists", "=", "model_lists2", ")", "\n", "np_mean_dict2", "=", "getmean", "(", "np_datas_dict2", ",", "model_lists", "=", "model_lists2", ")", "\n", "\n", "for", "k", ",", "v", "in", "np_datas_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_datas_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "for", "k", ",", "v", "in", "np_std_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_std_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "for", "k", ",", "v", "in", "np_mean_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_mean_dict", "[", "k", "]", "=", "v", "\n", "# for k, v in np_d1atas_dict.items():", "\n", "#     data = v[:, -1]", "\n", "#     print(k)", "\n", "#     print(sorted(data.tolist()))", "\n", "#     print('######'*30)", "\n", "\n", "", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'std'", ")", "\n", "print", "(", "np_std_dict", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "fig", ".", "set_size_inches", "(", "6", ",", "5", ")", "\n", "# fig.set_size_inches(6, 9)", "\n", "\n", "upperlimits", "=", "[", "True", "]", "*", "10", "\n", "lowerlimits", "=", "[", "True", "]", "*", "10", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "6", ",", "capthick", "=", "2", ",", "color", "=", "color_names_dict", "[", "j", "]", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "", "", "", "if", "args", ".", "dataname", "==", "'cifar10-valid'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "8.8", ",", "10.9", ",", "0.2", ")", ")", "\n", "", "elif", "args", ".", "dataname", "==", "'cifar100'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "26.5", ",", "31.5", ",", "0.5", ")", ")", "\n", "", "elif", "args", ".", "dataname", "==", "'ImageNet16-120'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "53.2", ",", "58.2", ",", "0.5", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "# ax.grid(True)", "\n", "", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'number of samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'testing error of best neural net'", ")", "\n", "# plt.legend(bbox_to_anchor=(1.05, 1), loc='upper right', borderaxespad=0.5)", "\n", "# plt.legend(loc='upper right')", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.draw_plot_nasbench_101_merge": [[422, 488], ["visualize_close_domain.convert2np", "visualize_close_domain.getmean", "visualize_close_domain.getstd", "visualize_close_domain.convert2np", "visualize_close_domain.getstd", "visualize_close_domain.getmean", "convert2np.items", "getstd.items", "getmean.items", "visualize_close_domain.get_quantile", "visualize_close_domain.get_quantile", "visualize_close_domain.get_bounder", "numpy.array", "matplotlib.subplots", "fig.set_size_inches", "ax.set_yticks", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.legend", "matplotlib.show", "getmean.items", "enumerate", "numpy.arange", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "matplotlib.errorbar", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.convert2np", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getstd", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.getmean", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_quantile", "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visualize_close_domain.get_bounder", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "draw_plot_nasbench_101_merge", "(", "root_path", ",", "root_path_2", ",", "model_lists", ",", "model_lists2", ",", "\n", "model_masks", ",", "model_masks2", ",", "draw_type", "=", "'ERRORBAR'", ",", "verbose", "=", "1", ")", ":", "\n", "# draw_type  ERRORBAR, MEANERROR", "\n", "    ", "np_datas_dict", "=", "convert2np", "(", "root_path", ",", "model_lists", "=", "model_lists", ",", "end", "=", "None", ")", "\n", "# EA_reuslt = np_datas_dict['EA']", "\n", "# print(EA_reuslt.shape)", "\n", "# print(np.max(EA_reuslt, axis=0))", "\n", "# print(np.min(EA_reuslt, axis=0))", "\n", "np_mean_dict", "=", "getmean", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "np_std_dict", "=", "getstd", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ")", "\n", "\n", "np_datas_dict2", "=", "convert2np", "(", "root_path_2", ",", "end", "=", "None", ",", "model_lists", "=", "model_lists2", ")", "\n", "np_std_dict2", "=", "getstd", "(", "np_datas_dict2", ",", "model_lists", "=", "model_lists2", ")", "\n", "np_mean_dict2", "=", "getmean", "(", "np_datas_dict2", ",", "model_lists", "=", "model_lists2", ")", "\n", "\n", "for", "k", ",", "v", "in", "np_datas_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_datas_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "for", "k", ",", "v", "in", "np_std_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_std_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "for", "k", ",", "v", "in", "np_mean_dict2", ".", "items", "(", ")", ":", "\n", "        ", "np_mean_dict", "[", "k", "]", "=", "v", "\n", "\n", "\n", "", "np_quantile_30", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "30", ")", "\n", "np_quantile_70", "=", "get_quantile", "(", "np_datas_dict", ",", "model_lists", "=", "model_lists", ",", "divider", "=", "70", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "for", "k", ",", "v", "in", "np_mean_dict", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "k", ")", "\n", "print", "(", "'30 quantile value'", ")", "\n", "print", "(", "np_quantile_30", "[", "k", "]", ")", "\n", "print", "(", "'mean'", ")", "\n", "print", "(", "v", ")", "\n", "print", "(", "'70 quantile value'", ")", "\n", "print", "(", "np_quantile_70", "[", "k", "]", ")", "\n", "print", "(", "'std'", ")", "\n", "print", "(", "np_std_dict", "[", "k", "]", ")", "\n", "print", "(", "'###############'", ")", "\n", "", "", "np_bounds", "=", "get_bounder", "(", "np_mean_dict", ",", "np_quantile_30", ",", "np_quantile_70", ",", "model_lists", "=", "model_lists", ",", "absolute", "=", "True", ")", "\n", "# get data mean", "\n", "idx", "=", "np", ".", "array", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", "110", ",", "120", ",", "130", ",", "140", ",", "150", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "fig", ".", "set_size_inches", "(", "6", ",", "5", ")", "\n", "upperlimits", "=", "[", "True", "]", "*", "15", "\n", "lowerlimits", "=", "[", "True", "]", "*", "15", "\n", "if", "draw_type", "==", "'ERRORBAR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "# plt.errorbar(idx, np_mean_dict[m], yerr=np_bounds[m], uplims=upperlimits, lolims=lowerlimits,", "\n", "#              label=m, capthick=2)", "\n", "                ", "plt", ".", "errorbar", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "yerr", "=", "np_bounds", "[", "m", "]", ",", "label", "=", "m", ",", "capsize", "=", "3", ",", "capthick", "=", "2", ",", "color", "=", "color_names_dict", "[", "j", "]", ")", "\n", "", "", "", "elif", "draw_type", "==", "'MEANERROR'", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "model_lists", ")", ":", "\n", "            ", "if", "model_masks", "[", "j", "]", ":", "\n", "                ", "plt", ".", "plot", "(", "idx", ",", "np_mean_dict", "[", "m", "]", ",", "label", "=", "m", ",", "marker", "=", "'s'", ",", "linewidth", "=", "1", ",", "ms", "=", "3", ")", "# fmt='o',", "\n", "# ax.set_yticks(np.arange(92.5, 94.4, 0.2))", "\n", "", "", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "5.8", ",", "9.4", ",", "0.2", ")", ")", "\n", "# ax.grid(True)", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'number of samples'", ",", "fontsize", "=", "13", ")", "\n", "ax", ".", "set_ylabel", "(", "'testing error of best neural net'", ",", "fontsize", "=", "13", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "12", ")", "\n", "# plt.grid(b=True, which='major', color='#666699', linestyle='--')", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visual_methods.visual_correlation": [[10, 30], ["matplotlib.subplots", "ax.scatter", "matplotlib.xlim", "matplotlib.ylim", "numpy.array", "matplotlib.xlim", "matplotlib.ylim", "ax.plot", "fig.set_dpi", "matplotlib.gca().set_aspect", "matplotlib.title", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.show", "numpy.min", "numpy.max", "matplotlib.gca", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.ylim"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["def", "visual_correlation", "(", "v1", ",", "v2", ",", "xlabel", ",", "ylabel", ",", "title", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "scatter", "(", "v1", ",", "v2", ",", "label", "=", "''", ",", "alpha", "=", "0.7", ",", "s", "=", "3", ",", "color", "=", "'tab:green'", ")", "\n", "# axis limits", "\n", "plt", ".", "xlim", "(", "(", "0", ",", "1", ")", ")", "\n", "plt", ".", "ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "ax_lim", "=", "np", ".", "array", "(", "[", "np", ".", "min", "(", "[", "plt", ".", "xlim", "(", ")", "[", "0", "]", ",", "plt", ".", "ylim", "(", ")", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "[", "plt", ".", "xlim", "(", ")", "[", "1", "]", ",", "plt", ".", "ylim", "(", ")", "[", "1", "]", "]", ")", "]", ")", "\n", "plt", ".", "xlim", "(", "ax_lim", ")", "\n", "plt", ".", "ylim", "(", "ax_lim", ")", "\n", "\n", "# 45-degree line", "\n", "ax", ".", "plot", "(", "ax_lim", ",", "ax_lim", ",", "'k:'", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'equal'", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "# plt.legend(loc='best', fontsize=12)", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ",", "fontsize", "=", "12", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visual_methods.visual_hist": [[32, 45], ["matplotlib.subplots", "ax.hist", "fig.set_dpi", "ax.set_xlabel", "ax.set_ylabel", "ax.set_title", "fig.tight_layout", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "visual_hist", "(", "x", ",", "num_bins", "=", "100", ",", "title", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "# the histogram of the data", "\n", "ax", ".", "hist", "(", "x", ",", "num_bins", ",", "density", "=", "True", ")", "\n", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "ax", ".", "set_xlabel", "(", "'Data'", ",", "fontsize", "=", "12", ")", "\n", "ax", ".", "set_ylabel", "(", "'Probability density'", ",", "fontsize", "=", "12", ")", "\n", "ax", ".", "set_title", "(", "title", ",", "fontsize", "=", "12", ")", "\n", "\n", "# Tweak spacing to prevent clipping of ylabel", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualization.visual_methods.visual_plot": [[47, 53], ["matplotlib.subplots", "ax.plot", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show"], ["", "def", "visual_plot", "(", "x", ",", "y_val", ",", "v_std", ",", "y_test", "=", "None", ",", "t_std", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "# ax.errorbar(x, y_val, yerr=v_std)", "\n", "ax", ".", "plot", "(", "x", ",", "y_val", ")", "\n", "# ax.errorbar(x, y_test, yerr=t_std)", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.acquisition_functions.acq_fn": [[6, 28], ["numpy.array", "numpy.random.randint", "numpy.argsort", "numpy.mean", "numpy.sqrt", "numpy.random.normal", "numpy.argsort", "numpy.var", "np.array.cpu().numpy", "numpy.argsort", "print", "sys.exit", "np.array.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.normal"], ["def", "acq_fn", "(", "predictions", ",", "explore_type", "=", "'its'", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "if", "explore_type", "!=", "'its_vae'", "and", "explore_type", "!=", "'its_vae_ensemble'", ":", "\n", "        ", "predictions", "=", "np", ".", "array", "(", "predictions", ")", "\n", "# Thompson sampling (TS) acquisition function", "\n", "", "if", "explore_type", "==", "'ts'", ":", "\n", "        ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "predictions", ".", "shape", "[", "0", "]", ")", "\n", "ts", "=", "predictions", "[", "rand_ind", ",", ":", "]", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "ts", ")", "\n", "# Independent Thompson sampling (ITS) acquisition function", "\n", "", "elif", "explore_type", "==", "'its'", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "predictions", ",", "axis", "=", "0", ")", ")", "\n", "samples", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "std", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "samples", ")", "\n", "", "elif", "explore_type", "==", "'its_vae'", ":", "\n", "        ", "np_pred", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "np_pred", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Invalid exploration type in meta neuralnet search'", ",", "explore_type", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "sorted_indices", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_nasbench_101": [[9, 73], ["torch.device", "search_space.generate_random_dataset", "len", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "nas_lib.utils.utils_data.nasbench2graph_101", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_data.nasbench2graph_101", "candiate_edge_list.append", "candiate_node_list.append", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "sorted", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "gin_predictor_nasbench_101", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "algo_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "algo_name", "=", "algo_name", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_nasbench_201": [[75, 139], ["torch.device", "search_space.generate_random_dataset", "len", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "nas_lib.utils.utils_data.nasbench2graph_201", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "nas_lib.utils.utils_data.nasbench2graph_201", "candiate_edge_list.append", "candiate_node_list.append", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "agent.pred.cpu", "sorted", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "gin_predictor_nasbench_201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "rate", "=", "10", ",", "\n", "algo_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "rate", "=", "rate", ",", "\n", "algo_name", "=", "algo_name", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_201", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_201", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_train_num_restract_nasbench_101": [[141, 211], ["torch.device", "search_space.generate_random_dataset", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "copy.deepcopy", "nas_lib.utils.utils_data.nasbench2graph_101", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu().numpy", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "nas_lib.utils.utils_data.nasbench2graph_101", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "agent.pred.cpu", "sorted", "len", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu", "min", "len", "numpy.mean", "len", "numpy.abs", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred"], ["", "def", "gin_predictor_train_num_restract_nasbench_101", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ",", "\n", "algo_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "train_flag", ":", "\n", "            ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ",", "\n", "algo_name", "=", "algo_name", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_train_num_restract_nasbench_201": [[213, 282], ["torch.device", "search_space.generate_random_dataset", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "copy.deepcopy", "nas_lib.utils.utils_data.nasbench2graph_201", "candiate_edge_list.append", "candiate_node_list.append", "numpy.array", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu().numpy", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "nas_lib.utils.utils_data.nasbench2graph_201", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "agent.pred.cpu", "sorted", "len", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred().cpu", "min", "len", "numpy.mean", "len", "numpy.abs", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred"], ["", "def", "gin_predictor_train_num_restract_nasbench_201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "training_nums", "=", "150", ",", "\n", "rate", "=", "10", ",", "\n", "algo_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_201", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "if", "train_flag", ":", "\n", "            ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "8", ",", "rate", "=", "rate", ",", "\n", "algo_name", "=", "algo_name", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph_201", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training data nums {},  training mean loss is  {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.run_nas_algos_nasbench_101": [[14, 64], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "random.random_search_nasbench_101", "algo_compare.compute_best_test_losses_with_details", "algo_compare.compute_best_test_losses", "evolution.evolution_search_nasbench_101", "copy.deepcopy.pop", "bananas.bananas_nasbench_101", "copy.deepcopy.pop", "bananas.bananas_nasbench_101", "copy.deepcopy.pop", "bananas.bananas_nasbench_101", "predictor.gin_predictor_nasbench_101", "predictor.gin_predictor_train_num_restract_nasbench_101", "predictor_unsupervised.gin_unsupervised_predictor", "predictor_unsupervised.gin_unsupervised_predictor_fix_num", "predictor_unsupervised.gin_unsupervised_predictor", "predictor_unsupervised.gin_unsupervised_predictor_fix_num", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.random.random_search_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.compute_best_test_losses_with_details", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.compute_best_test_losses", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.evolution.evolution_search_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_train_num_restract_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor_fix_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor_fix_num"], ["def", "run_nas_algos_nasbench_101", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "with_details", "=", "'F'", ",", "\n", "model_dir", "=", "None", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_nasbench_101", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", "=", "evolution_search_nasbench_101", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_nasbench_101", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_nasbench_101", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_nasbench_101", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_predictor_nasbench_101", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_fixed_nums'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_predictor_train_num_restract_nasbench_101", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_rl'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "model_dir", "=", "model_dir", ",", "\n", "benchmark", "=", "'nasbench_101'", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_rl_num_fixed'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor_fix_num", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "benchmark", "=", "'nasbench_101'", ",", "\n", "model_dir", "=", "model_dir", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_ccl'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "model_dir", "=", "model_dir", ",", "\n", "benchmark", "=", "'nasbench_101'", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_ccl_num_fixed'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor_fix_num", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "benchmark", "=", "'nasbench_101'", ",", "\n", "model_dir", "=", "model_dir", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "if", "with_details", "==", "'T'", ":", "\n", "        ", "return", "compute_best_test_losses_with_details", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "compute_best_test_losses", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.run_nas_algos_nasbench_201": [[66, 114], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.pop", "algo_compare.compute_best_test_losses", "random.random_search_nasbench_201", "evolution.evolution_search_nasbench_201", "copy.deepcopy.pop", "bananas.bananas_nasbench_201", "copy.deepcopy.pop", "bananas.bananas_nasbench_201", "copy.deepcopy.pop", "bananas.bananas_nasbench_201", "predictor.gin_predictor_nasbench_201", "predictor.gin_predictor_train_num_restract_nasbench_201", "predictor_unsupervised.gin_unsupervised_predictor", "predictor_unsupervised.gin_unsupervised_predictor_fix_num", "predictor_unsupervised.gin_unsupervised_predictor", "predictor_unsupervised.gin_unsupervised_predictor_fix_num", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.compute_best_test_losses", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.random.random_search_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.evolution.evolution_search_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor.gin_predictor_train_num_restract_nasbench_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor_fix_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor_fix_num"], ["", "", "def", "run_nas_algos_nasbench_201", "(", "algo_params", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "None", ",", "logger", "=", "None", ",", "model_dir", "=", "None", ")", ":", "\n", "    ", "mp", "=", "copy", ".", "deepcopy", "(", "metann_params", ")", "\n", "ps", "=", "copy", ".", "deepcopy", "(", "algo_params", ")", "\n", "algo_name", "=", "ps", ".", "pop", "(", "'algo_name'", ")", "\n", "if", "algo_name", "==", "'random'", ":", "\n", "        ", "data", "=", "random_search_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'evolution'", ":", "\n", "        ", "data", "=", "evolution_search_nasbench_201", "(", "search_space", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "data", "=", "bananas_nasbench_201", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "mp", "[", "'layer_width'", "]", "=", "20", "\n", "data", "=", "bananas_nasbench_201", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "        ", "mp", ".", "pop", "(", "'search_space'", ")", "\n", "mp", "[", "'layer_width'", "]", "=", "20", "\n", "data", "=", "bananas_nasbench_201", "(", "search_space", ",", "mp", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "algo_name", "=", "algo_name", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_predictor_nasbench_201", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_fixed_nums'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_predictor_train_num_restract_nasbench_201", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_rl'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "model_dir", "=", "model_dir", ",", "\n", "benchmark", "=", "'nasbench_201'", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_rl_num_fixed'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor_fix_num", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "benchmark", "=", "'nasbench_201'", ",", "\n", "model_dir", "=", "model_dir", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_ccl'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "benchmark", "=", "'nasbench_201'", ",", "\n", "model_dir", "=", "model_dir", ",", "**", "ps", ")", "\n", "", "elif", "algo_name", "==", "'gin_predictor_ss_ccl_num_fixed'", ":", "\n", "        ", "ps", "[", "'algo_name'", "]", "=", "algo_name", "\n", "data", "=", "gin_unsupervised_predictor_fix_num", "(", "search_space", ",", "gpu", "=", "gpu", ",", "logger", "=", "logger", ",", "benchmark", "=", "'nasbench_201'", ",", "\n", "model_dir", "=", "model_dir", ",", "**", "ps", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'invalid algorithm name'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "k", "=", "10", "\n", "if", "'k'", "in", "ps", ":", "\n", "        ", "k", "=", "ps", "[", "'k'", "]", "\n", "", "return", "compute_best_test_losses", "(", "data", ",", "k", ",", "ps", "[", "'total_queries'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.compute_best_test_losses": [[116, 128], ["range", "results.append", "sorted"], "function", ["None"], ["", "def", "compute_best_test_losses", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "5", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.compute_best_test_losses_with_details": [[130, 148], ["range", "numpy.array().reshape", "numpy.array().reshape", "results.append", "sorted", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "compute_best_test_losses_with_details", "(", "data", ",", "k", ",", "total_queries", ")", ":", "\n", "    ", "\"\"\"\n    Given full data from a completed nas algorithm,\n    output the test error of the arch with the best val error\n    after every multiple of k\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "query", "in", "range", "(", "k", ",", "total_queries", "+", "k", ",", "k", ")", ":", "\n", "        ", "best_arch", "=", "sorted", "(", "data", "[", ":", "query", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", "0", "]", "\n", "test_error", "=", "best_arch", "[", "5", "]", "\n", "results", ".", "append", "(", "(", "query", ",", "test_error", ")", ")", "\n", "", "val_distribution", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "val_datas_np", "=", "np", ".", "array", "(", "val_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "test_distribution", "=", "[", "d", "[", "5", "]", "for", "d", "in", "data", "]", "\n", "test_datas_np", "=", "np", ".", "array", "(", "test_distribution", ")", ".", "reshape", "(", "(", "-", "1", ",", "10", ")", ")", "\n", "dist_results", "=", "{", "'val'", ":", "val_datas_np", ",", "\n", "'test'", ":", "test_datas_np", "}", "\n", "return", "results", ",", "dist_results", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.evolution.evolution_search_nasbench_101": [[20, 61], ["search_space.generate_random_dataset", "random.sample", "search_space.mutate_arch", "search_space.generate_random_dataset.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.mutate_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "evolution_search_nasbench_101", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "mutated", "=", "search_space", ".", "mutate_arch", "(", "{", "'matrix'", ":", "data", "[", "best_index", "]", "[", "1", "]", ",", "'ops'", ":", "data", "[", "best_index", "]", "[", "2", "]", "}", ",", "mutation_rate", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.evolution.evolution_search_nasbench_201": [[63, 106], ["search_space.generate_random_dataset", "random.sample", "nas_lib.data.nasbench_201_api.genotypes.Structure.str2structure", "search_space.mutate", "search_space.generate_random_dataset.append", "val_losses.append", "population.append", "numpy.argsort", "len", "population.remove", "logger.info", "range", "sorted", "len", "sorted", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.mutate", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "evolution_search_nasbench_201", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "population_size", "=", "30", ",", "\n", "total_queries", "=", "100", ",", "\n", "tournament_size", "=", "10", ",", "\n", "mutation_rate", "=", "1.0", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    regularized evolution\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "\n", "val_losses", "=", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", "\n", "if", "num_init", "<=", "population_size", ":", "\n", "        ", "population", "=", "[", "i", "for", "i", "in", "range", "(", "num_init", ")", "]", "\n", "", "else", ":", "\n", "        ", "population", "=", "np", ".", "argsort", "(", "val_losses", ")", "[", ":", "population_size", "]", "\n", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "sample", "=", "random", ".", "sample", "(", "population", ",", "tournament_size", ")", "\n", "best_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "sample", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "arch", "=", "data", "[", "best_index", "]", "[", "6", "]", "\n", "structures", "=", "CellStructure", ".", "str2structure", "(", "arch", ")", "\n", "_", ",", "mutated", "=", "search_space", ".", "mutate", "(", "structures", ")", "\n", "data", ".", "append", "(", "mutated", ")", "\n", "val_losses", ".", "append", "(", "mutated", "[", "4", "]", ")", "\n", "population", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "# kill the worst from the population   in nas bench paper kill the oldest arch", "\n", "if", "len", "(", "population", ")", ">", "population_size", ":", "\n", "            ", "worst_index", "=", "sorted", "(", "[", "(", "i", ",", "val_losses", "[", "i", "]", ")", "for", "i", "in", "population", "]", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "population", ".", "remove", "(", "worst_index", ")", "\n", "\n", "", "if", "verbose", "and", "(", "query", "%", "k", "==", "0", ")", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "1", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.random.random_search_nasbench_101": [[1, 16], ["search_space.generate_random_dataset", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "random_search_nasbench_101", "(", "search_space", ",", "\n", "total_queries", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    random search\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "total_queries", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "if", "verbose", ":", "\n", "        ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "total_queries", ",", "top_5_loss", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.random.random_search_nasbench_201": [[18, 33], ["search_space.generate_random_dataset", "logger.info", "sorted", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "random_search_nasbench_201", "(", "search_space", ",", "\n", "total_queries", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    random search\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "total_queries", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "if", "verbose", ":", "\n", "        ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "total_queries", ",", "top_5_loss", ")", ")", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_101": [[9, 72], ["search_space.generate_random_dataset", "numpy.array", "numpy.array", "search_space.get_candidates", "numpy.array", "range", "acquisition_functions.acq_fn", "nas_lib.predictors.predictor_mlp.PredictorMLP.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "nas_lib.predictors.predictor_mlp.PredictorMLP", "nas_lib.predictors.predictor_mlp.PredictorMLP", "numpy.squeeze", "sorted", "nas_lib.predictors.predictor_mlp.PredictorMLP.predict", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "bananas_nasbench_101", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "algo_name", "=", "'bananas'", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "algo_name", "=", "algo_name", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "algo_name", "=", "algo_name", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ",", "\n", "algo_name", "=", "algo_name", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_nasbench_201": [[74, 143], ["search_space.generate_random_dataset", "numpy.array", "search_space.get_candidates", "range", "acquisition_functions.acq_fn", "numpy.array", "numpy.array", "nas_lib.predictors.predictor_mlp.PredictorMLP.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.generate_random_dataset.append", "logger.info", "numpy.array", "numpy.array", "nas_lib.predictors.predictor_mlp.PredictorMLP", "nas_lib.predictors.predictor_mlp.PredictorMLP", "numpy.squeeze", "sorted", "numpy.array", "ValueError", "numpy.array", "ValueError", "nas_lib.predictors.predictor_mlp.PredictorMLP.predict", "min", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "bananas_nasbench_201", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "algo_name", "=", "'bananas'", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "eva_new", "=", "True", ",", "\n", "candidate_nums", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Bayesian optimization with a neural network model\n    \"\"\"", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "algo_name", "==", "'bananas'", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "data", "]", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "7", "]", "for", "d", "in", "data", "]", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "            ", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "8", "]", "for", "d", "in", "data", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Parameter wrong {algo_name}.'", ")", "\n", "", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "if", "algo_name", "==", "'bananas'", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "7", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "            ", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "8", "]", "for", "c", "in", "candidates", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Parameter wrong {algo_name}.'", ")", "\n", "", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.bananas.bananas_training_diff_num_nasbench_101": [[145, 207], ["search_space.generate_random_dataset", "numpy.array", "numpy.array", "search_space.get_candidates", "numpy.array", "range", "acquisition_functions.acq_fn", "len", "copy.deepcopy", "nas_lib.predictors.predictor_mlp.PredictorMLP.fit", "predictions.append", "keras.backend.clear_session", "tensorflow.reset_default_graph", "logger.info", "search_space.query_arch", "search_space.generate_random_dataset.append", "logger.info", "nas_lib.predictors.predictor_mlp.PredictorMLP", "nas_lib.predictors.predictor_mlp.PredictorMLP", "numpy.squeeze", "sorted", "nas_lib.predictors.predictor_mlp.PredictorMLP.predict", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.acquisition_functions.acq_fn", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.predictors.predictor_mlp.PredictorMLP.predict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "bananas_training_diff_num_nasbench_101", "(", "search_space", ",", "\n", "metann_params", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "num_ensemble", "=", "5", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "explore_type", "=", "'its'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic", "=", "True", ",", "\n", "verbose", "=", "1", ",", "\n", "gpu", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "training_nums", "=", "150", ")", ":", "\n", "    ", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "train_data", "=", "[", "]", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "", "xtrain", "=", "np", ".", "array", "(", "[", "d", "[", "3", "]", "for", "d", "in", "train_data", "]", ")", "\n", "ytrain", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "acq_opt_type", "=", "acq_opt_type", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "deterministic", ")", "\n", "xcandidates", "=", "np", ".", "array", "(", "[", "c", "[", "3", "]", "for", "c", "in", "candidates", "]", ")", "\n", "predictions", "=", "[", "]", "\n", "train_error", "=", "0", "\n", "for", "_", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", "gpu", "=", "gpu", ")", "\n", "", "else", ":", "\n", "                ", "meta_neuralnet", "=", "PredictorMLP", "(", ")", "\n", "", "train_error", "+=", "meta_neuralnet", ".", "fit", "(", "xtrain", ",", "ytrain", ",", "**", "metann_params", ")", "\n", "predictions", ".", "append", "(", "np", ".", "squeeze", "(", "meta_neuralnet", ".", "predict", "(", "xcandidates", ")", ")", ")", "\n", "K", ".", "clear_session", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "del", "meta_neuralnet", "\n", "", "train_error", "/=", "num_ensemble", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'Query {}, Meta neural net train error: {}'", ".", "format", "(", "query", ",", "train_error", ")", ")", "\n", "", "sorted_indices", "=", "acq_fn", "(", "predictions", ",", "explore_type", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "deterministic", "=", "deterministic", ")", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {},  training data nums {},  top 5 val losses {}'", ".", "format", "(", "query", ",", "len", "(", "train_data", ")", ",", "\n", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor": [[10, 87], ["torch.device", "search_space.generate_random_dataset", "len", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "candiate_edge_list.append", "candiate_node_list.append", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "nas_lib.utils.utils_data.nasbench2graph_101", "nas_lib.utils.utils_data.nasbench2graph_201", "nas_lib.utils.utils_data.nasbench2graph_101", "nas_lib.utils.utils_data.nasbench2graph_201", "agent.pred.cpu", "search_space.query_arch", "sorted", "NotImplementedError", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "gin_unsupervised_predictor", "(", "search_space", ",", "\n", "model_dir", "=", "None", ",", "\n", "num_init", "=", "10", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "predictor_type", "=", "None", ",", "\n", "algo_name", "=", "None", ",", "\n", "benchmark", "=", "None", ",", "\n", "rate", "=", "10", ")", ":", "\n", "    ", "assert", "benchmark", "is", "not", "None", ",", "'The benchmark have to be nasbench_101 or nasbench_201.'", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "input_dim", "=", "6", "if", "benchmark", "==", "'nasbench_101'", "else", "8", "\n", "if", "len", "(", "data", ")", "<=", "10", ":", "\n", "        ", "batch_size", "=", "10", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "", "while", "query", "<=", "total_queries", ":", "\n", "        ", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "data", "]", "\n", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "input_dim", ",", "\n", "model_dir", "=", "model_dir", ",", "predictor_type", "=", "predictor_type", ",", "logger", "=", "logger", ",", "\n", "algo_name", "=", "algo_name", ",", "rate", "=", "rate", ")", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "arch", ")", "if", "benchmark", "==", "'nasbench_101'", "else", "nasbench2graph_201", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "cand", "[", "0", "]", ")", "if", "benchmark", "==", "'nasbench_101'", "else", "nasbench2graph_201", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "if", "benchmark", "==", "'nasbench_101'", ":", "\n", "                ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "", "elif", "benchmark", "==", "'nasbench_201'", ":", "\n", "                ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "# data = [list(dd) for dd in data]", "\n", "# for i, d in enumerate(data):", "\n", "#     data[i][4] = (1 - d[4]) * 100", "\n", "#     data[i][5] = (1 - d[5]) * 100", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.predictor_unsupervised.gin_unsupervised_predictor_fix_num": [[89, 172], ["torch.device", "search_space.generate_random_dataset", "search_space.get_candidates", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "agent.pred.cpu().numpy", "numpy.argsort", "len", "copy.deepcopy", "candiate_edge_list.append", "candiate_node_list.append", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer", "numpy.array", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.fit", "nas_lib.eigen.trainer_predictor.NasBenchGinPredictorTrainer.pred", "search_space.generate_random_dataset.append", "logger.info", "logger.info", "len", "nas_lib.utils.utils_data.nasbench2graph_101", "nas_lib.utils.utils_data.nasbench2graph_201", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "agent.pred.cpu", "search_space.query_arch", "sorted", "len", "nas_lib.utils.utils_data.nasbench2graph_101", "nas_lib.utils.utils_data.nasbench2graph_201", "NotImplementedError", "min", "numpy.mean", "len", "numpy.abs", "agent.pred.cpu().numpy", "agent.pred.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "gin_unsupervised_predictor_fix_num", "(", "search_space", ",", "\n", "num_init", "=", "10", ",", "\n", "model_dir", "=", "None", ",", "\n", "k", "=", "10", ",", "\n", "total_queries", "=", "150", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "agent", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "gpu", "=", "'0'", ",", "\n", "lr", "=", "0.01", ",", "\n", "candidate_nums", "=", "100", ",", "\n", "epochs", "=", "1000", ",", "\n", "predictor_type", "=", "None", ",", "\n", "algo_name", "=", "None", ",", "\n", "training_nums", "=", "50", ",", "\n", "benchmark", "=", "None", ",", "\n", "rate", "=", "10", ")", ":", "\n", "    ", "assert", "benchmark", "is", "not", "None", ",", "'The benchmark have to be nasbench_101 or nasbench_201.'", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "gpu", ")", "\n", "data", "=", "search_space", ".", "generate_random_dataset", "(", "num", "=", "num_init", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ",", "\n", "deterministic_loss", "=", "True", ")", "\n", "query", "=", "num_init", "+", "k", "\n", "search_agent", "=", "agent", "\n", "train_data", "=", "[", "]", "\n", "train_flag", "=", "False", "\n", "input_dim", "=", "6", "if", "benchmark", "==", "'nasbench_101'", "else", "8", "\n", "while", "query", "<=", "total_queries", ":", "\n", "        ", "if", "len", "(", "train_data", ")", "<", "training_nums", ":", "\n", "            ", "train_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "train_flag", "=", "True", "\n", "", "batch_size", "=", "10", "if", "len", "(", "train_data", ")", "<=", "10", "else", "16", "\n", "candidates", "=", "search_space", ".", "get_candidates", "(", "data", ",", "\n", "num", "=", "candidate_nums", ",", "\n", "allow_isomorphisms", "=", "allow_isomorphisms", ")", "\n", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "cand", "[", "0", "]", ")", "if", "benchmark", "==", "'nasbench_101'", "else", "nasbench2graph_201", "(", "cand", "[", "0", "]", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "if", "train_flag", ":", "\n", "            ", "agent", "=", "NasBenchGinPredictorTrainer", "(", "search_agent", ",", "lr", "=", "lr", ",", "device", "=", "device", ",", "epochs", "=", "epochs", ",", "\n", "train_images", "=", "len", "(", "train_data", ")", ",", "batch_size", "=", "batch_size", ",", "input_dim", "=", "input_dim", ",", "\n", "model_dir", "=", "model_dir", ",", "predictor_type", "=", "predictor_type", ",", "logger", "=", "logger", ",", "\n", "algo_name", "=", "algo_name", ",", "rate", "=", "rate", ")", "\n", "arch_data", "=", "[", "d", "[", "0", "]", "for", "d", "in", "train_data", "]", "\n", "val_accuracy", "=", "np", ".", "array", "(", "[", "d", "[", "4", "]", "for", "d", "in", "train_data", "]", ")", "\n", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "for", "arch", "in", "arch_data", ":", "\n", "                ", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "arch", ")", "if", "benchmark", "==", "'nasbench_101'", "else", "nasbench2graph_201", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "", "agent", ".", "fit", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "val_accuracy", ",", "logger", "=", "None", ")", "\n", "acc_train", "=", "agent", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", "\n", "", "acc_pred", "=", "agent", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", "\n", "candidate_np", "=", "acc_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "candidate_np", ")", "\n", "for", "i", "in", "sorted_indices", "[", ":", "k", "]", ":", "\n", "            ", "if", "benchmark", "==", "'nasbench_101'", ":", "\n", "                ", "archtuple", "=", "search_space", ".", "query_arch", "(", "matrix", "=", "candidates", "[", "i", "]", "[", "1", "]", ",", "\n", "ops", "=", "candidates", "[", "i", "]", "[", "2", "]", ")", "\n", "", "elif", "benchmark", "==", "'nasbench_201'", ":", "\n", "                ", "archtuple", "=", "candidates", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "data", ".", "append", "(", "archtuple", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "top_5_loss", "=", "sorted", "(", "[", "d", "[", "4", "]", "for", "d", "in", "data", "]", ")", "[", ":", "min", "(", "5", ",", "len", "(", "data", ")", ")", "]", "\n", "logger", ".", "info", "(", "'Query {}, training mean loss is  {}'", ".", "format", "(", "query", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "acc_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "val_accuracy", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Query {}, top 5 val losses {}'", ".", "format", "(", "query", ",", "top_5_loss", ")", ")", "\n", "", "query", "+=", "k", "\n", "train_flag", "=", "False", "\n", "# data = [list(dd) for dd in data]", "\n", "# for i, d in enumerate(data):", "\n", "#     data[i][4] = (1 - d[4]) * 100", "\n", "#     data[i][5] = (1 - d[5]) * 100", "\n", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.ReLUConvBN.__init__": [[24, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.ReLUConvBN.forward": [[32, 34], ["darts_ops.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.DilConv.__init__": [[37, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.DilConv.forward": [[46, 48], ["darts_ops.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.SepConv.__init__": [[51, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.SepConv.forward": [[64, 66], ["darts_ops.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.Identity.__init__": [[69, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.Identity.forward": [[72, 74], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.Zero.__init__": [[77, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.Zero.forward": [[81, 85], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.FactorizedReduce.__init__": [[88, 95], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_ops.FactorizedReduce.forward": [[96, 101], ["darts_ops.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_ops.FactorizedReduce.bn", "darts_ops.FactorizedReduce.conv_1", "darts_ops.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2": [[22, 37], ["torch.zeros", "int", "torch.zeros", "range", "numpy.sum", "range"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["def", "nasbench2graph2", "(", "data", ")", ":", "\n", "    ", "matrix", ",", "ops", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "node_feature", "=", "torch", ".", "zeros", "(", "NUM_VERTICES", ",", "11", ")", "\n", "edges", "=", "int", "(", "np", ".", "sum", "(", "matrix", ")", ")", "\n", "edge_idx", "=", "torch", ".", "zeros", "(", "2", ",", "edges", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "        ", "idx", "=", "OPS", "[", "ops", "[", "i", "]", "]", "\n", "node_feature", "[", "i", ",", "idx", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "if", "matrix", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "edge_idx", "[", "0", ",", "counter", "]", "=", "i", "\n", "edge_idx", "[", "1", ",", "counter", "]", "=", "j", "\n", "counter", "+=", "1", "\n", "", "", "", "return", "edge_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.Cell.__init__": [[6, 21], ["nn.Module.__init__", "darts_ops.ReLUConvBN", "darts_cell.Cell._compile", "darts_ops.FactorizedReduce", "darts_ops.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(C_prev_prev, C_prev, C)", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.Cell._compile": [[22, 34], ["len", "nn.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.Cell.forward": [[35, 54], ["darts_cell.Cell.preprocess0", "darts_cell.Cell.preprocess1", "range", "torch.cat", "op1", "op2", "isinstance", "nas_lib.utils.utils_darts.drop_path", "isinstance", "nas_lib.utils.utils_darts.drop_path"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.drop_path", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ",", "device", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ",", "device", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.AuxiliaryHeadCIFAR.__init__": [[57, 71], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.AuxiliaryHeadCIFAR.forward": [[72, 76], ["darts_cell.AuxiliaryHeadCIFAR.features", "darts_cell.AuxiliaryHeadCIFAR.classifier", "darts_cell.AuxiliaryHeadCIFAR.view", "darts_cell.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.AuxiliaryHeadImageNet.__init__": [[79, 95], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_cell.AuxiliaryHeadImageNet.forward": [[96, 100], ["darts_cell.AuxiliaryHeadImageNet.features", "darts_cell.AuxiliaryHeadImageNet.classifier", "darts_cell.AuxiliaryHeadImageNet.view", "darts_cell.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.datrs_neuralnet.DartsCifar10NeuralNet.__init__": [[6, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "datrs_neuralnet.DartsCifar10NeuralNet.cells.append", "darts_cell.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "key", ",", "stem_mult", "=", "3", ")", ":", "\n", "        ", "super", "(", "DartsCifar10NeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hashkey", "=", "key", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "genotype", "=", "genotype", "\n", "C_curr", "=", "stem_mult", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.datrs_neuralnet.DartsCifar10NeuralNet.forward": [[39, 50], ["datrs_neuralnet.DartsCifar10NeuralNet.stem", "enumerate", "datrs_neuralnet.DartsCifar10NeuralNet.global_pooling", "datrs_neuralnet.DartsCifar10NeuralNet.classifier", "datrs_neuralnet.DartsCifar10NeuralNet.view", "cell", "datrs_neuralnet.DartsCifar10NeuralNet.size", "datrs_neuralnet.DartsCifar10NeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.datrs_neuralnet.DartsImageNetNeuralNet.__init__": [[53, 91], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "datrs_neuralnet.DartsImageNetNeuralNet.cells.append", "darts_cell.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "DartsImageNetNeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.datrs_neuralnet.DartsImageNetNeuralNet.forward": [[92, 104], ["datrs_neuralnet.DartsImageNetNeuralNet.stem0", "datrs_neuralnet.DartsImageNetNeuralNet.stem1", "enumerate", "datrs_neuralnet.DartsImageNetNeuralNet.global_pooling", "datrs_neuralnet.DartsImageNetNeuralNet.classifier", "datrs_neuralnet.DartsImageNetNeuralNet.view", "cell", "datrs_neuralnet.DartsImageNetNeuralNet.size", "datrs_neuralnet.DartsImageNetNeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "drop_path_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.__init__": [[279, 283], ["ccl_nas.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset": [[284, 289], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.update": [[290, 295], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.__str__": [[296, 299], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.ProgressMeter.__init__": [[302, 307], ["ccl_nas.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.ProgressMeter.display": [[308, 312], ["ccl_nas.ProgressMeter.logger.info", "str", "ccl_nas.ProgressMeter.batch_fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "self", ".", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.ProgressMeter._get_batch_fmtstr": [[313, 317], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.main": [[31, 65], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.spawn", "ccl_nas.main_worker"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.main_worker"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "if", "args", ".", "gpu_count", ">", "0", ":", "\n", "        ", "ngpus_per_node", "=", "args", ".", "gpu_count", "\n", "", "else", ":", "\n", "        ", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ",", "distributed", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.main_worker": [[67, 196], ["nas_lib.utils.comm.DummyLogger.info", "nas_lib.ccl.ccl_model.ccl_nas_model.CCLNas", "nas_lib.utils.comm.DummyLogger.info", "torch.CrossEntropyLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "nas_lib.data.collate_batch.BatchCollator", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.DummyLogger.info", "torch.init_process_group", "nas_lib.ccl.ccl_model.builder.build_model", "model.cuda.parameters", "os.path.isfile", "nas_lib.data.nasbench_101_torch.NASBenche101Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "ccl_nas.adjust_learning_rate", "ccl_nas.train_nested", "nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.DummyLogger", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "torch.CrossEntropyLoss", "nas_lib.utils.comm.DummyLogger.info", "model.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "nas_lib.utils.comm.DummyLogger.info", "nas_lib.utils.comm.DummyLogger.info", "nas_lib.data.nasbench_201_torch.NASBenche201Dataset", "torch.utils.data.distributed.DistributedSampler.set_epoch", "os.path.join", "ccl_nas.save_checkpoint", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nas_lib.data.darts_torch.DartsDataset", "NotImplementedError", "model.cuda.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.adjust_learning_rate", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.train_nested", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.save_checkpoint", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ",", "distributed", "=", "True", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "+", "args", ".", "gpu_base", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "if", "args", ".", "gpu", "==", "args", ".", "gpu_base", ":", "\n", "            ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "logger", "=", "DummyLogger", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "# suppress printing if not master", "\n", "", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "logger", ".", "info", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "CCLNas", "(", "\n", "build_model", "(", "args", ".", "arch", ",", "args", ".", "with_g_func", ")", ",", "args", ".", "input_dim", ",", "args", ".", "moco_dim_fc", ",", "\n", "args", ".", "moco_dim", ",", "distributed", "=", "distributed", ",", "train_samples", "=", "args", ".", "train_samples", ",", "t", "=", "args", ".", "moco_t", ",", "\n", "min_negative_size", "=", "args", ".", "min_negative_size", ",", "margin", "=", "args", ".", "margin", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "# raise NotImplementedError(\"Only DistributedDataParallel is supported.\")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "betas", "=", "(", "0.0", ",", "0.9", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "train_dataset", "=", "NASBenche101Dataset", "(", "model_type", "=", "'SS_CCL'", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "train_dataset", "=", "NASBenche201Dataset", "(", "model_type", "=", "'SS_CCL'", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "train_dataset", "=", "DartsDataset", "(", "model_type", "=", "'SS_CCL'", ",", "arch_path", "=", "args", ".", "darts_arch_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'This kind nasbench has not implemented.'", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "", "collator", "=", "BatchCollator", "(", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "False", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "collator", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "# train for one epoch", "\n", "center_vec", "=", "train_nested", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "logger", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_{:04d}.pth.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'centers'", ":", "center_vec", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.train_nested": [[198, 260], ["ccl_nas.AverageMeter", "ccl_nas.AverageMeter", "ccl_nas.AverageMeter", "ccl_nas.AverageMeter", "ccl_nas.AverageMeter", "ccl_nas.ProgressMeter", "model.train", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "time.time", "enumerate", "len", "ccl_nas.AverageMeter.update", "gnn_lib.data.Batch.from_data_list", "batch.to.to", "list", "random.shuffle", "enumerate", "ccl_nas.AverageMeter.update", "time.time", "center_list.append", "range", "model", "criterion", "logits.size", "ccl_nas.accuracy", "ccl_nas.AverageMeter.update", "ccl_nas.AverageMeter.update", "ccl_nas.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "ccl_nas.ProgressMeter.display", "centers.cpu().detach().numpy", "time.time", "len", "range", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "list", "criterion.item", "time.time", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "centers.cpu().detach", "torch.mm.size", "centers.cpu"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.accuracy", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.ProgressMeter.display"], ["", "", "", "def", "train_nested", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "logger", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ",", "logger", "=", "logger", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "f'cuda:{args.gpu}'", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "center_list", "=", "[", "]", "\n", "step", "=", "args", ".", "batch_step", "\n", "for", "i", ",", "(", "g_d", ",", "path_encodings", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "g_d", ")", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "g_d", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "indices", "=", "indices", "[", ":", "args", ".", "train_samples", "]", "\n", "indices_list", "=", "[", "indices", "[", "i", "*", "step", ":", "(", "i", "+", "1", ")", "*", "step", "]", "for", "i", "in", "range", "(", "args", ".", "train_samples", "//", "step", ")", "]", "\n", "for", "idxss", ",", "sample_ids", "in", "enumerate", "(", "indices_list", ")", ":", "\n", "# compute output", "\n", "            ", "logits", ",", "label", ",", "centers", "=", "model", "(", "batch", "=", "batch", ",", "path_encoding", "=", "path_encodings", ",", "\n", "device", "=", "device", ",", "search_space", "=", "args", ".", "search_space", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "logger", "=", "logger", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "label", ")", "\n", "if", "args", ".", "center_regularization", ":", "\n", "                ", "center_dist", "=", "torch", ".", "mm", "(", "centers", ",", "centers", ".", "T", ")", "\n", "masks", "=", "torch", ".", "ones_like", "(", "center_dist", ")", "\n", "eigen_val", "=", "list", "(", "range", "(", "center_dist", ".", "size", "(", "0", ")", ")", ")", "\n", "masks", "[", "eigen_val", ",", "eigen_val", "]", "=", "0", "\n", "center_loss", "=", "0.5", "*", "torch", ".", "mean", "(", "masks", "*", "center_dist", ")", "\n", "loss", "=", "loss", "+", "0.5", "*", "center_loss", "\n", "", "size_logits", "=", "logits", ".", "size", "(", "0", ")", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "logits", ",", "label", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "size_logits", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "size_logits", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "size_logits", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "", "center_list", ".", "append", "(", "centers", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "center_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.assemble_training_data_batch": [[262, 269], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.numpy", "nums.numpy.sort"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "assemble_training_data_batch", "(", "dist_matrix", ")", ":", "\n", "    ", "min_val", ",", "min_indices", "=", "torch", ".", "min", "(", "dist_matrix", ",", "dim", "=", "1", ")", "\n", "nums", "=", "torch", ".", "sum", "(", "dist_matrix", "==", "min_val", ",", "dim", "=", "1", ")", "\n", "\n", "max_nums", "=", "torch", ".", "sum", "(", "dist_matrix", ">", "(", "min_val", "+", "2", ")", ",", "dim", "=", "1", ")", "\n", "nums_np", "=", "nums", ".", "numpy", "(", ")", "\n", "nums_np", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.save_checkpoint": [[271, 275], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.adjust_learning_rate": [[319, 329], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.accuracy": [[331, 346], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.topk"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.builder.build_model": [[4, 9], ["NotImplementedError"], "function", ["None"], ["def", "build_model", "(", "model_type", ",", "with_g_func", "=", "True", ")", ":", "\n", "    ", "if", "model_type", "==", "'SS_CCL'", ":", "\n", "        ", "return", "PredictorGINCCL", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The model type {model_type} has not implemented!'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.ccl_nas_model.CCLNas.__init__": [[8, 31], ["torch.Module.__init__", "base_encoder", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_encoder", ",", "input_dim", "=", "6", ",", "dim_fc", "=", "64", ",", "dim_out", "=", "32", ",", "distributed", "=", "True", ",", "train_samples", "=", "500", ",", "t", "=", "0.07", ",", "\n", "min_negative_size", "=", "4500", ",", "margin", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "CCLNas", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "T", "=", "t", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "input_dim", "=", "input_dim", ",", "dim1", "=", "dim_fc", ",", "num_classes", "=", "dim_out", ")", "\n", "# create the queue", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "train_samples", "=", "train_samples", "\n", "\n", "self", ".", "min_negative_size", "=", "min_negative_size", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "center_list", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "self", ".", "center_feature_list", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.ccl_nas_model.CCLNas.forward": [[32, 37], ["ccl_nas_model.CCLNas.forward_wo"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.ccl_nas_model.CCLNas.forward_wo"], ["", "def", "forward", "(", "self", ",", "batch", ",", "path_encoding", ",", "device", ",", "search_space", ",", "sample_ids", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward_wo", "(", "batch", "=", "batch", ",", "\n", "path_encoding", "=", "path_encoding", ",", "\n", "sample_ids", "=", "sample_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl_model.ccl_nas_model.CCLNas.forward_wo": [[38, 94], ["ccl_nas_model.CCLNas.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "list", "random.shuffle", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.functional.normalize", "torch.functional.normalize", "torch.any", "torch.any", "torch.any", "torch.any", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "negative_pairs.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits_list.append", "center_list.append", "range", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.functional.normalize.view", "torch.functional.normalize.view", "torch.mm.size", "torch.mm.size", "torch.functional.normalize.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "path_encoding.size", "negative_pairs.view().repeat.view().repeat.view", "path_encoding[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.normalize", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "forward_wo", "(", "self", ",", "batch", ",", "path_encoding", ",", "sample_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n        Output:\n            logits, targets\n        \"\"\"", "\n", "batch_nodes1", ",", "batch_edge_idx1", ",", "batch_idx1", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "batch_nodes1", ",", "batch_edge_idx1", ",", "batch_idx1", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "if", "sample_ids", "is", "None", ":", "\n", "            ", "idxs", "=", "list", "(", "range", "(", "path_encoding", ".", "size", "(", "0", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "sample_ids", "=", "idxs", "[", ":", "self", ".", "train_samples", "]", "\n", "\n", "", "logits_list", "=", "[", "]", "\n", "center_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "sample_ids", ":", "\n", "            ", "dist_vec", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "path_encoding", "-", "path_encoding", "[", "i", ",", ":", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "dist_vec", "[", "i", "]", "=", "100", "\n", "min_val", ",", "_", "=", "torch", ".", "min", "(", "dist_vec", ",", "dim", "=", "0", ")", "\n", "dist_vec", "[", "i", "]", "=", "0", "\n", "masks", "=", "dist_vec", "==", "min_val", "\n", "\n", "negative_mask", "=", "dist_vec", ">=", "(", "min_val", "+", "self", ".", "margin", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "negative_mask", ")", ".", "item", "(", ")", "<", "self", ".", "min_negative_size", ":", "\n", "                ", "continue", "\n", "\n", "", "posit_vecs", "=", "q", "[", "masks", "]", "\n", "neg_vecs", "=", "q", "[", "negative_mask", "]", "[", ":", "self", ".", "min_negative_size", ",", ":", "]", "\n", "\n", "center", "=", "torch", ".", "mean", "(", "posit_vecs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "center", "=", "nn", ".", "functional", ".", "normalize", "(", "center", ",", "dim", "=", "1", ")", "\n", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "center", ")", ")", ":", "\n", "                ", "continue", "\n", "", "positive_pairs", "=", "torch", ".", "mm", "(", "posit_vecs", ",", "center", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "negative_pairs", "=", "torch", ".", "mm", "(", "neg_vecs", ",", "center", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "negative_pairs", "=", "negative_pairs", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "positive_pairs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positive_pairs", ",", "negative_pairs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "center_list", ".", "append", "(", "center", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "final_logits", "=", "torch", ".", "cat", "(", "logits_list", ",", "dim", "=", "0", ")", "\n", "final_center", "=", "torch", ".", "cat", "(", "center_list", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "final_logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "# print(f'There {counter} nan center vectors.')", "\n", "return", "final_logits", ",", "label", ",", "final_center", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_loss.Criterion.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sqrtpi", "=", "2.5066282746310002", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_loss.Criterion.forward": [[12, 23], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mu", ",", "sigma", ",", "target_y", ")", ":", "\n", "        ", "\"\"\" mu : (bs, n_target)\n            sigma : (bs, n_target)\n            target_y : (bs, n_target)\n        \"\"\"", "\n", "l1", "=", "0.5", "*", "torch", ".", "pow", "(", "(", "target_y", "-", "mu", ")", ",", "2", ")", "/", "torch", ".", "pow", "(", "sigma", ",", "2", ")", "\n", "l3", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "sqrtpi", "*", "sigma", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "l3", "-", "l1", ")", "\n", "# loss2 = self.forward_test(mu, sigma, target_y)", "\n", "# print('the absolute error of two loss is %.10f' % (loss-loss2))", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_loss.Criterion.forward_test": [[24, 35], ["range", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward_test", "(", "self", ",", "mu", ",", "sigma", ",", "target_y", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "bs", "=", "mu", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "# dist = torch.distributions.multivariate_normal.MultivariateNormal(loc=mu[i],", "\n", "# covariance_matrix=torch.diag(sigma[i]))", "\n", "            ", "dist", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "loc", "=", "mu", "[", "i", "]", ",", "scale", "=", "sigma", "[", "i", "]", ")", "\n", "log_prob", "=", "dist", ".", "log_prob", "(", "target_y", "[", "i", "]", ")", "\n", "loss", "=", "loss", "-", "1.0", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n", "", "loss", "=", "loss", "/", "bs", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.forward": [[7, 13], ["ctx.save_for_backward", "vec.mul().add", "vec.mul"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "mean", ",", "std", ",", "vec", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "mean", ",", "std", ",", "vec", ")", "\n", "# output = vec.mul_(std).add_(mean)", "\n", "output", "=", "vec", ".", "mul", "(", "std", ")", ".", "add", "(", "mean", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward": [[14, 25], ["torch.ones_like().mul", "vec.mul", "torch.ones_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "mean", ",", "std", ",", "vec", "=", "ctx", ".", "saved_tensors", "\n", "grad_mean", "=", "grad_std", "=", "grad_vec", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_mean", "=", "torch", ".", "ones_like", "(", "mean", ")", ".", "mul", "(", "grad_output", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_std", "=", "vec", ".", "mul", "(", "grad_output", ")", "\n", "# grad_std = vec.mul(-1*grad_output)", "\n", "# grad_std = vec.mul(torch.exp(-1*grad_output))", "\n", "", "return", "grad_mean", ",", "grad_std", ",", "grad_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer.NASBenchTrainer.__init__": [[9, 23], ["nas_lib.params.get_params", "logger.info", "trainer.build_trainer"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.get_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer.build_trainer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "predictor_type", ",", "train_size", ",", "train_epochs", ",", "logger", "=", "None", ")", ":", "\n", "        ", "params", "=", "get_params", "(", "args", ",", "predictor_type", ",", "load_model", "=", "False", ",", "pre_train", "=", "True", ")", "\n", "logger", ".", "info", "(", "params", ")", "\n", "if", "args", ".", "save_model", ":", "\n", "            ", "params", "[", "'save_model'", "]", "=", "True", "\n", "", "self", ".", "trainer", "=", "build_trainer", "(", "predictor_type", "=", "predictor_type", ",", "\n", "params", "=", "params", ",", "\n", "args", "=", "args", ",", "\n", "train_size", "=", "train_size", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer.NASBenchTrainer.fit_unsupervised": [[24, 30], ["trainer.NASBenchTrainer.trainer.fit"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit"], ["", "def", "fit_unsupervised", "(", "self", ",", "all_data", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "search_space", "==", "'darts'", ":", "\n", "            ", "train_archs", "=", "[", "(", "d", "[", "'g_data'", "]", ",", "d", "[", "'pe_path_enc_aware_vec'", "]", "[", "0", "]", ")", "for", "d", "in", "all_data", "]", "\n", "", "else", ":", "\n", "            ", "train_archs", "=", "[", "(", "d", "[", "'g_data'", "]", ",", "d", "[", "'pe_path_enc_aware_vec'", "]", ")", "for", "d", "in", "all_data", "]", "\n", "", "self", ".", "trainer", ".", "fit", "(", "train_archs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer.build_trainer": [[32, 47], ["trainer_gnn_embedding.TrainerGED", "NotImplementedError"], "function", ["None"], ["", "", "def", "build_trainer", "(", "predictor_type", ",", "train_size", ",", "params", ",", "args", ",", "train_epochs", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "predictor_type", "==", "'SS_RL'", ":", "\n", "        ", "return", "TrainerGED", "(", "gpu", "=", "args", ".", "gpu", ",", "\n", "nas_benchmark", "=", "args", ".", "search_space", ",", "\n", "predictor_type", "=", "predictor_type", ",", "\n", "epoch_img_size", "=", "train_size", ",", "\n", "model_save_dir", "=", "args", ".", "save_dir", ",", "\n", "epochs", "=", "train_epochs", ",", "\n", "full_train", "=", "args", ".", "full_train", ",", "\n", "logger", "=", "logger", ",", "\n", "args", "=", "args", ",", "\n", "ratio", "=", "args", ".", "train_ratio", ",", "\n", "**", "params", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding_darts.TrainerGEDDarts.__init__": [[19, 42], ["torch.device", "nas_lib.utils.utils_data.get_node_num", "nas_lib.utils.utils_data.get_node_num", "nas_lib.utils.utils_data.get_ops_list", "nas_lib.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED", "utils.utils_solver.make_agent_optimizer", "trainer_gnn_embedding_darts.TrainerGEDDarts.predictor.to", "utils.utils_solver.CosineLR", "functools.partial", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_ops_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ",", "nas_benchmark", ",", "predictor_type", ",", "lr", ",", "epochs", ",", "batch_size", ",", "input_dim", ",", "epoch_img_size", ",", "\n", "model_save_dir", ",", "full_train", "=", "False", ",", "save_model", "=", "True", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "nas_benchmark", "=", "nas_benchmark", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{gpu}'", ")", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "node_num", "=", "get_node_num", "(", "nas_benchmark", ")", "\n", "self", ".", "node_type_num", "=", "get_node_num", "(", "nas_benchmark", ")", "\n", "self", ".", "ops_list", "=", "get_ops_list", "(", "nas_benchmark", ")", "\n", "self", ".", "predictor", "=", "PredictorSiameseGED", "(", "input_dim", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "predictor", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "predictor", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "epoch_img_size", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "self", ".", "nas2graph_p", "=", "partial", "(", "nas2graph", ",", "nas_benchmark", ")", "\n", "self", ".", "save_dir", "=", "model_save_dir", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "full_train", "=", "full_train", "\n", "self", ".", "save_model", "=", "save_model", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding_darts.TrainerGEDDarts.fit": [[43, 51], ["range", "trainer_gnn_embedding_darts.TrainerGEDDarts.fit_train", "trainer_gnn_embedding_darts.TrainerGEDDarts.logger.info", "print"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "def", "fit", "(", "self", ",", "total_archs", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "f'epoch {e} begin'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'epoch {e} begin'", ")", "\n", "\n", "", "self", ".", "fit_train", "(", "total_archs", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding_darts.TrainerGEDDarts.fit_train": [[52, 111], ["utils.metric_logger.MetricLogger", "trainer_gnn_embedding_darts.TrainerGEDDarts.predictor.train", "list", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx_gen", "random.shuffle", "utils.utils_solver.gen_batch_idx_gen", "enumerate", "os.path.join", "range", "zip", "len", "zip", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch1.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch2.to.to.to", "dist_gt.to.to.to", "trainer_gnn_embedding_darts.TrainerGEDDarts.predictor", "prediction.squeeze.squeeze.squeeze", "trainer_gnn_embedding_darts.TrainerGEDDarts.criterion", "trainer_gnn_embedding_darts.TrainerGEDDarts.optimizer.zero_grad", "trainer_gnn_embedding_darts.TrainerGEDDarts.backward", "trainer_gnn_embedding_darts.TrainerGEDDarts.optimizer.step", "trainer_gnn_embedding_darts.TrainerGEDDarts.scheduler.step", "utils.metric_logger.MetricLogger.update", "torch.save", "trainer_gnn_embedding_darts.TrainerGEDDarts.logger.info", "print", "len", "nas_lib.data.darts_init.gen_arch_info", "data_list_pair1.append", "arch_path_encoding_pair1.append", "nas_lib.data.darts_init.gen_arch_info", "data_list_pair2.append", "arch_path_encoding_pair2.append", "trainer_gnn_embedding_darts.TrainerGEDDarts.predictor.state_dict", "utils.metric_logger.MetricLogger.delimiter.join", "utils.metric_logger.MetricLogger.delimiter.join", "nas_lib.utils.utils_data.edit_distance_normalization", "trainer_gnn_embedding_darts.TrainerGEDDarts.item", "range", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx_gen", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx_gen", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.edit_distance_normalization"], ["", "", "def", "fit_train", "(", "self", ",", "total_archs", ",", "epoch", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "predictor", ".", "train", "(", ")", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "total_archs", ")", ")", ")", "\n", "idx_list2", "=", "list", "(", "idx_list", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list_1", "=", "gen_batch_idx_gen", "(", "idx_list", ",", "self", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "random", ".", "shuffle", "(", "idx_list2", ")", "\n", "batch_idx_list_2", "=", "gen_batch_idx_gen", "(", "idx_list2", ",", "self", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "(", "pair1_idx", ",", "pair2_idx", ")", "in", "enumerate", "(", "zip", "(", "batch_idx_list_1", ",", "batch_idx_list_2", ")", ")", ":", "\n", "            ", "counter", "+=", "len", "(", "pair1_idx", ")", "\n", "data_list_pair1", "=", "[", "]", "\n", "arch_path_encoding_pair1", "=", "[", "]", "\n", "\n", "data_list_pair2", "=", "[", "]", "\n", "arch_path_encoding_pair2", "=", "[", "]", "\n", "\n", "for", "pair_idx", "in", "zip", "(", "pair1_idx", ",", "pair2_idx", ")", ":", "\n", "                ", "idx1", ",", "idx2", "=", "pair_idx", "\n", "arch_1_info", "=", "gen_arch_info", "(", "total_archs", "[", "idx1", "]", ")", "\n", "g_d_1", "=", "arch_1_info", "[", "'g_data'", "]", "\n", "data_list_pair1", ".", "append", "(", "g_d_1", ")", "\n", "arch_path_encoding_pair1", ".", "append", "(", "arch_1_info", "[", "'pe_path_enc_aware_vec'", "]", ")", "\n", "\n", "arch_2_info", "=", "gen_arch_info", "(", "total_archs", "[", "idx2", "]", ")", "\n", "data_list_pair2", ".", "append", "(", "arch_2_info", "[", "'g_data'", "]", ")", "\n", "arch_path_encoding_pair2", ".", "append", "(", "arch_2_info", "[", "'pe_path_enc_aware_vec'", "]", ")", "\n", "\n", "", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance_normalization", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "\n", "arch_path_encoding_pair2", "[", "i", "]", ",", "self", ".", "node_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch1", "=", "Batch", ".", "from_data_list", "(", "data_list_pair1", ")", "\n", "batch1", "=", "batch1", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch2", "=", "Batch", ".", "from_data_list", "(", "data_list_pair2", ")", "\n", "batch2", "=", "batch2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dist_gt", "=", "dist_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", "=", "batch1", ".", "x", ",", "batch1", ".", "edge_index", ",", "batch1", ".", "batch", "\n", "batch_nodes_2", ",", "batch_edge_idx_2", ",", "batch_idx_2", "=", "batch2", ".", "x", ",", "batch2", ".", "edge_index", ",", "batch2", ".", "batch", "\n", "prediction", "=", "self", ".", "predictor", "(", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", ",", "batch_nodes_2", ",", "\n", "batch_edge_idx_2", ",", "batch_idx_2", ")", "\n", "prediction", "=", "prediction", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "prediction", ",", "dist_gt", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'unsupervised_ss_rl_epoch_{epoch}.pt'", ")", "\n", "if", "self", ".", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "predictor", ".", "state_dict", "(", ")", ",", "save_dir", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding_darts.TrainerGEDDarts.inference": [[112, 158], ["trainer_gnn_embedding_darts.TrainerGEDDarts.predictor.eval", "enumerate", "zip", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch1.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch2.to.to.to", "dist_gt.to.to.to", "trainer_gnn_embedding_darts.TrainerGEDDarts.predictor", "torch.abs", "error_list.append", "precision_list.append", "trainer_gnn_embedding_darts.TrainerGEDDarts.logger.info", "print", "gnn_lib.data.Data", "data_list_pair1.append", "arch_path_encoding_pair1.append", "gnn_lib.data.Data", "data_list_pair2.append", "arch_path_encoding_pair2.append", "torch.abs.size", "torch.mean().item", "precision.item", "nas_lib.utils.utils_data.edit_distance", "torch.log", "torch.sum", "edge_index[].long", "node_feature[].float", "edge_index[].long", "node_feature[].float", "range", "trainer_gnn_embedding_darts.TrainerGEDDarts.squeeze", "torch.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.edit_distance"], ["", "", "def", "inference", "(", "self", ",", "edge_index", ",", "node_feature", ",", "arch_encoding", ",", "batch_idx_test_1", ",", "batch_idx_test_2", ")", ":", "\n", "        ", "self", ".", "predictor", ".", "eval", "(", ")", "\n", "error_list", "=", "[", "]", "\n", "precision_list", "=", "[", "]", "\n", "for", "i", ",", "pair1_idx", "in", "enumerate", "(", "batch_idx_test_1", ")", ":", "\n", "            ", "pair2_idx", "=", "batch_idx_test_2", "[", "i", "]", "\n", "data_list_pair1", "=", "[", "]", "\n", "arch_path_encoding_pair1", "=", "[", "]", "\n", "\n", "data_list_pair2", "=", "[", "]", "\n", "arch_path_encoding_pair2", "=", "[", "]", "\n", "\n", "for", "pair_idx", "in", "zip", "(", "pair1_idx", ",", "pair2_idx", ")", ":", "\n", "                ", "idx1", ",", "idx2", "=", "pair_idx", "\n", "g_d_1", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx1", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx1", "]", ".", "float", "(", ")", ")", "\n", "data_list_pair1", ".", "append", "(", "g_d_1", ")", "\n", "arch_path_encoding_pair1", ".", "append", "(", "arch_encoding", "[", "idx1", "]", ")", "\n", "\n", "g_d_2", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx2", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx2", "]", ".", "float", "(", ")", ")", "\n", "data_list_pair2", ".", "append", "(", "g_d_2", ")", "\n", "arch_path_encoding_pair2", ".", "append", "(", "arch_encoding", "[", "idx2", "]", ")", "\n", "\n", "", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "arch_path_encoding_pair2", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch1", "=", "Batch", ".", "from_data_list", "(", "data_list_pair1", ")", "\n", "batch1", "=", "batch1", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch2", "=", "Batch", ".", "from_data_list", "(", "data_list_pair2", ")", "\n", "batch2", "=", "batch2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dist_gt", "=", "dist_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", "=", "batch1", ".", "x", ",", "batch1", ".", "edge_index", ",", "batch1", ".", "batch", "\n", "batch_nodes_2", ",", "batch_edge_idx_2", ",", "batch_idx_2", "=", "batch2", ".", "x", ",", "batch2", ".", "edge_index", ",", "batch2", ".", "batch", "\n", "prediction", "=", "self", ".", "predictor", "(", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", ",", "batch_nodes_2", ",", "\n", "batch_edge_idx_2", ",", "batch_idx_2", ")", "\n", "prediction", "=", "-", "1", "*", "torch", ".", "log", "(", "prediction", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ")", "*", "self", ".", "node_num", "\n", "\n", "errors", "=", "torch", ".", "abs", "(", "dist_gt", "-", "prediction", ")", "\n", "precision", "=", "(", "torch", ".", "sum", "(", "errors", "<", "1", ")", "*", "1.", ")", "/", "errors", ".", "size", "(", "0", ")", "\n", "error_list", ".", "append", "(", "torch", ".", "mean", "(", "errors", ")", ".", "item", "(", ")", ")", "\n", "precision_list", ".", "append", "(", "precision", ".", "item", "(", ")", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Error is {np.mean(np.array(error_list))}, Precision is {np.mean(np.array(precision_list))}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Error is {np.mean(np.array(error_list))}, Precision is {np.mean(np.array(precision_list))}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding_darts.TrainerGEDDarts._verify_node_nums": [[159, 165], ["print", "ValueError"], "methods", ["None"], ["", "", "def", "_verify_node_nums", "(", "self", ",", "node_feature_list", ")", ":", "\n", "        ", "node_nums", "=", "node_feature_list", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "node", "in", "node_feature_list", ":", "\n", "            ", "if", "node", ".", "shape", "[", "0", "]", "!=", "node_nums", ":", "\n", "                ", "print", "(", "node", ")", "\n", "raise", "ValueError", "(", "'The node num is incorrect!!!'", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.__init__": [[17, 33], ["nas_lib.params.get_params", "trainer_retrain.build_predictor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params.get_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.build_predictor"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "predictor_type", ",", "train_size", ",", "load_model", "=", "False", ",", "load_dir", "=", "None", ",", "train_epochs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "params", "=", "get_params", "(", "args", ",", "predictor_type", ",", "load_model", "=", "load_model", ")", "\n", "# if train_size == 200 and load_model and predictor_type == 'SS_CCL':", "\n", "#     params['lr'] = 0.1*params['lr']", "\n", "self", ".", "trainer", "=", "build_predictor", "(", "predictor_type", "=", "predictor_type", ",", "\n", "params", "=", "params", ",", "\n", "args", "=", "args", ",", "\n", "train_size", "=", "train_size", ",", "\n", "load_model", "=", "load_model", ",", "\n", "load_dir", "=", "load_dir", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit": [[34, 41], ["trainer_retrain.NASBenchReTrain.trainer.fit"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit"], ["", "def", "fit", "(", "self", ",", "train_data", ",", "test_data", ")", ":", "\n", "        ", "train_archs", "=", "[", "(", "d", "[", "'matrix'", "]", ",", "d", "[", "'ops'", "]", ")", "for", "d", "in", "train_data", "]", "\n", "ytrain", "=", "[", "d", "[", "'val_acc'", "]", "for", "d", "in", "train_data", "]", "\n", "test_matrix", "=", "[", "(", "d", "[", "'matrix'", "]", ",", "d", "[", "'ops'", "]", ")", "for", "d", "in", "test_data", "]", "\n", "ytest", "=", "[", "d", "[", "'val_acc'", "]", "for", "d", "in", "test_data", "]", "\n", "spearman_corr", ",", "kendalltau_corr", "=", "self", ".", "trainer", ".", "fit", "(", "train_archs", ",", "ytrain", ",", "test_matrix", ",", "ytest", ")", "\n", "return", "spearman_corr", ",", "kendalltau_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit_g_data": [[42, 74], ["trainer_retrain.NASBenchReTrain.trainer.fit_g", "trainer_retrain.NASBenchReTrain.trainer.fit_g", "trainer_retrain.NASBenchReTrain.trainer.fit_g", "trainer_retrain.NASBenchReTrain.trainer.fit_g"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_g", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_g", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_g", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_g"], ["", "def", "fit_g_data", "(", "self", ",", "train_data", ",", "test_data", ")", ":", "\n", "# train_archs = [(d['matrix'], d['ops']) for d in train_data]", "\n", "        ", "ytrain", "=", "[", "d", "[", "'val_acc'", "]", "for", "d", "in", "train_data", "]", "\n", "g_train_data", "=", "[", "d", "[", "'g_data'", "]", "for", "d", "in", "train_data", "]", "\n", "# test_archs = [(d['matrix'], d['ops']) for d in test_data][:END_NUM]", "\n", "ytest", "=", "[", "d", "[", "'val_acc'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "g_test_data", "=", "[", "d", "[", "'g_data'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "if", "self", ".", "predictor_type", "==", "'SemiNAS'", ":", "\n", "            ", "train_semi_vecs", "=", "[", "d", "[", "'seminas_vec'", "]", "for", "d", "in", "train_data", "]", "\n", "test_semi_vecs", "=", "[", "d", "[", "'seminas_vec'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "self", ".", "trainer", ".", "fit_g", "(", "ytrain", ",", "train_semi_vecs", ",", "ytest", ",", "test_semi_vecs", ")", "\n", "", "elif", "self", ".", "predictor_type", "==", "'BANANAS_ADJ'", "or", "self", ".", "predictor_type", "==", "'MLP'", ":", "\n", "            ", "train_data", "=", "[", "d", "[", "'pe_adj_enc_vec'", "]", "for", "d", "in", "train_data", "]", "\n", "test_data", "=", "[", "d", "[", "'pe_adj_enc_vec'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "self", ".", "trainer", ".", "fit_g", "(", "ytrain", ",", "train_data", ",", "ytest", ",", "test_data", ")", "\n", "", "elif", "self", ".", "predictor_type", "==", "'NP_NAS'", ":", "\n", "            ", "arch_data_edge_idx_list", "=", "[", "d", "[", "'edge_idx'", "]", "for", "d", "in", "train_data", "]", "\n", "arch_data_node_f_list", "=", "[", "d", "[", "'node_f'", "]", "for", "d", "in", "train_data", "]", "\n", "arch_data_edge_idx_reverse_list", "=", "[", "d", "[", "'edge_idx_reverse'", "]", "for", "d", "in", "train_data", "]", "\n", "arch_data_node_f_reverse_list", "=", "[", "d", "[", "'node_f_reverse'", "]", "for", "d", "in", "train_data", "]", "\n", "\n", "candidate_g_data", "=", "[", "d", "[", "'g_data'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "candidate_g_reverse_data", "=", "[", "d", "[", "'g_data_reverse'", "]", "for", "d", "in", "test_data", "]", "[", ":", "END_NUM", "]", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "self", ".", "trainer", ".", "fit_g", "(", "ytrain", ",", "arch_data_edge_idx_list", ",", "\n", "arch_data_node_f_list", ",", "\n", "arch_data_edge_idx_reverse_list", ",", "\n", "arch_data_node_f_reverse_list", ",", "\n", "ytest", ",", "candidate_g_data", ",", "\n", "candidate_g_reverse_data", ")", "\n", "", "else", ":", "\n", "            ", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "self", ".", "trainer", ".", "fit_g", "(", "ytrain", ",", "g_train_data", ",", "ytest", ",", "g_test_data", ")", "\n", "", "return", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.build_predictor": [[76, 116], ["nas_lib.eigen_predictive_compare.np_nas_trainer.NasBenchGcnNnpTrainer", "nas_lib.eigen_predictive_compare.semi_nas_trainer.semi_nas_trainer", "nas_lib.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer", "nas_lib.trainer.trainer_gnn.TrainerGNN"], "function", ["None"], ["", "", "def", "build_predictor", "(", "predictor_type", ",", "train_size", ",", "params", ",", "args", ",", "load_model", ",", "load_dir", ",", "train_epochs", ",", "logger", ")", ":", "\n", "    ", "if", "predictor_type", "==", "'NP_NAS'", ":", "\n", "        ", "trainer", "=", "NasBenchGcnNnpTrainer", "(", "\n", "device", "=", "args", ".", "gpu", ",", "\n", "epochs", "=", "params", "[", "'epochs'", "]", ",", "\n", "input_dim", "=", "params", "[", "'input_dim'", "]", ",", "\n", "params", "=", "params", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "return", "trainer", "\n", "", "elif", "predictor_type", "==", "'SemiNAS'", ":", "\n", "        ", "trainer", "=", "semi_nas_trainer", "(", "params", "=", "params", ",", "\n", "args", "=", "args", ",", "\n", "logger", "=", "logger", ")", "\n", "return", "trainer", "\n", "", "elif", "predictor_type", "==", "'MLP'", ":", "\n", "        ", "trainer", "=", "MetaNeuralnetTrainer", "(", "\n", "in_channel", "=", "params", "[", "'in_channel'", "]", ",", "\n", "num_layer", "=", "params", "[", "'num_layers'", "]", ",", "\n", "layer_width", "=", "params", "[", "'layer_width'", "]", ",", "\n", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "regularization", "=", "params", "[", "'regularization'", "]", ",", "\n", "epochs", "=", "params", "[", "'epochs'", "]", ",", "\n", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "\n", "gpu", "=", "args", ".", "gpu", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "return", "trainer", "\n", "", "else", ":", "\n", "        ", "return", "TrainerGNN", "(", "gpu", "=", "args", ".", "gpu", ",", "\n", "nas_benchmark", "=", "args", ".", "search_space", ",", "\n", "predictor_type", "=", "predictor_type", ",", "\n", "epoch_img_size", "=", "train_size", ",", "\n", "load_model", "=", "load_model", ",", "\n", "model_path", "=", "load_dir", ",", "\n", "save_path", "=", "args", ".", "save_dir", ",", "\n", "epochs", "=", "train_epochs", ",", "\n", "with_g_func", "=", "args", ".", "with_g_func", ",", "\n", "logger", "=", "logger", ",", "\n", "**", "params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.__init__": [[21, 54], ["torch.device", "torch.nn.MSELoss", "trainer_gnn.TrainerGNN._get_predicotr", "utils.utils_solver.make_agent_optimizer", "trainer_gnn.TrainerGNN.predictor.to", "utils.utils_solver.CosineLR", "functools.partial", "nas_lib.utils.utils_model.get_temp_model", "nas_lib.utils.utils_model.load_modify_model", "logger.info", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "trainer_gnn.TrainerGNN.predictor.fc.bias.data.zero_", "nas_lib.utils.utils_model.load_predictor_ged_moco_v2", "logger.info"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN._get_predicotr", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.get_temp_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_modify_model", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_model.load_predictor_ged_moco_v2", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ",", "nas_benchmark", ",", "predictor_type", ",", "lr", ",", "epochs", ",", "batch_size", ",", "input_dim", ",", "epoch_img_size", ",", "\n", "load_model", ",", "model_path", ",", "save_path", ",", "save_model", "=", "False", ",", "with_g_func", "=", "True", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "nas_benchmark", "=", "nas_benchmark", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{gpu}'", ")", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "predictor", "=", "self", ".", "_get_predicotr", "(", "with_g_func", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "if", "load_model", "and", "predictor_type", "==", "'SS_RL'", ":", "\n", "            ", "temp_model", "=", "get_temp_model", "(", "predictor_type", ",", "input_dim", ")", "\n", "self", ".", "predictor", "=", "load_modify_model", "(", "self", ".", "predictor", ",", "temp_model", ",", "model_path", ")", "\n", "logger", ".", "info", "(", "f'load model {predictor_type}'", ")", "\n", "del", "temp_model", "\n", "self", ".", "lr", "*=", "0.1", "\n", "", "elif", "load_model", "and", "'SS_CCL'", "in", "predictor_type", ":", "\n", "            ", "self", ".", "predictor", "=", "load_predictor_ged_moco_v2", "(", "self", ".", "predictor", ",", "model_path", ")", "\n", "logger", ".", "info", "(", "f'load model {predictor_type}'", ")", "\n", "", "if", "'SS_CCL'", "in", "predictor_type", ":", "\n", "            ", "self", ".", "predictor", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ",", "bias", "=", "True", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "predictor", ".", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "predictor", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "predictor", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "predictor", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "epoch_img_size", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "self", ".", "nas2graph_p", "=", "partial", "(", "nas2graph", ",", "nas_benchmark", ")", "\n", "self", ".", "save_dir", "=", "save_path", "\n", "self", ".", "save_model", "=", "save_model", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit": [[55, 89], ["trainer_gnn.TrainerGNN.fit_train", "trainer_gnn.TrainerGNN.pred().cpu().numpy", "trainer_gnn.TrainerGNN.pred().cpu().numpy", "numpy.mean", "numpy.mean", "trainer_gnn.TrainerGNN.nas2graph_p", "arch_data_edge_idx_list.append", "arch_data_node_f_list.append", "trainer_gnn.TrainerGNN.nas2graph_p", "candiate_edge_list.append", "candiate_node_list.append", "numpy.abs", "numpy.abs", "nas_lib.utils.comm.get_spearmanr_coorlection", "nas_lib.utils.comm.get_kendalltau_coorlection", "trainer_gnn.TrainerGNN.logger.info", "print", "trainer_gnn.TrainerGNN.pred().cpu", "trainer_gnn.TrainerGNN.pred().cpu", "trainer_gnn.TrainerGNN.tolist", "trainer_gnn.TrainerGNN.tolist", "trainer_gnn.TrainerGNN.pred", "trainer_gnn.TrainerGNN.pred"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred"], ["", "def", "fit", "(", "self", ",", "train_archs", ",", "ytrain", ",", "test_archs", ",", "ytest", ")", ":", "\n", "        ", "arch_data_edge_idx_list", "=", "[", "]", "\n", "arch_data_node_f_list", "=", "[", "]", "\n", "\n", "for", "arch", "in", "train_archs", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "self", ".", "nas2graph_p", "(", "arch", ")", "\n", "arch_data_edge_idx_list", ".", "append", "(", "edge_index", ")", "\n", "arch_data_node_f_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "candiate_edge_list", "=", "[", "]", "\n", "candiate_node_list", "=", "[", "]", "\n", "for", "cand", "in", "test_archs", ":", "\n", "            ", "edge_index", ",", "node_f", "=", "self", ".", "nas2graph_p", "(", "cand", ")", "\n", "candiate_edge_list", ".", "append", "(", "edge_index", ")", "\n", "candiate_node_list", ".", "append", "(", "node_f", ")", "\n", "\n", "", "self", ".", "fit_train", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ",", "ytrain", ")", "\n", "\n", "train_pred", "=", "self", ".", "pred", "(", "arch_data_edge_idx_list", ",", "arch_data_node_f_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_pred", "=", "self", ".", "pred", "(", "candiate_edge_list", ",", "candiate_node_list", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "train_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "test_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_pred", "-", "ytest", ")", ")", "\n", "\n", "test_spearman_corr", "=", "get_spearmanr_coorlection", "(", "test_pred", ".", "tolist", "(", ")", ",", "ytest", ")", "[", "0", "]", "\n", "test_kendalltau_corr", "=", "get_kendalltau_coorlection", "(", "test_pred", ".", "tolist", "(", ")", ",", "ytest", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Train error: {train_mean_error}, Test error: {test_mean_error}, Spearman Correlation: {test_spearman_corr}, '", "\n", "f'Kendalltau Corrlation: {test_kendalltau_corr}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Train error: {train_mean_error}, Test error: {test_mean_error}, Spearman Correlation: {test_spearman_corr}, '", "\n", "f'Kendalltau Corrlation: {test_kendalltau_corr}'", ")", "\n", "", "return", "test_spearman_corr", ",", "test_kendalltau_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_train": [[90, 128], ["utils.metric_logger.MetricLogger", "trainer_gnn.TrainerGNN.predictor.train", "time.time", "range", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx", "enumerate", "os.path.join", "range", "len", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.to.to.to", "trainer_gnn.TrainerGNN.predictor", "pred.squeeze.squeeze.squeeze", "trainer_gnn.TrainerGNN.criterion", "trainer_gnn.TrainerGNN.optimizer.zero_grad", "trainer_gnn.TrainerGNN.backward", "trainer_gnn.TrainerGNN.optimizer.step", "trainer_gnn.TrainerGNN.scheduler.step", "utils.metric_logger.MetricLogger.update", "torch.save", "len", "gnn_lib.data.Data", "data_list.append", "target_list.append", "trainer_gnn.TrainerGNN.predictor.state_dict", "trainer_gnn.TrainerGNN.item", "edge_index[].long", "node_feature[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict"], ["", "def", "fit_train", "(", "self", ",", "edge_index", ",", "node_feature", ",", "accuracy", ",", "logger", "=", "None", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "predictor", ".", "train", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "counter", "+=", "len", "(", "batch_idx", ")", "\n", "data_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "target_list", ".", "append", "(", "accuracy", "[", "idx", "]", ")", "\n", "", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# batch_nodes = F.normalize(batch_nodes, p=2, dim=-1)", "\n", "\n", "pred", "=", "self", ".", "predictor", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "val_tensor", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "# print(meters.delimiter.join(['{loss}'.format(loss=str(meters))]))", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'supervised_gin_epoch_{epoch}.pt'", ")", "\n", "if", "self", ".", "save_model", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "predictor", ".", "state_dict", "(", ")", ",", "save_dir", ")", "\n", "", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred": [[129, 149], ["list", "trainer_gnn.TrainerGNN.predictor.eval", "utils.utils_solver.gen_batch_idx", "torch.cat", "range", "torch.no_grad", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "trainer_gnn.TrainerGNN.predictor().squeeze", "pred_list.append", "gnn_lib.data.Data", "data_list.append", "len", "trainer_gnn.TrainerGNN.unsqueeze_", "trainer_gnn.TrainerGNN.predictor", "trainer_gnn.TrainerGNN.size", "edge_index[].long", "node_feature[].float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["", "def", "pred", "(", "self", ",", "edge_index", ",", "node_feature", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "edge_index", ")", ")", ")", "\n", "self", ".", "predictor", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "64", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "batch_idx", ":", "\n", "                    ", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx", "]", ".", "float", "(", ")", ")", "\n", "data_list", ".", "append", "(", "g_d", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "pred", "=", "self", ".", "predictor", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_g": [[150, 172], ["time.time", "trainer_gnn.TrainerGNN.fit_train_g_data", "trainer_gnn.TrainerGNN.pred_g_data().cpu().numpy", "trainer_gnn.TrainerGNN.pred_g_data().cpu().numpy", "numpy.mean", "numpy.mean", "time.time", "numpy.abs", "numpy.abs", "nas_lib.utils.comm.get_spearmanr_coorlection", "nas_lib.utils.comm.get_kendalltau_coorlection", "trainer_gnn.TrainerGNN.logger.info", "print", "trainer_gnn.TrainerGNN.pred_g_data().cpu", "trainer_gnn.TrainerGNN.pred_g_data().cpu", "trainer_gnn.TrainerGNN.tolist", "trainer_gnn.TrainerGNN.tolist", "trainer_gnn.TrainerGNN.pred_g_data", "trainer_gnn.TrainerGNN.pred_g_data"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_train_g_data", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_spearmanr_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.get_kendalltau_coorlection", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred_g_data", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred_g_data"], ["", "def", "fit_g", "(", "self", ",", "ytrain", ",", "g_train_data", ",", "ytest", ",", "g_test_data", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "fit_train_g_data", "(", "g_train_data", ",", "ytrain", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "train_pred", "=", "self", ".", "pred_g_data", "(", "g_train_data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_pred", "=", "self", ".", "pred_g_data", "(", "g_test_data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "train_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_pred", "-", "ytrain", ")", ")", "\n", "test_mean_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_pred", "-", "ytest", ")", ")", "\n", "\n", "test_spearman_corr", "=", "get_spearmanr_coorlection", "(", "test_pred", ".", "tolist", "(", ")", ",", "ytest", ")", "[", "0", "]", "\n", "test_kendalltau_corr", "=", "get_kendalltau_coorlection", "(", "test_pred", ".", "tolist", "(", ")", ",", "ytest", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Training time cost: {duration}, Train error: {train_mean_error}, '", "\n", "f'Test error: {test_mean_error}, Spearman Correlation: {test_spearman_corr}, '", "\n", "f'Kendalltau Corrlation: {test_kendalltau_corr}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Training time cost: {duration}, Train error: {train_mean_error}, Test error: {test_mean_error}, '", "\n", "f'Spearman Correlation: {test_spearman_corr}, '", "\n", "f'Kendalltau Corrlation: {test_kendalltau_corr}'", ")", "\n", "", "return", "test_spearman_corr", ",", "test_kendalltau_corr", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.fit_train_g_data": [[173, 205], ["utils.metric_logger.MetricLogger", "trainer_gnn.TrainerGNN.predictor.train", "range", "list", "random.shuffle", "utils.utils_solver.gen_batch_idx", "enumerate", "os.path.join", "range", "len", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "val_tensor.to.to.to", "trainer_gnn.TrainerGNN.predictor", "pred.squeeze.squeeze.squeeze", "trainer_gnn.TrainerGNN.criterion", "trainer_gnn.TrainerGNN.optimizer.zero_grad", "trainer_gnn.TrainerGNN.backward", "trainer_gnn.TrainerGNN.optimizer.step", "trainer_gnn.TrainerGNN.scheduler.step", "utils.metric_logger.MetricLogger.update", "torch.save", "len", "trainer_gnn.TrainerGNN.predictor.state_dict", "trainer_gnn.TrainerGNN.item"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict"], ["", "def", "fit_train_g_data", "(", "self", ",", "g_data", ",", "accuracy", ",", "logger", "=", "None", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "predictor", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "idx_list", "=", "list", "(", "range", "(", "len", "(", "g_data", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_idx_list", ")", ":", "\n", "                ", "counter", "+=", "len", "(", "batch_idx", ")", "\n", "data_list", "=", "[", "g_data", "[", "id", "]", "for", "id", "in", "batch_idx", "]", "\n", "target_list", "=", "[", "accuracy", "[", "id", "]", "for", "id", "in", "batch_idx", "]", "\n", "val_tensor", "=", "torch", ".", "tensor", "(", "target_list", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "val_tensor", "=", "val_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "# batch_nodes = F.normalize(batch_nodes, p=2, dim=-1)", "\n", "\n", "pred", "=", "self", ".", "predictor", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "val_tensor", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'supervised_gin_epoch_{epoch}.pt'", ")", "\n", "if", "self", ".", "save_model", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "predictor", ".", "state_dict", "(", ")", ",", "save_dir", ")", "\n", "", "", "return", "meters", ".", "meters", "[", "'loss'", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN.pred_g_data": [[206, 222], ["list", "trainer_gnn.TrainerGNN.predictor.eval", "utils.utils_solver.gen_batch_idx", "torch.cat", "range", "torch.no_grad", "len", "gnn_lib.data.Batch.from_data_list", "batch.to.to.to", "trainer_gnn.TrainerGNN.predictor().squeeze", "pred_list.append", "len", "trainer_gnn.TrainerGNN.unsqueeze_", "trainer_gnn.TrainerGNN.predictor", "trainer_gnn.TrainerGNN.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.utils.gen_batch_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["", "def", "pred_g_data", "(", "self", ",", "g_data", ")", ":", "\n", "        ", "pred_list", "=", "[", "]", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "g_data", ")", ")", ")", "\n", "self", ".", "predictor", ".", "eval", "(", ")", "\n", "batch_idx_list", "=", "gen_batch_idx", "(", "idx_list", ",", "64", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", "in", "batch_idx_list", ":", "\n", "                ", "data_list", "=", "[", "g_data", "[", "idx", "]", "for", "idx", "in", "batch_idx", "]", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", "=", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "batch", ".", "batch", "\n", "pred", "=", "self", ".", "predictor", "(", "batch_nodes", ",", "batch_edge_idx", ",", "batch_idx", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "0", ":", "\n", "                    ", "pred", ".", "unsqueeze_", "(", "0", ")", "\n", "", "pred_list", ".", "append", "(", "pred", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn.TrainerGNN._get_predicotr": [[223, 231], ["nas_lib.predictor_retrain_compare.predictor_gin_rl.PredictorGINRL", "nas_lib.predictor_retrain_compare.predictor_gin_ccl.PredictorGINCCL", "NotImplementedError"], "methods", ["None"], ["", "def", "_get_predicotr", "(", "self", ",", "with_g_func", ")", ":", "\n", "        ", "if", "self", ".", "predictor_type", "==", "'SS_RL'", "or", "'SS_RL'", "in", "self", ".", "predictor_type", ":", "\n", "            ", "predictor", "=", "PredictorGINRL", "(", "input_dim", "=", "self", ".", "input_dim", ")", "\n", "", "elif", "'SS_CCL'", "in", "self", ".", "predictor_type", ":", "\n", "            ", "predictor", "=", "PredictorGINCCL", "(", "input_dim", "=", "self", ".", "input_dim", ",", "reTrain", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'The predictor type {self.predictor_type} have implement yet!'", ")", "\n", "", "return", "predictor", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.__init__": [[19, 44], ["torch.device", "nas_lib.utils.utils_data.get_node_num", "nas_lib.utils.utils_data.get_node_num", "nas_lib.utils.utils_data.get_ops_list", "nas_lib.predictors.predictor_unsupervised_siamese_ged.PredictorSiameseGED", "utils.utils_solver.make_agent_optimizer", "trainer_gnn_embedding.TrainerGED.predictor.to", "utils.utils_solver.CosineLR", "functools.partial", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_node_num", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.get_ops_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.np_nas_trainer.make_agent_optimizer", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ",", "nas_benchmark", ",", "predictor_type", ",", "lr", ",", "epochs", ",", "batch_size", ",", "input_dim", ",", "epoch_img_size", ",", "\n", "model_save_dir", ",", "ratio", "=", "None", ",", "full_train", "=", "False", ",", "save_model", "=", "True", ",", "logger", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "nas_benchmark", "=", "nas_benchmark", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{gpu}'", ")", "\n", "self", ".", "predictor_type", "=", "predictor_type", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "node_num", "=", "get_node_num", "(", "nas_benchmark", ")", "\n", "self", ".", "node_type_num", "=", "get_node_num", "(", "nas_benchmark", ")", "\n", "self", ".", "ops_list", "=", "get_ops_list", "(", "nas_benchmark", ")", "\n", "self", ".", "predictor", "=", "PredictorSiameseGED", "(", "input_dim", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "make_agent_optimizer", "(", "self", ".", "predictor", ",", "base_lr", "=", "lr", ",", "weight_deacy", "=", "1e-4", ",", "bias_multiply", "=", "True", ")", "\n", "self", ".", "predictor", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "scheduler", "=", "CosineLR", "(", "self", ".", "optimizer", ",", "epochs", "=", "epochs", ",", "train_images", "=", "epoch_img_size", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epochs", "\n", "self", ".", "nas2graph_p", "=", "partial", "(", "nas2graph", ",", "nas_benchmark", ")", "\n", "self", ".", "save_dir", "=", "model_save_dir", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "full_train", "=", "full_train", "\n", "self", ".", "save_model", "=", "save_model", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit": [[45, 58], ["trainer_gnn_embedding.TrainerGED._split_dataset", "range", "trainer_gnn_embedding.TrainerGED.logger.info", "print", "trainer_gnn_embedding.TrainerGED.fit_full_train", "trainer_gnn_embedding.TrainerGED.fit_train"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED._split_dataset", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_full_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_train"], ["", "def", "fit", "(", "self", ",", "total_archs", ")", ":", "\n", "        ", "train_g_data", ",", "train_encoding", "=", "self", ".", "_split_dataset", "(", "total_archs", ")", "\n", "\n", "for", "e", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "f'epoch {e} begin'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'epoch {e} begin'", ")", "\n", "\n", "", "if", "self", ".", "full_train", ":", "\n", "                ", "self", ".", "fit_full_train", "(", "train_g_data", ",", "train_encoding", ",", "e", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fit_train", "(", "train_g_data", ",", "train_encoding", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_train": [[59, 133], ["utils.metric_logger.MetricLogger", "trainer_gnn_embedding.TrainerGED.predictor.train", "list", "list", "random.shuffle", "random.shuffle", "utils.utils_solver.gen_batch_idx_gen", "utils.utils_solver.gen_batch_idx_gen", "enumerate", "os.path.join", "range", "list", "list", "list.extend", "list.extend", "list", "random.shuffle", "zip", "len", "zip", "gnn_lib.data.Batch.from_data_list", "batch1.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch2.to.to.to", "torch.tensor.to", "trainer_gnn_embedding.TrainerGED.predictor", "prediction.squeeze.squeeze.squeeze", "trainer_gnn_embedding.TrainerGED.criterion", "trainer_gnn_embedding.TrainerGED.optimizer.zero_grad", "trainer_gnn_embedding.TrainerGED.backward", "trainer_gnn_embedding.TrainerGED.optimizer.step", "trainer_gnn_embedding.TrainerGED.scheduler.step", "utils.metric_logger.MetricLogger.update", "torch.save", "trainer_gnn_embedding.TrainerGED.logger.info", "print", "len", "range", "range", "range", "data_list_pair1.append", "arch_path_encoding_pair1.append", "data_list_pair2.append", "arch_path_encoding_pair2.append", "torch.tensor", "trainer_gnn_embedding.TrainerGED.predictor.state_dict", "utils.metric_logger.MetricLogger.delimiter.join", "utils.metric_logger.MetricLogger.delimiter.join", "len", "len", "len", "torch.tensor", "ValueError", "trainer_gnn_embedding.TrainerGED.item", "nas_lib.utils.utils_data.edit_distance_normalization", "range", "nas_lib.utils.utils_data.edit_distance", "len", "range", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx_gen", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_solver.gen_batch_idx_gen", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.edit_distance_normalization", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.edit_distance"], ["", "", "", "def", "fit_train", "(", "self", ",", "train_g_data_list", ",", "arch_encoding", ",", "epoch", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "predictor", ".", "train", "(", ")", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "train_g_data_list", ")", ")", ")", "\n", "idx_list2", "=", "list", "(", "idx_list", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "random", ".", "shuffle", "(", "idx_list2", ")", "\n", "if", "self", ".", "args", "and", "self", ".", "args", ".", "add_corresponding", ":", "\n", "            ", "idx", "=", "list", "(", "range", "(", "len", "(", "train_g_data_list", ")", ")", ")", "\n", "idx2", "=", "list", "(", "range", "(", "len", "(", "train_g_data_list", ")", ")", ")", "\n", "idx_list", ".", "extend", "(", "idx", ")", "\n", "idx_list2", ".", "extend", "(", "idx2", ")", "\n", "indices_list", "=", "list", "(", "range", "(", "len", "(", "idx_list", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices_list", ")", "\n", "idx_list", "=", "[", "idx_list", "[", "i", "]", "for", "i", "in", "indices_list", "]", "\n", "idx_list2", "=", "[", "idx_list2", "[", "i", "]", "for", "i", "in", "indices_list", "]", "\n", "", "batch_idx_list_1", "=", "gen_batch_idx_gen", "(", "idx_list", ",", "self", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "batch_idx_list_2", "=", "gen_batch_idx_gen", "(", "idx_list2", ",", "self", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "(", "pair1_idx", ",", "pair2_idx", ")", "in", "enumerate", "(", "zip", "(", "batch_idx_list_1", ",", "batch_idx_list_2", ")", ")", ":", "\n", "            ", "counter", "+=", "len", "(", "pair1_idx", ")", "\n", "data_list_pair1", "=", "[", "]", "\n", "arch_path_encoding_pair1", "=", "[", "]", "\n", "\n", "data_list_pair2", "=", "[", "]", "\n", "arch_path_encoding_pair2", "=", "[", "]", "\n", "\n", "for", "pair_idx", "in", "zip", "(", "pair1_idx", ",", "pair2_idx", ")", ":", "\n", "                ", "idx1", ",", "idx2", "=", "pair_idx", "\n", "g_d_1", "=", "train_g_data_list", "[", "idx1", "]", "\n", "data_list_pair1", ".", "append", "(", "g_d_1", ")", "\n", "arch_path_encoding_pair1", ".", "append", "(", "arch_encoding", "[", "idx1", "]", ")", "\n", "\n", "g_d_2", "=", "train_g_data_list", "[", "idx2", "]", "\n", "data_list_pair2", ".", "append", "(", "g_d_2", ")", "\n", "arch_path_encoding_pair2", ".", "append", "(", "arch_encoding", "[", "idx2", "]", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "ged_type", "==", "'normalized'", ":", "\n", "                ", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance_normalization", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "\n", "arch_path_encoding_pair2", "[", "i", "]", ",", "self", ".", "node_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "elif", "self", ".", "args", ".", "ged_type", "==", "'wo_normalized'", ":", "\n", "                ", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "\n", "arch_path_encoding_pair2", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'The ged type {self.args.ged_type} does not support!'", ")", "\n", "", "batch1", "=", "Batch", ".", "from_data_list", "(", "data_list_pair1", ")", "\n", "batch1", "=", "batch1", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch2", "=", "Batch", ".", "from_data_list", "(", "data_list_pair2", ")", "\n", "batch2", "=", "batch2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dist_gt", "=", "dist_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", "=", "batch1", ".", "x", ",", "batch1", ".", "edge_index", ",", "batch1", ".", "batch", "\n", "batch_nodes_2", ",", "batch_edge_idx_2", ",", "batch_idx_2", "=", "batch2", ".", "x", ",", "batch2", ".", "edge_index", ",", "batch2", ".", "batch", "\n", "prediction", "=", "self", ".", "predictor", "(", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", ",", "batch_nodes_2", ",", "\n", "batch_edge_idx_2", ",", "batch_idx_2", ")", "\n", "prediction", "=", "prediction", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "prediction", ",", "dist_gt", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'unsupervised_ss_rl_epoch_{epoch}.pt'", ")", "\n", "if", "self", ".", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "predictor", ".", "state_dict", "(", ")", ",", "save_dir", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.fit_full_train": [[134, 193], ["utils.metric_logger.MetricLogger", "trainer_gnn_embedding.TrainerGED.predictor.train", "list", "nas_lib.predictors_compare.BRP_NAS.utils.ProductList", "torch.utils.data.DataLoader", "enumerate", "os.path.join", "range", "v[].cpu().numpy", "v[].cpu().numpy", "len", "zip", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch1.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch2.to.to.to", "dist_gt.to.to.to", "trainer_gnn_embedding.TrainerGED.predictor", "prediction.squeeze.squeeze.squeeze", "trainer_gnn_embedding.TrainerGED.criterion", "trainer_gnn_embedding.TrainerGED.optimizer.zero_grad", "trainer_gnn_embedding.TrainerGED.backward", "trainer_gnn_embedding.TrainerGED.optimizer.step", "trainer_gnn_embedding.TrainerGED.scheduler.step", "utils.metric_logger.MetricLogger.update", "torch.save", "trainer_gnn_embedding.TrainerGED.logger.info", "print", "len", "data_list_pair1.append", "arch_path_encoding_pair1.append", "data_list_pair2.append", "arch_path_encoding_pair2.append", "trainer_gnn_embedding.TrainerGED.predictor.state_dict", "utils.metric_logger.MetricLogger.delimiter.join", "utils.metric_logger.MetricLogger.delimiter.join", "v[].cpu", "v[].cpu", "nas_lib.utils.utils_data.edit_distance_normalization", "trainer_gnn_embedding.TrainerGED.item", "range", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.eigen_predictive_compare.mlp_trainer.MetaNeuralnetTrainer.train", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.layers.gaussian_function.GaussianFunction.backward", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.BRP_NAS.utils.EarlyStopping.step", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.edit_distance_normalization"], ["", "", "def", "fit_full_train", "(", "self", ",", "train_g_data_list", ",", "arch_encoding", ",", "epoch", ")", ":", "\n", "        ", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\" \"", ")", "\n", "self", ".", "predictor", ".", "train", "(", ")", "\n", "idx_list", "=", "list", "(", "range", "(", "len", "(", "train_g_data_list", ")", ")", ")", "\n", "idx_dataset", "=", "ProductList", "(", "idx_list", ")", "\n", "training_data", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "idx_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "counter", "=", "0", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "training_data", ")", ":", "\n", "            ", "pair1_idx", "=", "v", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pair2_idx", "=", "v", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "counter", "+=", "len", "(", "pair1_idx", ")", "\n", "data_list_pair1", "=", "[", "]", "\n", "arch_path_encoding_pair1", "=", "[", "]", "\n", "\n", "data_list_pair2", "=", "[", "]", "\n", "arch_path_encoding_pair2", "=", "[", "]", "\n", "\n", "for", "pair_idx", "in", "zip", "(", "pair1_idx", ",", "pair2_idx", ")", ":", "\n", "                ", "idx1", ",", "idx2", "=", "pair_idx", "\n", "g_d_1", "=", "train_g_data_list", "[", "idx1", "]", "\n", "data_list_pair1", ".", "append", "(", "g_d_1", ")", "\n", "arch_path_encoding_pair1", ".", "append", "(", "arch_encoding", "[", "idx1", "]", ")", "\n", "\n", "g_d_2", "=", "train_g_data_list", "[", "idx2", "]", "\n", "data_list_pair2", ".", "append", "(", "g_d_2", ")", "\n", "arch_path_encoding_pair2", ".", "append", "(", "arch_encoding", "[", "idx2", "]", ")", "\n", "\n", "", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance_normalization", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "\n", "arch_path_encoding_pair2", "[", "i", "]", ",", "self", ".", "node_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch1", "=", "Batch", ".", "from_data_list", "(", "data_list_pair1", ")", "\n", "batch1", "=", "batch1", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch2", "=", "Batch", ".", "from_data_list", "(", "data_list_pair2", ")", "\n", "batch2", "=", "batch2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dist_gt", "=", "dist_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", "=", "batch1", ".", "x", ",", "batch1", ".", "edge_index", ",", "batch1", ".", "batch", "\n", "batch_nodes_2", ",", "batch_edge_idx_2", ",", "batch_idx_2", "=", "batch2", ".", "x", ",", "batch2", ".", "edge_index", ",", "batch2", ".", "batch", "\n", "prediction", "=", "self", ".", "predictor", "(", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", ",", "batch_nodes_2", ",", "\n", "batch_edge_idx_2", ",", "batch_idx_2", ")", "\n", "prediction", "=", "prediction", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "prediction", ",", "dist_gt", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'unsupervised_ss_rl_epoch_{epoch}.pt'", ")", "\n", "if", "self", ".", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "predictor", ".", "state_dict", "(", ")", ",", "save_dir", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "meters", ".", "delimiter", ".", "join", "(", "[", "'{loss}'", ".", "format", "(", "loss", "=", "str", "(", "meters", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED.inference": [[194, 240], ["trainer_gnn_embedding.TrainerGED.predictor.eval", "enumerate", "zip", "torch.tensor", "gnn_lib.data.Batch.from_data_list", "batch1.to.to.to", "gnn_lib.data.Batch.from_data_list", "batch2.to.to.to", "dist_gt.to.to.to", "trainer_gnn_embedding.TrainerGED.predictor", "torch.abs", "error_list.append", "precision_list.append", "trainer_gnn_embedding.TrainerGED.logger.info", "print", "gnn_lib.data.Data", "data_list_pair1.append", "arch_path_encoding_pair1.append", "gnn_lib.data.Data", "data_list_pair2.append", "arch_path_encoding_pair2.append", "torch.abs.size", "torch.mean().item", "precision.item", "nas_lib.utils.utils_data.edit_distance", "torch.log", "torch.sum", "edge_index[].long", "node_feature[].float", "edge_index[].long", "node_feature[].float", "range", "trainer_gnn_embedding.TrainerGED.squeeze", "torch.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.edit_distance"], ["", "", "def", "inference", "(", "self", ",", "edge_index", ",", "node_feature", ",", "arch_encoding", ",", "batch_idx_test_1", ",", "batch_idx_test_2", ")", ":", "\n", "        ", "self", ".", "predictor", ".", "eval", "(", ")", "\n", "error_list", "=", "[", "]", "\n", "precision_list", "=", "[", "]", "\n", "for", "i", ",", "pair1_idx", "in", "enumerate", "(", "batch_idx_test_1", ")", ":", "\n", "            ", "pair2_idx", "=", "batch_idx_test_2", "[", "i", "]", "\n", "data_list_pair1", "=", "[", "]", "\n", "arch_path_encoding_pair1", "=", "[", "]", "\n", "\n", "data_list_pair2", "=", "[", "]", "\n", "arch_path_encoding_pair2", "=", "[", "]", "\n", "\n", "for", "pair_idx", "in", "zip", "(", "pair1_idx", ",", "pair2_idx", ")", ":", "\n", "                ", "idx1", ",", "idx2", "=", "pair_idx", "\n", "g_d_1", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx1", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx1", "]", ".", "float", "(", ")", ")", "\n", "data_list_pair1", ".", "append", "(", "g_d_1", ")", "\n", "arch_path_encoding_pair1", ".", "append", "(", "arch_encoding", "[", "idx1", "]", ")", "\n", "\n", "g_d_2", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "idx2", "]", ".", "long", "(", ")", ",", "x", "=", "node_feature", "[", "idx2", "]", ".", "float", "(", ")", ")", "\n", "data_list_pair2", ".", "append", "(", "g_d_2", ")", "\n", "arch_path_encoding_pair2", ".", "append", "(", "arch_encoding", "[", "idx2", "]", ")", "\n", "\n", "", "dist_gt", "=", "torch", ".", "tensor", "(", "[", "edit_distance", "(", "arch_path_encoding_pair1", "[", "i", "]", ",", "arch_path_encoding_pair2", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "arch_path_encoding_pair1", ")", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "batch1", "=", "Batch", ".", "from_data_list", "(", "data_list_pair1", ")", "\n", "batch1", "=", "batch1", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch2", "=", "Batch", ".", "from_data_list", "(", "data_list_pair2", ")", "\n", "batch2", "=", "batch2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dist_gt", "=", "dist_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", "=", "batch1", ".", "x", ",", "batch1", ".", "edge_index", ",", "batch1", ".", "batch", "\n", "batch_nodes_2", ",", "batch_edge_idx_2", ",", "batch_idx_2", "=", "batch2", ".", "x", ",", "batch2", ".", "edge_index", ",", "batch2", ".", "batch", "\n", "prediction", "=", "self", ".", "predictor", "(", "batch_nodes_1", ",", "batch_edge_idx_1", ",", "batch_idx_1", ",", "batch_nodes_2", ",", "\n", "batch_edge_idx_2", ",", "batch_idx_2", ")", "\n", "prediction", "=", "-", "1", "*", "torch", ".", "log", "(", "prediction", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ")", "*", "self", ".", "node_num", "\n", "\n", "errors", "=", "torch", ".", "abs", "(", "dist_gt", "-", "prediction", ")", "\n", "precision", "=", "(", "torch", ".", "sum", "(", "errors", "<", "1", ")", "*", "1.", ")", "/", "errors", ".", "size", "(", "0", ")", "\n", "error_list", ".", "append", "(", "torch", ".", "mean", "(", "errors", ")", ".", "item", "(", ")", ")", "\n", "precision_list", ".", "append", "(", "precision", ".", "item", "(", ")", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Error is {np.mean(np.array(error_list))}, Precision is {np.mean(np.array(precision_list))}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Error is {np.mean(np.array(error_list))}, Precision is {np.mean(np.array(precision_list))}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED._verify_node_nums": [[241, 247], ["print", "ValueError"], "methods", ["None"], ["", "", "def", "_verify_node_nums", "(", "self", ",", "node_feature_list", ")", ":", "\n", "        ", "node_nums", "=", "node_feature_list", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "node", "in", "node_feature_list", ":", "\n", "            ", "if", "node", ".", "shape", "[", "0", "]", "!=", "node_nums", ":", "\n", "                ", "print", "(", "node", ")", "\n", "raise", "ValueError", "(", "'The node num is incorrect!!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_gnn_embedding.TrainerGED._split_dataset": [[248, 257], ["int", "len"], "methods", ["None"], ["", "", "", "def", "_split_dataset", "(", "self", ",", "total_archs", ")", ":", "\n", "        ", "if", "self", ".", "ratio", ":", "\n", "            ", "train_nums", "=", "int", "(", "self", ".", "ratio", "*", "len", "(", "total_archs", ")", ")", "\n", "train_arch_g_data_list", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "total_archs", "[", ":", "train_nums", "]", "]", "\n", "train_path_encoding", "=", "[", "arch", "[", "1", "]", "for", "arch", "in", "total_archs", "[", ":", "train_nums", "]", "]", "\n", "", "else", ":", "\n", "            ", "train_arch_g_data_list", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "total_archs", "]", "\n", "train_path_encoding", "=", "[", "arch", "[", "1", "]", "for", "arch", "in", "total_archs", "]", "\n", "", "return", "train_arch_g_data_list", ",", "train_path_encoding", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.__init__": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "matrix_orig", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "matrix_orig", "=", "matrix_orig", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.serialize": [[26, 30], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.modelspec": [[32, 34], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.random_cell": [[35, 53], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.random_cell_gnn": [[55, 78], ["numpy.random.choice", "numpy.triu", "numpy.triu.copy", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "matrix_orig", "=", "matrix", ".", "copy", "(", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "matrix_orig", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.get_val_loss": [[80, 94], ["round", "len", "nasbench.query", "accs.append", "nasbench.query", "nas_lib.ModelSpec", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "", "", "def", "get_val_loss", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "1", "-", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.get_test_loss": [[95, 107], ["round", "len", "nasbench.query", "accs.append", "nas_lib.ModelSpec", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "", "def", "get_test_loss", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.perturb": [[108, 132], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        create new perturbed cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.mutate": [[134, 160], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "def", "mutate", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.mutate_gvae": [[162, 190], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.utils.utils_data.find_isolate_node", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_gvae", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "isolate_nodes", "=", "find_isolate_node", "(", "new_matrix", ")", "\n", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.encode_cell": [[192, 209], ["numpy.zeros", "range", "range", "tuple", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "", "", "def", "encode_cell", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "# dic = {CONV1X1: 0., CONV3X3: 0.5, MAXPOOL3X3: 1.0}", "\n", "dic", "=", "{", "CONV1X1", ":", "0.", ",", "CONV3X3", ":", "0.3", ",", "MAXPOOL3X3", ":", "0.6", ",", "'isolate'", ":", "1.0", "}", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "encoding", "[", "-", "i", "]", "=", "dic", "[", "self", ".", "ops", "[", "i", "]", "]", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.get_paths": [[210, 225], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.get_path_indices": [[226, 245], ["nasbench_101_cell_both.CellM.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.encode_paths": [[246, 254], ["sum", "nasbench_101_cell_both.CellM.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.path_distance": [[255, 261], ["numpy.sum", "numpy.array", "nasbench_101_cell_both.CellM.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell_both.CellM.edit_distance": [[262, 270], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset._RepeatSampler.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset._RepeatSampler.__iter__": [[17, 20], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.FastDataLoader.__init__": [[24, 28], ["super().__init__", "object.__setattr__", "super().__iter__", "cifar10_dataset._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.FastDataLoader.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.FastDataLoader.__iter__": [[32, 35], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.Cutout.__init__": [[113, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.Cutout.__call__": [[116, 132], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.get_cifar10_train_and_val_loader": [[52, 71], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len", "list", "int", "cifar10_dataset.FastDataLoader", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "range", "numpy.floor", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_and_val_loader", "(", "root_path", ",", "train_portion", "=", "0.7", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "num_train", "=", "len", "(", "train_set", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ")", "\n", "val_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.get_cifar10_train_loader": [[73, 86], ["cifar10_dataset.Cifar10Train", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "trainset", "=", "Cifar10Train", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "trainloader", "=", "FastDataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.get_cifar10_val_loader": [[88, 98], ["cifar10_dataset.Cifar10Val", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_val_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "valset", "=", "Cifar10Val", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "valloader", "=", "FastDataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "valloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.get_cifar10_test_loader": [[100, 110], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "cifar10_dataset.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "FastDataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset.transforms_cifar10": [[134, 152], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "cifar10_dataset.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "transforms_cifar10", "(", "cutout", ",", "cutout_length", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_init.gen_random_darts_models": [[15, 17], ["nas_lib.data.darts_api.arch_darts.ArchDarts().generate_normal_archs", "nas_lib.data.darts_api.arch_darts.ArchDarts"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.generate_normal_archs"], ["def", "gen_random_darts_models", "(", "save_path", ")", ":", "\n", "    ", "ArchDarts", "(", "None", ")", ".", "generate_normal_archs", "(", "save_path", "=", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_init.gen_darts_dataset": [[19, 71], ["nas_lib.data.darts.DataSetDarts", "os.path.join", "zip", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "tools_darts.gen_darts_archs.convert_genotype_form", "nas_lib.data.darts_api.arch_darts.ArchDarts", "nas_lib.data.darts_api.arch_darts.ArchDarts.get_path", "nas_lib.data.darts_api.arch_darts.ArchDarts.get_path", "nas_lib.data.darts_api.arch_darts.ArchDarts.get_path", "nas_lib.data.darts.DataSetDarts.assemble_graph_from_single_arch", "nas_lib.utils.utils_darts.nasbench2graph2", "nas_lib.utils.utils_darts.nasbench2graph2", "all_archs.append", "open", "pickle.dump", "pickle.dump", "f.endswith", "print", "len", "gnn_lib.data.Data", "gnn_lib.data.Data", "len", "len", "edge_indices.long", "node_features.float", "edge_reverse_indices.long", "node_reverse_features.float"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.tools_darts.gen_darts_archs.convert_genotype_form", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph_from_single_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2", "home.repos.pwc.inspect_result.auroua_SSNENAS.models_darts.darts_graph.nasbench2graph2"], ["", "def", "gen_darts_dataset", "(", "base_path", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "f", ".", "endswith", "(", "'txt'", ")", "]", "\n", "all_archs", "=", "[", "]", "\n", "darts_dataset", "=", "DataSetDarts", "(", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "with", "open", "(", "f", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "genotype_list", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "keys_list", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "", "for", "(", "genotype", ",", "key", ")", "in", "zip", "(", "genotype_list", ",", "keys_list", ")", ":", "\n", "            ", "if", "len", "(", "all_archs", ")", "%", "10000", "==", "0", "and", "len", "(", "all_archs", ")", "!=", "0", ":", "\n", "                ", "print", "(", "f'{len(all_archs)} have processed!'", ")", "\n", "", "f_new", "=", "convert_genotype_form", "(", "genotype", ",", "OPS", ")", "\n", "arch", "=", "(", "f_new", ".", "normal", ",", "f_new", ".", "reduce", ")", "\n", "arch_darts", "=", "ArchDarts", "(", "arch", ")", "\n", "path_encoding_position_aware", "=", "arch_darts", ".", "get_path", "(", "\n", "path_type", "=", "'path_enc_aware_vec'", ",", "\n", "seq_len", "=", "612", "\n", ")", "\n", "path_encoding", "=", "arch_darts", ".", "get_path", "(", "\n", "path_type", "=", "'path_enc_vec'", ",", "\n", "seq_len", "=", "612", "\n", ")", "\n", "path_adj_encoding", "=", "arch_darts", ".", "get_path", "(", "\n", "path_type", "=", "'adj_enc_vec'", ",", "\n", "seq_len", "=", "612", "\n", ")", "\n", "\n", "matrix", ",", "ops", "=", "darts_dataset", ".", "assemble_graph_from_single_arch", "(", "arch", ")", "\n", "edge_indices", ",", "node_features", "=", "nasbench2graph2", "(", "(", "matrix", ",", "ops", ")", ")", "\n", "edge_reverse_indices", ",", "node_reverse_features", "=", "nasbench2graph2", "(", "(", "matrix", ",", "ops", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "all_archs", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'pe_adj_enc_vec'", ":", "path_adj_encoding", ",", "\n", "'pe_path_enc_vec'", ":", "path_encoding", ",", "\n", "'pe_path_enc_aware_vec'", ":", "path_encoding_position_aware", ",", "\n", "'hash_key'", ":", "key", ",", "\n", "'genotype'", ":", "genotype", ",", "\n", "'edge_idx'", ":", "edge_indices", ",", "\n", "'node_f'", ":", "node_features", ",", "\n", "'g_data'", ":", "Data", "(", "edge_index", "=", "edge_indices", ".", "long", "(", ")", ",", "x", "=", "node_features", ".", "float", "(", ")", ")", ",", "\n", "'edge_idx_reverse'", ":", "edge_reverse_indices", ",", "\n", "'node_f_reverse'", ":", "node_reverse_features", ",", "\n", "'g_data_reverse'", ":", "Data", "(", "edge_index", "=", "edge_reverse_indices", ".", "long", "(", ")", ",", "x", "=", "node_reverse_features", ".", "float", "(", ")", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fb", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_archs", ",", "fb", ")", "\n", "", "", "return", "all_archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_torch.NASBenche101Dataset.__init__": [[11, 16], ["torch.utils.data.Dataset.__init__", "nasbench_101_torch.NASBenche101Dataset._load_data", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset._load_data"], ["    ", "def", "__init__", "(", "self", ",", "model_type", ")", ":", "\n", "        ", "super", "(", "NASBenche101Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "total_keys", ",", "self", ".", "total_archs", "=", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "idxs", "=", "list", "(", "range", "(", "len", "(", "self", ".", "total_keys", ")", ")", ")", "\n", "self", ".", "model_type", "=", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_torch.NASBenche101Dataset.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_torch.NASBenche101Dataset.__getitem__": [[20, 38], ["nas_lib.utils.utils_data.nasbench2graph_101", "gnn_lib.data.Data", "NotImplementedError", "edge_index.long", "node_f.float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_101"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "id", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "\n", "if", "self", ".", "model_type", "==", "'moco'", ":", "\n", "            ", "arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'ops'", "]", "\n", "path_encoding", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'path_indices'", "]", "\n", "return", "arch", ",", "ops", ",", "path_encoding", "\n", "", "elif", "self", ".", "model_type", "==", "'SS_CCL'", ":", "\n", "            ", "arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'ops'", "]", "\n", "path_encoding", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "'path_indices'", "]", "\n", "\n", "edge_index", ",", "node_f", "=", "nasbench2graph_101", "(", "(", "arch", ",", "ops", ")", ",", "is_idx", "=", "True", ")", "\n", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", "\n", "return", "g_d", ",", "path_encoding", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Model type {self.model_type} does not support at present!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_torch.NASBenche101Dataset.__str__": [[39, 41], ["len"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'This dataset contains {len(self.total_keys)} architectures.'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_torch.NASBenche101Dataset._load_data": [[42, 49], ["pickle.load.items", "open", "pickle.load", "pickle.load", "numpy.array"], "methods", ["None"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "nas_bench_101_converted_file_path", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "total_keys", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "total_archs", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "", "for", "k", ",", "v", "in", "total_archs", ".", "items", "(", ")", ":", "\n", "            ", "total_archs", "[", "k", "]", "[", "'ops'", "]", "=", "np", ".", "array", "(", "[", "NASBENCH_101_OPS", "[", "op", "]", "for", "op", "in", "v", "[", "'ops'", "]", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "", "return", "total_keys", ",", "total_archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.__init__": [[26, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.serialize": [[31, 35], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.modelspec": [[37, 39], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.random_cell": [[40, 58], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.random_cell_gnn": [[60, 81], ["numpy.random.choice", "numpy.triu", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.perturb": [[83, 107], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "", "", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        create new perturbed cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.encode_cell": [[109, 127], ["numpy.zeros", "range", "range", "tuple", "range", "OPS.index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_cell", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "OPS", "=", "[", "SKIP", ",", "CONV1X1", ",", "CONV3X3", ",", "AVGPOOL3X3", ",", "ISOLATE", "]", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "*", "len", "(", "OPS", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "op_idx", "=", "OPS", ".", "index", "(", "self", ".", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "len", "(", "OPS", ")", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.get_paths": [[128, 143], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.get_path_indices": [[144, 164], ["nasbench_201_cell.Cell.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "mapping", "=", "{", "SKIP", ":", "0", ",", "CONV1X1", ":", "1", ",", "CONV3X3", ":", "2", ",", "AVGPOOL3X3", ":", "3", "}", "\n", "# mapping = {SKIP: 0, CONV1X1: 1, CONV3X3: 2, AVGPOOL3X3: 3, NONE: 4}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.encode_paths": [[165, 173], ["sum", "nasbench_201_cell.Cell.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.path_distance": [[175, 181], ["numpy.sum", "numpy.array", "nasbench_201_cell.Cell.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.edit_distance": [[182, 190], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.sort_seqs_list": [[191, 202], ["collections.defaultdict", "enumerate", "sorted", "seq_len_dict[].append", "list", "nas_lib.algos.algo_sort.quick_sort_list", "sorted_idxs.extend", "collections.defaultdict.keys", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort.quick_sort_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "sort_seqs_list", "(", "self", ",", "paths", ",", "paths_idx", ")", ":", "\n", "        ", "seq_len_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "paths", ")", ":", "\n", "            ", "seq_len_dict", "[", "len", "(", "p", ")", "]", ".", "append", "(", "idx", ")", "\n", "", "k_sorted", "=", "sorted", "(", "list", "(", "seq_len_dict", ".", "keys", "(", ")", ")", ")", "\n", "sorted_idxs", "=", "[", "]", "\n", "for", "k", "in", "k_sorted", ":", "\n", "            ", "paths_v", "=", "[", "(", "v_i", ",", "paths_idx", "[", "v_i", "]", ")", "for", "v_i", "in", "seq_len_dict", "[", "k", "]", "]", "\n", "sort_results", "=", "algo_sort", ".", "quick_sort_list", "(", "paths_v", ")", "\n", "sorted_idxs", ".", "extend", "(", "[", "k", "[", "0", "]", "for", "k", "in", "sort_results", "]", ")", "\n", "", "return", "[", "paths", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", ",", "[", "paths_idx", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.get_paths_seq_aware": [[203, 216], ["range", "range", "range", "paths.append", "paths.append", "paths_idx.append", "paths_idx.append", "enumerate", "paths[].append", "paths_idx[].append"], "methods", ["None"], ["", "def", "get_paths_seq_aware", "(", "self", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "paths_idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "paths_idx", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths_idx", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "ids", ",", "path", "in", "enumerate", "(", "paths", "[", "i", "]", ")", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "paths_idx", "[", "j", "]", ".", "append", "(", "[", "*", "paths_idx", "[", "i", "]", "[", "ids", "]", ",", "i", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", ",", "paths_idx", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.encode_paths_seq_aware": [[217, 235], ["nasbench_201_cell.Cell.get_paths_seq_aware", "nasbench_201_cell.Cell.sort_seqs_list", "zip", "numpy.array", "numpy.zeros", "zip", "vectors_list.append", "numpy.concatenate.reshape", "numpy.zeros", "numpy.concatenate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.sort_seqs_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths_seq_aware", "(", "self", ",", "length", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "mapping", "=", "{", "SKIP", ":", "0", ",", "CONV1X1", ":", "1", ",", "CONV3X3", ":", "2", ",", "AVGPOOL3X3", ":", "3", "}", "\n", "paths", ",", "paths_idx", "=", "self", ".", "get_paths_seq_aware", "(", ")", "\n", "paths", ",", "paths_idx", "=", "self", ".", "sort_seqs_list", "(", "paths", ",", "paths_idx", ")", "\n", "vectors_list", "=", "[", "]", "\n", "for", "(", "p_list", ",", "idx_list", ")", "in", "zip", "(", "paths", ",", "paths_idx", ")", ":", "\n", "            ", "vec", "=", "np", ".", "zeros", "(", "OP_SPOTS", "*", "len", "(", "OPS", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "p", ",", "ids", "in", "zip", "(", "p_list", ",", "idx_list", ")", ":", "\n", "                ", "vec", "[", "(", "ids", "-", "1", ")", "*", "len", "(", "OPS", ")", "+", "mapping", "[", "p", "]", "]", "=", "1", "\n", "", "vectors_list", ".", "append", "(", "vec", ")", "\n", "", "path_encoding", "=", "np", ".", "array", "(", "vectors_list", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "path_encoding", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "residual_len", "=", "length", "-", "path_encoding", ".", "shape", "[", "0", "]", "\n", "if", "residual_len", "!=", "0", ":", "\n", "            ", "residual_np", "=", "np", ".", "zeros", "(", "residual_len", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "np", ".", "concatenate", "(", "[", "path_encoding", ",", "residual_np", "]", ")", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_cell.Cell.get_encoding": [[236, 245], ["nasbench_201_cell.Cell.encode_cell", "nasbench_201_cell.Cell.encode_paths", "nasbench_201_cell.Cell.encode_paths_seq_aware", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware"], ["", "def", "get_encoding", "(", "self", ",", "predictor_type", ",", "seq_len", ")", ":", "\n", "        ", "if", "predictor_type", "==", "'adj_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_cell", "(", ")", "\n", "", "elif", "predictor_type", "==", "'path_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_paths", "(", ")", "\n", "", "elif", "predictor_type", "==", "'path_enc_aware_vec'", ":", "\n", "            ", "return", "self", ".", "encode_paths_seq_aware", "(", "seq_len", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.__init__": [[24, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "'darts'", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.get_type": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.query_arch": [[31, 41], ["darts_api.arch_darts.ArchDarts.random_arch", "darts_api.arch_darts.ArchDarts().encode_paths", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.random_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "query_arch", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "encode_paths", "=", "True", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "ArchDarts", ".", "random_arch", "(", ")", "\n", "", "if", "encode_paths", ":", "\n", "            ", "encoding", "=", "ArchDarts", "(", "arch", ")", ".", "encode_paths", "(", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "arch", "\n", "", "return", "(", "arch", ",", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.mutate_arch": [[42, 44], ["darts_api.arch_darts.ArchDarts().mutate", "int", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.mutate"], ["", "def", "mutate_arch", "(", "self", ",", "arch", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "return", "ArchDarts", "(", "arch", ")", ".", "mutate", "(", "int", "(", "mutation_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.get_path_indices": [[45, 47], ["darts_api.arch_darts.ArchDarts().get_path_indices", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices"], ["", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "ArchDarts", "(", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.generate_random_dataset": [[48, 75], ["len", "darts.DataSetDarts.query_arch", "darts.DataSetDarts.get_path_indices", "data.append", "[].tolist", "tuple", "ValueError", "map", "darts_api.arch_darts.ArchDarts().encode_position_aware_paths", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_position_aware_paths"], ["", "def", "generate_random_dataset", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "filter_method", "=", "'pe'", "# pe: path-based encoding, pape: position-aware path-based encoding", "\n", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "archtuple", "=", "self", ".", "query_arch", "(", "encode_paths", "=", "encode_paths", ")", "\n", "if", "filter_method", "==", "'pe'", ":", "\n", "                ", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", "[", "0", "]", ")", "\n", "", "elif", "filter_method", "==", "'pape'", ":", "\n", "                ", "path_indices", "=", "ArchDarts", "(", "archtuple", ")", ".", "encode_position_aware_paths", "(", "seq_len", "=", "612", ",", "\n", "arch", "=", "archtuple", "[", "0", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "path_indices", "=", "tuple", "(", "map", "(", "int", ",", "path_indices", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'This method does not implement!'", ")", "\n", "", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.get_candidates": [[76, 130], ["darts.DataSetDarts.get_path_indices", "range", "[].tolist", "tuple", "ValueError", "len", "darts.DataSetDarts.mutate_arch", "darts.DataSetDarts.query_arch", "map", "sorted", "darts.DataSetDarts.get_path_indices", "candidates.append", "[].tolist", "tuple", "ValueError", "darts_api.arch_darts.ArchDarts().encode_position_aware_paths", "map", "darts_api.arch_darts.ArchDarts", "darts_api.arch_darts.ArchDarts().encode_position_aware_paths", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.mutate_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_position_aware_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_position_aware_paths"], ["", "def", "get_candidates", "(", "self", ",", "macro_graph_dict", ",", "model_keys", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ",", "\n", "mutate_rate", "=", "1.0", ",", "\n", "filter_method", "=", "'pe'", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "data", "=", "[", "macro_graph_dict", "[", "k", "]", "for", "k", "in", "model_keys", "]", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "if", "filter_method", "==", "'pe'", ":", "\n", "                ", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "", "elif", "filter_method", "==", "'pape'", ":", "\n", "                ", "path_indices", "=", "ArchDarts", "(", "arch", ")", ".", "encode_position_aware_paths", "(", "seq_len", "=", "612", ",", "\n", "arch", "=", "arch", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "path_indices", "=", "tuple", "(", "map", "(", "int", ",", "path_indices", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'This method does not implement!'", ")", "\n", "", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "arch", "[", "0", "]", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "2", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "arch", "in", "best_arches", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ",", "mutation_rate", "=", "mutate_rate", ")", "\n", "archtuple", "=", "self", ".", "query_arch", "(", "mutated", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "# path_indices = self.get_path_indices(mutated)", "\n", "if", "filter_method", "==", "'pe'", ":", "\n", "                        ", "path_indices", "=", "self", ".", "get_path_indices", "(", "archtuple", ")", "\n", "", "elif", "filter_method", "==", "'pape'", ":", "\n", "                        ", "path_indices", "=", "ArchDarts", "(", "archtuple", ")", ".", "encode_position_aware_paths", "(", "seq_len", "=", "612", ",", "\n", "arch", "=", "archtuple", "[", "0", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "path_indices", "=", "tuple", "(", "map", "(", "int", ",", "path_indices", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'This method does not implement!'", ")", "\n", "\n", "", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "archtuple", ")", "\n", "", "", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.remove_duplicates": [[131, 144], ["darts.DataSetDarts.get_path_indices", "unduplicated.append", "darts.DataSetDarts.get_path_indices", "darts.DataSetDarts.get_path_indices"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices"], ["", "def", "remove_duplicates", "(", "self", ",", "candidates", ",", "data", ")", ":", "\n", "# input: two sets of architectues: candidates and data", "\n", "# output: candidates with arches from data removed", "\n", "\n", "        ", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "dic", "[", "self", ".", "get_path_indices", "(", "d", "[", "0", "]", ")", "]", "=", "1", "\n", "", "unduplicated", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "if", "self", ".", "get_path_indices", "(", "candidate", "[", "0", "]", ")", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "self", ".", "get_path_indices", "(", "candidate", "[", "0", "]", ")", "]", "=", "1", "\n", "unduplicated", ".", "append", "(", "candidate", ")", "\n", "", "", "return", "unduplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.encode_data": [[145, 154], ["darts_api.arch_darts.ArchDarts().encode_paths", "data.append", "darts_api.arch_darts.ArchDarts"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "encode_data", "(", "self", ",", "dicts", ")", ":", "\n", "# input: list of arch dictionary objects", "\n", "# output: xtrain (in binary path encoding), ytrain (val loss)", "\n", "        ", "data", "=", "[", "]", "\n", "for", "dic", "in", "dicts", ":", "\n", "            ", "arch", "=", "dic", "[", "'spec'", "]", "\n", "encoding", "=", "ArchDarts", "(", "arch", ")", ".", "encode_paths", "(", ")", "\n", "data", ".", "append", "(", "(", "arch", ",", "encoding", ",", "dic", "[", "'val_loss_avg'", "]", ",", "None", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph_from_single_arch": [[155, 169], ["numpy.zeros", "darts.DataSetDarts.assemble_matrix_ops", "temp_matrix.append", "temp_ops.extend"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_matrix_ops"], ["", "def", "assemble_graph_from_single_arch", "(", "self", ",", "arch_info", ")", ":", "\n", "        ", "macro_matrix", "=", "np", ".", "zeros", "(", "(", "30", ",", "30", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "temp_matrix", "=", "[", "]", "\n", "temp_ops", "=", "[", "]", "\n", "for", "cell", "in", "arch_info", ":", "\n", "            ", "matrix", ",", "ops", "=", "self", ".", "assemble_matrix_ops", "(", "cell", ")", "\n", "temp_matrix", ".", "append", "(", "matrix", ")", "\n", "temp_ops", ".", "extend", "(", "ops", ")", "\n", "", "macro_matrix", "[", "0", ":", "15", ",", "0", ":", "15", "]", "=", "temp_matrix", "[", "0", "]", "\n", "macro_matrix", "[", "15", ":", ",", "15", ":", "]", "=", "temp_matrix", "[", "1", "]", "\n", "\n", "macro_matrix", "[", "14", ",", "15", "]", "=", "1", "\n", "macro_matrix", "[", "14", ",", "16", "]", "=", "1", "\n", "return", "macro_matrix", ",", "temp_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_graph": [[170, 188], ["numpy.zeros", "train_data.append", "darts.DataSetDarts.assemble_matrix_ops", "temp_matrix.append", "temp_ops.extend"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_matrix_ops"], ["", "def", "assemble_graph", "(", "self", ",", "graph_dict", ",", "model_keys", ")", ":", "\n", "        ", "train_data", "=", "[", "]", "\n", "for", "k", "in", "model_keys", ":", "\n", "            ", "macro_matrix", "=", "np", ".", "zeros", "(", "(", "30", ",", "30", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "arch_info", "=", "graph_dict", "[", "k", "]", "[", "0", "]", "\n", "temp_matrix", "=", "[", "]", "\n", "temp_ops", "=", "[", "]", "\n", "for", "cell", "in", "arch_info", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "assemble_matrix_ops", "(", "cell", ")", "\n", "temp_matrix", ".", "append", "(", "matrix", ")", "\n", "temp_ops", ".", "extend", "(", "ops", ")", "\n", "", "macro_matrix", "[", "0", ":", "15", ",", "0", ":", "15", "]", "=", "temp_matrix", "[", "0", "]", "\n", "macro_matrix", "[", "15", ":", ",", "15", ":", "]", "=", "temp_matrix", "[", "1", "]", "\n", "\n", "macro_matrix", "[", "14", ",", "15", "]", "=", "1", "\n", "macro_matrix", "[", "14", ",", "16", "]", "=", "1", "\n", "train_data", ".", "append", "(", "[", "macro_matrix", ",", "temp_ops", "]", ")", "\n", "", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_matrix_ops": [[189, 248], ["numpy.zeros", "enumerate", "normal_node_ops.append", "numpy.any", "numpy.any", "numpy.any", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append", "normal_node_ops.append"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "assemble_matrix_ops", "(", "self", ",", "normal_cell", ")", ":", "\n", "        ", "normal_adjacency", "=", "np", ".", "zeros", "(", "(", "15", ",", "15", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "normal_node_ops", "=", "[", "'input'", ",", "'input'", "]", "\n", "for", "j", ",", "(", "idx", ",", "op", ")", "in", "enumerate", "(", "normal_cell", ")", ":", "\n", "            ", "if", "j", "<=", "1", ":", "\n", "                ", "normal_adjacency", "[", "idx", ",", "j", "+", "2", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "1", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "elif", "1", "<", "j", "<=", "3", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "3", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "3", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "elif", "3", "<", "j", "<=", "5", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                    ", "temp_idx", "=", "7", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "4", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "5", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "idx", "==", "2", ":", "\n", "                    ", "temp_idx", "=", "4", "\n", "", "elif", "idx", "==", "3", ":", "\n", "                    ", "temp_idx", "=", "7", "\n", "", "elif", "idx", "==", "4", ":", "\n", "                    ", "temp_idx", "=", "10", "\n", "", "else", ":", "\n", "                    ", "temp_idx", "=", "idx", "\n", "", "normal_adjacency", "[", "temp_idx", ",", "j", "+", "5", "]", "=", "1", "\n", "normal_node_ops", ".", "append", "(", "OPS", "[", "op", "]", ")", "\n", "if", "j", "==", "7", ":", "\n", "                    ", "normal_node_ops", ".", "append", "(", "'concat'", ")", "\n", "", "", "", "normal_adjacency", "[", "2", ",", "4", "]", "=", "1", "\n", "normal_adjacency", "[", "3", ",", "4", "]", "=", "1", "\n", "normal_adjacency", "[", "5", ",", "7", "]", "=", "1", "\n", "normal_adjacency", "[", "6", ",", "7", "]", "=", "1", "\n", "normal_adjacency", "[", "8", ",", "10", "]", "=", "1", "\n", "normal_adjacency", "[", "9", ",", "10", "]", "=", "1", "\n", "normal_adjacency", "[", "11", ",", "13", "]", "=", "1", "\n", "normal_adjacency", "[", "12", ",", "13", "]", "=", "1", "\n", "normal_adjacency", "[", "13", ",", "14", "]", "=", "1", "\n", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "4", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "4", ",", "14", "]", "=", "1", "\n", "", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "7", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "7", ",", "14", "]", "=", "1", "\n", "", "if", "not", "np", ".", "any", "(", "normal_adjacency", "[", "10", ",", "13", "]", ")", ":", "\n", "            ", "normal_adjacency", "[", "10", ",", "14", "]", "=", "1", "\n", "", "normal_node_ops", ".", "append", "(", "'output'", ")", "\n", "return", "normal_adjacency", ",", "normal_node_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts.DataSetDarts.assemble_cifar10_neural_net": [[249, 273], ["utils.utils_darts.convert_to_genotype", "hashlib.sha256().hexdigest", "darts_api.darts_neuralnet.DartsCifar10NeuralNet", "logger.info", "logger.info", "utils.utils_darts.count_parameters_in_MB", "hashlib.sha256", "str().encode", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.convert_to_genotype", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.count_parameters_in_MB"], ["", "def", "assemble_cifar10_neural_net", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "darts_neural_dict", "=", "{", "}", "\n", "parameters", "=", "{", "\n", "'init_channels'", ":", "16", ",", "\n", "'cifar_classed'", ":", "10", ",", "\n", "'layers'", ":", "8", ",", "\n", "'auxiliary'", ":", "False", ",", "\n", "'stem_mult'", ":", "3", "\n", "}", "\n", "for", "data", "in", "data_dict", ":", "\n", "            ", "genotype", "=", "convert_to_genotype", "(", "data", "[", "0", "]", ")", "\n", "k", "=", "sha256", "(", "str", "(", "genotype", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "dart_neural", "=", "DartsCifar10NeuralNet", "(", "C", "=", "parameters", "[", "'init_channels'", "]", ",", "\n", "num_classes", "=", "parameters", "[", "'cifar_classed'", "]", ",", "\n", "layers", "=", "parameters", "[", "'layers'", "]", ",", "\n", "auxiliary", "=", "parameters", "[", "'auxiliary'", "]", ",", "\n", "genotype", "=", "genotype", ",", "\n", "key", "=", "k", ",", "\n", "stem_mult", "=", "parameters", "[", "'stem_mult'", "]", ")", "\n", "darts_neural_dict", "[", "k", "]", "=", "dart_neural", "\n", "logger", ".", "info", "(", "k", ")", "\n", "logger", ".", "info", "(", "count_parameters_in_MB", "(", "dart_neural", ")", ")", "\n", "dart_neural", ".", "drop_path_prob", "=", "0", "\n", "", "return", "darts_neural_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.is_contain_isolate_node": [[21, 30], ["range", "len", "numpy.all", "numpy.all"], "function", ["None"], ["def", "is_contain_isolate_node", "(", "adjacency_matrix", ")", ":", "\n", "    ", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "adjacency_matrix", ")", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "adjacency_matrix", "[", "i", ",", ":", "]", "==", "0", ")", "and", "np", ".", "all", "(", "adjacency_matrix", "[", ":", ",", "i", "]", "==", "0", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "idx", "=", "i", "\n", "break", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.exchange_nodes_edges": [[32, 93], ["ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "ops.append", "numpy.zeros", "copy.deepcopy", "nasbench_201_init.is_contain_isolate_node", "range", "nasbench_201_init.add_dummy_node", "data_list.append", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "nasbench_201_init.is_contain_isolate_node", "len", "enumerate", "numpy.all", "numpy.all"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.is_contain_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.add_dummy_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.is_contain_isolate_node"], ["", "def", "exchange_nodes_edges", "(", "genetype_data", ")", ":", "\n", "    ", "global", "isolate_nums", "\n", "ops", "=", "[", "'input'", "]", "\n", "data_list", "=", "[", "]", "\n", "for", "k", "in", "genetype_data", ":", "\n", "        ", "data_list", ".", "append", "(", "k", ")", "\n", "", "ops", ".", "append", "(", "data_list", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->1", "\n", "ops", ".", "append", "(", "data_list", "[", "1", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->2", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "0", "]", "[", "0", "]", ")", "# 0--->3", "\n", "ops", ".", "append", "(", "data_list", "[", "1", "]", "[", "1", "]", "[", "0", "]", ")", "# 1--->4", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "1", "]", "[", "0", "]", ")", "# 1--->5", "\n", "ops", ".", "append", "(", "data_list", "[", "2", "]", "[", "2", "]", "[", "0", "]", ")", "# 2--->6", "\n", "ops", ".", "append", "(", "'output'", ")", "\n", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "(", "8", ",", "8", ")", ")", "\n", "adjacency_matrix", "[", "0", ",", "1", "]", "=", "1", "\n", "adjacency_matrix", "[", "0", ",", "2", "]", "=", "1", "\n", "adjacency_matrix", "[", "0", ",", "3", "]", "=", "1", "\n", "adjacency_matrix", "[", "1", ",", "4", "]", "=", "1", "\n", "adjacency_matrix", "[", "1", ",", "5", "]", "=", "1", "\n", "adjacency_matrix", "[", "2", ",", "6", "]", "=", "1", "\n", "adjacency_matrix", "[", "4", ",", "6", "]", "=", "1", "\n", "adjacency_matrix", "[", "3", ",", "7", "]", "=", "1", "\n", "adjacency_matrix", "[", "5", ",", "7", "]", "=", "1", "\n", "adjacency_matrix", "[", "6", ",", "7", "]", "=", "1", "\n", "\n", "del_idxs", "=", "[", "id", "for", "id", ",", "op", "in", "enumerate", "(", "ops", ")", "if", "op", "==", "'none'", "]", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "op", "!=", "'none'", "]", "\n", "# del_idxs = []", "\n", "original_matrix", "=", "copy", ".", "deepcopy", "(", "adjacency_matrix", ")", "\n", "\n", "counter", "=", "0", "\n", "for", "id", "in", "del_idxs", ":", "\n", "        ", "temp_id", "=", "id", "-", "counter", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "temp_id", ",", "axis", "=", "0", ")", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "temp_id", ",", "axis", "=", "1", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "idx", "=", "is_contain_isolate_node", "(", "adjacency_matrix", ")", "\n", "while", "idx", ">", "0", ":", "\n", "        ", "del", "ops", "[", "idx", "]", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "idx", ",", "axis", "=", "0", ")", "\n", "adjacency_matrix", "=", "np", ".", "delete", "(", "adjacency_matrix", ",", "idx", ",", "axis", "=", "1", ")", "\n", "idx", "=", "is_contain_isolate_node", "(", "adjacency_matrix", ")", "\n", "\n", "", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "adjacency_matrix", ")", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "adjacency_matrix", "[", "i", ",", ":", "]", "==", "0", ")", "and", "np", ".", "all", "(", "adjacency_matrix", "[", ":", ",", "i", "]", "==", "0", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "counter", "+=", "1", "\n", "\n", "# if len(del_idxs) > 1:", "\n", "# # if len(del_idxs) > 1 and counter > 1:", "\n", "#     print(ops)", "\n", "#     print(adjacency_matrix)", "\n", "#     print(original_matrix)", "\n", "#     isolate_nums += 1", "\n", "#     print('###############################')", "\n", "", "", "adjacency_matrix_dummy", ",", "ops_dummy", "=", "add_dummy_node", "(", "adjacency_matrix", ",", "ops", ")", "\n", "return", "adjacency_matrix", ",", "ops", ",", "adjacency_matrix_dummy", ",", "ops_dummy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.add_dummy_node": [[95, 108], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node"], ["", "def", "add_dummy_node", "(", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {1, 2, 3, 4, 5, 6, 7}", "\n", "    ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "            ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "matrix", "[", "i", ",", "NUM_VERTICES", "-", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "NUM_VERTICES", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.get_arch_acc_info": [[110, 126], ["nas_bench.query_index_by_arch", "nas_bench.get_more_info", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_index_by_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_more_info"], ["", "def", "get_arch_acc_info", "(", "nas_bench", ",", "arch", ",", "dataname", "=", "'cifar10-valid'", ")", ":", "\n", "    ", "\"\"\"\n\n    :param nas_bench:\n    :param arch:\n    :param dataname: choices ['cifar10-valid', 'cifar10', 'cifar100', 'ImageNet16-120']\n    :return:\n    \"\"\"", "\n", "arch_index", "=", "nas_bench", ".", "query_index_by_arch", "(", "arch", ")", "\n", "assert", "arch_index", ">=", "0", ",", "'can not find this arch : {:}'", ".", "format", "(", "arch", ")", "\n", "info", "=", "nas_bench", ".", "get_more_info", "(", "arch_index", ",", "dataname", ",", "None", ",", "use_12epochs_result", "=", "False", ",", "is_random", "=", "False", ")", "\n", "if", "dataname", "==", "'cifar10'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'The dataset cifar10 without having validation accuracy does not support at present!'", ")", "\n", "", "else", ":", "\n", "        ", "test_acc", ",", "valid_acc", "=", "info", "[", "'test-accuracy'", "]", ",", "info", "[", "'valid-accuracy'", "]", "\n", "", "return", "valid_acc", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.generate_all_archs": [[128, 156], ["print", "nasbench_201_init.get_arch_acc_info", "nas_lib.data.nasbench_201_api.genotypes.Structure.str2structure", "nasbench_201_init.exchange_nodes_edges", "nas_lib.data.nasbench_201_cell.Cell", "nas_lib.data.nasbench_201_cell.Cell.encode_paths", "nas_lib.data.nasbench_201_cell.Cell.encode_cell", "nas_lib.data.nasbench_201_cell.Cell.encode_paths_seq_aware", "total_keys.append", "max", "min", "max", "min"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.get_arch_acc_info", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.exchange_nodes_edges", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "generate_all_archs", "(", "nas_bench", ",", "args", ")", ":", "\n", "    ", "total_archs", "=", "{", "}", "\n", "total_keys", "=", "[", "]", "\n", "meta_archs", "=", "nas_bench", ".", "meta_archs", "\n", "for", "arch", "in", "meta_archs", ":", "\n", "        ", "val_acc", ",", "test_acc", "=", "get_arch_acc_info", "(", "nas_bench", ",", "arch", ",", "dataname", "=", "args", ".", "dataname", ")", "\n", "structure", "=", "CellStructure", ".", "str2structure", "(", "arch", ")", "\n", "am", ",", "ops", ",", "am_dummy", ",", "ops_dummy", "=", "exchange_nodes_edges", "(", "structure", ")", "\n", "cell_arch", "=", "Cell", "(", "matrix", "=", "am_dummy", ",", "ops", "=", "ops_dummy", ",", "isolate_node_idxs", "=", "[", "]", ")", "\n", "path_encoding1", "=", "cell_arch", ".", "encode_paths", "(", ")", "\n", "path_encoding2", "=", "cell_arch", ".", "encode_cell", "(", ")", "\n", "path_encoding3", "=", "cell_arch", ".", "encode_paths_seq_aware", "(", "length", "=", "96", ")", "\n", "total_archs", "[", "arch", "]", "=", "[", "\n", "(", "am_dummy", ",", "ops_dummy", ",", "[", "]", ")", ",", "\n", "am", ",", "\n", "ops", ",", "\n", "path_encoding1", ",", "\n", "100", "-", "val_acc", ",", "\n", "100", "-", "test_acc", ",", "\n", "arch", ",", "\n", "path_encoding2", ",", "\n", "path_encoding3", "\n", "]", "\n", "total_keys", ".", "append", "(", "arch", ")", "\n", "", "val_acc", "=", "[", "arch_info", "[", "4", "]", "for", "arch_info", "in", "total_archs", "]", "\n", "test_acc", "=", "[", "arch_info", "[", "5", "]", "for", "arch_info", "in", "total_archs", "]", "\n", "print", "(", "max", "(", "val_acc", ")", ",", "min", "(", "val_acc", ")", ",", "max", "(", "test_acc", ")", ",", "min", "(", "test_acc", ")", ")", "\n", "return", "total_archs", ",", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_init.inti_nasbench_201": [[158, 166], ["nas_lib.data.nasbench_201_api.NASBench201API", "nasbench_201_init.generate_all_archs", "args.dataname.replace", "os.path.join", "open", "pickle.dump", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_all_archs"], ["", "def", "inti_nasbench_201", "(", "args", ")", ":", "\n", "    ", "nas_bench", "=", "API", "(", "nas_bench_201_path", ")", "\n", "total_archs", ",", "total_keys", "=", "generate_all_archs", "(", "nas_bench", ",", "args", ")", "\n", "file_name", "=", "args", ".", "dataname", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_201_base_path", ",", "'arch_info_'", "+", "file_name", "+", "'.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "total_archs", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "total_keys", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets": [[12, 24], ["NASBench101", "NASBench201", "DataSetDarts", "ValueError"], "function", ["None"], ["def", "build_datasets", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "search_space", "==", "\"nasbench_101\"", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "nasbench_101", "import", "NASBench101", "\n", "return", "NASBench101", "(", "args", ".", "search_space", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "nasbench_201", "import", "NASBench201", "\n", "return", "NASBench201", "(", "args", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "darts", "import", "DataSetDarts", "\n", "return", "DataSetDarts", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"This architecture datasets does not support!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split": [[26, 78], ["random.sample", "random.sample", "train_data.append", "test_data.append", "nasbench_101_cell.Cell", "nasbench_101_cell.Cell", "nasbench_201_cell.Cell", "NotImplementedError", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell", "NotImplementedError", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding"], ["", "", "def", "dataset_split", "(", "args", ",", "nas_dataset", ",", "budget", "=", "None", ")", ":", "\n", "    ", "total_keys", "=", "nas_dataset", ".", "total_keys", "\n", "total_archs", "=", "nas_dataset", ".", "total_archs", "\n", "if", "budget", ":", "\n", "        ", "train_keys", "=", "random", ".", "sample", "(", "total_keys", ",", "budget", ")", "\n", "", "else", ":", "\n", "        ", "train_keys", "=", "random", ".", "sample", "(", "total_keys", ",", "args", ".", "search_budget", ")", "\n", "", "test_keys", "=", "[", "key", "for", "key", "in", "total_keys", "if", "key", "not", "in", "train_keys", "]", "\n", "train_data", "=", "[", "]", "\n", "test_data", "=", "[", "]", "\n", "\n", "flag", "=", "args", ".", "search_space", "==", "'nasbench_101'", "\n", "for", "k", "in", "train_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "            ", "cell_inst", "=", "Cell_101", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "            ", "cell_inst", "=", "Cell_201", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "train_data", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", "\n", "}", "\n", ")", "\n", "\n", "", "for", "k", "in", "test_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "            ", "cell_inst", "=", "Cell_101", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "            ", "cell_inst", "=", "Cell_201", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "test_data", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", "\n", "}", "\n", ")", "\n", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all": [[80, 143], ["nasbench_101_cell.Cell", "nas_lib.utils.utils_data.nas2graph", "gnn_lib.data.Data", "nas_lib.utils.predictive_comparision.convert_arch_to_seq", "nas_lib.utils.utils_data.nasbench2graph_reverse", "gnn_lib.data.Data", "all_archs.append", "len", "nasbench_201_cell.Cell", "nas_lib.utils.utils_data.nas2graph", "nas_lib.utils.utils_data.nas2graph", "gnn_lib.data.Data", "all_archs.append", "NotImplementedError", "edge_index.long", "node_f.float", "edge_index_reverse.long", "node_f_reverse.float", "len", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "edge_index_reverse.long", "node_f_reverse.float", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "nasbench_201_cell.Cell.get_encoding", "gnn_lib.data.Data", "range", "edge_index.long", "node_f.float"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nas2graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.SemiNAS.utils.convert_arch_to_seq", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_reverse", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nas2graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nas2graph", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding"], ["", "def", "dataset_all", "(", "args", ",", "nas_dataset", ")", ":", "\n", "    ", "total_keys", "=", "nas_dataset", ".", "total_keys", "\n", "total_archs", "=", "nas_dataset", ".", "total_archs", "\n", "all_archs", "=", "[", "]", "\n", "\n", "flag", "=", "args", ".", "search_space", "==", "'nasbench_101'", "\n", "for", "k", "in", "total_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "            ", "cell_inst", "=", "Cell_101", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "edge_index", ",", "node_f", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ")", ")", "\n", "g_data", "=", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", "\n", "seminas_vec", "=", "convert_arch_to_seq", "(", "arch", "[", "'o_matrix'", "]", ",", "arch", "[", "'o_ops'", "]", ")", "\n", "edge_index_reverse", ",", "node_f_reverse", "=", "nasbench2graph_reverse", "(", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ")", ",", "reverse", "=", "True", ")", "\n", "g_data_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", ".", "long", "(", ")", ",", "x", "=", "node_f_reverse", ".", "float", "(", ")", ")", "\n", "if", "len", "(", "seminas_vec", ")", "<", "27", ":", "\n", "                ", "padding", "=", "27", "-", "len", "(", "seminas_vec", ")", "\n", "seminas_vec", "=", "seminas_vec", "+", "[", "0", "for", "_", "in", "range", "(", "padding", ")", "]", "\n", "", "all_archs", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", ",", "\n", "'g_data'", ":", "g_data", ",", "\n", "'arch_k'", ":", "k", ",", "\n", "'seminas_vec'", ":", "seminas_vec", ",", "\n", "'edge_idx'", ":", "edge_index", ",", "\n", "'node_f'", ":", "node_f", ",", "\n", "'edge_idx_reverse'", ":", "edge_index_reverse", ",", "\n", "'node_f_reverse'", ":", "node_f_reverse", ",", "\n", "'g_data_reverse'", ":", "g_data_reverse", "\n", "}", "\n", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "            ", "cell_inst", "=", "Cell_201", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ")", "\n", "edge_index", ",", "node_f", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "0", "]", "[", "0", "]", ",", "arch", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "edge_index_reverse", ",", "node_f_reverse", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "0", "]", "[", "0", "]", ",", "arch", "[", "0", "]", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "\n", "g_data_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", ".", "long", "(", ")", ",", "x", "=", "node_f_reverse", ".", "float", "(", ")", ")", "\n", "all_archs", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", ",", "\n", "'g_data'", ":", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", ",", "\n", "'arch_k'", ":", "k", ",", "\n", "'edge_idx'", ":", "edge_index", ",", "\n", "'node_f'", ":", "node_f", ",", "\n", "'edge_idx_reverse'", ":", "edge_index_reverse", ",", "\n", "'node_f_reverse'", ":", "node_f_reverse", ",", "\n", "'g_data_reverse'", ":", "g_data_reverse", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "return", "all_archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.split_data_from_all_data": [[145, 157], ["train_data.extend", "len", "len", "train_data_new.append", "all_data.pop"], "function", ["None"], ["", "def", "split_data_from_all_data", "(", "all_data", ",", "idxs", ",", "train_data", ",", "budget", ",", "last_budget", ")", ":", "\n", "    ", "train_data_new", "=", "[", "]", "\n", "counter", "=", "0", "\n", "while", "len", "(", "train_data_new", ")", "<", "(", "budget", "-", "last_budget", ")", ":", "\n", "        ", "if", "idxs", "[", "last_budget", "+", "counter", "]", "<", "len", "(", "all_data", ")", ":", "\n", "            ", "train_data_new", ".", "append", "(", "all_data", ".", "pop", "(", "idxs", "[", "last_budget", "+", "counter", "]", ")", ")", "\n", "counter", "+=", "1", "\n", "", "else", ":", "\n", "            ", "counter", "+=", "1", "\n", "continue", "\n", "", "", "train_data", ".", "extend", "(", "train_data_new", ")", "\n", "return", "train_data", ",", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx": [[159, 165], ["list", "random.shuffle", "range", "len"], "function", ["None"], ["", "def", "dataset_split_idx", "(", "all_data", ",", "budget", "=", "None", ")", ":", "\n", "    ", "idxs", "=", "list", "(", "range", "(", "len", "(", "all_data", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "train_data", "=", "[", "all_data", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "budget", "]", "]", "\n", "test_data", "=", "[", "all_data", "[", "kt", "]", "for", "kt", "in", "idxs", "[", "budget", ":", "]", "]", "\n", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx_predictive_comparison": [[167, 173], ["list", "random.shuffle", "range", "len", "int", "int"], "function", ["None"], ["", "def", "dataset_split_idx_predictive_comparison", "(", "all_data", ",", "budget", "=", "None", ")", ":", "\n", "    ", "idxs", "=", "list", "(", "range", "(", "len", "(", "all_data", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "train_data", "=", "[", "all_data", "[", "k", "]", "for", "k", "in", "idxs", "[", ":", "int", "(", "budget", ")", "]", "]", "\n", "test_data", "=", "[", "all_data", "[", "kt", "]", "for", "kt", "in", "idxs", "[", "int", "(", "budget", ")", ":", "]", "]", "\n", "return", "train_data", ",", "test_data", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201.NASBench201.__init__": [[17, 32], ["print", "os.path.join", "os.path.join", "open", "pickle.load", "pickle.load", "args.dataname.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "nas_bench", "=", "None", "\n", "self", ".", "max_nodes", "=", "4", "\n", "self", ".", "op_names", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", "\n", "self", ".", "op_names_alphaX", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", ",", "'term'", "]", "\n", "del", "self", ".", "nas_bench", "\n", "if", "args", "is", "None", ":", "\n", "            ", "arch_file_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_201_base_path", ",", "'arch_info_cifar10_valid.pkl'", ")", "\n", "", "else", ":", "\n", "            ", "dataset_name", "=", "'arch_info_'", "+", "args", ".", "dataname", ".", "replace", "(", "'-'", ",", "'_'", ")", "+", "'.pkl'", "\n", "arch_file_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_201_base_path", ",", "dataset_name", ")", "\n", "", "print", "(", "arch_file_path", ")", "\n", "with", "open", "(", "arch_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "total_archs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "total_keys", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201.NASBench201.random_arch": [[33, 43], ["range", "nas_lib.data.nasbench_201_api.genotypes.Structure", "range", "genotypes.append", "random.choice", "xlist.append", "tuple"], "methods", ["None"], ["", "", "def", "random_arch", "(", "self", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "CellStructure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201.NASBench201.mutate": [[44, 59], ["copy.deepcopy", "random.randint", "list", "random.randint", "random.choice", "tuple", "copy.deepcopy.tostr", "random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tostr"], ["", "def", "mutate", "(", "self", ",", "parent_arch", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "child_arch", "=", "deepcopy", "(", "parent_arch", ")", "\n", "node_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "child_arch", ".", "nodes", ")", "-", "1", ")", "\n", "node_info", "=", "list", "(", "child_arch", ".", "nodes", "[", "node_id", "]", ")", "\n", "snode_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "node_info", ")", "-", "1", ")", "\n", "xop", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "while", "xop", "==", "node_info", "[", "snode_id", "]", "[", "0", "]", ":", "\n", "                ", "xop", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "node_info", "[", "snode_id", "]", "=", "(", "xop", ",", "node_info", "[", "snode_id", "]", "[", "1", "]", ")", "\n", "child_arch", ".", "nodes", "[", "node_id", "]", "=", "tuple", "(", "node_info", ")", "\n", "str_arch", "=", "child_arch", ".", "tostr", "(", ")", "\n", "if", "str_arch", "in", "self", ".", "total_keys", ":", "\n", "                ", "break", "\n", "", "", "return", "child_arch", ",", "self", ".", "total_archs", "[", "str_arch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201.NASBench201.get_candidates": [[60, 97], ["enumerate", "nas_lib.data.nasbench_201_cell.Cell().encode_paths_seq_aware", "nas_lib.data.nasbench_201_api.genotypes.Structure.str2structure", "range", "map", "len", "nasbench_201.NASBench201.mutate", "nas_lib.data.nasbench_201_cell.Cell().encode_paths_seq_aware", "nas_lib.data.nasbench_201_cell.Cell", "nas_lib.data.nasbench_201_cell.Cell().encode_paths_seq_aware.tolist", "sorted", "map", "candidates.append", "nas_lib.data.nasbench_201_cell.Cell", "nas_lib.data.nasbench_201_cell.Cell().encode_paths_seq_aware.tolist"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.mutate", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "num_best_arches", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "{", "'matrix'", ":", "d", "[", "0", "]", "[", "0", "]", ",", "'ops'", ":", "d", "[", "0", "]", "[", "1", "]", "}", "\n", "# path_indices = Cell(**arch).get_path_indices()", "\n", "path_indices", "=", "Cell", "(", "**", "arch", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "96", ")", "\n", "path_indices", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_indices", ".", "tolist", "(", ")", ")", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "best_arches", "=", "[", "CellStructure", ".", "str2structure", "(", "arch", "[", "6", "]", ")", "\n", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "            ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                ", "break", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "_", ",", "mutated", "=", "self", ".", "mutate", "(", "arch", ")", "\n", "# path_indices = Cell(matrix=mutated[0][0], ops=mutated[0][1]).get_path_indices()", "\n", "# if allow_isomorphisms or path_indices not in dic:", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "mutated", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "mutated", "[", "0", "]", "[", "1", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "96", ")", "\n", "path_ids", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_indices", ".", "tolist", "(", ")", ")", ")", "\n", "if", "allow_isomorphisms", "or", "path_ids", "not", "in", "dic", ":", "\n", "                    ", "dic", "[", "path_ids", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201.NASBench201.generate_random_dataset": [[98, 132], ["random.sample", "key_list.append", "nas_lib.data.nasbench_201_cell.Cell", "nas_lib.data.nasbench_201_cell.Cell.encode_paths", "nas_lib.data.nasbench_201_cell.Cell.encode_cell", "nas_lib.data.nasbench_201_cell.Cell.encode_paths_seq_aware", "map", "data.append", "len", "nas_lib.data.nasbench_201_cell.Cell.encode_paths_seq_aware.tolist"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", "=", "10", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "False", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", "[", "0", "]", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "cell_arch", "=", "Cell", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ",", "isolate_node_idxs", "=", "[", "]", ")", "\n", "path_encoding_path_base", "=", "cell_arch", ".", "encode_paths", "(", ")", "\n", "path_encoding_adj", "=", "cell_arch", ".", "encode_cell", "(", ")", "\n", "path_context_aware", "=", "cell_arch", ".", "encode_paths_seq_aware", "(", "length", "=", "96", ")", "\n", "\n", "arch_ids", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_context_aware", ".", "tolist", "(", ")", ")", ")", "\n", "if", "allow_isomorphisms", "or", "arch_ids", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "arch_ids", "]", "=", "1", "\n", "data", ".", "append", "(", "\n", "(", "\n", "arch", "[", "0", "]", ",", "\n", "arch", "[", "1", "]", ",", "\n", "arch", "[", "2", "]", ",", "\n", "path_encoding_path_base", ",", "\n", "arch", "[", "4", "]", ",", "\n", "arch", "[", "5", "]", ",", "\n", "arch", "[", "6", "]", ",", "\n", "path_encoding_adj", ",", "\n", "path_context_aware", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.collate_batch.BatchCollator.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.collate_batch.BatchCollator.__call__": [[15, 21], ["list", "numpy.array", "torch.Tensor", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "g_list", "=", "transposed_batch", "[", "0", "]", "\n", "path_encoding_list", "=", "np", ".", "array", "(", "transposed_batch", "[", "1", "]", ")", "\n", "path_encoding", "=", "torch", ".", "Tensor", "(", "path_encoding_list", ")", "\n", "return", "g_list", ",", "path_encoding", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset.__init__": [[10, 15], ["torch.utils.data.Dataset.__init__", "nasbench_201_torch.NASBenche201Dataset._load_data", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset._load_data"], ["    ", "def", "__init__", "(", "self", ",", "model_type", ")", ":", "\n", "        ", "super", "(", "NASBenche201Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "total_keys", ",", "self", ".", "total_archs", "=", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "idxs", "=", "list", "(", "range", "(", "len", "(", "self", ".", "total_keys", ")", ")", ")", "\n", "self", ".", "model_type", "=", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset.__getitem__": [[19, 37], ["nas_lib.utils.utils_data.nasbench2graph_201", "gnn_lib.data.Data", "NotImplementedError", "edge_index.long", "node_f.float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.nasbench2graph_201"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "id", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "\n", "if", "self", ".", "model_type", "==", "'moco'", ":", "\n", "            ", "arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "0", "]", "[", "0", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "0", "]", "[", "1", "]", "\n", "path_encoding", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "-", "1", "]", "\n", "return", "arch", ",", "ops", ",", "path_encoding", "\n", "", "elif", "self", ".", "model_type", "==", "'SS_CCL'", ":", "\n", "            ", "arch", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "0", "]", "[", "0", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "0", "]", "[", "1", "]", "\n", "path_encoding", "=", "self", ".", "total_archs", "[", "self", ".", "total_keys", "[", "id", "]", "]", "[", "-", "1", "]", "\n", "\n", "edge_index", ",", "node_f", "=", "nasbench2graph_201", "(", "(", "arch", ",", "ops", ")", ",", "is_idx", "=", "True", ")", "\n", "g_d", "=", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", "\n", "return", "g_d", ",", "path_encoding", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'The model type {self.model_type} does not support!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset.__str__": [[38, 40], ["len"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'This dataset contains {len(self.total_keys)} architectures.'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_201_torch.NASBenche201Dataset._load_data": [[41, 49], ["nas_lib.data.nasbench_201.NASBench201", "total_archs.items", "numpy.array", "nas_lib.utils.utils_data.NASBENCH_201_OPS.index"], "methods", ["None"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "nasbench_201", "=", "NASBench201", "(", ")", "\n", "total_keys", "=", "nasbench_201", ".", "total_keys", "\n", "total_archs", "=", "nasbench_201", ".", "total_archs", "\n", "for", "k", ",", "v", "in", "total_archs", ".", "items", "(", ")", ":", "\n", "            ", "total_archs", "[", "k", "]", "[", "0", "]", "=", "[", "v", "[", "0", "]", "[", "0", "]", ",", "np", ".", "array", "(", "[", "NASBENCH_201_OPS", ".", "index", "(", "op", ")", "for", "op", "in", "v", "[", "0", "]", "[", "1", "]", "]", ")", "]", "\n", "", "del", "nasbench_201", "\n", "return", "total_keys", ",", "total_archs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_init.generate_nasbench_101_bench_keys_vals": [[10, 17], ["os.path.join", "open", "pickle.dump", "pickle.dump"], "function", ["None"], ["def", "generate_nasbench_101_bench_keys_vals", "(", "nasbench_data", ")", ":", "\n", "    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_101_base_path", ",", "'nasbench_archs.pkl'", ")", "\n", "keys", "=", "nasbench_data", ".", "total_keys", "\n", "archs", "=", "nasbench_data", ".", "total_archs", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fw", ":", "\n", "        ", "pickle", ".", "dump", "(", "keys", ",", "fw", ")", "\n", "pickle", ".", "dump", "(", "archs", ",", "fw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_init.generate_nasbench_101_all_datas": [[19, 24], ["nas_lib.data.data.dataset_all", "os.path.join", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all"], ["", "", "def", "generate_nasbench_101_all_datas", "(", "nasbench_data", ",", "args", ")", ":", "\n", "    ", "all_data", "=", "data", ".", "dataset_all", "(", "args", ",", "nasbench_data", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "nas_bench_101_base_path", ",", "'all_data_new.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fb", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_data", ",", "fb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_torch.DartsDataset.__init__": [[8, 14], ["torch.utils.data.Dataset.__init__", "list", "open", "pickle.load", "range", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_type", ",", "arch_path", ")", ":", "\n", "        ", "super", "(", "DartsDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_type", "=", "model_type", "\n", "with", "open", "(", "arch_path", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "self", ".", "total_archs", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "", "self", ".", "idxs", "=", "list", "(", "range", "(", "len", "(", "self", ".", "total_archs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_torch.DartsDataset.__len__": [[15, 17], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_torch.DartsDataset.__getitem__": [[18, 23], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "id", "=", "self", ".", "idxs", "[", "idx", "]", "\n", "path_encoding", "=", "self", ".", "total_archs", "[", "id", "]", "[", "'pe_path_enc_aware_vec'", "]", "[", "0", "]", "\n", "g_d", "=", "self", ".", "total_archs", "[", "id", "]", "[", "'g_data'", "]", "\n", "return", "g_d", ",", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.darts_torch.DartsDataset.__str__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'This dataset contains {len(self.total_archs)} architectures.'", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.__init__": [[24, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "isolate_node_idxs", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "matrix", "\n", "self", ".", "ops", "=", "ops", "\n", "self", ".", "isolate_node_idxs", "=", "isolate_node_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.serialize": [[29, 33], ["None"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'matrix'", ":", "self", ".", "matrix", ",", "\n", "'ops'", ":", "self", ".", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.modelspec": [[35, 37], ["nas_lib.ModelSpec"], "methods", ["None"], ["", "def", "modelspec", "(", "self", ")", ":", "\n", "        ", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.random_cell": [[38, 56], ["numpy.random.choice", "numpy.triu", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "@", "classmethod", "\n", "def", "random_cell", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\" \n        From the NASBench repository \n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.random_cell_gnn": [[58, 79], ["numpy.random.choice", "numpy.triu", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_gnn", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.random_cell_both": [[81, 104], ["numpy.random.choice", "numpy.triu", "numpy.triu.copy", "nas_lib.utils.utils_data.find_isolate_node", "numpy.random.choice().tolist", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "", "", "@", "classmethod", "\n", "def", "random_cell_both", "(", "cls", ",", "nasbench", ")", ":", "\n", "        ", "\"\"\"\n        From the NASBench repository\n        https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "matrix", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "size", "=", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ")", "\n", "matrix", "=", "np", ".", "triu", "(", "matrix", ",", "1", ")", "\n", "matrix_orig", "=", "matrix", ".", "copy", "(", ")", "\n", "isolate_nodes", "=", "find_isolate_node", "(", "matrix", ")", "\n", "ops", "=", "np", ".", "random", ".", "choice", "(", "OPS", ",", "size", "=", "NUM_VERTICES", ")", ".", "tolist", "(", ")", "\n", "ops", "[", "0", "]", "=", "INPUT", "\n", "ops", "[", "-", "1", "]", "=", "OUTPUT", "\n", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "matrix_orig", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_val_loss": [[106, 120], ["round", "len", "nasbench.query", "accs.append", "nasbench.query", "nas_lib.ModelSpec", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "", "", "def", "get_val_loss", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "1", "-", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_val_loss2": [[121, 135], ["round", "nasbench.query", "len", "nasbench.query", "accs.append", "numpy.mean", "nas_lib.ModelSpec", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "", "def", "get_val_loss2", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "if", "not", "deterministic", ":", "\n", "# output one of the three validation accuracies at random", "\n", "            ", "return", "100", "*", "(", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", ")", "\n", "", "else", ":", "\n", "# query the api until we see all three accuracies, then average them", "\n", "# a few architectures only have two accuracies, so we use patience to avoid an infinite loop", "\n", "            ", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "                ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                    ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_val_loss_nn_pred": [[136, 148], ["accs.append", "test_accs.append", "len", "nasbench.query", "nasbench.query", "numpy.mean", "numpy.mean", "nas_lib.ModelSpec", "nas_lib.ModelSpec", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "", "def", "get_val_loss_nn_pred", "(", "self", ",", "nasbench", ",", "deterministic", "=", "1", ",", "patience", "=", "50", ")", ":", "\n", "        ", "accs", "=", "[", "]", "\n", "test_accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'validation_accuracy'", "]", "\n", "test_acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "# if acc not in accs:", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "# if test_acc not in test_accs:", "\n", "test_accs", ".", "append", "(", "test_acc", ")", "\n", "", "return", "100", "*", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "accs", ")", ")", ")", ",", "100", "*", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "test_accs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_test_loss": [[149, 161], ["round", "len", "nasbench.query", "accs.append", "nas_lib.ModelSpec", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "def", "get_test_loss", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "round", "(", "100", "*", "(", "1", "-", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_test_loss2": [[162, 174], ["round", "len", "nasbench.query", "accs.append", "numpy.mean", "nas_lib.ModelSpec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query"], ["", "def", "get_test_loss2", "(", "self", ",", "nasbench", ",", "patience", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        query the api until we see all three accuracies, then average them\n        a few architectures only have two accuracies, so we use patience to avoid an infinite loop\n        \"\"\"", "\n", "accs", "=", "[", "]", "\n", "while", "len", "(", "accs", ")", "<", "3", "and", "patience", ">", "0", ":", "\n", "            ", "patience", "-=", "1", "\n", "acc", "=", "nasbench", ".", "query", "(", "api", ".", "ModelSpec", "(", "matrix", "=", "self", ".", "matrix", ",", "ops", "=", "self", ".", "ops", ")", ")", "[", "'test_accuracy'", "]", "\n", "if", "acc", "not", "in", "accs", ":", "\n", "                ", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "return", "100", "*", "round", "(", "(", "np", ".", "mean", "(", "accs", ")", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.perturb": [[175, 199], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "numpy.random.random", "range", "range", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "def", "perturb", "(", "self", ",", "nasbench", ",", "edits", "=", "1", ")", ":", "\n", "        ", "\"\"\" \n        create new perturbed cell \n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                            ", "new_matrix", "[", "src", "]", "[", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", "]", "[", "dst", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "ind", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                        ", "available", "=", "[", "op", "for", "op", "in", "OPS", "if", "op", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "np", ".", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate": [[201, 227], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "def", "mutate", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "NUM_VERTICES", "\n", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "mutation_rate", "/", "OP_SPOTS", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate2": [[229, 269], ["copy.deepcopy", "copy.deepcopy", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "range", "copy.deepcopy", "copy.deepcopy", "random.random", "random.random", "random.choice", "OPS.index", "range", "OPS.index", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate2", "(", "self", ",", "nasbench", ",", "mutation_rate", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "iteration", "=", "0", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "vertices", "=", "self", ".", "matrix", ".", "shape", "[", "0", "]", "\n", "op_spots", "=", "vertices", "-", "2", "\n", "edge_mutation_prob", "=", "mutation_rate", "/", "vertices", "\n", "for", "src", "in", "range", "(", "0", ",", "vertices", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "vertices", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "if", "op_spots", "!=", "0", ":", "\n", "                ", "op_mutation_prob", "=", "mutation_rate", "/", "op_spots", "\n", "for", "ind", "in", "range", "(", "1", ",", "op_spots", "+", "1", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                        ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "new_ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "new_ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "iteration", "+=", "1", "\n", "if", "iteration", "==", "500", ":", "\n", "                ", "ops_idx", "=", "[", "-", "1", "]", "+", "[", "OPS", ".", "index", "(", "self", ".", "ops", "[", "idx", "]", ")", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "ops", ")", "-", "1", ")", "]", "+", "[", "-", "2", "]", "\n", "return", "{", "\n", "'matrix'", ":", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", ",", "\n", "'ops'", ":", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n", "", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'ops_idx'", ":", "ops_idx", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate_rates": [[271, 297], ["copy.deepcopy", "copy.deepcopy", "range", "range", "nas_lib.ModelSpec", "nasbench.is_valid", "range", "random.random", "random.choice", "random.random"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random"], ["", "", "", "def", "mutate_rates", "(", "self", ",", "nasbench", ",", "edge_rate", ",", "node_rate", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "while", "True", ":", "\n", "            ", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "h", ",", "w", "=", "new_matrix", ".", "shape", "\n", "edge_mutation_prob", "=", "edge_rate", "\n", "for", "src", "in", "range", "(", "0", ",", "h", "-", "1", ")", ":", "\n", "                ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "h", ")", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "edge_mutation_prob", ":", "\n", "                        ", "new_matrix", "[", "src", ",", "dst", "]", "=", "1", "-", "new_matrix", "[", "src", ",", "dst", "]", "\n", "\n", "", "", "", "op_mutation_prob", "=", "node_rate", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "op_mutation_prob", ":", "\n", "                    ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "new_ops", "[", "ind", "]", "=", "random", ".", "choice", "(", "available", ")", "\n", "\n", "", "", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", ":", "\n", "                ", "return", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell": [[299, 317], ["numpy.zeros", "range", "range", "tuple", "range", "OPS.index", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "", "", "def", "encode_cell", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the \"standard\" encoding,\n        i.e. adjacency matrix + op list encoding\n        \"\"\"", "\n", "OPS", "=", "[", "CONV3X3", ",", "CONV1X1", ",", "MAXPOOL3X3", ",", "ISOLATE", "]", "\n", "encoding_length", "=", "(", "NUM_VERTICES", "**", "2", "-", "NUM_VERTICES", ")", "//", "2", "+", "OP_SPOTS", "*", "len", "(", "OPS", ")", "\n", "encoding", "=", "np", ".", "zeros", "(", "(", "encoding_length", ")", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "encoding", "[", "n", "]", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "n", "+=", "1", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "op_idx", "=", "OPS", ".", "index", "(", "self", ".", "ops", "[", "i", "]", ")", "\n", "encoding", "[", "n", "+", "op_idx", "]", "=", "1", "\n", "n", "+=", "4", "\n", "", "return", "tuple", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_paths": [[318, 332], ["range", "range", "range", "paths.append", "paths.append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" \n        return all paths from input to output\n        \"\"\"", "\n", "paths", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "# create paths sequentially", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "path", "in", "paths", "[", "i", "]", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_path_indices": [[333, 352], ["nasbench_101_cell.Cell.get_paths", "tuple", "range", "len", "path_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_paths"], ["", "def", "get_path_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 3^0 + ... + 3^5 paths total.\n        (Paths can be length 0 to 5, and for each path, for each node, there\n        are three choices for the operation.)\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "path_indices", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "len", "(", "path", ")", ":", "\n", "                    ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "len", "(", "OPS", ")", "**", "i", "*", "(", "mapping", "[", "path", "[", "i", "]", "]", "+", "1", ")", "\n", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths": [[353, 361], ["sum", "nasbench_101_cell.Cell.get_path_indices", "numpy.zeros", "len", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "num_paths", "=", "sum", "(", "[", "len", "(", "OPS", ")", "**", "i", "for", "i", "in", "range", "(", "OP_SPOTS", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "num_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.path_distance": [[362, 368], ["numpy.sum", "numpy.array", "nasbench_101_cell.Cell.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\" \n        compute the distance between two architectures\n        by comparing their path encodings\n        \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.edit_distance": [[369, 377], ["numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "edit_distance", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        compute the distance between two architectures\n        by comparing their adjacency matrices and op lists\n        \"\"\"", "\n", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "matrix", ")", "!=", "np", ".", "array", "(", "other", ".", "matrix", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "ops", ")", "!=", "np", ".", "array", "(", "other", ".", "ops", ")", ")", "\n", "return", "graph_dist", "+", "ops_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.verify_correctness": [[378, 396], ["isinstance", "min", "numpy.sum", "numpy.sum", "dist_list.append", "isinstance", "numpy.sum", "numpy.sum", "dist_list.append", "NotImplementedError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["", "def", "verify_correctness", "(", "self", ",", "arch", ",", "data_list", ",", "edit_dist", ")", ":", "\n", "        ", "dist_list", "=", "[", "]", "\n", "new_matrix", "=", "arch", "[", "0", "]", "\n", "new_ops", "=", "arch", "[", "1", "]", "\n", "for", "d", "in", "data_list", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "if", "isinstance", "(", "arch", ",", "tuple", ")", ":", "\n", "                ", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "new_matrix", ")", "!=", "np", ".", "array", "(", "arch", "[", "0", "]", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "new_ops", ")", "!=", "np", ".", "array", "(", "arch", "[", "1", "]", ")", ")", "\n", "dist_list", ".", "append", "(", "graph_dist", "+", "ops_dist", ")", "\n", "", "elif", "isinstance", "(", "arch", ",", "dict", ")", ":", "\n", "                ", "graph_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "new_matrix", ")", "!=", "np", ".", "array", "(", "arch", "[", "'matrix'", "]", ")", ")", "\n", "ops_dist", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "new_ops", ")", "!=", "np", ".", "array", "(", "arch", "[", "'ops'", "]", ")", ")", "\n", "dist_list", ".", "append", "(", "graph_dist", "+", "ops_dist", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "flag", "=", "min", "(", "dist_list", ")", ">=", "edit_dist", "\n", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.generate_edit_compose": [[397, 401], ["list", "list", "range", "itertools.combinations", "len"], "methods", ["None"], ["", "def", "generate_edit_compose", "(", "self", ",", "edge_list", ",", "op_list", ",", "edit_distance", ")", ":", "\n", "        ", "total_list", "=", "edge_list", "+", "op_list", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "total_list", ")", ")", ")", "\n", "return", "list", "(", "it", ".", "combinations", "(", "idxs", ",", "edit_distance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate_edit_distance": [[402, 441], ["copy.deepcopy", "range", "nasbench_101_cell.Cell.generate_edit_compose", "random.shuffle", "copy.deepcopy", "copy.deepcopy", "nas_lib.utils.utils_data.find_isolate_node", "nas_lib.ModelSpec", "nasbench_101_cell.Cell.verify_correctness", "range", "range", "op_available_tuple.append", "nasbench.is_valid", "arch_list.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.generate_edit_compose", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.verify_correctness", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "def", "mutate_edit_distance", "(", "self", ",", "nasbench", ",", "edit_dist", ",", "candidate_num", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        similar to perturb. A stochastic approach to perturbing the cell\n        inspird by https://github.com/google-research/nasbench\n        \"\"\"", "\n", "arch_list", "=", "[", "]", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "edges", "=", "[", "(", "src", ",", "dst", ")", "for", "src", "in", "range", "(", "0", ",", "NUM_VERTICES", "-", "1", ")", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "NUM_VERTICES", ")", "]", "\n", "op_available_tuple", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "1", ",", "OP_SPOTS", "+", "1", ")", ":", "\n", "            ", "available", "=", "[", "o", "for", "o", "in", "OPS", "if", "o", "!=", "new_ops", "[", "ind", "]", "]", "\n", "for", "o", "in", "available", ":", "\n", "                ", "op_available_tuple", ".", "append", "(", "(", "ind", ",", "o", ")", ")", "\n", "\n", "", "", "idx_list", "=", "self", ".", "generate_edit_compose", "(", "edges", ",", "op_available_tuple", ",", "edit_dist", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "for", "edit_idx", "in", "idx_list", ":", "\n", "            ", "if", "edit_dist", ">", "1", "and", "len", "(", "arch_list", ")", ">=", "candidate_num", ":", "\n", "                ", "break", "\n", "", "new_matrix", "=", "copy", ".", "deepcopy", "(", "self", ".", "matrix", ")", "\n", "new_ops", "=", "copy", ".", "deepcopy", "(", "self", ".", "ops", ")", "\n", "\n", "for", "j", "in", "edit_idx", ":", "\n", "                ", "if", "j", ">=", "len", "(", "edges", ")", ":", "\n", "                    ", "nest_idx", "=", "op_available_tuple", "[", "j", "-", "len", "(", "edges", ")", "]", "\n", "new_ops", "[", "nest_idx", "[", "0", "]", "]", "=", "nest_idx", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "edge_conn", "=", "edges", "[", "j", "]", "\n", "new_matrix", "[", "edge_conn", "[", "0", "]", ",", "edge_conn", "[", "1", "]", "]", "=", "1", "-", "new_matrix", "[", "edge_conn", "[", "0", "]", ",", "edge_conn", "[", "1", "]", "]", "\n", "", "", "isolate_nodes", "=", "find_isolate_node", "(", "new_matrix", ")", "\n", "new_spec", "=", "api", ".", "ModelSpec", "(", "new_matrix", ",", "new_ops", ")", "\n", "flag", "=", "self", ".", "verify_correctness", "(", "(", "new_matrix", ",", "new_ops", ")", ",", "data", ",", "edit_dist", ")", "\n", "if", "nasbench", ".", "is_valid", "(", "new_spec", ")", "and", "flag", ":", "\n", "                ", "arch_list", ".", "append", "(", "{", "\n", "'matrix'", ":", "new_matrix", ",", "\n", "'ops'", ":", "new_ops", ",", "\n", "'isolate_node_idxs'", ":", "isolate_nodes", "\n", "}", ")", "\n", "", "", "return", "arch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.sort_seqs_list": [[442, 453], ["collections.defaultdict", "enumerate", "sorted", "seq_len_dict[].append", "list", "nas_lib.algos.algo_sort.quick_sort_list", "sorted_idxs.extend", "collections.defaultdict.keys", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort.quick_sort_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "sort_seqs_list", "(", "self", ",", "paths", ",", "paths_idx", ")", ":", "\n", "        ", "seq_len_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "paths", ")", ":", "\n", "            ", "seq_len_dict", "[", "len", "(", "p", ")", "]", ".", "append", "(", "idx", ")", "\n", "", "k_sorted", "=", "sorted", "(", "list", "(", "seq_len_dict", ".", "keys", "(", ")", ")", ")", "\n", "sorted_idxs", "=", "[", "]", "\n", "for", "k", "in", "k_sorted", ":", "\n", "            ", "paths_v", "=", "[", "(", "v_i", ",", "paths_idx", "[", "v_i", "]", ")", "for", "v_i", "in", "seq_len_dict", "[", "k", "]", "]", "\n", "sort_results", "=", "algo_sort", ".", "quick_sort_list", "(", "paths_v", ")", "\n", "sorted_idxs", ".", "extend", "(", "[", "k", "[", "0", "]", "for", "k", "in", "sort_results", "]", ")", "\n", "", "return", "[", "paths", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", ",", "[", "paths_idx", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_paths_seq_aware": [[454, 467], ["range", "range", "range", "paths.append", "paths.append", "paths_idx.append", "paths_idx.append", "enumerate", "paths[].append", "paths_idx[].append"], "methods", ["None"], ["", "def", "get_paths_seq_aware", "(", "self", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "paths_idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "NUM_VERTICES", ")", ":", "\n", "            ", "paths", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths", ".", "append", "(", "[", "]", ")", "\n", "paths_idx", ".", "append", "(", "[", "[", "]", "]", ")", "if", "self", ".", "matrix", "[", "0", "]", "[", "j", "]", "else", "paths_idx", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "NUM_VERTICES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "NUM_VERTICES", ")", ":", "\n", "                ", "if", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "for", "ids", ",", "path", "in", "enumerate", "(", "paths", "[", "i", "]", ")", ":", "\n", "                        ", "paths", "[", "j", "]", ".", "append", "(", "[", "*", "path", ",", "self", ".", "ops", "[", "i", "]", "]", ")", "\n", "paths_idx", "[", "j", "]", ".", "append", "(", "[", "*", "paths_idx", "[", "i", "]", "[", "ids", "]", ",", "i", "]", ")", "\n", "", "", "", "", "return", "paths", "[", "-", "1", "]", ",", "paths_idx", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware": [[468, 486], ["nasbench_101_cell.Cell.get_paths_seq_aware", "nasbench_101_cell.Cell.sort_seqs_list", "zip", "numpy.array", "numpy.zeros", "zip", "vectors_list.append", "numpy.concatenate.reshape", "numpy.zeros", "numpy.concatenate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.sort_seqs_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths_seq_aware", "(", "self", ",", "length", ")", ":", "\n", "        ", "\"\"\" output one-hot encoding of paths \"\"\"", "\n", "mapping", "=", "{", "CONV3X3", ":", "0", ",", "CONV1X1", ":", "1", ",", "MAXPOOL3X3", ":", "2", "}", "\n", "paths", ",", "paths_idx", "=", "self", ".", "get_paths_seq_aware", "(", ")", "\n", "paths", ",", "paths_idx", "=", "self", ".", "sort_seqs_list", "(", "paths", ",", "paths_idx", ")", "\n", "vectors_list", "=", "[", "]", "\n", "for", "(", "p_list", ",", "idx_list", ")", "in", "zip", "(", "paths", ",", "paths_idx", ")", ":", "\n", "            ", "vec", "=", "np", ".", "zeros", "(", "OP_SPOTS", "*", "len", "(", "OPS", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "p", ",", "ids", "in", "zip", "(", "p_list", ",", "idx_list", ")", ":", "\n", "                ", "vec", "[", "(", "ids", "-", "1", ")", "*", "len", "(", "OPS", ")", "+", "mapping", "[", "p", "]", "]", "=", "1", "\n", "", "vectors_list", ".", "append", "(", "vec", ")", "\n", "", "path_encoding", "=", "np", ".", "array", "(", "vectors_list", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "path_encoding", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "residual_len", "=", "length", "-", "path_encoding", ".", "shape", "[", "0", "]", "\n", "if", "residual_len", "!=", "0", ":", "\n", "            ", "residual_np", "=", "np", ".", "zeros", "(", "residual_len", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "np", ".", "concatenate", "(", "[", "path_encoding", ",", "residual_np", "]", ")", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_encoding": [[487, 496], ["nasbench_101_cell.Cell.encode_cell", "nasbench_101_cell.Cell.encode_paths", "nasbench_101_cell.Cell.encode_paths_seq_aware", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware"], ["", "def", "get_encoding", "(", "self", ",", "predictor_type", ",", "seq_len", ")", ":", "\n", "        ", "if", "predictor_type", "==", "'adj_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_cell", "(", ")", "\n", "", "elif", "predictor_type", "==", "'path_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_paths", "(", ")", "\n", "", "elif", "predictor_type", "==", "'path_enc_aware_vec'", ":", "\n", "            ", "return", "self", ".", "encode_paths_seq_aware", "(", "seq_len", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain._RepeatSampler.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain._RepeatSampler.__iter__": [[17, 20], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.FastDataLoader.__init__": [[24, 28], ["super().__init__", "object.__setattr__", "super().__iter__", "cifar10_dataset_retrain._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.FastDataLoader.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.FastDataLoader.__iter__": [[32, 35], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.Cutout.__init__": [[141, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.Cutout.__call__": [[144, 160], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_full_train_loader": [[52, 64], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_full_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_full_test_loader": [[66, 78], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_full_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "test_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "transform", ",", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_train_and_val_loader": [[80, 99], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len", "list", "int", "cifar10_dataset_retrain.FastDataLoader", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "range", "numpy.floor", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_and_val_loader", "(", "root_path", ",", "train_portion", "=", "0.7", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "num_train", "=", "len", "(", "train_set", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ")", "\n", "val_loader", "=", "FastDataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_train_loader": [[101, 114], ["cifar10_dataset_retrain.Cifar10Train", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_train_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "size", "=", "32", ",", "padding", "=", "(", "4", ",", "4", ",", "4", ",", "4", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "trainset", "=", "Cifar10Train", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "trainloader", "=", "FastDataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_val_loader": [[116, 126], ["cifar10_dataset_retrain.Cifar10Val", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_val_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "valset", "=", "Cifar10Val", "(", "root", "=", "root_path", ",", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "valloader", "=", "FastDataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "valloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.get_cifar10_test_loader": [[128, 138], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "cifar10_dataset_retrain.FastDataLoader", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_cifar10_test_loader", "(", "root_path", ",", "transform", "=", "None", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", ")", "]", ")", "\n", "", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root_path", ",", "train", "=", "False", ",", "\n", "download", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "FastDataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.cifar10_dataset_retrain.transforms_cifar10": [[162, 180], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "cifar10_dataset_retrain.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "transforms_cifar10", "(", "cutout", ",", "cutout_length", ")", ":", "\n", "    ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.__init__": [[14, 19], ["nasbench.api.NASBench", "nasbench_101.NASBench101.get_clean_dummy_arch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_clean_dummy_arch"], ["    ", "def", "__init__", "(", "self", ",", "search_space", "=", "None", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "nasbench", "=", "api", ".", "NASBench", "(", "tf_records_path_108", ")", "\n", "self", ".", "total_archs", ",", "self", ".", "total_keys", "=", "self", ".", "get_clean_dummy_arch", "(", ")", "\n", "self", ".", "ops_t", "=", "[", "'conv3x3-bn-relu'", ",", "'conv1x1-bn-relu'", ",", "'maxpool3x3'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset": [[20, 54], ["random.sample", "key_list.append", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "nas_lib.data.nasbench_101_cell.Cell().encode_paths", "map", "data.append", "len", "nas_lib.data.nasbench_101_cell.Cell().encode_cell", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware.tolist", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "ValueError", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware"], ["", "def", "generate_random_dataset", "(", "self", ",", "num", ",", "algo_name", "=", "'bananas'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", "\n", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "key_list", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "k", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "\n", "key_list", ".", "append", "(", "k", ")", "\n", "arch", "=", "self", ".", "total_archs", "[", "k", "[", "0", "]", "]", "\n", "if", "algo_name", "==", "'bananas'", ":", "\n", "                ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths", "(", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "                ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_cell", "(", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "                ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Value error!'", ")", "\n", "# path_indices = self.get_path_indices({'matrix': arch['matrix'], 'ops': arch['ops']})", "\n", "", "path_indices", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "path_indices", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_indices", ".", "tolist", "(", ")", ")", ")", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "(", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ",", "[", "]", ")", ",", "\n", "arch", "[", "'o_matrix'", "]", ",", "\n", "arch", "[", "'o_ops'", "]", ",", "\n", "encoding", ",", "\n", "(", "1", "-", "arch", "[", "'val'", "]", ")", "*", "100", ",", "\n", "(", "1", "-", "arch", "[", "'test'", "]", ")", "*", "100", ",", "\n", "arch", "[", "'key'", "]", ")", ")", "\n", "", "if", "len", "(", "data", ")", "==", "num", ":", "\n", "                ", "break", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_candidates": [[55, 101], ["nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "enumerate", "map", "range", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware.tolist", "len", "nasbench_101.NASBench101.mutate_arch", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "sorted", "map", "candidates.append", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware.tolist"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.mutate_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "get_candidates", "(", "self", ",", "\n", "data", ",", "\n", "num", "=", "100", ",", "\n", "acq_opt_type", "=", "'mutation'", ",", "\n", "encode_paths", "=", "True", ",", "\n", "algo_name", "=", "'bananas'", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "patience_factor", "=", "5", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "num_best_arches", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "candidates", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "for", "d", "in", "data", ":", "\n", "# arch = {'matrix': d[0][0], 'ops': d[0][1]}", "\n", "# path_indices = self.get_path_indices(arch)", "\n", "            ", "path_indices", "=", "Cell", "(", "matrix", "=", "d", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "d", "[", "0", "]", "[", "1", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "path_indices", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_indices", ".", "tolist", "(", ")", ")", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "mutate_arch_dict", "=", "{", "}", "\n", "if", "acq_opt_type", "in", "[", "'mutation'", ",", "'mutation_random'", "]", ":", "\n", "# mutate architectures with the lowest validation error", "\n", "            ", "best_arches", "=", "[", "{", "'matrix'", ":", "arch", "[", "1", "]", ",", "'ops'", ":", "arch", "[", "2", "]", "}", "\n", "for", "arch", "in", "sorted", "(", "data", ",", "key", "=", "lambda", "i", ":", "i", "[", "4", "]", ")", "[", ":", "num_best_arches", "*", "patience_factor", "]", "]", "\n", "# stop when candidates is size num", "\n", "# use patience_factor instead of a while loop to avoid long or infinite runtime", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "best_arches", ")", ":", "\n", "                ", "if", "len", "(", "candidates", ")", ">=", "num", ":", "\n", "                    ", "break", "\n", "", "mutate_arch_dict", "[", "idx", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "mutated", "=", "self", ".", "mutate_arch", "(", "arch", ",", "encode_paths", ",", "algo_name", "=", "algo_name", ",", "require_distance", "=", "True", ")", "\n", "# path_indices = self.get_path_indices({'matrix': mutated[0][0],", "\n", "#                                       'ops': mutated[0][1]})", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "mutated", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "mutated", "[", "0", "]", "[", "1", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "path_indices", "=", "''", ".", "join", "(", "map", "(", "str", ",", "path_indices", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                        ", "dic", "[", "path_indices", "]", "=", "1", "\n", "candidates", ".", "append", "(", "mutated", ")", "\n", "mutate_arch_dict", "[", "idx", "]", "+=", "1", "\n", "", "", "", "", "return", "candidates", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_path_indices": [[102, 104], ["nas_lib.data.nasbench_101_cell.Cell().get_path_indices", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices"], ["", "def", "get_path_indices", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "get_path_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.mutate_arch": [[105, 119], ["nas_lib.data.nasbench_101_cell.Cell().mutate2", "nasbench_101.NASBench101.query_arch", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate2", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch"], ["", "def", "mutate_arch", "(", "self", ",", "arch", ",", "encode_paths", "=", "True", ",", "mutation_rate", "=", "1.0", ",", "algo_name", "=", "'bananas'", ",", "require_distance", "=", "False", ",", "\n", "memory_array", "=", "None", ",", "distance_list", "=", "None", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "arch_mutate", "=", "Cell", "(", "**", "{", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "'ops'", ":", "arch", "[", "'ops'", "]", "}", ")", ".", "mutate2", "(", "self", ".", "nasbench", ",", "mutation_rate", ")", "\n", "matrix", "=", "arch_mutate", "[", "'matrix'", "]", "\n", "ops", "=", "arch_mutate", "[", "'ops'", "]", "\n", "results", "=", "self", ".", "query_arch", "(", "matrix", "=", "matrix", ",", "\n", "ops", "=", "ops", ",", "\n", "algo_name", "=", "algo_name", ",", "\n", "encode_paths", "=", "encode_paths", ",", "\n", "require_distance", "=", "require_distance", ")", "\n", "if", "results", ":", "\n", "                ", "break", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.matrix_dummy_nodes": [[120, 133], ["numpy.zeros", "range", "nas_lib.utils.utils_data.find_isolate_node", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node"], ["", "def", "matrix_dummy_nodes", "(", "self", ",", "matrix_in", ",", "ops_in", ")", ":", "\n", "# {2, 3, 4, 5, 6, 7}", "\n", "        ", "matrix", "=", "np", ".", "zeros", "(", "(", "NUM_VERTICES", ",", "NUM_VERTICES", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "i", "in", "range", "(", "matrix_in", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "where", "(", "matrix_in", "[", "i", "]", "==", "1", ")", "\n", "for", "id", "in", "idxs", "[", "0", "]", ":", "\n", "                ", "if", "id", "==", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                    ", "matrix", "[", "i", ",", "6", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "matrix", "[", "i", ",", "id", "]", "=", "1", "\n", "", "", "", "ops", "=", "ops_in", "[", ":", "(", "matrix_in", ".", "shape", "[", "0", "]", "-", "1", ")", "]", "+", "[", "'isolate'", "]", "*", "(", "7", "-", "matrix_in", ".", "shape", "[", "0", "]", ")", "+", "ops_in", "[", "-", "1", ":", "]", "\n", "find_isolate_node", "(", "matrix", ")", "\n", "return", "matrix", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch": [[134, 183], ["matrix.astype.astype.astype", "nasbench.api.ModelSpec", "nasbench.api.ModelSpec.hash_spec", "nasbench_101.NASBench101.matrix_dummy_nodes", "nas_lib.data.nasbench_101_cell.Cell().get_val_loss", "nas_lib.data.nasbench_101_cell.Cell().get_test_loss", "nas_lib.data.nasbench_101_cell.Cell().encode_paths", "nas_lib.data.nasbench_101_cell.Cell().encode_cell", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "ValueError", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.hash_spec", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_test_loss", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware"], ["", "def", "query_arch", "(", "self", ",", "\n", "matrix", ",", "\n", "ops", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic", "=", "True", ",", "\n", "algo_name", "=", "'bananas'", ",", "\n", "require_distance", "=", "False", ")", ":", "\n", "        ", "matrix", "=", "matrix", ".", "astype", "(", "np", ".", "int8", ")", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", "\n", "key", "=", "model_spec", ".", "hash_spec", "(", "self", ".", "ops_t", ")", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "            ", "return", "None", "\n", "\n", "", "o_matrix", "=", "model_spec", ".", "matrix", "\n", "o_ops", "=", "model_spec", ".", "ops", "\n", "\n", "if", "key", "in", "self", ".", "total_keys", ":", "\n", "            ", "matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'ops'", "]", "\n", "val_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'val'", "]", ")", "\n", "test_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'test'", "]", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n", "", "else", ":", "\n", "            ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "o_matrix", ",", "o_ops", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", "\n", "}", "\n", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "deterministic", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "\n", "", "if", "algo_name", "==", "'bananas'", ":", "\n", "            ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths", "(", ")", "\n", "", "elif", "algo_name", "==", "'bananas_f'", ":", "\n", "            ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_cell", "(", ")", "\n", "", "elif", "algo_name", "==", "'bananas_context'", ":", "\n", "            ", "encoding", "=", "Cell", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Value error!'", ")", "\n", "", "return", "[", "(", "matrix", ",", "ops", ",", "[", "]", ")", ",", "\n", "o_matrix", ",", "\n", "o_ops", ",", "\n", "encoding", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.get_clean_dummy_arch": [[184, 225], ["nasbench.api.ModelSpec", "range", "float", "float", "nas_lib.data.nasbench_101_cell.Cell().encode_paths_seq_aware", "nasbench_101.NASBench101.matrix_dummy_nodes", "arch_matrix.astype", "nas_lib.utils.utils_data.find_isolate_node", "nasbench_101.NASBench101.nasbench.is_valid", "val_acc.append", "test_acc.append", "numpy.mean", "numpy.mean", "len", "print", "print", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_paths_seq_aware", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_data.find_isolate_node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid"], ["", "def", "get_clean_dummy_arch", "(", "self", ")", ":", "\n", "        ", "total_arch", "=", "{", "}", "\n", "total_keys", "=", "[", "k", "for", "k", "in", "self", ".", "nasbench", ".", "computed_statistics", "]", "\n", "\n", "for", "k", "in", "total_keys", ":", "\n", "            ", "val_acc", "=", "[", "]", "\n", "test_acc", "=", "[", "]", "\n", "arch_matrix", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_adjacency'", "]", "\n", "arch_ops", "=", "self", ".", "nasbench", ".", "fixed_statistics", "[", "k", "]", "[", "'module_operations'", "]", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "<", "7", ":", "\n", "                ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "arch_matrix", ",", "arch_ops", ")", "\n", "", "else", ":", "\n", "                ", "matrix", "=", "arch_matrix", ".", "astype", "(", "np", ".", "int16", ")", "\n", "ops", "=", "arch_ops", "\n", "", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "arch_matrix", ",", "ops", "=", "arch_ops", ")", "\n", "if", "arch_matrix", ".", "shape", "[", "0", "]", "==", "7", ":", "\n", "                ", "isolate_list", "=", "find_isolate_node", "(", "arch_matrix", ")", "\n", "if", "len", "(", "isolate_list", ")", ">=", "1", ":", "\n", "                    ", "print", "(", "arch_matrix", ")", "\n", "print", "(", "isolate_list", ")", "\n", "", "", "if", "not", "self", ".", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "continue", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "val_acc", ".", "append", "(", "self", ".", "nasbench", ".", "computed_statistics", "[", "k", "]", "[", "108", "]", "[", "i", "]", "[", "'final_validation_accuracy'", "]", ")", "\n", "test_acc", ".", "append", "(", "self", ".", "nasbench", ".", "computed_statistics", "[", "k", "]", "[", "108", "]", "[", "i", "]", "[", "'final_test_accuracy'", "]", ")", "\n", "", "val_mean", "=", "float", "(", "np", ".", "mean", "(", "val_acc", ")", ")", "\n", "test_mean", "=", "float", "(", "np", ".", "mean", "(", "test_acc", ")", ")", "\n", "path_indices", "=", "Cell", "(", "matrix", "=", "matrix", ",", "ops", "=", "ops", ")", ".", "encode_paths_seq_aware", "(", "length", "=", "120", ")", "\n", "total_arch", "[", "k", "]", "=", "{", "\n", "# 'o_matrix': arch_matrix.astype(np.float32),", "\n", "'o_matrix'", ":", "arch_matrix", ",", "\n", "'o_ops'", ":", "arch_ops", ",", "\n", "# 'matrix': matrix.astype(np.float32),", "\n", "'matrix'", ":", "matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'val'", ":", "val_mean", ",", "\n", "'test'", ":", "test_mean", ",", "\n", "'key'", ":", "k", ",", "\n", "'path_indices'", ":", "path_indices", "\n", "}", "\n", "", "return", "total_arch", ",", "total_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_random_dataset_both": [[227, 257], ["len", "nasbench_101.NASBench101.query_arch_both", "nasbench_101.NASBench101.get_path_indices", "data.append"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch_both", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices"], ["", "def", "generate_random_dataset_both", "(", "self", ",", "\n", "num", "=", "10", ",", "\n", "train", "=", "True", ",", "\n", "allow_isomorphisms", "=", "False", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "patience_factor", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        create a dataset of randomly sampled architectues\n        test for isomorphisms using a hash map of path indices\n        use patience_factor to avoid infinite loops\n        \"\"\"", "\n", "data", "=", "[", "]", "\n", "dic", "=", "{", "}", "\n", "tries_left", "=", "num", "*", "patience_factor", "\n", "while", "len", "(", "data", ")", "<", "num", ":", "\n", "            ", "tries_left", "-=", "1", "\n", "if", "tries_left", "<=", "0", ":", "\n", "                ", "break", "\n", "", "archtuple", "=", "self", ".", "query_arch_both", "(", "train", "=", "train", ",", "\n", "deterministic", "=", "deterministic_loss", ")", "\n", "arch_temp", "=", "{", "\n", "'matrix'", ":", "archtuple", "[", "0", "]", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "archtuple", "[", "0", "]", "[", "'ops'", "]", "\n", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch_temp", ")", "\n", "\n", "if", "allow_isomorphisms", "or", "path_indices", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path_indices", "]", "=", "1", "\n", "data", ".", "append", "(", "archtuple", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch_both": [[258, 275], ["nas_lib.data.nasbench_101_cell.Cell().encode_paths", "nas_lib.data.nasbench_101_cell.Cell().encode_cell", "nasbench_101.NASBench101.random_cell_gnn", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.encode_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.random_cell_gnn"], ["", "def", "query_arch_both", "(", "self", ",", "\n", "arch", "=", "None", ",", "\n", "train", "=", "True", ",", "\n", "deterministic", "=", "True", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "self", ".", "random_cell_gnn", "(", "self", ".", "nasbench", ")", "\n", "", "arch_temp", "=", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "\n", "}", "\n", "encoding", "=", "Cell", "(", "**", "arch_temp", ")", ".", "encode_paths", "(", ")", "\n", "encoding_f", "=", "Cell", "(", "**", "arch_temp", ")", ".", "encode_cell", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "return", "arch", ",", "encoding", ",", "encoding_f", ",", "arch", "[", "'val_loss'", "]", ",", "arch", "[", "'test_loss'", "]", "\n", "", "else", ":", "\n", "            ", "return", "arch", ",", "encoding", ",", "encoding_f", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.random_cell_gnn": [[276, 307], ["nasbench.api.ModelSpec", "nasbench.is_valid", "random.sample", "nasbench.api.ModelSpec.hash_spec", "nasbench_101.NASBench101.matrix_dummy_nodes", "nas_lib.data.nasbench_101_cell.Cell().get_val_loss", "nas_lib.data.nasbench_101_cell.Cell().get_test_loss", "nas_lib.data.nasbench_101_cell.Cell", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid", "home.repos.pwc.inspect_result.auroua_SSNENAS.NP_NAS.agent.BaseAgent.sample", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.hash_spec", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.matrix_dummy_nodes", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_val_loss", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.get_test_loss"], ["", "", "def", "random_cell_gnn", "(", "self", ",", "nasbench", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "key", "=", "random", ".", "sample", "(", "self", ".", "total_keys", ",", "1", ")", "[", "0", "]", "\n", "architecture", "=", "self", ".", "total_archs", "[", "key", "]", "\n", "spec", "=", "api", ".", "ModelSpec", "(", "matrix", "=", "architecture", "[", "'o_matrix'", "]", ",", "ops", "=", "architecture", "[", "'o_ops'", "]", ")", "\n", "\n", "if", "nasbench", ".", "is_valid", "(", "spec", ")", ":", "\n", "                ", "key", "=", "spec", ".", "hash_spec", "(", "self", ".", "ops_t", ")", "\n", "\n", "o_matrix", ",", "o_ops", "=", "spec", ".", "matrix", ",", "spec", ".", "ops", "\n", "if", "key", "in", "self", ".", "total_keys", ":", "\n", "                    ", "matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'matrix'", "]", "\n", "ops", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'ops'", "]", "\n", "o_matrix", "=", "self", ".", "total_archs", "[", "key", "]", "[", "'o_matrix'", "]", "\n", "val_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'val'", "]", ")", "\n", "test_loss", "=", "100", "*", "(", "1", "-", "self", ".", "total_archs", "[", "key", "]", "[", "'test'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "matrix", ",", "ops", "=", "self", ".", "matrix_dummy_nodes", "(", "o_matrix", ",", "o_ops", ")", "\n", "arch", "=", "{", "\n", "'matrix'", ":", "o_matrix", ",", "\n", "'ops'", ":", "o_ops", "\n", "}", "\n", "val_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_val_loss", "(", "self", ".", "nasbench", ",", "True", ")", "\n", "test_loss", "=", "Cell", "(", "**", "arch", ")", ".", "get_test_loss", "(", "self", ".", "nasbench", ")", "\n", "", "return", "{", "\n", "'matrix'", ":", "matrix", ",", "\n", "'matrix_orig'", ":", "o_matrix", ",", "\n", "'ops'", ":", "ops", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", ",", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "'test_loss'", ":", "test_loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.remove_duplicates_both": [[309, 324], ["hashlib.sha256().hexdigest", "keys.append", "hashlib.sha256().hexdigest", "unduplicated.append", "hashlib.sha256", "hashlib.sha256", "str().encode", "str().encode", "str", "str", "d[].tolist", "candidate[].tolist"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "", "", "def", "remove_duplicates_both", "(", "self", ",", "candidates", ",", "data", ")", ":", "\n", "# input: two sets of architectues: candidates and data", "\n", "# output: candidates with arches from data removed", "\n", "        ", "keys", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "k", "=", "sha256", "(", "str", "(", "d", "[", "1", "]", ".", "tolist", "(", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "keys", ".", "append", "(", "k", ")", "\n", "", "unduplicated", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "k_c", "=", "sha256", "(", "str", "(", "candidate", "[", "1", "]", ".", "tolist", "(", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "k_c", "in", "keys", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "unduplicated", ".", "append", "(", "candidate", ")", "\n", "", "", "return", "unduplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_data_with_fix_edit_distance": [[325, 327], ["nas_lib.data.nasbench_101_cell.Cell().mutate_edit_distance", "nas_lib.data.nasbench_101_cell.Cell"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101_cell.Cell.mutate_edit_distance"], ["", "def", "generate_data_with_fix_edit_distance", "(", "self", ",", "arch", ",", "edit_dist", ",", "candidate_num", ",", "data", ")", ":", "\n", "        ", "return", "Cell", "(", "**", "arch", ")", ".", "mutate_edit_distance", "(", "self", ".", "nasbench", ",", "edit_dist", ",", "candidate_num", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_candidates_fix_edit_distance": [[328, 375], ["enumerate", "nasbench_101.NASBench101.get_path_indices", "nasbench_101.NASBench101.generate_data_with_fix_edit_distance", "results_list.extend", "nasbench_101.NASBench101.get_path_indices", "nasbench_101.NASBench101.query_arch", "arch_tuple_list.append", "results_filtered.append"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_data_with_fix_edit_distance", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.query_arch"], ["", "def", "generate_candidates_fix_edit_distance", "(", "self", ",", "\n", "data", ",", "\n", "edit_dist", ",", "\n", "encode_paths", "=", "True", ",", "\n", "deterministic_loss", "=", "True", ",", "\n", "candidate_num", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Creates a set of candidate architectures with mutated and/or random architectures\n        \"\"\"", "\n", "# test for isomorphisms using a hash map of path indices", "\n", "dic", "=", "{", "}", "\n", "results_dict", "=", "{", "}", "\n", "results_list", "=", "[", "]", "\n", "results_filtered", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "            ", "arch", "=", "d", "[", "0", "]", "\n", "arch_dict", "=", "{", "'matrix'", ":", "arch", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "1", "]", ",", "\n", "'isolate_node_idxs'", ":", "arch", "[", "2", "]", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch_dict", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "\n", "", "arches", "=", "[", "{", "'matrix'", ":", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'isolate_node_idxs'", ":", "arch", "[", "0", "]", "[", "2", "]", "}", "for", "arch", "in", "data", "]", "\n", "for", "idx", ",", "d", "in", "enumerate", "(", "arches", ")", ":", "\n", "            ", "arch_tuple_list", "=", "[", "]", "\n", "gen_archs", "=", "self", ".", "generate_data_with_fix_edit_distance", "(", "d", ",", "edit_dist", ",", "candidate_num", ",", "data", ")", "\n", "for", "arch", "in", "gen_archs", ":", "\n", "                ", "archtuple", "=", "self", ".", "query_arch", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "\n", "ops", "=", "arch", "[", "'ops'", "]", ",", "\n", "deterministic", "=", "deterministic_loss", ",", "\n", "encode_paths", "=", "encode_paths", ")", "\n", "arch_tuple_list", ".", "append", "(", "archtuple", ")", "\n", "", "results_dict", "[", "idx", "]", "=", "arch_tuple_list", "\n", "results_list", ".", "extend", "(", "arch_tuple_list", ")", "\n", "\n", "", "for", "archt", "in", "results_list", ":", "\n", "            ", "arch", "=", "archt", "[", "0", "]", "\n", "arch_dict", "=", "{", "'matrix'", ":", "arch", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "1", "]", ",", "\n", "'isolate_node_idxs'", ":", "arch", "[", "2", "]", "}", "\n", "path_indices", "=", "self", ".", "get_path_indices", "(", "arch_dict", ")", "\n", "if", "path_indices", "not", "in", "dic", ":", "\n", "                ", "results_filtered", ".", "append", "(", "archt", ")", "\n", "dic", "[", "path_indices", "]", "=", "1", "\n", "", "", "return", "results_dict", ",", "results_list", ",", "results_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.nasbench_101.NASBench101.generate_all_archs": [[376, 398], ["total_archs_list.append", "nasbench_101.NASBench101.get_path_indices", "total_archs_filtered_list.append"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices"], ["", "def", "generate_all_archs", "(", "self", ")", ":", "\n", "        ", "dic", "=", "{", "}", "\n", "total_archs_list", "=", "[", "]", "\n", "total_archs_filtered_list", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "total_keys", ":", "\n", "            ", "arch_full", "=", "self", ".", "total_archs", "[", "k", "]", "\n", "arch", "=", "{", "'matrix'", ":", "arch_full", "[", "'matrix'", "]", ",", "\n", "'ops'", ":", "arch_full", "[", "'ops'", "]", ",", "\n", "'isolate_node_idxs'", ":", "[", "]", "}", "\n", "arch_tuple", "=", "(", "\n", "arch", ",", "\n", "' '", ",", "\n", "arch_full", "[", "'val'", "]", ",", "\n", "arch_full", "[", "'test'", "]", "\n", ")", "\n", "total_archs_list", ".", "append", "(", "arch_tuple", ")", "\n", "\n", "path", "=", "self", ".", "get_path_indices", "(", "arch", ")", "\n", "if", "path", "not", "in", "dic", ":", "\n", "                ", "dic", "[", "path", "]", "=", "1", "\n", "total_archs_filtered_list", ".", "append", "(", "arch_tuple", ")", "\n", "", "", "return", "total_archs_list", ",", "total_archs_filtered_list", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.__init__": [[12, 18], ["data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "batch", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Batch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "__data_class__", "=", "Data", "\n", "self", ".", "__slices__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.from_data_list": [[19, 88], ["list", "Batch.Batch", "enumerate", "Batch.contiguous", "set", "set.union", "torch.is_tensor", "torch.is_tensor", "Batch.__slices__[].append", "batch[].append", "torch.full", "Batch.batch.append", "torch.cat", "torch.is_tensor", "torch.full.size", "data.__inc__", "torch.full", "batch[].append", "isinstance", "isinstance", "torch.tensor", "data.__cat_dim__", "data_list[].__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contiguous", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__inc__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__"], ["", "@", "staticmethod", "\n", "def", "from_data_list", "(", "data_list", ",", "follow_batch", "=", "[", "]", ")", ":", "\n", "        ", "r\"\"\"Constructs a batch object from a python list holding\n        :class:`torch_geometric.data.Data` objects.\n        The assignment vector :obj:`batch` is created on the fly.\n        Additionally, creates assignment batch vectors for each key in\n        :obj:`follow_batch`.\"\"\"", "\n", "\n", "keys", "=", "[", "set", "(", "data", ".", "keys", ")", "for", "data", "in", "data_list", "]", "\n", "keys", "=", "list", "(", "set", ".", "union", "(", "*", "keys", ")", ")", "\n", "assert", "'batch'", "not", "in", "keys", "\n", "\n", "batch", "=", "Batch", "(", ")", "\n", "batch", ".", "__data_class__", "=", "data_list", "[", "0", "]", ".", "__class__", "\n", "batch", ".", "__slices__", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "keys", "}", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "batch", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "key", "in", "follow_batch", ":", "\n", "            ", "batch", "[", "'{}_batch'", ".", "format", "(", "key", ")", "]", "=", "[", "]", "\n", "\n", "", "cumsum", "=", "{", "key", ":", "0", "for", "key", "in", "keys", "}", "\n", "batch", ".", "batch", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_list", ")", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", ":", "\n", "                ", "item", "=", "data", "[", "key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", "and", "item", ".", "dtype", "!=", "torch", ".", "bool", ":", "\n", "                    ", "item", "=", "item", "+", "cumsum", "[", "key", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                    ", "size", "=", "item", ".", "size", "(", "data", ".", "__cat_dim__", "(", "key", ",", "data", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "size", "=", "1", "\n", "", "batch", ".", "__slices__", "[", "key", "]", ".", "append", "(", "size", "+", "batch", ".", "__slices__", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "cumsum", "[", "key", "]", "=", "cumsum", "[", "key", "]", "+", "data", ".", "__inc__", "(", "key", ",", "item", ")", "\n", "batch", "[", "key", "]", ".", "append", "(", "item", ")", "\n", "\n", "if", "key", "in", "follow_batch", ":", "\n", "                    ", "item", "=", "torch", ".", "full", "(", "(", "size", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", "[", "'{}_batch'", ".", "format", "(", "key", ")", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "num_nodes", "=", "data", ".", "num_nodes", "\n", "if", "num_nodes", "is", "not", "None", ":", "\n", "                ", "item", "=", "torch", ".", "full", "(", "(", "num_nodes", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", ".", "batch", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "num_nodes", "is", "None", ":", "\n", "            ", "batch", ".", "batch", "=", "None", "\n", "\n", "", "for", "key", "in", "batch", ".", "keys", ":", "\n", "            ", "item", "=", "batch", "[", "key", "]", "[", "0", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "cat", "(", "batch", "[", "key", "]", ",", "\n", "dim", "=", "data_list", "[", "0", "]", ".", "__cat_dim__", "(", "key", ",", "item", ")", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", "or", "isinstance", "(", "item", ",", "float", ")", ":", "\n", "                ", "batch", "[", "key", "]", "=", "torch", ".", "tensor", "(", "batch", "[", "key", "]", ")", "\n", "\n", "# Copy custom data functions to batch (does not work yet):", "\n", "# if data_list.__class__ != Data:", "\n", "#     org_funcs = set(Data.__dict__.keys())", "\n", "#     funcs = set(data_list[0].__class__.__dict__.keys())", "\n", "#     batch.__custom_funcs__ = funcs.difference(org_funcs)", "\n", "#     for func in funcs.difference(org_funcs):", "\n", "#         setattr(batch, func, getattr(data_list[0], func))", "\n", "\n", "# if torch_geometric.is_debug_enabled():", "\n", "#     batch.debug()", "\n", "\n", "", "", "return", "batch", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.to_data_list": [[89, 120], ["range", "RuntimeError", "batch.Batch.__data_class__", "data_list.append", "len", "torch.is_tensor", "batch.Batch.narrow", "batch.Batch.__inc__", "batch.Batch.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__inc__", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__"], ["", "def", "to_data_list", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Reconstructs the list of :class:`torch_geometric.data.Data` objects\n        from the batch object.\n        The batch object must have been created via :meth:`from_data_list` in\n        order to be able reconstruct the initial objects.\"\"\"", "\n", "\n", "if", "self", ".", "__slices__", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "(", "'Cannot reconstruct data list from batch because the batch '", "\n", "'object was not created using Batch.from_data_list()'", ")", ")", "\n", "\n", "", "keys", "=", "[", "key", "for", "key", "in", "self", ".", "keys", "if", "key", "[", "-", "5", ":", "]", "!=", "'batch'", "]", "\n", "cumsum", "=", "{", "key", ":", "0", "for", "key", "in", "keys", "}", "\n", "data_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "__slices__", "[", "keys", "[", "0", "]", "]", ")", "-", "1", ")", ":", "\n", "            ", "data", "=", "self", ".", "__data_class__", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "self", "[", "key", "]", ")", ":", "\n", "                    ", "data", "[", "key", "]", "=", "self", "[", "key", "]", ".", "narrow", "(", "\n", "data", ".", "__cat_dim__", "(", "key", ",", "\n", "self", "[", "key", "]", ")", ",", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ",", "\n", "self", ".", "__slices__", "[", "key", "]", "[", "i", "+", "1", "]", "-", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ")", "\n", "if", "self", "[", "key", "]", ".", "dtype", "!=", "torch", ".", "bool", ":", "\n", "                        ", "data", "[", "key", "]", "=", "data", "[", "key", "]", "-", "cumsum", "[", "key", "]", "\n", "", "", "else", ":", "\n", "                    ", "data", "[", "key", "]", "=", "self", "[", "key", "]", "[", "self", ".", "__slices__", "[", "key", "]", "[", "i", "]", ":", "self", ".", "\n", "__slices__", "[", "key", "]", "[", "i", "+", "1", "]", "]", "\n", "", "cumsum", "[", "key", "]", "=", "cumsum", "[", "key", "]", "+", "data", ".", "__inc__", "(", "key", ",", "data", "[", "key", "]", ")", "\n", "", "data_list", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.batch.Batch.num_graphs": [[121, 125], ["batch.Batch.batch[].item"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of graphs in the batch.\"\"\"", "\n", "return", "self", ".", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__init__": [[59, 73], ["kwargs.items"], "methods", ["None"], ["        ", "arch", "=", "total_archs", "[", "k", "]", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "            ", "cell_inst", "=", "Cell_101", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "            ", "cell_inst", "=", "Cell_201", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "test_data", ".", "append", "(", "\n", "{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.from_dict": [[74, 83], ["cls", "dictionary.items"], "methods", ["None"], ["'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", "\n", "}", "\n", ")", "\n", "", "return", "train_data", ",", "test_data", "\n", "\n", "\n", "", "def", "dataset_all", "(", "args", ",", "nas_dataset", ")", ":", "\n", "    ", "total_keys", "=", "nas_dataset", ".", "total_keys", "\n", "total_archs", "=", "nas_dataset", ".", "total_archs", "\n", "all_archs", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__getitem__": [[84, 87], ["getattr"], "methods", ["None"], ["\n", "flag", "=", "args", ".", "search_space", "==", "'nasbench_101'", "\n", "for", "k", "in", "total_keys", ":", "\n", "        ", "arch", "=", "total_archs", "[", "k", "]", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__setitem__": [[88, 91], ["setattr"], "methods", ["None"], ["if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "            ", "cell_inst", "=", "Cell_101", "(", "matrix", "=", "arch", "[", "'matrix'", "]", ",", "ops", "=", "arch", "[", "'ops'", "]", ")", "\n", "edge_index", ",", "node_f", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ")", ")", "\n", "g_data", "=", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys": [[92, 98], ["data.Data.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["seminas_vec", "=", "convert_arch_to_seq", "(", "arch", "[", "'o_matrix'", "]", ",", "arch", "[", "'o_ops'", "]", ")", "\n", "edge_index_reverse", ",", "node_f_reverse", "=", "nasbench2graph_reverse", "(", "(", "arch", "[", "'matrix'", "]", ",", "arch", "[", "'ops'", "]", ")", ",", "reverse", "=", "True", ")", "\n", "g_data_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", ".", "long", "(", ")", ",", "x", "=", "node_f_reverse", ".", "float", "(", ")", ")", "\n", "if", "len", "(", "seminas_vec", ")", "<", "27", ":", "\n", "                ", "padding", "=", "27", "-", "len", "(", "seminas_vec", ")", "\n", "seminas_vec", "=", "seminas_vec", "+", "[", "0", "for", "_", "in", "range", "(", "padding", ")", "]", "\n", "", "all_archs", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__len__": [[99, 102], ["len"], "methods", ["None"], ["{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__contains__": [[103, 107], ["None"], "methods", ["None"], ["'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", ",", "\n", "'g_data'", ":", "g_data", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__iter__": [[108, 113], ["sorted"], "methods", ["None"], ["'arch_k'", ":", "k", ",", "\n", "'seminas_vec'", ":", "seminas_vec", ",", "\n", "'edge_idx'", ":", "edge_index", ",", "\n", "'node_f'", ":", "node_f", ",", "\n", "'edge_idx_reverse'", ":", "edge_index_reverse", ",", "\n", "'node_f_reverse'", ":", "node_f_reverse", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__call__": [[114, 122], ["sorted"], "methods", ["None"], ["'g_data_reverse'", ":", "g_data_reverse", "\n", "}", "\n", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "            ", "cell_inst", "=", "Cell_201", "(", "matrix", "=", "arch", "[", "0", "]", "[", "0", "]", ",", "ops", "=", "arch", "[", "0", "]", "[", "1", "]", ")", "\n", "edge_index", ",", "node_f", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "0", "]", "[", "0", "]", ",", "arch", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "edge_index_reverse", ",", "node_f_reverse", "=", "nas2graph", "(", "args", ".", "search_space", ",", "(", "arch", "[", "0", "]", "[", "0", "]", ",", "arch", "[", "0", "]", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "\n", "g_data_reverse", "=", "Data", "(", "edge_index", "=", "edge_index_reverse", ".", "long", "(", ")", ",", "x", "=", "node_f_reverse", ".", "float", "(", ")", ")", "\n", "all_archs", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__": [[123, 136], ["bool", "re.search"], "methods", ["None"], ["{", "\n", "'matrix'", ":", "arch", "[", "'matrix'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "0", "]", ",", "\n", "'ops'", ":", "arch", "[", "'ops'", "]", "if", "flag", "else", "arch", "[", "0", "]", "[", "1", "]", ",", "\n", "'pe_adj_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'adj_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'pe_path_enc_aware_vec'", ":", "cell_inst", ".", "get_encoding", "(", "'path_enc_aware_vec'", ",", "args", ".", "seq_len", ")", ",", "\n", "'val_acc'", ":", "arch", "[", "'val'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "4", "]", ")", "*", "0.01", ",", "\n", "'test_acc'", ":", "arch", "[", "'test'", "]", "if", "flag", "else", "(", "100", "-", "arch", "[", "5", "]", ")", "*", "0.01", ",", "\n", "'g_data'", ":", "Data", "(", "edge_index", "=", "edge_index", ".", "long", "(", ")", ",", "x", "=", "node_f", ".", "float", "(", ")", ")", ",", "\n", "'arch_k'", ":", "k", ",", "\n", "'edge_idx'", ":", "edge_index", ",", "\n", "'node_f'", ":", "node_f", ",", "\n", "'edge_idx_reverse'", ":", "edge_index_reverse", ",", "\n", "'node_f_reverse'", ":", "node_f_reverse", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__inc__": [[137, 150], ["bool", "re.search"], "methods", ["None"], ["'g_data_reverse'", ":", "g_data_reverse", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "return", "all_archs", "\n", "\n", "\n", "", "def", "split_data_from_all_data", "(", "all_data", ",", "idxs", ",", "train_data", ",", "budget", ",", "last_budget", ")", ":", "\n", "    ", "train_data_new", "=", "[", "]", "\n", "counter", "=", "0", "\n", "while", "len", "(", "train_data_new", ")", "<", "(", "budget", "-", "last_budget", ")", ":", "\n", "        ", "if", "idxs", "[", "last_budget", "+", "counter", "]", "<", "len", "(", "all_data", ")", ":", "\n", "            ", "train_data_new", ".", "append", "(", "all_data", ".", "pop", "(", "idxs", "[", "last_budget", "+", "counter", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_nodes": [[180, 183], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_edges": [[184, 190], ["data.Data.", "item.size", "data.Data.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_faces": [[191, 197], ["data.Data.face.size", "data.Data.__cat_dim__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__cat_dim__"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_node_features": [[198, 204], ["data.Data.x.size", "data.Data.x.dim"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_features": [[205, 209], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.num_edge_features": [[210, 216], ["data.Data.edge_attr.size", "data.Data.edge_attr.dim"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.is_coalesced": [[217, 224], ["torch_sparse.coalesce", "data.Data.edge_index.numel", "edge_index.numel"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce": [[225, 232], ["torch_sparse.coalesce"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contains_isolated_nodes": [[233, 236], ["nn.utils.contains_isolated_nodes"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contains_isolated_nodes"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contains_self_loops": [[237, 240], ["data.Data."], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.is_undirected": [[241, 244], ["nn.utils.is_undirected"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.is_undirected"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.is_directed": [[245, 248], ["data.Data.is_undirected"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.is_undirected"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.apply": [[249, 258], ["data.Data.", "torch.is_tensor", "func"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contiguous": [[259, 264], ["data.Data.apply", "x.contiguous"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.apply", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contiguous"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to": [[265, 271], ["data.Data.apply", "x.to"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.apply", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.clone": [[272, 276], ["data.Data.__class__.from_dict", "torch.is_tensor", "v.clone", "copy.deepcopy", "data.Data.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.from_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.clone"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.debug": [[278, 354], ["RuntimeError", "RuntimeError", "RuntimeError", "data.Data.edge_index.numel", "data.Data.edge_index.min", "data.Data.edge_index.max", "RuntimeError", "RuntimeError", "data.Data.face.numel", "data.Data.face.min", "data.Data.face.max", "RuntimeError", "data.Data.edge_index.size", "data.Data.edge_attr.size", "RuntimeError", "data.Data.x.size", "RuntimeError", "data.Data.pos.size", "RuntimeError", "data.Data.norm.size", "RuntimeError", "data.Data.edge_index.dim", "data.Data.edge_index.size", "data.Data.face.dim", "data.Data.face.size", "data.Data.edge_index.size", "data.Data.face.size", "data.Data.edge_index.size", "data.Data.edge_attr.size", "data.Data.x.size", "data.Data.pos.size", "data.Data.norm.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.__repr__": [[355, 358], ["data.size_repr"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.size_repr"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.size_repr": [[19, 28], ["torch.is_tensor", "list", "value.size", "isinstance", "isinstance", "isinstance", "isinstance", "len"], "function", ["None"], ["", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "from", "nas_lib", ".", "data", ".", "darts", "import", "DataSetDarts", "\n", "return", "DataSetDarts", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"This architecture datasets does not support!\"", ")", "\n", "\n", "\n", "", "", "def", "dataset_split", "(", "args", ",", "nas_dataset", ",", "budget", "=", "None", ")", ":", "\n", "    ", "total_keys", "=", "nas_dataset", ".", "total_keys", "\n", "total_archs", "=", "nas_dataset", ".", "total_archs", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_neuralnet.DartsCifar10NeuralNet.__init__": [[6, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "darts_neuralnet.DartsCifar10NeuralNet.cells.append", "darts_cell.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "key", ",", "stem_mult", "=", "3", ")", ":", "\n", "        ", "super", "(", "DartsCifar10NeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hashkey", "=", "key", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "genotype", "=", "genotype", "\n", "C_curr", "=", "stem_mult", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_neuralnet.DartsCifar10NeuralNet.forward": [[39, 50], ["darts_neuralnet.DartsCifar10NeuralNet.stem", "enumerate", "darts_neuralnet.DartsCifar10NeuralNet.global_pooling", "darts_neuralnet.DartsCifar10NeuralNet.classifier", "darts_neuralnet.DartsCifar10NeuralNet.view", "cell", "darts_neuralnet.DartsCifar10NeuralNet.size", "darts_neuralnet.DartsCifar10NeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_neuralnet.DartsImageNetNeuralNet.__init__": [[53, 91], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "darts_cell.Cell", "darts_neuralnet.DartsImageNetNeuralNet.cells.append", "darts_cell.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "DartsImageNetNeuralNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "# self.cells += [cell]", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_neuralnet.DartsImageNetNeuralNet.forward": [[92, 104], ["darts_neuralnet.DartsImageNetNeuralNet.stem0", "darts_neuralnet.DartsImageNetNeuralNet.stem1", "enumerate", "darts_neuralnet.DartsImageNetNeuralNet.global_pooling", "darts_neuralnet.DartsImageNetNeuralNet.classifier", "darts_neuralnet.DartsImageNetNeuralNet.view", "cell", "darts_neuralnet.DartsImageNetNeuralNet.size", "darts_neuralnet.DartsImageNetNeuralNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "drop_path_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "drop_path_prob", ",", "device", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.__init__": [[36, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch", ")", ":", "\n", "        ", "self", ".", "arch", "=", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.random_arch": [[39, 58], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "normal.extend", "reduction.extend", "range", "range", "range", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "random_arch", "(", "cls", ")", ":", "\n", "# output a uniformly random architecture spec", "\n", "# from the DARTS repository", "\n", "# https://github.com/quark0/darts", "\n", "\n", "        ", "normal", "=", "[", "]", "\n", "reduction", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "ops", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "OPS", ")", ")", ",", "NUM_VERTICES", ")", "\n", "\n", "# input nodes for conv", "\n", "nodes_in_normal", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "# input nodes for reduce", "\n", "nodes_in_reduce", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "\n", "normal", ".", "extend", "(", "[", "(", "nodes_in_normal", "[", "0", "]", ",", "ops", "[", "0", "]", ")", ",", "(", "nodes_in_normal", "[", "1", "]", ",", "ops", "[", "1", "]", ")", "]", ")", "\n", "reduction", ".", "extend", "(", "[", "(", "nodes_in_reduce", "[", "0", "]", ",", "ops", "[", "2", "]", ")", ",", "(", "nodes_in_reduce", "[", "1", "]", ",", "ops", "[", "3", "]", ")", "]", ")", "\n", "", "return", "(", "normal", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.mutate": [[59, 84], ["range", "mutation.append", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "mutation[].append", "len", "numpy.random.choice", "numpy.random.choice", "[].append", "len"], "methods", ["None"], ["", "def", "mutate", "(", "self", ",", "edits", ")", ":", "\n", "        ", "\"\"\" mutate a single arch \"\"\"", "\n", "# first convert tuple to array so that it is mutable", "\n", "mutation", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "arch", ":", "\n", "            ", "mutation", ".", "append", "(", "[", "]", ")", "\n", "for", "pair", "in", "cell", ":", "\n", "                ", "mutation", "[", "-", "1", "]", ".", "append", "(", "[", "]", ")", "\n", "for", "num", "in", "pair", ":", "\n", "                    ", "mutation", "[", "-", "1", "]", "[", "-", "1", "]", ".", "append", "(", "num", ")", "\n", "# make mutations", "\n", "", "", "", "for", "_", "in", "range", "(", "edits", ")", ":", "\n", "            ", "cell", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "\n", "pair", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "OPS", ")", ")", "\n", "num", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "\n", "if", "num", "==", "1", ":", "\n", "                ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "OPS", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "pair", "//", "2", "+", "2", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "inputs", ")", "\n", "if", "pair", "%", "2", "==", "0", "and", "mutation", "[", "cell", "]", "[", "pair", "+", "1", "]", "[", "num", "]", "!=", "choice", ":", "\n", "                    ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "choice", "\n", "", "elif", "pair", "%", "2", "!=", "0", "and", "mutation", "[", "cell", "]", "[", "pair", "-", "1", "]", "[", "num", "]", "!=", "choice", ":", "\n", "                    ", "mutation", "[", "cell", "]", "[", "pair", "]", "[", "num", "]", "=", "choice", "\n", "", "", "", "return", "mutation", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_paths": [[85, 108], ["enumerate", "range", "len", "[].append", "paths[].append", "[].append", "paths[].append", "[].append", "paths[].append"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" return all paths from input to output \"\"\"", "\n", "\n", "path_builder", "=", "[", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "]", "\n", "paths", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "arch", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "                ", "if", "cell", "[", "j", "]", "[", "0", "]", "==", "0", ":", "\n", "                    ", "path", "=", "[", "INPUT_1", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "elif", "cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                    ", "path", "=", "[", "INPUT_2", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "", "else", ":", "\n", "                    ", "for", "path", "in", "path_builder", "[", "i", "]", "[", "cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ":", "\n", "                        ", "path", "=", "[", "*", "path", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "i", "]", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "paths", "[", "i", "]", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices": [[109, 146], ["arch_darts.ArchDarts.get_paths", "len", "sum", "enumerate", "tuple", "range", "range", "path_indices.append", "len", "path_indices.append", "OPS.index"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_paths"], ["", "def", "get_path_indices", "(", "self", ",", "long_paths", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 4 * (8^0 + ... + 8^4) paths total\n        If long_paths = False, we give a single boolean to all paths of\n        size 4, so there are only 4 * (1 + 8^0 + ... + 8^3) paths\n        \"\"\"", "\n", "paths", "=", "self", ".", "get_paths", "(", ")", "\n", "normal_paths", ",", "reduce_paths", "=", "paths", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\"\"\"\n        Compute the max number of paths per input per cell.\n        Since there are two cells and two inputs per cell, \n        total paths = 4 * max_paths\n        \"\"\"", "\n", "\n", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "path_indices", "=", "[", "]", "\n", "\n", "# set the base index based on the cell and the input", "\n", "for", "i", ",", "paths", "in", "enumerate", "(", "(", "normal_paths", ",", "reduce_paths", ")", ")", ":", "\n", "            ", "for", "path", "in", "paths", ":", "\n", "                ", "index", "=", "i", "*", "2", "*", "max_paths", "\n", "if", "path", "[", "0", "]", "==", "INPUT_2", ":", "\n", "                    ", "index", "+=", "max_paths", "\n", "\n", "# recursively compute the index of the path", "\n", "", "for", "j", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", ":", "\n", "                    ", "if", "j", "==", "len", "(", "path", ")", "-", "1", ":", "\n", "                        ", "path_indices", ".", "append", "(", "index", ")", "\n", "break", "\n", "", "elif", "j", "==", "(", "NUM_VERTICES", "-", "1", ")", "and", "not", "long_paths", ":", "\n", "                        ", "path_indices", ".", "append", "(", "2", "*", "(", "i", "+", "1", ")", "*", "max_paths", "-", "1", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "index", "+=", "num_ops", "**", "j", "*", "(", "OPS", ".", "index", "(", "path", "[", "j", "+", "1", "]", ")", "+", "1", ")", "\n", "", "", "", "", "return", "tuple", "(", "path_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths": [[147, 160], ["arch_darts.ArchDarts.get_path_indices", "len", "sum", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_paths", "(", "self", ",", "cutoff", "=", "None", ")", ":", "\n", "# output one-hot encoding of paths", "\n", "        ", "path_indices", "=", "self", ".", "get_path_indices", "(", ")", "\n", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\n", "max_paths", "=", "sum", "(", "[", "num_ops", "**", "i", "for", "i", "in", "range", "(", "NUM_VERTICES", "+", "1", ")", "]", ")", "\n", "\n", "path_encoding", "=", "np", ".", "zeros", "(", "4", "*", "max_paths", ")", "\n", "for", "index", "in", "path_indices", ":", "\n", "            ", "path_encoding", "[", "index", "]", "=", "1", "\n", "", "if", "cutoff", ":", "\n", "            ", "path_encoding", "=", "path_encoding", "[", ":", "cutoff", "]", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_paths": [[161, 218], ["range", "range", "len", "len", "path_builder_normal[].append", "path_builder_idxs_normal[].append", "paths_normal.append", "paths_idxs_normal.append", "enumerate", "enumerate", "path_builder_normal[].append", "path_builder_idxs_normal[].append", "paths_normal.append", "paths_idxs_normal.append", "enumerate", "paths_builder_reduction[].append", "path_builder_idxs_reduction[].append", "paths_reduction.append", "paths_idxs_reduction.append", "paths_builder_reduction[].append", "path_builder_idxs_reduction[].append", "paths_reduction.append", "paths_idxs_reduction.append", "path_builder_normal[].append", "path_builder_idxs_normal[].append", "paths_normal.append", "paths_idxs_normal.append"], "methods", ["None"], ["", "def", "get_position_aware_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" return all paths from input to output \"\"\"", "\n", "\n", "path_builder_normal", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "path_builder_idxs_normal", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "paths_normal", "=", "[", "]", "\n", "paths_idxs_normal", "=", "[", "]", "\n", "normal_cell", "=", "self", ".", "arch", "[", "0", "]", "\n", "reduction_cell", "=", "self", ".", "arch", "[", "1", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "            ", "if", "normal_cell", "[", "j", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "path", "=", "[", "INPUT_1", ",", "OPS", "[", "normal_cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder_normal", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs_normal", "[", "j", "//", "2", "]", ".", "append", "(", "[", "0", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "paths_normal", ".", "append", "(", "path", ")", "\n", "paths_idxs_normal", ".", "append", "(", "[", "0", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "", "elif", "normal_cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                ", "path", "=", "[", "INPUT_2", ",", "OPS", "[", "normal_cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder_normal", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs_normal", "[", "j", "//", "2", "]", ".", "append", "(", "[", "1", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "paths_normal", ".", "append", "(", "path", ")", "\n", "paths_idxs_normal", ".", "append", "(", "[", "1", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "idx_p", ",", "path", "in", "enumerate", "(", "path_builder_normal", "[", "normal_cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ")", ":", "\n", "                    ", "path", "=", "[", "*", "path", ",", "OPS", "[", "normal_cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_idxs", "=", "[", "*", "path_builder_idxs_normal", "[", "normal_cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", "[", "idx_p", "]", ",", "j", "//", "2", "+", "2", "]", "\n", "path_builder_normal", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs_normal", "[", "j", "//", "2", "]", ".", "append", "(", "path_idxs", ")", "\n", "paths_normal", ".", "append", "(", "path", ")", "\n", "paths_idxs_normal", ".", "append", "(", "path_idxs", ")", "\n", "\n", "", "", "", "paths_builder_reduction", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "path_builder_idxs_reduction", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "paths_reduction", "=", "[", "]", "\n", "paths_idxs_reduction", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "            ", "if", "reduction_cell", "[", "j", "]", "[", "0", "]", "==", "0", "or", "reduction_cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                ", "for", "idx_r_p", ",", "path", "in", "enumerate", "(", "paths_normal", ")", ":", "\n", "                    ", "path", "=", "[", "*", "path", ",", "OPS", "[", "reduction_cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_idxs", "=", "[", "*", "paths_idxs_normal", "[", "idx_r_p", "]", ",", "j", "//", "2", "+", "6", "]", "\n", "\n", "paths_builder_reduction", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs_reduction", "[", "j", "//", "2", "]", ".", "append", "(", "path_idxs", ")", "\n", "paths_reduction", ".", "append", "(", "path", ")", "\n", "paths_idxs_reduction", ".", "append", "(", "path_idxs", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "idx_p", ",", "path", "in", "enumerate", "(", "paths_builder_reduction", "[", "reduction_cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ")", ":", "\n", "                    ", "path", "=", "[", "*", "path", ",", "OPS", "[", "reduction_cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_idxs", "=", "[", "*", "path_builder_idxs_reduction", "[", "reduction_cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", "[", "idx_p", "]", ",", "j", "//", "2", "+", "6", "]", "\n", "\n", "paths_builder_reduction", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs_reduction", "[", "j", "//", "2", "]", ".", "append", "(", "path_idxs", ")", "\n", "paths_reduction", ".", "append", "(", "path", ")", "\n", "paths_idxs_reduction", ".", "append", "(", "path_idxs", ")", "\n", "", "", "", "return", "paths_reduction", ",", "paths_idxs_reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_paths_sep": [[219, 247], ["range", "len", "path_builder[].append", "path_builder_idxs[].append", "paths.append", "paths_idxs.append", "path_builder[].append", "path_builder_idxs[].append", "paths.append", "paths_idxs.append", "enumerate", "path_builder[].append", "path_builder_idxs[].append", "paths.append", "paths_idxs.append"], "methods", ["None"], ["", "def", "get_position_aware_paths_sep", "(", "self", ",", "cell", ")", ":", "\n", "        ", "\"\"\" return all paths from input to output \"\"\"", "\n", "path_builder", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "path_builder_idxs", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "paths", "=", "[", "]", "\n", "paths_idxs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "OPS", ")", ")", ":", "\n", "            ", "if", "cell", "[", "j", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "path", "=", "[", "INPUT_1", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs", "[", "j", "//", "2", "]", ".", "append", "(", "[", "0", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "paths_idxs", ".", "append", "(", "[", "0", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "", "elif", "cell", "[", "j", "]", "[", "0", "]", "==", "1", ":", "\n", "                ", "path", "=", "[", "INPUT_2", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_builder", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs", "[", "j", "//", "2", "]", ".", "append", "(", "[", "1", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "paths_idxs", ".", "append", "(", "[", "1", ",", "j", "//", "2", "+", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "idx_p", ",", "path", "in", "enumerate", "(", "path_builder", "[", "cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", ")", ":", "\n", "                    ", "path", "=", "[", "*", "path", ",", "OPS", "[", "cell", "[", "j", "]", "[", "1", "]", "]", "]", "\n", "path_idxs", "=", "[", "*", "path_builder_idxs", "[", "cell", "[", "j", "]", "[", "0", "]", "-", "2", "]", "[", "idx_p", "]", ",", "j", "//", "2", "+", "2", "]", "\n", "path_builder", "[", "j", "//", "2", "]", ".", "append", "(", "path", ")", "\n", "path_builder_idxs", "[", "j", "//", "2", "]", ".", "append", "(", "path_idxs", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "paths_idxs", ".", "append", "(", "path_idxs", ")", "\n", "", "", "", "return", "paths", ",", "paths_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.sort_seqs_list": [[248, 259], ["collections.defaultdict", "enumerate", "sorted", "seq_len_dict[].append", "list", "nas_lib.algos.algo_sort.quick_sort_list", "sorted_idxs.extend", "collections.defaultdict.keys", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.algos.algo_sort.quick_sort_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "sort_seqs_list", "(", "self", ",", "paths", ",", "paths_idx", ")", ":", "\n", "        ", "seq_len_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "paths", ")", ":", "\n", "            ", "seq_len_dict", "[", "len", "(", "p", ")", "]", ".", "append", "(", "idx", ")", "\n", "", "k_sorted", "=", "sorted", "(", "list", "(", "seq_len_dict", ".", "keys", "(", ")", ")", ")", "\n", "sorted_idxs", "=", "[", "]", "\n", "for", "k", "in", "k_sorted", ":", "\n", "            ", "paths_v", "=", "[", "(", "v_i", ",", "paths_idx", "[", "v_i", "]", ")", "for", "v_i", "in", "seq_len_dict", "[", "k", "]", "]", "\n", "sort_results", "=", "algo_sort", ".", "quick_sort_list", "(", "paths_v", ")", "\n", "sorted_idxs", ".", "extend", "(", "[", "k", "[", "0", "]", "for", "k", "in", "sort_results", "]", ")", "\n", "", "return", "[", "paths", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", ",", "[", "paths_idx", "[", "idx", "]", "for", "idx", "in", "sorted_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_path_indices": [[260, 286], ["arch_darts.ArchDarts.get_position_aware_paths_sep", "arch_darts.ArchDarts.sort_seqs_list", "zip", "numpy.array", "numpy.zeros", "zip", "vectors_list.append", "numpy.concatenate.reshape", "numpy.zeros", "numpy.concatenate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_paths_sep", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.sort_seqs_list", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "get_position_aware_path_indices", "(", "self", ",", "cell", "=", "None", ",", "seq_len", "=", "1224", ")", ":", "\n", "        ", "\"\"\"\n        compute the index of each path\n        There are 4 * (8^0 + ... + 8^4) paths total\n        If long_paths = False, we give a single boolean to all paths of\n        size 4, so there are only 4 * (1 + 8^0 + ... + 8^3) paths\n        \"\"\"", "\n", "paths", ",", "paths_idxs", "=", "self", ".", "get_position_aware_paths_sep", "(", "cell", ")", "\n", "path", ",", "path_idxs", "=", "self", ".", "sort_seqs_list", "(", "paths", ",", "paths_idxs", ")", "\n", "\n", "vectors_list", "=", "[", "]", "\n", "for", "(", "p_list", ",", "idx_list", ")", "in", "zip", "(", "paths", ",", "path_idxs", ")", ":", "\n", "            ", "vec", "=", "np", ".", "zeros", "(", "2", "+", "NUM_VERTICES", "*", "len", "(", "OPS", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "p", ",", "ids", "in", "zip", "(", "p_list", ",", "idx_list", ")", ":", "\n", "                ", "if", "ids", "<", "2", ":", "\n", "                    ", "vec", "[", "ids", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "vec", "[", "2", "+", "(", "ids", "-", "2", ")", "*", "len", "(", "OPS", ")", "+", "OPS_mapping", "[", "p", "]", "]", "=", "1", "\n", "", "", "vectors_list", ".", "append", "(", "vec", ")", "\n", "", "path_encoding", "=", "np", ".", "array", "(", "vectors_list", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "path_encoding", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "residual_len", "=", "seq_len", "-", "path_encoding", ".", "shape", "[", "0", "]", "\n", "if", "residual_len", "!=", "0", ":", "\n", "            ", "residual_np", "=", "np", ".", "zeros", "(", "residual_len", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "path_encoding", "=", "np", ".", "concatenate", "(", "[", "path_encoding", ",", "residual_np", "]", ")", "\n", "", "return", "path_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_position_aware_paths": [[287, 298], ["arch_darts.ArchDarts.get_position_aware_path_indices", "arch_darts.ArchDarts.get_position_aware_path_indices", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_path_indices", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_position_aware_path_indices"], ["", "def", "encode_position_aware_paths", "(", "self", ",", "seq_len", ",", "arch", "=", "None", ")", ":", "\n", "# output one-hot encoding of paths", "\n", "        ", "if", "arch", ":", "\n", "            ", "normal_cell", ",", "reduction_cell", "=", "arch", "\n", "", "else", ":", "\n", "            ", "normal_cell", ",", "reduction_cell", "=", "self", ".", "arch", "\n", "", "path_encoding_normal", "=", "self", ".", "get_position_aware_path_indices", "(", "normal_cell", ",", "seq_len", "=", "seq_len", ")", "\n", "path_encoding_reduction", "=", "self", ".", "get_position_aware_path_indices", "(", "reduction_cell", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "path_encoding", "=", "np", ".", "concatenate", "(", "[", "path_encoding_normal", ",", "path_encoding_reduction", "]", ")", "\n", "return", "path_encoding", ",", "(", "path_encoding_normal", ",", "path_encoding_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_adj": [[299, 317], ["numpy.array", "numpy.zeros", "enumerate", "range", "matrices.append", "ops.append", "op_list.append", "matrices[].flatten", "matrices[].flatten"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "encode_adj", "(", "self", ")", ":", "\n", "        ", "matrices", "=", "[", "]", "\n", "ops", "=", "[", "]", "\n", "true_num_vertices", "=", "NUM_VERTICES", "+", "3", "\n", "for", "cell", "in", "self", ".", "arch", ":", "\n", "            ", "matrix", "=", "np", ".", "zeros", "(", "(", "true_num_vertices", ",", "true_num_vertices", ")", ")", "\n", "op_list", "=", "[", "]", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "cell", ")", ":", "\n", "                ", "dest", "=", "i", "//", "2", "+", "2", "\n", "matrix", "[", "edge", "[", "0", "]", "]", "[", "dest", "]", "=", "1", "\n", "op_list", ".", "append", "(", "edge", "[", "1", "]", ")", "\n", "", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "                ", "matrix", "[", "i", "]", "[", "-", "1", "]", "=", "1", "\n", "", "matrices", ".", "append", "(", "matrix", ")", "\n", "ops", ".", "append", "(", "op_list", ")", "\n", "\n", "", "encoding", "=", "[", "*", "matrices", "[", "0", "]", ".", "flatten", "(", ")", ",", "*", "ops", "[", "0", "]", ",", "*", "matrices", "[", "1", "]", ".", "flatten", "(", ")", ",", "*", "ops", "[", "1", "]", "]", "\n", "return", "np", ".", "array", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_neighborhood": [[318, 367], ["enumerate", "range", "print", "sys.exit", "enumerate", "random.shuffle", "random.shuffle", "len", "nbrs.append", "range", "nbrs.append", "arch_darts.ArchDarts.make_mutable", "op_nbhd.append", "arch_darts.ArchDarts.make_mutable", "edge_nbhd.append", "range", "range", "len"], "methods", ["None"], ["", "def", "get_neighborhood", "(", "self", ",", "\n", "nasbench", ",", "\n", "mutate_encoding", "=", "'adj'", ",", "\n", "cutoff", "=", "None", ",", "\n", "index_hash", "=", "None", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "mutate_encoding", "!=", "'adj'", ":", "\n", "            ", "print", "(", "'{} is not yet implemented as a neighborhood for nasbench301'", ".", "format", "(", "mutate_encoding", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "op_nbhd", "=", "[", "]", "\n", "edge_nbhd", "=", "[", "]", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "arch", ")", ":", "\n", "            ", "for", "j", ",", "pair", "in", "enumerate", "(", "cell", ")", ":", "\n", "\n", "# mutate the op", "\n", "                ", "available", "=", "[", "op", "for", "op", "in", "range", "(", "len", "(", "OPS", ")", ")", "if", "op", "!=", "pair", "[", "1", "]", "]", "\n", "for", "op", "in", "available", ":", "\n", "                    ", "new_arch", "=", "self", ".", "make_mutable", "(", ")", "\n", "new_arch", "[", "i", "]", "[", "j", "]", "[", "1", "]", "=", "op", "\n", "op_nbhd", ".", "append", "(", "{", "'arch'", ":", "new_arch", "}", ")", "\n", "\n", "# mutate the edge", "\n", "", "other", "=", "j", "+", "1", "-", "2", "*", "(", "j", "%", "2", ")", "\n", "available", "=", "[", "edge", "for", "edge", "in", "range", "(", "j", "//", "2", "+", "2", ")", "if", "edge", "not", "in", "[", "cell", "[", "other", "]", "[", "0", "]", ",", "pair", "[", "0", "]", "]", "]", "\n", "\n", "for", "edge", "in", "available", ":", "\n", "                    ", "new_arch", "=", "self", ".", "make_mutable", "(", ")", "\n", "new_arch", "[", "i", "]", "[", "j", "]", "[", "0", "]", "=", "edge", "\n", "edge_nbhd", ".", "append", "(", "{", "'arch'", ":", "new_arch", "}", ")", "\n", "\n", "", "", "", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "edge_nbhd", ")", "\n", "random", ".", "shuffle", "(", "op_nbhd", ")", "\n", "\n", "# 112 in edge nbhd, 24 in op nbhd", "\n", "# alternate one edge nbr per 4 op nbrs", "\n", "", "nbrs", "=", "[", "]", "\n", "op_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "edge_nbhd", ")", ")", ":", "\n", "            ", "nbrs", ".", "append", "(", "edge_nbhd", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "nbrs", ".", "append", "(", "op_nbhd", "[", "op_idx", "]", ")", "\n", "op_idx", "+=", "1", "\n", "", "", "nbrs", "=", "[", "*", "nbrs", ",", "*", "op_nbhd", "[", "op_idx", ":", "]", "]", "\n", "\n", "return", "nbrs", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.path_distance": [[368, 372], ["numpy.sum", "numpy.array", "arch_darts.ArchDarts.encode_paths", "numpy.array", "other.encode_paths"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths"], ["", "def", "path_distance", "(", "self", ",", "other", ")", ":", "\n", "# compute the distance between two architectures", "\n", "# by comparing their path encodings", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "encode_paths", "(", ")", "!=", "np", ".", "array", "(", "other", ".", "encode_paths", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path": [[373, 382], ["arch_darts.ArchDarts.encode_adj", "arch_darts.ArchDarts.encode_paths", "arch_darts.ArchDarts.encode_position_aware_paths", "NotImplemented"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_adj", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_paths", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.encode_position_aware_paths"], ["", "def", "get_path", "(", "self", ",", "path_type", ",", "seq_len", ",", "cut_off", "=", "None", ")", ":", "\n", "        ", "if", "path_type", "==", "'adj_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_adj", "(", ")", "\n", "", "elif", "path_type", "==", "'path_enc_vec'", ":", "\n", "            ", "return", "self", ".", "encode_paths", "(", "cutoff", "=", "cut_off", ")", "\n", "", "elif", "path_type", "==", "'path_enc_aware_vec'", ":", "\n", "            ", "return", "self", ".", "encode_position_aware_paths", "(", "seq_len", "=", "seq_len", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'This method does not implement!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.gen_reduction_cell": [[383, 391], ["range", "numpy.random.choice", "numpy.random.choice", "reduction_cell.extend", "range", "range", "len"], "methods", ["None"], ["", "", "def", "gen_reduction_cell", "(", "self", ")", ":", "\n", "        ", "reduction_cell", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "ops", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "OPS", ")", ")", ",", "2", ")", "\n", "# input nodes for reduce", "\n", "nodes_in_reduce", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "reduction_cell", ".", "extend", "(", "[", "(", "nodes_in_reduce", "[", "0", "]", ",", "ops", "[", "0", "]", ")", ",", "(", "nodes_in_reduce", "[", "1", "]", ",", "ops", "[", "1", "]", ")", "]", ")", "\n", "", "return", "reduction_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.generate_all_arch_back": [[392, 407], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "normal.extend", "reduction.extend", "range", "range", "range", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "generate_all_arch_back", "(", "cls", ")", ":", "\n", "        ", "normal", "=", "[", "]", "\n", "reduction", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_VERTICES", ")", ":", "\n", "            ", "ops", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "OPS", ")", ")", ",", "NUM_VERTICES", ")", "\n", "\n", "# input nodes for conv", "\n", "nodes_in_normal", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "# input nodes for reduce", "\n", "nodes_in_reduce", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "i", "+", "2", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "\n", "normal", ".", "extend", "(", "[", "(", "nodes_in_normal", "[", "0", "]", ",", "ops", "[", "0", "]", ")", ",", "(", "nodes_in_normal", "[", "1", "]", ",", "ops", "[", "1", "]", ")", "]", ")", "\n", "reduction", ".", "extend", "(", "[", "(", "nodes_in_reduce", "[", "0", "]", ",", "ops", "[", "2", "]", ")", ",", "(", "nodes_in_reduce", "[", "1", "]", ",", "ops", "[", "3", "]", ")", "]", ")", "\n", "", "return", "(", "normal", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.gen_outer_combination": [[408, 415], ["len", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "gen_outer_combination", "(", "self", ")", ":", "\n", "        ", "num_ops", "=", "len", "(", "OPS", ")", "\n", "outer1", "=", "[", "[", "(", "i", ",", "k", ")", ",", "(", "j", ",", "l", ")", "]", "for", "i", ",", "j", "in", "[", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", "]", "for", "k", "in", "range", "(", "num_ops", ")", "for", "l", "in", "range", "(", "num_ops", ")", "]", "\n", "outer2", "=", "[", "[", "(", "i", ",", "k", ")", ",", "(", "j", ",", "l", ")", "]", "for", "i", ",", "j", "in", "[", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "2", ")", ",", "(", "2", ",", "0", ")", ",", "(", "2", ",", "1", ")", "]", "for", "k", "in", "range", "(", "num_ops", ")", "for", "l", "in", "range", "(", "num_ops", ")", "]", "\n", "outer", "=", "[", "[", "*", "o1", ",", "*", "o2", "]", "for", "o1", "in", "outer1", "for", "o2", "in", "outer2", "]", "\n", "# print(len(outer1), len(outer2), len(outer))", "\n", "return", "outer", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.generate_normal_archs": [[416, 477], ["len", "print", "arch_darts.ArchDarts.gen_outer_combination", "range", "list", "list.remove", "range", "range", "range", "range", "list", "list.remove", "range", "range", "range", "arch_darts.ArchDarts.gen_reduction_cell", "hashlib.sha256().hexdigest", "arch_darts.ArchDarts.get_path", "os.path.join", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "hashlib.sha256", "str().encode", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.gen_outer_combination", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.gen_reduction_cell", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.arch_darts.ArchDarts.get_path"], ["", "def", "generate_normal_archs", "(", "self", ",", "save_path", "=", "''", ")", ":", "\n", "        ", "num_ops", "=", "len", "(", "OPS", ")", "\n", "\n", "total_archs", "=", "2", "*", "1", "*", "num_ops", "**", "2", "*", "3", "*", "2", "*", "num_ops", "**", "2", "*", "4", "*", "3", "*", "num_ops", "**", "2", "*", "5", "*", "4", "*", "num_ops", "**", "2", "\n", "total_archs_new", "=", "2", "*", "1", "*", "2", "*", "1", "*", "num_ops", "**", "4", "*", "3", "*", "2", "*", "3", "*", "2", "*", "num_ops", "**", "4", "*", "4", "*", "3", "*", "4", "*", "3", "*", "num_ops", "**", "4", "*", "5", "*", "4", "*", "5", "*", "4", "*", "num_ops", "**", "4", "\n", "print", "(", "total_archs", ",", "total_archs_new", ")", "\n", "\n", "# models = {sha256(str([(i_1, k_1), (j_1, l_1), (i_2, k_2), (j_2, l_2), (i_3, k_3), (j_3, l_3), (i_4, j_4), (k_4, l_4)]).encode('utf-8')).hexdigest():", "\n", "#               [(i_1, k_1), (j_1, l_1), (i_2, k_2), (j_2, l_2), (i_3, k_3), (j_3, l_3), (i_4, j_4), (k_4, l_4)]", "\n", "#                 for i_1 in range(2) for j_1 in range(2) for k_1 in range(num_ops) for l_1 in range(num_ops)", "\n", "#                     for i_2 in range(3) for j_2 in range(3) for k_2 in range(num_ops) for l_2 in range(num_ops)", "\n", "#                         for i_3 in range(4) for j_3 in range(4) for k_3 in range(num_ops) for l_3 in range(num_ops)", "\n", "#                             for i_4 in range(5) for j_4 in range(5) for k_4 in range(num_ops) for l_4 in range(num_ops)}", "\n", "\n", "# i_1, j_1: (0, 1), (1, 0)", "\n", "# i_2, j_2: (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)", "\n", "\n", "outer_idxs", "=", "0", "\n", "outer_combination", "=", "self", ".", "gen_outer_combination", "(", ")", "\n", "(", "i_1", ",", "k_1", ")", ",", "(", "j_1", ",", "l_1", ")", ",", "(", "i_2", ",", "k_2", ")", ",", "(", "j_2", ",", "l_2", ")", "=", "outer_combination", "[", "outer_idxs", "]", "\n", "\n", "# for i_1 in range(2):", "\n", "#     j_1_idxes = list(range(2))", "\n", "#     j_1_idxes.remove(i_1)", "\n", "#     for j_1 in j_1_idxes:", "\n", "#         for k_1 in range(num_ops):", "\n", "#             for l_1 in range(num_ops):", "\n", "#                 for i_2 in range(3):", "\n", "#                     j_2_idxes = list(range(3))", "\n", "#                     j_2_idxes.remove(i_2)", "\n", "#                     for j_2 in j_2_idxes:", "\n", "#                         for k_2 in range(num_ops):", "\n", "#                             for l_2 in range(num_ops):", "\n", "for", "i_3", "in", "range", "(", "4", ")", ":", "\n", "            ", "j_3_idxes", "=", "list", "(", "range", "(", "4", ")", ")", "\n", "j_3_idxes", ".", "remove", "(", "i_3", ")", "\n", "for", "j_3", "in", "j_3_idxes", ":", "\n", "                ", "for", "k_3", "in", "range", "(", "num_ops", ")", ":", "\n", "                    ", "for", "l_3", "in", "range", "(", "num_ops", ")", ":", "\n", "                        ", "for", "i_4", "in", "range", "(", "5", ")", ":", "\n", "                            ", "j_4_idxes", "=", "list", "(", "range", "(", "5", ")", ")", "\n", "j_4_idxes", ".", "remove", "(", "i_4", ")", "\n", "for", "j_4", "in", "j_4_idxes", ":", "\n", "                                ", "for", "k_4", "in", "range", "(", "num_ops", ")", ":", "\n", "                                    ", "for", "l_4", "in", "range", "(", "num_ops", ")", ":", "\n", "                                        ", "normal_cell", "=", "[", "(", "i_1", ",", "k_1", ")", ",", "(", "j_1", ",", "l_1", ")", ",", "(", "i_2", ",", "k_2", ")", ",", "(", "j_2", ",", "l_2", ")", ",", "(", "i_3", ",", "k_3", ")", ",", "(", "j_3", ",", "l_3", ")", ",", "(", "i_4", ",", "k_4", ")", ",", "(", "j_4", ",", "l_4", ")", "]", "\n", "reduction_cell", "=", "self", ".", "gen_reduction_cell", "(", ")", "\n", "self", ".", "arch", "=", "(", "normal_cell", ",", "reduction_cell", ")", "\n", "key", "=", "sha256", "(", "str", "(", "self", ".", "arch", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "# path_adj = self.get_path(path_type='adj_enc_vec', seq_len=612)", "\n", "# path_base_enc = self.get_path(path_type='path_enc_vec', seq_len=612)", "\n", "path_position_enc", ",", "(", "part1", ",", "part2", ")", "=", "self", ".", "get_path", "(", "path_type", "=", "'path_enc_aware_vec'", ",", "seq_len", "=", "612", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "key", "+", "'.pkl'", ")", "\n", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "\n", "                                            ", "pickle", ".", "dump", "(", "(", "normal_cell", ",", "reduction_cell", ")", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "key", ",", "f", ")", "\n", "# pickle.dump(path_adj, f)", "\n", "# pickle.dump(path_base_enc, f)", "\n", "pickle", ".", "dump", "(", "path_position_enc", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "part1", ",", "f", ")", "\n", "pickle", ".", "dump", "(", "part2", ",", "f", ")", "\n", "", "", "", "", "", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.ReLUConvBN.__init__": [[24, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.ReLUConvBN.forward": [[32, 34], ["darts_ops.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.DilConv.__init__": [[37, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.DilConv.forward": [[46, 48], ["darts_ops.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.SepConv.__init__": [[51, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.SepConv.forward": [[64, 66], ["darts_ops.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.Identity.__init__": [[69, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.Identity.forward": [[72, 74], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.Zero.__init__": [[77, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.Zero.forward": [[81, 85], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.FactorizedReduce.__init__": [[88, 95], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_ops.FactorizedReduce.forward": [[96, 101], ["darts_ops.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_ops.FactorizedReduce.bn", "darts_ops.FactorizedReduce.conv_1", "darts_ops.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.Cell.__init__": [[6, 21], ["nn.Module.__init__", "darts_ops.ReLUConvBN", "darts_cell.Cell._compile", "darts_ops.FactorizedReduce", "darts_ops.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(C_prev_prev, C_prev, C)", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.Cell._compile": [[22, 34], ["len", "nn.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.Cell.forward": [[35, 54], ["darts_cell.Cell.preprocess0", "darts_cell.Cell.preprocess1", "range", "torch.cat", "op1", "op2", "isinstance", "nas_lib.utils.utils_darts.drop_path", "isinstance", "nas_lib.utils.utils_darts.drop_path"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.drop_path", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.utils_darts.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "0.0", ",", "device", "=", "None", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ",", "device", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ",", "device", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.AuxiliaryHeadCIFAR.__init__": [[57, 71], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.AuxiliaryHeadCIFAR.forward": [[72, 76], ["darts_cell.AuxiliaryHeadCIFAR.features", "darts_cell.AuxiliaryHeadCIFAR.classifier", "darts_cell.AuxiliaryHeadCIFAR.view", "darts_cell.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.AuxiliaryHeadImageNet.__init__": [[79, 95], ["nn.Module.__init__", "nn.Sequential", "nn.Linear", "nn.ReLU", "nn.AvgPool2d", "nn.Conv2d", "nn.BatchNorm2d", "nn.ReLU", "nn.Conv2d", "nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.darts_api.darts_cell.AuxiliaryHeadImageNet.forward": [[96, 100], ["darts_cell.AuxiliaryHeadImageNet.features", "darts_cell.AuxiliaryHeadImageNet.classifier", "darts_cell.AuxiliaryHeadImageNet.view", "darts_cell.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.__init__": [[25, 42], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "1", ")", ",", "\n", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "3", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "]", ",", "\n", "reduce_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist": [[43, 55], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["None"], [")", "\n", "\n", "AmoebaNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "3", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.node": [[56, 59], ["len", "len"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "]", ",", "\n", "normal_concat", "=", "[", "4", ",", "5", ",", "6", "]", ",", "\n", "reduce", "=", "[", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tostr": [[60, 67], ["strings.append"], "methods", ["None"], ["(", "'avg_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "2", ")", ",", "\n", "(", "'sep_conv_7x7'", ",", "0", ")", ",", "\n", "(", "'avg_pool_3x3'", ",", "1", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.check_valid": [[68, 80], ["enumerate", "sums.append", "sum", "len"], "methods", ["None"], ["(", "'conv_7x1_1x7'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "5", ")", ",", "\n", "]", ",", "\n", "reduce_concat", "=", "[", "3", ",", "4", ",", "6", "]", "\n", ")", "\n", "\n", "BANANAS", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "2", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "\n", "(", "'none'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "2", ")", ",", "(", "'sep_conv_5x5'", ",", "3", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "4", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.to_unique_str": [[81, 105], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["None"], ["DARTS_V1", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'avg_pool_3x3'", ",", "0", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "DARTS_V2", "=", "Genotype", "(", "normal", "=", "[", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'dil_conv_3x3'", ",", "2", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "2", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "1", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "DARTS", "=", "DARTS_V2", "\n", "\n", "ASHA200", "=", "Genotype", "(", "normal", "=", "[", "(", "'skip_connect'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "0", ")", ",", "(", "'sep_conv_3x3'", ",", "1", ")", ",", "(", "'skip_connect'", ",", "0", ")", ",", "\n", "(", "'none'", ",", "1", ")", ",", "(", "'max_pool_3x3'", ",", "0", ")", ",", "(", "'skip_connect'", ",", "1", ")", ",", "(", "'dil_conv_3x3'", ",", "0", ")", "]", ",", "\n", "normal_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "reduce", "=", "[", "(", "'max_pool_3x3'", ",", "1", ")", ",", "(", "'avg_pool_3x3'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "2", ")", ",", "(", "'max_pool_3x3'", ",", "3", ")", ",", "(", "'none'", ",", "1", ")", ",", "\n", "(", "'skip_connect'", ",", "0", ")", ",", "(", "'sep_conv_5x5'", ",", "4", ")", "]", ",", "\n", "reduce_concat", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.check_valid_op": [[106, 112], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.__repr__": [[113, 116], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tostr"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.__len__": [[117, 119], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.__getitem__": [[120, 122], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2structure": [[123, 135], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2fullstructure": [[136, 152], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.gen_all": [[153, 174], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.get_combination", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.get_combination"], []], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.get_combination": [[7, 21], ["range", "combs.append", "new_combs.append"], "function", ["None"], ["'max_pool_3x3'", ",", "\n", "'avg_pool_3x3'", ",", "\n", "'skip_connect'", ",", "\n", "'sep_conv_3x3'", ",", "\n", "'sep_conv_5x5'", ",", "\n", "'dil_conv_3x3'", ",", "\n", "'dil_conv_5x5'", "\n", "]", "\n", "\n", "NASNet", "=", "Genotype", "(", "\n", "normal", "=", "[", "\n", "(", "'sep_conv_5x5'", ",", "1", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n", "(", "'sep_conv_5x5'", ",", "0", ")", ",", "\n", "(", "'sep_conv_3x3'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.__init__": [[49, 77], ["isinstance", "copy.deepcopy", "collections.OrderedDict", "collections.OrderedDict", "sorted", "sorted", "enumerate", "isinstance", "isinstance", "str", "os.path.isfile", "torch.load", "isinstance", "type", "list", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "list", "print", "pathlib.Path", "copy.deepcopy", "ValueError", "file_path_or_dict[].keys", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "__init__", "(", "self", ",", "file_path_or_dict", ":", "Union", "[", "Text", ",", "Dict", "]", ",", "verbose", ":", "bool", "=", "True", ")", ":", "\n", "    ", "self", ".", "filename", "=", "None", "\n", "if", "isinstance", "(", "file_path_or_dict", ",", "str", ")", "or", "isinstance", "(", "file_path_or_dict", ",", "Path", ")", ":", "\n", "      ", "file_path_or_dict", "=", "str", "(", "file_path_or_dict", ")", "\n", "if", "verbose", ":", "print", "(", "'try to create the NAS-Bench-201 api from {:}'", ".", "format", "(", "file_path_or_dict", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "file_path_or_dict", ")", ",", "'invalid path : {:}'", ".", "format", "(", "file_path_or_dict", ")", "\n", "self", ".", "filename", "=", "Path", "(", "file_path_or_dict", ")", ".", "name", "\n", "file_path_or_dict", "=", "torch", ".", "load", "(", "file_path_or_dict", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ":", "\n", "      ", "file_path_or_dict", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid type : {:} not in [str, dict]'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", ")", "\n", "assert", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ",", "'It should be a dict instead of {:}'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", "\n", "self", ".", "verbose", "=", "verbose", "# [TODO] a flag indicating whether to print more logs", "\n", "keys", "=", "(", "'meta_archs'", ",", "'arch2infos'", ",", "'evaluated_indexes'", ")", "\n", "for", "key", "in", "keys", ":", "assert", "key", "in", "file_path_or_dict", ",", "'Can not find key[{:}] in the dict'", ".", "format", "(", "key", ")", "\n", "self", ".", "meta_archs", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", "[", "'meta_archs'", "]", ")", "\n", "self", ".", "arch2infos_less", "=", "OrderedDict", "(", ")", "\n", "self", ".", "arch2infos_full", "=", "OrderedDict", "(", ")", "\n", "for", "xkey", "in", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'arch2infos'", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "      ", "all_info", "=", "file_path_or_dict", "[", "'arch2infos'", "]", "[", "xkey", "]", "\n", "self", ".", "arch2infos_less", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'full'", "]", ")", "\n", "", "self", ".", "evaluated_indexes", "=", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'evaluated_indexes'", "]", ")", ")", "\n", "self", ".", "archstr2index", "=", "{", "}", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "self", ".", "meta_archs", ")", ":", "\n", "#assert arch.tostr() not in self.archstr2index, 'This [{:}]-th arch {:} already in the dict ({:}).'.format(idx, arch, self.archstr2index[arch.tostr()])", "\n", "      ", "assert", "arch", "not", "in", "self", ".", "archstr2index", ",", "'This [{:}]-th arch {:} already in the dict ({:}).'", ".", "format", "(", "idx", ",", "arch", ",", "self", ".", "archstr2index", "[", "arch", "]", ")", "\n", "self", ".", "archstr2index", "[", "arch", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.__getitem__": [[78, 80], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta_archs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.__repr__": [[84, 86], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({num}/{total} architectures, file={filename})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "num", "=", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "total", "=", "len", "(", "self", ".", "meta_archs", ")", ",", "filename", "=", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.random": [[87, 90], ["random.randint", "len"], "methods", ["None"], ["", "def", "random", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return a random index of all architectures.\"\"\"", "\n", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "meta_archs", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_index_by_arch": [[97, 106], ["isinstance", "hasattr", "arch.tostr", "arch.tostr"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tostr"], ["", "def", "query_index_by_arch", "(", "self", ",", "arch", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "str", ")", ":", "\n", "      ", "if", "arch", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "elif", "hasattr", "(", "arch", ",", "'tostr'", ")", ":", "\n", "      ", "if", "arch", ".", "tostr", "(", ")", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", ".", "tostr", "(", ")", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "else", ":", "arch_index", "=", "-", "1", "\n", "return", "arch_index", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.reload": [[107, 121], ["os.path.isdir", "os.path.join", "os.path.isfile", "torch.load", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "reload", "(", "self", ",", "archive_root", ":", "Text", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Overwrite all information of the 'index'-th architecture in the search space.\n         It will load its data from 'archive_root'.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "archive_root", ")", ",", "'invalid directory : {:}'", ".", "format", "(", "archive_root", ")", "\n", "xfile_path", "=", "os", ".", "path", ".", "join", "(", "archive_root", ",", "'{:06d}-FULL.pth'", ".", "format", "(", "index", ")", ")", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index of {:}'", ".", "format", "(", "index", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "xfile_path", ")", ",", "'invalid data path : {:}'", ".", "format", "(", "xfile_path", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "xfile_path", ",", "map_location", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "xdata", ",", "dict", ")", "and", "'full'", "in", "xdata", "and", "'less'", "in", "xdata", ",", "'invalid format of data in {:}'", ".", "format", "(", "xfile_path", ")", "\n", "if", "index", "in", "self", ".", "arch2infos_less", ":", "del", "self", ".", "arch2infos_less", "[", "index", "]", "\n", "if", "index", "in", "self", ".", "arch2infos_full", ":", "del", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "self", ".", "arch2infos_less", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'full'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.clear_params": [[122, 138], ["api.NASBench201API.arch2infos_less[].clear_params", "api.NASBench201API.arch2infos_full[].clear_params", "arch2infos[].clear_params"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.clear_params"], ["", "def", "clear_params", "(", "self", ",", "index", ":", "int", ",", "use_12epochs_result", ":", "Union", "[", "bool", ",", "None", "]", ")", ":", "\n", "    ", "\"\"\"Remove the architecture's weights to save memory.\n    :arg\n      index: the index of the target architecture\n      use_12epochs_result: a flag to controll how to clear the parameters.\n        -- None: clear all the weights in both `less` and `full`, which indicates the training hyper-parameters.\n        -- True: clear all the weights in arch2infos_less, which by default is 12-epoch-training result.\n        -- False: clear all the weights in arch2infos_full, which by default is 200-epoch-training result.\n    \"\"\"", "\n", "if", "use_12epochs_result", "is", "None", ":", "\n", "      ", "self", ".", "arch2infos_less", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "", "else", ":", "\n", "      ", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch2infos", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_by_arch": [[144, 158], ["isinstance", "api.NASBench201API.query_index_by_arch", "api.print_information", "print"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_index_by_arch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information"], ["", "", "def", "query_by_arch", "(", "self", ",", "arch", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "int", ")", ":", "\n", "      ", "arch_index", "=", "arch", "\n", "", "else", ":", "\n", "      ", "arch_index", "=", "self", ".", "query_index_by_arch", "(", "arch", ")", "\n", "", "if", "arch_index", "==", "-", "1", ":", "return", "None", "# the following two lines are used to support few training epochs", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "if", "arch_index", "in", "arch2infos", ":", "\n", "      ", "strings", "=", "print_information", "(", "arch2infos", "[", "arch_index", "]", ",", "'arch-index={:}'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "'\\n'", ".", "join", "(", "strings", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Find this arch-index : {:}, but this arch is not evaluated.'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_by_index": [[171, 182], ["copy.deepcopy", "copy.deepcopy.query", "copy.deepcopy.get_dataset_names"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_dataset_names"], ["", "", "def", "query_by_index", "(", "self", ",", "arch_index", ":", "int", ",", "dataname", ":", "Union", "[", "None", ",", "Text", "]", "=", "None", ",", "\n", "use_12epochs_result", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "if", "dataname", "is", "None", ":", "return", "archInfo", "\n", "else", ":", "\n", "      ", "assert", "dataname", "in", "archInfo", ".", "get_dataset_names", "(", ")", ",", "'invalid dataset-name : {:}'", ".", "format", "(", "dataname", ")", "\n", "info", "=", "archInfo", ".", "query", "(", "dataname", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.query_meta_info_by_index": [[183, 189], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "query_meta_info_by_index", "(", "self", ",", "arch_index", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "return", "archInfo", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.find_best": [[190, 207], ["enumerate", "arch2infos[].get_compute_costs", "arch2infos[].get_metrics"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics"], ["", "def", "find_best", "(", "self", ",", "dataset", ",", "metric_on_set", ",", "FLOP_max", "=", "None", ",", "Param_max", "=", "None", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"Find the architecture with the highest accuracy based on some constraints.\"\"\"", "\n", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "best_index", ",", "highest_accuracy", "=", "-", "1", ",", "None", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "      ", "info", "=", "arch2infos", "[", "idx", "]", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "info", "[", "'flops'", "]", ",", "info", "[", "'params'", "]", ",", "info", "[", "'latency'", "]", "\n", "if", "FLOP_max", "is", "not", "None", "and", "flop", ">", "FLOP_max", ":", "continue", "\n", "if", "Param_max", "is", "not", "None", "and", "param", ">", "Param_max", ":", "continue", "\n", "xinfo", "=", "arch2infos", "[", "idx", "]", ".", "get_metrics", "(", "dataset", ",", "metric_on_set", ")", "\n", "loss", ",", "accuracy", "=", "xinfo", "[", "'loss'", "]", ",", "xinfo", "[", "'accuracy'", "]", "\n", "if", "best_index", "==", "-", "1", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "elif", "highest_accuracy", "<", "accuracy", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "", "return", "best_index", ",", "highest_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.arch": [[208, 212], ["copy.deepcopy", "len", "len"], "methods", ["None"], ["", "def", "arch", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Return the topology structure of the `index`-th architecture.\"\"\"", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index : {:} vs. {:}.'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_net_param": [[213, 227], ["arch_result.get_net_param"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "index", ",", "dataset", ",", "seed", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the trained weights of the `index`-th architecture on `dataset` with the seed of `seed`\n      Args [seed]:\n        -- None : return a dict containing the trained weights of all trials, where each key is a seed and its corresponding value is the weights.\n        -- a interger : return the weights of a specific trial, whose seed is this interger.\n      Args [use_12epochs_result]:\n        -- True : train the model by 12 epochs\n        -- False : train the model by 200 epochs\n    \"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_net_param", "(", "dataset", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_net_config": [[228, 247], ["archresult.query", "archresult.query.items", "ValueError", "len", "ValueError", "result.get_config"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_config"], ["", "def", "get_net_config", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the configuration for the `index`-th architecture on `dataset`.\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      This function will return a dict.\n      ========= Some examlpes for using this function:\n      config = api.get_net_config(128, 'cifar10')\n    \"\"\"", "\n", "archresult", "=", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "all_results", "=", "archresult", ".", "query", "(", "dataset", ",", "None", ")", "\n", "if", "len", "(", "all_results", ")", "==", "0", ":", "raise", "ValueError", "(", "'can not find one valid trial for the {:}-th architecture on {:}'", ".", "format", "(", "index", ",", "dataset", ")", ")", "\n", "for", "seed", ",", "result", "in", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "return", "result", ".", "get_config", "(", "None", ")", "\n", "#print ('SEED [{:}] : {:}'.format(seed, result))", "\n", "", "raise", "ValueError", "(", "'Impossible to reach here!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_cost_info": [[248, 254], ["arch_result.get_compute_costs"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_compute_costs"], ["", "def", "get_cost_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "Dict", "[", "Text", ",", "float", "]", ":", "\n", "    ", "\"\"\"To obtain the cost metric for the `index`-th architecture on a dataset.\"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_compute_costs", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_latency": [[255, 264], ["api.NASBench201API.get_cost_info"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_cost_info"], ["", "def", "get_latency", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    To obtain the latency of the network (by default it will return the latency with the batch size of 256).\n    :param index: the index of the target architecture\n    :param dataset: the dataset name (cifar10-valid, cifar10, cifar100, ImageNet16-120)\n    :return: return a float value in seconds\n    \"\"\"", "\n", "cost_dict", "=", "self", ".", "get_cost_info", "(", "index", ",", "dataset", ",", "use_12epochs_result", ")", "\n", "return", "cost_dict", "[", "'latency'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.get_more_info": [[280, 338], ["archresult.get_metrics", "isinstance", "archresult.get_dataset_seeds", "random.choice", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_dataset_seeds", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics"], ["", "def", "get_more_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ",", "iepoch", "=", "None", ",", "use_12epochs_result", "=", "False", ",", "is_random", "=", "True", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "archresult", "=", "arch2infos", "[", "index", "]", "\n", "# if randomly select one trial, select the seed at first", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "\n", "      ", "seeds", "=", "archresult", ".", "get_dataset_seeds", "(", "dataset", ")", "\n", "is_random", "=", "random", ".", "choice", "(", "seeds", ")", "\n", "# collect the training information", "\n", "", "train_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'train'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "total", "=", "train_info", "[", "'iepoch'", "]", "+", "1", "\n", "xinfo", "=", "{", "'train-loss'", ":", "train_info", "[", "'loss'", "]", ",", "\n", "'train-accuracy'", ":", "train_info", "[", "'accuracy'", "]", ",", "\n", "'train-per-time'", ":", "train_info", "[", "'all_time'", "]", "/", "total", ",", "\n", "'train-all-time'", ":", "train_info", "[", "'all_time'", "]", "}", "\n", "# collect the evaluation information", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "try", ":", "\n", "        ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "valtest_info", "=", "None", "\n", "", "else", ":", "\n", "      ", "try", ":", "# collect results on the proposed test set", "\n", "        ", "if", "dataset", "==", "'cifar10'", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "try", ":", "# collect results on the proposed validation set", "\n", "        ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "valid_info", "=", "None", "\n", "", "try", ":", "\n", "        ", "if", "dataset", "!=", "'cifar10'", ":", "\n", "          ", "valtest_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "valtest_info", "=", "None", "\n", "", "", "except", ":", "\n", "        ", "valtest_info", "=", "None", "\n", "", "", "if", "valid_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valid-loss'", "]", "=", "valid_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valid-accuracy'", "]", "=", "valid_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valid-per-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valid-all-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "\n", "", "if", "test_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'test-loss'", "]", "=", "test_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'test-accuracy'", "]", "=", "test_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'test-per-time'", "]", "=", "test_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'test-all-time'", "]", "=", "test_info", "[", "'all_time'", "]", "\n", "", "if", "valtest_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valtest-loss'", "]", "=", "valtest_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valtest-accuracy'", "]", "=", "valtest_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valtest-per-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valtest-all-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "\n", "", "return", "xinfo", "\n", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.show": [[398, 431], ["print", "enumerate", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "len", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "len", "len", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch"], ["def", "show", "(", "self", ",", "index", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    This function will print the information of a specific (or all) architecture(s).\n\n    :param index: If the index < 0: it will loop for all architectures and print their information one by one.\n                  else: it will print the information of the 'index'-th archiitecture.\n    :return: nothing\n    \"\"\"", "\n", "if", "index", "<", "0", ":", "# show all architectures", "\n", "      ", "print", "(", "self", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "        ", "print", "(", "'\\n'", "+", "'-'", "*", "10", "+", "' The ({:5d}/{:5d}) {:06d}-th architecture! '", ".", "format", "(", "i", ",", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "idx", ")", "+", "'-'", "*", "10", ")", "\n", "print", "(", "'arch : {:}'", ".", "format", "(", "self", ".", "meta_archs", "[", "idx", "]", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ":", "\n", "        ", "if", "index", "not", "in", "self", ".", "evaluated_indexes", ":", "print", "(", "'The {:}-th architecture has not been evaluated or not saved.'", ".", "format", "(", "index", ")", ")", "\n", "else", ":", "\n", "          ", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'This index ({:}) is out of range (0~{:}).'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.statistics": [[432, 450], ["collections.defaultdict", "range", "dict", "ValueError", "len", "len"], "methods", ["None"], ["", "", "", "def", "statistics", "(", "self", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", ")", "->", "Dict", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    This function will count the number of total trials.\n    \"\"\"", "\n", "valid_datasets", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "if", "dataset", "not", "in", "valid_datasets", ":", "\n", "      ", "raise", "ValueError", "(", "'{:} not in {:}'", ".", "format", "(", "dataset", ",", "valid_datasets", ")", ")", "\n", "", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "nums", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "      ", "archInfo", "=", "arch2infos", "[", "index", "]", "\n", "dataset_seed", "=", "archInfo", ".", "dataset_seed", "\n", "if", "dataset", "not", "in", "dataset_seed", ":", "\n", "        ", "nums", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "        ", "nums", "[", "len", "(", "dataset_seed", "[", "dataset", "]", ")", "]", "+=", "1", "\n", "", "", "return", "dict", "(", "nums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.str2lists": [[451, 477], ["arch_str.split", "enumerate", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2lists", "(", "arch_str", ":", "Text", ")", "->", "List", "[", "tuple", "]", ":", "\n", "    ", "\"\"\"\n    This function shows how to read the string-based architecture encoding.\n      It is the same as the `str2structure` func in `AutoDL-Projects/lib/models/cell_searchs/genotypes.py`\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n    :return: a list of tuple, contains multiple (op, input_node_index) pairs.\n\n    :usage\n      arch = api.str2lists( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      print ('there are {:} nodes in this arch'.format(len(arch)+1)) # arch is a list\n      for i, node in enumerate(arch):\n        print('the {:}-th node is the sum of these {:} nodes with op: {:}'.format(i+1, len(node), node))\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.NASBench201API.str2matrix": [[478, 515], ["arch_str.split", "numpy.zeros", "enumerate", "len", "list", "filter", "xi.split", "node_str.split", "len", "ValueError", "search_space.index", "int", "xinput.split"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "@", "staticmethod", "\n", "def", "str2matrix", "(", "arch_str", ":", "Text", ",", "\n", "search_space", ":", "List", "[", "Text", "]", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    This func shows how to convert the string-based architecture encoding to the encoding strategy in NAS-Bench-101.\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n      search_space: a list of operation string, the default list is the search space for NAS-Bench-201\n        the default value should be be consistent with this line https://github.com/D-X-Y/AutoDL-Projects/blob/master/lib/models/cell_operations.py#L24\n    :return\n      the numpy matrix (2-D np.ndarray) representing the DAG of this architecture topology\n    :usage\n      matrix = api.str2matrix( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      This matrix is 4-by-4 matrix representing a cell with 4 nodes (only the lower left triangle is useful).\n         [ [0, 0, 0, 0],  # the first line represents the input (0-th) node\n           [2, 0, 0, 0],  # the second line represents the 1-st node, is calculated by 2-th-op( 0-th-node )\n           [0, 0, 0, 0],  # the third line represents the 2-nd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node )\n           [0, 0, 1, 0] ] # the fourth line represents the 3-rd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node ) + 1-th-op( 2-th-node )\n      In NAS-Bench-201 search space, 0-th-op is 'none', 1-th-op is 'skip_connect',\n         2-th-op is 'nor_conv_1x1', 3-th-op is 'nor_conv_3x3', 4-th-op is 'avg_pool_3x3'.\n    :(NOTE)\n      If a node has two input-edges from the same node, this function does not work. One edge will be overlapped.\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "num_nodes", "=", "len", "(", "node_strs", ")", "+", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "for", "xi", "in", "inputs", ":", "\n", "        ", "op", ",", "idx", "=", "xi", ".", "split", "(", "'~'", ")", "\n", "if", "op", "not", "in", "search_space", ":", "raise", "ValueError", "(", "'this op ({:}) is not in {:}'", ".", "format", "(", "op", ",", "search_space", ")", ")", "\n", "op_idx", ",", "node_idx", "=", "search_space", ".", "index", "(", "op", ")", ",", "int", "(", "idx", ")", "\n", "matrix", "[", "i", "+", "1", ",", "node_idx", "]", "=", "op_idx", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.__init__": [[519, 525], ["int", "copy.deepcopy", "dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "arch_index", ",", "arch_str", ")", ":", "\n", "    ", "self", ".", "arch_index", "=", "int", "(", "arch_index", ")", "\n", "self", ".", "arch_str", "=", "copy", ".", "deepcopy", "(", "arch_str", ")", "\n", "self", ".", "all_results", "=", "dict", "(", ")", "\n", "self", ".", "dataset_seed", "=", "dict", "(", ")", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_compute_costs": [[526, 548], ["collections.defaultdict", "collections.defaultdict.items", "result.get_latency", "numpy.mean", "result.get_times", "result.get_times.items", "numpy.mean", "numpy.mean", "len", "time_infos[].append", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_times"], ["", "def", "get_compute_costs", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "\n", "flops", "=", "[", "result", ".", "flop", "for", "result", "in", "results", "]", "\n", "params", "=", "[", "result", ".", "params", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "result", ".", "get_latency", "(", ")", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "x", "for", "x", "in", "latencies", "if", "x", ">", "0", "]", "\n", "mean_latency", "=", "np", ".", "mean", "(", "latencies", ")", "if", "len", "(", "latencies", ")", ">", "0", "else", "None", "\n", "time_infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "time_info", "=", "result", ".", "get_times", "(", ")", "\n", "for", "key", ",", "value", "in", "time_info", ".", "items", "(", ")", ":", "time_infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "info", "=", "{", "'flops'", ":", "np", ".", "mean", "(", "flops", ")", ",", "\n", "'params'", ":", "np", ".", "mean", "(", "params", ")", ",", "\n", "'latency'", ":", "mean_latency", "}", "\n", "for", "key", ",", "value", "in", "time_infos", ".", "items", "(", ")", ":", "\n", "      ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "info", "[", "key", "]", "=", "None", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics": [[549, 606], ["collections.defaultdict", "dict", "result.get_eval.items", "isinstance", "random.randint", "collections.defaultdict.items", "result.get_train", "result.get_eval", "infos[].append", "isinstance", "collections.defaultdict.items", "isinstance", "len", "x_seeds.index", "collections.defaultdict.items", "ValueError", "numpy.mean", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_train", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_eval"], ["", "def", "get_metrics", "(", "self", ",", "dataset", ",", "setname", ",", "iepoch", "=", "None", ",", "is_random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This `get_metrics` function is used to obtain obtain the loss, accuracy, etc information on a specific dataset.\n      If not specify, each set refer to the proposed split in NAS-Bench-201 paper.\n      If some args return None or raise error, then it is not avaliable.\n      ========================================\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      Args [setname] (each dataset has different setnames):\n        -- When dataset = cifar10-valid, you can use 'train', 'x-valid', 'ori-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar10, you can use 'train', 'ori-test'.\n        ------ 'train' : the metric on the training + validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar100 or ImageNet16-120, you can use 'train', 'ori-test', 'x-valid', 'x-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'x-test' : the metric on the test set.\n        ------ 'ori-test' : the metric on the validation + test set.\n      Args [iepoch] (None or an integer in [0, the-number-of-total-training-epochs)\n        ------ None : return the metric after the last training epoch.\n        ------ an integer i : return the metric after the i-th training epoch.\n      Args [is_random]:\n        ------ True : return the metric of a randomly selected trial.\n        ------ False : return the averaged metric of all avaliable trials.\n        ------ an integer indicating the 'seed' value : return the metric of a specific trial (whose random seed is 'is_random').\n    \"\"\"", "\n", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "if", "setname", "==", "'train'", ":", "\n", "        ", "info", "=", "result", ".", "get_train", "(", "iepoch", ")", "\n", "", "else", ":", "\n", "        ", "info", "=", "result", ".", "get_eval", "(", "setname", ",", "iepoch", ")", "\n", "", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "return_info", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "# randomly select one", "\n", "      ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "results", ")", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "elif", "isinstance", "(", "is_random", ",", "bool", ")", "and", "not", "is_random", ":", "# average", "\n", "      ", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "return_info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "return_info", "[", "key", "]", "=", "None", "\n", "", "", "elif", "isinstance", "(", "is_random", ",", "int", ")", ":", "# specify the seed", "\n", "      ", "if", "is_random", "not", "in", "x_seeds", ":", "raise", "ValueError", "(", "'can not find random seed ({:}) from {:}'", ".", "format", "(", "is_random", ",", "x_seeds", ")", ")", "\n", "index", "=", "x_seeds", ".", "index", "(", "is_random", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid value for is_random: {:}'", ".", "format", "(", "is_random", ")", ")", "\n", "", "return", "return_info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show": [[607, 609], ["api.print_information"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information"], ["", "def", "show", "(", "self", ",", "is_print", "=", "False", ")", ":", "\n", "    ", "return", "print_information", "(", "self", ",", "None", ",", "is_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_dataset_names": [[610, 612], ["list", "api.ArchResults.dataset_seed.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "get_dataset_names", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "dataset_seed", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_dataset_seeds": [[613, 615], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_dataset_seeds", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "dataset_seed", "[", "dataset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_net_param": [[616, 628], ["api.ArchResults.all_results[].get_net_param", "api.ArchResults.all_results[].get_net_param"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_net_param", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function will return the trained network's weights on the 'dataset'.\n    :arg\n      dataset: one of 'cifar10-valid', 'cifar10', 'cifar100', and 'ImageNet16-120'.\n      seed: an integer indicates the seed value or None that indicates returing all trials.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.reset_latency": [[629, 636], ["api.ArchResults.all_results[].update_latency", "api.ArchResults.all_results[].update_latency"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_latency", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_latency"], ["", "", "def", "reset_latency", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "latency", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the latency in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.reset_pseudo_train_times": [[637, 644], ["api.ArchResults.all_results[].reset_pseudo_train_times", "api.ArchResults.all_results[].reset_pseudo_train_times"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_train_times", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_train_times"], ["", "", "def", "reset_pseudo_train_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the train-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.reset_pseudo_eval_times": [[645, 652], ["api.ArchResults.all_results[].reset_pseudo_eval_times", "api.ArchResults.all_results[].reset_pseudo_eval_times"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_eval_times", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_eval_times"], ["", "", "def", "reset_pseudo_eval_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the eval-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_latency": [[653, 662], ["api.ArchResults.all_results[].get_latency", "latencies.append", "sum", "len", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_latency"], ["", "", "def", "get_latency", "(", "self", ",", "dataset", ":", "Text", ")", "->", "float", ":", "\n", "    ", "\"\"\"Get the latency of a model on the target dataset. [Timestamp: 2020.03.09]\"\"\"", "\n", "latencies", "=", "[", "]", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "      ", "latency", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_latency", "(", ")", "\n", "if", "not", "isinstance", "(", "latency", ",", "float", ")", "or", "latency", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid latency of {:} for {:} with {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "latencies", ".", "append", "(", "latency", ")", "\n", "", "return", "sum", "(", "latencies", ")", "/", "len", "(", "latencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_total_epoch": [[663, 676], ["api.ArchResults.dataset_seed.items", "isinstance", "len", "ValueError", "ValueError", "set", "api.ArchResults.all_results[].get_total_epoch", "api.ArchResults.all_results[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch"], ["", "def", "get_total_epoch", "(", "self", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the total number of training epochs.\"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "      ", "epochss", "=", "[", "]", "\n", "for", "xdata", ",", "x_seeds", "in", "self", ".", "dataset_seed", ".", "items", "(", ")", ":", "\n", "        ", "epochss", "+=", "[", "self", ".", "all_results", "[", "(", "xdata", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "epochss", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid dataset={:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "if", "len", "(", "set", "(", "epochss", ")", ")", ">", "1", ":", "raise", "ValueError", "(", "'Each trial mush have the same number of training epochs : {:}'", ".", "format", "(", "epochss", ")", ")", "\n", "return", "epochss", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.query": [[677, 684], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "dataset", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the ResultsCount object (containing all information of a single trial) for 'dataset' and 'seed'\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.arch_idx_str": [[685, 687], ["None"], "methods", ["None"], ["", "", "def", "arch_idx_str", "(", "self", ")", ":", "\n", "    ", "return", "'{:06d}'", ".", "format", "(", "self", ".", "arch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.update": [[688, 697], ["api.ArchResults.dataset_seed[].append", "sorted"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dataset_name", ",", "seed", ",", "result", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "self", ".", "dataset_seed", ":", "\n", "      ", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "[", "]", "\n", "", "assert", "seed", "not", "in", "self", ".", "dataset_seed", "[", "dataset_name", "]", ",", "'{:}-th arch alreadly has this seed ({:}) on {:}'", ".", "format", "(", "self", ".", "arch_index", ",", "seed", ",", "dataset_name", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", ".", "append", "(", "seed", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "sorted", "(", "self", ".", "dataset_seed", "[", "dataset_name", "]", ")", "\n", "assert", "(", "dataset_name", ",", "seed", ")", "not", "in", "self", ".", "all_results", "\n", "self", ".", "all_results", "[", "(", "dataset_name", ",", "seed", ")", "]", "=", "result", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.state_dict": [[698, 711], ["dict", "api.ArchResults.__dict__.items", "dict", "isinstance", "value.items", "type", "isinstance", "_v.state_dict", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# contain the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "assert", "isinstance", "(", "_v", ",", "ResultsCount", ")", ",", "'invalid type of value for {:}/{:} : {:}'", ".", "format", "(", "key", ",", "_k", ",", "type", "(", "_v", ")", ")", "\n", "xvalue", "[", "_k", "]", "=", "_v", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "xvalue", "=", "value", "\n", "", "state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.load_state_dict": [[712, 723], ["dict", "state_dict.items", "api.ArchResults.__dict__.update", "dict", "isinstance", "value.items", "type", "api.ResultsCount.create_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# to convert to the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "xvalue", "[", "_k", "]", "=", "ResultsCount", ".", "create_from_state_dict", "(", "_v", ")", "\n", "", "", "else", ":", "xvalue", "=", "value", "\n", "new_state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "self", ".", "__dict__", ".", "update", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.create_from_state_dict": [[724, 735], ["api.ArchResults", "isinstance", "api.ArchResults.load_state_dict", "torch.load", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict_or_file", ")", ":", "\n", "    ", "x", "=", "ArchResults", "(", "-", "1", ",", "-", "1", ")", "\n", "if", "isinstance", "(", "state_dict_or_file", ",", "str", ")", ":", "# a file path", "\n", "      ", "state_dict", "=", "torch", ".", "load", "(", "state_dict_or_file", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "state_dict_or_file", ",", "dict", ")", ":", "\n", "      ", "state_dict", "=", "state_dict_or_file", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of state_dict_or_file : {:}'", ".", "format", "(", "type", "(", "state_dict_or_file", ")", ")", ")", "\n", "", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.clear_params": [[738, 743], ["api.ArchResults.all_results.items"], "methods", ["None"], ["", "def", "clear_params", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "result", "in", "self", ".", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "del", "result", ".", "net_state_dict", "\n", "result", ".", "net_state_dict", "=", "None", "\n", "", "self", ".", "clear_net_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.debug_test": [[744, 754], ["print", "print", "print", "print", "api.ArchResults.get_latency", "result.get_times"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_times"], ["", "def", "debug_test", "(", "self", ")", ":", "\n", "    ", "\"\"\"This function is used for me to debug and test, which will call most methods.\"\"\"", "\n", "all_dataset", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "for", "dataset", "in", "all_dataset", ":", "\n", "      ", "print", "(", "'---->>>> {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "'The latency on {:} is {:} s'", ".", "format", "(", "dataset", ",", "self", ".", "get_latency", "(", "dataset", ")", ")", ")", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "result", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "print", "(", "'  ==>> result = {:}'", ".", "format", "(", "result", ")", ")", "\n", "print", "(", "'  ==>> cost = {:}'", ".", "format", "(", "result", ".", "get_times", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.__repr__": [[755, 757], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(arch-index={index}, arch={arch}, {num} runs, clear={clear})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "index", "=", "self", ".", "arch_index", ",", "arch", "=", "self", ".", "arch_str", ",", "num", "=", "len", "(", "self", ".", "all_results", ")", ",", "clear", "=", "self", ".", "clear_net_done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.__init__": [[766, 781], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "api.ResultsCount.reset_eval"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_eval"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "state_dict", ",", "train_accs", ",", "train_losses", ",", "params", ",", "flop", ",", "arch_config", ",", "seed", ",", "epochs", ",", "latency", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "net_state_dict", "=", "state_dict", "\n", "self", ".", "train_acc1es", "=", "copy", ".", "deepcopy", "(", "train_accs", ")", "\n", "self", ".", "train_acc5es", "=", "None", "\n", "self", ".", "train_losses", "=", "copy", ".", "deepcopy", "(", "train_losses", ")", "\n", "self", ".", "train_times", "=", "None", "\n", "self", ".", "arch_config", "=", "copy", ".", "deepcopy", "(", "arch_config", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "flop", "=", "flop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "latency", "=", "latency", "\n", "# evaluation results", "\n", "self", ".", "reset_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_train_info": [[782, 787], ["None"], "methods", ["None"], ["", "def", "update_train_info", "(", "self", ",", "train_acc1es", ",", "train_acc5es", ",", "train_losses", ",", "train_times", ")", "->", "None", ":", "\n", "    ", "self", ".", "train_acc1es", "=", "train_acc1es", "\n", "self", ".", "train_acc5es", "=", "train_acc5es", "\n", "self", ".", "train_losses", "=", "train_losses", "\n", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_train_times": [[788, 794], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "reset_pseudo_train_times", "(", "self", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the training times.\"\"\"", "\n", "train_times", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "train_times", "[", "i", "]", "=", "estimated_per_epoch_time", "\n", "", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_pseudo_eval_times": [[795, 800], ["range", "ValueError"], "methods", ["None"], ["", "def", "reset_pseudo_eval_times", "(", "self", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the evaluation times.\"\"\"", "\n", "if", "eval_name", "not", "in", "self", ".", "eval_names", ":", "raise", "ValueError", "(", "'invalid eval name : {:}'", ".", "format", "(", "eval_name", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "eval_name", ",", "i", ")", "]", "=", "estimated_per_epoch_time", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.reset_eval": [[801, 806], ["None"], "methods", ["None"], ["", "", "def", "reset_eval", "(", "self", ")", ":", "\n", "    ", "self", ".", "eval_names", "=", "[", "]", "\n", "self", ".", "eval_acc1es", "=", "{", "}", "\n", "self", ".", "eval_times", "=", "{", "}", "\n", "self", ".", "eval_losses", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_latency": [[807, 809], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_latency", "(", "self", ",", "latency", ")", ":", "\n", "    ", "self", ".", "latency", "=", "copy", ".", "deepcopy", "(", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_latency": [[810, 814], ["sum", "len"], "methods", ["None"], ["", "def", "get_latency", "(", "self", ")", "->", "float", ":", "\n", "    ", "\"\"\"Return the latency value in seconds. -1 represents not avaliable ; otherwise it should be a float value\"\"\"", "\n", "if", "self", ".", "latency", "is", "None", ":", "return", "-", "1.0", "\n", "else", ":", "return", "sum", "(", "self", ".", "latency", ")", "/", "len", "(", "self", ".", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_eval": [[815, 825], ["set", "api.ResultsCount.eval_names.append", "range", "x.split", "accs.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "update_eval", "(", "self", ",", "accs", ",", "losses", ",", "times", ")", ":", "# new version", "\n", "    ", "data_names", "=", "set", "(", "[", "x", ".", "split", "(", "'@'", ")", "[", "0", "]", "for", "x", "in", "accs", ".", "keys", "(", ")", "]", ")", "\n", "for", "data_name", "in", "data_names", ":", "\n", "      ", "assert", "data_name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already been added into eval-names'", ".", "format", "(", "data_name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "data_name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "        ", "xkey", "=", "'{:}@{:}'", ".", "format", "(", "data_name", ",", "iepoch", ")", "\n", "self", ".", "eval_acc1es", "[", "xkey", "]", "=", "accs", "[", "xkey", "]", "\n", "self", ".", "eval_losses", "[", "xkey", "]", "=", "losses", "[", "xkey", "]", "\n", "self", ".", "eval_times", "[", "xkey", "]", "=", "times", "[", "xkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.update_OLD_eval": [[826, 833], ["api.ResultsCount.eval_names.append", "range"], "methods", ["None"], ["", "", "", "def", "update_OLD_eval", "(", "self", ",", "name", ",", "accs", ",", "losses", ")", ":", "# old version", "\n", "    ", "assert", "name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already added'", ".", "format", "(", "name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "if", "iepoch", "in", "accs", ":", "\n", "        ", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "accs", "[", "iepoch", "]", "\n", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "losses", "[", "iepoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.__repr__": [[834, 838], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "num_eval", "=", "len", "(", "self", ".", "eval_names", ")", "\n", "set_name", "=", "'['", "+", "', '", ".", "join", "(", "self", ".", "eval_names", ")", "+", "']'", "\n", "return", "(", "'{name}({xname}, arch={arch}, FLOP={flop:.2f}M, Param={param:.3f}MB, seed={seed}, {num_eval} eval-sets: {set_name})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "xname", "=", "self", ".", "name", ",", "arch", "=", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "flop", "=", "self", ".", "flop", ",", "param", "=", "self", ".", "params", ",", "seed", "=", "self", ".", "seed", ",", "num_eval", "=", "num_eval", ",", "set_name", "=", "set_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_total_epoch": [[839, 841], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_total_epoch", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_times": [[842, 858], ["isinstance", "list", "api.ResultsCount.train_times.values", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "range"], "methods", ["None"], ["", "def", "get_times", "(", "self", ")", ":", "\n", "    ", "\"\"\"Obtain the information regarding both training and evaluation time.\"\"\"", "\n", "if", "self", ".", "train_times", "is", "not", "None", "and", "isinstance", "(", "self", ".", "train_times", ",", "dict", ")", ":", "\n", "      ", "train_times", "=", "list", "(", "self", ".", "train_times", ".", "values", "(", ")", ")", "\n", "time_info", "=", "{", "'T-train@epoch'", ":", "np", ".", "mean", "(", "train_times", ")", ",", "'T-train@total'", ":", "np", ".", "sum", "(", "train_times", ")", "}", "\n", "", "else", ":", "\n", "      ", "time_info", "=", "{", "'T-train@epoch'", ":", "None", ",", "'T-train@total'", ":", "None", "}", "\n", "", "for", "name", "in", "self", ".", "eval_names", ":", "\n", "      ", "try", ":", "\n", "        ", "xtimes", "=", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", "]", "\n", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "mean", "(", "xtimes", ")", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "sum", "(", "xtimes", ")", "\n", "", "except", ":", "\n", "        ", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "", "", "return", "time_info", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_eval_set": [[859, 861], ["None"], "methods", ["None"], ["", "def", "get_eval_set", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "eval_names", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_train": [[863, 875], ["sum", "range"], "methods", ["None"], ["", "def", "get_train", "(", "self", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "self", ".", "train_times", "is", "not", "None", ":", "\n", "      ", "xtime", "=", "self", ".", "train_times", "[", "iepoch", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "train_times", "[", "i", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "train_losses", "[", "iepoch", "]", ",", "\n", "'accuracy'", ":", "self", ".", "train_acc1es", "[", "iepoch", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_eval": [[876, 889], ["isinstance", "sum", "len", "range"], "methods", ["None"], ["", "def", "get_eval", "(", "self", ",", "name", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the evaluation information ; there could be multiple evaluation sets (identified by the 'name' argument).\"\"\"", "\n", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "isinstance", "(", "self", ".", "eval_times", ",", "dict", ")", "and", "len", "(", "self", ".", "eval_times", ")", ">", "0", ":", "\n", "      ", "xtime", "=", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'accuracy'", ":", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_net_param": [[890, 893], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_net_param", "(", "self", ",", "clone", "=", "False", ")", ":", "\n", "    ", "if", "clone", ":", "return", "copy", ".", "deepcopy", "(", "self", ".", "net_state_dict", ")", "\n", "else", ":", "return", "self", ".", "net_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.get_config": [[894, 904], ["str2structure"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.str2structure"], ["", "def", "get_config", "(", "self", ",", "str2structure", ")", ":", "\n", "    ", "\"\"\"This function is used to obtain the config dict for this architecture.\"\"\"", "\n", "if", "str2structure", "is", "None", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'arch_str'", ":", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'genotype'", ":", "str2structure", "(", "self", ".", "arch_config", "[", "'arch_str'", "]", ")", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.state_dict": [[905, 908], ["api.ResultsCount.__dict__.items"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "_state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "return", "_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict": [[909, 911], ["api.ResultsCount.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.create_from_state_dict": [[912, 917], ["api.ResultsCount", "api.ResultsCount.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "x", "=", "ResultsCount", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.print_information": [[18, 42], ["information.get_dataset_names", "enumerate", "information.get_compute_costs", "information.get_metrics", "print", "information.get_metrics", "api.print_information.metric2str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_dataset_names", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.get_metrics"], ["def", "print_information", "(", "information", ",", "extra_info", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "  ", "dataset_names", "=", "information", ".", "get_dataset_names", "(", ")", "\n", "strings", "=", "[", "information", ".", "arch_str", ",", "'datasets : {:}, extra-info : {:}'", ".", "format", "(", "dataset_names", ",", "extra_info", ")", "]", "\n", "def", "metric2str", "(", "loss", ",", "acc", ")", ":", "\n", "    ", "return", "'loss = {:.3f}, top1 = {:.2f}%'", ".", "format", "(", "loss", ",", "acc", ")", "\n", "\n", "", "for", "ida", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "    ", "metric", "=", "information", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "metric", "[", "'flops'", "]", ",", "metric", "[", "'params'", "]", ",", "metric", "[", "'latency'", "]", "\n", "str1", "=", "'{:14s} FLOP={:6.2f} M, Params={:.3f} MB, latency={:} ms.'", ".", "format", "(", "dataset", ",", "flop", ",", "param", ",", "'{:.2f}'", ".", "format", "(", "latency", "*", "1000", ")", "if", "latency", "is", "not", "None", "and", "latency", ">", "0", "else", "None", ")", "\n", "train_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'train'", ")", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "      ", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], test  : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}], test : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "strings", "+=", "[", "str1", ",", "str2", "]", "\n", "", "if", "show", ":", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.config.build_config": [[104, 112], ["FLAGS.flags_by_module_dict"], "function", ["None"], ["def", "build_config", "(", ")", ":", "\n", "  ", "\"\"\"Build config from flags defined in this module.\"\"\"", "\n", "config", "=", "{", "\n", "flag", ".", "name", ":", "flag", ".", "value", "\n", "for", "flag", "in", "FLAGS", ".", "flags_by_module_dict", "(", ")", "[", "__name__", "]", "\n", "}", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.__init__": [[35, 71], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "model_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec._prune": [[72, 122], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.intersection"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.hash_spec": [[123, 136], ["nas_lib.data.nasbench_101_api.graph_util.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the canonical ordering which they\n        were assigned (i.e. the order provided in the config['available_ops']).\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "graph_util", ".", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.visualize": [[137, 152], ["graphviz.Digraph", "graphviz.Digraph.node", "range", "graphviz.Digraph.node", "range", "numpy.shape", "str", "graphviz.Digraph.node", "str", "range", "str", "graphviz.Digraph.edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.node", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.node"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates a dot graph. Can be visualized in colab directly.\"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "matrix", ")", "[", "0", "]", "\n", "g", "=", "graphviz", ".", "Digraph", "(", ")", "\n", "g", ".", "node", "(", "str", "(", "0", ")", ",", "'input'", ")", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "g", ".", "node", "(", "str", "(", "v", ")", ",", "self", ".", "ops", "[", "v", "]", ")", "\n", "", "g", ".", "node", "(", "str", "(", "num_vertices", "-", "1", ")", ",", "'output'", ")", "\n", "\n", "for", "src", "in", "range", "(", "num_vertices", "-", "1", ")", ":", "\n", "      ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "matrix", "[", "src", ",", "dst", "]", ":", "\n", "          ", "g", ".", "edge", "(", "str", "(", "src", ")", ",", "str", "(", "dst", ")", ")", "\n", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.is_upper_triangular": [[154, 162], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.gen_is_edge_fn": [[22, 56], ["numpy.vectorize"], "function", ["None"], ["def", "gen_is_edge_fn", "(", "bits", ")", ":", "\n", "  ", "\"\"\"Generate a boolean function for the edge connectivity.\n\n  Given a bitstring FEDCBA and a 4x4 matrix, the generated matrix is\n    [[0, A, B, D],\n     [0, 0, C, E],\n     [0, 0, 0, F],\n     [0, 0, 0, 0]]\n\n  Note that this function is agnostic to the actual matrix dimension due to\n  order in which elements are filled out (column-major, starting from least\n  significant bit). For example, the same FEDCBA bitstring (0-padded) on a 5x5\n  matrix is\n    [[0, A, B, D, 0],\n     [0, 0, C, E, 0],\n     [0, 0, 0, F, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]\n\n  Args:\n    bits: integer which will be interpreted as a bit mask.\n\n  Returns:\n    vectorized function that returns True when an edge is present.\n  \"\"\"", "\n", "def", "is_edge", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Is there an edge from x to y (0-indexed)?\"\"\"", "\n", "if", "x", ">=", "y", ":", "\n", "      ", "return", "0", "\n", "# Map x, y to index into bit string", "\n", "", "index", "=", "x", "+", "(", "y", "*", "(", "y", "-", "1", ")", "//", "2", ")", "\n", "return", "(", "bits", ">>", "index", ")", "%", "2", "==", "1", "\n", "\n", "", "return", "np", ".", "vectorize", "(", "is_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.is_full_dag": [[58, 84], ["numpy.shape", "numpy.all", "numpy.any", "numpy.all", "numpy.any"], "function", ["None"], ["", "def", "is_full_dag", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Full DAG == all vertices on a path from vert 0 to (V-1).\n\n  i.e. no disconnected or \"hanging\" vertices.\n\n  It is sufficient to check for:\n    1) no rows of 0 except for row V-1 (only output vertex has no out-edges)\n    2) no cols of 0 except for col 0 (only input vertex has no in-edges)\n\n  Args:\n    matrix: V x V upper-triangular adjacency matrix\n\n  Returns:\n    True if the there are no dangling vertices.\n  \"\"\"", "\n", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "\n", "rows", "=", "matrix", "[", ":", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "==", "0", "\n", "rows", "=", "np", ".", "all", "(", "rows", ",", "axis", "=", "1", ")", "# Any row with all 0 will be True", "\n", "rows_bad", "=", "np", ".", "any", "(", "rows", ")", "\n", "\n", "cols", "=", "matrix", "[", ":", ",", "1", ":", "]", "==", "0", "\n", "cols", "=", "np", ".", "all", "(", "cols", ",", "axis", "=", "0", ")", "# Any col with all 0 will be True", "\n", "cols_bad", "=", "np", ".", "any", "(", "cols", ")", "\n", "\n", "return", "(", "not", "rows_bad", ")", "and", "(", "not", "cols_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.num_edges": [[86, 89], ["numpy.sum"], "function", ["None"], ["", "def", "num_edges", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes number of edges in adjacency matrix.\"\"\"", "\n", "return", "np", ".", "sum", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.hash_module": [[91, 124], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.genotypes.Structure.tolist"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.permute_graph": [[126, 146], ["zip", "numpy.fromfunction", "list", "numpy.vectorize", "range", "sorted", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "permute_graph", "(", "graph", ",", "label", ",", "permutation", ")", ":", "\n", "  ", "\"\"\"Permutes the graph and labels based on permutation.\n\n  Args:\n    graph: np.ndarray adjacency matrix.\n    label: list of labels of same length as graph dimensions.\n    permutation: a permutation list of ints of same length as graph dimensions.\n\n  Returns:\n    np.ndarray where vertex permutation[v] is vertex v from the original graph\n  \"\"\"", "\n", "# vertex permutation[v] in new graph is vertex v in the old graph", "\n", "forward_perm", "=", "zip", "(", "permutation", ",", "list", "(", "range", "(", "len", "(", "permutation", ")", ")", ")", ")", "\n", "inverse_perm", "=", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "forward_perm", ")", "]", "\n", "edge_fn", "=", "lambda", "x", ",", "y", ":", "graph", "[", "inverse_perm", "[", "x", "]", ",", "inverse_perm", "[", "y", "]", "]", "==", "1", "\n", "new_matrix", "=", "np", ".", "fromfunction", "(", "np", ".", "vectorize", "(", "edge_fn", ")", ",", "\n", "(", "len", "(", "label", ")", ",", "len", "(", "label", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "new_label", "=", "[", "label", "[", "inverse_perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", "\n", "return", "new_matrix", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.is_isomorphic": [[148, 164], ["itertools.permutations", "numpy.array", "numpy.array", "numpy.shape", "numpy.shape", "len", "len", "numpy.shape", "range", "graph_util.permute_graph", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.graph_util.permute_graph"], ["", "def", "is_isomorphic", "(", "graph1", ",", "graph2", ")", ":", "\n", "  ", "\"\"\"Exhaustively checks if 2 graphs are isomorphic.\"\"\"", "\n", "matrix1", ",", "label1", "=", "np", ".", "array", "(", "graph1", "[", "0", "]", ")", ",", "graph1", "[", "1", "]", "\n", "matrix2", ",", "label2", "=", "np", ".", "array", "(", "graph2", "[", "0", "]", ")", ",", "graph2", "[", "1", "]", "\n", "assert", "np", ".", "shape", "(", "matrix1", ")", "==", "np", ".", "shape", "(", "matrix2", ")", "\n", "assert", "len", "(", "label1", ")", "==", "len", "(", "label2", ")", "\n", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix1", ")", "[", "0", "]", "\n", "# Note: input and output in our constrained graphs always map to themselves", "\n", "# but this script does not enforce that.", "\n", "for", "perm", "in", "itertools", ".", "permutations", "(", "range", "(", "0", ",", "vertices", ")", ")", ":", "\n", "    ", "pmatrix1", ",", "plabel1", "=", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "if", "np", ".", "array_equal", "(", "pmatrix1", ",", "matrix2", ")", "and", "plabel1", "==", "label2", ":", "\n", "      ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.__init__": [[23, 64], ["nas_lib.build_config", "random.seed", "print", "time.time", "set", "print", "open", "pickle.load", "open", "pickle.load", "time.time"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.config.build_config"], ["def", "__init__", "(", "self", ",", "fixed_statistics_path", "=", "fixed_statistics_path", ",", "\n", "computed_statistics_path", "=", "computed_statistics_path", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize dataset, this should only be done once per experiment.\n\n    Args:\n      dataset_file: path to .tfrecord file containing the dataset.\n      seed: random seed used for sampling queried models. Two NASBench objects\n        created with the same seed will return the same data points when queried\n        with the same models in the same order. By default, the seed is randomly\n        generated.\n    \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "build_config", "(", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "'Loading dataset from file... This may take a few minutes...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Stores the fixed statistics that are independent of evaluation (i.e.,", "\n", "# adjacency matrix, operations, and number of parameters).", "\n", "# hash --> metric name --> scalar", "\n", "with", "open", "(", "fixed_statistics_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "self", ".", "fixed_statistics", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Stores the statistics that are computed via training and evaluating the", "\n", "# model on CIFAR-10. Statistics are computed for multiple repeats of each", "\n", "# model at each max epoch length.", "\n", "# hash --> epochs --> repeat index --> metric name --> scalar", "\n", "", "self", ".", "computed_statistics", "=", "{", "}", "\n", "with", "open", "(", "computed_statistics_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "self", ".", "computed_statistics", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Valid queriable epoch lengths. {4, 12, 36, 108} for the full dataset or", "\n", "# {108} for the smaller dataset with only the 108 epochs.", "\n", "", "self", ".", "valid_epochs", "=", "set", "(", "[", "108", ",", "]", ")", "\n", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in %d seconds'", "%", "elapsed", ")", "\n", "\n", "self", ".", "history", "=", "{", "}", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query": [[65, 125], ["nasbench.NASBench.get_metrics_from_spec", "random.randint", "nasbench.OutOfDomainError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_spec"], ["", "def", "query", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'halfway_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'halfway_test_accuracy'", "]", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "computed_stat", "[", "'final_validation_accuracy'", "]", "\n", "data", "[", "'test_accuracy'", "]", "=", "computed_stat", "[", "'final_test_accuracy'", "]", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.query_macro_test": [[126, 196], ["nasbench.NASBench.get_metrics_from_spec", "range", "numpy.mean", "numpy.mean", "random.randint", "nasbench.OutOfDomainError", "val_accuracy_list.append", "test_accuray_list.append", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_spec"], ["", "def", "query_macro_test", "(", "self", ",", "model_spec", ",", "epochs", "=", "108", ",", "stop_halfway", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fetch one of the evaluations for this model spec.\n\n    Each call will sample one of the config['num_repeats'] evaluations of the\n    model. This means that repeated queries of the same model (or isomorphic\n    models) may return identical metrics.\n\n    This function will increment the budget counters for benchmarking purposes.\n    See self.training_time_spent, and self.total_epochs_spent.\n\n    This function also allows querying the evaluation metrics at the halfway\n    point of training using stop_halfway. Using this option will increment the\n    budget counters only up to the halfway point.\n\n    Args:\n      model_spec: ModelSpec object.\n      epochs: number of epochs trained. Must be one of the evaluated number of\n        epochs, [4, 12, 36, 108] for the full dataset.\n      stop_halfway: if True, returned dict will only contain the training time\n        and accuracies at the halfway point of training (num_epochs/2).\n        Otherwise, returns the time and accuracies at the end of training\n        (num_epochs).\n\n    Returns:\n      dict containing the evaluated data for this object.\n\n    Raises:\n      OutOfDomainError: if model_spec or num_epochs is outside the search space.\n    \"\"\"", "\n", "if", "epochs", "not", "in", "self", ".", "valid_epochs", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid number of epochs, must be one of %s'", "\n", "%", "self", ".", "valid_epochs", ")", "\n", "\n", "", "fixed_stat", ",", "computed_stat", "=", "self", ".", "get_metrics_from_spec", "(", "model_spec", ")", "\n", "\n", "test_accuray_list", "=", "[", "]", "\n", "val_accuracy_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "      ", "computed_stat_iter", "=", "computed_stat", "[", "epochs", "]", "[", "i", "]", "\n", "val_accuracy_list", ".", "append", "(", "computed_stat_iter", "[", "'final_validation_accuracy'", "]", ")", "\n", "test_accuray_list", ".", "append", "(", "computed_stat_iter", "[", "'final_test_accuracy'", "]", ")", "\n", "", "avg_val_acc", "=", "np", ".", "mean", "(", "val_accuracy_list", ")", "\n", "avg_test_val", "=", "np", ".", "mean", "(", "test_accuray_list", ")", "\n", "\n", "sampled_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_repeats'", "]", "-", "1", ")", "\n", "computed_stat", "=", "computed_stat", "[", "epochs", "]", "[", "sampled_index", "]", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'module_adjacency'", "]", "=", "fixed_stat", "[", "'module_adjacency'", "]", "\n", "data", "[", "'module_operations'", "]", "=", "fixed_stat", "[", "'module_operations'", "]", "\n", "data", "[", "'trainable_parameters'", "]", "=", "fixed_stat", "[", "'trainable_parameters'", "]", "\n", "\n", "if", "stop_halfway", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'halfway_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'halfway_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "float", "(", "avg_val_acc", ")", "\n", "data", "[", "'test_accuracy'", "]", "=", "float", "(", "avg_test_val", ")", "\n", "", "else", ":", "\n", "      ", "data", "[", "'training_time'", "]", "=", "computed_stat", "[", "'final_training_time'", "]", "\n", "data", "[", "'train_accuracy'", "]", "=", "computed_stat", "[", "'final_train_accuracy'", "]", "\n", "data", "[", "'validation_accuracy'", "]", "=", "float", "(", "avg_val_acc", ")", "\n", "data", "[", "'test_accuracy'", "]", "=", "float", "(", "avg_test_val", ")", "\n", "\n", "", "self", ".", "training_time_spent", "+=", "data", "[", "'training_time'", "]", "\n", "if", "stop_halfway", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "//", "2", "\n", "", "else", ":", "\n", "      ", "self", ".", "total_epochs_spent", "+=", "epochs", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.is_valid": [[197, 215], ["nasbench.NASBench._check_spec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench._check_spec"], ["", "def", "is_valid", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks the validity of the model_spec.\n\n    For the purposes of benchmarking, this does not increment the budget\n    counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      True if model is within space.\n    \"\"\"", "\n", "try", ":", "\n", "      ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "", "except", "OutOfDomainError", ":", "\n", "      ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_budget_counters": [[216, 219], ["None"], "methods", ["None"], ["", "def", "get_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the time and budget counters.\"\"\"", "\n", "return", "self", ".", "training_time_spent", ",", "self", ".", "total_epochs_spent", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.reset_budget_counters": [[220, 224], ["None"], "methods", ["None"], ["", "def", "reset_budget_counters", "(", "self", ")", ":", "\n", "    ", "\"\"\"Reset the time and epoch budget counters.\"\"\"", "\n", "self", ".", "training_time_spent", "=", "0.0", "\n", "self", ".", "total_epochs_spent", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.hash_iterator": [[225, 228], ["nasbench.NASBench.fixed_statistics.keys"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "hash_iterator", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns iterator over all unique model hashes.\"\"\"", "\n", "return", "self", ".", "fixed_statistics", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_hash": [[229, 244], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_metrics_from_hash", "(", "self", ",", "module_hash", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a hash.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      module_hash: MD5 hash, i.e., the values yielded by hash_iterator().\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "fixed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "fixed_statistics", "[", "module_hash", "]", ")", "\n", "computed_stat", "=", "copy", ".", "deepcopy", "(", "self", ".", "computed_statistics", "[", "module_hash", "]", ")", "\n", "return", "fixed_stat", ",", "computed_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_spec": [[245, 260], ["nasbench.NASBench._check_spec", "nasbench.NASBench._hash_spec", "nasbench.NASBench.get_metrics_from_hash"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench._check_spec", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench._hash_spec", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench.get_metrics_from_hash"], ["", "def", "get_metrics_from_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the metrics for all epochs and all repeats of a model.\n\n    This method is for dataset analysis and should not be used for benchmarking.\n    As such, it does not increment any of the budget counters.\n\n    Args:\n      model_spec: ModelSpec object.\n\n    Returns:\n      fixed stats and computed stats of the model spec provided.\n    \"\"\"", "\n", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "module_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "return", "self", ".", "get_metrics_from_hash", "(", "module_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench._check_spec": [[261, 285], ["len", "numpy.sum", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError", "nasbench.OutOfDomainError"], "methods", ["None"], ["", "def", "_check_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Checks that the model spec is within the dataset.\"\"\"", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'invalid spec, provided graph is disconnected.'", ")", "\n", "\n", "", "num_vertices", "=", "len", "(", "model_spec", ".", "ops", ")", "\n", "num_edges", "=", "np", ".", "sum", "(", "model_spec", ".", "matrix", ")", "\n", "\n", "if", "num_vertices", ">", "self", ".", "config", "[", "'module_vertices'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many vertices, got %d (max vertices = %d)'", "\n", "%", "(", "num_vertices", ",", "config", "[", "'module_vertices'", "]", ")", ")", "\n", "\n", "", "if", "num_edges", ">", "self", ".", "config", "[", "'max_edges'", "]", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'too many edges, got %d (max edges = %d)'", "\n", "%", "(", "num_edges", ",", "self", ".", "config", "[", "'max_edges'", "]", ")", ")", "\n", "\n", "", "if", "model_spec", ".", "ops", "[", "0", "]", "!=", "'input'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'first operation should be \\'input\\''", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "-", "1", "]", "!=", "'output'", ":", "\n", "      ", "raise", "OutOfDomainError", "(", "'last operation should be \\'output\\''", ")", "\n", "", "for", "op", "in", "model_spec", ".", "ops", "[", "1", ":", "-", "1", "]", ":", "\n", "      ", "if", "op", "not", "in", "self", ".", "config", "[", "'available_ops'", "]", ":", "\n", "        ", "raise", "OutOfDomainError", "(", "'unsupported op %s (available ops = %s)'", "\n", "%", "(", "op", ",", "self", ".", "config", "[", "'available_ops'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.nasbench.NASBench._hash_spec": [[286, 289], ["model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_101_api.model_spec.ModelSpec.hash_spec"], ["", "", "", "def", "_hash_spec", "(", "self", ",", "model_spec", ")", ":", "\n", "    ", "\"\"\"Returns the MD5 hash for a provided model_spec.\"\"\"", "\n", "return", "model_spec", ".", "hash_spec", "(", "self", ".", "config", "[", "'available_ops'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.train_predictor_rl.predictor_unsupervised": [[18, 24], ["nas_lib.trainer.trainer.NASBenchTrainer", "time.time", "nas_lib.trainer.trainer.NASBenchTrainer.fit_unsupervised", "logger.info", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer.NASBenchTrainer.fit_unsupervised", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["def", "predictor_unsupervised", "(", "args", ",", "predictor_type", ",", "all_data", ",", "train_epochs", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "trainer", "=", "NASBenchTrainer", "(", "args", ",", "predictor_type", ",", "len", "(", "all_data", ")", ",", "train_epochs", "=", "train_epochs", ",", "logger", "=", "logger", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "trainer", ".", "fit_unsupervised", "(", "all_data", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "logger", ".", "info", "(", "f'Self-supervised training time cost is {duration}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.train_predictor_rl.main": [[26, 43], ["nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.setup_logger.info", "nas_lib.data.data.build_datasets", "nas_lib.data.data.dataset_all", "nas_lib.utils.comm.setup_logger.info", "train_predictor_rl.predictor_unsupervised", "open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.train_predictor_rl.predictor_unsupervised"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "with", "open", "(", "args", ".", "darts_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "args", ".", "darts_training_nums", ":", "\n", "                ", "all_data", "=", "pickle", ".", "load", "(", "f", ")", "[", ":", "args", ".", "darts_training_nums", "]", "\n", "", "else", ":", "\n", "                ", "all_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "nasbench_datas", "=", "data", ".", "build_datasets", "(", "args", ")", "\n", "all_data", "=", "data", ".", "dataset_all", "(", "args", ",", "nasbench_datas", ")", "\n", "", "for", "predictor", "in", "args", ".", "predictor_list", ":", "\n", "        ", "logger", ".", "info", "(", "f'==================  predictor type: {predictor}  ======================'", ")", "\n", "predictor_unsupervised", "(", "args", ",", "predictor", ",", "all_data", ",", "train_epochs", "=", "args", ".", "epochs", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison.predictor_comparision": [[25, 35], ["nas_lib.trainer.trainer_retrain.NASBenchReTrain", "nas_lib.trainer.trainer_retrain.NASBenchReTrain.fit_g_data", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit_g_data"], ["def", "predictor_comparision", "(", "args", ",", "predictor", ",", "train_data", ",", "test_data", ",", "flag", ",", "load_dir", "=", "None", ",", "train_epochs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "args", ".", "with_g_func", "=", "False", "\n", "retrainer", "=", "NASBenchReTrain", "(", "args", ",", "predictor", ",", "\n", "len", "(", "train_data", ")", ",", "\n", "load_model", "=", "flag", ",", "\n", "load_dir", "=", "load_dir", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "return", "retrainer", ".", "fit_g_data", "(", "train_data", ",", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison.main": [[37, 102], ["nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.setup_logger.info", "range", "nas_lib.utils.comm.random_id_int", "nas_lib.utils.comm.set_random_seed", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "nas_lib.utils.comm.setup_logger.info", "nas_lib.utils.comm.random_id", "os.path.join", "os.path.join", "open", "pickle.load", "nas_lib.data.data.build_datasets", "nas_lib.data.data.dataset_all", "nas_lib.data.data.dataset_split_idx_predictive_comparison", "print", "zip", "open", "pickle.dump", "pickle.dump", "pickle.dump", "NotImplementedError", "nas_lib.utils.comm.setup_logger.info", "predictor_comparison.predictor_comparision", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "duration_dict[].append", "nas_lib.utils.comm.setup_logger.info", "predictor_comparison.predictor_comparision", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "duration_dict[].append", "open", "pickle.load", "len", "len", "args.search_space.split", "dir.split", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id_int", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx_predictive_comparison", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison.predictor_comparision", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison.predictor_comparision"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "with", "open", "(", "nas_bench_101_all_data", ",", "'rb'", ")", "as", "fpkl", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fpkl", ")", "\n", "", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "nasbench_datas", "=", "data", ".", "build_datasets", "(", "args", ")", "\n", "all_data", "=", "data", ".", "dataset_all", "(", "args", ",", "nasbench_datas", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "with", "open", "(", "darts_converted_with_label", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space {args.search_space} does not support now!'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "args", ".", "trails", ")", ":", "\n", "        ", "seed", "=", "random_id_int", "(", "4", ")", "\n", "set_random_seed", "(", "seed", ")", "\n", "s_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "k_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "logger", ".", "info", "(", "f'======================  Trails {k} Begin Setting Seed to {seed} ==========================='", ")", "\n", "for", "budget", "in", "args", ".", "search_budget", ":", "\n", "            ", "train_data", ",", "test_data", "=", "data", ".", "dataset_split_idx_predictive_comparison", "(", "all_data", ",", "budget", ")", "\n", "print", "(", "f'budget: {budget}, train data size: {len(train_data)}, test data size: {len(test_data)}'", ")", "\n", "if", "args", ".", "compare_supervised", "==", "'T'", ":", "\n", "                ", "logger", ".", "info", "(", "f'====  predictor type: SUPERVISED, load pretrain model False, '", "\n", "f'search budget is {budget}. Training epoch is {args.epochs} ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_comparision", "(", "args", ",", "'SS_RL'", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "False", ",", "\n", "train_epochs", "=", "args", ".", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                    ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                    ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "f'supervised#{budget}#{args.epochs}'", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "f'supervised#{budget}#{args.epochs}'", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "duration_dict", "[", "f'supervised#{budget}#{args.epochs}'", "]", ".", "append", "(", "duration", ")", "\n", "", "for", "predictor_type", ",", "dir", "in", "zip", "(", "args", ".", "predictor_list", ",", "args", ".", "load_dir", ")", ":", "\n", "                ", "logger", ".", "info", "(", "f'====  predictor type: {predictor_type}, load pretrain model True. '", "\n", "f'Search budget is {budget}. Training epoch is {args.epochs}. '", "\n", "f'The model save dir is {dir.split(\"/\")[-1][:-3]}  ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_comparision", "(", "args", ",", "predictor_type", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "True", ",", "\n", "load_dir", "=", "dir", ",", "\n", "train_epochs", "=", "args", ".", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                    ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                    ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "args", ".", "epochs", ")", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "args", ".", "epochs", ")", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "duration_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "args", ".", "epochs", ")", "]", ".", "append", "(", "duration", ")", "\n", "", "", "file_id", "=", "random_id", "(", "6", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "f'{file_id}_{args.predictor_list[0]}_{args.search_space.split(\"_\")[-1]}_{args.gpu}_{k}.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "s_results_dict", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "k_results_dict", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "duration_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison_ged.predictor_retrain_compare": [[16, 25], ["nas_lib.trainer.trainer_retrain.NASBenchReTrain", "nas_lib.trainer.trainer_retrain.NASBenchReTrain.fit_g_data", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit_g_data"], ["def", "predictor_retrain_compare", "(", "args", ",", "predictor", ",", "train_data", ",", "test_data", ",", "flag", ",", "load_dir", "=", "None", ",", "train_epochs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "retrainer", "=", "NASBenchReTrain", "(", "args", ",", "predictor", ",", "\n", "len", "(", "train_data", ")", ",", "\n", "load_model", "=", "flag", ",", "\n", "load_dir", "=", "load_dir", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "return", "retrainer", ".", "fit_g_data", "(", "train_data", ",", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparison_ged.main": [[27, 75], ["nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.setup_logger.info", "range", "nas_lib.utils.comm.random_id_int", "nas_lib.utils.comm.set_random_seed", "collections.defaultdict", "collections.defaultdict", "nas_lib.utils.comm.setup_logger.info", "nas_lib.utils.comm.random_id", "os.path.join", "os.path.join", "open", "pickle.load", "nas_lib.data.data.build_datasets", "nas_lib.data.data.dataset_all", "nas_lib.data.data.dataset_split_idx", "print", "open", "pickle.dump", "pickle.dump", "NotImplementedError", "zip", "open", "pickle.load", "nas_lib.utils.comm.setup_logger.info", "predictor_comparison_ged.predictor_retrain_compare", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "len", "len", "args.search_space.split", "dir.split", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id_int", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "with", "open", "(", "nas_bench_101_all_data", ",", "'rb'", ")", "as", "fpkl", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fpkl", ")", "\n", "", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "nasbench_datas", "=", "data", ".", "build_datasets", "(", "args", ")", "\n", "all_data", "=", "data", ".", "dataset_all", "(", "args", ",", "nasbench_datas", ")", "\n", "", "elif", "args", ".", "search_space", "==", "'darts'", ":", "\n", "        ", "with", "open", "(", "darts_converted_with_label", ",", "'rb'", ")", "as", "fb", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fb", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space {args.search_space} does not support now!'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "args", ".", "trails", ")", ":", "\n", "        ", "seed", "=", "random_id_int", "(", "4", ")", "\n", "set_random_seed", "(", "seed", ")", "\n", "s_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "k_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "logger", ".", "info", "(", "f'======================  Trails {k} Begin Setting Seed to {seed} ==========================='", ")", "\n", "for", "budget", "in", "args", ".", "search_budget", ":", "\n", "            ", "train_data", ",", "test_data", "=", "data", ".", "dataset_split_idx", "(", "all_data", ",", "budget", ")", "\n", "print", "(", "f'budget: {budget}, train data size: {len(train_data)}, test data size: {len(test_data)}'", ")", "\n", "for", "epochs", "in", "args", ".", "train_iterations", ":", "\n", "                ", "for", "predictor_type", ",", "dir", "in", "zip", "(", "args", ".", "predictor_list", ",", "args", ".", "load_dir", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "f'====  predictor type: {predictor_type}, load pretrain model True. '", "\n", "f'Search budget is {budget}. Training epoch is {epochs}. '", "\n", "f'The model save dir is {dir.split(\"/\")[-1][:-3]}  ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_retrain_compare", "(", "args", ",", "predictor_type", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "True", ",", "\n", "load_dir", "=", "dir", ",", "\n", "train_epochs", "=", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                        ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                        ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "", "", "", "file_id", "=", "random_id", "(", "6", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "f'{file_id}_{args.predictor_list[0]}_{args.search_space.split(\"_\")[-1]}_{args.gpu}_{k}.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "s_results_dict", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "k_results_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_finetune.predictor_retrain_compare": [[16, 25], ["nas_lib.trainer.trainer_retrain.NASBenchReTrain", "nas_lib.trainer.trainer_retrain.NASBenchReTrain.fit_g_data", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit_g_data"], ["def", "predictor_retrain_compare", "(", "args", ",", "predictor", ",", "train_data", ",", "test_data", ",", "flag", ",", "load_dir", "=", "None", ",", "train_epochs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "retrainer", "=", "NASBenchReTrain", "(", "args", ",", "predictor", ",", "\n", "len", "(", "train_data", ")", ",", "\n", "load_model", "=", "flag", ",", "\n", "load_dir", "=", "load_dir", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "return", "retrainer", ".", "fit_g_data", "(", "train_data", ",", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_finetune.main": [[27, 87], ["nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.setup_logger.info", "range", "nas_lib.utils.comm.random_id_int", "nas_lib.utils.comm.set_random_seed", "collections.defaultdict", "collections.defaultdict", "nas_lib.utils.comm.setup_logger.info", "nas_lib.utils.comm.random_id", "os.path.join", "os.path.join", "open", "pickle.load", "nas_lib.data.data.build_datasets", "nas_lib.data.data.dataset_all", "NotImplementedError", "nas_lib.data.data.dataset_split_idx", "print", "open", "pickle.dump", "pickle.dump", "zip", "nas_lib.utils.comm.setup_logger.info", "predictor_finetune.predictor_retrain_compare", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "nas_lib.utils.comm.setup_logger.info", "nas_lib.utils.comm.setup_logger.info", "predictor_finetune.predictor_retrain_compare", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "len", "len", "args.search_space.split", "dir.split", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id_int", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_all", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "with", "open", "(", "nas_bench_101_all_data", ",", "'rb'", ")", "as", "fpkl", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fpkl", ")", "\n", "", "", "elif", "args", ".", "search_space", "==", "'nasbench_201'", ":", "\n", "        ", "nasbench_datas", "=", "data", ".", "build_datasets", "(", "args", ")", "\n", "all_data", "=", "data", ".", "dataset_all", "(", "args", ",", "nasbench_datas", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space {args.search_space} does not support now!'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "args", ".", "trails", ")", ":", "\n", "        ", "seed", "=", "random_id_int", "(", "4", ")", "\n", "set_random_seed", "(", "seed", ")", "\n", "s_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "k_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "logger", ".", "info", "(", "f'======================  Trails {k} Begin Setting Seed to {seed} ==========================='", ")", "\n", "for", "budget", "in", "args", ".", "search_budget", ":", "\n", "            ", "train_data", ",", "test_data", "=", "data", ".", "dataset_split_idx", "(", "all_data", ",", "budget", ")", "\n", "print", "(", "f'budget: {budget}, train data size: {len(train_data)}, test data size: {len(test_data)}'", ")", "\n", "for", "epochs", "in", "args", ".", "train_iterations", ":", "\n", "                ", "if", "args", ".", "compare_supervised", "==", "'T'", ":", "\n", "                    ", "logger", ".", "info", "(", "f'====  predictor type: SUPERVISED, load pretrain model False, '", "\n", "f'search budget is {budget}. Training epoch is {epochs} ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_retrain_compare", "(", "args", ",", "'SS_RL'", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "False", ",", "\n", "train_epochs", "=", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                        ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                        ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "f'supervised#{budget}#{epochs}'", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "f'supervised#{budget}#{epochs}'", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "", "for", "predictor_type", ",", "dir", "in", "zip", "(", "args", ".", "predictor_list", ",", "args", ".", "load_dir", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "f'====  predictor type: {predictor_type}, load pretrain model True. '", "\n", "f'Search budget is {budget}. Training epoch is {epochs}. '", "\n", "f'The model save dir is {dir.split(\"/\")[-1][:-3]}  ===='", ")", "\n", "logger", ".", "info", "(", "dir", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_retrain_compare", "(", "args", ",", "predictor_type", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "True", ",", "\n", "load_dir", "=", "dir", ",", "\n", "train_epochs", "=", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                        ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                        ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "", "", "", "file_id", "=", "random_id", "(", "6", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "f'{file_id}_{args.predictor_list[0]}_{args.search_space.split(\"_\")[-1]}_{args.gpu}_{k}.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "s_results_dict", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "k_results_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare": [[17, 26], ["nas_lib.trainer.trainer_retrain.NASBenchReTrain", "nas_lib.trainer.trainer_retrain.NASBenchReTrain.fit_g_data", "len"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.trainer.trainer_retrain.NASBenchReTrain.fit_g_data"], ["def", "predictor_retrain_compare", "(", "args", ",", "predictor", ",", "train_data", ",", "test_data", ",", "flag", ",", "load_dir", "=", "None", ",", "train_epochs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "retrainer", "=", "NASBenchReTrain", "(", "args", ",", "predictor", ",", "\n", "len", "(", "train_data", ")", ",", "\n", "load_model", "=", "flag", ",", "\n", "load_dir", "=", "load_dir", ",", "\n", "train_epochs", "=", "train_epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "return", "retrainer", ".", "fit_g_data", "(", "train_data", ",", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.main": [[28, 84], ["nas_lib.utils.comm.setup_logger", "nas_lib.utils.comm.setup_logger.info", "range", "NotImplementedError", "nas_lib.utils.comm.random_id_int", "nas_lib.utils.comm.set_random_seed", "collections.defaultdict", "collections.defaultdict", "nas_lib.utils.comm.setup_logger.info", "nas_lib.utils.comm.random_id", "os.path.join", "os.path.join", "open", "pickle.load", "nas_lib.data.data.dataset_split_idx", "print", "open", "pickle.dump", "pickle.dump", "zip", "nas_lib.utils.comm.setup_logger.info", "predictor_comparision_batch_size.predictor_retrain_compare", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "nas_lib.utils.comm.setup_logger.info", "predictor_comparision_batch_size.predictor_retrain_compare", "math.isnan", "math.isnan", "s_results_dict[].append", "k_results_dict[].append", "len", "len", "args.search_space.split", "dir.split", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id_int", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.random_id", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.dataset_split_idx", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.tools_predictors.predictor_comparision_batch_size.predictor_retrain_compare"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "args", ".", "gpu", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "args", ".", "save_dir", ",", "args", ".", "gpu", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "search_space", "==", "'nasbench_101'", ":", "\n", "        ", "with", "open", "(", "nas_bench_101_all_data", ",", "'rb'", ")", "as", "fpkl", ":", "\n", "            ", "all_data", "=", "pickle", ".", "load", "(", "fpkl", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'The search space {args.search_space} does not support now!'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "args", ".", "trails", ")", ":", "\n", "        ", "seed", "=", "random_id_int", "(", "4", ")", "\n", "set_random_seed", "(", "seed", ")", "\n", "s_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "k_results_dict", "=", "defaultdict", "(", "list", ")", "\n", "logger", ".", "info", "(", "f'======================  Trails {k} Begin Setting Seed to {seed} ==========================='", ")", "\n", "for", "budget", "in", "args", ".", "search_budget", ":", "\n", "            ", "train_data", ",", "test_data", "=", "data", ".", "dataset_split_idx", "(", "all_data", ",", "budget", ")", "\n", "print", "(", "f'budget: {budget}, train data size: {len(train_data)}, test data size: {len(test_data)}'", ")", "\n", "for", "epochs", "in", "args", ".", "train_iterations", ":", "\n", "                ", "if", "args", ".", "compare_supervised", "==", "'T'", ":", "\n", "                    ", "logger", ".", "info", "(", "f'====  predictor type: SUPERVISED, load pretrain model False, '", "\n", "f'search budget is {budget}. Training epoch is {epochs} ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_retrain_compare", "(", "args", ",", "'SS_RL'", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "False", ",", "\n", "train_epochs", "=", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                        ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                        ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "f'supervised#{budget}#{epochs}'", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "f'supervised#{budget}#{epochs}'", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "", "for", "predictor_type", ",", "dir", "in", "zip", "(", "args", ".", "predictor_list", ",", "args", ".", "load_dir", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "f'====  predictor type: {predictor_type}, load pretrain model True. '", "\n", "f'Search budget is {budget}. Training epoch is {epochs}. '", "\n", "f'The model save dir is {dir.split(\"/\")[-1][:-3]}  ===='", ")", "\n", "spearman_corr", ",", "kendalltau_corr", ",", "duration", "=", "predictor_retrain_compare", "(", "args", ",", "predictor_type", ",", "\n", "train_data", ",", "test_data", ",", "\n", "flag", "=", "True", ",", "\n", "load_dir", "=", "dir", ",", "\n", "train_epochs", "=", "epochs", ",", "\n", "logger", "=", "logger", ")", "\n", "if", "math", ".", "isnan", "(", "spearman_corr", ")", ":", "\n", "                        ", "spearman_corr", "=", "0", "\n", "", "if", "math", ".", "isnan", "(", "kendalltau_corr", ")", ":", "\n", "                        ", "kendalltau_corr", "=", "0", "\n", "", "s_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "spearman_corr", ")", "\n", "k_results_dict", "[", "predictor_type", "+", "'#'", "+", "str", "(", "budget", ")", "+", "'#'", "+", "str", "(", "epochs", ")", "]", ".", "append", "(", "kendalltau_corr", ")", "\n", "", "", "", "file_id", "=", "random_id", "(", "6", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "f'{file_id}_{args.predictor_list[0]}_{args.search_space.split(\"_\")[-1]}_{args.gpu}_{k}.pkl'", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "s_results_dict", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "k_results_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparision_batch_size.parse_pkl_2d": [[13, 54], ["collections.defaultdict", "print", "d.items", "k.split", "[].append", "len", "int", "str", "int", "str", "[].append", "[].append", "numpy.mean", "numpy.mean", "int", "int", "numpy.array", "numpy.array", "list", "s_dict.keys"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "\n", "unsupervised_val_list", "=", "None", ",", "show_keys", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "f'========== Experiment iteration is {len(s_dict[list(s_dict.keys())[0]])}. ============'", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "d", "=", "s_dict", "\n", "", "else", ":", "\n", "        ", "d", "=", "k_dict", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "key", ",", "budget", ",", "epoch", "=", "k", ".", "split", "(", "'#'", ")", "\n", "if", "key", "not", "in", "show_keys", ":", "\n", "            ", "continue", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "int", "(", "budget", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "budget", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "budget", ")", "\n", "", "else", ":", "\n", "            ", "if", "int", "(", "epoch", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "epoch", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "epoch", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "budget", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "budget", ")", "\n", "", "", "if", "'v'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", "=", "[", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparision_batch_size.draw_2d_results": [[56, 145], ["visualize_predictor_comparision_batch_size.parse_pkl_2d", "matplotlib.subplots", "fig.set_size_inches", "enumerate", "ax.set_yticks", "ax.set_ylabel", "matplotlib.title", "fig.set_dpi", "matplotlib.show", "append_data.items", "sorted", "sorted", "print", "print", "print", "ax.scatter", "ax.plot", "ax.set_xlabel", "ax.set_xlabel", "numpy.arange", "matplotlib.legend", "matplotlib.legend", "show_keys.append", "list", "keys[].split", "list", "ValueError", "parse_pkl_2d.keys", "parse_pkl_2d.keys", "sorted.append", "sorted.append", "sorted.append", "sorted.append", "sorted.append", "sorted.append", "k.split", "k_a.split", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "draw_2d_results", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "unsupervised_val_list", "=", "(", "100", ",", ")", ",", "\n", "show_keys", "=", "None", ",", "append_data", "=", "None", ",", "key_mapping", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "coor_type", ",", "data_type", "=", "data_type", ",", "other_dim_val", "=", "other_dim_val", ",", "\n", "unsupervised_val_list", "=", "unsupervised_val_list", ",", "show_keys", "=", "show_keys", ")", "\n", "if", "key_mapping", "and", "append_data", "is", "not", "None", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "for", "k_a", ",", "v_a", "in", "append_data", ".", "items", "(", ")", ":", "\n", "            ", "data_dict", "[", "k_a", "]", "=", "v_a", "\n", "show_keys", ".", "append", "(", "'_'", ".", "join", "(", "k_a", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "5", ",", "4.4", ")", "\n", "if", "key_mapping", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "suffiex", "=", "keys", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "keys", "=", "[", "k", "+", "'_'", "+", "suffiex", "for", "k", "in", "show_keys", "]", "\n", "", "else", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "temp_keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'supervised'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'10k'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'40k'", "in", "k", "and", "'140k'", "not", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'70k'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'100k'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "temp_keys", ":", "\n", "            ", "if", "'140k'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "", "for", "idx", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "print", "(", "data_dict", "[", "k", "]", ")", "\n", "print", "(", "'##################'", ")", "\n", "\n", "temp_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "'supervised'", "in", "k", "and", "'unsupervised'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SUPERVISED'", "\n", "", "elif", "'SS_CCL_10k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL-10k'", "\n", "", "elif", "'SS_CCL_40k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL-40k'", "\n", "", "elif", "'SS_CCL_70k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL-70k'", "\n", "", "elif", "'SS_CCL_100k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL-100k'", "\n", "", "elif", "'SS_CCL_140k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL-140k'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "ax", ".", "scatter", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "marker", "=", "marker_list", "[", "idx", "]", ",", "label", "=", "label_k", ",", "s", "=", "100", ")", "\n", "ax", ".", "plot", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "2", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'training epochs'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'search budget'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "ylabel", "=", "'Spearman correlation'", "\n", "", "elif", "coor_type", "==", "'k'", ":", "\n", "        ", "ylabel", "=", "'Kendall tau correlation'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This coorlation type does not support at present!'", ")", "\n", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.7", ",", "0.1", ")", ")", "\n", "# ax.set_yticks(np.arange(0., 0.8, 0.1))", "\n", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "title", "=", "f'search budget {other_dim_val[0]}'", "\n", "", "else", ":", "\n", "        ", "title", "=", "f'training epoch: {other_dim_val[0]}'", "\n", "", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "14", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# upper left lower right", "\n", "if", "key_mapping", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparision_batch_size.merge_files": [[147, 165], ["collections.defaultdict", "collections.defaultdict", "os.path.join", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load.items", "pickle.load.items", "p.endswith", "merge_s_dict[].extend", "merge_k_dict[].extend"], "function", ["None"], ["", "def", "merge_files", "(", "base_path", ")", ":", "\n", "    ", "file_path", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "p", ")", "for", "p", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "p", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "merge_s_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_k_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fp", "in", "file_path", ":", "\n", "        ", "with", "open", "(", "fp", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "k1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "for", "k", ",", "v", "in", "s1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_s_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "k1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_k_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "", "", "return", "merge_s_dict", ",", "merge_k_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparision_batch_size.cm2inch": [[167, 173], ["isinstance", "tuple", "tuple"], "function", ["None"], ["", "def", "cm2inch", "(", "*", "tupl", ")", ":", "\n", "    ", "inch", "=", "2.54", "\n", "if", "isinstance", "(", "tupl", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparison.parse_pkl_2d": [[13, 54], ["collections.defaultdict", "print", "d.items", "k.split", "[].append", "len", "int", "str", "int", "str", "[].append", "[].append", "numpy.mean", "numpy.mean", "int", "int", "numpy.array", "numpy.array", "list", "s_dict.keys"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "\n", "unsupervised_val_list", "=", "None", ",", "show_keys", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "f'========== Experiment iteration is {len(s_dict[list(s_dict.keys())[0]])}. ============'", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "d", "=", "s_dict", "\n", "", "else", ":", "\n", "        ", "d", "=", "k_dict", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "key", ",", "budget", ",", "epoch", "=", "k", ".", "split", "(", "'#'", ")", "\n", "if", "key", "not", "in", "show_keys", ":", "\n", "            ", "continue", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "int", "(", "budget", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "budget", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "budget", ")", "\n", "", "else", ":", "\n", "            ", "if", "int", "(", "epoch", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "epoch", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "epoch", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "budget", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "budget", ")", "\n", "", "", "if", "'v'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", "=", "[", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparison.draw_2d_results": [[56, 128], ["visualize_predictor_comparison.parse_pkl_2d", "matplotlib.subplots", "fig.set_size_inches", "enumerate", "ax.set_yticks", "ax.set_ylabel", "matplotlib.title", "fig.set_dpi", "matplotlib.show", "append_data.items", "sorted", "sorted", "print", "print", "print", "ax.scatter", "ax.plot", "ax.set_xlabel", "ax.set_xlabel", "numpy.arange", "matplotlib.legend", "matplotlib.legend", "show_keys.append", "list", "keys[].split", "list", "ValueError", "parse_pkl_2d.keys", "parse_pkl_2d.keys", "sorted.append", "sorted.append", "sorted.append", "k.split", "k_a.split", "NotImplementedError", "k.split"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "draw_2d_results", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "unsupervised_val_list", "=", "(", "100", ",", ")", ",", "\n", "show_keys", "=", "None", ",", "append_data", "=", "None", ",", "key_mapping", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "coor_type", ",", "data_type", "=", "data_type", ",", "other_dim_val", "=", "other_dim_val", ",", "\n", "unsupervised_val_list", "=", "unsupervised_val_list", ",", "show_keys", "=", "show_keys", ")", "\n", "if", "key_mapping", "and", "append_data", "is", "not", "None", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "for", "k_a", ",", "v_a", "in", "append_data", ".", "items", "(", ")", ":", "\n", "            ", "data_dict", "[", "k_a", "]", "=", "v_a", "\n", "show_keys", ".", "append", "(", "'_'", ".", "join", "(", "k_a", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "5", ",", "4.4", ")", "\n", "if", "key_mapping", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "suffiex", "=", "keys", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "keys", "=", "[", "k", "+", "'_'", "+", "suffiex", "for", "k", "in", "show_keys", "]", "\n", "", "else", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "keys_temp", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'supervised'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_RL'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_CCL'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "", "for", "idx", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "print", "(", "data_dict", "[", "k", "]", ")", "\n", "print", "(", "'##################'", ")", "\n", "\n", "temp_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "'supervised'", "in", "k", "and", "'unsupervised'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SUPERVISED'", "\n", "", "elif", "'SS_RL'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-RL'", "\n", "", "elif", "temp_k", "in", "key_mapping", ":", "\n", "            ", "label_k", "=", "key_mapping", "[", "temp_k", "]", "\n", "", "elif", "'SS_CCL'", "in", "k", "and", "'k'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL'", "\n", "", "elif", "'SS_CCL'", "in", "k", "and", "'k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "ax", ".", "scatter", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "marker", "=", "marker_list", "[", "idx", "]", ",", "label", "=", "label_k", ",", "s", "=", "100", ")", "\n", "ax", ".", "plot", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "2", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'training epochs'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'search budget'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "ylabel", "=", "'Spearman correlation'", "\n", "", "elif", "coor_type", "==", "'k'", ":", "\n", "        ", "ylabel", "=", "'Kendall tau correlation'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This coorlation type does not support at present!'", ")", "\n", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.7", ",", "0.1", ")", ")", "\n", "# ax.set_yticks(np.arange(0., 0.8, 0.1))", "\n", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "title", "=", "f'search budget {other_dim_val[0]}'", "\n", "", "else", ":", "\n", "        ", "title", "=", "f'training epoch: {other_dim_val[0]}'", "\n", "", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "14", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# upper left lower right", "\n", "if", "key_mapping", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparison.merge_files": [[130, 148], ["collections.defaultdict", "collections.defaultdict", "os.path.join", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load.items", "pickle.load.items", "p.endswith", "merge_s_dict[].extend", "merge_k_dict[].extend"], "function", ["None"], ["", "def", "merge_files", "(", "base_path", ")", ":", "\n", "    ", "file_path", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "p", ")", "for", "p", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "p", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "merge_s_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_k_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fp", "in", "file_path", ":", "\n", "        ", "with", "open", "(", "fp", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "k1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "for", "k", ",", "v", "in", "s1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_s_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "k1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_k_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "", "", "return", "merge_s_dict", ",", "merge_k_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_comparison.cm2inch": [[150, 156], ["isinstance", "tuple", "tuple"], "function", ["None"], ["", "def", "cm2inch", "(", "*", "tupl", ")", ":", "\n", "    ", "inch", "=", "2.54", "\n", "if", "isinstance", "(", "tupl", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_normalized_ged_comparison.parse_pkl_2d": [[13, 54], ["collections.defaultdict", "print", "d.items", "k.split", "[].append", "len", "int", "str", "int", "str", "[].append", "[].append", "numpy.mean", "numpy.mean", "int", "int", "numpy.array", "numpy.array", "list", "s_dict.keys"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "\n", "unsupervised_val_list", "=", "None", ",", "show_keys", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "f'========== Experiment iteration is {len(s_dict[list(s_dict.keys())[0]])}. ============'", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "d", "=", "s_dict", "\n", "", "else", ":", "\n", "        ", "d", "=", "k_dict", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "key", ",", "budget", ",", "epoch", "=", "k", ".", "split", "(", "'#'", ")", "\n", "if", "key", "not", "in", "show_keys", ":", "\n", "            ", "continue", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "int", "(", "budget", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "budget", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "budget", ")", "\n", "", "else", ":", "\n", "            ", "if", "int", "(", "epoch", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "epoch", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "epoch", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "budget", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "budget", ")", "\n", "", "", "if", "'v'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", "=", "[", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_normalized_ged_comparison.draw_2d_results": [[56, 125], ["visualize_predictor_normalized_ged_comparison.parse_pkl_2d", "matplotlib.subplots", "fig.set_size_inches", "enumerate", "ax.set_yticks", "ax.set_ylabel", "matplotlib.title", "fig.set_dpi", "matplotlib.show", "append_data.items", "sorted", "sorted", "print", "print", "print", "ax.scatter", "ax.plot", "ax.set_xlabel", "ax.set_xlabel", "numpy.arange", "matplotlib.legend", "matplotlib.legend", "show_keys.append", "list", "keys[].split", "list", "ValueError", "parse_pkl_2d.keys", "parse_pkl_2d.keys", "sorted.append", "sorted.append", "k.split", "k_a.split", "NotImplementedError", "k.split"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "draw_2d_results", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "unsupervised_val_list", "=", "(", "100", ",", ")", ",", "\n", "show_keys", "=", "None", ",", "append_data", "=", "None", ",", "key_mapping", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "coor_type", ",", "data_type", "=", "data_type", ",", "other_dim_val", "=", "other_dim_val", ",", "\n", "unsupervised_val_list", "=", "unsupervised_val_list", ",", "show_keys", "=", "show_keys", ")", "\n", "if", "key_mapping", "and", "append_data", "is", "not", "None", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "for", "k_a", ",", "v_a", "in", "append_data", ".", "items", "(", ")", ":", "\n", "            ", "data_dict", "[", "k_a", "]", "=", "v_a", "\n", "show_keys", ".", "append", "(", "'_'", ".", "join", "(", "k_a", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "5", ",", "4.4", ")", "\n", "if", "key_mapping", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "suffiex", "=", "keys", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "keys", "=", "[", "k", "+", "'_'", "+", "suffiex", "for", "k", "in", "show_keys", "]", "\n", "", "else", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "keys_temp", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_RL_NORMALIZE'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_RL_WO_NORMALIZE'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "", "for", "idx", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "print", "(", "data_dict", "[", "k", "]", ")", "\n", "print", "(", "'##################'", ")", "\n", "\n", "temp_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "'supervised'", "in", "k", "and", "'unsupervised'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SUPERVISED'", "\n", "", "elif", "'SS_RL_NORMALIZE'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-RL-NORMALIZED'", "\n", "", "elif", "'SS_RL_WO_NORMALIZE'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-RL-WO-NORMALIZE'", "\n", "", "elif", "'SS_CCL'", "in", "k", "and", "'k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "ax", ".", "scatter", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "marker", "=", "marker_list", "[", "idx", "]", ",", "label", "=", "label_k", ",", "s", "=", "100", ")", "\n", "ax", ".", "plot", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "2", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'training epochs'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'search budget'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "ylabel", "=", "'Spearman correlation'", "\n", "", "elif", "coor_type", "==", "'k'", ":", "\n", "        ", "ylabel", "=", "'Kendall tau correlation'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This coorlation type does not support at present!'", ")", "\n", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.7", ",", "0.1", ")", ")", "\n", "# ax.set_yticks(np.arange(0., 0.8, 0.1))", "\n", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "title", "=", "f'search budget {other_dim_val[0]}'", "\n", "", "else", ":", "\n", "        ", "title", "=", "f'training epoch: {other_dim_val[0]}'", "\n", "", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "14", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# upper left lower right", "\n", "if", "key_mapping", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_normalized_ged_comparison.merge_files": [[127, 145], ["collections.defaultdict", "collections.defaultdict", "os.path.join", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load.items", "pickle.load.items", "p.endswith", "merge_s_dict[].extend", "merge_k_dict[].extend"], "function", ["None"], ["", "def", "merge_files", "(", "base_path", ")", ":", "\n", "    ", "file_path", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "p", ")", "for", "p", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "p", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "merge_s_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_k_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fp", "in", "file_path", ":", "\n", "        ", "with", "open", "(", "fp", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "k1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "for", "k", ",", "v", "in", "s1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_s_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "k1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_k_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "", "", "return", "merge_s_dict", ",", "merge_k_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_normalized_ged_comparison.cm2inch": [[147, 153], ["isinstance", "tuple", "tuple"], "function", ["None"], ["", "def", "cm2inch", "(", "*", "tupl", ")", ":", "\n", "    ", "inch", "=", "2.54", "\n", "if", "isinstance", "(", "tupl", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictors_predictive_performance_comparison.parse_pkl_2d": [[17, 47], ["collections.defaultdict", "collections.defaultdict", "print", "d.items", "k.split", "str", "[].append", "math.isnan", "len", "numpy.mean", "numpy.mean", "result_dict[].append", "result_dict[].append", "numpy.array", "numpy.array", "str", "list", "s_dict.keys", "str"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "show_keys", "=", "None", ",", "search_budget", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "defaultdict", "(", "dict", ")", "\n", "result_dict", "=", "defaultdict", "(", "list", ")", "\n", "print", "(", "f'========== Experiment iteration is {len(s_dict[list(s_dict.keys())[0]])}. ============'", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "d", "=", "s_dict", "\n", "", "else", ":", "\n", "        ", "d", "=", "k_dict", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "key", ",", "budget", ",", "epoch", "=", "k", ".", "split", "(", "'#'", ")", "\n", "if", "key", "not", "in", "show_keys", ":", "\n", "            ", "continue", "\n", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "budget", ")", "\n", "\n", "if", "'v'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", "=", "[", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", ")", "\n", "\n", "", "", "for", "k", "in", "show_keys", ":", "\n", "        ", "for", "budget", "in", "search_budget", ":", "\n", "            ", "if", "math", ".", "isnan", "(", "data_dict", "[", "k", "+", "'_'", "+", "str", "(", "budget", ")", "]", "[", "'v'", "]", "[", "0", "]", ")", ":", "\n", "                ", "val", "=", "{", "'v'", ":", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "                ", "val", "=", "data_dict", "[", "k", "+", "'_'", "+", "str", "(", "budget", ")", "]", "\n", "", "if", "k", "==", "'supervised'", ":", "\n", "                ", "result_dict", "[", "'SUPERVISED'", "]", ".", "append", "(", "val", "[", "'v'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "result_dict", "[", "k", "]", ".", "append", "(", "val", "[", "'v'", "]", "[", "0", "]", ")", "\n", "", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictors_predictive_performance_comparison.draw_2d_results": [[49, 86], ["visualize_predictors_predictive_performance_comparison.parse_pkl_2d", "matplotlib.subplots", "fig.set_size_inches", "sorted", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.title", "fig.set_dpi", "matplotlib.show", "list", "enumerate", "ax.plot", "print", "ax.set_yticks", "parse_pkl_2d.keys", "ax.scatter", "ValueError", "numpy.arange", "ax.set_yticks", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "draw_2d_results", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "show_keys", "=", "None", ",", "search_budget", "=", "None", ",", "search_space", "=", "'NASBench_101'", ")", ":", "\n", "    ", "data_dict", "=", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "coor_type", ",", "show_keys", "=", "show_keys", ",", "search_budget", "=", "search_budget", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "5", ",", "4.4", ")", "\n", "keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "\n", "        ", "if", "'SS_RL'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-RL'", "\n", "", "elif", "'SS_CCL'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL'", "\n", "", "else", ":", "\n", "            ", "label_k", "=", "k", "\n", "", "marker", "=", "marker_list", "[", "idx", "]", "\n", "color", "=", "color_list", "[", "idx", "]", "\n", "for", "j", ",", "budget", "in", "enumerate", "(", "search_budget", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "budget", ",", "data_dict", "[", "k", "]", "[", "j", "]", ",", "marker", "=", "marker", ",", "label", "=", "label_k", ",", "c", "=", "color", ",", "s", "=", "100", ")", "\n", "", "ax", ".", "plot", "(", "search_budget", ",", "data_dict", "[", "k", "]", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "2", ",", "c", "=", "color", ")", "\n", "print", "(", "color", ",", "k", ")", "\n", "", "ax", ".", "set_xlabel", "(", "'search budget'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "ylabel", "=", "'Spearman correlation'", "\n", "", "elif", "coor_type", "==", "'k'", ":", "\n", "        ", "ylabel", "=", "'Kendall tau correlation'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This coorlation type does not support at present!'", ")", "\n", "", "if", "search_space", "==", "'101'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.65", ",", "0.1", ")", ")", "\n", "", "elif", "search_space", "==", "'201'", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.85", ",", "0.1", ")", ")", "\n", "", "ax", ".", "set_ylabel", "(", "ylabel", ",", "loc", "=", "'center'", ",", "fontsize", "=", "13", ")", "\n", "title", "=", "f'training epoch: {200}'", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "13", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# upper left lower right", "\n", "# plt.legend(loc='best', fontsize=12)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictors_predictive_performance_comparison.merge_files": [[88, 107], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load.items", "pickle.load.items", "p.endswith", "merge_s_dict[].extend", "merge_k_dict[].extend"], "function", ["None"], ["", "def", "merge_files", "(", "base_path", ")", ":", "\n", "    ", "file_path", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "p", ")", "for", "p", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "p", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "merge_s_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_k_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_duration_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fp", "in", "file_path", ":", "\n", "        ", "with", "open", "(", "fp", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "k1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "for", "k", ",", "v", "in", "s1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_s_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "k1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_k_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "", "", "return", "merge_s_dict", ",", "merge_k_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictors_predictive_performance_comparison.cm2inch": [[109, 115], ["isinstance", "tuple", "tuple"], "function", ["None"], ["", "def", "cm2inch", "(", "*", "tupl", ")", ":", "\n", "    ", "inch", "=", "2.54", "\n", "if", "isinstance", "(", "tupl", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d": [[13, 55], ["collections.defaultdict", "print", "d.items", "k.split", "[].append", "len", "int", "str", "int", "str", "[].append", "[].append", "numpy.mean", "numpy.mean", "int", "int", "numpy.array", "numpy.array", "list", "s_dict.keys"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["def", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "\n", "unsupervised_val_list", "=", "None", ",", "show_keys", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "f'========== Experiment iteration is {len(s_dict[list(s_dict.keys())[0]])}. ============'", ")", "\n", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "d", "=", "s_dict", "\n", "", "else", ":", "\n", "        ", "d", "=", "k_dict", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "key", ",", "budget", ",", "epoch", "=", "k", ".", "split", "(", "'#'", ")", "\n", "# print(key, budget, epoch)", "\n", "if", "key", "not", "in", "show_keys", ":", "\n", "            ", "continue", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "int", "(", "budget", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "budget", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "budget", ")", "\n", "", "else", ":", "\n", "            ", "if", "int", "(", "epoch", ")", "not", "in", "other_dim_val", ":", "\n", "                ", "continue", "\n", "", "if", "'unsupervised'", "in", "key", ":", "\n", "                ", "if", "int", "(", "epoch", ")", "not", "in", "unsupervised_val_list", ":", "\n", "                    ", "continue", "\n", "", "", "dict_key", "=", "key", "+", "'_'", "+", "str", "(", "epoch", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "epoch", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'x'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", "=", "[", "budget", "]", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "dict_key", "]", "[", "'x'", "]", ".", "append", "(", "budget", ")", "\n", "", "", "if", "'v'", "not", "in", "data_dict", "[", "dict_key", "]", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", "=", "[", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "dict_key", "]", "[", "'v'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "d", "[", "k", "]", ")", ")", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.draw_2d_results": [[57, 124], ["visualize_predictor_finetune.parse_pkl_2d", "matplotlib.subplots", "fig.set_size_inches", "enumerate", "ax.set_yticks", "ax.set_ylabel", "matplotlib.title", "fig.set_dpi", "matplotlib.show", "append_data.items", "sorted", "sorted", "print", "print", "print", "ax.scatter", "ax.plot", "ax.set_xlabel", "ax.set_xlabel", "numpy.arange", "matplotlib.legend", "matplotlib.legend", "show_keys.append", "list", "keys[].split", "list", "ValueError", "parse_pkl_2d.keys", "parse_pkl_2d.keys", "sorted.append", "sorted.append", "sorted.append", "k_a.split", "NotImplementedError", "k.split"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.parse_pkl_2d", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench_201_api.api.ArchResults.show", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "draw_2d_results", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "'s'", ",", "data_type", "=", "'epoch'", ",", "other_dim_val", "=", "(", "100", ",", ")", ",", "unsupervised_val_list", "=", "(", "100", ",", ")", ",", "\n", "show_keys", "=", "None", ",", "append_data", "=", "None", ",", "key_mapping", "=", "None", ")", ":", "\n", "    ", "data_dict", "=", "parse_pkl_2d", "(", "s_dict", ",", "k_dict", ",", "coor_type", "=", "coor_type", ",", "data_type", "=", "data_type", ",", "other_dim_val", "=", "other_dim_val", ",", "\n", "unsupervised_val_list", "=", "unsupervised_val_list", ",", "show_keys", "=", "show_keys", ")", "\n", "if", "key_mapping", "and", "append_data", "is", "not", "None", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "for", "k_a", ",", "v_a", "in", "append_data", ".", "items", "(", ")", ":", "\n", "            ", "data_dict", "[", "k_a", "]", "=", "v_a", "\n", "show_keys", ".", "append", "(", "'_'", ".", "join", "(", "k_a", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "5", ",", "4.4", ")", "\n", "if", "key_mapping", "and", "'SS_RL'", "not", "in", "show_keys", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "suffiex", "=", "keys", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "keys", "=", "[", "k", "+", "'_'", "+", "suffiex", "for", "k", "in", "show_keys", "]", "\n", "", "else", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "keys_temp", "=", "sorted", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'supervised'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_RL'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "keys_temp", ":", "\n", "            ", "if", "'SS_CCL'", "in", "k", ":", "\n", "                ", "keys", ".", "append", "(", "k", ")", "\n", "", "", "", "for", "idx", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "print", "(", "data_dict", "[", "k", "]", ")", "\n", "print", "(", "'##################'", ")", "\n", "if", "'supervised'", "in", "k", "and", "'unsupervised'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SUPERVISED'", "\n", "", "elif", "'SS_RL'", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-RL'", "\n", "", "elif", "'SS_CCL'", "in", "k", "and", "'k'", "not", "in", "k", ":", "\n", "            ", "label_k", "=", "'SS-CCL'", "\n", "", "elif", "'SS_CCL'", "in", "k", "and", "'k'", "in", "k", ":", "\n", "            ", "label_k", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "ax", ".", "scatter", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "marker", "=", "marker_list", "[", "idx", "]", ",", "label", "=", "label_k", ",", "s", "=", "100", ")", "\n", "ax", ".", "plot", "(", "data_dict", "[", "k", "]", "[", "'x'", "]", ",", "data_dict", "[", "k", "]", "[", "'v'", "]", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "2", ")", "\n", "", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'training epochs'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'search budget'", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "if", "coor_type", "==", "'s'", ":", "\n", "        ", "ylabel", "=", "'Spearman correlation'", "\n", "", "elif", "coor_type", "==", "'k'", ":", "\n", "        ", "ylabel", "=", "'Kendall tau correlation'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This coorlation type does not support at present!'", ")", "\n", "", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.", ",", "0.7", ",", "0.1", ")", ")", "\n", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "loc", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "if", "data_type", "==", "'epoch'", ":", "\n", "        ", "title", "=", "f'search budget {other_dim_val[0]}'", "\n", "", "else", ":", "\n", "        ", "title", "=", "f'training epoch: {other_dim_val[0]}'", "\n", "", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "14", ")", "\n", "fig", ".", "set_dpi", "(", "300.0", ")", "\n", "# upper left lower right", "\n", "if", "key_mapping", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "fontsize", "=", "12", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.merge_files": [[126, 144], ["collections.defaultdict", "collections.defaultdict", "os.path.join", "os.listdir", "open", "pickle.load", "pickle.load", "pickle.load.items", "pickle.load.items", "p.endswith", "merge_s_dict[].extend", "merge_k_dict[].extend"], "function", ["None"], ["", "def", "merge_files", "(", "base_path", ")", ":", "\n", "    ", "file_path", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "p", ")", "for", "p", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "not", "p", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "merge_s_dict", "=", "defaultdict", "(", "list", ")", "\n", "merge_k_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fp", "in", "file_path", ":", "\n", "        ", "with", "open", "(", "fp", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "k1_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "for", "k", ",", "v", "in", "s1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_s_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "k1_dict", ".", "items", "(", ")", ":", "\n", "                ", "merge_k_dict", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n", "", "", "", "return", "merge_s_dict", ",", "merge_k_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.visualize.visualize_predictor_finetune.cm2inch": [[146, 152], ["isinstance", "tuple", "tuple"], "function", ["None"], ["", "def", "cm2inch", "(", "*", "tupl", ")", ":", "\n", "    ", "inch", "=", "2.54", "\n", "if", "isinstance", "(", "tupl", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "i", "/", "inch", "for", "i", "in", "tupl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.ansyc_multiple_process_train": [[28, 42], ["torch.multiprocessing.Queue", "torch.multiprocessing.Process", "torch.multiprocessing.Process.start", "torch.multiprocessing.Process.join", "nas_lib.data.data.build_datasets", "torch.multiprocessing.Process", "p.start", "p.join", "range", "range"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.build_datasets"], ["def", "ansyc_multiple_process_train", "(", "args", ",", "save_dir", ")", ":", "\n", "    ", "q", "=", "Queue", "(", "10", ")", "\n", "data_lists", "=", "[", "build_datasets", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "gpus", ")", "]", "\n", "\n", "p_producer", "=", "Process", "(", "target", "=", "data_producers", ",", "args", "=", "(", "args", ",", "q", ")", ")", "\n", "p_consumers", "=", "[", "Process", "(", "target", "=", "data_consumers", ",", "args", "=", "(", "args", ",", "q", ",", "save_dir", ",", "i", ",", "data_lists", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "args", ".", "gpus", ")", "]", "\n", "\n", "p_producer", ".", "start", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "\n", "", "p_producer", ".", "join", "(", ")", "\n", "for", "p", "in", "p_consumers", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.data_producers": [[44, 52], ["range", "range", "queue.put", "queue.put"], "function", ["None"], ["", "", "def", "data_producers", "(", "args", ",", "queue", ")", ":", "\n", "    ", "trials", "=", "args", ".", "trials", "\n", "for", "i", "in", "range", "(", "trials", ")", ":", "\n", "        ", "queue", ".", "put", "(", "{", "\n", "'iterate'", ":", "i", "\n", "}", ")", "\n", "", "for", "_", "in", "range", "(", "args", ".", "gpus", ")", ":", "\n", "        ", "queue", ".", "put", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.data_consumers": [[54, 66], ["nas_lib.utils.comm.set_random_seed", "nas_lib.utils.comm.setup_logger", "int", "q.get", "train_multiple_gpus_close_domain.run_experiments_bananas_paradigm", "nas_lib.utils.comm.setup_logger.info", "str().split", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.set_random_seed", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.setup_logger", "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.run_experiments_bananas_paradigm", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info"], ["", "", "def", "data_consumers", "(", "args", ",", "q", ",", "save_dir", ",", "i", ",", "search_space", ")", ":", "\n", "    ", "set_random_seed", "(", "int", "(", "str", "(", "time", ".", "time", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", ":", ":", "-", "1", "]", "[", ":", "9", "]", ")", ")", "\n", "file_name", "=", "'log_%s_%d'", "%", "(", "'gpus'", ",", "i", ")", "\n", "logger", "=", "setup_logger", "(", "file_name", ",", "save_dir", ",", "i", ",", "log_level", "=", "'DEBUG'", ",", "\n", "filename", "=", "'%s.txt'", "%", "file_name", ")", "\n", "while", "True", ":", "\n", "        ", "msg", "=", "q", ".", "get", "(", ")", "\n", "if", "msg", "==", "'done'", ":", "\n", "            ", "logger", ".", "info", "(", "'thread %d end'", "%", "i", ")", "\n", "break", "\n", "", "iterations", "=", "msg", "[", "'iterate'", "]", "\n", "run_experiments_bananas_paradigm", "(", "args", ",", "save_dir", ",", "i", ",", "iterations", ",", "logger", ",", "search_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.run_experiments_bananas_paradigm": [[68, 126], ["nas_lib.params_nas.meta_neuralnet_params", "nas_lib.params_nas.algo_params_close_domain", "len", "range", "os.path.join", "logger.info", "logger.info", "logger.info", "range", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "time.time", "numpy.round", "walltimes.append", "results.append", "len", "range", "logger.info", "open", "f.close", "nas_lib.algos_nas.algo_compare.run_nas_algos_nasbench_101", "pickle.dump", "pickle.dump", "nas_lib.algos_nas.algo_compare.run_nas_algos_nasbench_201", "NotImplementedError", "time.time", "results_line.append", "results_line.append", "results_line.append", "str", "int", "psutil.virtual_memory"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params_nas.meta_neuralnet_params", "home.repos.pwc.inspect_result.auroua_SSNENAS.nas_lib.params_nas.algo_params_close_domain", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.comm.DummyLogger.info", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.run_nas_algos_nasbench_101", "home.repos.pwc.inspect_result.auroua_SSNENAS.algos_nas.algo_compare.run_nas_algos_nasbench_201"], ["", "", "def", "run_experiments_bananas_paradigm", "(", "args", ",", "save_dir", ",", "i", ",", "iterations", ",", "logger", ",", "search_space", ")", ":", "\n", "    ", "out_file", "=", "args", ".", "output_filename", "+", "'_gpus_%d_'", "%", "i", "+", "'iter_%d'", "%", "iterations", "\n", "metann_params", "=", "meta_neuralnet_params", "(", "args", ".", "search_space", ")", "\n", "algorithm_params", "=", "algo_params", "(", "args", ".", "algo_params", ",", "args", ".", "search_budget", ",", "args", ".", "dataname", ")", "\n", "num_algos", "=", "len", "(", "algorithm_params", ")", "\n", "results", "=", "[", "]", "\n", "result_dist", "=", "[", "]", "\n", "walltimes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_algos", ")", ":", "\n", "        ", "logger", ".", "info", "(", "' * Running algorithm: {}'", ".", "format", "(", "algorithm_params", "[", "j", "]", ")", ")", "\n", "logger", ".", "info", "(", "' * Loss type: {}'", ".", "format", "(", "args", ".", "loss_type", ")", ")", "\n", "logger", ".", "info", "(", "' * Trials: {}, Free Memory available {}'", ".", "format", "(", "iterations", ",", "\n", "psutil", ".", "virtual_memory", "(", ")", ".", "free", "/", "(", "1024", "*", "1024", ")", ")", ")", "\n", "starttime", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "algo_params", "==", "'nasbench_101'", "or", "args", ".", "algo_params", "==", "'nasbench_101_fixed'", ":", "\n", "            ", "model_dir_dict_101", "=", "{", "'ss_rl'", ":", "ss_rl_nasbench_101", ",", "\n", "'ss_ccl'", ":", "ss_ccl_nasbench_101", "}", "\n", "algo_result", "=", "run_nas_algos_nasbench_101", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "with_details", "=", "args", ".", "with_details", ",", "\n", "model_dir", "=", "model_dir_dict_101", ")", "\n", "", "elif", "args", ".", "algo_params", "==", "'nasbench_201'", "or", "args", ".", "algo_params", "==", "'nasbench_201_fixed'", ":", "\n", "            ", "model_dir_dict_201", "=", "{", "'ss_rl'", ":", "ss_rl_nasbench_201", ",", "\n", "'ss_ccl'", ":", "ss_ccl_nasbench_201", "}", "\n", "algo_result", "=", "run_nas_algos_nasbench_201", "(", "algorithm_params", "[", "j", "]", ",", "metann_params", ",", "search_space", ",", "gpu", "=", "i", ",", "\n", "logger", "=", "logger", ",", "model_dir", "=", "model_dir_dict_201", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"This algorithm does not support!\"", ")", "\n", "\n", "", "algo_result", "=", "np", ".", "round", "(", "algo_result", ",", "5", ")", "\n", "# add walltime and results", "\n", "walltimes", ".", "append", "(", "time", ".", "time", "(", ")", "-", "starttime", ")", "\n", "results", ".", "append", "(", "algo_result", ")", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pkl'", ".", "format", "(", "out_file", ",", "i", ")", ")", "\n", "logger", ".", "info", "(", "' * Trial summary: (params, results, walltimes)'", ")", "\n", "logger", ".", "info", "(", "algorithm_params", ")", "\n", "logger", ".", "info", "(", "metann_params", ")", "\n", "for", "k", "in", "range", "(", "results", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "length", "=", "len", "(", "results", ")", "\n", "results_line", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "results_line", ".", "append", "(", "int", "(", "results", "[", "j", "]", "[", "k", ",", "0", "]", ")", ")", "\n", "results_line", ".", "append", "(", "results", "[", "j", "]", "[", "k", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "results_line", ".", "append", "(", "results", "[", "j", "]", "[", "k", ",", "1", "]", ")", "\n", "", "", "results_str", "=", "'  '", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "results_line", "]", ")", "\n", "logger", ".", "info", "(", "results_str", ")", "\n", "", "logger", ".", "info", "(", "walltimes", ")", "\n", "logger", ".", "info", "(", "' * Saving to file {}'", ".", "format", "(", "filename", ")", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "if", "args", ".", "with_details", "==", "'T'", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "algorithm_params", ",", "metann_params", ",", "results", ",", "result_dist", ",", "walltimes", "]", ",", "f", ")", "\n", "", "else", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "algorithm_params", ",", "metann_params", ",", "results", ",", "walltimes", "]", ",", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "logger", ".", "info", "(", "'#######################################################  Trails %d End  '", "\n", "'#######################################################'", "%", "iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.main": [[128, 136], ["torch.set_start_method", "train_multiple_gpus_close_domain.ansyc_multiple_process_train", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.close_domain.train_multiple_gpus_close_domain.ansyc_multiple_process_train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "save_dir", "=", "args", ".", "save_dir", "\n", "if", "not", "save_dir", ":", "\n", "        ", "save_dir", "=", "args", ".", "algo_params", "+", "'/'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ")", "\n", "ansyc_multiple_process_train", "(", "args", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool._avg_pool_x": [[8, 10], ["utils.scatter_"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_"], ["def", "_avg_pool_x", "(", "cluster", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "scatter_", "(", "'mean'", ",", "x", ",", "cluster", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool.avg_pool_x": [[12, 38], ["consecutive.consecutive_cluster", "avg_pool._avg_pool_x", "pool.pool_batch", "avg_pool._avg_pool_x", "pool.pool_batch.max().item", "pool.pool_batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool._avg_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool._avg_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "avg_pool_x", "(", "cluster", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Average pools node features according to the clustering defined in\n    :attr:`cluster`.\n    See :meth:`torch_geometric.nn.pool.max_pool_x` for more details.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): The maximum number of clusters in a single\n            example. (default: :obj:`None`)\n\n    :rtype: (:class:`Tensor`, :class:`LongTensor`) if :attr:`size` is\n        :obj:`None`, else :class:`Tensor`\n    \"\"\"", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "return", "_avg_pool_x", "(", "cluster", ",", "x", ",", "(", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", "*", "size", ")", "\n", "\n", "", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "x", "=", "_avg_pool_x", "(", "cluster", ",", "x", ")", "\n", "batch", "=", "pool_batch", "(", "perm", ",", "batch", ")", "\n", "\n", "return", "x", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool.avg_pool": [[40, 71], ["consecutive.consecutive_cluster", "avg_pool._avg_pool_x", "pool.pool_edge", "data.Batch", "pool.pool_batch", "pool.pool_pos", "transform"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.avg_pool._avg_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_edge", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_pos"], ["", "def", "avg_pool", "(", "cluster", ",", "data", ",", "transform", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Pools and coarsens a graph given by the\n    :class:`torch_geometric.data.Data` object according to the clustering\n    defined in :attr:`cluster`.\n    Final node features are defined by the *average* features of all nodes\n    within the same cluster.\n    See :meth:`torch_geometric.nn.pool.max_pool` for more details.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        data (Data): Graph data object.\n        transform (callable, optional): A function/transform that takes in the\n            coarsened and pooled :obj:`torch_geometric.data.Data` object and\n            returns a transformed version. (default: :obj:`None`)\n\n    :rtype: :class:`torch_geometric.data.Data`\n    \"\"\"", "\n", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "\n", "x", "=", "_avg_pool_x", "(", "cluster", ",", "data", ".", "x", ")", "\n", "index", ",", "attr", "=", "pool_edge", "(", "cluster", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ")", "\n", "batch", "=", "None", "if", "data", ".", "batch", "is", "None", "else", "pool_batch", "(", "perm", ",", "data", ".", "batch", ")", "\n", "pos", "=", "None", "if", "data", ".", "pos", "is", "None", "else", "pool_pos", "(", "cluster", ",", "data", ".", "pos", ")", "\n", "\n", "data", "=", "Batch", "(", "batch", "=", "batch", ",", "x", "=", "x", ",", "edge_index", "=", "index", ",", "edge_attr", "=", "attr", ",", "pos", "=", "pos", ")", "\n", "\n", "if", "transform", "is", "not", "None", ":", "\n", "        ", "data", "=", "transform", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.sag_pool.SAGPooling.__init__": [[67, 79], ["super().__init__", "GNN", "sag_pool.SAGPooling.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", "=", "0.5", ",", "GNN", "=", "GraphConv", ",", "min_score", "=", "None", ",", "\n", "multiplier", "=", "1", ",", "nonlinearity", "=", "torch", ".", "tanh", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SAGPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "gnn", "=", "GNN", "(", "in_channels", ",", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "min_score", "=", "min_score", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.sag_pool.SAGPooling.reset_parameters": [[80, 82], ["sag_pool.SAGPooling.gnn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gnn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.sag_pool.SAGPooling.forward": [[83, 106], ["sag_pool.SAGPooling.gnn().view", "topk_pool.topk", "topk_pool.filter_adj", "edge_index.new_zeros", "attn.unsqueeze", "sag_pool.SAGPooling.nonlinearity", "utils.softmax", "score[].view", "x.size", "attn.dim", "sag_pool.SAGPooling.gnn", "utils.softmax.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.topk", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.filter_adj", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "score", "=", "self", ".", "gnn", "(", "attn", ",", "edge_index", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", ",", "perm", ",", "score", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.sag_pool.SAGPooling.__repr__": [[107, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, {}={}, multiplier={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "gnn", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "'ratio'", "if", "self", ".", "min_score", "is", "None", "else", "'min_score'", ",", "\n", "self", ".", "ratio", "if", "self", ".", "min_score", "is", "None", "else", "self", ".", "min_score", ",", "\n", "self", ".", "multiplier", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_edge": [[6, 14], ["cluster.size", "cluster[].view", "pool..", "cluster[].view.numel", "torch_sparse.coalesce", "cluster[].view.view"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.coalesce"], ["def", "pool_edge", "(", "cluster", ",", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "    ", "num_nodes", "=", "cluster", ".", "size", "(", "0", ")", "\n", "edge_index", "=", "cluster", "[", "edge_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "edge_index", ",", "edge_attr", "=", "remove_self_loops", "(", "edge_index", ",", "edge_attr", ")", "\n", "if", "edge_index", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "edge_index", ",", "edge_attr", "=", "coalesce", "(", "edge_index", ",", "edge_attr", ",", "num_nodes", ",", "\n", "num_nodes", ")", "\n", "", "return", "edge_index", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_batch": [[16, 18], ["None"], "function", ["None"], ["", "def", "pool_batch", "(", "perm", ",", "batch", ")", ":", "\n", "    ", "return", "batch", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_pos": [[20, 22], ["torch_scatter.scatter_mean"], "function", ["None"], ["", "def", "pool_pos", "(", "cluster", ",", "pos", ")", ":", "\n", "    ", "return", "scatter_mean", "(", "pos", ",", "cluster", ",", "dim", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool._max_pool_x": [[8, 10], ["utils.scatter_"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_"], ["def", "_max_pool_x", "(", "cluster", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "scatter_", "(", "'max'", ",", "x", ",", "cluster", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool.max_pool_x": [[12, 40], ["consecutive.consecutive_cluster", "max_pool._max_pool_x", "pool.pool_batch", "max_pool._max_pool_x", "pool.pool_batch.max().item", "pool.pool_batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool._max_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool._max_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "max_pool_x", "(", "cluster", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Max-Pools node features according to the clustering defined in\n    :attr:`cluster`.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): The maximum number of clusters in a single\n            example. This property is useful to obtain a batch-wise dense\n            representation, *e.g.* for applying FC layers, but should only be\n            used if the size of the maximum number of clusters per example is\n            known in advance. (default: :obj:`None`)\n\n    :rtype: (:class:`Tensor`, :class:`LongTensor`) if :attr:`size` is\n        :obj:`None`, else :class:`Tensor`\n    \"\"\"", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "return", "_max_pool_x", "(", "cluster", ",", "x", ",", "(", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", "*", "size", ")", "\n", "\n", "", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "x", "=", "_max_pool_x", "(", "cluster", ",", "x", ")", "\n", "batch", "=", "pool_batch", "(", "perm", ",", "batch", ")", "\n", "\n", "return", "x", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool.max_pool": [[42, 75], ["consecutive.consecutive_cluster", "max_pool._max_pool_x", "pool.pool_edge", "data.Batch", "pool.pool_batch", "pool.pool_pos", "transform"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.consecutive.consecutive_cluster", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.max_pool._max_pool_x", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_edge", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_batch", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.pool.pool_pos"], ["", "def", "max_pool", "(", "cluster", ",", "data", ",", "transform", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Pools and coarsens a graph given by the\n    :class:`torch_geometric.data.Data` object according to the clustering\n    defined in :attr:`cluster`.\n    All nodes within the same cluster will be represented as one node.\n    Final node features are defined by the *maximum* features of all nodes\n    within the same cluster, node positions are averaged and edge indices are\n    defined to be the union of the edge indices of all nodes within the same\n    cluster.\n\n    Args:\n        cluster (LongTensor): Cluster vector :math:`\\mathbf{c} \\in \\{ 0,\n            \\ldots, N - 1 \\}^N`, which assigns each node to a specific cluster.\n        data (Data): Graph data object.\n        transform (callable, optional): A function/transform that takes in the\n            coarsened and pooled :obj:`torch_geometric.data.Data` object and\n            returns a transformed version. (default: :obj:`None`)\n\n    :rtype: :class:`torch_geometric.data.Data`\n    \"\"\"", "\n", "cluster", ",", "perm", "=", "consecutive_cluster", "(", "cluster", ")", "\n", "\n", "x", "=", "_max_pool_x", "(", "cluster", ",", "data", ".", "x", ")", "\n", "index", ",", "attr", "=", "pool_edge", "(", "cluster", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ")", "\n", "batch", "=", "None", "if", "data", ".", "batch", "is", "None", "else", "pool_batch", "(", "perm", ",", "data", ".", "batch", ")", "\n", "pos", "=", "None", "if", "data", ".", "pos", "is", "None", "else", "pool_pos", "(", "cluster", ",", "data", ".", "pos", ")", "\n", "\n", "data", "=", "Batch", "(", "batch", "=", "batch", ",", "x", "=", "x", ",", "edge_index", "=", "index", ",", "edge_attr", "=", "attr", ",", "pos", "=", "pos", ")", "\n", "\n", "if", "transform", "is", "not", "None", ":", "\n", "        ", "data", "=", "transform", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.TopKPooling.__init__": [[118, 131], ["super().__init__", "torch.nn.Parameter", "topk_pool.TopKPooling.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", "=", "0.5", ",", "min_score", "=", "None", ",", "multiplier", "=", "1", ",", "\n", "nonlinearity", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "TopKPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "min_score", "=", "min_score", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "in_channels", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.TopKPooling.reset_parameters": [[132, 135], ["utils.uniform"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.uniform"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "in_channels", "\n", "uniform", "(", "size", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.TopKPooling.forward": [[136, 160], ["topk_pool.topk", "topk_pool.filter_adj", "edge_index.new_zeros", "attn.unsqueeze", "topk_pool.TopKPooling.nonlinearity", "utils.softmax", "score[].view", "x.size", "attn.dim", "utils.softmax.size", "topk_pool.TopKPooling.weight.norm"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.topk", "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.filter_adj", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "score", "=", "(", "attn", "*", "self", ".", "weight", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", "/", "self", ".", "weight", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", ",", "perm", ",", "score", "[", "perm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.TopKPooling.__repr__": [[161, 167], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}={}, multiplier={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "'ratio'", "if", "self", ".", "min_score", "is", "None", "else", "'min_score'", ",", "\n", "self", ".", "ratio", "if", "self", ".", "min_score", "is", "None", "else", "self", ".", "min_score", ",", "\n", "self", ".", "multiplier", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.topk": [[10, 47], ["scores_max.clamp", "torch.nonzero().view", "torch_scatter.scatter_add", "torch.cat", "torch.arange", "x.new_full", "dense_x.view.view", "dense_x.view.sort", "perm.view.view", "torch.cat", "batch.new_ones", "torch_scatter.scatter_add.size", "torch_scatter.scatter_add.max().item", "batch.size", "torch.cat.view", "torch.nonzero", "x.size", "torch_scatter.scatter_add.new_zeros", "torch.arange", "range", "torch_scatter.scatter_max", "torch_scatter.scatter_add.max", "torch_scatter.scatter_add.cumsum", "torch_scatter.scatter_add.to"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.to"], ["def", "topk", "(", "x", ",", "ratio", ",", "batch", ",", "min_score", "=", "None", ",", "tol", "=", "1e-7", ")", ":", "\n", "    ", "if", "min_score", "is", "not", "None", ":", "\n", "# Make sure that we do not drop all nodes in a graph.", "\n", "        ", "scores_max", "=", "scatter_max", "(", "x", ",", "batch", ")", "[", "0", "]", "[", "batch", "]", "-", "tol", "\n", "scores_min", "=", "scores_max", ".", "clamp", "(", "max", "=", "min_score", ")", "\n", "\n", "perm", "=", "torch", ".", "nonzero", "(", "x", ">", "scores_min", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "num_nodes", "=", "scatter_add", "(", "batch", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ")", ",", "batch", ",", "dim", "=", "0", ")", "\n", "batch_size", ",", "max_num_nodes", "=", "num_nodes", ".", "size", "(", "0", ")", ",", "num_nodes", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "cum_num_nodes", "=", "torch", ".", "cat", "(", "\n", "[", "num_nodes", ".", "new_zeros", "(", "1", ")", ",", "\n", "num_nodes", ".", "cumsum", "(", "dim", "=", "0", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "index", "=", "torch", ".", "arange", "(", "batch", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "index", "=", "(", "index", "-", "cum_num_nodes", "[", "batch", "]", ")", "+", "(", "batch", "*", "max_num_nodes", ")", "\n", "\n", "dense_x", "=", "x", ".", "new_full", "(", "(", "batch_size", "*", "max_num_nodes", ",", ")", ",", "-", "2", ")", "\n", "dense_x", "[", "index", "]", "=", "x", "\n", "dense_x", "=", "dense_x", ".", "view", "(", "batch_size", ",", "max_num_nodes", ")", "\n", "\n", "_", ",", "perm", "=", "dense_x", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "\n", "perm", "=", "perm", "+", "cum_num_nodes", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "perm", "=", "perm", ".", "view", "(", "-", "1", ")", "\n", "\n", "k", "=", "(", "ratio", "*", "num_nodes", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "mask", "=", "[", "\n", "torch", ".", "arange", "(", "k", "[", "i", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "+", "\n", "i", "*", "max_num_nodes", "for", "i", "in", "range", "(", "batch_size", ")", "\n", "]", "\n", "mask", "=", "torch", ".", "cat", "(", "mask", ",", "dim", "=", "0", ")", "\n", "\n", "perm", "=", "perm", "[", "mask", "]", "\n", "\n", "", "return", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.topk_pool.filter_adj": [[49, 65], ["utils.maybe_num_nodes", "perm.new_full", "torch.arange", "perm.size", "torch.stack"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.num_nodes.maybe_num_nodes"], ["", "def", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "mask", "=", "perm", ".", "new_full", "(", "(", "num_nodes", ",", ")", ",", "-", "1", ")", "\n", "i", "=", "torch", ".", "arange", "(", "perm", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "perm", ".", "device", ")", "\n", "mask", "[", "perm", "]", "=", "i", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "row", ",", "col", "=", "mask", "[", "row", "]", ",", "mask", "[", "col", "]", "\n", "mask", "=", "(", "row", ">=", "0", ")", "&", "(", "col", ">=", "0", ")", "\n", "row", ",", "col", "=", "row", "[", "mask", "]", ",", "col", "[", "mask", "]", "\n", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "        ", "edge_attr", "=", "edge_attr", "[", "mask", "]", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.pool.consecutive.consecutive_cluster": [[4, 9], ["torch.unique", "torch.arange", "inv.new_empty().scatter_", "inv.size", "inv.new_empty", "unique.size"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_"], ["def", "consecutive_cluster", "(", "src", ")", ":", "\n", "    ", "unique", ",", "inv", "=", "torch", ".", "unique", "(", "src", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "perm", "=", "torch", ".", "arange", "(", "inv", ".", "size", "(", "0", ")", ",", "dtype", "=", "inv", ".", "dtype", ",", "device", "=", "inv", ".", "device", ")", "\n", "perm", "=", "inv", ".", "new_empty", "(", "unique", ".", "size", "(", "0", ")", ")", ".", "scatter_", "(", "0", ",", "inv", ",", "perm", ")", "\n", "return", "inv", ",", "perm", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.set2set.Set2Set.__init__": [[32, 44], ["super().__init__", "torch.nn.LSTM", "set2set.Set2Set.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "processing_steps", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "Set2Set", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "2", "*", "in_channels", "\n", "self", ".", "processing_steps", "=", "processing_steps", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "lstm", "=", "torch", ".", "nn", ".", "LSTM", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "\n", "num_layers", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.set2set.Set2Set.reset_parameters": [[45, 47], ["set2set.Set2Set.lstm.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.set2set.Set2Set.forward": [[48, 65], ["x.new_zeros", "range", "batch.max().item", "x.new_zeros", "x.new_zeros", "set2set.Set2Set.lstm", "q.view.view.view", "utils.softmax", "torch_scatter.scatter_add", "torch.cat", "torch.cat.unsqueeze", "batch.max"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "batch_size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "\n", "h", "=", "(", "x", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "in_channels", ")", ")", ",", "\n", "x", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "in_channels", ")", ")", ")", "\n", "q_star", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "out_channels", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "processing_steps", ")", ":", "\n", "            ", "q", ",", "h", "=", "self", ".", "lstm", "(", "q_star", ".", "unsqueeze", "(", "0", ")", ",", "h", ")", "\n", "q", "=", "q", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ")", "\n", "e", "=", "(", "x", "*", "q", "[", "batch", "]", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "a", "=", "softmax", "(", "e", ",", "batch", ",", "num_nodes", "=", "batch_size", ")", "\n", "r", "=", "scatter_add", "(", "a", "*", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "batch_size", ")", "\n", "q_star", "=", "torch", ".", "cat", "(", "[", "q", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "q_star", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.set2set.Set2Set.__repr__": [[66, 69], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.sort.global_sort_pool": [[5, 46], ["batch_x.view.sort", "utils.to_dense_batch", "torch.cat.size", "batch_x[].sort", "torch.cat.view", "torch.cat.view", "torch.cat.view", "batch_x.view.min().item", "torch.arange", "arange.view", "batch_x[].contiguous", "torch.cat.new_full", "torch.cat", "batch_x.view.min"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.to_dense_batch.to_dense_batch", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.contiguous", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.min"], ["def", "global_sort_pool", "(", "x", ",", "batch", ",", "k", ")", ":", "\n", "    ", "r\"\"\"The global pooling operator from the `\"An End-to-End Deep Learning\n    Architecture for Graph Classification\"\n    <https://www.cse.wustl.edu/~muhan/papers/AAAI_2018_DGCNN.pdf>`_ paper,\n    where node features are first sorted individually and then  sorted in\n    descending order based on their last features. The first :math:`k` nodes\n    form the output of the layer.\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{N \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        k (int): The number of nodes to hold for each graph.\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "x", ",", "_", "=", "x", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "\n", "fill_value", "=", "x", ".", "min", "(", ")", ".", "item", "(", ")", "-", "1", "\n", "batch_x", ",", "_", "=", "to_dense_batch", "(", "x", ",", "batch", ",", "fill_value", ")", "\n", "B", ",", "N", ",", "D", "=", "batch_x", ".", "size", "(", ")", "\n", "\n", "_", ",", "perm", "=", "batch_x", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "perm", ".", "device", ")", "*", "N", "\n", "perm", "=", "perm", "+", "arange", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "batch_x", "=", "batch_x", ".", "view", "(", "B", "*", "N", ",", "D", ")", "\n", "batch_x", "=", "batch_x", "[", "perm", "]", "\n", "batch_x", "=", "batch_x", ".", "view", "(", "B", ",", "N", ",", "D", ")", "\n", "\n", "if", "N", ">=", "k", ":", "\n", "        ", "batch_x", "=", "batch_x", "[", ":", ",", ":", "k", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "expand_batch_x", "=", "batch_x", ".", "new_full", "(", "(", "B", ",", "k", "-", "N", ",", "D", ")", ",", "fill_value", ")", "\n", "batch_x", "=", "torch", ".", "cat", "(", "[", "batch_x", ",", "expand_batch_x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "batch_x", "[", "batch_x", "==", "fill_value", "]", "=", "0", "\n", "x", "=", "batch_x", ".", "view", "(", "B", ",", "k", "*", "D", ")", "\n", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.attention.GlobalAttention.__init__": [[32, 38], ["super().__init__", "attention.GlobalAttention.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "gate_nn", ",", "nn", "=", "None", ")", ":", "\n", "        ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_nn", "=", "gate_nn", "\n", "self", ".", "nn", "=", "nn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.attention.GlobalAttention.reset_parameters": [[39, 42], ["utils.reset", "utils.reset"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset", "home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "gate_nn", ")", "\n", "reset", "(", "self", ".", "nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.attention.GlobalAttention.forward": [[43, 56], ["attention.GlobalAttention.gate_nn().view", "utils.softmax", "torch_scatter.scatter_add", "x.unsqueeze", "attention.GlobalAttention.nn", "x.dim", "batch[].item", "attention.GlobalAttention.gate_nn", "utils.softmax.dim", "x.dim", "utils.softmax.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.softmax.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "size", "=", "batch", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "\n", "gate", "=", "self", ".", "gate_nn", "(", "x", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "nn", "(", "x", ")", "if", "self", ".", "nn", "is", "not", "None", "else", "x", "\n", "assert", "gate", ".", "dim", "(", ")", "==", "x", ".", "dim", "(", ")", "and", "gate", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "softmax", "(", "gate", ",", "batch", ",", "size", ")", "\n", "out", "=", "scatter_add", "(", "gate", "*", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.attention.GlobalAttention.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(gate_nn={}, nn={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "gate_nn", ",", "self", ".", "nn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_add_pool": [[4, 25], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["def", "global_add_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by adding node features\n    across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\sum_{n=1}^{N_i} \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'add'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_mean_pool": [[27, 48], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "global_mean_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by averaging node features\n    across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\frac{1}{N_i} \\sum_{n=1}^{N_i} \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'mean'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.glob.glob.global_max_pool": [[50, 71], ["utils.scatter_", "batch.max().item", "batch.max"], "function", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_", "home.repos.pwc.inspect_result.auroua_SSNENAS.nasbench201.model_info.ModelRequirements.max"], ["", "def", "global_max_pool", "(", "x", ",", "batch", ",", "size", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch-wise graph-level-outputs by taking the channel-wise\n    maximum across the node dimension, so that for a single graph\n    :math:`\\mathcal{G}_i` its output is computed by\n\n    .. math::\n        \\mathbf{r}_i = \\mathrm{max}_{n=1}^{N_i} \\, \\mathbf{x}_n\n\n    Args:\n        x (Tensor): Node feature matrix\n            :math:`\\mathbf{X} \\in \\mathbb{R}^{(N_1 + \\ldots + N_B) \\times F}`.\n        batch (LongTensor): Batch vector :math:`\\mathbf{b} \\in {\\{ 0, \\ldots,\n            B-1\\}}^N`, which assigns each node to a specific example.\n        size (int, optional): Batch-size :math:`B`.\n            Automatically calculated if not given. (default: :obj:`None`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "\n", "size", "=", "batch", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "if", "size", "is", "None", "else", "size", "\n", "return", "scatter_", "(", "'max'", ",", "x", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "size", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.sg_conv.SGConv.__init__": [[34, 46], ["gnn_lib.nn.conv.message_passing.MessagePassing.__init__", "torch.nn.Linear", "sg_conv.SGConv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "K", "=", "1", ",", "cached", "=", "False", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SGConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "cached", "=", "cached", "\n", "\n", "self", ".", "lin", "=", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.sg_conv.SGConv.reset_parameters": [[47, 51], ["sg_conv.SGConv.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "self", ".", "cached_result", "=", "None", "\n", "self", ".", "cached_num_edges", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.sg_conv.SGConv.forward": [[52, 78], ["sg_conv.SGConv.lin", "edge_index.size", "gnn_lib.nn.conv.gcn_conv.GCNConv.norm", "range", "sg_conv.SGConv.lin", "edge_index.size", "RuntimeError", "sg_conv.SGConv.size", "sg_conv.SGConv.propagate", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.norm", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "self", ".", "cached", "and", "self", ".", "cached_result", "is", "not", "None", ":", "\n", "            ", "if", "edge_index", ".", "size", "(", "1", ")", "!=", "self", ".", "cached_num_edges", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Cached {} number of edges, but found {}. Please '", "\n", "'disable the caching behavior of this layer by removing '", "\n", "'the `cached=True` argument in its constructor.'", ".", "format", "(", "\n", "self", ".", "cached_num_edges", ",", "edge_index", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "cached", ":", "\n", "            ", "x", "=", "self", ".", "lin", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "cached", "or", "self", ".", "cached_result", "is", "None", ":", "\n", "            ", "self", ".", "cached_num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "\n", "edge_index", ",", "norm", "=", "GCNConv", ".", "norm", "(", "edge_index", ",", "x", ".", "size", "(", "0", ")", ",", "edge_weight", ",", "\n", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "                ", "x", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "norm", "=", "norm", ")", "\n", "", "self", ".", "cached_result", "=", "x", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "x", "=", "self", ".", "lin", "(", "self", ".", "cached_result", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.sg_conv.SGConv.message": [[79, 81], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.sg_conv.SGConv.__repr__": [[82, 86], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, K={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "K", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.__init__": [[29, 40], ["message_passing.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Linear", "graph_conv.GraphConv.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "aggr", "=", "'add'", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "lin", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.reset_parameters": [[41, 44], ["utils.uniform", "graph_conv.GraphConv.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.uniform", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "uniform", "(", "self", ".", "in_channels", ",", "self", ".", "weight", ")", "\n", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.forward": [[45, 50], ["torch.matmul", "graph_conv.GraphConv.propagate"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "h", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "h", "=", "h", ",", "\n", "edge_weight", "=", "edge_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.message": [[51, 53], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "h_j", ",", "edge_weight", ")", ":", "\n", "        ", "return", "h_j", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "h_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.update": [[54, 56], ["graph_conv.GraphConv.lin"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ",", "x", ")", ":", "\n", "        ", "return", "aggr_out", "+", "self", ".", "lin", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.graph_conv.GraphConv.__repr__": [[57, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gin_conv.GINConv.__init__": [[29, 38], ["message_passing.MessagePassing.__init__", "gin_conv.GINConv.reset_parameters", "torch.nn.Parameter", "gin_conv.GINConv.register_buffer", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "nn", ",", "eps", "=", "0", ",", "train_eps", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GINConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "self", ".", "nn", "=", "nn", "\n", "self", ".", "initial_eps", "=", "eps", "\n", "if", "train_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gin_conv.GINConv.reset_parameters": [[39, 42], ["utils.reset", "gin_conv.GINConv.eps.data.fill_"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.ccl.ccl_nas.AverageMeter.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "nn", ")", "\n", "self", ".", "eps", ".", "data", ".", "fill_", "(", "self", ".", "initial_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gin_conv.GINConv.forward": [[43, 49], ["gin_conv.GINConv.", "gin_conv.GINConv.nn", "x.unsqueeze", "x.dim", "gin_conv.GINConv.propagate"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "out", "=", "self", ".", "nn", "(", "(", "1", "+", "self", ".", "eps", ")", "*", "x", "+", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gin_conv.GINConv.message": [[50, 52], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "\n", "        ", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gin_conv.GINConv.__repr__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(nn={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "nn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.__init__": [[39, 56], ["message_passing.MessagePassing.__init__", "torch.nn.Parameter", "gcn_conv.GCNConv.reset_parameters", "torch.Tensor", "torch.nn.Parameter", "gcn_conv.GCNConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "improved", "=", "False", ",", "cached", "=", "False", ",", "\n", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.reset_parameters": [[57, 62], ["utils.glorot", "utils.zeros"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.glorot", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.zeros"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "self", ".", "cached_result", "=", "None", "\n", "self", ".", "cached_num_edges", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.norm": [[63, 80], ["gcn_conv.GCNConv.", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow", "torch.ones", "edge_index.size", "float"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.utils.inits.ones"], ["", "@", "staticmethod", "\n", "def", "norm", "(", "edge_index", ",", "num_nodes", ",", "edge_weight", "=", "None", ",", "improved", "=", "False", ",", "\n", "dtype", "=", "None", ")", ":", "\n", "        ", "if", "edge_weight", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "fill_value", "=", "1", "if", "not", "improved", "else", "2", "\n", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "row", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.forward": [[81, 102], ["torch.matmul", "gcn_conv.GCNConv.propagate", "edge_index.size", "gcn_conv.GCNConv.norm", "edge_index.size", "RuntimeError", "torch.matmul.size", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "if", "self", ".", "cached", "and", "self", ".", "cached_result", "is", "not", "None", ":", "\n", "            ", "if", "edge_index", ".", "size", "(", "1", ")", "!=", "self", ".", "cached_num_edges", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Cached {} number of edges, but found {}. Please '", "\n", "'disable the caching behavior of this layer by removing '", "\n", "'the `cached=True` argument in its constructor.'", ".", "format", "(", "\n", "self", ".", "cached_num_edges", ",", "edge_index", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "cached", "or", "self", ".", "cached_result", "is", "None", ":", "\n", "            ", "self", ".", "cached_num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "\n", "edge_index", ",", "norm", "=", "self", ".", "norm", "(", "edge_index", ",", "x", ".", "size", "(", "0", ")", ",", "edge_weight", ",", "\n", "self", ".", "improved", ",", "x", ".", "dtype", ")", "\n", "self", ".", "cached_result", "=", "edge_index", ",", "norm", "\n", "\n", "", "edge_index", ",", "norm", "=", "self", ".", "cached_result", "\n", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "norm", "=", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.message": [[103, 105], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.update": [[106, 110], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "aggr_out", "=", "aggr_out", "+", "self", ".", "bias", "\n", "", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.gcn_conv.GCNConv.__repr__": [[111, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__": [[46, 63], ["super().__init__", "getargspec", "enumerate", "getargspec"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "aggr", "=", "'add'", ",", "flow", "=", "'source_to_target'", ")", ":", "\n", "        ", "super", "(", "MessagePassing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aggr", "=", "aggr", "\n", "assert", "self", ".", "aggr", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "self", ".", "flow", "=", "flow", "\n", "assert", "self", ".", "flow", "in", "[", "'source_to_target'", ",", "'target_to_source'", "]", "\n", "\n", "self", ".", "__message_args__", "=", "getargspec", "(", "self", ".", "message", ")", "[", "0", "]", "[", "1", ":", "]", "\n", "self", ".", "__special_args__", "=", "[", "(", "i", ",", "arg", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "self", ".", "__message_args__", ")", "\n", "if", "arg", "in", "special_args", "]", "\n", "self", ".", "__message_args__", "=", "[", "\n", "arg", "for", "arg", "in", "self", ".", "__message_args__", "if", "arg", "not", "in", "special_args", "\n", "]", "\n", "self", ".", "__update_args__", "=", "getargspec", "(", "self", ".", "update", ")", "[", "0", "]", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.propagate": [[64, 137], ["message_passing.MessagePassing.message", "utils.scatter_", "message_passing.MessagePassing.update", "list", "len", "ij.keys", "kwargs.get", "message_args.append", "ij.keys", "message_args.insert", "message_args.insert", "message_args.append", "kwargs.get", "isinstance", "isinstance", "message_args.append", "torch.index_select", "message_args.append", "len", "torch.index_select.size", "torch.index_select.size", "ValueError", "tmp[].size", "tmp[].size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.message", "home.repos.pwc.inspect_result.auroua_SSNENAS.utils.scatter.scatter_", "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys", "home.repos.pwc.inspect_result.auroua_SSNENAS.data.data.Data.keys"], ["", "def", "propagate", "(", "self", ",", "edge_index", ",", "size", "=", "None", ",", "dim", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"The initial call to start propagating messages.\n\n        Args:\n            edge_index (Tensor): The indices of a general (sparse) assignment\n                matrix with shape :obj:`[N, M]` (can be directed or\n                undirected).\n            size (list or tuple, optional): The size :obj:`[N, M]` of the\n                assignment matrix. If set to :obj:`None`, the size is tried to\n                get automatically inferred and assumed to be symmetric.\n                (default: :obj:`None`)\n            dim (int, optional): The axis along which to aggregate.\n                (default: :obj:`0`)\n            **kwargs: Any additional data which is needed to construct messages\n                and to update node embeddings.\n        \"\"\"", "\n", "\n", "dim", "=", "0", "\n", "size", "=", "[", "None", ",", "None", "]", "if", "size", "is", "None", "else", "list", "(", "size", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "\n", "i", ",", "j", "=", "(", "0", ",", "1", ")", "if", "self", ".", "flow", "==", "'target_to_source'", "else", "(", "1", ",", "0", ")", "\n", "ij", "=", "{", "\"_i\"", ":", "i", ",", "\"_j\"", ":", "j", "}", "\n", "\n", "message_args", "=", "[", "]", "\n", "for", "arg", "in", "self", ".", "__message_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "tmp", "=", "kwargs", ".", "get", "(", "arg", "[", ":", "-", "2", "]", ",", "None", ")", "\n", "if", "tmp", "is", "None", ":", "# pragma: no cover", "\n", "                    ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "\n", "if", "isinstance", "(", "tmp", ",", "tuple", ")", "or", "isinstance", "(", "tmp", ",", "list", ")", ":", "\n", "                        ", "assert", "len", "(", "tmp", ")", "==", "2", "\n", "if", "tmp", "[", "1", "-", "idx", "]", "is", "not", "None", ":", "\n", "                            ", "if", "size", "[", "1", "-", "idx", "]", "is", "None", ":", "\n", "                                ", "size", "[", "1", "-", "idx", "]", "=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "dim", ")", "\n", "", "if", "size", "[", "1", "-", "idx", "]", "!=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "dim", ")", ":", "\n", "                                ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "", "", "tmp", "=", "tmp", "[", "idx", "]", "\n", "\n", "", "if", "tmp", "is", "None", ":", "\n", "                        ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                        ", "if", "size", "[", "idx", "]", "is", "None", ":", "\n", "                            ", "size", "[", "idx", "]", "=", "tmp", ".", "size", "(", "dim", ")", "\n", "", "if", "size", "[", "idx", "]", "!=", "tmp", ".", "size", "(", "dim", ")", ":", "\n", "                            ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "index_select", "(", "tmp", ",", "dim", ",", "edge_index", "[", "idx", "]", ")", "\n", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "", "", "else", ":", "\n", "                ", "message_args", ".", "append", "(", "kwargs", ".", "get", "(", "arg", ",", "None", ")", ")", "\n", "\n", "", "", "size", "[", "0", "]", "=", "size", "[", "1", "]", "if", "size", "[", "0", "]", "is", "None", "else", "size", "[", "0", "]", "\n", "size", "[", "1", "]", "=", "size", "[", "0", "]", "if", "size", "[", "1", "]", "is", "None", "else", "size", "[", "1", "]", "\n", "\n", "kwargs", "[", "'edge_index'", "]", "=", "edge_index", "\n", "kwargs", "[", "'size'", "]", "=", "size", "\n", "\n", "for", "(", "idx", ",", "arg", ")", "in", "self", ".", "__special_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "[", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "]", ")", "\n", "\n", "", "", "update_args", "=", "[", "kwargs", "[", "arg", "]", "for", "arg", "in", "self", ".", "__update_args__", "]", "\n", "\n", "out", "=", "self", ".", "message", "(", "*", "message_args", ")", "\n", "out", "=", "scatter_", "(", "self", ".", "aggr", ",", "out", ",", "edge_index", "[", "i", "]", ",", "dim", ",", "dim_size", "=", "size", "[", "i", "]", ")", "\n", "out", "=", "self", ".", "update", "(", "out", ",", "*", "update_args", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.message": [[138, 150], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Constructs messages to node :math:`i` in analogy to\n        :math:`\\phi_{\\mathbf{\\Theta}}` for each edge in\n        :math:`(j,i) \\in \\mathcal{E}` if :obj:`flow=\"source_to_target\"` and\n        :math:`(i,j) \\in \\mathcal{E}` if :obj:`flow=\"target_to_source\"`.\n        Can take any argument which was initially passed to :meth:`propagate`.\n        In addition, tensors passed to :meth:`propagate` can be mapped to the\n        respective nodes :math:`i` and :math:`j` by appending :obj:`_i` or\n        :obj:`_j` to the variable name, *.e.g.* :obj:`x_i` and :obj:`x_j`.\n        \"\"\"", "\n", "\n", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.auroua_SSNENAS.conv.message_passing.MessagePassing.update": [[151, 159], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Updates node embeddings in analogy to\n        :math:`\\gamma_{\\mathbf{\\Theta}}` for each node\n        :math:`i \\in \\mathcal{V}`.\n        Takes in the output of aggregation as first argument and any argument\n        which was initially passed to :meth:`propagate`.\"\"\"", "\n", "\n", "return", "aggr_out", "\n", "", "", ""]]}