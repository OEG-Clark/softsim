{"home.repos.pwc.inspect_result.SleepyBag_DAML.None.naive.NAIVE.__init__": [[11, 30], ["tensorflow.constant", "layers.nscla.NSCLA", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "model", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.naive.NAIVE.build": [[31, 57], ["data_iter.get_next", "naive.NAIVE.model.build", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.layers.dense", "ssce", "tensorflow.variable_scope", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build"], ["", "def", "build", "(", "self", ",", "data_iter", ")", ":", "\n", "        ", "input_map", "=", "data_iter", ".", "get_next", "(", ")", "\n", "self", ".", "input_map", "=", "input_map", "\n", "input_y", "=", "input_map", "[", "'rating'", "]", "\n", "self", ".", "input_y", "=", "input_y", "\n", "task_label", "=", "input_map", "[", "'task_label'", "]", "\n", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "feature", "=", "self", ".", "model", ".", "build", "(", "input_map", ")", "\n", "self", ".", "feature", "=", "feature", "\n", "# this part is trained for the unlabeled dataset which could only leverage the shared part of the model", "\n", "with", "tf", ".", "variable_scope", "(", "\"loss_share\"", ")", ":", "\n", "#  feature = stop(feature_share)", "\n", "            ", "logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "loss", "=", "ssce", "(", "logits", "=", "logit", ",", "labels", "=", "input_y", ")", "\n", "\n", "", "total_loss", "=", "tf", ".", "reduce_sum", "(", "loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "pred", "=", "tf", ".", "argmax", "(", "logit", ",", "1", ")", "\n", "correct_pred", "=", "tf", ".", "equal", "(", "pred", ",", "input_y", ")", "\n", "mse", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred", "-", "input_y", ")", ")", "\n", "correct_num", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred", ")", ")", "\n", "\n", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", ",", "(", "mse", ",", "'SUM'", ")", ",", "(", "correct_num", ",", "'SUM'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.naive.NAIVE.output_metrics": [[58, 63], ["math.sqrt", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", ",", "mse", ",", "correct_num", "=", "metrics", "\n", "info", "=", "'Mtotal: Loss = %.3f, RMSE = %.3f, Acc = %.3f\\n'", "%", "(", "loss", "/", "data_length", ",", "sqrt", "(", "float", "(", "mse", ")", "/", "data_length", ")", ",", "float", "(", "correct_num", ")", "/", "data_length", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.naive.NAIVE.record_metrics": [[64, 80], ["math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_loss", ",", "dev_mse", ",", "dev_correct_num", "=", "dev_metrics", "\n", "test_loss", ",", "test_mse", ",", "test_correct_num", "=", "test_metrics", "\n", "dev_accuracy", "=", "float", "(", "dev_correct_num", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "            ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "info", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "            ", "info", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.naive.NAIVE.train": [[81, 94], ["optimizer.compute_gradients", "optimizer.apply_gradients", "capped_grads_and_vars.append", "tensorflow.IndexedSlices"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "optimizer", ",", "global_step", ")", ":", "\n", "        ", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "capped_grads_and_vars", "=", "[", "]", "\n", "\n", "for", "grad", ",", "v", "in", "grads_and_vars", ":", "\n", "            ", "if", "v", "is", "self", ".", "model", ".", "wrd_emb", ":", "\n", "                ", "grad", "=", "tf", ".", "IndexedSlices", "(", "grad", ".", "values", "*", "self", ".", "embedding_lr", ",", "\n", "grad", ".", "indices", ",", "grad", ".", "dense_shape", ")", "\n", "", "capped_grads_and_vars", ".", "append", "(", "(", "grad", ",", "v", ")", ")", "\n", "\n", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "capped_grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "return", "train_op", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.adv_train.log": [[13, 15], ["print"], "function", ["None"], ["def", "log", "(", "s", ")", ":", "\n", "    ", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.adv_train.temp_load_data": [[100, 122], ["utils.load_data", "trainset.map.map", "devset.map.map", "testset.map.map", "tensorflow.zeros_like"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.load_data"], ["def", "temp_load_data", "(", "dataset", ",", "task_label", ")", ":", "\n", "    ", "embedding", ",", "trainset", ",", "devset", ",", "testset", ",", "trainlen", ",", "devlen", ",", "testlen", ",", "stats", "=", "load_data", "(", "\n", "dataset", ",", "\n", "DROP_RATE", ",", "\n", "flags", ".", "emb_dim", ",", "\n", "1", ",", "\n", "flags", ".", "max_doc_len", ",", "\n", "flags", ".", "max_sen_len", ",", "\n", "repeat", "=", "False", ",", "\n", "split_by_period", "=", "True", ")", "\n", "\n", "def", "transform", "(", "x", ")", ":", "\n", "        ", "x", "[", "'task_label'", "]", "=", "tf", ".", "zeros_like", "(", "x", "[", "'usr'", "]", ")", "+", "task_label", "\n", "if", "dataset", "==", "'imdb'", ":", "\n", "            ", "x", "[", "'rating'", "]", "//=", "2", "\n", "", "return", "x", "\n", "\n", "", "trainset", "=", "trainset", ".", "map", "(", "transform", ")", "\n", "devset", "=", "devset", ".", "map", "(", "transform", ")", "\n", "testset", "=", "testset", ".", "map", "(", "transform", ")", "\n", "\n", "return", "embedding", ",", "trainset", ",", "devset", ",", "testset", ",", "trainlen", ",", "devlen", ",", "testlen", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml.ML.__init__": [[11, 33], ["tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "layers.nscla.NSCLA", "tensorflow.variable_scope", "layers.nscla.NSCLA"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'model1'", ")", ":", "\n", "            ", "self", ".", "model1", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'model2'", ")", ":", "\n", "            ", "self", ".", "model2", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml.ML.build": [[34, 136], ["tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.to_float", "data_iter1.get_next", "data_iter1.get_next", "data_iter2.get_next", "tensorflow.variable_scope", "ml.ML.model1.build", "tensorflow.variable_scope", "ml.ML.model2.build", "sce", "tensorflow.where", "sce", "tensorflow.where", "utils.flip_gradient", "tensorflow.layers.dense", "ssce", "tensorflow.variable_scope", "ml.ML.build.get_loss"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build"], ["", "def", "build", "(", "self", ",", "data_iter1", ",", "data_iter2", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        build the whole model from a input iterator,\n        global step is not used, it's here just to align with the training code\n        \"\"\"", "\n", "# define aliases", "\n", "ones_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "ones_like", "(", "x", ")", ")", "\n", "zeros_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "zeros_like", "(", "x", ")", ")", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "sce", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "\n", "\n", "# parse the input", "\n", "if", "data_iter1", "is", "data_iter2", ":", "\n", "            ", "input_map1", "=", "data_iter1", ".", "get_next", "(", ")", "\n", "input_map2", "=", "input_map1", "\n", "", "else", ":", "\n", "            ", "input_map1", "=", "data_iter1", ".", "get_next", "(", ")", "\n", "input_map2", "=", "data_iter2", ".", "get_next", "(", ")", "\n", "\n", "", "rating1", "=", "input_map1", "[", "'rating'", "]", "\n", "hard_label1", "=", "tf", ".", "one_hot", "(", "rating1", ",", "self", ".", "cls_cnt", ")", "\n", "task_label1", "=", "input_map1", "[", "'task_label'", "]", "\n", "\n", "rating2", "=", "input_map2", "[", "'rating'", "]", "\n", "hard_label2", "=", "tf", ".", "one_hot", "(", "rating2", ",", "self", ".", "cls_cnt", ")", "\n", "task_label2", "=", "input_map2", "[", "'task_label'", "]", "\n", "\n", "self", ".", "input_y", "=", "rating1", "\n", "\n", "# build the body of models", "\n", "with", "tf", ".", "variable_scope", "(", "'model1'", ")", ":", "\n", "            ", "feature1", "=", "self", ".", "model1", ".", "build", "(", "input_map1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'model2'", ")", ":", "\n", "            ", "feature2", "=", "self", ".", "model2", ".", "build", "(", "input_map2", ")", "\n", "", "self", ".", "feature", "=", "feature1", "\n", "logit1", "=", "tf", ".", "layers", ".", "dense", "(", "feature1", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_logit1", "=", "tf", ".", "layers", ".", "dense", "(", "feature1", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_label1", "=", "tf", ".", "nn", ".", "softmax", "(", "stop", "(", "logit1", ")", "/", "self", ".", "temperature", ")", "\n", "logit2", "=", "tf", ".", "layers", ".", "dense", "(", "feature2", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_logit2", "=", "tf", ".", "layers", ".", "dense", "(", "feature2", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_label2", "=", "tf", ".", "nn", ".", "softmax", "(", "stop", "(", "logit2", ")", "/", "self", ".", "temperature", ")", "\n", "\n", "# obtain the loss", "\n", "def", "get_loss", "(", "logits", ",", "soft_logits", ",", "labels", ",", "soft_labels", ",", "task_label", ")", ":", "\n", "            ", "loss_truth", "=", "sce", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss_truth", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "loss_truth", ",", "zeros_like", "(", "loss_truth", ")", ")", "\n", "loss_soft", "=", "sce", "(", "logits", "=", "soft_logits", ",", "labels", "=", "soft_labels", ")", "\n", "loss_soft", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "zeros_like", "(", "loss_soft", ")", ",", "loss_soft", ")", "\n", "loss_truth", "=", "loss_truth", "+", "self", ".", "align_rate", "*", "loss_soft", "\n", "return", "loss_truth", "\n", "\n", "", "def", "get_loss_adv", "(", "feature", ",", "task_label", ")", ":", "\n", "            ", "feature", "=", "flip_gradient", "(", "feature", ",", "0.005", ")", "\n", "task_logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "task_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "task_logit_dis", "=", "task_logit", "\n", "loss_adv", "=", "ssce", "(", "logits", "=", "task_logit", ",", "labels", "=", "task_label", ")", "\n", "return", "loss_adv", ",", "task_logit_dis", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"loss1\"", ")", ":", "\n", "            ", "loss1", "=", "get_loss", "(", "logit1", ",", "soft_logit1", ",", "hard_label1", ",", "soft_label2", ",", "task_label1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"loss2\"", ")", ":", "\n", "            ", "loss2", "=", "get_loss", "(", "logit2", ",", "soft_logit2", ",", "hard_label2", ",", "soft_label1", ",", "task_label2", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss_adv1'", ")", ":", "\n", "            ", "loss_adv1", ",", "task_logit_dis1", "=", "get_loss_adv", "(", "feature1", ",", "task_label1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss_adv2'", ")", ":", "\n", "            ", "loss_adv2", ",", "task_logit_dis2", "=", "get_loss_adv", "(", "feature2", ",", "task_label2", ")", "\n", "\n", "", "total_loss", "=", "loss1", "+", "loss2", "+", "loss_adv1", "+", "loss_adv2", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "total_loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "# metrics", "\n", "pred1", "=", "tf", ".", "argmax", "(", "soft_logit1", ",", "1", ")", "\n", "pred2", "=", "tf", ".", "argmax", "(", "soft_logit2", ",", "1", ")", "\n", "soft_pred1", "=", "tf", ".", "argmax", "(", "soft_logit1", ",", "1", ")", "\n", "soft_pred2", "=", "tf", ".", "argmax", "(", "soft_logit2", ",", "1", ")", "\n", "same_pred", "=", "tf", ".", "equal", "(", "pred1", ",", "pred2", ")", "\n", "same_num", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "same_pred", ")", ")", "\n", "correct_pred1", "=", "tf", ".", "equal", "(", "pred1", ",", "rating1", ")", "\n", "correct_pred2", "=", "tf", ".", "equal", "(", "pred2", ",", "rating2", ")", "\n", "soft_correct_pred1", "=", "tf", ".", "equal", "(", "soft_pred1", ",", "pred2", ")", "\n", "soft_correct_pred2", "=", "tf", ".", "equal", "(", "soft_pred2", ",", "pred1", ")", "\n", "correct_num1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred1", ")", ")", "\n", "correct_num2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred2", ")", ")", "\n", "soft_correct_num1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "soft_correct_pred1", ")", ")", "\n", "soft_correct_num2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "soft_correct_pred2", ")", ")", "\n", "mse1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred1", "-", "rating1", ")", ")", "\n", "mse2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred2", "-", "rating2", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "task_pred1", "=", "tf", ".", "argmax", "(", "task_logit_dis1", ",", "1", ")", "\n", "task_pred2", "=", "tf", ".", "argmax", "(", "task_logit_dis2", ",", "1", ")", "\n", "task_correct_pred1", "=", "tf", ".", "equal", "(", "task_pred1", ",", "task_label1", ")", "\n", "task_correct_pred2", "=", "tf", ".", "equal", "(", "task_pred2", ",", "task_label2", ")", "\n", "task_correct_num1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred1", ")", ")", "\n", "task_correct_num2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred2", ")", ")", "\n", "\n", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", ",", "(", "mse1", ",", "'SUM'", ")", ",", "(", "mse2", ",", "'SUM'", ")", ",", "\n", "(", "correct_num1", ",", "'SUM'", ")", ",", "(", "correct_num2", ",", "'SUM'", ")", ",", "\n", "(", "task_correct_num1", ",", "'SUM'", ")", ",", "(", "task_correct_num2", ",", "'SUM'", ")", ",", "\n", "(", "soft_correct_num1", ",", "'SUM'", ")", ",", "(", "soft_correct_num2", ",", "'SUM'", ")", ",", "\n", "(", "same_num", ",", "'SUM'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml.ML.output_metrics": [[137, 152], ["float", "float", "float", "float", "math.sqrt", "float", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", ",", "mse1", ",", "mse2", ",", "correct_num1", ",", "correct_num2", ",", "task_correct_num1", ",", "task_correct_num2", ",", "soft_correct_num1", ",", "soft_correct_num2", ",", "same_num", "=", "metrics", "\n", "info", "=", "f'M1: Loss= {loss / data_length:.3f}, '", "+", "f'RMSE= {sqrt(float(mse1) / data_length):.3f}, '", "+", "f'Acc= {float(correct_num1) / data_length:.3f} '", "+", "f'SoftAcc= {float(soft_correct_num1) / data_length:.3f} '", "\n", "info", "+=", "f'DiscriAcc= {float(task_correct_num1) / data_length:.3f}\\n'", "\n", "info", "+=", "f'M2: Loss= {loss / data_length:.3f}, '", "+", "f'RMSE= {sqrt(float(mse2) / data_length):.3f}, '", "+", "f'Acc= {float(correct_num2) / data_length:.3f} '", "+", "f'SoftAcc= {float(soft_correct_num2) / data_length:.3f} '", "\n", "info", "+=", "f'DiscriAcc= {float(task_correct_num2) / data_length:.3f}\\n'", "\n", "info", "+=", "f'Align rate= {same_num / data_length:.3f}\\n'", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml.ML.record_metrics": [[153, 176], ["zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_correct_nums", "=", "[", "None", "]", "*", "2", "\n", "test_mses", "=", "[", "None", "]", "*", "2", "\n", "test_correct_nums", "=", "[", "None", "]", "*", "2", "\n", "_", ",", "_", ",", "_", ",", "dev_correct_nums", "[", "0", "]", ",", "dev_correct_nums", "[", "1", "]", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "dev_metrics", "\n", "_", ",", "test_mses", "[", "0", "]", ",", "test_mses", "[", "1", "]", ",", "test_correct_nums", "[", "0", "]", ",", "test_correct_nums", "[", "1", "]", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "test_metrics", "\n", "info", "=", "''", "\n", "for", "dev_correct_num", ",", "test_mse", ",", "test_correct_num", "in", "zip", "(", "dev_correct_nums", ",", "test_mses", ",", "test_correct_nums", ")", ":", "\n", "            ", "dev_accuracy", "=", "float", "(", "dev_correct_num", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "                ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "curinfo", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "                ", "curinfo", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "if", "not", "info", "or", "'NEW'", "in", "curinfo", ":", "\n", "                ", "info", "=", "curinfo", "\n", "", "", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.train_naive.log": [[11, 13], ["print"], "function", ["None"], ["def", "log", "(", "s", ")", ":", "\n", "    ", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.train_naive.temp_load_data": [[89, 111], ["utils.load_data", "trainset.map.map", "devset.map.map", "testset.map.map", "tensorflow.zeros_like"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.load_data"], ["def", "temp_load_data", "(", "dataset", ",", "task_label", ")", ":", "\n", "    ", "embedding", ",", "trainset", ",", "devset", ",", "testset", ",", "trainlen", ",", "devlen", ",", "testlen", ",", "stats", "=", "load_data", "(", "\n", "dataset", ",", "\n", "DROP_RATE", ",", "\n", "flags", ".", "emb_dim", ",", "\n", "1", ",", "\n", "flags", ".", "max_doc_len", ",", "\n", "flags", ".", "max_sen_len", ",", "\n", "repeat", "=", "False", ",", "\n", "split_by_period", "=", "True", ")", "\n", "\n", "def", "transform", "(", "x", ")", ":", "\n", "        ", "x", "[", "'task_label'", "]", "=", "tf", ".", "zeros_like", "(", "x", "[", "'usr'", "]", ")", "+", "task_label", "\n", "if", "dataset", "==", "'imdb'", ":", "\n", "            ", "x", "[", "'rating'", "]", "//=", "2", "\n", "", "return", "x", "\n", "\n", "", "trainset", "=", "trainset", ".", "map", "(", "transform", ")", "\n", "devset", "=", "devset", ".", "map", "(", "transform", ")", "\n", "testset", "=", "testset", ".", "map", "(", "transform", ")", "\n", "\n", "return", "embedding", ",", "trainset", ",", "devset", ",", "testset", ",", "trainlen", ",", "devlen", ",", "testlen", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml3.ML3.__init__": [[11, 35], ["tensorflow.constant", "range", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "ml3.ML3.model.append", "layers.nscla.NSCLA"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "model_cnt", "=", "3", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "self", ".", "model", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'model{i}'", ")", ":", "\n", "                ", "self", ".", "model", ".", "append", "(", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", ")", "\n", "\n", "# initializers for parameters", "\n", "", "", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml3.ML3.build": [[36, 126], ["data_iter.get_next", "tensorflow.one_hot", "range", "range", "range", "tensorflow.reduce_sum", "range", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.layers.dense", "soft_logits.append", "range", "sce", "tensorflow.where", "zip", "utils.flip_gradient", "tensorflow.layers.dense", "ssce", "sum", "sum", "preds.append", "correct_preds.append", "correct_nums.append", "mses.append", "tensorflow.variable_scope", "range", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.variable_scope", "features.append", "logits.append", "soft_labels.append", "soft_logits[].append", "tensorflow.equal", "zeros_like", "sce", "tensorflow.where", "tensorflow.variable_scope", "losses.append", "tensorflow.variable_scope", "ml3.ML3.build.get_loss_adv"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "data_iter", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        build the whole model from a input iterator,\n        global step is not used, it's here just to fit the training code\n        \"\"\"", "\n", "# define aliases", "\n", "ones_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "ones_like", "(", "x", ")", ")", "\n", "zeros_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "zeros_like", "(", "x", ")", ")", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "sce", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "\n", "dense", "=", "lambda", "feature", ",", "cls_cnt", ":", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "\n", "input_map", "=", "data_iter", ".", "get_next", "(", ")", "\n", "\n", "rating", "=", "input_map", "[", "'rating'", "]", "\n", "hard_label", "=", "tf", ".", "one_hot", "(", "rating", ",", "self", ".", "cls_cnt", ")", "\n", "task_label", "=", "input_map", "[", "'task_label'", "]", "\n", "\n", "features", "=", "[", "]", "\n", "logits", "=", "[", "]", "\n", "soft_logits", "=", "[", "]", "\n", "soft_labels", "=", "[", "]", "\n", "# build the body of models", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'model{i}'", ")", ":", "\n", "                ", "features", ".", "append", "(", "self", ".", "model", "[", "i", "]", ".", "build", "(", "input_map", ")", ")", "\n", "logits", ".", "append", "(", "dense", "(", "features", "[", "-", "1", "]", ",", "self", ".", "cls_cnt", ")", ")", "\n", "soft_labels", ".", "append", "(", "tf", ".", "nn", ".", "softmax", "(", "stop", "(", "logits", "[", "-", "1", "]", ")", "/", "self", ".", "temperature", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "soft_logits", ".", "append", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "model_cnt", "-", "1", ")", ":", "\n", "                ", "soft_logits", "[", "-", "1", "]", ".", "append", "(", "dense", "(", "features", "[", "i", "]", ",", "self", ".", "cls_cnt", ")", ")", "\n", "\n", "# obtain the loss", "\n", "", "", "def", "get_loss", "(", "logits", ",", "soft_logits", ",", "labels", ",", "soft_labels", ",", "task_label", ")", ":", "\n", "            ", "loss_truth", "=", "sce", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss_truth", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "loss_truth", ",", "zeros_like", "(", "loss_truth", ")", ")", "\n", "for", "slo", ",", "sla", "in", "zip", "(", "soft_logits", ",", "soft_labels", ")", ":", "\n", "                ", "loss_soft", "=", "sce", "(", "logits", "=", "slo", ",", "labels", "=", "sla", ")", "\n", "loss_soft", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "zeros_like", "(", "loss_soft", ")", ",", "loss_soft", ")", "\n", "loss_truth", "+=", "self", ".", "align_rate", "*", "loss_soft", "\n", "", "return", "loss_truth", "\n", "\n", "", "def", "get_loss_adv", "(", "feature", ",", "task_label", ")", ":", "\n", "            ", "feature", "=", "flip_gradient", "(", "feature", ",", "0.005", ")", "\n", "task_logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "task_cnt", ")", "\n", "task_logit_dis", "=", "task_logit", "\n", "loss_adv", "=", "ssce", "(", "logits", "=", "task_logit", ",", "labels", "=", "task_label", ")", "\n", "return", "loss_adv", ",", "task_logit_dis", "\n", "\n", "", "losses", "=", "[", "]", "\n", "losses_adv", "=", "[", "]", "\n", "task_logits_dis", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f\"loss{i}\"", ")", ":", "\n", "                ", "losses", ".", "append", "(", "get_loss", "(", "logits", "[", "i", "]", ",", "soft_logits", "[", "i", "]", ",", "hard_label", ",", "\n", "[", "sl", "for", "j", ",", "sl", "in", "enumerate", "(", "soft_labels", ")", "if", "i", "!=", "j", "]", ",", "\n", "task_label", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "f\"loss_adv{i}\"", ")", ":", "\n", "                ", "cur_loss_adv", ",", "cur_task_logit_dis", "=", "get_loss_adv", "(", "features", "[", "i", "]", ",", "task_label", ")", "\n", "losses_adv", ".", "append", "(", "cur_loss_adv", ")", "\n", "task_logits_dis", ".", "append", "(", "cur_task_logit_dis", ")", "\n", "\n", "", "", "total_loss", "=", "sum", "(", "losses", ")", "+", "sum", "(", "losses_adv", ")", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "total_loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "# metrics", "\n", "preds", "=", "[", "]", "\n", "correct_nums", "=", "[", "]", "\n", "correct_preds", "=", "[", "]", "\n", "mses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "preds", ".", "append", "(", "tf", ".", "argmax", "(", "logits", "[", "i", "]", ",", "1", ")", ")", "\n", "correct_preds", ".", "append", "(", "tf", ".", "equal", "(", "preds", "[", "i", "]", ",", "rating", ")", ")", "\n", "correct_nums", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_preds", "[", "i", "]", ")", ")", ")", "\n", "mses", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "preds", "[", "i", "]", "-", "rating", ")", ")", ")", "\n", "\n", "", "task_pred", "=", "[", "]", "\n", "task_correct_pred", "=", "[", "]", "\n", "task_correct_nums", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "                ", "task_pred", ".", "append", "(", "tf", ".", "argmax", "(", "task_logits_dis", "[", "i", "]", ",", "1", ")", ")", "\n", "task_correct_pred", ".", "append", "(", "tf", ".", "equal", "(", "task_pred", "[", "i", "]", ",", "task_label", ")", ")", "\n", "task_correct_nums", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", "]", "+", "[", "(", "mse", ",", "'SUM'", ")", "for", "mse", "in", "mses", "]", "+", "[", "(", "correct_num", ",", "'SUM'", ")", "for", "correct_num", "in", "correct_nums", "]", "+", "[", "(", "task_correct_num", ",", "'SUM'", ")", "for", "task_correct_num", "in", "task_correct_nums", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml3.ML3.output_metrics": [[127, 139], ["enumerate", "zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", "=", "metrics", "[", "0", "]", "\n", "mses", "=", "metrics", "[", "1", ":", "1", "+", "self", ".", "model_cnt", "]", "\n", "correct_nums", "=", "metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "task_correct_nums", "=", "metrics", "[", "1", "+", "2", "*", "self", ".", "model_cnt", ":", "1", "+", "3", "*", "self", ".", "model_cnt", "]", "\n", "info", "=", "''", "\n", "for", "i", ",", "(", "mse", ",", "correct_num", ",", "task_correct_num", ")", "in", "enumerate", "(", "zip", "(", "mses", ",", "correct_nums", ",", "task_correct_nums", ")", ")", ":", "\n", "            ", "info", "+=", "f'M{i}: Loss= {loss / data_length:.3f}, '", "\n", "info", "+=", "f'RMSE= {sqrt(float(mse) / data_length):.3f}, '", "\n", "info", "+=", "f'Acc= {float(correct_num) / data_length:.3f} '", "\n", "info", "+=", "f'DiscriAcc= {float(task_correct_num) / data_length:.3f}\\n'", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml3.ML3.record_metrics": [[140, 161], ["zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_correct_nums", "=", "dev_metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "test_mses", "=", "test_metrics", "[", "1", ":", "1", "+", "self", ".", "model_cnt", "]", "\n", "test_correct_nums", "=", "test_metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "info", "=", "''", "\n", "for", "dev_correct_num", ",", "test_mse", ",", "test_correct_num", "in", "zip", "(", "dev_correct_nums", ",", "test_mses", ",", "test_correct_nums", ")", ":", "\n", "            ", "dev_accuracy", "=", "float", "(", "dev_correct_num", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "                ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "curinfo", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "                ", "curinfo", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "if", "not", "info", "or", "'NEW'", "in", "curinfo", ":", "\n", "                ", "info", "=", "curinfo", "\n", "", "", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.build_dataset": [[12, 168], ["data.load_embedding", "csv.reader", "os.path.exists", "w2v.word2vec", "os.path.exists", "pandas.concat", "pd.concat.usr.unique().tolist", "total_data.usr.unique().tolist.sort", "pd.concat.prd.unique().tolist", "total_data.prd.unique().tolist.sort", "len", "len", "data_frames[].iterrows", "data.data_process", "data.data_process", "data.data_process", "zip", "csv.writer", "stats.items", "tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.decode_raw", "open", "int", "tensorflow.data.TFRecordDataset", "dataset.map.map", "datasets.append", "str", "sum", "len", "os.path.exists", "os.path.exists", "os.remove", "pandas.read_csv", "len", "usr_doc[].append", "prd_doc[].append", "data_frame[].transform", "data_frame[].transform", "tensorflow.python_io.TFRecordWriter", "data_frame.iterrows", "tf.python_io.TFRecordWriter.close", "len", "open", "csv.writer.writerow", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "int64_feature"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.load_embedding", "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.data_process", "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.data_process", "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.data_process"], ["def", "build_dataset", "(", "filenames", ",", "tfrecords_filenames", ",", "stats_filename", ",", "\n", "embedding_filename", ",", "max_doc_len", ",", "\n", "max_sen_len", ",", "split_by_period", ",", "emb_dim", ",", "text_filename", ",", "drop", ")", ":", "\n", "    ", "datasets", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "embedding_filename", ")", ":", "\n", "        ", "w2v", ".", "word2vec", "(", "\n", "text_filename", ",", "\n", "embedding_filename", ",", "\n", "size", "=", "emb_dim", ",", "\n", "binary", "=", "0", ",", "\n", "verbose", "=", "True", ")", "\n", "#  os.system('vim ' + embedding_filename + ' +%s/ $//g +wqall')", "\n", "", "wrd_dict", ",", "wrd_index", ",", "embedding", "=", "load_embedding", "(", "embedding_filename", ",", "\n", "emb_dim", ")", "\n", "\n", "tfrecords_filenames", "=", "[", "\n", "i", "+", "str", "(", "split_by_period", ")", "+", "str", "(", "max_doc_len", ")", "+", "str", "(", "max_sen_len", ")", "+", "\n", "str", "(", "drop", ")", "for", "i", "in", "tfrecords_filenames", "\n", "]", "\n", "stats", "=", "{", "}", "\n", "if", "sum", "(", "[", "os", ".", "path", ".", "exists", "(", "i", ")", "for", "i", "in", "tfrecords_filenames", "]", ")", "<", "len", "(", "tfrecords_filenames", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "stats_filename", ")", ":", "\n", "        ", "for", "tfrecords_filename", "in", "tfrecords_filenames", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "tfrecords_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "tfrecords_filename", ")", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "stats_filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "stats_filename", ")", "\n", "# read the data and transform them", "\n", "\n", "", "data_frames", "=", "[", "\n", "pd", ".", "read_csv", "(", "\n", "filename", ",", "sep", "=", "'\\t\\t'", ",", "names", "=", "reading_col_name", ",", "engine", "=", "'python'", ")", "\n", "for", "filename", "in", "filenames", "\n", "]", "\n", "\n", "total_data", "=", "pd", ".", "concat", "(", "data_frames", ")", "\n", "usr", "=", "total_data", ".", "usr", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "usr", ".", "sort", "(", ")", "\n", "usr_index", "=", "{", "name", ":", "index", "for", "index", ",", "name", "in", "enumerate", "(", "usr", ")", "}", "\n", "prd", "=", "total_data", ".", "prd", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "prd", ".", "sort", "(", ")", "\n", "prd_index", "=", "{", "name", ":", "index", "for", "index", ",", "name", "in", "enumerate", "(", "prd", ")", "}", "\n", "\n", "stats", "[", "'usr_cnt'", "]", "=", "len", "(", "usr", ")", "\n", "stats", "[", "'prd_cnt'", "]", "=", "len", "(", "prd", ")", "\n", "stats", "[", "'doc_cnt'", "]", "=", "len", "(", "data_frames", "[", "0", "]", ")", "+", "1", "\n", "\n", "usr_doc", "=", "{", "}", "\n", "prd_doc", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "data_frames", "[", "0", "]", ".", "iterrows", "(", ")", ":", "\n", "            ", "usr", "=", "usr_index", "[", "item", "[", "'usr'", "]", "]", "\n", "prd", "=", "prd_index", "[", "item", "[", "'prd'", "]", "]", "\n", "if", "usr", "not", "in", "usr_doc", ":", "\n", "                ", "usr_doc", "[", "usr", "]", "=", "[", "]", "\n", "", "usr_doc", "[", "usr", "]", ".", "append", "(", "i", ")", "\n", "if", "prd", "not", "in", "prd_doc", ":", "\n", "                ", "prd_doc", "[", "prd", "]", "=", "[", "]", "\n", "", "prd_doc", "[", "prd", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "data_frames", "[", "0", "]", "=", "data_process", "(", "\n", "data_frames", "[", "0", "]", ",", "wrd_index", ",", "usr_index", ",", "prd_index", ",", "max_doc_len", ",", "\n", "max_sen_len", ",", "split_by_period", ",", "drop", ",", "'INC'", ",", "usr_doc", ",", "prd_doc", ")", "\n", "data_frames", "[", "1", "]", "=", "data_process", "(", "\n", "data_frames", "[", "1", "]", ",", "wrd_index", ",", "usr_index", ",", "prd_index", ",", "max_doc_len", ",", "\n", "max_sen_len", ",", "split_by_period", ",", ".0", ",", "'ZERO'", ",", "usr_doc", ",", "prd_doc", ")", "\n", "data_frames", "[", "2", "]", "=", "data_process", "(", "\n", "data_frames", "[", "2", "]", ",", "wrd_index", ",", "usr_index", ",", "prd_index", ",", "max_doc_len", ",", "\n", "max_sen_len", ",", "split_by_period", ",", ".0", ",", "'ZERO'", ",", "usr_doc", ",", "prd_doc", ")", "\n", "\n", "# build the dataset", "\n", "for", "filename", ",", "tfrecords_filename", ",", "data_frame", "in", "zip", "(", "\n", "filenames", ",", "tfrecords_filenames", ",", "data_frames", ")", ":", "\n", "\n", "            ", "def", "to_string", "(", "x", ")", ":", "\n", "                ", "return", "x", ".", "tostring", "(", ")", "\n", "\n", "", "data_frame", "[", "'content'", "]", "=", "data_frame", "[", "'content'", "]", ".", "transform", "(", "to_string", ")", "\n", "# data_frame['polarity'] = data_frame['polarity'].transform(", "\n", "#     to_string)", "\n", "data_frame", "[", "'sen_len'", "]", "=", "data_frame", "[", "'sen_len'", "]", ".", "transform", "(", "to_string", ")", "\n", "# data_frame['co_doc'] = data_frame['co_doc'].transform(to_string)", "\n", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfrecords_filename", ")", "\n", "\n", "def", "int64list", "(", "value", ")", ":", "\n", "                ", "return", "tf", ".", "train", ".", "Feature", "(", "\n", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n", "", "def", "byteslist", "(", "value", ")", ":", "\n", "                ", "return", "tf", ".", "train", ".", "Feature", "(", "\n", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "value", ")", ")", "\n", "\n", "", "for", "item", "in", "data_frame", ".", "iterrows", "(", ")", ":", "\n", "                ", "feature", "=", "{", "\n", "'usr'", ":", "int64list", "(", "[", "item", "[", "1", "]", "[", "'usr'", "]", "]", ")", ",", "\n", "'prd'", ":", "int64list", "(", "[", "item", "[", "1", "]", "[", "'prd'", "]", "]", ")", ",", "\n", "'rating'", ":", "int64list", "(", "[", "item", "[", "1", "]", "[", "'rating'", "]", "]", ")", ",", "\n", "'content'", ":", "byteslist", "(", "[", "item", "[", "1", "]", "[", "'content'", "]", "]", ")", ",", "\n", "'sen_len'", ":", "byteslist", "(", "[", "item", "[", "1", "]", "[", "'sen_len'", "]", "]", ")", ",", "\n", "'doc_len'", ":", "int64list", "(", "[", "item", "[", "1", "]", "[", "'doc_len'", "]", "]", ")", ",", "\n", "# 'polarity': byteslist([item[1]['polarity']]),", "\n", "# 'co_doc': byteslist([item[1]['co_doc']]),", "\n", "# 'co_doc_cnt': int64list([item[1]['co_doc_cnt']]),", "\n", "'docid'", ":", "int64list", "(", "[", "item", "[", "1", "]", "[", "'docid'", "]", "]", ")", "\n", "}", "\n", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "\n", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "feature", ")", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "stats", "[", "filename", "+", "'len'", "]", "=", "len", "(", "data_frame", ")", "\n", "# lengths.append(len(data_frame))", "\n", "\n", "", "stats_file", "=", "csv", ".", "writer", "(", "open", "(", "stats_filename", ",", "'w'", ")", ")", "\n", "# print('usr_cnt: %d, prd_cnt: %d' % (usr_cnt, prd_cnt))", "\n", "for", "key", ",", "val", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "stats_file", ".", "writerow", "(", "[", "key", ",", "val", "]", ")", "\n", "\n", "", "", "def", "transform_example", "(", "example", ")", ":", "\n", "        ", "def", "int64_feature", "(", ")", ":", "\n", "            ", "return", "tf", ".", "FixedLenFeature", "(", "\n", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ",", "default_value", "=", "None", ")", "\n", "\n", "", "def", "string_feature", "(", ")", ":", "\n", "            ", "return", "tf", ".", "FixedLenFeature", "(", "\n", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "string", ",", "default_value", "=", "None", ")", "\n", "\n", "", "dics", "=", "{", "\n", "'usr'", ":", "int64_feature", "(", ")", ",", "\n", "'prd'", ":", "int64_feature", "(", ")", ",", "\n", "'rating'", ":", "int64_feature", "(", ")", ",", "\n", "'content'", ":", "string_feature", "(", ")", ",", "\n", "# 'polarity': string_feature(),", "\n", "'sen_len'", ":", "string_feature", "(", ")", ",", "\n", "'doc_len'", ":", "int64_feature", "(", ")", ",", "\n", "# 'co_doc': string_feature(),", "\n", "# 'co_doc_cnt': int64_feature(),", "\n", "'docid'", ":", "int64_feature", "(", ")", "\n", "}", "\n", "\n", "ans", "=", "tf", ".", "parse_single_example", "(", "example", ",", "dics", ")", "\n", "ans", "[", "'content'", "]", "=", "tf", ".", "decode_raw", "(", "ans", "[", "'content'", "]", ",", "tf", ".", "int64", ")", "\n", "# ans['polarity'] = tf.decode_raw(ans['polarity'], tf.int64)", "\n", "ans", "[", "'sen_len'", "]", "=", "tf", ".", "decode_raw", "(", "ans", "[", "'sen_len'", "]", ",", "tf", ".", "int64", ")", "\n", "# ans['co_doc'] = tf.decode_raw(ans['co_doc'], tf.int64)", "\n", "return", "ans", "\n", "\n", "", "for", "key", ",", "val", "in", "csv", ".", "reader", "(", "open", "(", "stats_filename", ")", ")", ":", "\n", "        ", "stats", "[", "key", "]", "=", "int", "(", "val", ")", "\n", "", "for", "tfrecords_filename", "in", "tfrecords_filenames", ":", "\n", "        ", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "tfrecords_filename", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "transform_example", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "", "lengths", "=", "[", "stats", "[", "filename", "+", "'len'", "]", "for", "filename", "in", "filenames", "]", "\n", "return", "datasets", ",", "lengths", ",", "embedding", ".", "values", ",", "stats", ",", "wrd_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.load_embedding": [[171, 185], ["pd.read_csv.sort_values", "data_frame[].tolist", "pandas.read_csv", "pandas.read_csv", "enumerate", "range", "range"], "function", ["None"], ["", "def", "load_embedding", "(", "filename", ",", "emb_dim", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "emb_col_name", "=", "[", "'wrd'", "]", "+", "[", "i", "for", "i", "in", "range", "(", "emb_dim", "+", "1", ")", "]", "\n", "data_frame", "=", "pd", ".", "read_csv", "(", "\n", "filename", ",", "sep", "=", "' '", ",", "header", "=", "0", ",", "names", "=", "emb_col_name", ")", "\n", "", "except", "pd", ".", "errors", ".", "ParserError", ":", "\n", "        ", "emb_col_name", "=", "[", "'wrd'", "]", "+", "[", "i", "for", "i", "in", "range", "(", "emb_dim", ")", "]", "\n", "data_frame", "=", "pd", ".", "read_csv", "(", "\n", "filename", ",", "sep", "=", "' '", ",", "header", "=", "0", ",", "names", "=", "emb_col_name", ")", "\n", "", "data_frame", "=", "data_frame", ".", "sort_values", "(", "'wrd'", ")", "\n", "embedding", "=", "data_frame", "[", "emb_col_name", "[", "1", ":", "emb_dim", "+", "1", "]", "]", "\n", "wrd_dict", "=", "data_frame", "[", "'wrd'", "]", ".", "tolist", "(", ")", "\n", "wrd_index", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "wrd_dict", ")", "}", "\n", "return", "wrd_dict", ",", "wrd_index", ",", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.sentence_transform": [[188, 213], ["numpy.zeros", "enumerate", "numpy.zeros", "sentence_index.reshape.reshape"], "function", ["None"], ["", "def", "sentence_transform", "(", "document", ",", "wrd_index", ",", "max_doc_len", ",", "max_sen_len", ",", "\n", "split_by_period", ")", ":", "\n", "    ", "if", "split_by_period", ":", "\n", "        ", "sentence_index", "=", "np", ".", "zeros", "(", "(", "max_doc_len", ",", "max_sen_len", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "document", ")", ":", "\n", "            ", "if", "i", ">=", "max_doc_len", ":", "\n", "                ", "break", "\n", "", "j", "=", "0", "\n", "for", "wrd", "in", "sentence", ":", "\n", "                ", "if", "j", ">=", "max_sen_len", ":", "\n", "                    ", "break", "\n", "", "if", "wrd", "in", "wrd_index", ":", "\n", "                    ", "sentence_index", "[", "i", "]", "[", "j", "]", "=", "wrd_index", "[", "wrd", "]", "\n", "j", "+=", "1", "\n", "", "", "", "", "else", ":", "\n", "        ", "sentence_index", "=", "np", ".", "zeros", "(", "(", "max_doc_len", "*", "max_sen_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "i", "=", "0", "\n", "for", "wrd", "in", "document", ":", "\n", "            ", "if", "i", "==", "max_doc_len", "*", "max_sen_len", ":", "\n", "                ", "break", "\n", "", "if", "wrd", "in", "wrd_index", ":", "\n", "                ", "sentence_index", "[", "i", "]", "=", "wrd_index", "[", "wrd", "]", "\n", "i", "+=", "1", "\n", "", "", "sentence_index", "=", "sentence_index", ".", "reshape", "(", "(", "max_doc_len", ",", "max_sen_len", ")", ")", "\n", "", "return", "sentence_index", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.split_paragraph": [[215, 223], ["paragraph.split", "enumerate", "paragraph.split", "sentences[].split"], "function", ["None"], ["", "def", "split_paragraph", "(", "paragraph", ",", "split_by_period", ")", ":", "\n", "    ", "if", "split_by_period", ":", "\n", "        ", "sentences", "=", "paragraph", ".", "split", "(", "'<sssss>'", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "sentences", ")", ":", "\n", "            ", "sentences", "[", "i", "]", "=", "sentences", "[", "i", "]", ".", "split", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "sentences", "=", "paragraph", ".", "split", "(", ")", "\n", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.data_process": [[225, 277], ["df.content.apply", "df.usr.map", "df.prd.map", "print", "df.content.transform", "df.content.transform", "df.sen_len.transform", "print", "functools.partial", "df.rating.apply", "functools.partial", "numpy.count_nonzero", "df.rating.isin", "numpy.random.choice", "range"], "function", ["None"], ["", "def", "data_process", "(", "df", ",", "wrd_index", ",", "usr_index", ",", "prd_index", ",", "max_doc_len", ",", "max_sen_len", ",", "\n", "split_by_period", ",", "drop", ",", "docid_type", ",", "usr_doc", ",", "prd_doc", ")", ":", "\n", "    ", "\"\"\"\n    docid is fixed to two values: 'INC' and 'ZERO'\n    \"\"\"", "\n", "# count contents' length", "\n", "df", ".", "content", "=", "df", ".", "content", ".", "apply", "(", "\n", "partial", "(", "split_paragraph", ",", "split_by_period", "=", "split_by_period", ")", ")", "\n", "if", "drop", "!=", "0.", ":", "\n", "        ", "df", ".", "rating", "=", "df", ".", "rating", ".", "apply", "(", "lambda", "x", ":", "x", "*", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "p", "=", "[", "drop", ",", "1", "-", "drop", "]", ")", ")", "\n", "df", "=", "df", "[", "df", ".", "rating", ".", "isin", "(", "range", "(", "1", ",", "100", ")", ")", "]", "\n", "", "df", ".", "rating", "=", "df", ".", "rating", "-", "1", "\n", "# df['max_sen_len'] = df['sen_len'].transform(lambda sen_len: max(sen_len))", "\n", "\n", "# transform users and products to indices", "\n", "df", ".", "usr", "=", "df", ".", "usr", ".", "map", "(", "usr_index", ")", "\n", "df", ".", "prd", "=", "df", ".", "prd", ".", "map", "(", "prd_index", ")", "\n", "print", "(", "'Users and products indexed.'", ")", "\n", "\n", "# transform contents into indices", "\n", "# df['polarity'] = df.content.transform(", "\n", "#     partial(", "\n", "#         sentence_to_polarity,", "\n", "#         max_doc_len=max_doc_len,", "\n", "#         max_sen_len=max_sen_len,", "\n", "#         split_by_period=split_by_period))", "\n", "df", ".", "content", "=", "df", ".", "content", ".", "transform", "(", "\n", "partial", "(", "\n", "sentence_transform", ",", "\n", "wrd_index", "=", "wrd_index", ",", "\n", "max_doc_len", "=", "max_doc_len", ",", "\n", "max_sen_len", "=", "max_sen_len", ",", "\n", "split_by_period", "=", "split_by_period", ")", ")", "\n", "df", "[", "'sen_len'", "]", "=", "df", ".", "content", ".", "transform", "(", "lambda", "i", ":", "np", ".", "count_nonzero", "(", "i", ",", "axis", "=", "1", ")", ")", "\n", "df", "[", "'doc_len'", "]", "=", "df", ".", "sen_len", ".", "transform", "(", "np", ".", "count_nonzero", ")", "\n", "print", "(", "'Contents indexed.'", ")", "\n", "\n", "# add docid intot data", "\n", "if", "docid_type", "==", "'INC'", ":", "\n", "        ", "df", "[", "'docid'", "]", "=", "df", ".", "index", "+", "1", "\n", "", "elif", "docid_type", "==", "'ZERO'", ":", "\n", "        ", "df", "[", "'docid'", "]", "=", "0", "\n", "#  df['co_doc'] = df.", "\n", "\n", "# df['co_doc'] = df.apply(", "\n", "#     lambda row: query_co_doc(row['usr'], row['prd'], row['docid'], usr_doc,", "\n", "#                              prd_doc),", "\n", "#     axis=1)", "\n", "# df['co_doc_cnt'] = df.co_doc.transform(np.count_nonzero)", "\n", "# print('co_doc counted')", "\n", "", "return", "df", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.sml.SML.__init__": [[11, 33], ["tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "layers.nscla.NSCLA", "tensorflow.variable_scope", "layers.nscla.NSCLA"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'model1'", ")", ":", "\n", "            ", "self", ".", "model1", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'model2'", ")", ":", "\n", "            ", "self", ".", "model2", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.sml.SML.build": [[34, 130], ["tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.to_float", "data_iter1.get_next", "data_iter1.get_next", "data_iter2.get_next", "tensorflow.variable_scope", "sml.SML.model1.build", "tensorflow.variable_scope", "sml.SML.model2.build", "tensorflow.stop_gradient", "sce", "tensorflow.where", "sce", "tensorflow.where", "utils.flip_gradient", "tensorflow.layers.dense", "ssce", "tensorflow.variable_scope", "sml.SML.build.get_loss"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build"], ["", "def", "build", "(", "self", ",", "data_iter1", ",", "data_iter2", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        build the whole model from a input iterator,\n        global step is not used, it's here just to align with the training code\n        \"\"\"", "\n", "# define aliases", "\n", "ones_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "ones_like", "(", "x", ")", ")", "\n", "zeros_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "zeros_like", "(", "x", ")", ")", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "sce", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "\n", "\n", "# parse the input", "\n", "if", "data_iter1", "is", "data_iter2", ":", "\n", "            ", "input_map1", "=", "data_iter1", ".", "get_next", "(", ")", "\n", "input_map2", "=", "input_map1", "\n", "", "else", ":", "\n", "            ", "input_map1", "=", "data_iter1", ".", "get_next", "(", ")", "\n", "input_map2", "=", "data_iter2", ".", "get_next", "(", ")", "\n", "\n", "", "rating1", "=", "input_map1", "[", "'rating'", "]", "\n", "hard_label1", "=", "tf", ".", "one_hot", "(", "rating1", ",", "self", ".", "cls_cnt", ")", "\n", "task_label1", "=", "input_map1", "[", "'task_label'", "]", "\n", "\n", "rating2", "=", "input_map2", "[", "'rating'", "]", "\n", "hard_label2", "=", "tf", ".", "one_hot", "(", "rating2", ",", "self", ".", "cls_cnt", ")", "\n", "task_label2", "=", "input_map2", "[", "'task_label'", "]", "\n", "\n", "self", ".", "input_y", "=", "rating1", "\n", "\n", "# build the body of models", "\n", "with", "tf", ".", "variable_scope", "(", "'model1'", ")", ":", "\n", "            ", "feature1", "=", "self", ".", "model1", ".", "build", "(", "input_map1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'model2'", ")", ":", "\n", "            ", "feature2", "=", "self", ".", "model2", ".", "build", "(", "input_map2", ")", "\n", "", "self", ".", "feature", "=", "feature1", "\n", "logit1", "=", "tf", ".", "layers", ".", "dense", "(", "feature1", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_label1", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "stop_gradient", "(", "logit1", ")", "/", "self", ".", "temperature", ")", "\n", "logit2", "=", "tf", ".", "layers", ".", "dense", "(", "feature2", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "soft_label2", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "stop_gradient", "(", "logit2", ")", "/", "self", ".", "temperature", ")", "\n", "\n", "# obtain the loss", "\n", "def", "get_loss", "(", "logits", ",", "labels", ",", "soft_labels", ",", "task_label", ")", ":", "\n", "            ", "soft_labels", "=", "stop", "(", "soft_labels", ")", "\n", "loss_truth", "=", "sce", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss_truth", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "loss_truth", ",", "zeros_like", "(", "loss_truth", ")", ")", "\n", "loss_soft", "=", "sce", "(", "logits", "=", "logits", ",", "labels", "=", "soft_labels", ")", "\n", "loss_soft", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "zeros_like", "(", "loss_soft", ")", ",", "loss_soft", ")", "\n", "loss_truth", "=", "loss_truth", "+", "self", ".", "align_rate", "*", "loss_soft", "\n", "return", "loss_truth", "\n", "\n", "", "def", "get_loss_adv", "(", "feature", ",", "task_label", ")", ":", "\n", "            ", "feature", "=", "flip_gradient", "(", "feature", ",", "0.005", ")", "\n", "task_logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "task_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "task_logit_dis", "=", "task_logit", "\n", "loss_adv", "=", "ssce", "(", "logits", "=", "task_logit", ",", "labels", "=", "task_label", ")", "\n", "return", "loss_adv", ",", "task_logit_dis", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"loss1\"", ")", ":", "\n", "            ", "loss1", "=", "get_loss", "(", "logit1", ",", "hard_label1", ",", "soft_label2", ",", "task_label1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"loss2\"", ")", ":", "\n", "            ", "loss2", "=", "get_loss", "(", "logit2", ",", "hard_label2", ",", "soft_label1", ",", "task_label2", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss_adv1'", ")", ":", "\n", "            ", "loss_adv1", ",", "task_logit_dis1", "=", "get_loss_adv", "(", "feature1", ",", "task_label1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss_adv2'", ")", ":", "\n", "            ", "loss_adv2", ",", "task_logit_dis2", "=", "get_loss_adv", "(", "feature2", ",", "task_label2", ")", "\n", "\n", "", "self", ".", "total_loss1", "=", "tf", ".", "reduce_sum", "(", "loss1", "+", "loss_adv1", ")", "\n", "self", ".", "total_loss2", "=", "tf", ".", "reduce_sum", "(", "loss2", "+", "loss_adv2", ")", "\n", "total_loss", "=", "loss1", "+", "loss2", "+", "loss_adv1", "+", "loss_adv2", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "total_loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "# metrics", "\n", "pred1", "=", "tf", ".", "argmax", "(", "logit1", ",", "1", ")", "\n", "pred2", "=", "tf", ".", "argmax", "(", "logit2", ",", "1", ")", "\n", "same_pred", "=", "tf", ".", "equal", "(", "pred1", ",", "pred2", ")", "\n", "same_num", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "same_pred", ")", ")", "\n", "correct_pred1", "=", "tf", ".", "equal", "(", "pred1", ",", "rating1", ")", "\n", "correct_pred2", "=", "tf", ".", "equal", "(", "pred2", ",", "rating2", ")", "\n", "correct_num1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred1", ")", ")", "\n", "correct_num2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred2", ")", ")", "\n", "mse1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred1", "-", "rating1", ")", ")", "\n", "mse2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred2", "-", "rating2", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "task_pred1", "=", "tf", ".", "argmax", "(", "task_logit_dis1", ",", "1", ")", "\n", "task_pred2", "=", "tf", ".", "argmax", "(", "task_logit_dis2", ",", "1", ")", "\n", "task_correct_pred1", "=", "tf", ".", "equal", "(", "task_pred1", ",", "task_label1", ")", "\n", "task_correct_pred2", "=", "tf", ".", "equal", "(", "task_pred2", ",", "task_label2", ")", "\n", "task_correct_num1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred1", ")", ")", "\n", "task_correct_num2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred2", ")", ")", "\n", "\n", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", ",", "(", "mse1", ",", "'SUM'", ")", ",", "(", "mse2", ",", "'SUM'", ")", ",", "\n", "(", "correct_num1", ",", "'SUM'", ")", ",", "(", "correct_num2", ",", "'SUM'", ")", ",", "\n", "(", "task_correct_num1", ",", "'SUM'", ")", ",", "(", "task_correct_num2", ",", "'SUM'", ")", ",", "\n", "(", "same_num", ",", "'SUM'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.sml.SML.output_metrics": [[131, 143], ["math.sqrt", "float", "math.sqrt", "float", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", ",", "mse1", ",", "mse2", ",", "correct_num1", ",", "correct_num2", ",", "task_correct_num1", ",", "task_correct_num2", ",", "same_num", "=", "metrics", "\n", "info", "=", "'M1: Loss= %.3f, RMSE= %.3f, Acc= %.3f '", "%", "(", "loss", "/", "data_length", ",", "sqrt", "(", "float", "(", "mse1", ")", "/", "data_length", ")", ",", "float", "(", "correct_num1", ")", "/", "data_length", ")", "\n", "info", "+=", "'DiscriAcc= %.3f\\n'", "%", "(", "float", "(", "task_correct_num1", ")", "/", "data_length", ")", "\n", "info", "+=", "'M2: Loss= %.3f, RMSE= %.3f, Acc= %.3f '", "%", "(", "loss", "/", "data_length", ",", "sqrt", "(", "float", "(", "mse2", ")", "/", "data_length", ")", ",", "float", "(", "correct_num2", ")", "/", "data_length", ")", "\n", "info", "+=", "'DiscriAcc= %.3f\\n'", "%", "(", "float", "(", "task_correct_num2", ")", "/", "data_length", ")", "\n", "info", "+=", "'Align rate= %.3f\\n'", "%", "(", "same_num", "/", "data_length", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.sml.SML.record_metrics": [[144, 167], ["zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_correct_nums", "=", "[", "None", "]", "*", "2", "\n", "test_mses", "=", "[", "None", "]", "*", "2", "\n", "test_correct_nums", "=", "[", "None", "]", "*", "2", "\n", "_", ",", "_", ",", "_", ",", "dev_correct_nums", "[", "0", "]", ",", "dev_correct_nums", "[", "1", "]", ",", "_", ",", "_", ",", "_", "=", "dev_metrics", "\n", "_", ",", "test_mses", "[", "0", "]", ",", "test_mses", "[", "1", "]", ",", "test_correct_nums", "[", "0", "]", ",", "test_correct_nums", "[", "1", "]", ",", "_", ",", "_", ",", "_", "=", "test_metrics", "\n", "info", "=", "''", "\n", "for", "dev_correct_num", ",", "test_mse", ",", "test_correct_num", "in", "zip", "(", "dev_correct_nums", ",", "test_mses", ",", "test_correct_nums", ")", ":", "\n", "            ", "dev_accuracy", "=", "float", "(", "dev_correct_num", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "                ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "curinfo", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "                ", "curinfo", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "if", "not", "info", "or", "'NEW'", "in", "curinfo", ":", "\n", "                ", "info", "=", "curinfo", "\n", "", "", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.FlipGradientBuilder.__init__": [[133, 135], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_calls", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.FlipGradientBuilder.__call__": [[136, 149], ["tensorflow.python.framework.ops.RegisterGradient", "tensorflow.get_default_graph", "tensorflow.get_default_graph.gradient_override_map", "tensorflow.identity", "tensorflow.negative"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "l", "=", "1.0", ")", ":", "\n", "        ", "grad_name", "=", "\"FlipGradient%d\"", "%", "self", ".", "num_calls", "\n", "\n", "@", "ops", ".", "RegisterGradient", "(", "grad_name", ")", "\n", "def", "_flip_gradients", "(", "op", ",", "grad", ")", ":", "\n", "            ", "return", "[", "tf", ".", "negative", "(", "grad", ")", "*", "l", "]", "\n", "\n", "", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "with", "g", ".", "gradient_override_map", "(", "{", "\"Identity\"", ":", "grad_name", "}", ")", ":", "\n", "            ", "y", "=", "tf", ".", "identity", "(", "x", ")", "\n", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.run_set": [[11, 47], ["tqdm.tqdm", "range", "sess.run", "tqdm.tqdm.set_description", "sess.run", "zip", "ans.append", "str", "range", "isinstance", "ans.append", "len", "ans[].append", "len", "ans.append", "len"], "function", ["None"], ["def", "run_set", "(", "sess", ",", "step_cnt", ",", "sealed_metrics", ",", "ops", "=", "[", "]", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sealed_metrics, ops are two lists of tuple(variable, type)\n    variable is a tensor\n    type is one of SUM, ALL, MEAN, LAST, NONE\n    \"\"\"", "\n", "sealed_metrics", "=", "[", "(", "a", ",", "'SUM'", ")", "if", "not", "isinstance", "(", "a", ",", "tuple", ")", "else", "a", "\n", "for", "a", "in", "sealed_metrics", "]", "\n", "metrics", "=", "sealed_metrics", "+", "ops", "\n", "pgb", "=", "tqdm", "(", "range", "(", "step_cnt", ")", ",", "leave", "=", "False", ",", "dynamic_ncols", "=", "True", ")", "\n", "ans", "=", "[", "]", "\n", "for", "metric", ",", "method", "in", "metrics", ":", "\n", "        ", "if", "method", "==", "'ALL'", ":", "\n", "            ", "ans", ".", "append", "(", "[", "]", ")", "\n", "", "elif", "method", "==", "'MEAN'", "or", "method", "==", "'SUM'", ":", "\n", "            ", "ans", ".", "append", "(", "0", ")", "\n", "", "elif", "method", "==", "'LAST'", "or", "method", "==", "'NONE'", ":", "\n", "            ", "ans", ".", "append", "(", "None", ")", "\n", "", "", "methods", "=", "[", "metric", "[", "1", "]", "for", "metric", "in", "metrics", "]", "\n", "metrics", "=", "[", "metric", "[", "0", "]", "for", "metric", "in", "metrics", "]", "\n", "for", "_", "in", "pgb", ":", "\n", "        ", "cur_step", "=", "sess", ".", "run", "(", "global_step", ")", "\n", "pgb", ".", "set_description", "(", "str", "(", "cur_step", ")", ")", "\n", "cur_metrics", "=", "sess", ".", "run", "(", "metrics", ")", "\n", "for", "i", ",", "metric", ",", "method", "in", "zip", "(", "range", "(", "len", "(", "ans", ")", ")", ",", "cur_metrics", ",", "methods", ")", ":", "\n", "            ", "if", "method", "==", "'ALL'", ":", "\n", "                ", "ans", "[", "i", "]", ".", "append", "(", "metric", ")", "\n", "", "elif", "method", "==", "'MEAN'", ":", "\n", "                ", "ans", "[", "i", "]", "+=", "metric", "/", "step_cnt", "\n", "", "elif", "method", "==", "'SUM'", ":", "\n", "                ", "ans", "[", "i", "]", "+=", "metric", "\n", "", "elif", "method", "==", "'LAST'", ":", "\n", "                ", "ans", "[", "i", "]", "=", "metric", "\n", "", "elif", "method", "==", "'NONE'", ":", "\n", "                ", "pass", "\n", "", "", "", "return", "[", "ans", "[", ":", "len", "(", "sealed_metrics", ")", "]", "]", "+", "ans", "[", "len", "(", "sealed_metrics", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.load_data": [[49, 88], ["print", "str", "print", "str", "data.build_dataset", "print", "str", "str", "trainset.batch.repeat", "devset.batch.repeat", "testset.batch.repeat", "trainset.batch.shuffle", "trainset.batch.batch", "devset.batch.batch", "testset.batch.batch", "str"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.None.data.build_dataset"], ["", "def", "load_data", "(", "dataset", ",", "drop", ",", "emb_dim", ",", "batch_size", ",", "max_doc_len", ",", "\n", "max_sen_len", ",", "repeat", ",", "split_by_period", ",", "shuffle_train", "=", "True", ")", ":", "\n", "# Load data", "\n", "    ", "print", "(", "\"Loading data...\"", ")", "\n", "datasets", "=", "[", "str", "(", "root", "/", "'data'", "/", "dataset", "/", "s", ")", "\n", "for", "s", "in", "[", "'train.ss'", ",", "'dev.ss'", ",", "'test.ss'", "]", "\n", "]", "\n", "tfrecords", "=", "[", "str", "(", "root", "/", "'data'", "/", "dataset", "/", "'tfrecords'", "/", "s", ")", "\n", "for", "s", "in", "[", "'train.tfrecord'", ",", "'dev.tfrecord'", ",", "'test.tfrecord'", "]", "\n", "]", "\n", "stats_filename", "=", "str", "(", "root", "/", "'data'", "/", "dataset", "/", "'stats'", "/", "(", "'stats.txt'", "+", "str", "(", "drop", ")", ")", ")", "\n", "embedding_filename", "=", "'data/embedding_imdb_yelp13_elc_cd_clt.txt'", "\n", "# if dataset in ['yelp13', 'imdb']:", "\n", "#     embedding_filename = 'data/embedding_imdb_yelp13.txt'", "\n", "# elif dataset in ['cd', 'elc']:", "\n", "#     embedding_filename = 'data/embedding_cd_elc.txt'", "\n", "print", "(", "embedding_filename", ")", "\n", "text_filename", "=", "str", "(", "root", "/", "'data'", "/", "dataset", "/", "'word2vec_train.ss'", ")", "\n", "datasets", ",", "lengths", ",", "embedding", ",", "stats", ",", "wrd_dict", "=", "data", ".", "build_dataset", "(", "\n", "datasets", ",", "tfrecords", ",", "stats_filename", ",", "embedding_filename", ",", "\n", "max_doc_len", ",", "max_sen_len", ",", "split_by_period", ",", "\n", "emb_dim", ",", "text_filename", ",", "drop", ")", "\n", "trainset", ",", "devset", ",", "testset", "=", "datasets", "\n", "trainlen", ",", "devlen", ",", "testlen", "=", "lengths", "\n", "#  trainlen *=  1 - flags.drop", "\n", "if", "repeat", ":", "\n", "        ", "trainset", "=", "trainset", ".", "repeat", "(", ")", "\n", "devset", "=", "devset", ".", "repeat", "(", ")", "\n", "testset", "=", "testset", ".", "repeat", "(", ")", "\n", "", "if", "shuffle_train", ":", "\n", "        ", "trainset", "=", "trainset", ".", "shuffle", "(", "30000", ")", "\n", "", "devset", "=", "devset", "\n", "testset", "=", "testset", "\n", "if", "batch_size", "!=", "1", ":", "\n", "        ", "trainset", "=", "trainset", ".", "batch", "(", "batch_size", ")", "\n", "devset", "=", "devset", ".", "batch", "(", "batch_size", ")", "\n", "testset", "=", "testset", ".", "batch", "(", "batch_size", ")", "\n", "", "print", "(", "\"Data loaded.\"", ")", "\n", "return", "embedding", ",", "trainset", ",", "devset", ",", "testset", ",", "trainlen", ",", "devlen", ",", "testlen", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.get_step_cnt": [[90, 92], ["int", "math.ceil", "float"], "function", ["None"], ["", "def", "get_step_cnt", "(", "datalen", ",", "batch_size", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "datalen", ")", "/", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.get_variables_to_restore": [[94, 103], ["print", "variables_to_restore.append", "v.name.split"], "function", ["None"], ["", "def", "get_variables_to_restore", "(", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "variables_to_restore", "=", "[", "]", "\n", "for", "v", "in", "variables", ":", "\n", "# one can do include or exclude operations here.", "\n", "        ", "if", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "in", "var_keep_dic", ":", "\n", "            ", "print", "(", "\"Variables restored: %s\"", "%", "v", ".", "name", ")", "\n", "variables_to_restore", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "variables_to_restore", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.get_variable_in_checkpoint_file": [[105, 109], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "list", "reader.get_variable_to_shape_map.keys"], "function", ["None"], ["", "def", "get_variable_in_checkpoint_file", "(", "checkpoint_path", ")", ":", "\n", "    ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "checkpoint_path", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "return", "list", "(", "var_to_shape_map", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.utils.get_train_op": [[111, 128], ["optimizer.compute_gradients", "optimizer.apply_gradients", "capped_grads_and_vars.append", "tensorflow.IndexedSlices"], "function", ["None"], ["", "def", "get_train_op", "(", "optimizer", ",", "loss", ",", "wrd_emb", ",", "global_step", ",", "embedding_lr", ")", ":", "\n", "    ", "\"\"\"\n    get the training operation of a model with word embedding,\n    the grad of word embedding will be scaled according to embedding_lr\n    \"\"\"", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "loss", ")", "\n", "capped_grads_and_vars", "=", "[", "]", "\n", "\n", "for", "grad", ",", "v", "in", "grads_and_vars", ":", "\n", "        ", "if", "v", "is", "wrd_emb", ":", "\n", "            ", "grad", "=", "tf", ".", "IndexedSlices", "(", "grad", ".", "values", "*", "embedding_lr", ",", "grad", ".", "indices", ",", "\n", "grad", ".", "dense_shape", ")", "\n", "", "capped_grads_and_vars", ".", "append", "(", "(", "grad", ",", "v", ")", ")", "\n", "\n", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "capped_grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.dann.DANN.__init__": [[11, 31], ["tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "layers.nscla.NSCLA"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'model_share'", ")", ":", "\n", "            ", "self", ".", "model_share", "=", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", "\n", "", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.dann.DANN.build": [[32, 68], ["data_iter.get_next", "dann.DANN.model_share.build", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.layers.dense", "ssce", "tensorflow.where", "tensorflow.variable_scope", "utils.flip_gradient", "tensorflow.layers.dense", "ssce", "tensorflow.variable_scope", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.equal", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.zeros_like", "tensorflow.square", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build"], ["", "def", "build", "(", "self", ",", "data_iter", ",", "global_step", ")", ":", "\n", "        ", "input_map", "=", "data_iter", ".", "get_next", "(", ")", "\n", "self", ".", "input_map", "=", "input_map", "\n", "input_y", "=", "input_map", "[", "'rating'", "]", "\n", "task_label", "=", "input_map", "[", "'task_label'", "]", "\n", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "feature_share", "=", "self", ".", "model_share", ".", "build", "(", "input_map", ")", "\n", "# this part is trained for the unlabeled dataset which could only leverage the shared part of the model", "\n", "with", "tf", ".", "variable_scope", "(", "\"loss_share\"", ")", ":", "\n", "#  feature = stop(feature_share)", "\n", "            ", "feature", "=", "feature_share", "\n", "logit_share", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "loss_share", "=", "ssce", "(", "logits", "=", "logit_share", ",", "labels", "=", "input_y", ")", "\n", "loss_share", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "loss_share", ",", "tf", ".", "zeros_like", "(", "loss_share", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss_adv'", ")", ":", "\n", "            ", "feature", "=", "flip_gradient", "(", "feature_share", ",", "0.005", ")", "\n", "task_logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "task_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "task_logit_dis", "=", "task_logit", "\n", "loss_adv", "=", "ssce", "(", "logits", "=", "task_logit", ",", "labels", "=", "task_label", ")", "\n", "\n", "", "total_loss", "=", "loss_adv", "+", "loss_share", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "total_loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "task_pred", "=", "tf", ".", "argmax", "(", "task_logit_dis", ",", "1", ")", "\n", "pred_share", "=", "tf", ".", "argmax", "(", "logit_share", ",", "1", ")", "\n", "task_correct_pred", "=", "tf", ".", "equal", "(", "task_pred", ",", "task_label", ")", "\n", "correct_pred_share", "=", "tf", ".", "equal", "(", "pred_share", ",", "input_y", ")", "\n", "mse_share", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred_share", "-", "input_y", ")", ")", "\n", "correct_num_share", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_pred_share", ")", ")", "\n", "task_correct_num", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred", ")", ")", "\n", "\n", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", ",", "(", "mse_share", ",", "'SUM'", ")", ",", "\n", "(", "correct_num_share", ",", "'SUM'", ")", ",", "(", "task_correct_num", ",", "'SUM'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.dann.DANN.output_metrics": [[69, 76], ["math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", ",", "mse_share", ",", "correct_num_share", ",", "task_correct_num", "=", "metrics", "\n", "info", "=", "'Mshare: Loss = %.3f, RMSE = %.3f, Acc = %.3f\\n'", "%", "(", "loss", "/", "data_length", ",", "sqrt", "(", "float", "(", "mse_share", ")", "/", "data_length", ")", ",", "float", "(", "correct_num_share", ")", "/", "data_length", ")", "\n", "info", "+=", "'Discri: Acc = %.3f\\n'", "%", "(", "float", "(", "task_correct_num", ")", "/", "data_length", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.dann.DANN.record_metrics": [[77, 93], ["math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_loss", ",", "dev_mse_share", ",", "dev_correct_num_share", ",", "dev_task_correct_num", "=", "dev_metrics", "\n", "test_loss", ",", "test_mse_share", ",", "test_correct_num_share", ",", "test_task_correct_num", "=", "test_metrics", "\n", "dev_accuracy", "=", "float", "(", "dev_correct_num_share", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num_share", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse_share", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "            ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "info", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "            ", "info", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.dann.DANN.train": [[94, 107], ["optimizer.compute_gradients", "optimizer.apply_gradients", "capped_grads_and_vars.append", "tensorflow.IndexedSlices"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "optimizer", ",", "global_step", ")", ":", "\n", "        ", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "capped_grads_and_vars", "=", "[", "]", "\n", "\n", "for", "grad", ",", "v", "in", "grads_and_vars", ":", "\n", "            ", "if", "v", "is", "self", ".", "model_share", ".", "wrd_emb", ":", "\n", "                ", "grad", "=", "tf", ".", "IndexedSlices", "(", "grad", ".", "values", "*", "self", ".", "embedding_lr", ",", "\n", "grad", ".", "indices", ",", "grad", ".", "dense_shape", ")", "\n", "", "capped_grads_and_vars", ".", "append", "(", "(", "grad", ",", "v", ")", ")", "\n", "\n", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "capped_grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "return", "train_op", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml4.ML4.__init__": [[11, 35], ["tensorflow.constant", "range", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "ml4.ML4.model.append", "layers.nscla.NSCLA"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "wrd_emb", "=", "const", "(", "self", ".", "embedding", ",", "name", "=", "'wrd_emb'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "model_cnt", "=", "4", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "self", ".", "temperature", "=", "args", "[", "'temperature'", "]", "\n", "self", ".", "align_rate", "=", "args", "[", "'align_rate'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "self", ".", "best_test_acc", "=", "0.", "\n", "self", ".", "best_dev_acc", "=", "0.", "\n", "self", ".", "best_test_rmse", "=", "0.", "\n", "self", ".", "hidden_size", "=", "args", "[", "'emb_dim'", "]", "\n", "\n", "self", ".", "model", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'model{i}'", ")", ":", "\n", "                ", "self", ".", "model", ".", "append", "(", "NSCLA", "(", "args", ",", "self", ".", "wrd_emb", ")", ")", "\n", "\n", "# initializers for parameters", "\n", "", "", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml4.ML4.build": [[36, 126], ["data_iter.get_next", "tensorflow.one_hot", "range", "range", "range", "tensorflow.reduce_sum", "range", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.layers.dense", "soft_logits.append", "range", "sce", "tensorflow.where", "zip", "utils.flip_gradient", "tensorflow.layers.dense", "ssce", "sum", "sum", "preds.append", "correct_preds.append", "correct_nums.append", "mses.append", "tensorflow.variable_scope", "range", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.variable_scope", "features.append", "logits.append", "soft_labels.append", "soft_logits[].append", "tensorflow.equal", "zeros_like", "sce", "tensorflow.where", "tensorflow.variable_scope", "losses.append", "tensorflow.variable_scope", "ml4.ML4.build.get_loss_adv"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "data_iter", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        build the whole model from a input iterator,\n        global step is not used, it's here just to fit the training code\n        \"\"\"", "\n", "# define aliases", "\n", "ones_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "ones_like", "(", "x", ")", ")", "\n", "zeros_like", "=", "lambda", "x", ":", "tf", ".", "to_float", "(", "tf", ".", "zeros_like", "(", "x", ")", ")", "\n", "ssce", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "\n", "sce", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "\n", "dense", "=", "lambda", "feature", ",", "cls_cnt", ":", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "cls_cnt", ",", "kernel_initializer", "=", "self", ".", "w_init", ",", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "\n", "input_map", "=", "data_iter", ".", "get_next", "(", ")", "\n", "\n", "rating", "=", "input_map", "[", "'rating'", "]", "\n", "hard_label", "=", "tf", ".", "one_hot", "(", "rating", ",", "self", ".", "cls_cnt", ")", "\n", "task_label", "=", "input_map", "[", "'task_label'", "]", "\n", "\n", "features", "=", "[", "]", "\n", "logits", "=", "[", "]", "\n", "soft_logits", "=", "[", "]", "\n", "soft_labels", "=", "[", "]", "\n", "# build the body of models", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f'model{i}'", ")", ":", "\n", "                ", "features", ".", "append", "(", "self", ".", "model", "[", "i", "]", ".", "build", "(", "input_map", ")", ")", "\n", "logits", ".", "append", "(", "dense", "(", "features", "[", "-", "1", "]", ",", "self", ".", "cls_cnt", ")", ")", "\n", "soft_labels", ".", "append", "(", "tf", ".", "nn", ".", "softmax", "(", "stop", "(", "logits", "[", "-", "1", "]", ")", "/", "self", ".", "temperature", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "soft_logits", ".", "append", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "model_cnt", "-", "1", ")", ":", "\n", "                ", "soft_logits", "[", "-", "1", "]", ".", "append", "(", "dense", "(", "features", "[", "i", "]", ",", "self", ".", "cls_cnt", ")", ")", "\n", "\n", "# obtain the loss", "\n", "", "", "def", "get_loss", "(", "logits", ",", "soft_logits", ",", "labels", ",", "soft_labels", ",", "task_label", ")", ":", "\n", "            ", "loss_truth", "=", "sce", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss_truth", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "loss_truth", ",", "zeros_like", "(", "loss_truth", ")", ")", "\n", "for", "slo", ",", "sla", "in", "zip", "(", "soft_logits", ",", "soft_labels", ")", ":", "\n", "                ", "loss_soft", "=", "sce", "(", "logits", "=", "slo", ",", "labels", "=", "sla", ")", "\n", "loss_soft", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "task_label", ",", "0", ")", ",", "zeros_like", "(", "loss_soft", ")", ",", "loss_soft", ")", "\n", "loss_truth", "+=", "self", ".", "align_rate", "*", "loss_soft", "\n", "", "return", "loss_truth", "\n", "\n", "", "def", "get_loss_adv", "(", "feature", ",", "task_label", ")", ":", "\n", "            ", "feature", "=", "flip_gradient", "(", "feature", ",", "0.005", ")", "\n", "task_logit", "=", "tf", ".", "layers", ".", "dense", "(", "feature", ",", "self", ".", "task_cnt", ")", "\n", "task_logit_dis", "=", "task_logit", "\n", "loss_adv", "=", "ssce", "(", "logits", "=", "task_logit", ",", "labels", "=", "task_label", ")", "\n", "return", "loss_adv", ",", "task_logit_dis", "\n", "\n", "", "losses", "=", "[", "]", "\n", "losses_adv", "=", "[", "]", "\n", "task_logits_dis", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "f\"loss{i}\"", ")", ":", "\n", "                ", "losses", ".", "append", "(", "get_loss", "(", "logits", "[", "i", "]", ",", "soft_logits", "[", "i", "]", ",", "hard_label", ",", "\n", "[", "sl", "for", "j", ",", "sl", "in", "enumerate", "(", "soft_labels", ")", "if", "i", "!=", "j", "]", ",", "\n", "task_label", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "f\"loss_adv{i}\"", ")", ":", "\n", "                ", "cur_loss_adv", ",", "cur_task_logit_dis", "=", "get_loss_adv", "(", "features", "[", "i", "]", ",", "task_label", ")", "\n", "losses_adv", ".", "append", "(", "cur_loss_adv", ")", "\n", "task_logits_dis", ".", "append", "(", "cur_task_logit_dis", ")", "\n", "\n", "", "", "total_loss", "=", "sum", "(", "losses", ")", "+", "sum", "(", "losses_adv", ")", "\n", "total_loss", "=", "tf", ".", "reduce_sum", "(", "total_loss", ")", "\n", "self", ".", "loss", "=", "total_loss", "\n", "\n", "# metrics", "\n", "preds", "=", "[", "]", "\n", "correct_nums", "=", "[", "]", "\n", "correct_preds", "=", "[", "]", "\n", "mses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "            ", "preds", ".", "append", "(", "tf", ".", "argmax", "(", "logits", "[", "i", "]", ",", "1", ")", ")", "\n", "correct_preds", ".", "append", "(", "tf", ".", "equal", "(", "preds", "[", "i", "]", ",", "rating", ")", ")", "\n", "correct_nums", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "correct_preds", "[", "i", "]", ")", ")", ")", "\n", "mses", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "preds", "[", "i", "]", "-", "rating", ")", ")", ")", "\n", "\n", "", "task_pred", "=", "[", "]", "\n", "task_correct_pred", "=", "[", "]", "\n", "task_correct_nums", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"metrics\"", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "model_cnt", ")", ":", "\n", "                ", "task_pred", ".", "append", "(", "tf", ".", "argmax", "(", "task_logits_dis", "[", "i", "]", ",", "1", ")", ")", "\n", "task_correct_pred", ".", "append", "(", "tf", ".", "equal", "(", "task_pred", "[", "i", "]", ",", "task_label", ")", ")", "\n", "task_correct_nums", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "to_int32", "(", "task_correct_pred", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "", "return", "[", "(", "total_loss", ",", "'SUM'", ")", "]", "+", "[", "(", "mse", ",", "'SUM'", ")", "for", "mse", "in", "mses", "]", "+", "[", "(", "correct_num", ",", "'SUM'", ")", "for", "correct_num", "in", "correct_nums", "]", "+", "[", "(", "task_correct_num", ",", "'SUM'", ")", "for", "task_correct_num", "in", "task_correct_nums", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml4.ML4.output_metrics": [[127, 139], ["enumerate", "zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "output_metrics", "(", "self", ",", "metrics", ",", "data_length", ")", ":", "\n", "        ", "loss", "=", "metrics", "[", "0", "]", "\n", "mses", "=", "metrics", "[", "1", ":", "1", "+", "self", ".", "model_cnt", "]", "\n", "correct_nums", "=", "metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "task_correct_nums", "=", "metrics", "[", "1", "+", "2", "*", "self", ".", "model_cnt", ":", "1", "+", "3", "*", "self", ".", "model_cnt", "]", "\n", "info", "=", "''", "\n", "for", "i", ",", "(", "mse", ",", "correct_num", ",", "task_correct_num", ")", "in", "enumerate", "(", "zip", "(", "mses", ",", "correct_nums", ",", "task_correct_nums", ")", ")", ":", "\n", "            ", "info", "+=", "f'M{i}: Loss= {loss / data_length:.3f}, '", "\n", "info", "+=", "f'RMSE= {sqrt(float(mse) / data_length):.3f}, '", "\n", "info", "+=", "f'Acc= {float(correct_num) / data_length:.3f} '", "\n", "info", "+=", "f'DiscriAcc= {float(task_correct_num) / data_length:.3f}\\n'", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.None.ml4.ML4.record_metrics": [[140, 161], ["zip", "math.sqrt", "float", "float", "float"], "methods", ["None"], ["", "def", "record_metrics", "(", "self", ",", "dev_metrics", ",", "test_metrics", ",", "devlen", ",", "testlen", ")", ":", "\n", "        ", "dev_correct_nums", "=", "dev_metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "test_mses", "=", "test_metrics", "[", "1", ":", "1", "+", "self", ".", "model_cnt", "]", "\n", "test_correct_nums", "=", "test_metrics", "[", "1", "+", "self", ".", "model_cnt", ":", "1", "+", "2", "*", "self", ".", "model_cnt", "]", "\n", "info", "=", "''", "\n", "for", "dev_correct_num", ",", "test_mse", ",", "test_correct_num", "in", "zip", "(", "dev_correct_nums", ",", "test_mses", ",", "test_correct_nums", ")", ":", "\n", "            ", "dev_accuracy", "=", "float", "(", "dev_correct_num", ")", "/", "devlen", "\n", "test_accuracy", "=", "float", "(", "test_correct_num", ")", "/", "testlen", "\n", "test_rmse", "=", "sqrt", "(", "float", "(", "test_mse", ")", "/", "testlen", ")", "\n", "if", "dev_accuracy", ">", "self", ".", "best_dev_acc", ":", "\n", "                ", "self", ".", "best_dev_acc", "=", "dev_accuracy", "\n", "self", ".", "best_test_acc", "=", "test_accuracy", "\n", "self", ".", "best_test_rmse", "=", "test_rmse", "\n", "curinfo", "=", "'NEW best dev acc: %.3f, NEW best test acc: %.3f, NEW best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "else", ":", "\n", "                ", "curinfo", "=", "'best dev acc: %.3f, best test acc: %.3f, best test RMSE: %.3f'", "%", "(", "self", ".", "best_dev_acc", ",", "self", ".", "best_test_acc", ",", "self", ".", "best_test_rmse", ")", "\n", "", "if", "not", "info", "or", "'NEW'", "in", "curinfo", ":", "\n", "                ", "info", "=", "curinfo", "\n", "", "", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.huapa.HUAPA.__init__": [[12, 41], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "huapa.var", "huapa.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "self", ".", "emb_dim", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "self", ".", "lambda1", "=", "args", "[", "'lambda1'", "]", "\n", "self", ".", "lambda2", "=", "args", "[", "'lambda2'", "]", "\n", "self", ".", "lambda3", "=", "args", "[", "'lambda3'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n", "# embeddings in the model", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "usr_emb", "=", "var", "(", "'usr_emb'", ",", "[", "self", ".", "usr_cnt", ",", "self", ".", "emb_dim", "]", ",", "self", ".", "e_init", ")", "\n", "self", ".", "prd_emb", "=", "var", "(", "'prd_emb'", ",", "[", "self", ".", "prd_cnt", ",", "self", ".", "emb_dim", "]", ",", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "usr_emb", ",", "self", ".", "prd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.huapa.HUAPA.dnsc": [[42, 90], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "huapa.HUAPA.dnsc.lstm"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm"], ["", "def", "dnsc", "(", "self", ",", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "doc_len", ",", "identities", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ")", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "return", "outputs", ",", "state", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, self.hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, self.hidden_size])", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "x", ",", "sen_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "\n", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "sen_bkg", "=", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "bkg", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "max_doc_len", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", "for", "bkg", "in", "identities", "\n", "]", "\n", "sen_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "sen_bkg", "[", "0", "]", ",", "\n", "sen_bkg", "[", "1", ":", "]", ",", "sen_len", ",", "max_sen_len", ",", "''", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "sen_bkg", ",", "[", "-", "1", ",", "max_doc_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, self.hidden_size, 'lstm')", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "outputs", ",", "doc_len", ",", "self", ".", "hidden_size", ",", "\n", "'lstm_bkg'", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "doc_bkg", "=", "[", "i", "for", "i", "in", "identities", "]", "\n", "doc_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "doc_bkg", "[", "0", "]", ",", "\n", "doc_bkg", "[", "1", ":", "]", ",", "doc_len", ",", "max_doc_len", ",", "''", ")", "\n", "", "outputs", "=", "doc_bkg", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.huapa.HUAPA.build": [[91, 128], ["zip", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.variable_scope", "huapa.HUAPA.dnsc", "tensorflow.concat.append", "tensorflow.variable_scope", "d_hats.append", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "# get the inputs", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "usrid", ",", "prdid", ",", "input_x", ",", "sen_len", ",", "doc_len", "=", "(", "input_map", "[", "'usr'", "]", ",", "input_map", "[", "'prd'", "]", ",", "\n", "input_map", "[", "'content'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ")", "\n", "\n", "usr", "=", "lookup", "(", "self", ".", "usr_emb", ",", "usrid", ",", "name", "=", "'cur_usr_embedding'", ")", "\n", "prd", "=", "lookup", "(", "self", ".", "prd_emb", ",", "prdid", ",", "name", "=", "'cur_prd_embedding'", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ",", "name", "=", "'cur_wrd_embedding'", ")", "\n", "\n", "", "logits", ",", "d_hats", "=", "[", "]", ",", "[", "]", "\n", "for", "scope", ",", "identities", "in", "zip", "(", "[", "'user_block'", ",", "'product_block'", "]", ",", "\n", "[", "[", "usr", "]", ",", "[", "prd", "]", "]", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "logit", "=", "self", ".", "dnsc", "(", "input_x", ",", "self", ".", "max_sen_len", ",", "self", ".", "max_doc_len", ",", "\n", "sen_len", ",", "doc_len", ",", "identities", ")", "\n", "logits", ".", "append", "(", "logit", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'result'", ")", ":", "\n", "                    ", "d_hats", ".", "append", "(", "\n", "tf", ".", "layers", ".", "dense", "(", "\n", "logit", ",", "\n", "self", ".", "cls_cnt", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", ")", "\n", "\n", "", "", "", "with", "tf", ".", "variable_scope", "(", "'result'", ")", ":", "\n", "            ", "logits", "=", "tf", ".", "concat", "(", "logits", ",", "axis", "=", "1", ",", "name", "=", "'huapa_output'", ")", "\n", "d_hat", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "logits", ",", "\n", "self", ".", "cls_cnt", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "\n", "", "return", "d_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.huapa.var": [[7, 9], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.amhnsc.AMHNSC.__init__": [[15, 50], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "amhnsc.var", "amhnsc.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "args", "[", "'hidden_size'", "]", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "doc_cnt", "=", "args", "[", "'doc_cnt'", "]", "\n", "self", ".", "sen_hop_cnt", "=", "args", "[", "'sen_hop_cnt'", "]", "\n", "self", ".", "doc_hop_cnt", "=", "args", "[", "'doc_hop_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "convert_flag", "=", "''", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "self", ".", "lambda1", "=", "args", "[", "'lambda1'", "]", "\n", "self", ".", "lambda2", "=", "args", "[", "'lambda2'", "]", "\n", "self", ".", "lambda3", "=", "args", "[", "'lambda3'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "usr_emb", "=", "var", "(", "'usr_emb'", ",", "[", "self", ".", "usr_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "prd_emb", "=", "var", "(", "'prd_emb'", ",", "[", "self", ".", "prd_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "usr_emb", ",", "self", ".", "prd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.amhnsc.AMHNSC.build": [[51, 156], ["functools.partial", "functools.partial", "functools.partial", "amhnsc.AMHNSC.build.pad_context"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "        ", "transform", "=", "partial", "(", "\n", "tf", ".", "layers", ".", "dense", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "dense", "=", "partial", "(", "\n", "tf", ".", "layers", ".", "dense", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "lstm_cell", "=", "partial", "(", "\n", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", ",", "\n", "self", ".", "hidden_size", "//", "2", ",", "\n", "forget_bias", "=", "0.", ",", "\n", "initializer", "=", "self", ".", "w_init", ")", "\n", "\n", "def", "pad_context", "(", "context", ",", "input_x", ")", ":", "\n", "            ", "\"\"\" padding content with context embedding \"\"\"", "\n", "tiled_context", "=", "transform", "(", "context", ",", "self", ".", "emb_dim", ")", "\n", "tiled_context", "=", "tf", ".", "tile", "(", "tiled_context", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "\n", "[", "1", ",", "self", ".", "max_doc_len", ",", "1", ",", "1", "]", ")", "\n", "input_x", "=", "tf", ".", "reshape", "(", "\n", "input_x", ",", "\n", "[", "-", "1", ",", "self", ".", "max_doc_len", ",", "self", ".", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "input_x", "=", "tf", ".", "concat", "(", "[", "tiled_context", ",", "input_x", "]", ",", "axis", "=", "2", ")", "\n", "input_x", "=", "tf", ".", "reshape", "(", "input_x", ",", "\n", "[", "-", "1", ",", "self", ".", "max_sen_len", "+", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "return", "input_x", "\n", "\n", "# get the inputs", "\n", "", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "usrid", ",", "prdid", ",", "input_x", ",", "input_y", ",", "sen_len", ",", "doc_len", ",", "docid", "=", "(", "input_map", "[", "'usr'", "]", ",", "input_map", "[", "'prd'", "]", ",", "\n", "input_map", "[", "'content'", "]", ",", "input_map", "[", "'rating'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ",", "\n", "input_map", "[", "'docid'", "]", ")", "\n", "\n", "usr", "=", "lookup", "(", "self", ".", "usr_emb", ",", "usrid", ")", "\n", "prd", "=", "lookup", "(", "self", ".", "prd_emb", ",", "prdid", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ")", "\n", "\n", "", "nscua_input_x", "=", "pad_context", "(", "usr", ",", "input_x", ")", "\n", "nscpa_input_x", "=", "pad_context", "(", "prd", ",", "input_x", ")", "\n", "\n", "sen_len", "=", "tf", ".", "where", "(", "\n", "tf", ".", "equal", "(", "sen_len", ",", "0", ")", ",", "tf", ".", "zeros_like", "(", "sen_len", ")", ",", "sen_len", "+", "1", ")", "\n", "self", ".", "max_sen_len", "+=", "1", "\n", "\n", "# build the process of model", "\n", "sen_embs", ",", "doc_embs", "=", "[", "]", ",", "[", "]", "\n", "sen_cell_fw", "=", "lstm_cell", "(", ")", "\n", "sen_cell_bw", "=", "lstm_cell", "(", ")", "\n", "for", "scope", ",", "identities", ",", "input_x", ",", "attention_type", "in", "zip", "(", "\n", "[", "'user_block'", ",", "'product_block'", "]", ",", "[", "[", "usr", "]", ",", "[", "prd", "]", "]", ",", "\n", "[", "nscua_input_x", ",", "nscpa_input_x", "]", ",", "[", "'additive'", ",", "'additive'", "]", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "sen_emb", "=", "nsc_sentence_layer", "(", "\n", "input_x", ",", "\n", "self", ".", "max_sen_len", ",", "\n", "self", ".", "max_doc_len", ",", "\n", "sen_len", ",", "\n", "identities", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_dim", ",", "\n", "self", ".", "sen_hop_cnt", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "[", "sen_cell_fw", ",", "sen_cell_bw", "]", ",", "\n", "auged", "=", "True", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "sen_embs", ".", "append", "(", "sen_emb", ")", "\n", "\n", "", "", "sen_embs", "=", "tf", ".", "concat", "(", "sen_embs", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# padding doc with user and product embeddings", "\n", "doc_aug_usr", "=", "transform", "(", "usr", ",", "2", "*", "self", ".", "hidden_size", ")", "\n", "nscua_sen_embs", "=", "tf", ".", "concat", "(", "[", "doc_aug_usr", "[", ":", ",", "None", ",", ":", "]", ",", "sen_embs", "]", ",", "axis", "=", "1", ")", "\n", "doc_aug_prd", "=", "transform", "(", "prd", ",", "2", "*", "self", ".", "hidden_size", ")", "\n", "nscpa_sen_embs", "=", "tf", ".", "concat", "(", "[", "doc_aug_prd", "[", ":", ",", "None", ",", ":", "]", ",", "sen_embs", "]", ",", "axis", "=", "1", ")", "\n", "#  none_sen_embs = tf.pad(sen_embs, [[0, 0], [1, 0], [0, 0]])", "\n", "self", ".", "max_doc_len", "+=", "1", "\n", "doc_len", "=", "doc_len", "+", "1", "\n", "\n", "doc_cell_fw", "=", "lstm_cell", "(", ")", "\n", "doc_cell_bw", "=", "lstm_cell", "(", ")", "\n", "for", "scope", ",", "identities", ",", "input_x", ",", "attention_type", "in", "zip", "(", "\n", "[", "'user_block'", ",", "'product_block'", "]", ",", "[", "[", "usr", "]", ",", "[", "prd", "]", "]", ",", "\n", "[", "nscua_sen_embs", ",", "nscpa_sen_embs", "]", ",", "[", "'additive'", ",", "'additive'", "]", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "doc_emb", "=", "nsc_document_layer", "(", "\n", "input_x", ",", "\n", "self", ".", "max_doc_len", ",", "\n", "doc_len", ",", "\n", "identities", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "doc_hop_cnt", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "[", "doc_cell_fw", ",", "doc_cell_bw", "]", ",", "\n", "auged", "=", "True", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "doc_embs", ".", "append", "(", "doc_emb", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'result'", ")", ":", "\n", "            ", "doc_emb", "=", "tf", ".", "concat", "(", "doc_embs", ",", "axis", "=", "1", ",", "name", "=", "'dhuapa_output'", ")", "\n", "logit", "=", "dense", "(", "doc_emb", ",", "self", ".", "cls_cnt", ")", "\n", "", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.amhnsc.var": [[10, 12], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscua.NSCUA.__init__": [[13, 38], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "nscua.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "self", ".", "emb_dim", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n", "# embeddings in the model", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "usr_emb", "=", "var", "(", "'usr_emb'", ",", "[", "self", ".", "usr_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "usr_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscua.NSCUA.dnsc": [[39, 87], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "nscua.NSCUA.dnsc.lstm"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm"], ["", "def", "dnsc", "(", "self", ",", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "doc_len", ",", "identities", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ")", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "return", "outputs", ",", "state", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, self.hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, self.hidden_size])", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "x", ",", "sen_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "\n", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "sen_bkg", "=", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "bkg", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "max_doc_len", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", "for", "bkg", "in", "identities", "\n", "]", "\n", "sen_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "sen_bkg", "[", "0", "]", ",", "\n", "sen_bkg", "[", "1", ":", "]", ",", "sen_len", ",", "max_sen_len", ",", "''", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "sen_bkg", ",", "[", "-", "1", ",", "max_doc_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, self.hidden_size, 'lstm')", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "outputs", ",", "doc_len", ",", "self", ".", "hidden_size", ",", "\n", "'lstm_bkg'", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "doc_bkg", "=", "[", "i", "for", "i", "in", "identities", "]", "\n", "doc_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "doc_bkg", "[", "0", "]", ",", "\n", "doc_bkg", "[", "1", ":", "]", ",", "doc_len", ",", "max_doc_len", ",", "''", ")", "\n", "", "outputs", "=", "doc_bkg", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscua.NSCUA.build": [[88, 106], ["nscua.NSCUA.dnsc", "tensorflow.layers.dense", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "# get the inputs", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "usrid", ",", "input_x", ",", "sen_len", ",", "doc_len", "=", "(", "input_map", "[", "'usr'", "]", ",", "input_map", "[", "'content'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ")", "\n", "\n", "usr", "=", "lookup", "(", "self", ".", "usr_emb", ",", "usrid", ",", "name", "=", "'cur_usr_embedding'", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ",", "name", "=", "'cur_wrd_embedding'", ")", "\n", "\n", "", "logit", "=", "self", ".", "dnsc", "(", "input_x", ",", "self", ".", "max_sen_len", ",", "self", ".", "max_doc_len", ",", "sen_len", ",", "\n", "doc_len", ",", "[", "usr", "]", ")", "\n", "logit", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "logit", ",", "\n", "self", ".", "cls_cnt", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscua.var": [[8, 10], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscla.NSCLA.__init__": [[12, 37], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "self", ".", "emb_dim", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "self", ".", "task_cnt", "=", "args", "[", "'task_cnt'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n", "# embeddings in the model", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscla.NSCLA.dnsc": [[38, 108], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.rnn_cell.LSTMStateTuple", "tensorflow.nn.rnn_cell.LSTMStateTuple", "nscla.NSCLA.dnsc.lstm"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm"], ["", "def", "dnsc", "(", "self", ",", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "doc_len", ",", "task_label", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ",", "init_state", ")", ":", "\n", "            ", "init_state_fw", ",", "init_state_bw", "=", "init_state", "\n", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "initial_state_fw", "=", "init_state_fw", ",", "\n", "initial_state_bw", "=", "init_state_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "return", "outputs", ",", "state", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, self.hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, self.hidden_size])", "\n", "            ", "sen_task_label", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "task_label", "[", ":", ",", "None", "]", ",", "[", "1", ",", "max_doc_len", "]", ")", ",", "[", "-", "1", "]", ")", "\n", "sen_init_state", "=", "tf", ".", "get_variable", "(", "'sen_init_state'", ",", "[", "self", ".", "task_cnt", ",", "2", "*", "self", ".", "hidden_size", "]", ")", "\n", "sen_init_state", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "sen_init_state", ",", "sen_task_label", ")", "\n", "sen_init_state_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "sen_init_state", "[", ":", ",", ":", "self", ".", "hidden_size", "//", "2", "]", ",", "sen_init_state", "[", ":", ",", "self", ".", "hidden_size", "//", "2", ":", "self", ".", "hidden_size", "]", ")", "\n", "sen_init_state_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "sen_init_state", "[", ":", ",", "self", ".", "hidden_size", ":", "self", ".", "hidden_size", "*", "3", "//", "2", "]", ",", "sen_init_state", "[", ":", ",", "self", ".", "hidden_size", "*", "3", "//", "2", ":", "]", ")", "\n", "sen_init_state", "=", "(", "sen_init_state_fw", ",", "sen_init_state_bw", ")", "\n", "lstm_bkg", ",", "_state", "=", "lstm", "(", "x", ",", "sen_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ",", "sen_init_state", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "alphas", "=", "attention", "(", "\n", "lstm_bkg", ",", "[", "]", ",", "\n", "sen_len", ",", "\n", "max_sen_len", ",", "\n", "biases_initializer", "=", "self", ".", "b_init", ",", "\n", "weights_initializer", "=", "self", ".", "w_init", ")", "\n", "sen_bkg", "=", "alphas", "@", "lstm_outputs", "\n", "sen_bkg", "=", "tf", ".", "reshape", "(", "\n", "sen_bkg", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ",", "name", "=", "'new_bkg'", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "sen_bkg", ",", "[", "-", "1", ",", "max_doc_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "self", ".", "alphas", "=", "alphas", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, self.hidden_size, 'lstm')", "\n", "            ", "doc_task_label", "=", "task_label", "\n", "doc_init_state", "=", "tf", ".", "get_variable", "(", "'doc_init_state'", ",", "[", "self", ".", "task_cnt", ",", "2", "*", "self", ".", "hidden_size", "]", ")", "\n", "doc_init_state", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "doc_init_state", ",", "doc_task_label", ")", "\n", "doc_init_state_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "doc_init_state", "[", ":", ",", ":", "self", ".", "hidden_size", "//", "2", "]", ",", "doc_init_state", "[", ":", ",", "self", ".", "hidden_size", "//", "2", ":", "self", ".", "hidden_size", "]", ")", "\n", "doc_init_state_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "doc_init_state", "[", ":", ",", "self", ".", "hidden_size", ":", "self", ".", "hidden_size", "*", "3", "//", "2", "]", ",", "doc_init_state", "[", ":", ",", "self", ".", "hidden_size", "*", "3", "//", "2", ":", "]", ")", "\n", "doc_init_state", "=", "(", "doc_init_state_fw", ",", "doc_init_state_bw", ")", "\n", "lstm_bkg", ",", "_state", "=", "lstm", "(", "outputs", ",", "doc_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ",", "doc_init_state", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "alphas", "=", "attention", "(", "\n", "lstm_bkg", ",", "[", "]", ",", "\n", "doc_len", ",", "\n", "max_doc_len", ",", "\n", "biases_initializer", "=", "self", ".", "b_init", ",", "\n", "weights_initializer", "=", "self", ".", "w_init", ")", "\n", "doc_bkg", "=", "alphas", "@", "lstm_outputs", "\n", "doc_bkg", "=", "tf", ".", "reshape", "(", "\n", "doc_bkg", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ",", "name", "=", "'new_bkg'", ")", "\n", "", "outputs", "=", "doc_bkg", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscla.NSCLA.build": [[109, 123], ["nscla.NSCLA.dnsc", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc"], ["", "def", "build", "(", "self", ",", "input_map", ",", "seperate_encoder", "=", "False", ")", ":", "\n", "# get the inputs", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "input_x", ",", "sen_len", ",", "doc_len", ",", "task_label", "=", "(", "input_map", "[", "'content'", "]", ",", "input_map", "[", "'sen_len'", "]", ",", "\n", "input_map", "[", "'doc_len'", "]", ",", "input_map", "[", "'task_label'", "]", ")", "\n", "\n", "if", "not", "seperate_encoder", ":", "\n", "                ", "task_label", "=", "tf", ".", "zeros_like", "(", "task_label", ")", "\n", "", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ")", "\n", "\n", "", "feature", "=", "self", ".", "dnsc", "(", "input_x", ",", "self", ".", "max_sen_len", ",", "self", ".", "max_doc_len", ",", "sen_len", ",", "\n", "doc_len", ",", "task_label", ")", "\n", "return", "feature", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscla.var": [[7, 9], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nsc_document_layer.nsc_document_layer": [[7, 61], ["tensorflow.variable_scope", "layers.lstm.lstm", "range", "tensorflow.concat", "tf.concat.append", "layers.hop.hop", "layers.hop.hop"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.hop.hop", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.hop.hop"], ["def", "nsc_document_layer", "(", "x", ",", "\n", "max_doc_len", ",", "\n", "doc_len", ",", "\n", "identities", ",", "\n", "hidden_size", ",", "\n", "doc_hop_cnt", "=", "1", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "None", ",", "\n", "auged", "=", "False", ",", "\n", "attention_type", "=", "'additive'", ")", ":", "\n", "\n", "    ", "outputs", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, hidden_size, 'lstm')", "\n", "        ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "\n", "x", ",", "\n", "doc_len", ",", "\n", "hidden_size", ",", "\n", "'lstm_bkg'", ",", "\n", "bidirectional", "=", "bidirectional_lstm", ",", "\n", "lstm_cells", "=", "lstm_cells", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "doc_bkg", "=", "[", "i", "for", "i", "in", "identities", "]", "\n", "for", "ihop", "in", "range", "(", "doc_hop_cnt", ")", ":", "\n", "            ", "if", "doc_bkg", ":", "\n", "                ", "doc_bkg", "[", "0", "]", "=", "hop", "(", "\n", "'hop'", ",", "\n", "lstm_outputs", ",", "\n", "lstm_bkg", ",", "\n", "doc_bkg", "[", "0", "]", ",", "\n", "doc_bkg", "[", "1", ":", "]", ",", "\n", "doc_len", ",", "\n", "max_doc_len", ",", "\n", "''", ",", "\n", "auged", "=", "auged", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "output", "=", "doc_bkg", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "hop", "(", "\n", "'hop'", ",", "\n", "lstm_outputs", ",", "\n", "lstm_bkg", ",", "\n", "None", ",", "\n", "None", ",", "\n", "doc_len", ",", "\n", "max_doc_len", ",", "\n", "''", ",", "\n", "auged", "=", "auged", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscpa.NSCPA.__init__": [[13, 38], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "nscpa.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "self", ".", "emb_dim", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n", "# embeddings in the model", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "prd_emb", "=", "var", "(", "'prd_emb'", ",", "[", "self", ".", "prd_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "prd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscpa.NSCPA.dnsc": [[39, 87], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "nscpa.NSCPA.dnsc.lstm"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm"], ["", "def", "dnsc", "(", "self", ",", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "doc_len", ",", "identities", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ")", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "return", "outputs", ",", "state", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, self.hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, self.hidden_size])", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "x", ",", "sen_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "\n", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "sen_bkg", "=", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "bkg", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "max_doc_len", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", "for", "bkg", "in", "identities", "\n", "]", "\n", "sen_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "sen_bkg", "[", "0", "]", ",", "\n", "sen_bkg", "[", "1", ":", "]", ",", "sen_len", ",", "max_sen_len", ",", "''", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "sen_bkg", ",", "[", "-", "1", ",", "max_doc_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, self.hidden_size, 'lstm')", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "outputs", ",", "doc_len", ",", "self", ".", "hidden_size", ",", "\n", "'lstm_bkg'", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "doc_bkg", "=", "[", "i", "for", "i", "in", "identities", "]", "\n", "doc_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "doc_bkg", "[", "0", "]", ",", "\n", "doc_bkg", "[", "1", ":", "]", ",", "doc_len", ",", "max_doc_len", ",", "''", ")", "\n", "", "outputs", "=", "doc_bkg", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscpa.NSCPA.build": [[88, 106], ["nscpa.NSCPA.dnsc", "tensorflow.layers.dense", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "# get the inputs", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "prdid", ",", "input_x", ",", "sen_len", ",", "doc_len", "=", "(", "input_map", "[", "'prd'", "]", ",", "input_map", "[", "'content'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ")", "\n", "\n", "prd", "=", "lookup", "(", "self", ".", "prd_emb", ",", "prdid", ",", "name", "=", "'cur_prd_embedding'", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ",", "name", "=", "'cur_wrd_embedding'", ")", "\n", "\n", "", "logit", "=", "self", ".", "dnsc", "(", "input_x", ",", "self", ".", "max_sen_len", ",", "self", ".", "max_doc_len", ",", "sen_len", ",", "\n", "doc_len", ",", "[", "prd", "]", ")", "\n", "logit", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "logit", ",", "\n", "self", ".", "cls_cnt", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscpa.var": [[8, 10], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm": [[5, 36], ["tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.nn.dynamic_rnn", "tensorflow.concat", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ",", "bidirectional", "=", "True", ",", "lstm_cells", "=", "None", ")", ":", "\n", "    ", "if", "bidirectional", ":", "\n", "        ", "if", "lstm_cells", "is", "None", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "cell_fw", ",", "cell_bw", "=", "lstm_cells", "\n", "", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "if", "lstm_cells", "is", "None", ":", "\n", "            ", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "cell", "=", "lstm_cells", "\n", "", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "cell", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "", "return", "outputs", ",", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.attention.attention": [[5, 50], ["tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "enumerate", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.div", "tensorflow.get_variable", "tensorflow.sequence_mask", "tensorflow.pad", "tensorflow.sequence_mask", "tensorflow.reduce_sum", "isinstance", "tensorflow.variable_scope", "str", "str", "str"], "function", ["None"], ["def", "attention", "(", "h", ",", "\n", "bkg", ",", "\n", "doc_len", ",", "\n", "real_max_len", ",", "\n", "biases_initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "auged", "=", "False", ")", ":", "\n", "    ", "if", "bkg", "is", "None", ":", "\n", "        ", "bkg", "=", "[", "]", "\n", "", "max_len", "=", "h", ".", "shape", "[", "1", "]", "\n", "hidden_size", "=", "h", ".", "shape", "[", "2", "]", "\n", "\n", "# create variables", "\n", "wh", "=", "tf", ".", "get_variable", "(", "\n", "'wh'", ",", "[", "hidden_size", ",", "hidden_size", "]", ",", "initializer", "=", "weights_initializer", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "hidden_size", "]", ",", "initializer", "=", "biases_initializer", ")", "\n", "v", "=", "tf", ".", "get_variable", "(", "'v'", ",", "[", "hidden_size", ",", "1", "]", ",", "initializer", "=", "biases_initializer", ")", "\n", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "h", "=", "h", "@", "wh", "\n", "e", "=", "tf", ".", "reshape", "(", "h", "+", "b", ",", "[", "-", "1", ",", "max_len", ",", "hidden_size", "]", ")", "\n", "\n", "# add influences of background", "\n", "for", "n", ",", "bkgi", "in", "enumerate", "(", "bkg", "if", "isinstance", "(", "bkg", ",", "Iterable", ")", "else", "[", "bkg", "]", ")", ":", "\n", "        ", "wbkg", "=", "tf", ".", "get_variable", "(", "\n", "'wbkg'", "+", "str", "(", "n", ")", "+", "str", "(", "bkgi", ".", "shape", "[", "1", "]", ")", ",", "[", "bkgi", ".", "shape", "[", "1", "]", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "weights_initializer", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'attention'", "+", "str", "(", "n", ")", ")", ":", "\n", "            ", "e", "=", "e", "+", "(", "bkgi", "@", "wbkg", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "", "", "e", "=", "tf", ".", "tanh", "(", "e", ")", "\n", "e", "=", "tf", ".", "reshape", "(", "e", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "e", "=", "tf", ".", "reshape", "(", "e", "@", "v", ",", "[", "-", "1", ",", "real_max_len", "]", ")", "\n", "e", "=", "tf", ".", "nn", ".", "softmax", "(", "e", ",", "name", "=", "'attention_with_null_word'", ")", "\n", "if", "auged", ":", "\n", "        ", "mask", "=", "tf", ".", "sequence_mask", "(", "doc_len", ",", "real_max_len", "-", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "pad", "(", "mask", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "tf", ".", "sequence_mask", "(", "doc_len", ",", "real_max_len", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "e", "=", "(", "e", "*", "mask", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "_sum", "=", "tf", ".", "reduce_sum", "(", "e", ",", "reduction_indices", "=", "2", ",", "keepdims", "=", "True", ")", "+", "1e-9", "\n", "e", "=", "tf", ".", "div", "(", "e", ",", "_sum", ",", "name", "=", "'attention_without_null_word'", ")", "\n", "# e = tf.reshape(e, [-1, max_doc_len], name='attention_without_null_word')", "\n", "\n", "return", "e", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.hop.hop": [[7, 65], ["tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "list", "isinstance", "tensorflow.variable_scope", "tensorflow.reshape", "layers.attention.attention", "layers.attention.attention", "tensorflow.reshape", "tensorflow.concat", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.attention.attention", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.attention.attention"], ["def", "hop", "(", "scope", ",", "\n", "sentence", ",", "\n", "sentence_bkg", ",", "\n", "bkg_iter", ",", "\n", "bkg_fix", ",", "\n", "doc_len", ",", "\n", "real_max_len", ",", "\n", "convert_flag", ",", "\n", "biases_initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "auged", "=", "False", ",", "\n", "attention_type", "=", "'additive'", ",", "\n", "extra", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    return a new embedding of background information.\n    attention_type is one of 'additive' and 'dot', indicating the calculation of attention machenism\n    \"\"\"", "\n", "\n", "if", "bkg_fix", "is", "None", ":", "\n", "        ", "bkg_fix", "=", "[", "]", "\n", "", "if", "not", "isinstance", "(", "bkg_fix", ",", "list", ")", ":", "\n", "        ", "bkg_fix", "=", "[", "bkg_fix", "]", "\n", "", "bkg_fix", "=", "list", "(", "bkg_fix", ")", "\n", "hidden_size", "=", "sentence_bkg", ".", "shape", "[", "2", "]", "\n", "\n", "if", "attention_type", "==", "'additive'", ":", "\n", "        ", "attention", "=", "additive_attention", "\n", "", "elif", "attention_type", "==", "'dot'", ":", "\n", "        ", "attention", "=", "dot_attention", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "if", "bkg_iter", "is", "not", "None", ":", "\n", "            ", "alphas", "=", "attention", "(", "\n", "sentence_bkg", ",", "[", "bkg_iter", "]", "+", "bkg_fix", ",", "\n", "doc_len", ",", "\n", "real_max_len", ",", "\n", "biases_initializer", "=", "biases_initializer", ",", "\n", "weights_initializer", "=", "weights_initializer", ",", "\n", "auged", "=", "auged", ")", "\n", "", "else", ":", "\n", "            ", "alphas", "=", "attention", "(", "\n", "sentence_bkg", ",", "\n", "bkg_fix", ",", "\n", "doc_len", ",", "\n", "real_max_len", ",", "\n", "biases_initializer", "=", "biases_initializer", ",", "\n", "weights_initializer", "=", "weights_initializer", ",", "\n", "auged", "=", "auged", ")", "\n", "", "new_bkg", "=", "alphas", "@", "sentence", "\n", "new_bkg", "=", "tf", ".", "reshape", "(", "new_bkg", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "if", "extra", "==", "'jci'", ":", "\n", "            ", "extra_alpha", "=", "(", "bkg_fix", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", "@", "tf", ".", "transpose", "(", "sentence", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "*", "alphas", "\n", "extra_component", "=", "extra_alpha", "@", "sentence", "\n", "extra_component", "=", "tf", ".", "reshape", "(", "extra_component", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "", "if", "extra", "!=", "''", ":", "\n", "            ", "new_bkg", "=", "tf", ".", "concat", "(", "[", "new_bkg", ",", "extra_component", "]", ",", "axis", "=", "1", ")", "\n", "", "if", "'o'", "in", "convert_flag", ":", "\n", "            ", "new_bkg", "=", "bkg_iter", "+", "new_bkg", "\n", "", "", "return", "new_bkg", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.mhnsc.MHNSC.__init__": [[15, 50], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "mhnsc.var", "mhnsc.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "args", "[", "'hidden_size'", "]", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "doc_cnt", "=", "args", "[", "'doc_cnt'", "]", "\n", "self", ".", "sen_hop_cnt", "=", "args", "[", "'sen_hop_cnt'", "]", "\n", "self", ".", "doc_hop_cnt", "=", "args", "[", "'doc_hop_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "convert_flag", "=", "''", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "self", ".", "lambda1", "=", "args", "[", "'lambda1'", "]", "\n", "self", ".", "lambda2", "=", "args", "[", "'lambda2'", "]", "\n", "self", ".", "lambda3", "=", "args", "[", "'lambda3'", "]", "\n", "self", ".", "embedding_lr", "=", "args", "[", "'embedding_lr'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "usr_emb", "=", "var", "(", "'usr_emb'", ",", "[", "self", ".", "usr_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "prd_emb", "=", "var", "(", "'prd_emb'", ",", "[", "self", ".", "prd_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "usr_emb", ",", "self", ".", "prd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.mhnsc.MHNSC.build": [[51, 160], ["functools.partial", "functools.partial", "functools.partial", "mhnsc.MHNSC.build.pad_context"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "        ", "transform", "=", "partial", "(", "\n", "tf", ".", "layers", ".", "dense", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "dense", "=", "partial", "(", "\n", "tf", ".", "layers", ".", "dense", ",", "\n", "kernel_initializer", "=", "self", ".", "w_init", ",", "\n", "bias_initializer", "=", "self", ".", "b_init", ")", "\n", "lstm_cell", "=", "partial", "(", "\n", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", ",", "\n", "self", ".", "hidden_size", "//", "2", ",", "\n", "forget_bias", "=", "0.", ",", "\n", "initializer", "=", "self", ".", "w_init", ")", "\n", "\n", "def", "pad_context", "(", "context", ",", "input_x", ")", ":", "\n", "            ", "\"\"\" padding content with context embedding \"\"\"", "\n", "tiled_context", "=", "transform", "(", "context", ",", "self", ".", "emb_dim", ")", "\n", "tiled_context", "=", "tf", ".", "tile", "(", "tiled_context", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "\n", "[", "1", ",", "self", ".", "max_doc_len", ",", "1", ",", "1", "]", ")", "\n", "input_x", "=", "tf", ".", "reshape", "(", "\n", "input_x", ",", "\n", "[", "-", "1", ",", "self", ".", "max_doc_len", ",", "self", ".", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "input_x", "=", "tf", ".", "concat", "(", "[", "tiled_context", ",", "input_x", "]", ",", "axis", "=", "2", ")", "\n", "input_x", "=", "tf", ".", "reshape", "(", "input_x", ",", "\n", "[", "-", "1", ",", "self", ".", "max_sen_len", "+", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "return", "input_x", "\n", "\n", "# get the inputs", "\n", "", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "usrid", ",", "prdid", ",", "input_x", ",", "input_y", ",", "sen_len", ",", "doc_len", ",", "docid", "=", "(", "input_map", "[", "'usr'", "]", ",", "input_map", "[", "'prd'", "]", ",", "\n", "input_map", "[", "'content'", "]", ",", "input_map", "[", "'rating'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ",", "\n", "input_map", "[", "'docid'", "]", ")", "\n", "\n", "usr", "=", "lookup", "(", "self", ".", "usr_emb", ",", "usrid", ")", "\n", "prd", "=", "lookup", "(", "self", ".", "prd_emb", ",", "prdid", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ")", "\n", "\n", "", "nscua_input_x", "=", "pad_context", "(", "usr", ",", "input_x", ")", "\n", "nscpa_input_x", "=", "pad_context", "(", "prd", ",", "input_x", ")", "\n", "nscua_input_x", "=", "input_x", "\n", "nscpa_input_x", "=", "input_x", "\n", "\n", "#  sen_len = tf.where(", "\n", "#      tf.equal(sen_len, 0), tf.zeros_like(sen_len), sen_len + 1)", "\n", "#  self.max_sen_len += 1", "\n", "\n", "# build the process of model", "\n", "sen_embs", ",", "doc_embs", "=", "[", "]", ",", "[", "]", "\n", "sen_cell_fw", "=", "lstm_cell", "(", ")", "\n", "sen_cell_bw", "=", "lstm_cell", "(", ")", "\n", "for", "scope", ",", "identities", ",", "input_x", ",", "attention_type", "in", "zip", "(", "\n", "[", "'user_block'", ",", "'product_block'", "]", ",", "[", "[", "usr", "]", ",", "[", "prd", "]", "]", ",", "\n", "[", "nscua_input_x", ",", "nscpa_input_x", "]", ",", "[", "'additive'", ",", "'additive'", "]", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "sen_emb", "=", "nsc_sentence_layer", "(", "\n", "input_x", ",", "\n", "self", ".", "max_sen_len", ",", "\n", "self", ".", "max_doc_len", ",", "\n", "sen_len", ",", "\n", "identities", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_dim", ",", "\n", "self", ".", "sen_hop_cnt", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "[", "sen_cell_fw", ",", "sen_cell_bw", "]", ",", "\n", "auged", "=", "False", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "sen_embs", ".", "append", "(", "sen_emb", ")", "\n", "\n", "", "", "sen_embs", "=", "tf", ".", "concat", "(", "sen_embs", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# padding doc with user and product embeddings", "\n", "doc_aug_usr", "=", "transform", "(", "usr", ",", "2", "*", "self", ".", "hidden_size", ")", "\n", "nscua_sen_embs", "=", "tf", ".", "concat", "(", "[", "doc_aug_usr", "[", ":", ",", "None", ",", ":", "]", ",", "sen_embs", "]", ",", "axis", "=", "1", ")", "\n", "doc_aug_prd", "=", "transform", "(", "prd", ",", "2", "*", "self", ".", "hidden_size", ")", "\n", "nscpa_sen_embs", "=", "tf", ".", "concat", "(", "[", "doc_aug_prd", "[", ":", ",", "None", ",", ":", "]", ",", "sen_embs", "]", ",", "axis", "=", "1", ")", "\n", "#  none_sen_embs = tf.pad(sen_embs, [[0, 0], [1, 0], [0, 0]])", "\n", "nscua_sen_embs", "=", "sen_embs", "\n", "nscpa_sen_embs", "=", "sen_embs", "\n", "#  self.max_doc_len += 1", "\n", "#  doc_len = doc_len + 1", "\n", "\n", "doc_cell_fw", "=", "lstm_cell", "(", ")", "\n", "doc_cell_bw", "=", "lstm_cell", "(", ")", "\n", "for", "scope", ",", "identities", ",", "input_x", ",", "attention_type", "in", "zip", "(", "\n", "[", "'user_block'", ",", "'product_block'", "]", ",", "[", "[", "usr", "]", ",", "[", "prd", "]", "]", ",", "\n", "[", "nscua_sen_embs", ",", "nscpa_sen_embs", "]", ",", "[", "'additive'", ",", "'additive'", "]", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "doc_emb", "=", "nsc_document_layer", "(", "\n", "input_x", ",", "\n", "self", ".", "max_doc_len", ",", "\n", "doc_len", ",", "\n", "identities", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "doc_hop_cnt", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "[", "doc_cell_fw", ",", "doc_cell_bw", "]", ",", "\n", "auged", "=", "False", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "doc_embs", ".", "append", "(", "doc_emb", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'result'", ")", ":", "\n", "            ", "doc_emb", "=", "tf", ".", "concat", "(", "doc_embs", ",", "axis", "=", "1", ",", "name", "=", "'dhuapa_output'", ")", "\n", "logit", "=", "dense", "(", "doc_emb", ",", "self", ".", "cls_cnt", ")", "\n", "", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.mhnsc.var": [[10, 12], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nsc.nsc": [[9, 62], ["tensorflow.reshape", "tensorflow.reshape", "layers.nsc_sentence_layer.nsc_sentence_layer", "layers.nsc_document_layer.nsc_document_layer", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nsc_sentence_layer.nsc_sentence_layer", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nsc_document_layer.nsc_document_layer"], ["def", "nsc", "(", "x", ",", "\n", "max_sen_len", ",", "\n", "max_doc_len", ",", "\n", "sen_len", ",", "\n", "doc_len", ",", "\n", "identities", ",", "\n", "hidden_size", ",", "\n", "emb_dim", ",", "\n", "augment_document", "=", "False", ",", "\n", "sen_hop_cnt", "=", "1", ",", "\n", "doc_hop_cnt", "=", "1", ")", ":", "\n", "    ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "#  with tf.variable_scope('sentence_layer'):", "\n", "#      # lstm_outputs, _state = lstm(x, sen_len, hidden_size, 'lstm')", "\n", "#      # lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, hidden_size])", "\n", "#      lstm_bkg, _state = lstm(x, sen_len, hidden_size, 'lstm_bkg')", "\n", "#      lstm_bkg = tf.reshape(lstm_bkg, [-1, max_sen_len, hidden_size])", "\n", "#      lstm_outputs = lstm_bkg", "\n", "#", "\n", "#      sen_bkg = [", "\n", "#          tf.reshape(", "\n", "#              tf.tile(bkg[:, None, :], (1, max_doc_len, 1)), (-1, emb_dim))", "\n", "#          for bkg in identities", "\n", "#      ]", "\n", "#      for ihop in range(sen_hop_cnt):", "\n", "#          last = ihop == sen_hop_cnt - 1", "\n", "#          sen_bkg[0] = hop('hop', last, lstm_outputs, lstm_bkg, sen_bkg[0],", "\n", "#                           sen_bkg[1:], sen_len, max_sen_len, '')", "\n", "#  outputs = tf.reshape(sen_bkg[0], [-1, max_doc_len, hidden_size])", "\n", "sen_emb", "=", "nsc_sentence_layer", "(", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "\n", "identities", ",", "hidden_size", ",", "emb_dim", ",", "sen_hop_cnt", ")", "\n", "if", "augment_document", ":", "\n", "        ", "sen_emb", "=", "tf", ".", "concat", "(", "[", "identities", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", ",", "sen_emb", "]", ",", "axis", "=", "1", ")", "\n", "max_doc_len", "+=", "1", "\n", "doc_len", "=", "doc_len", "+", "1", "\n", "\n", "#  with tf.variable_scope('document_layer'):", "\n", "#      # lstm_outputs, _state = lstm(outputs, doc_len, hidden_size, 'lstm')", "\n", "#      lstm_bkg, _state = lstm(outputs, doc_len, hidden_size, 'lstm_bkg')", "\n", "#      lstm_outputs = lstm_bkg", "\n", "#", "\n", "#      doc_bkg = [i for i in identities]", "\n", "#      for ihop in range(doc_hop_cnt):", "\n", "#          last = ihop == doc_hop_cnt - 1", "\n", "#          doc_bkg[0] = hop('hop', last, lstm_outputs, lstm_bkg, doc_bkg[0],", "\n", "#                           doc_bkg[1:], doc_len, max_doc_len, '')", "\n", "#  outputs = doc_bkg[0]", "\n", "", "doc_emb", "=", "nsc_document_layer", "(", "sen_emb", ",", "max_doc_len", ",", "doc_len", ",", "identities", ",", "\n", "hidden_size", ",", "doc_hop_cnt", ")", "\n", "\n", "return", "doc_emb", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nsc_sentence_layer.nsc_sentence_layer": [[7, 73], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "layers.lstm.lstm", "tensorflow.reshape", "range", "tensorflow.reshape", "tensorflow.reshape", "tf.reshape.append", "tensorflow.tile", "layers.hop.hop", "layers.hop.hop"], "function", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.hop.hop", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.hop.hop"], ["def", "nsc_sentence_layer", "(", "x", ",", "\n", "max_sen_len", ",", "\n", "max_doc_len", ",", "\n", "sen_len", ",", "\n", "identities", ",", "\n", "hidden_size", ",", "\n", "emb_dim", ",", "\n", "sen_hop_cnt", "=", "1", ",", "\n", "bidirectional_lstm", "=", "True", ",", "\n", "lstm_cells", "=", "None", ",", "\n", "auged", "=", "False", ",", "\n", "attention_type", "=", "'additive'", ")", ":", "\n", "    ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "x", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, hidden_size])", "\n", "        ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "\n", "x", ",", "\n", "sen_len", ",", "\n", "hidden_size", ",", "\n", "'lstm_bkg'", ",", "\n", "bidirectional", "=", "bidirectional_lstm", ",", "\n", "lstm_cells", "=", "lstm_cells", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "[", "-", "1", ",", "max_sen_len", ",", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "sen_bkg", "=", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "bkg", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "max_doc_len", ",", "1", ")", ")", ",", "(", "-", "1", ",", "emb_dim", ")", ")", "\n", "for", "bkg", "in", "identities", "\n", "]", "\n", "for", "ihop", "in", "range", "(", "sen_hop_cnt", ")", ":", "\n", "            ", "if", "sen_bkg", ":", "\n", "                ", "sen_bkg", "[", "0", "]", "=", "hop", "(", "\n", "'hop'", ",", "\n", "lstm_outputs", ",", "\n", "lstm_bkg", ",", "\n", "sen_bkg", "[", "0", "]", ",", "\n", "sen_bkg", "[", "1", ":", "]", ",", "\n", "sen_len", ",", "\n", "max_sen_len", ",", "\n", "''", ",", "\n", "auged", "=", "auged", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "output", "=", "sen_bkg", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "hop", "(", "\n", "'hop'", ",", "\n", "lstm_outputs", ",", "\n", "lstm_bkg", ",", "\n", "None", ",", "\n", "None", ",", "\n", "sen_len", ",", "\n", "max_sen_len", ",", "\n", "''", ",", "\n", "auged", "=", "auged", ",", "\n", "attention_type", "=", "attention_type", ")", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "#  outputs = tf.concat(outputs, axis=-1)", "\n", "#  outputs = tf.layers.dense(outputs, hidden_size, use_bias=False)", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "max_doc_len", ",", "hidden_size", "]", ")", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.dot_attention.dot_attention": [[5, 39], ["tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "isinstance", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.div", "tensorflow.sequence_mask", "tensorflow.pad", "tensorflow.sequence_mask", "tensorflow.reduce_sum"], "function", ["None"], ["def", "dot_attention", "(", "h", ",", "\n", "bkg", ",", "\n", "doc_len", ",", "\n", "real_max_len", ",", "\n", "biases_initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "auged", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "bkg", ",", "Iterable", ")", ":", "\n", "        ", "bkg", "=", "bkg", "[", "0", "]", "\n", "", "max_len", "=", "h", ".", "shape", "[", "1", "]", "\n", "hidden_size", "=", "h", ".", "shape", "[", "2", "]", "\n", "\n", "# create variables", "\n", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "hidden_size", ",", "bkg", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "weights_initializer", ")", "\n", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "h", "=", "h", "@", "w", "\n", "e", "=", "tf", ".", "reshape", "(", "h", ",", "[", "-", "1", ",", "max_len", ",", "bkg", ".", "shape", "[", "1", "]", "]", ")", "\n", "e", "=", "e", "*", "bkg", "[", ":", ",", "None", ",", ":", "]", "\n", "e", "=", "tf", ".", "reduce_sum", "(", "e", ",", "axis", "=", "-", "1", ")", "\n", "\n", "e", "=", "tf", ".", "reshape", "(", "e", ",", "[", "-", "1", ",", "real_max_len", "]", ")", "\n", "e", "=", "tf", ".", "nn", ".", "softmax", "(", "e", ",", "name", "=", "'attention_with_null_word'", ")", "\n", "if", "auged", ":", "\n", "        ", "mask", "=", "tf", ".", "sequence_mask", "(", "doc_len", ",", "real_max_len", "-", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "pad", "(", "mask", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "tf", ".", "sequence_mask", "(", "doc_len", ",", "real_max_len", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "e", "=", "(", "e", "*", "mask", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "_sum", "=", "tf", ".", "reduce_sum", "(", "e", ",", "reduction_indices", "=", "2", ",", "keepdims", "=", "True", ")", "+", "1e-9", "\n", "e", "=", "tf", ".", "div", "(", "e", ",", "_sum", ",", "name", "=", "'attention_without_null_word'", ")", "\n", "# e = tf.reshape(e, [-1, max_doc_len], name='attention_without_null_word')", "\n", "\n", "return", "e", "\n", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.__init__": [[13, 41], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.initializers.zeros", "tensorflow.contrib.layers.xavier_initializer", "nscupa.var", "nscupa.var"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var", "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "wrd_emb", ")", ":", "\n", "        ", "self", ".", "max_doc_len", "=", "args", "[", "'max_doc_len'", "]", "\n", "self", ".", "max_sen_len", "=", "args", "[", "'max_sen_len'", "]", "\n", "self", ".", "cls_cnt", "=", "args", "[", "'cls_cnt'", "]", "\n", "self", ".", "embedding", "=", "args", "[", "'embedding'", "]", "\n", "self", ".", "emb_dim", "=", "args", "[", "'emb_dim'", "]", "\n", "self", ".", "hidden_size", "=", "self", ".", "emb_dim", "\n", "self", ".", "usr_cnt", "=", "args", "[", "'usr_cnt'", "]", "\n", "self", ".", "prd_cnt", "=", "args", "[", "'prd_cnt'", "]", "\n", "self", ".", "l2_rate", "=", "args", "[", "'l2_rate'", "]", "\n", "self", ".", "debug", "=", "args", "[", "'debug'", "]", "\n", "\n", "self", ".", "best_dev_acc", "=", ".0", "\n", "self", ".", "best_test_acc", "=", ".0", "\n", "self", ".", "best_test_rmse", "=", ".0", "\n", "\n", "# initializers for parameters", "\n", "self", ".", "w_init", "=", "xavier", "(", ")", "\n", "self", ".", "b_init", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", "\n", "self", ".", "e_init", "=", "xavier", "(", ")", "\n", "\n", "# embeddings in the model", "\n", "self", ".", "wrd_emb", "=", "wrd_emb", "\n", "self", ".", "usr_emb", "=", "var", "(", "'usr_emb'", ",", "[", "self", ".", "usr_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "prd_emb", "=", "var", "(", "'prd_emb'", ",", "[", "self", ".", "prd_cnt", ",", "self", ".", "emb_dim", "]", ",", "\n", "self", ".", "e_init", ")", "\n", "self", ".", "embeddings", "=", "[", "self", ".", "wrd_emb", ",", "self", ".", "usr_emb", ",", "self", ".", "prd_emb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc": [[42, 90], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "nscupa.NSCUPA.dnsc.lstm"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.lstm.lstm"], ["", "def", "dnsc", "(", "self", ",", "x", ",", "max_sen_len", ",", "max_doc_len", ",", "sen_len", ",", "doc_len", ",", "identities", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "emb_dim", "]", ")", "\n", "sen_len", "=", "tf", ".", "reshape", "(", "sen_len", ",", "[", "-", "1", "]", ")", "\n", "\n", "def", "lstm", "(", "inputs", ",", "sequence_length", ",", "hidden_size", ",", "scope", ")", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "\n", "hidden_size", "//", "2", ",", "forget_bias", "=", "0.", ",", "initializer", "=", "xavier", "(", ")", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "scope", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "return", "outputs", ",", "state", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sentence_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(x, sen_len, self.hidden_size, 'lstm')", "\n", "# lstm_outputs = tf.reshape(lstm_outputs, [-1, max_sen_len, self.hidden_size])", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "x", ",", "sen_len", ",", "self", ".", "hidden_size", ",", "'lstm_bkg'", ")", "\n", "lstm_bkg", "=", "tf", ".", "reshape", "(", "lstm_bkg", ",", "\n", "[", "-", "1", ",", "max_sen_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "sen_bkg", "=", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "bkg", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "max_doc_len", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "self", ".", "hidden_size", ")", ")", "for", "bkg", "in", "identities", "\n", "]", "\n", "sen_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "sen_bkg", "[", "0", "]", ",", "\n", "sen_bkg", "[", "1", ":", "]", ",", "sen_len", ",", "max_sen_len", ",", "''", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "sen_bkg", ",", "[", "-", "1", ",", "max_doc_len", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'document_layer'", ")", ":", "\n", "# lstm_outputs, _state = lstm(outputs, doc_len, self.hidden_size, 'lstm')", "\n", "            ", "lstm_bkg", ",", "_state", "=", "lstm", "(", "outputs", ",", "doc_len", ",", "self", ".", "hidden_size", ",", "\n", "'lstm_bkg'", ")", "\n", "lstm_outputs", "=", "lstm_bkg", "\n", "\n", "doc_bkg", "=", "[", "i", "for", "i", "in", "identities", "]", "\n", "doc_bkg", "=", "hop", "(", "'attention'", ",", "lstm_outputs", ",", "lstm_bkg", ",", "doc_bkg", "[", "0", "]", ",", "\n", "doc_bkg", "[", "1", ":", "]", ",", "doc_len", ",", "max_doc_len", ",", "''", ")", "\n", "", "outputs", "=", "doc_bkg", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.build": [[91, 107], ["nscupa.NSCUPA.dnsc", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.NSCUPA.dnsc"], ["", "def", "build", "(", "self", ",", "input_map", ")", ":", "\n", "# get the inputs", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "usrid", ",", "prdid", ",", "input_x", ",", "sen_len", ",", "doc_len", "=", "(", "input_map", "[", "'usr'", "]", ",", "input_map", "[", "'prd'", "]", ",", "\n", "input_map", "[", "'content'", "]", ",", "\n", "input_map", "[", "'sen_len'", "]", ",", "input_map", "[", "'doc_len'", "]", ")", "\n", "\n", "usr", "=", "lookup", "(", "self", ".", "usr_emb", ",", "usrid", ")", "\n", "prd", "=", "lookup", "(", "self", ".", "prd_emb", ",", "prdid", ")", "\n", "input_x", "=", "lookup", "(", "self", ".", "wrd_emb", ",", "input_x", ")", "\n", "self", ".", "usr", ",", "self", ".", "prd", ",", "self", ".", "input_x", "=", "usr", ",", "prd", ",", "input_x", "\n", "\n", "", "feature", "=", "self", ".", "dnsc", "(", "input_x", ",", "self", ".", "max_sen_len", ",", "self", ".", "max_doc_len", ",", "sen_len", ",", "\n", "doc_len", ",", "[", "usr", ",", "prd", "]", ")", "\n", "return", "feature", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SleepyBag_DAML.layers.nscupa.var": [[8, 10], ["tensorflow.get_variable"], "function", ["None"], ["def", "var", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ")", "\n", "\n"]]}