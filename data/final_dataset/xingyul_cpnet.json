{"home.repos.pwc.inspect_result.xingyul_cpnet.None.evaluate.log_string": [[135, 139], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.evaluate.evaluate": [[140, 214], ["tensorflow.Graph().as_default", "MODEL.placeholder_inputs", "tensorflow.placeholder", "MODEL.get_model", "range", "tensorflow.concat", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "tf.Session.run", "evaluate.eval_one_epoch", "tensorflow.Graph", "tensorflow.variable_scope", "tf.train.Saver.restore", "evaluate.log_string", "numpy.load", "np.load.keys", "MODEL.name_mapping", "MODEL.convert_2d_3d", "dict_restore.DictRestore", "dict_restore.DictRestore.run_init", "evaluate.log_string", "tensorflow.get_variable_scope", "tensorflow.device", "tensorflow.slice", "tensorflow.slice", "MODEL.get_model", "pred_gpu.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.placeholder_inputs", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.eval_one_epoch", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.name_mapping", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.convert_2d_3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.run_init", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "evaluate", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "is_training", "=", "False", "\n", "\n", "if", "FCN", "==", "3", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "elif", "FCN", "==", "6", ":", "\n", "            ", "pl_bsize", "=", "8", "\n", "", "elif", "FCN", "==", "8", ":", "\n", "            ", "pl_bsize", "=", "12", "\n", "", "elif", "FCN", "==", "1", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "elif", "FCN", "==", "5", ":", "\n", "            ", "pl_bsize", "=", "5", "\n", "", "elif", "FCN", "==", "10", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "else", ":", "\n", "            ", "pl_bsize", "=", "1", "\n", "", "assert", "(", "pl_bsize", "%", "NUM_GPUS", "==", "0", ")", "\n", "DEVICE_BATCH_SIZE", "=", "pl_bsize", "//", "NUM_GPUS", "\n", "\n", "video_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "pl_bsize", ",", "NUM_FRAMES", ",", "HEIGHT", ",", "WIDTH", ",", "evaluate", "=", "True", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "MODEL", ".", "get_model", "(", "video_pl", ",", "is_training_pl", ",", "NUM_CLASSES", ")", "\n", "pred_gpu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_GPUS", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "(", "i", ")", ")", "as", "scope", ":", "\n", "                    ", "vd_batch", "=", "tf", ".", "slice", "(", "video_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "DEVICE_BATCH_SIZE", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "label_batch", "=", "tf", ".", "slice", "(", "labels_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", "]", ",", "[", "DEVICE_BATCH_SIZE", "]", ")", "\n", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "vd_batch", ",", "is_training_pl", ",", "NUM_CLASSES", ")", "\n", "pred_gpu", ".", "append", "(", "pred", ")", "\n", "", "", "", "pred", "=", "tf", ".", "concat", "(", "pred_gpu", ",", "0", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Init variables", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "# Restore variables from disk.", "\n", "if", "MODEL_PATH", "is", "not", "None", ":", "\n", "            ", "if", "'npz'", "not", "in", "MODEL_PATH", ":", "\n", "                ", "saver", ".", "restore", "(", "sess", ",", "MODEL_PATH", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "", "else", ":", "\n", "                ", "dict_file", "=", "np", ".", "load", "(", "MODEL_PATH", ")", "\n", "dict_for_restore", "=", "{", "}", "\n", "dict_file_keys", "=", "dict_file", ".", "keys", "(", ")", "\n", "for", "k", "in", "dict_file_keys", ":", "\n", "                    ", "dict_for_restore", "[", "k", "]", "=", "dict_file", "[", "k", "]", "\n", "", "dict_for_restore", "=", "MODEL", ".", "name_mapping", "(", "dict_for_restore", ")", "\n", "dict_for_restore", "=", "MODEL", ".", "convert_2d_3d", "(", "dict_for_restore", ")", "\n", "dr", "=", "DictRestore", "(", "dict_for_restore", ",", "log_string", ")", "\n", "dr", ".", "run_init", "(", "sess", ")", "\n", "log_string", "(", "\"npz file restored.\"", ")", "\n", "\n", "", "", "ops", "=", "{", "'video_pl'", ":", "video_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", "}", "\n", "\n", "eval_one_epoch", "(", "sess", ",", "ops", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.evaluate.eval_one_epoch": [[215, 392], ["enumerate", "evaluate.log_string", "evaluate.log_string", "evaluate.log_string", "numpy.savez_compressed", "inputs.data.numpy", "targets.data.numpy", "numpy.transpose", "numpy.exp", "numpy.mean", "numpy.argmax", "numpy.sum", "evaluate.log_string", "os.path.join", "range", "range", "range", "numpy.concatenate", "numpy.sum", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "numpy.max", "numpy.argsort", "float", "float", "float", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "sess.run", "sess.run", "preds.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "val_loader", ",", "topk", "=", "1", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "\n", "total_correct_top1", "=", "0", "\n", "total_correct_top5", "=", "0", "\n", "total_seen", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "loss_sum", "=", "0", "\n", "batch_idx", "=", "0", "\n", "shape_ious", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "batch_data", "=", "inputs", ".", "data", ".", "numpy", "(", ")", "\n", "bsize", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "batch_label", "=", "targets", ".", "data", ".", "numpy", "(", ")", "\n", "batch_data", "=", "np", ".", "transpose", "(", "batch_data", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "\n", "\n", "height", "=", "batch_data", ".", "shape", "[", "2", "]", "\n", "width", "=", "batch_data", ".", "shape", "[", "3", "]", "\n", "if", "FCN", "==", "10", ":", "\n", "            ", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                ", "batch_data_split", "=", "np", ".", "expand_dims", "(", "batch_data", "[", "i", "]", ",", "0", ")", "\n", "batch_label_split", "=", "np", ".", "expand_dims", "(", "batch_label", "[", "i", "]", ",", "0", ")", "\n", "batch_data_split", "=", "np", ".", "concatenate", "(", "[", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "batch_label_split", "=", "np", ".", "concatenate", "(", "[", "batch_label_split", "]", "*", "10", ",", "axis", "=", "0", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_split", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_split", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "elif", "FCN", "==", "5", ":", "\n", "            ", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "batch_data_split", "=", "np", ".", "expand_dims", "(", "batch_data", "[", "i", "]", ",", "0", ")", "\n", "batch_label_split", "=", "np", ".", "expand_dims", "(", "batch_label", "[", "i", "]", ",", "0", ")", "\n", "batch_data_split", "=", "np", ".", "concatenate", "(", "[", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "batch_label_split", "=", "np", ".", "concatenate", "(", "[", "batch_label_split", "]", "*", "5", ",", "axis", "=", "0", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_split", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_split", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "FCN", "==", "3", ":", "\n", "                ", "if", "height", ">", "width", ":", "\n", "                    ", "assert", "(", "width", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "FULL_SIZE", "//", "2", ")", ":", "(", "height", "//", "2", "+", "FULL_SIZE", "//", "2", ")", ",", ":", ",", ":", "]", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "height", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "width", "//", "2", "-", "FULL_SIZE", "//", "2", ")", ":", "(", "width", "//", "2", "+", "FULL_SIZE", "//", "2", ")", ",", ":", "]", "]", "\n", "", "batch_label_list", "=", "[", "batch_label", "]", "*", "3", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_list", "[", "i", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_list", "[", "i", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "elif", "FCN", "==", "6", ":", "\n", "                ", "if", "height", ">", "width", ":", "\n", "                    ", "assert", "(", "width", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "1", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "1", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "2", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "2", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "3", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "3", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "4", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "4", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "height", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "1", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "1", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "2", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "2", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "3", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "3", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "4", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "4", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "]", "\n", "", "batch_label_list", "=", "[", "batch_label", "]", "*", "6", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_list", "[", "i", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_list", "[", "i", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "elif", "FCN", "==", "8", ":", "\n", "                ", "if", "height", ">", "width", ":", "\n", "                    ", "assert", "(", "width", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "1", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "1", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "2", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "2", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "3", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "3", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "4", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "4", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "5", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "5", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "6", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "7", "*", "6", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "height", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "1", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "1", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "2", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "2", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "3", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "3", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "4", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "4", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "5", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "5", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "6", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "7", "*", "6", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "]", "\n", "", "batch_label_list", "=", "[", "batch_label", "]", "*", "8", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_list", "[", "i", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_list", "[", "i", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "", "pred_val", "=", "np", ".", "exp", "(", "pred_val", "-", "np", ".", "max", "(", "pred_val", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "pred_val", "=", "pred_val", "/", "np", ".", "sum", "(", "pred_val", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "pred_val", "=", "np", ".", "mean", "(", "pred_val", ",", "axis", "=", "0", ")", "\n", "\n", "pred_val_top5", "=", "np", ".", "argsort", "(", "pred_val", ")", "[", ":", ":", "-", "1", "]", "[", ":", "5", "]", "\n", "pred_val_top1", "=", "np", ".", "argmax", "(", "pred_val", ")", "\n", "\n", "correct_top1", "=", "pred_val_top1", "==", "batch_label", "[", "0", "]", "\n", "correct_top5", "=", "np", ".", "sum", "(", "pred_val_top5", "==", "batch_label", "[", "0", "]", ")", "\n", "total_correct_top1", "+=", "correct_top1", "\n", "total_correct_top5", "+=", "correct_top5", "\n", "\n", "total_seen", "+=", "1", "\n", "log_string", "(", "'batch accuracy top1 : %f, batch accuracy top5: %f'", "%", "(", "correct_top1", ",", "correct_top5", ")", ")", "\n", "\n", "l", "=", "batch_label", "[", "0", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "correct_top1", "\n", "\n", "", "log_string", "(", "'eval mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy top1 : %f'", "%", "(", "total_correct_top1", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy top5 : %f'", "%", "(", "total_correct_top5", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "np", ".", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "'pred_class.npz'", ")", ",", "total_correct_class", "=", "np", ".", "array", "(", "total_correct_class", ")", ",", "total_seen_class", "=", "np", ".", "array", "(", "total_seen_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.log_string": [[139, 143], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.average_gradients": [[144, 180], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n    Note that this function provides a synchronization point across all towers.\n    From tensorflow tutorial: cifar10/cifar10_multi_gpu_train.py\n    Args:\n\ttower_grads: List of lists of (gradient, variable) tuples. The outer list\n\tis over individual gradients. The inner list is over the gradient\n\tcalculation for each tower.\n    Returns:\n\tList of pairs of (gradient, variable) where the gradient has been averaged\n\tacross all towers.\n    \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "if", "grad_and_vars", "[", "0", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "grads", "=", "[", "]", "\n", "for", "g", ",", "v", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "                ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "grads", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.get_learning_rate": [[181, 190], ["tensorflow.train.exponential_decay", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_learning_rate", "(", "batch", ")", ":", "\n", "    ", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BASE_LEARNING_RATE", ",", "# Base learning rate.", "\n", "batch", ",", "# Current index into the dataset.", "\n", "DECAY_STEP", ",", "# Decay step.", "\n", "DECAY_RATE", ",", "# Decay rate.", "\n", "staircase", "=", "True", ")", "\n", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "0.00001", ")", "# CLIP THE LEARNING RATE!", "\n", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.get_bn_decay": [[191, 200], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "function", ["None"], ["", "def", "get_bn_decay", "(", "batch", ")", ":", "\n", "    ", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "batch", ",", "\n", "BN_DECAY_DECAY_STEP", ",", "\n", "BN_DECAY_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.train": [[201, 346], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer", "tf.Session.run", "range", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.placeholder", "tensorflow.get_variable", "train.get_bn_decay", "tensorflow.summary.scalar", "print", "train.get_learning_rate", "tensorflow.summary.scalar", "MODEL.get_model", "range", "tensorflow.concat", "tensorflow.reduce_mean", "train.average_gradients", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.equal", "tensorflow.summary.scalar", "tensorflow.train.Saver", "os.path.join", "os.path.join", "cv2.imread().astype", "numpy.array().reshape", "numpy.array().reshape", "cv2.resize", "numpy.reshape", "numpy.tile", "tf.Session.run", "numpy.reshape", "print", "exit", "train.log_string", "train.log_string", "sys.stdout.flush", "train.train_one_epoch", "train.eval_one_epoch", "tensorflow.Graph", "tensorflow.train.MomentumOptimizer", "tensorflow.argmax", "tensorflow.to_int64", "tensorflow.reduce_sum", "float", "saver_restore.SaverRestore", "saver_restore.SaverRestore.run_init", "train.log_string", "numpy.load", "np.load.keys", "MODEL.name_mapping", "MODEL.convert_2d_3d", "dict_restore.DictRestore", "dict_restore.DictRestore.run_init", "train.log_string", "cv2.resize", "cv2.resize", "tf.train.Saver.save", "train.log_string", "tensorflow.constant_initializer", "tensorflow.train.AdamOptimizer", "tensorflow.variable_scope", "tensorflow.cast", "cv2.imread", "numpy.array", "numpy.array", "tf.Session.run", "os.path.join", "tensorflow.get_variable_scope", "tensorflow.device", "tensorflow.name_scope", "tensorflow.slice", "tensorflow.slice", "MODEL.get_model", "MODEL.get_loss", "tensorflow.get_collection", "tensorflow.add_n", "tf.train.AdamOptimizer.compute_gradients", "tower_grads.append", "pred_gpu.append", "total_loss_gpu.append", "int", "int", "int", "int", "int", "int", "np.reshape.argsort", "tensorflow.summary.scalar", "float", "float"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.placeholder_inputs", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.get_bn_decay", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.get_learning_rate", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.average_gradients", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.train_one_epoch", "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.eval_one_epoch", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.run_init", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.name_mapping", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.convert_2d_3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.run_init", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_loss", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "train", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "video_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_FRAMES", ",", "HEIGHT", ",", "WIDTH", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "# Note the global_step=batch parameter to minimize.", "\n", "# That tells the optimizer to helpfully increment the 'batch' parameter", "\n", "# for you every time it trains.", "\n", "batch", "=", "tf", ".", "get_variable", "(", "'batch'", ",", "[", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "bn_decay", "=", "get_bn_decay", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "bn_decay", ")", "\n", "\n", "print", "(", "\"--- Get training operator\"", ")", "\n", "# Get training operator", "\n", "learning_rate", "=", "get_learning_rate", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "if", "OPTIMIZER", "==", "'momentum'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "momentum", "=", "MOMENTUM", ")", "\n", "", "elif", "OPTIMIZER", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "\n", "", "MODEL", ".", "get_model", "(", "video_pl", ",", "num_classes", "=", "NUM_CLASSES", "if", "not", "DEBUG", "else", "1000", ",", "is_training", "=", "is_training_pl", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "WEIGHT_DECAY", ",", "pool_t", "=", "POOL_T", ",", "freeze_bn", "=", "FREEZE_BN", ")", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "pred_gpu", "=", "[", "]", "\n", "total_loss_gpu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_GPUS", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "True", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "(", "i", ")", ")", ",", "tf", ".", "name_scope", "(", "'gpu_%d'", "%", "(", "i", ")", ")", "as", "scope", ":", "\n", "# Evenly split input data to each GPU", "\n", "                        ", "vd_batch", "=", "tf", ".", "slice", "(", "video_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "DEVICE_BATCH_SIZE", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "label_batch", "=", "tf", ".", "slice", "(", "labels_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", "]", ",", "[", "DEVICE_BATCH_SIZE", "]", ")", "\n", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "vd_batch", ",", "num_classes", "=", "NUM_CLASSES", "if", "not", "DEBUG", "else", "1000", ",", "\n", "is_training", "=", "is_training_pl", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "WEIGHT_DECAY", ",", "pool_t", "=", "POOL_T", ",", "freeze_bn", "=", "FREEZE_BN", ")", "\n", "\n", "MODEL", ".", "get_loss", "(", "pred", ",", "label_batch", ",", "end_points", ")", "\n", "losses", "=", "tf", ".", "get_collection", "(", "'losses'", ",", "scope", ")", "\n", "total_loss", "=", "tf", ".", "add_n", "(", "losses", ",", "name", "=", "'total_loss'", ")", "\n", "for", "l", "in", "losses", "+", "[", "total_loss", "]", ":", "\n", "                            ", "tf", ".", "summary", ".", "scalar", "(", "l", ".", "op", ".", "name", ",", "l", ")", "\n", "\n", "", "grads", "=", "optimizer", ".", "compute_gradients", "(", "total_loss", ")", "\n", "tower_grads", ".", "append", "(", "grads", ")", "\n", "\n", "pred_gpu", ".", "append", "(", "pred", ")", "\n", "total_loss_gpu", ".", "append", "(", "total_loss", ")", "\n", "\n", "", "", "", "pred", "=", "tf", ".", "concat", "(", "pred_gpu", ",", "0", ")", "\n", "total_loss", "=", "tf", ".", "reduce_mean", "(", "total_loss_gpu", ")", "\n", "\n", "grads", "=", "average_gradients", "(", "tower_grads", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "batch", ")", "\n", "\n", "correct", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "pred", ",", "1", ")", ",", "tf", ".", "to_int64", "(", "labels_pl", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "correct", ",", "tf", ".", "float32", ")", ")", "/", "float", "(", "BATCH_SIZE", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'accuracy'", ",", "accuracy", ")", "\n", "\n", "# Add ops to save all the variables.", "\n", "saver_save", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "50", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Add summary writers", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'train'", ")", ",", "sess", ".", "graph", ")", "\n", "test_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'test'", ")", ",", "sess", ".", "graph", ")", "\n", "\n", "# Init variables", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "# Restore variables from disk.", "\n", "if", "MODEL_PATH", "is", "not", "None", ":", "\n", "            ", "if", "'npz'", "not", "in", "MODEL_PATH", ":", "\n", "                ", "sr", "=", "SaverRestore", "(", "MODEL_PATH", ",", "log_string", ",", "ignore", "=", "[", "'batch:0'", "]", "if", "RESET_LR", "else", "[", "]", ")", "\n", "sr", ".", "run_init", "(", "sess", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "", "else", ":", "\n", "                ", "dict_file", "=", "np", ".", "load", "(", "MODEL_PATH", ")", "\n", "dict_for_restore", "=", "{", "}", "\n", "dict_file_keys", "=", "dict_file", ".", "keys", "(", ")", "\n", "for", "k", "in", "dict_file_keys", ":", "\n", "                    ", "dict_for_restore", "[", "k", "]", "=", "dict_file", "[", "k", "]", "\n", "", "dict_for_restore", "=", "MODEL", ".", "name_mapping", "(", "dict_for_restore", ",", "debug", "=", "DEBUG", ")", "\n", "dict_for_restore", "=", "MODEL", ".", "convert_2d_3d", "(", "dict_for_restore", ")", "\n", "dr", "=", "DictRestore", "(", "dict_for_restore", ",", "log_string", ")", "\n", "dr", ".", "run_init", "(", "sess", ")", "\n", "log_string", "(", "\"npz file restored.\"", ")", "\n", "\n", "", "", "if", "DEBUG", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "'green_mamba.jpg'", ")", ".", "astype", "(", "'float32'", ")", "\n", "if", "im", ".", "shape", "[", "0", "]", "<", "im", ".", "shape", "[", "1", "]", ":", "\n", "                ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "int", "(", "256.", "*", "float", "(", "im", ".", "shape", "[", "1", "]", ")", "/", "im", ".", "shape", "[", "0", "]", ")", ",", "256", ")", ")", "\n", "", "else", ":", "\n", "                ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "256", ",", "int", "(", "256.", "*", "float", "(", "im", ".", "shape", "[", "0", "]", ")", "/", "im", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "", "im", "=", "im", "[", "int", "(", "im", ".", "shape", "[", "0", "]", "/", "2", "-", "112", ")", ":", "int", "(", "im", ".", "shape", "[", "0", "]", "/", "2", "+", "112", ")", ",", "int", "(", "im", ".", "shape", "[", "1", "]", "/", "2", "-", "112", ")", ":", "int", "(", "im", ".", "shape", "[", "1", "]", "/", "2", "+", "112", ")", ",", ":", "]", "\n", "im", "=", "im", "/", "255", "\n", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "im", "=", "(", "im", "-", "mean", ")", "/", "std", "\n", "wh", "=", "WIDTH", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "wh", ",", "wh", ")", ")", "\n", "im", "=", "np", ".", "reshape", "(", "im", ",", "[", "1", ",", "1", ",", "wh", ",", "wh", ",", "3", "]", ")", "\n", "im", "=", "np", ".", "tile", "(", "im", ",", "(", "1", ",", "NUM_FRAMES", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "pred_np", "=", "sess", ".", "run", "(", "pred", ",", "feed_dict", "=", "{", "video_pl", ":", "im", ",", "is_training_pl", ":", "False", "}", ")", "\n", "pred_np", "=", "np", ".", "reshape", "(", "pred_np", ",", "[", "-", "1", "]", ")", "\n", "print", "(", "pred_np", ".", "argsort", "(", ")", "[", "-", "5", ":", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "\n", "", "ops", "=", "{", "'video_pl'", ":", "video_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'loss'", ":", "total_loss", ",", "\n", "'train_op'", ":", "train_op", ",", "\n", "'merged'", ":", "merged", ",", "\n", "'step'", ":", "batch", ",", "\n", "'end_points'", ":", "end_points", "}", "\n", "\n", "best_acc", "=", "-", "1", "\n", "for", "epoch", "in", "range", "(", "MAX_EPOCH", ")", ":", "\n", "            ", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'learning_rate: {}'", ".", "format", "(", "sess", ".", "run", "(", "learning_rate", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ",", "train_loader", ")", "\n", "\n", "# Save the variables to disk.", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "                ", "save_path", "=", "saver_save", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "\"model-{}.ckpt\"", ".", "format", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n", "", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.train_one_epoch": [[348, 388], ["train.log_string", "enumerate", "str", "inputs.data.numpy", "targets.data.numpy", "numpy.transpose", "sess.run", "train_writer.add_summary", "numpy.argmax", "numpy.sum", "datetime.datetime.now", "range", "train.log_string", "train.log_string", "train.log_string", "numpy.random.randint", "symmetric_flip_labels.keys", "float"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string"], ["", "", "", "def", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "is_training", "=", "True", "\n", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "batch_data", "=", "inputs", ".", "data", ".", "numpy", "(", ")", "\n", "bsize", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "batch_label", "=", "targets", ".", "data", ".", "numpy", "(", ")", "\n", "batch_data", "=", "np", ".", "transpose", "(", "batch_data", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "\n", "if", "SYMMETRIC_FLIP_LABELS", "is", "not", "None", ":", "\n", "            ", "for", "b", "in", "range", "(", "bsize", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "1", ":", "\n", "                    ", "batch_data", "[", "b", "]", "=", "batch_data", "[", "b", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "if", "batch_label", "[", "b", "]", "in", "symmetric_flip_labels", ".", "keys", "(", ")", ":", "\n", "                        ", "batch_label", "[", "b", "]", "=", "symmetric_flip_labels", "[", "batch_label", "[", "b", "]", "]", "\n", "\n", "", "", "", "", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", ",", "}", "\n", "summary", ",", "step", ",", "_", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'train_op'", "]", ",", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "[", "0", ":", "bsize", "]", "==", "batch_label", "[", "0", ":", "bsize", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "bsize", "\n", "loss_sum", "+=", "loss_val", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "log_string", "(", "'mean loss: %f'", "%", "(", "loss_sum", "/", "10", ")", ")", "\n", "log_string", "(", "'accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.train.eval_one_epoch": [[389, 430], ["train.log_string", "train.log_string", "enumerate", "train.log_string", "train.log_string", "train.log_string", "str", "inputs.data.numpy", "targets.data.numpy", "numpy.transpose", "sess.run", "test_writer.add_summary", "numpy.argmax", "numpy.sum", "numpy.sum", "datetime.datetime.now", "numpy.any", "numpy.argsort", "float", "float", "float", "numpy.transpose", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string"], ["", "", "", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ",", "val_loader", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "global", "EPOCH_CNT", "\n", "is_training", "=", "False", "\n", "\n", "total_correct_top1", "=", "0", "\n", "total_correct_top5", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "batch_idx", "=", "0", "\n", "shape_ious", "=", "[", "]", "\n", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "log_string", "(", "'---- EPOCH %03d EVALUATION ----'", "%", "(", "EPOCH_CNT", ")", ")", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "batch_data", "=", "inputs", ".", "data", ".", "numpy", "(", ")", "\n", "bsize", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "batch_label", "=", "targets", ".", "data", ".", "numpy", "(", ")", "\n", "batch_data", "=", "np", ".", "transpose", "(", "batch_data", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "\n", "\n", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "summary", ",", "step", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "test_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "pred_val_top5", "=", "np", ".", "argsort", "(", "pred_val", ",", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "[", ":", ",", ":", "5", "]", "\n", "pred_val_top1", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct_top1", "=", "np", ".", "sum", "(", "pred_val_top1", "[", "0", ":", "bsize", "]", "==", "batch_label", "[", "0", ":", "bsize", "]", ")", "\n", "correct_top5", "=", "np", ".", "sum", "(", "np", ".", "any", "(", "pred_val_top5", "==", "np", ".", "transpose", "(", "np", ".", "tile", "(", "batch_label", "[", "0", ":", "bsize", "]", ",", "[", "5", ",", "1", "]", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "total_correct_top1", "+=", "correct_top1", "\n", "total_correct_top5", "+=", "correct_top5", "\n", "total_seen", "+=", "bsize", "\n", "loss_sum", "+=", "loss_val", "\n", "batch_idx", "+=", "1", "\n", "\n", "", "log_string", "(", "'eval mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "batch_idx", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy top1 : %f'", "%", "(", "total_correct_top1", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'eval accuracy top5 : %f'", "%", "(", "total_correct_top5", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "EPOCH_CNT", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string": [[135, 139], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.test": [[140, 212], ["tensorflow.Graph().as_default", "MODEL.placeholder_inputs", "tensorflow.placeholder", "MODEL.get_model", "range", "tensorflow.concat", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "tf.Session.run", "test.test_one_epoch", "tensorflow.Graph", "tensorflow.variable_scope", "tf.train.Saver.restore", "test.log_string", "numpy.load", "np.load.keys", "MODEL.name_mapping", "MODEL.convert_2d_3d", "dict_restore.DictRestore", "dict_restore.DictRestore.run_init", "test.log_string", "tensorflow.get_variable_scope", "tensorflow.device", "tensorflow.slice", "tensorflow.slice", "MODEL.get_model", "pred_gpu.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.placeholder_inputs", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.test_one_epoch", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.name_mapping", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.convert_2d_3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.run_init", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "test", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "is_training", "=", "False", "\n", "\n", "if", "FCN", "==", "3", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "elif", "FCN", "==", "6", ":", "\n", "            ", "pl_bsize", "=", "8", "\n", "", "elif", "FCN", "==", "1", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "elif", "FCN", "==", "5", ":", "\n", "            ", "pl_bsize", "=", "5", "\n", "", "elif", "FCN", "==", "10", ":", "\n", "            ", "pl_bsize", "=", "10", "\n", "", "else", ":", "\n", "            ", "pl_bsize", "=", "1", "\n", "", "assert", "(", "pl_bsize", "%", "NUM_GPUS", "==", "0", ")", "\n", "DEVICE_BATCH_SIZE", "=", "pl_bsize", "//", "NUM_GPUS", "\n", "\n", "video_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "pl_bsize", ",", "NUM_FRAMES", ",", "HEIGHT", ",", "WIDTH", ",", "evaluate", "=", "True", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "MODEL", ".", "get_model", "(", "video_pl", ",", "is_training_pl", ",", "NUM_CLASSES", ",", "pool_t", "=", "POOL_T", ")", "\n", "pred_gpu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "NUM_GPUS", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "(", "i", ")", ")", "as", "scope", ":", "\n", "                    ", "vd_batch", "=", "tf", ".", "slice", "(", "video_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "DEVICE_BATCH_SIZE", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "label_batch", "=", "tf", ".", "slice", "(", "labels_pl", ",", "\n", "[", "i", "*", "DEVICE_BATCH_SIZE", "]", ",", "[", "DEVICE_BATCH_SIZE", "]", ")", "\n", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "vd_batch", ",", "is_training_pl", ",", "NUM_CLASSES", ",", "pool_t", "=", "POOL_T", ")", "\n", "pred_gpu", ".", "append", "(", "pred", ")", "\n", "", "", "", "pred", "=", "tf", ".", "concat", "(", "pred_gpu", ",", "0", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Init variables", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "# Restore variables from disk.", "\n", "if", "MODEL_PATH", "is", "not", "None", ":", "\n", "            ", "if", "'npz'", "not", "in", "MODEL_PATH", ":", "\n", "                ", "saver", ".", "restore", "(", "sess", ",", "MODEL_PATH", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "", "else", ":", "\n", "                ", "dict_file", "=", "np", ".", "load", "(", "MODEL_PATH", ")", "\n", "dict_for_restore", "=", "{", "}", "\n", "dict_file_keys", "=", "dict_file", ".", "keys", "(", ")", "\n", "for", "k", "in", "dict_file_keys", ":", "\n", "                    ", "dict_for_restore", "[", "k", "]", "=", "dict_file", "[", "k", "]", "\n", "", "dict_for_restore", "=", "MODEL", ".", "name_mapping", "(", "dict_for_restore", ")", "\n", "dict_for_restore", "=", "MODEL", ".", "convert_2d_3d", "(", "dict_for_restore", ")", "\n", "dr", "=", "DictRestore", "(", "dict_for_restore", ",", "log_string", ")", "\n", "dr", ".", "run_init", "(", "sess", ")", "\n", "log_string", "(", "\"npz file restored.\"", ")", "\n", "\n", "", "", "ops", "=", "{", "'video_pl'", ":", "video_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", "}", "\n", "\n", "test_one_epoch", "(", "sess", ",", "ops", ",", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.test_one_epoch": [[213, 346], ["enumerate", "pickle.dump", "inputs.data.numpy", "targets.data.numpy", "numpy.transpose", "numpy.exp", "numpy.mean", "numpy.argmax", "test.log_string", "open", "range", "numpy.concatenate", "numpy.sum", "os.path.join", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "numpy.max", "numpy.argsort", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "sess.run", "preds.append", "range", "numpy.concatenate", "sess.run", "sess.run", "preds.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.dump", "home.repos.pwc.inspect_result.xingyul_cpnet.None.test.log_string", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "", "def", "test_one_epoch", "(", "sess", ",", "ops", ",", "test_loader", ",", "topk", "=", "1", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "\n", "total_correct_top1", "=", "0", "\n", "total_correct_top5", "=", "0", "\n", "total_seen", "=", "0", "\n", "batch_idx", "=", "0", "\n", "shape_ious", "=", "[", "]", "\n", "\n", "pred_vals", "=", "{", "}", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "batch_data", "=", "inputs", ".", "data", ".", "numpy", "(", ")", "\n", "bsize", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "batch_label", "=", "targets", ".", "data", ".", "numpy", "(", ")", "\n", "batch_data", "=", "np", ".", "transpose", "(", "batch_data", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "\n", "\n", "height", "=", "batch_data", ".", "shape", "[", "2", "]", "\n", "width", "=", "batch_data", ".", "shape", "[", "3", "]", "\n", "if", "FCN", "==", "10", ":", "\n", "            ", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                ", "batch_data_split", "=", "np", ".", "expand_dims", "(", "batch_data", "[", "i", "]", ",", "0", ")", "\n", "batch_label_split", "=", "np", ".", "expand_dims", "(", "batch_label", "[", "i", "]", ",", "0", ")", "\n", "batch_data_split", "=", "np", ".", "concatenate", "(", "[", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "batch_label_split", "=", "np", ".", "concatenate", "(", "[", "batch_label_split", "]", "*", "10", ",", "axis", "=", "0", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_split", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_split", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "elif", "FCN", "==", "5", ":", "\n", "            ", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "batch_data_split", "=", "np", ".", "expand_dims", "(", "batch_data", "[", "i", "]", ",", "0", ")", "\n", "batch_label_split", "=", "np", ".", "expand_dims", "(", "batch_label", "[", "i", "]", ",", "0", ")", "\n", "batch_data_split", "=", "np", ".", "concatenate", "(", "[", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", ":", "WIDTH", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", ":", "HEIGHT", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "-", "HEIGHT", ":", ",", "-", "WIDTH", ":", ",", ":", "]", ",", "batch_data_split", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "HEIGHT", "//", "2", ")", ":", "(", "height", "//", "2", "+", "HEIGHT", "//", "2", ")", ",", "(", "width", "//", "2", "-", "WIDTH", "//", "2", ")", ":", "(", "width", "//", "2", "+", "WIDTH", "//", "2", ")", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "batch_label_split", "=", "np", ".", "concatenate", "(", "[", "batch_label_split", "]", "*", "5", ",", "axis", "=", "0", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_split", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_split", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "FCN", "==", "3", ":", "\n", "                ", "if", "height", ">", "width", ":", "\n", "                    ", "assert", "(", "width", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "height", "//", "2", "-", "FULL_SIZE", "//", "2", ")", ":", "(", "height", "//", "2", "+", "FULL_SIZE", "//", "2", ")", ",", ":", ",", ":", "]", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "height", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "width", "//", "2", "-", "FULL_SIZE", "//", "2", ")", ":", "(", "width", "//", "2", "+", "FULL_SIZE", "//", "2", ")", ",", ":", "]", "]", "\n", "", "batch_label_list", "=", "[", "batch_label", "]", "*", "3", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_list", "[", "i", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_list", "[", "i", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "elif", "FCN", "==", "6", ":", "\n", "                ", "if", "height", ">", "width", ":", "\n", "                    ", "assert", "(", "width", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "1", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "1", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "2", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "2", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "3", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "3", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "4", ")", ":", "(", "(", "height", "-", "FULL_SIZE", ")", "//", "5", "*", "4", "+", "FULL_SIZE", ")", ",", ":", ",", ":", "]", ",", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "height", "==", "FULL_SIZE", ")", "\n", "batch_data_list", "=", "[", "batch_data", "[", ":", ",", ":", ",", ":", ",", ":", "FULL_SIZE", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "-", "FULL_SIZE", ":", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "1", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "1", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "2", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "2", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "3", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "3", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "batch_data", "[", ":", ",", ":", ",", ":", ",", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "4", ")", ":", "(", "(", "width", "-", "FULL_SIZE", ")", "//", "5", "*", "4", "+", "FULL_SIZE", ")", ",", ":", "]", ",", "]", "\n", "", "batch_label_list", "=", "[", "batch_label", "]", "*", "6", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data_list", "[", "i", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label_list", "[", "i", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "preds", ".", "append", "(", "pred_val", ")", "\n", "", "pred_val", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "feed_dict", "=", "{", "ops", "[", "'video_pl'", "]", ":", "batch_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "batch_label", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "\n", "pred_val", "=", "sess", ".", "run", "(", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "", "pred_val", "=", "np", ".", "exp", "(", "pred_val", "-", "np", ".", "max", "(", "pred_val", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "pred_val", "=", "pred_val", "/", "np", ".", "sum", "(", "pred_val", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "pred_val", "=", "np", ".", "mean", "(", "pred_val", ",", "axis", "=", "0", ")", "\n", "\n", "pred_val_top5", "=", "np", ".", "argsort", "(", "pred_val", ")", "[", ":", ":", "-", "1", "]", "[", ":", "5", "]", "\n", "pred_val_top1", "=", "np", ".", "argmax", "(", "pred_val", ")", "\n", "\n", "total_seen", "+=", "1", "\n", "log_string", "(", "'%s:%s'", "%", "(", "video_ids", "[", "batch_idx", "]", ",", "pred_val_top5", ")", ")", "\n", "pred_vals", "[", "video_ids", "[", "batch_idx", "]", "]", "=", "pred_val", "\n", "\n", "", "pickle", ".", "dump", "(", "pred_vals", ",", "open", "(", "os", ".", "path", ".", "join", "(", "DUMP_DIR", ",", "'pred_vals.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu": [[10, 23], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ",", "use_fp16", "=", "False", ",", "trainable", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create a Variable stored on CPU memory.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    initializer: initializer for Variable\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "    ", "dtype", "=", "tf", ".", "float16", "if", "use_fp16", "else", "tf", ".", "float32", "\n", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ",", "dtype", "=", "dtype", ",", "trainable", "=", "trainable", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay": [[24, 53], ["tf_util._variable_on_cpu", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu"], ["", "def", "_variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ",", "initializer", "=", "'msra'", ",", "trainable", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n  Note that the Variable is initialized with a truncated normal distribution.\n  A weight decay is added only if one is specified.\n\n  Args:\n    name: name of the variable\n    shape: list of ints\n    stddev: standard deviation of a truncated Gaussian\n    wd: add L2Loss weight decay multiplied by this float. If None, weight\n        decay is not added for this Variable.\n    initializer: which initializer to use\n\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "if", "initializer", "==", "'xavier'", ":", "\n", "    ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "elif", "initializer", "==", "'msra'", ":", "\n", "    ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", ")", "\n", "", "else", ":", "\n", "    ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "var", "=", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ",", "trainable", "=", "trainable", ")", "\n", "if", "trainable", ":", "\n", "    ", "if", "wd", "is", "not", "None", ":", "\n", "      ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv1d": [[55, 122], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv1d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv1d", "activation_fn", "inputs.get_shape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv1d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv1d"], ["", "def", "conv1d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "initializer", "=", "'msra'", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" 1D convolution with non-linear operation.\n\n  Args:\n    inputs: 3-D tensor variable BxLxC\n    num_output_channels: int\n    kernel_size: int\n    scope: string\n    stride: int\n    padding: 'SAME' or 'VALID'\n    data_format: 'NHWC' or 'NCHW'\n    initializer: which initializer to use\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "assert", "(", "data_format", "==", "'NHWC'", "or", "data_format", "==", "'NCHW'", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "      ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "      ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "", "kernel_shape", "=", "[", "kernel_size", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "initializer", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv1d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "\n", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv2d": [[126, 195], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv2d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv2d", "activation_fn", "inputs.get_shape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv2d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "initializer", "=", "'msra'", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" 2D convolution with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    data_format: 'NHWC' or 'NCHW'\n    initializer: which initializer to use\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "assert", "(", "data_format", "==", "'NHWC'", "or", "data_format", "==", "'NCHW'", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "initializer", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ",", "\n", "trainable", "=", "trainable", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "\n", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv2d_transpose": [[197, 279], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tf_util.conv2d_transpose.get_deconv_dim"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay"], ["", "", "def", "conv2d_transpose", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "initializer", "=", "'msra'", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" 2D convolution transpose with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    initializer: which initializer to use\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n\n  Note: conv2d(conv2d_transpose(a, num_out, ksize, stride), a.shape[-1], ksize, stride) == a\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_output_channels", ",", "num_in_channels", "]", "# reversed to conv2d", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "initializer", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ",", "\n", "trainable", "=", "trainable", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "\n", "# from slim.convolution2d_transpose", "\n", "def", "get_deconv_dim", "(", "dim_size", ",", "stride_size", ",", "kernel_size", ",", "padding", ")", ":", "\n", "          ", "dim_size", "*=", "stride_size", "\n", "\n", "if", "padding", "==", "'VALID'", "and", "dim_size", "is", "not", "None", ":", "\n", "            ", "dim_size", "+=", "max", "(", "kernel_size", "-", "stride_size", ",", "0", ")", "\n", "", "return", "dim_size", "\n", "\n", "# caculate output shape", "\n", "", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "height", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "width", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "out_height", "=", "get_deconv_dim", "(", "height", ",", "stride_h", ",", "kernel_h", ",", "padding", ")", "\n", "out_width", "=", "get_deconv_dim", "(", "width", ",", "stride_w", ",", "kernel_w", ",", "padding", ")", "\n", "output_shape", "=", "[", "batch_size", ",", "out_height", ",", "out_width", ",", "num_output_channels", "]", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "kernel", ",", "output_shape", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "\n", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d": [[282, 343], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv3d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv3d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv3d"], ["", "", "def", "conv3d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "initializer", "=", "'msra'", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" 3D convolution with non-linear operation.\n\n  Args:\n    inputs: 5-D tensor variable BxDxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 3 ints\n    scope: string\n    stride: a list of 3 ints\n    padding: 'SAME' or 'VALID'\n    initializer: which initializer to use\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "initializer", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ",", "\n", "trainable", "=", "trainable", ")", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv3d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv3d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected": [[344, 384], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.matmul", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_fc", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_fc"], ["", "", "def", "fully_connected", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "scope", ",", "\n", "initializer", "=", "'msra'", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" Fully connected layer with non-linear operation.\n\n  Args:\n    inputs: 2-D tensor BxN\n    num_outputs: int\n\n  Returns:\n    Variable tensor of size B x num_outputs.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_input_units", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "weights", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "[", "num_input_units", ",", "num_outputs", "]", ",", "\n", "initializer", "=", "initializer", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_outputs", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_fc", "(", "outputs", ",", "is_training", ",", "bn_decay", ",", "'bn'", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool2d": [[386, 410], ["tensorflow.variable_scope", "tensorflow.nn.max_pool"], "function", ["None"], ["", "", "def", "max_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D max pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.avg_pool2d": [[411, 435], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "", "def", "avg_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D avg pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d": [[437, 461], ["tensorflow.variable_scope", "tensorflow.nn.max_pool3d"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d"], ["", "", "def", "max_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D max pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.avg_pool3d": [[462, 486], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool3d"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.avg_pool3d"], ["", "", "def", "avg_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D avg pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template_unused": [[488, 530], ["tensorflow.variable_scope", "tf_util._variable_on_cpu", "tf_util._variable_on_cpu", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.nn.batch_normalization", "tensorflow.variable_scope", "tensorflow.cond", "inputs.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.get_variable_scope", "tensorflow.control_dependencies", "tf.train.ExponentialMovingAverage.apply", "tensorflow.no_op", "tensorflow.identity", "tensorflow.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util._variable_on_cpu"], ["", "", "def", "batch_norm_template_unused", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "  ", "\"\"\" NOTE: this is older version of the util func. it is deprecated.\n  Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n\n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "_variable_on_cpu", "(", "name", "=", "'beta'", ",", "shape", "=", "[", "num_channels", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "gamma", "=", "_variable_on_cpu", "(", "name", "=", "'gamma'", ",", "shape", "=", "[", "num_channels", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "decay", ")", "\n", "# Operator that maintains moving averages of variables.", "\n", "# Need to set reuse=False, otherwise if reuse, will see moments_1/mean/ExponentialMovingAverage/ does not exist", "\n", "# https://github.com/shekkizh/WassersteinGAN.tensorflow/issues/3", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "ema_apply_op", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "no_op", "(", ")", ")", "\n", "\n", "# Update moving average and return current batch's avg and var.", "\n", "", "def", "mean_var_with_update", "(", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "        ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "# ema.average returns the Variable holding the average of var.", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template": [[532, 558], ["tensorflow.contrib.layers.batch_norm", "tensorflow.constant"], "function", ["None"], ["", "def", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims_unused", ",", "bn_decay", ",", "freeze_bn", "=", "False", ",", "data_format", "=", "'NHWC'", ")", ":", "\n", "  ", "\"\"\" Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n\n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n      data_format:   'NHWC' or 'NCHW'\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "bn_decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "if", "freeze_bn", ":", "\n", "      ", "is_training_", "=", "tf", ".", "constant", "(", "False", ",", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "trainable", "=", "False", "\n", "", "else", ":", "\n", "      ", "is_training_", "=", "is_training", "\n", "trainable", "=", "True", "\n", "", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "inputs", ",", "\n", "center", "=", "True", ",", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training_", ",", "decay", "=", "bn_decay", ",", "updates_collections", "=", "None", ",", "\n", "scope", "=", "scope", ",", "\n", "data_format", "=", "data_format", ",", "trainable", "=", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_fc": [[560, 572], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_fc", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on FC data.\n\n  Args:\n      inputs:      Tensor, 2D BxC input\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "]", ",", "bn_decay", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv1d": [[574, 587], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv1d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "data_format", ",", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 1D convolutional maps.\n\n  Args:\n      inputs:      Tensor, 3D BLC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      data_format: 'NHWC' or 'NCHW'\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", "]", ",", "bn_decay", ",", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv2d": [[591, 604], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv2d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "data_format", ",", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 2D convolutional maps.\n\n  Args:\n      inputs:      Tensor, 4D BHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      data_format: 'NHWC' or 'NCHW'\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", "]", ",", "bn_decay", ",", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_for_conv3d": [[606, 618], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv3d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "freeze_bn", "=", "False", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 3D convolutional maps.\n\n  Args:\n      inputs:      Tensor, 5D BDHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bn_decay", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout": [[620, 642], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout"], ["", "def", "dropout", "(", "inputs", ",", "\n", "is_training", ",", "\n", "scope", ",", "\n", "keep_prob", "=", "0.5", ",", "\n", "noise_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\" Dropout layer.\n\n  Args:\n    inputs: tensor\n    is_training: boolean tf.Variable\n    scope: string\n    keep_prob: float in [0,1]\n    noise_shape: list of ints\n\n  Returns:\n    tensor variable\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "outputs", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "keep_prob", ",", "noise_shape", ")", ",", "\n", "lambda", ":", "inputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.check_ffmpeg_exists": [[20, 22], ["os.system"], "function", ["None"], ["", "def", "check_ffmpeg_exists", "(", ")", ":", "\n", "    ", "return", "os", ".", "system", "(", "'ffmpeg -version > /dev/null'", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.temp_dir_for_bursting": [[24, 31], ["str", "os.path.join", "os.makedirs", "shutil.rmtree", "random.getrandbits"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "temp_dir_for_bursting", "(", "shm_dir_path", "=", "'/dev/shm'", ")", ":", "\n", "    ", "hash_str", "=", "str", "(", "random", ".", "getrandbits", "(", "128", ")", ")", "\n", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "shm_dir_path", ",", "hash_str", ")", "\n", "os", ".", "makedirs", "(", "temp_dir", ")", "# creates error if paths conflict (unlikely)", "\n", "yield", "temp_dir", "\n", "shutil", ".", "rmtree", "(", "temp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.burst_frames_to_shm": [[33, 89], ["os.path.join", "gulpio_utils.FFMPEGNotFound", "sh.ffmpeg", "os.system", "sh.ffprobe", "str", "ffmpeg_args.insert", "ffmpeg_args.insert", "ffmpeg_args.insert", "ffmpeg_args.insert", "int", "vf_param.append", "ffmpeg_args.insert", "ffmpeg_args.insert", "str", "vf_param.append", "vf_param.append", "np.linspace().round().astype", "sh.ffprobe.split", "int", "int", "np.linspace().round", "np.linspace"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "burst_frames_to_shm", "(", "vid_path", ",", "temp_burst_dir", ",", "frame_size", "=", "-", "1", ",", "frame_rate", "=", "-", "1", ",", "frame_uniform", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    - To burst frames in a temporary directory in shared memory.\n    - Directory name is chosen as random 128 bits so as to avoid clash\n      during parallelization\n    - Returns path to directory containing frames for the specific video\n    \"\"\"", "\n", "target_mask", "=", "os", ".", "path", ".", "join", "(", "temp_burst_dir", ",", "'%06d.bmp'", ")", "\n", "if", "not", "os", ".", "system", "(", "'ffmpeg -version > /dev/null'", ")", "==", "0", ":", "\n", "        ", "raise", "FFMPEGNotFound", "(", ")", "\n", "", "try", ":", "\n", "        ", "if", "frame_size", ">", "0", "or", "frame_uniform", ">", "0", ":", "\n", "            ", "ffprobe_args", "=", "[", "\n", "'-v'", ",", "'error'", ",", "\n", "'-count_frames'", ",", "\n", "'-of'", ",", "'default=nokey=1:noprint_wrappers=1'", ",", "\n", "'-select_streams'", ",", "'v:0'", ",", "\n", "'-show_entries'", ",", "'stream=width,height,nb_read_frames'", ",", "\n", "vid_path", "\n", "]", "\n", "output", "=", "sh", ".", "ffprobe", "(", "ffprobe_args", ")", "\n", "[", "width_src", ",", "height_src", ",", "total_frames", "]", "=", "[", "int", "(", "o", ")", "for", "o", "in", "output", ".", "split", "(", ")", "[", "-", "3", ":", "]", "]", "\n", "\n", "vf_param", "=", "[", "]", "\n", "if", "frame_size", ">", "0", ":", "\n", "                ", "if", "height_src", "<", "width_src", ":", "\n", "                    ", "vf_param", ".", "append", "(", "'scale=-1:{}'", ".", "format", "(", "int", "(", "frame_size", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "vf_param", ".", "append", "(", "'scale={}:-1'", ".", "format", "(", "int", "(", "frame_size", ")", ")", ")", "\n", "", "", "if", "frame_uniform", ">", "0", ":", "\n", "                ", "if", "frame_uniform", "==", "1", ":", "# select the middle frame", "\n", "                    ", "frames_to_sample", "=", "[", "(", "total_frames", "+", "1", ")", "//", "2", "]", "\n", "", "else", ":", "\n", "                    ", "frames_to_sample", "=", "np", ".", "linspace", "(", "1", ",", "total_frames", "-", "1", ",", "frame_uniform", ")", ".", "round", "(", ")", ".", "astype", "(", "int", ")", "\n", "", "select_param", "=", "'+'", ".", "join", "(", "[", "'eq(n\\,{})'", ".", "format", "(", "n", ")", "for", "n", "in", "frames_to_sample", "]", ")", "\n", "vf_param", ".", "append", "(", "'select='", "+", "select_param", ")", "\n", "\n", "", "", "ffmpeg_args", "=", "[", "\n", "'-i'", ",", "vid_path", ",", "\n", "'-q:v'", ",", "str", "(", "1", ")", ",", "\n", "'-f'", ",", "'image2'", ",", "\n", "target_mask", ",", "\n", "]", "\n", "if", "frame_size", ">", "0", "or", "frame_uniform", ">", "0", ":", "\n", "            ", "ffmpeg_args", ".", "insert", "(", "2", ",", "'-vf'", ")", "\n", "ffmpeg_args", ".", "insert", "(", "3", ",", "','", ".", "join", "(", "vf_param", ")", ")", "\n", "if", "frame_uniform", ">", "0", ":", "\n", "                ", "ffmpeg_args", ".", "insert", "(", "4", ",", "'-vsync'", ")", "\n", "ffmpeg_args", ".", "insert", "(", "5", ",", "'vfr'", ")", "\n", "", "", "if", "frame_rate", ">", "0", ":", "\n", "            ", "ffmpeg_args", ".", "insert", "(", "2", ",", "'-r'", ")", "\n", "ffmpeg_args", ".", "insert", "(", "3", ",", "str", "(", "frame_rate", ")", ")", "\n", "\n", "", "sh", ".", "ffmpeg", "(", "*", "ffmpeg_args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "pass", "\n", "#print(repr(e))", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.burst_video_into_frames": [[91, 95], ["gulpio_utils.burst_frames_to_shm", "gulpio_utils.find_images_in_folder"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.burst_frames_to_shm", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.find_images_in_folder"], ["", "", "def", "burst_video_into_frames", "(", "vid_path", ",", "temp_burst_dir", ",", "frame_size", "=", "-", "1", ",", "frame_rate", "=", "-", "1", ",", "frame_uniform", "=", "-", "1", ")", ":", "\n", "    ", "burst_frames_to_shm", "(", "vid_path", ",", "temp_burst_dir", ",", "frame_size", "=", "frame_size", ",", "\n", "frame_rate", "=", "frame_rate", ",", "frame_uniform", "=", "frame_uniform", ")", "\n", "return", "find_images_in_folder", "(", "temp_burst_dir", ",", "formats", "=", "[", "'bmp'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.cvt_bgr2rgb": [[106, 109], ["cv2.cvtColor"], "function", ["None"], ["", "def", "cvt_bgr2rgb", "(", "imgs", ")", ":", "\n", "    ", "for", "img", "in", "imgs", ":", "\n", "        ", "yield", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_images": [[110, 119], ["cv2.imread", "gulpio_utils.ImageNotFound", "gulpio_utils.resize_by_short_edge"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_by_short_edge"], ["", "", "def", "resize_images", "(", "imgs", ",", "img_size", "=", "-", "1", ")", ":", "\n", "    ", "for", "img", "in", "imgs", ":", "\n", "        ", "img_path", "=", "img", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "IMREAD_ANYCOLOR", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "raise", "ImageNotFound", "(", "\"Image is  None from path:{}\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "if", "img_size", ">", "0", ":", "\n", "            ", "img", "=", "resize_by_short_edge", "(", "img", ",", "img_size", ")", "\n", "", "yield", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_by_short_edge": [[121, 139], ["isinstance", "cv2.imread", "int", "cv2.resize", "int", "cv2.resize", "gulpio_utils.ImageNotFound", "float", "float"], "function", ["None"], ["", "", "def", "resize_by_short_edge", "(", "img", ",", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "img", ",", "str", ")", ":", "\n", "        ", "img_path", "=", "img", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "cv2", ".", "IMREAD_ANYCOLOR", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "raise", "ImageNotFound", "(", "\"Image read None from path \"", ",", "img_path", ")", "\n", "", "", "if", "size", "<", "1", ":", "\n", "        ", "return", "img", "\n", "", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "if", "h", "<", "w", ":", "\n", "        ", "scale", "=", "w", "/", "float", "(", "h", ")", "\n", "new_width", "=", "int", "(", "size", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "new_width", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "scale", "=", "h", "/", "float", "(", "w", ")", "\n", "new_height", "=", "int", "(", "size", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "size", ",", "new_height", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.find_images_in_folder": [[145, 151], ["sorted", "glob.glob", "images.extend"], "function", ["None"], ["", "def", "find_images_in_folder", "(", "folder", ",", "formats", "=", "[", "'jpg'", "]", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "format_", "in", "formats", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "'{}/*.{}'", ".", "format", "(", "folder", ",", "format_", ")", ")", "\n", "images", ".", "extend", "(", "files", ")", "\n", "", "return", "sorted", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.find_files_in_subfolders": [[152, 167], ["os.walk", "sorted", "formats_new.append", "formats_new.append", "os.path.join", "os.path.join.endswith", "videos.append"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "find_files_in_subfolders", "(", "folder", ",", "formats", "=", "[", "'mp4'", "]", ")", ":", "\n", "    ", "formats_new", "=", "[", "]", "\n", "for", "format_", "in", "formats", ":", "\n", "        ", "if", "format_", "[", "0", "]", "==", "'.'", ":", "\n", "            ", "formats_new", ".", "append", "(", "format_", ")", "\n", "", "else", ":", "\n", "            ", "formats_new", ".", "append", "(", "'.'", "+", "format_", ")", "\n", "", "", "videos", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "folder", ",", "followlinks", "=", "True", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "fullpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "\n", "for", "format_", "in", "formats_new", ":", "\n", "                ", "if", "fullpath", ".", "endswith", "(", "format_", ")", ":", "\n", "                    ", "videos", ".", "append", "(", "fullpath", ")", "\n", "", "", "", "", "return", "sorted", "(", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.is_chunk_valid": [[172, 188], ["os.path.exists", "os.path.exists", "os.stat", "os.stat", "len", "len", "next", "reversed", "list", "chunk.meta_dict.keys"], "function", ["None"], ["", "def", "is_chunk_valid", "(", "chunk", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "chunk", ".", "data_file_path", ")", "and", "os", ".", "path", ".", "exists", "(", "chunk", ".", "meta_file_path", ")", ":", "\n", "            ", "data_file_size", "=", "os", ".", "stat", "(", "chunk", ".", "data_file_path", ")", ".", "st_size", "\n", "meta_file_size", "=", "os", ".", "stat", "(", "chunk", ".", "meta_file_path", ")", ".", "st_size", "\n", "if", "data_file_size", ">", "0", "and", "meta_file_size", ">", "0", ":", "\n", "                ", "if", "len", "(", "chunk", ".", "meta_dict", "[", "list", "(", "chunk", ".", "meta_dict", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "]", "[", "'meta_data'", "]", ")", "==", "1", ":", "\n", "                    ", "frame_info", "=", "chunk", ".", "meta_dict", "[", "next", "(", "reversed", "(", "chunk", ".", "meta_dict", ")", ")", "]", "[", "'frame_info'", "]", "\n", "num_frames", "=", "len", "(", "frame_info", ")", "\n", "last_frame_info", "=", "frame_info", "[", "-", "1", "]", "\n", "data_file_size_from_meta", "=", "last_frame_info", "[", "0", "]", "+", "last_frame_info", "[", "2", "]", "\n", "if", "data_file_size", "==", "data_file_size_from_meta", ":", "\n", "                        ", "return", "num_frames", "\n", "", "", "", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "return", "-", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.__init__": [[25, 36], ["GulpAdapter.GulpAdapter.write_label2idx_dict", "GulpAdapter.GulpAdapter.get_video_list", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.write_label2idx_dict", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_video_list", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load"], ["def", "__init__", "(", "self", ",", "json_file", ",", "input_path", ",", "output_path", ",", "\n", "frame_size", "=", "-", "1", ",", "frame_rate", "=", "-", "1", ",", "shm_dir_path", "=", "'/dev/shm'", ")", ":", "\n", "        ", "self", ".", "input_path", "=", "input_path", "\n", "self", ".", "output_path", "=", "output_path", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "json_storage", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "write_label2idx_dict", "(", ")", "\n", "self", ".", "data", "=", "self", ".", "get_video_list", "(", ")", "\n", "self", ".", "frame_size", "=", "frame_size", "\n", "self", ".", "frame_rate", "=", "frame_rate", "\n", "self", ".", "shm_dir_path", "=", "shm_dir_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_chunk_path": [[40, 46], ["GulpAdapter.GulpAdapter.json_storage.get", "os.path.join", "[].split", "video_file.split"], "methods", ["None"], ["", "def", "get_chunk_path", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_file", "=", "self", ".", "data", "[", "index", "]", "\n", "vid_id", "=", "video_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "meta_json", "=", "self", ".", "json_storage", ".", "get", "(", "vid_id", ")", "\n", "chunk_path", "=", "os", ".", "path", ".", "join", "(", "meta_json", "[", "'annotations'", "]", "[", "'label'", "]", ",", "vid_id", ")", "\n", "return", "chunk_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_data": [[47, 59], ["GulpAdapter.GulpAdapter.get_bursted_frames", "GulpAdapter.GulpAdapter.json_storage.get", "[].split", "video_file.split"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_bursted_frames"], ["", "def", "get_data", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_file", "=", "self", ".", "data", "[", "index", "]", "\n", "frames", "=", "self", ".", "get_bursted_frames", "(", "video_file", ")", "\n", "# this is due to current file names of trimmed videos", "\n", "vid_id", "=", "video_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "meta_json", "=", "self", ".", "json_storage", ".", "get", "(", "vid_id", ")", "\n", "meta", "=", "{", "'label'", ":", "meta_json", "[", "'annotations'", "]", "[", "'label'", "]", ",", "\n", "'subset'", ":", "meta_json", "[", "'subset'", "]", "}", "\n", "result", "=", "{", "'meta'", ":", "meta", ",", "\n", "'frames'", ":", "frames", ",", "\n", "'id'", ":", "vid_id", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.write_label2idx_dict": [[60, 65], ["sorted", "json.dump", "set", "open", "enumerate", "os.path.join", "GulpAdapter.GulpAdapter.json_storage.items"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.dump", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open"], ["", "def", "write_label2idx_dict", "(", "self", ")", ":", "\n", "        ", "labels", "=", "sorted", "(", "set", "(", "[", "meta", "[", "'annotations'", "]", "[", "'label'", "]", "for", "video_id", ",", "meta", "in", "self", ".", "json_storage", ".", "items", "(", ")", "]", ")", ")", "\n", "label2idx", "=", "{", "label", ":", "label_counter", "for", "label_counter", ",", "label", "in", "enumerate", "(", "labels", ")", "}", "\n", "json", ".", "dump", "(", "label2idx", ",", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "'label2idx.json'", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_video_list": [[66, 72], ["gulpio.find_files_in_subfolders", "sorted", "GulpAdapter.GulpAdapter.json_storage.get", "[].split", "v.split"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.find_files_in_subfolders"], ["", "def", "get_video_list", "(", "self", ")", ":", "\n", "        ", "video_list", "=", "gutils", ".", "find_files_in_subfolders", "(", "self", ".", "input_path", ",", "[", "'mp4'", "]", ")", "\n", "# remove video if there is no corresponding json item", "\n", "video_list", "=", "[", "v", "for", "v", "in", "video_list", "\n", "if", "self", ".", "json_storage", ".", "get", "(", "v", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "]", "\n", "return", "sorted", "(", "video_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_bursted_frames": [[73, 79], ["os.path.join", "gulpio.temp_dir_for_bursting", "gulpio.burst_video_into_frames", "list", "gulpio.cvt_bgr2rgb", "gulpio.resize_images"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.temp_dir_for_bursting", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.burst_video_into_frames", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.cvt_bgr2rgb", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_images"], ["", "def", "get_bursted_frames", "(", "self", ",", "vid_file", ")", ":", "\n", "        ", "vid_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_path", ",", "vid_file", ")", "\n", "with", "gutils", ".", "temp_dir_for_bursting", "(", "self", ".", "shm_dir_path", ")", "as", "temp_burst_dir", ":", "\n", "            ", "frame_paths", "=", "gutils", ".", "burst_video_into_frames", "(", "vid_file", ",", "temp_burst_dir", ",", "frame_rate", "=", "self", ".", "frame_rate", ")", "\n", "frames", "=", "list", "(", "gutils", ".", "cvt_bgr2rgb", "(", "gutils", ".", "resize_images", "(", "frame_paths", ",", "self", ".", "frame_size", ")", ")", ")", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.AbstractDatasetAdapter.get_data": [[46, 49], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get_data", "(", "self", ",", "index", "=", "None", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.AbstractDatasetAdapter.__len__": [[50, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.AbstractSerializer.load": [[61, 64], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "load", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.AbstractSerializer.dump": [[65, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "dump", "(", "self", ",", "thing", ",", "file_name", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load": [[71, 74], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load"], ["    ", "def", "load", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "file_pointer", ":", "\n", "            ", "return", "json", ".", "load", "(", "file_pointer", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.dump": [[75, 78], ["open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.dump"], ["", "", "def", "dump", "(", "self", ",", "thing", ",", "file_name", ")", ":", "\n", "        ", "with", "open", "(", "file_name", ",", "'w'", ")", "as", "file_pointer", ":", "\n", "            ", "json", ".", "dump", "(", "thing", ",", "file_pointer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpDirectory.__init__": [[103, 124], ["sorted", "print", "enumerate", "print", "gulpio.gulpio_utils.find_files_in_subfolders", "os.path.exists", "len", "gulpio.GulpChunk", "gulpio.GulpDirectory.merged_meta_dict.update", "len", "gulpio.GulpDirectory.valid_chunk_paths.append", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.find_files_in_subfolders", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.update", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["def", "__init__", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "data_paths", "=", "sorted", "(", "find_files_in_subfolders", "(", "self", ".", "output_dir", ",", "[", "EXT_DATA", "]", ")", ")", "\n", "\n", "self", ".", "valid_chunk_paths", "=", "[", "]", "\n", "for", "data_path", "in", "data_paths", ":", "\n", "            ", "chunk_path", "=", "data_path", "[", ":", "-", "len", "(", "EXT_DATA", ")", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "chunk_path", "+", "EXT_META", ")", ":", "\n", "                ", "self", ".", "valid_chunk_paths", ".", "append", "(", "chunk_path", ")", "\n", "", "", "print", "(", "'# of valid gulp chuks:'", ",", "len", "(", "self", ".", "valid_chunk_paths", ")", ")", "\n", "\n", "self", ".", "_all_chunks", "=", "[", "GulpChunk", "(", "chunk_path", ")", "for", "chunk_path", "in", "sorted", "(", "self", ".", "valid_chunk_paths", ")", "]", "\n", "self", ".", "_chunk_lookup", "=", "{", "}", "\n", "self", ".", "merged_meta_dict", "=", "{", "}", "\n", "for", "idx", ",", "gulp_chunk", "in", "enumerate", "(", "self", ".", "_all_chunks", ")", ":", "\n", "            ", "for", "id_", "in", "gulp_chunk", ".", "meta_dict", ":", "\n", "                ", "assert", "id_", "not", "in", "self", ".", "merged_meta_dict", ",", "\"Duplicate id detected {}\"", ".", "format", "(", "id_", ")", "\n", "self", ".", "_chunk_lookup", "[", "id_", "]", "=", "idx", "\n", "", "self", ".", "merged_meta_dict", ".", "update", "(", "gulp_chunk", ".", "meta_dict", ")", "\n", "", "print", "(", "'# of valid videos:'", ",", "len", "(", "self", ".", "merged_meta_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpDirectory.__getitem__": [[125, 130], ["gulp_chunk.open", "gulp_chunk.read_frames"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.read_frames"], ["", "def", "__getitem__", "(", "self", ",", "element", ")", ":", "\n", "        ", "id_", ",", "slice_", "=", "element", "\n", "gulp_chunk", "=", "self", ".", "_all_chunks", "[", "self", ".", "_chunk_lookup", "[", "id_", "]", "]", "\n", "with", "gulp_chunk", ".", "open", "(", ")", ":", "\n", "            ", "return", "gulp_chunk", ".", "read_frames", "(", "id_", ",", "slice_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpDirectory._load_label_dict": [[131, 133], ["json.load", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open"], ["", "", "def", "_load_label_dict", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'label2idx.json'", ")", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.__init__": [[149, 156], ["gulpio.GulpChunk._get_or_create_dict"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._get_or_create_dict"], ["def", "__init__", "(", "self", ",", "chunk_path", ",", "\n", "serializer", "=", "json_serializer", ")", ":", "\n", "        ", "self", ".", "serializer", "=", "serializer", "\n", "self", ".", "data_file_path", "=", "chunk_path", "+", "EXT_DATA", "\n", "self", ".", "meta_file_path", "=", "chunk_path", "+", "EXT_META", "\n", "self", ".", "meta_dict", "=", "self", ".", "_get_or_create_dict", "(", ")", "\n", "self", ".", "fp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.reset_meta": [[157, 159], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "reset_meta", "(", "self", ")", ":", "\n", "        ", "self", ".", "meta_dict", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._get_frame_infos": [[160, 166], ["str", "dict", "ImgInfo"], "methods", ["None"], ["", "def", "_get_frame_infos", "(", "self", ",", "id_", ")", ":", "\n", "        ", "id_", "=", "str", "(", "id_", ")", "\n", "if", "id_", "in", "self", ".", "meta_dict", ":", "\n", "            ", "return", "(", "[", "ImgInfo", "(", "*", "info", ")", "\n", "for", "info", "in", "self", ".", "meta_dict", "[", "id_", "]", "[", "'frame_info'", "]", "]", ",", "\n", "dict", "(", "self", ".", "meta_dict", "[", "id_", "]", "[", "'meta_data'", "]", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._get_or_create_dict": [[167, 176], ["os.path.exists", "collections.OrderedDict", "gulpio.GulpChunk.serializer.load", "print", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load"], ["", "", "def", "_get_or_create_dict", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "meta_file_path", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "self", ".", "serializer", ".", "load", "(", "self", ".", "meta_file_path", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"Failed to load the metadata:\"", ",", "self", ".", "meta_file_path", ")", "\n", "return", "OrderedDict", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._default_factory": [[177, 180], ["collections.OrderedDict"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_default_factory", "(", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'frame_info'", ",", "[", "]", ")", ",", "(", "'meta_data'", ",", "[", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._pad_image": [[181, 184], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_pad_image", "(", "number", ")", ":", "\n", "        ", "return", "(", "4", "-", "(", "number", "%", "4", ")", ")", "%", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._append_meta": [[185, 190], ["str", "[].append", "gulpio.GulpChunk._default_factory"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._default_factory"], ["", "def", "_append_meta", "(", "self", ",", "id_", ",", "meta_data", ")", ":", "\n", "        ", "id_", "=", "str", "(", "id_", ")", "\n", "if", "id_", "not", "in", "self", ".", "meta_dict", ":", "# implements an OrderedDefaultDict", "\n", "            ", "self", ".", "meta_dict", "[", "id_", "]", "=", "self", ".", "_default_factory", "(", ")", "\n", "", "self", ".", "meta_dict", "[", "id_", "]", "[", "'meta_data'", "]", ".", "append", "(", "meta_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._write_frame": [[191, 206], ["gulpio.GulpChunk.fp.tell", "[].tostring", "gulpio.GulpChunk._pad_image", "[].tostring.ljust", "ImgInfo", "str", "[].append", "gulpio.GulpChunk.fp.write", "len", "len", "len", "gulpio.GulpChunk._default_factory", "len", "len", "cv2.imencode"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._pad_image", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._default_factory"], ["", "def", "_write_frame", "(", "self", ",", "id_", ",", "image", ")", ":", "\n", "        ", "loc", "=", "self", ".", "fp", ".", "tell", "(", ")", "\n", "img_str", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "image", ")", "[", "1", "]", ".", "tostring", "(", ")", "\n", "assert", "len", "(", "img_str", ")", ">", "0", "\n", "pad", "=", "self", ".", "_pad_image", "(", "len", "(", "img_str", ")", ")", "\n", "record", "=", "img_str", ".", "ljust", "(", "len", "(", "img_str", ")", "+", "pad", ",", "b'\\0'", ")", "\n", "assert", "len", "(", "record", ")", ">", "0", "\n", "img_info", "=", "ImgInfo", "(", "loc", "=", "loc", ",", "\n", "length", "=", "len", "(", "record", ")", ",", "\n", "pad", "=", "pad", ")", "\n", "id_", "=", "str", "(", "id_", ")", "\n", "if", "id_", "not", "in", "self", ".", "meta_dict", ":", "# implements an OrderedDefaultDict", "\n", "            ", "self", ".", "meta_dict", "[", "id_", "]", "=", "self", ".", "_default_factory", "(", ")", "\n", "", "self", ".", "meta_dict", "[", "id_", "]", "[", "'frame_info'", "]", ".", "append", "(", "img_info", ")", "\n", "self", ".", "fp", ".", "write", "(", "record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._write_frames": [[207, 210], ["gulpio.GulpChunk._write_frame"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._write_frame"], ["", "def", "_write_frames", "(", "self", ",", "id_", ",", "frames", ")", ":", "\n", "        ", "for", "frame", "in", "frames", ":", "\n", "            ", "self", ".", "_write_frame", "(", "id_", ",", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open": [[211, 240], ["gulpio.GulpChunk.fp.close", "os.path.dirname", "os.makedirs", "gulpio.GulpChunk.open"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open"], ["", "", "@", "contextmanager", "\n", "def", "open", "(", "self", ",", "flag", "=", "'rb'", ")", ":", "\n", "        ", "\"\"\"Open the gulp chunk for reading.\n\n        Parameters\n        ----------\n        flag: (str)\n            'rb': Read binary\n            'wb': Write binary\n            'ab': Append to binary\n\n        Notes\n        -----\n        Works as a context manager but returns None.\n\n        \"\"\"", "\n", "if", "flag", "in", "[", "'wb'", ",", "'ab'", "]", ":", "\n", "            ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "data_file_path", ")", "\n", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "fp", "=", "open", "(", "self", ".", "data_file_path", ",", "flag", ")", "\n", "", "elif", "flag", "in", "[", "'rb'", "]", ":", "\n", "            ", "self", ".", "fp", "=", "open", "(", "self", ".", "data_file_path", ",", "flag", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "\"This file does not support the mode: '{}'\"", ".", "format", "(", "flag", ")", "\n", "raise", "NotImplementedError", "(", "m", ")", "\n", "", "yield", "\n", "if", "flag", "in", "[", "'wb'", ",", "'ab'", "]", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "", "self", ".", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush": [[241, 245], ["gulpio.GulpChunk.fp.flush", "gulpio.GulpChunk.serializer.dump"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.flush", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.dump"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "\"\"\"Flush all buffers and write the meta file.\"\"\"", "\n", "self", ".", "fp", ".", "flush", "(", ")", "\n", "self", ".", "serializer", ".", "dump", "(", "self", ".", "meta_dict", ",", "self", ".", "meta_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append": [[246, 262], ["gulpio.GulpChunk._write_frames", "gulpio.GulpChunk._append_meta"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._write_frames", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._append_meta"], ["", "def", "append", "(", "self", ",", "id_", ",", "meta_data", ",", "frames", ")", ":", "\n", "        ", "\"\"\" Append an item to the gulp.\n\n        Parameters\n        ----------\n        id_ : (str)\n            The ID of the item\n        meta_data: (dict)\n            The meta-data associated with the item.\n        frames: (list of numpy arrays)\n            The frames of the item as a list of numpy dictionaries consisting\n            of image pixel values.\n\n        \"\"\"", "\n", "self", ".", "_write_frames", "(", "id_", ",", "frames", ")", "\n", "self", ".", "_append_meta", "(", "id_", ",", "meta_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.read_frames": [[263, 299], ["gulpio.GulpChunk._get_frame_infos", "isinstance", "slice", "gulpio.GulpChunk.fp.seek", "gulpio.GulpChunk.fp.read", "numpy.fromstring", "cv2.imdecode", "len", "gulpio.GulpChunk.read_frames.extract_frame"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk._get_frame_infos"], ["", "def", "read_frames", "(", "self", ",", "id_", ",", "slice_", "=", "None", ")", ":", "\n", "        ", "\"\"\" Read frames for a single item.\n\n        Parameters\n        ----------\n        id_: (str)\n            The ID of the item\n        slice_: (slice:\n            A slice with which to select frames.\n        Returns\n        -------\n        frames (int), meta(dict)\n            The frames of the item as a list of numpy arrays consisting of\n            image pixel values. And the metadata.\n\n        \"\"\"", "\n", "frame_infos", ",", "meta_data", "=", "self", ".", "_get_frame_infos", "(", "id_", ")", "\n", "frames", "=", "[", "]", "\n", "slice_element", "=", "slice_", "or", "slice", "(", "0", ",", "len", "(", "frame_infos", ")", ")", "\n", "\n", "def", "extract_frame", "(", "frame_info", ")", ":", "\n", "            ", "self", ".", "fp", ".", "seek", "(", "frame_info", ".", "loc", ")", "\n", "record", "=", "self", ".", "fp", ".", "read", "(", "frame_info", ".", "length", ")", "\n", "img_str", "=", "record", "[", ":", "len", "(", "record", ")", "-", "frame_info", ".", "pad", "]", "\n", "nparr", "=", "np", ".", "fromstring", "(", "img_str", ",", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "nparr", ",", "cv2", ".", "IMREAD_ANYCOLOR", ")", "\n", "# if img.ndim > 2:", "\n", "#     img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)", "\n", "return", "img", "\n", "", "if", "isinstance", "(", "slice_element", ",", "slice", ")", ":", "\n", "            ", "frames", "=", "[", "extract_frame", "(", "frame_info", ")", "\n", "for", "frame_info", "in", "frame_infos", "[", "slice_element", "]", "]", "\n", "", "else", ":", "\n", "            ", "frames", "=", "[", "extract_frame", "(", "frame_infos", "[", "element", "]", ")", "\n", "for", "element", "in", "slice_element", "if", "len", "(", "frame_infos", ")", ">", "element", "]", "\n", "", "return", "frames", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.ChunkWriter.__init__": [[311, 315], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "adapter", ",", "skip_exist", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "adapter", "=", "adapter", "\n", "self", ".", "skip_exist", "=", "skip_exist", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.ChunkWriter.write_chunk": [[316, 343], ["gulpio.ChunkWriter.adapter.get_chunk_path", "gulpio.GulpChunk", "gulpio.ChunkWriter.adapter.get_data", "os.path.join", "gulpio.gulpio_utils.is_chunk_valid", "len", "gulpio.GulpChunk.reset_meta", "gulpio.GulpChunk.open", "gulpio.GulpChunk.append", "str", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.GulpAdapter.GulpAdapter.get_chunk_path", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.AbstractDatasetAdapter.get_data", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.is_chunk_valid", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.reset_meta", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "write_chunk", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Write from an input slice in the adapter to an output chunk.\n\n        Parameters\n        ----------\n        index: int\n           The number to use from the adapter.\n\n        \"\"\"", "\n", "chunk_path", "=", "self", ".", "adapter", ".", "get_chunk_path", "(", "index", ")", "\n", "output_chunk", "=", "GulpChunk", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "chunk_path", ")", ")", "\n", "if", "self", ".", "skip_exist", ":", "\n", "            ", "num_frames", "=", "is_chunk_valid", "(", "output_chunk", ")", "\n", "if", "num_frames", ">", "0", ":", "\n", "                ", "return", "(", "chunk_path", ",", "1", ",", "str", "(", "num_frames", ")", ")", "\n", "", "", "data", "=", "self", ".", "adapter", ".", "get_data", "(", "index", ")", "\n", "id_", "=", "data", "[", "'id'", "]", "\n", "meta_data", "=", "data", "[", "'meta'", "]", "\n", "frames", "=", "data", "[", "'frames'", "]", "\n", "if", "len", "(", "frames", ")", ">", "0", ":", "\n", "            ", "output_chunk", ".", "reset_meta", "(", ")", "\n", "with", "output_chunk", ".", "open", "(", "'wb'", ")", ":", "\n", "                ", "output_chunk", ".", "append", "(", "id_", ",", "meta_data", ",", "frames", ")", "\n", "", "return", "(", "chunk_path", ",", "1", ",", "str", "(", "len", "(", "frames", ")", ")", ")", "\n", "", "else", ":", "\n", "#print(\"Failed to write video with id: {}; no frames\".format(id_))", "\n", "            ", "return", "(", "chunk_path", ",", "0", ",", "str", "(", "len", "(", "frames", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpIngestor.__init__": [[358, 365], ["int", "os.path.join", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "adapter", ",", "output_path", ",", "num_workers", ",", "skip_exist", "=", "True", ")", ":", "\n", "        ", "assert", "int", "(", "num_workers", ")", ">", "0", "\n", "self", ".", "adapter", "=", "adapter", "\n", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "num_workers", "=", "int", "(", "num_workers", ")", "\n", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "'gulp_log.csv'", ")", "\n", "self", ".", "skip_exist", "=", "skip_exist", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpIngestor.__call__": [[366, 391], ["os.makedirs", "len", "min", "print", "gulpio.ChunkWriter", "max", "concurrent.futures.ProcessPoolExecutor", "open", "csv.writer", "executor.map", "tqdm.tqdm.tqdm", "open", "csv.writer", "tqdm.tqdm.tqdm", "range", "csv.writer.writerow", "range", "gulpio.ChunkWriter.write_chunk", "csv.writer.writerow"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.open", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.ChunkWriter.write_chunk"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "num_videos", "=", "len", "(", "self", ".", "adapter", ")", "\n", "chunk_size", "=", "min", "(", "500", ",", "max", "(", "1", ",", "num_videos", "//", "(", "10", "*", "self", ".", "num_workers", ")", ")", ")", "\n", "print", "(", "\"Number of Videos:\"", ",", "num_videos", ")", "\n", "chunk_writer", "=", "ChunkWriter", "(", "self", ".", "output_path", ",", "self", ".", "adapter", ",", "self", ".", "skip_exist", ")", "\n", "if", "self", ".", "num_workers", ">", "1", ":", "\n", "            ", "with", "ProcessPoolExecutor", "(", "max_workers", "=", "self", ".", "num_workers", ")", "as", "executor", ",", "open", "(", "self", ".", "log_path", ",", "'w'", ")", "as", "csv_file", ":", "\n", "                ", "csv_writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "result", "=", "executor", ".", "map", "(", "chunk_writer", ".", "write_chunk", ",", "range", "(", "num_videos", ")", ",", "chunksize", "=", "chunk_size", ")", "\n", "for", "status", "in", "tqdm", "(", "result", ",", "\n", "desc", "=", "'Chunks finished'", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", "total", "=", "num_videos", ")", ":", "\n", "                    ", "csv_writer", ".", "writerow", "(", "status", ")", "\n", "", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "log_path", ",", "'w'", ")", "as", "csv_file", ":", "\n", "                ", "csv_writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "num_videos", ")", ",", "\n", "desc", "=", "'Chunks finished'", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", "total", "=", "num_videos", ")", ":", "\n", "                    ", "status", "=", "chunk_writer", ".", "write_chunk", "(", "index", ")", "\n", "csv_writer", ".", "writerow", "(", "status", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.__init__": [[102, 107], ["saver_restore.CheckpointReaderAdapter._reader.get_variable_to_shape_map", "k.endswith", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_variable_to_shape_map"], ["def", "__init__", "(", "self", ",", "reader", ")", ":", "\n", "        ", "self", ".", "_reader", "=", "reader", "\n", "m", "=", "self", ".", "_reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "self", ".", "_map", "=", "{", "k", "if", "k", ".", "endswith", "(", "':0'", ")", "else", "k", "+", "':0'", ":", "v", "\n", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "m", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_variable_to_shape_map": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_variable_to_shape_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_tensor": [[111, 118], ["saver_restore.CheckpointReaderAdapter._reader.has_tensor", "saver_restore.CheckpointReaderAdapter._reader.get_tensor", "saver_restore.CheckpointReaderAdapter._reader.get_tensor", "name.endswith"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_tensor", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_tensor"], ["", "def", "get_tensor", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "_reader", ".", "has_tensor", "(", "name", ")", ":", "\n", "            ", "return", "self", ".", "_reader", ".", "get_tensor", "(", "name", ")", "\n", "", "if", "name", "in", "self", ".", "_map", ":", "\n", "            ", "assert", "name", ".", "endswith", "(", "':0'", ")", ",", "name", "\n", "name", "=", "name", "[", ":", "-", "2", "]", "\n", "", "return", "self", ".", "_reader", ".", "get_tensor", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor": [[119, 121], ["None"], "methods", ["None"], ["", "def", "has_tensor", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_real_name": [[123, 128], ["saver_restore.CheckpointReaderAdapter._reader.has_tensor", "saver_restore.CheckpointReaderAdapter.has_tensor"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor"], ["", "def", "get_real_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "_reader", ".", "has_tensor", "(", "name", ")", ":", "\n", "            ", "return", "name", "\n", "", "assert", "self", ".", "has_tensor", "(", "name", ")", "\n", "return", "name", "[", ":", "-", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.MismatchLogger.__init__": [[130, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "exists", ",", "nonexists", ",", "logger", ")", ":", "\n", "        ", "self", ".", "_exists", "=", "exists", "\n", "self", ".", "_nonexists", "=", "nonexists", "\n", "self", ".", "_names", "=", "[", "]", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.MismatchLogger.add": [[136, 138], ["saver_restore.MismatchLogger._names.append"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "add", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_names", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.MismatchLogger.log": [[139, 143], ["len", "saver_restore.MismatchLogger.logger"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_names", ")", ":", "\n", "            ", "self", ".", "logger", "(", "\"The following variables are in the {}, but not found in the {}: {}\"", ".", "format", "(", "\n", "self", ".", "_exists", ",", "self", ".", "_nonexists", ",", "', '", ".", "join", "(", "self", ".", "_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore.__init__": [[148, 163], ["saver_restore.get_checkpoint_path", "get_checkpoint_path.endswith", "get_checkpoint_path.endswith", "logger", "i.endswith"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.get_checkpoint_path"], ["def", "__init__", "(", "self", ",", "model_path", ",", "logger", ",", "prefix", "=", "None", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            model_path (str): a model name (model-xxxx) or a ``checkpoint`` file.\n            prefix (str): during restore, add a ``prefix/`` for every variable in this checkpoint.\n            ignore (list[str]): list of tensor names that should be ignored during loading, e.g. learning-rate\n        \"\"\"", "\n", "if", "model_path", ".", "endswith", "(", "'.npy'", ")", "or", "model_path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "            ", "logger", "(", "\"SaverRestore expect a TF checkpoint, but got a model path '{}'.\"", ".", "format", "(", "model_path", ")", "+", "\n", "\" To load from a dict, use 'DictRestore'.\"", ")", "\n", "", "model_path", "=", "get_checkpoint_path", "(", "model_path", ",", "logger", ")", "\n", "self", ".", "path", "=", "model_path", "# attribute used by AutoResumeTrainConfig!", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "ignore", "=", "[", "i", "if", "i", ".", "endswith", "(", "':0'", ")", "else", "i", "+", "':0'", "for", "i", "in", "ignore", "]", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._setup_graph": [[164, 167], ["saver_restore.SaverRestore._get_restore_dict", "tensorflow.train.Saver", "str", "id"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._get_restore_dict"], ["", "def", "_setup_graph", "(", "self", ")", ":", "\n", "        ", "dic", "=", "self", ".", "_get_restore_dict", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "dic", ",", "name", "=", "str", "(", "id", "(", "dic", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore.run_init": [[168, 172], ["saver_restore.SaverRestore.logger", "saver_restore.SaverRestore._setup_graph", "saver_restore.SaverRestore.saver.restore"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._setup_graph"], ["", "def", "run_init", "(", "self", ",", "sess", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Restoring checkpoint from {} ...\"", ".", "format", "(", "self", ".", "path", ")", ")", "\n", "self", ".", "_setup_graph", "(", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._read_checkpoint_vars": [[173, 180], ["tensorflow.train.NewCheckpointReader", "saver_restore.CheckpointReaderAdapter", "CheckpointReaderAdapter.get_variable_to_shape_map().keys", "set", "saver_restore.CheckpointReaderAdapter.get_variable_to_shape_map"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_variable_to_shape_map"], ["", "@", "staticmethod", "\n", "def", "_read_checkpoint_vars", "(", "model_path", ")", ":", "\n", "        ", "\"\"\" return a set of strings \"\"\"", "\n", "reader", "=", "tf", ".", "train", ".", "NewCheckpointReader", "(", "model_path", ")", "\n", "reader", "=", "CheckpointReaderAdapter", "(", "reader", ")", "# use an adapter to standardize the name", "\n", "ckpt_vars", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", ".", "keys", "(", ")", "\n", "return", "reader", ",", "set", "(", "ckpt_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._match_vars": [[181, 207], ["saver_restore.SaverRestore._read_checkpoint_vars", "tensorflow.global_variables", "set", "saver_restore.MismatchLogger", "saver_restore.MismatchLogger.log", "saver_restore.MismatchLogger", "saver_restore.MismatchLogger.log", "saver_restore.get_savename_from_varname", "len", "len", "sorted", "reader.has_tensor", "saver_restore.SaverRestore.logger", "reader.has_tensor", "func", "set.add", "saver_restore.is_training_name", "saver_restore.MismatchLogger.add", "saver_restore.is_training_name", "saver_restore.MismatchLogger.add"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._read_checkpoint_vars", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.log", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.log", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.get_savename_from_varname", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.has_tensor", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.is_training_name", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.is_training_name", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add"], ["", "def", "_match_vars", "(", "self", ",", "func", ")", ":", "\n", "        ", "reader", ",", "chkpt_vars", "=", "SaverRestore", ".", "_read_checkpoint_vars", "(", "self", ".", "path", ")", "\n", "graph_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "chkpt_vars_used", "=", "set", "(", ")", "\n", "\n", "mismatch", "=", "MismatchLogger", "(", "'graph'", ",", "'checkpoint'", ",", "self", ".", "logger", ")", "\n", "for", "v", "in", "graph_vars", ":", "\n", "            ", "name", "=", "get_savename_from_varname", "(", "v", ".", "name", ",", "varname_prefix", "=", "self", ".", "prefix", ")", "\n", "if", "name", "in", "self", ".", "ignore", "and", "reader", ".", "has_tensor", "(", "name", ")", ":", "\n", "                ", "self", ".", "logger", "(", "\"Variable {} in the graph will not be loaded from the checkpoint!\"", ".", "format", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "reader", ".", "has_tensor", "(", "name", ")", ":", "\n", "                    ", "func", "(", "reader", ",", "name", ",", "v", ")", "\n", "chkpt_vars_used", ".", "add", "(", "name", ")", "\n", "", "else", ":", "\n", "                    ", "vname", "=", "v", ".", "op", ".", "name", "\n", "if", "not", "is_training_name", "(", "vname", ")", ":", "\n", "                        ", "mismatch", ".", "add", "(", "vname", ")", "\n", "", "", "", "", "mismatch", ".", "log", "(", ")", "\n", "mismatch", "=", "MismatchLogger", "(", "'checkpoint'", ",", "'graph'", ",", "self", ".", "logger", ")", "\n", "if", "len", "(", "chkpt_vars_used", ")", "<", "len", "(", "chkpt_vars", ")", ":", "\n", "            ", "unused", "=", "chkpt_vars", "-", "chkpt_vars_used", "\n", "for", "name", "in", "sorted", "(", "unused", ")", ":", "\n", "                ", "if", "not", "is_training_name", "(", "name", ")", ":", "\n", "                    ", "mismatch", ".", "add", "(", "name", ")", "\n", "", "", "", "mismatch", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._get_restore_dict": [[208, 217], ["saver_restore.SaverRestore._match_vars", "reader.get_real_name"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.SaverRestore._match_vars", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.CheckpointReaderAdapter.get_real_name"], ["", "def", "_get_restore_dict", "(", "self", ")", ":", "\n", "        ", "var_dict", "=", "{", "}", "\n", "\n", "def", "f", "(", "reader", ",", "name", ",", "v", ")", ":", "\n", "            ", "name", "=", "reader", ".", "get_real_name", "(", "name", ")", "\n", "assert", "name", "not", "in", "var_dict", ",", "\"Restore conflict: {} and {}\"", ".", "format", "(", "v", ".", "name", ",", "var_dict", "[", "name", "]", ".", "name", ")", "\n", "var_dict", "[", "name", "]", "=", "v", "\n", "", "self", ".", "_match_vars", "(", "f", ")", "\n", "return", "var_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.get_savename_from_varname": [[9, 27], ["name.startswith", "len"], "function", ["None"], ["def", "get_savename_from_varname", "(", "\n", "varname", ",", "varname_prefix", "=", "None", ",", "\n", "savename_prefix", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        varname(str): a variable name in the graph\n        varname_prefix(str): an optional prefix that may need to be removed in varname\n        savename_prefix(str): an optional prefix to append to all savename\n    Returns:\n        str: the name used to save the variable\n    \"\"\"", "\n", "name", "=", "varname", "\n", "if", "varname_prefix", "is", "not", "None", "and", "name", ".", "startswith", "(", "varname_prefix", ")", ":", "\n", "        ", "name", "=", "name", "[", "len", "(", "varname_prefix", ")", "+", "1", ":", "]", "\n", "", "if", "savename_prefix", "is", "not", "None", ":", "\n", "        ", "name", "=", "savename_prefix", "+", "'/'", "+", "name", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.get_checkpoint_path": [[28, 55], ["os.path.basename", "os.path.join", "os.path.basename", "tensorflow.gfile.Exists", "tensorflow.train.latest_checkpoint", "tf.train.latest_checkpoint.endswith", "logger", "tensorflow.gfile.Exists", "tensorflow.gfile.Exists", "os.path.dirname", "tf.train.latest_checkpoint.split", "tf.train.latest_checkpoint.split"], "function", ["None"], ["", "def", "get_checkpoint_path", "(", "model_path", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    Work around TF problems in checkpoint path handling.\n    Args:\n        model_path: a user-input path\n    Returns:\n        str: the argument that can be passed to NewCheckpointReader\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "basename", "(", "model_path", ")", "==", "model_path", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "'.'", ",", "model_path", ")", "# avoid #4921 and #6142", "\n", "", "if", "os", ".", "path", ".", "basename", "(", "model_path", ")", "==", "'checkpoint'", ":", "\n", "        ", "assert", "tf", ".", "gfile", ".", "Exists", "(", "model_path", ")", ",", "model_path", "\n", "model_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ")", "\n", "# to be consistent with either v1 or v2", "\n", "\n", "# fix paths if provided a wrong one", "\n", "", "new_path", "=", "model_path", "\n", "if", "'00000-of-00001'", "in", "model_path", ":", "\n", "        ", "new_path", "=", "model_path", ".", "split", "(", "'.data'", ")", "[", "0", "]", "\n", "", "elif", "model_path", ".", "endswith", "(", "'.index'", ")", ":", "\n", "        ", "new_path", "=", "model_path", ".", "split", "(", "'.index'", ")", "[", "0", "]", "\n", "", "if", "new_path", "!=", "model_path", ":", "\n", "        ", "logger", "(", "\n", "\"Checkpoint path {} is auto-corrected to {}.\"", ".", "format", "(", "model_path", ",", "new_path", ")", ")", "\n", "model_path", "=", "new_path", "\n", "", "assert", "tf", ".", "gfile", ".", "Exists", "(", "model_path", ")", "or", "tf", ".", "gfile", ".", "Exists", "(", "model_path", "+", "'.index'", ")", ",", "model_path", "\n", "return", "model_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.is_training_name": [[56, 79], ["name.endswith", "name.endswith", "name.startswith", "saver_restore.get_op_tensor_name", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.startswith", "name.endswith"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.get_op_tensor_name"], ["", "def", "is_training_name", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    **Guess** if this variable is only used in training.\n    Only used internally to avoid too many logging. Do not use it.\n    \"\"\"", "\n", "# TODO: maybe simply check against TRAINABLE_VARIABLES and MODEL_VARIABLES?", "\n", "# TODO or use get_slot_names()", "\n", "name", "=", "get_op_tensor_name", "(", "name", ")", "[", "0", "]", "\n", "if", "name", ".", "endswith", "(", "'/Adam'", ")", "or", "name", ".", "endswith", "(", "'/Adam_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Momentum'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Adadelta'", ")", "or", "name", ".", "endswith", "(", "'/Adadelta_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/RMSProp'", ")", "or", "name", ".", "endswith", "(", "'/RMSProp_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Adagrad'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "startswith", "(", "'EMA/'", ")", ":", "# all the moving average summaries", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "startswith", "(", "'AccumGrad'", ")", "or", "name", ".", "endswith", "(", "'/AccumGrad'", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.saver_restore.get_op_tensor_name": [[81, 96], ["len"], "function", ["None"], ["", "def", "get_op_tensor_name", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    Will automatically determine if ``name`` is a tensor name (ends with ':x')\n    or a op name.\n    If it is an op name, the corresponding tensor name is assumed to be ``op_name + ':0'``.\n\n    Args:\n        name(str): name of an op or a tensor\n    Returns:\n        tuple: (op_name, tensor_name)\n    \"\"\"", "\n", "if", "len", "(", "name", ")", ">=", "3", "and", "name", "[", "-", "2", "]", "==", "':'", ":", "\n", "        ", "return", "name", "[", ":", "-", "2", "]", ",", "name", "\n", "", "else", ":", "\n", "        ", "return", "name", ",", "name", "+", "':0'", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.knn_l2": [[21, 45], ["tensorflow.square", "tensorflow.nn.top_k", "tensorflow.norm", "numpy.zeros", "range", "tensorflow.constant", "net.get_shape", "net.get_shape", "net.get_shape", "tensorflow.transpose", "net_utils.knn_l2.u_block"], "function", ["None"], ["def", "knn_l2", "(", "net", ",", "k", ",", "u", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k in k-nn search\n        net: (batch_size, npoint, c) float32 array, points\n        u: int32, block size\n    Output:\n        idx: (batch_size, npoint, k) int32 array, indices to input points\n    '''", "\n", "INF", "=", "1e8", "\n", "batch_size", "=", "net", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "npoint", "=", "net", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "n_channel", "=", "net", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "\n", "square", "=", "tf", ".", "square", "(", "tf", ".", "norm", "(", "net", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", ")", "\n", "def", "u_block", "(", "batch_size", ",", "npoint", ",", "u", ")", ":", "\n", "        ", "block", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "npoint", ",", "npoint", "]", ")", "\n", "n", "=", "npoint", "//", "u", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "block", "[", ":", ",", "(", "i", "*", "u", ")", ":", "(", "i", "*", "u", "+", "u", ")", ",", "(", "i", "*", "u", ")", ":", "(", "i", "*", "u", "+", "u", ")", "]", "=", "np", ".", "ones", "(", "[", "batch_size", ",", "u", ",", "u", "]", ")", "*", "(", "-", "INF", ")", "\n", "", "return", "block", "\n", "", "minus_distance", "=", "2", "*", "tf", ".", "matmul", "(", "net", ",", "tf", ".", "transpose", "(", "net", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "-", "square", "-", "tf", ".", "transpose", "(", "square", ",", "[", "0", ",", "2", ",", "1", "]", ")", "+", "tf", ".", "constant", "(", "u_block", "(", "batch_size", ",", "npoint", ",", "u", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "minus_distance", ",", "k", "=", "k", ",", "sorted", "=", "False", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.get_coord": [[46, 59], ["tensorflow.meshgrid", "tensorflow.stack", "tensorflow.tile", "tensorflow.reshape", "tensorflow.expand_dims", "video.get_shape", "video.get_shape", "video.get_shape", "video.get_shape", "tensorflow.range", "tensorflow.range", "tensorflow.range"], "function", ["None"], ["", "def", "get_coord", "(", "video", ")", ":", "\n", "    ", "batch_size", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_frames", "=", "video", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "height", "=", "video", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "width", "=", "video", ".", "get_shape", "(", ")", "[", "3", "]", ".", "value", "\n", "\n", "grid_f", ",", "grid_h", ",", "grid_w", "=", "tf", ".", "meshgrid", "(", "tf", ".", "range", "(", "num_frames", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "num_frames", ",", "\n", "tf", ".", "range", "(", "height", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "height", ",", "\n", "tf", ".", "range", "(", "width", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "width", ",", "indexing", "=", "'ij'", ")", "\n", "grid", "=", "tf", ".", "stack", "(", "[", "grid_f", ",", "grid_h", ",", "grid_w", "]", ",", "axis", "=", "-", "1", ")", "\n", "grid", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "grid", ",", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "grid", "=", "tf", ".", "reshape", "(", "grid", ",", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module": [[60, 145], ["tensorflow.reshape", "knn.knn", "tensorflow.tile", "tf_grouping.group_point", "net_utils.get_coord", "tensorflow.tile", "tf_grouping.group_point", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.image.resize_images", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.variable_scope", "enumerate", "tensorflow.variable_scope", "tf_util.conv3d", "tensorflow.contrib.layers.batch_norm", "tensorflow.reshape", "tensorflow.image.resize_images", "tensorflow.reshape", "activation_fn", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape", "tensorflow.variable_scope", "enumerate", "tf_util.conv3d.get_shape", "tf_util.conv2d", "tf_util.conv3d", "tensorflow.constant", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.knn_l2.knn_l2.knn", "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.group_point", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.get_coord", "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.group_point", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_images", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio_utils.resize_images", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv2d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d"], ["", "def", "cp_module", "(", "video", ",", "k", ",", "mlp", ",", "scope", ",", "mlp0", "=", "None", ",", "is_training", "=", "None", ",", "bn_decay", "=", "None", ",", "weight_decay", "=", "None", ",", "data_format", "=", "'NHWC'", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "shrink_ratio", "=", "None", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        video: (batch_size, T, H, W, C) TF tensor\n        k: int -- Top k closest points\n        mlp: list of int32 -- output size for MLP on each point\n    Returns:\n        new features: (batch_size, num_points, mlp[-1]) TF tensor\n    \"\"\"", "\n", "batch_size", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_frames", "=", "video", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "height", "=", "video", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "width", "=", "video", ".", "get_shape", "(", ")", "[", "3", "]", ".", "value", "\n", "num_channels", "=", "video", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "if", "shrink_ratio", "is", "not", "None", ":", "\n", "        ", "new_height", "=", "height", "//", "shrink_ratio", "\n", "new_width", "=", "width", "//", "shrink_ratio", "\n", "", "else", ":", "\n", "        ", "new_height", "=", "height", "\n", "new_width", "=", "width", "\n", "\n", "", "end_points", "[", "'input_video'", "]", "=", "video", "\n", "\n", "if", "mlp0", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "            ", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp0", ")", ":", "\n", "                ", "video", "=", "tf_util", ".", "conv3d", "(", "video", ",", "num_out_channel", ",", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv_bottle%d'", "%", "(", "i", ")", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "\n", "", "", "", "num_channels_bottleneck", "=", "video", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "if", "shrink_ratio", "is", "not", "None", ":", "\n", "        ", "video", "=", "tf", ".", "reshape", "(", "video", ",", "[", "-", "1", ",", "height", ",", "width", ",", "num_channels_bottleneck", "]", ")", "\n", "video", "=", "tf", ".", "image", ".", "resize_images", "(", "video", ",", "[", "new_height", ",", "new_width", "]", ",", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ")", "\n", "\n", "", "net", "=", "tf", ".", "reshape", "(", "video", ",", "[", "batch_size", ",", "-", "1", ",", "num_channels_bottleneck", "]", ")", "\n", "\n", "if", "distance", "==", "'l2'", ":", "\n", "        ", "import", "knn_l2", "as", "knn", "\n", "", "elif", "distance", "==", "'dot'", ":", "\n", "        ", "import", "knn_dot", "as", "knn", "\n", "", "elif", "distance", "==", "'cos'", ":", "\n", "        ", "import", "knn_cos", "as", "knn", "\n", "", "nn_idx", "=", "knn", ".", "knn", "(", "net", ",", "k", ",", "new_height", "*", "new_width", ")", "\n", "\n", "net_expand", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "net", ",", "axis", "=", "2", ")", ",", "[", "1", ",", "1", ",", "k", ",", "1", "]", ")", "\n", "net_grouped", "=", "tf_grouping", ".", "group_point", "(", "net", ",", "nn_idx", ")", "\n", "\n", "coord", "=", "get_coord", "(", "tf", ".", "reshape", "(", "video", ",", "[", "batch_size", ",", "-", "1", ",", "new_height", ",", "new_width", ",", "num_channels_bottleneck", "]", ")", ")", "\n", "coord_expand", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "coord", ",", "axis", "=", "2", ")", ",", "[", "1", ",", "1", ",", "k", ",", "1", "]", ")", "\n", "coord_grouped", "=", "tf_grouping", ".", "group_point", "(", "coord", ",", "nn_idx", ")", "\n", "coord_diff", "=", "coord_grouped", "-", "coord_expand", "\n", "\n", "end_points", "[", "'coord'", "]", "=", "{", "'coord'", ":", "coord", ",", "'coord_grouped'", ":", "coord_grouped", ",", "'coord_diff'", ":", "coord_diff", "}", "\n", "\n", "net", "=", "tf", ".", "concat", "(", "[", "coord_diff", ",", "net_expand", ",", "net_grouped", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "        ", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp", ")", ":", "\n", "            ", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "num_out_channel", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv%d'", "%", "(", "i", ")", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "\n", "data_format", "=", "data_format", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "", "", "end_points", "[", "'before_max'", "]", "=", "net", "\n", "net", "=", "tf", ".", "reduce_max", "(", "net", ",", "axis", "=", "[", "2", "]", ",", "keepdims", "=", "True", ",", "name", "=", "'maxpool'", ")", "\n", "end_points", "[", "'after_max'", "]", "=", "net", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "num_frames", ",", "new_height", ",", "new_width", ",", "mlp", "[", "-", "1", "]", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "num_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "False", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'conv_final'", ")", "\n", "net", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "net", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", "if", "not", "freeze_bn", "else", "tf", ".", "constant", "(", "False", ",", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "decay", "=", "bn_decay", ",", "updates_collections", "=", "None", ",", "\n", "scope", "=", "'bn_final'", ",", "data_format", "=", "data_format", ",", "param_initializers", "=", "{", "'gamma'", ":", "tf", ".", "constant_initializer", "(", "0.", ",", "dtype", "=", "tf", ".", "float32", ")", "}", ",", "trainable", "=", "not", "freeze_bn", ")", "\n", "\n", "", "if", "shrink_ratio", "is", "not", "None", ":", "\n", "        ", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "-", "1", ",", "new_height", ",", "new_width", ",", "num_channels", "]", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_images", "(", "net", ",", "[", "height", ",", "width", "]", ",", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ")", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", ",", "height", ",", "width", ",", "num_channels", "]", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "net", "=", "activation_fn", "(", "net", ")", "\n", "\n", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.__init__": [[14, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "vars_to_update", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            sess (tf.Session): a session object\n            vars_to_update: a collection of variables to update\n        \"\"\"", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "name_map", "=", "{", "v", ".", "name", ":", "v", "for", "v", "in", "vars_to_update", "}", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.load_value_to_var": [[24, 71], ["tuple", "hasattr", "var.load", "var.get_shape().as_list", "logger", "upcast.reshape", "var.load", "numpy.prod", "numpy.prod", "var.value", "dict_restore.SessionUpdate.load_value_to_var.upcast"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.JSONSerializer.load"], ["", "@", "staticmethod", "\n", "def", "load_value_to_var", "(", "var", ",", "val", ",", "logger", ",", "strict", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Call `var.load(val)` with the default session.\n\n        Args:\n            var (tf.Variable):\n            strict (bool): Behave less strict if set to False.\n        \"\"\"", "\n", "if", "strict", ":", "\n", "            ", "var", ".", "load", "(", "val", ")", "\n", "return", "\n", "", "name", "=", "var", ".", "op", ".", "name", "\n", "\n", "# check incompatible shape", "\n", "varshape", "=", "tuple", "(", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "if", "varshape", "!=", "val", ".", "shape", ":", "\n", "# TODO only allow reshape when shape different by empty axis", "\n", "            ", "assert", "np", ".", "prod", "(", "varshape", ")", "==", "np", ".", "prod", "(", "val", ".", "shape", ")", ",", "\"{}: {}!={}\"", ".", "format", "(", "name", ",", "varshape", ",", "val", ".", "shape", ")", "\n", "logger", "(", "\"Variable {} is reshaped {}->{} during assigning\"", ".", "format", "(", "\n", "name", ",", "val", ".", "shape", ",", "varshape", ")", ")", "\n", "val", "=", "val", ".", "reshape", "(", "varshape", ")", "\n", "\n", "# fix some common type incompatibility problems, but not all", "\n", "", "def", "upcast", "(", "vartype", ",", "valtype", ")", ":", "\n", "# allow up-casting", "\n", "            ", "if", "vartype", "==", "tf", ".", "float64", "and", "valtype", "==", "np", ".", "float32", ":", "\n", "                ", "return", "np", ".", "float64", "\n", "", "if", "vartype", "in", "[", "tf", ".", "int64", ",", "tf", ".", "int32", "]", "and", "valtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int16", ",", "np", ".", "int8", "]", ":", "\n", "                ", "return", "np", ".", "int64", "if", "vartype", "==", "tf", ".", "int64", "else", "np", ".", "int32", "\n", "", "return", "None", "\n", "\n", "", "if", "hasattr", "(", "val", ",", "'dtype'", ")", ":", "\n", "            ", "vartype", "=", "var", ".", "value", "(", ")", ".", "dtype", "\n", "if", "vartype", "!=", "val", ".", "dtype", ":", "\n", "                ", "msg", "=", "\"Variable {} has dtype {} but was given a value of dtype {}.\"", ".", "format", "(", "name", ",", "vartype", ",", "val", ".", "dtype", ")", "\n", "newtype", "=", "upcast", "(", "var", ".", "dtype", ",", "val", ".", "dtype", ")", "\n", "if", "newtype", "is", "not", "None", ":", "\n", "                    ", "val", "=", "newtype", "(", "val", ")", "\n", "logger", "(", "msg", "+", "\" Load it after casting!\"", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "vartype", "==", "val", ".", "dtype", ",", "msg", "\n", "", "", "", "try", ":", "\n", "            ", "var", ".", "load", "(", "val", ")", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "            ", "logger", "(", "\"Cannot load this value to the variable {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.update": [[72, 83], ["dict_restore.SessionUpdate.sess.as_default", "six.iteritems", "dict_restore.SessionUpdate.load_value_to_var"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.load_value_to_var"], ["", "", "def", "update", "(", "self", ",", "prms", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prms(dict): dict of {variable name: value}\n                Any name in prms must be in the graph and in vars_to_update.\n        \"\"\"", "\n", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "for", "name", ",", "value", "in", "six", ".", "iteritems", "(", "prms", ")", ":", "\n", "                ", "assert", "name", "in", "self", ".", "name_map", "\n", "v", "=", "self", ".", "name_map", "[", "name", "]", "\n", "SessionUpdate", ".", "load_value_to_var", "(", "v", ",", "value", ",", "self", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.__init__": [[130, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "exists", ",", "nonexists", ",", "logger", ")", ":", "\n", "        ", "self", ".", "_exists", "=", "exists", "\n", "self", ".", "_nonexists", "=", "nonexists", "\n", "self", ".", "_names", "=", "[", "]", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add": [[136, 138], ["dict_restore.MismatchLogger._names.append"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "add", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_names", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.log": [[139, 143], ["len", "dict_restore.MismatchLogger.logger"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_names", ")", ":", "\n", "            ", "self", ".", "logger", "(", "\"The following variables are in the {}, but not found in the {}: {}\"", ".", "format", "(", "\n", "self", ".", "_exists", ",", "self", ".", "_nonexists", ",", "', '", ".", "join", "(", "self", ".", "_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.__init__": [[149, 158], ["isinstance", "type", "dict_restore.get_op_tensor_name", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.get_op_tensor_name"], ["def", "__init__", "(", "self", ",", "variable_dict", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            variable_dict (dict): a dict of {name: value}\n        \"\"\"", "\n", "assert", "isinstance", "(", "variable_dict", ",", "dict", ")", ",", "type", "(", "variable_dict", ")", "\n", "# use varname (with :0) for consistency", "\n", "self", ".", "_prms", "=", "{", "get_op_tensor_name", "(", "n", ")", "[", "1", "]", ":", "v", "for", "n", ",", "v", "in", "six", ".", "iteritems", "(", "variable_dict", ")", "}", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.DictRestore.run_init": [[159, 181], ["tensorflow.get_collection", "set", "set", "dict_restore.DictRestore.logger", "dict_restore.MismatchLogger", "sorted", "dict_restore.MismatchLogger.log", "dict_restore.MismatchLogger", "sorted", "dict_restore.MismatchLogger.log", "dict_restore.SessionUpdate", "dict_restore.SessionUpdate.update", "six.iterkeys", "dict_restore.MismatchLogger.add", "dict_restore.is_training_name", "dict_restore.MismatchLogger.add", "map", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.log", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.log", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.SessionUpdate.update", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.is_training_name", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.MismatchLogger.add"], ["", "def", "run_init", "(", "self", ",", "sess", ")", ":", "\n", "        ", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "\n", "variable_names", "=", "set", "(", "[", "k", ".", "name", "for", "k", "in", "variables", "]", ")", "\n", "param_names", "=", "set", "(", "six", ".", "iterkeys", "(", "self", ".", "_prms", ")", ")", "\n", "\n", "intersect", "=", "variable_names", "&", "param_names", "\n", "\n", "self", ".", "logger", "(", "\"Variables to restore from dict: {}\"", ".", "format", "(", "', '", ".", "join", "(", "map", "(", "str", ",", "intersect", ")", ")", ")", ")", "\n", "\n", "mismatch", "=", "MismatchLogger", "(", "'graph'", ",", "'dict'", ",", "self", ".", "logger", ")", "\n", "for", "k", "in", "sorted", "(", "variable_names", "-", "param_names", ")", ":", "\n", "            ", "if", "not", "is_training_name", "(", "k", ")", ":", "\n", "                ", "mismatch", ".", "add", "(", "k", ")", "\n", "", "", "mismatch", ".", "log", "(", ")", "\n", "mismatch", "=", "MismatchLogger", "(", "'dict'", ",", "'graph'", ",", "self", ".", "logger", ")", "\n", "for", "k", "in", "sorted", "(", "param_names", "-", "variable_names", ")", ":", "\n", "            ", "mismatch", ".", "add", "(", "k", ")", "\n", "", "mismatch", ".", "log", "(", ")", "\n", "\n", "upd", "=", "SessionUpdate", "(", "sess", ",", "[", "v", "for", "v", "in", "variables", "if", "v", ".", "name", "in", "intersect", "]", ",", "self", ".", "logger", ")", "\n", "upd", ".", "update", "(", "{", "name", ":", "value", "for", "name", ",", "value", "in", "six", ".", "iteritems", "(", "self", ".", "_prms", ")", "if", "name", "in", "intersect", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.is_training_name": [[85, 108], ["name.endswith", "name.endswith", "name.startswith", "dict_restore.get_op_tensor_name", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "name.startswith", "name.endswith"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.get_op_tensor_name"], ["", "", "", "", "def", "is_training_name", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    **Guess** if this variable is only used in training.\n    Only used internally to avoid too many logging. Do not use it.\n    \"\"\"", "\n", "# TODO: maybe simply check against TRAINABLE_VARIABLES and MODEL_VARIABLES?", "\n", "# TODO or use get_slot_names()", "\n", "name", "=", "get_op_tensor_name", "(", "name", ")", "[", "0", "]", "\n", "if", "name", ".", "endswith", "(", "'/Adam'", ")", "or", "name", ".", "endswith", "(", "'/Adam_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Momentum'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Adadelta'", ")", "or", "name", ".", "endswith", "(", "'/Adadelta_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/RMSProp'", ")", "or", "name", ".", "endswith", "(", "'/RMSProp_1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "endswith", "(", "'/Adagrad'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "startswith", "(", "'EMA/'", ")", ":", "# all the moving average summaries", "\n", "        ", "return", "True", "\n", "", "if", "name", ".", "startswith", "(", "'AccumGrad'", ")", "or", "name", ".", "endswith", "(", "'/AccumGrad'", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dict_restore.get_op_tensor_name": [[110, 125], ["len"], "function", ["None"], ["", "def", "get_op_tensor_name", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    Will automatically determine if ``name`` is a tensor name (ends with ':x')\n    or a op name.\n    If it is an op name, the corresponding tensor name is assumed to be ``op_name + ':0'``.\n\n    Args:\n        name(str): name of an op or a tensor\n    Returns:\n        tuple: (op_name, tensor_name)\n    \"\"\"", "\n", "if", "len", "(", "name", ")", ">=", "3", "and", "name", "[", "-", "2", "]", "==", "':'", ":", "\n", "        ", "return", "name", "[", ":", "-", "2", "]", ",", "name", "\n", "", "else", ":", "\n", "        ", "return", "name", ",", "name", "+", "':0'", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.utils.dataloader.get_loader": [[18, 77], ["datasets.GulpVideoDataset.GulpVideoDataset", "torch.utils.data.DataLoader", "datasets.GulpVideoDataset.GulpVideoDataset", "torch.utils.data.DataLoader", "datasets.GulpVideoDataset.GulpVideoDataset", "torch.utils.data.DataLoader", "os.path.join", "datasets.GulpVideoDataset.GulpVideoDataset.multiply_data", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.multiply_data"], ["def", "get_loader", "(", "root", ",", "train_transform", ",", "val_transform", ",", "target_transform", ",", "batch_size", "=", "64", ",", "num_frames", "=", "8", ",", "step_size", "=", "4", ",", "val_samples", "=", "1", ",", "n_threads", "=", "16", ",", "train_repeat", "=", "1", ",", "tsn", "=", "1", ",", "training", "=", "True", ",", "val", "=", "True", ",", "test", "=", "False", ")", ":", "\n", "\n", "    ", "if", "training", ":", "\n", "# train dataset", "\n", "        ", "training_data", "=", "GulpVideoDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'train'", ")", ",", "\n", "1", ",", "num_frames", ",", "step_size", ",", "tsn", ",", "\n", "transform", "=", "train_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "random_offset", "=", "True", ")", "\n", "if", "train_repeat", ">", "1", ":", "\n", "            ", "training_data", ".", "multiply_data", "(", "train_repeat", ")", "\n", "# train loader", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "training_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "sampler", "=", "None", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "None", "\n", "\n", "", "if", "val", ":", "\n", "# validation dataset", "\n", "        ", "validation_data", "=", "GulpVideoDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'val'", ")", ",", "\n", "val_samples", ",", "num_frames", ",", "step_size", ",", "\n", "transform", "=", "val_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "random_offset", "=", "False", ")", "\n", "# val loader", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_data", ",", "\n", "batch_size", "=", "batch_size", "//", "val_samples", "*", "val_samples", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "val_loader", "=", "None", "\n", "\n", "", "if", "test", ":", "\n", "# test dataset", "\n", "        ", "test_data", "=", "GulpVideoDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'test'", ")", ",", "\n", "val_samples", ",", "num_frames", ",", "step_size", ",", "\n", "transform", "=", "val_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "random_offset", "=", "False", ")", "\n", "# test loader", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "batch_size", "//", "val_samples", "*", "val_samples", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "drop_last", "=", "True", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "", "else", ":", "\n", "        ", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.__init__": [[10, 44], ["print", "gulpio.GulpDirectory", "GulpVideoDataset.GulpVideoDataset.gd._load_label_dict", "sorted", "GulpVideoDataset.GulpVideoDataset.make_db", "print", "len"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpDirectory._load_label_dict", "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.make_db"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "samples_per_video", ",", "num_frames", ",", "step_size", ",", "tsn", "=", "1", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "random_offset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"Simple data loader for GulpIO format.\n            Args:\n                data_path (str): path to GulpIO dataset folder\n                label_path (str): path to GulpIO label dictionary matching\n            label ids to label names\n                num_frames (int): number of frames to be fetched.\n                step_size (int): number of frames skippid while picking\n            sequence of frames from each video.\n                is_va (bool): sets the necessary augmention procedure.\n                transform (object): set of augmentation steps defined by\n            Compose(). Default is None.\n                target_transform (func): performs preprocessing on labels if\n            defined. Default is None.\n                stack (bool): stack frames into a numpy.array. Default is True.\n                random_offset (bool): random offsetting to pick frames, if\n            number of frames are more than what is necessary.\n        \"\"\"", "\n", "print", "(", "'data loader'", ")", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "samples_per_video", "=", "samples_per_video", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "gd", "=", "gulpio", ".", "GulpDirectory", "(", "data_path", ")", "\n", "self", ".", "label2idx", "=", "self", ".", "gd", ".", "_load_label_dict", "(", ")", "\n", "self", ".", "classes", "=", "sorted", "(", "self", ".", "label2idx", ",", "key", "=", "self", ".", "label2idx", ".", "get", ")", "\n", "self", ".", "random_offset", "=", "random_offset", "\n", "self", ".", "make_db", "(", ")", "\n", "self", ".", "tsn", "=", "tsn", "if", "tsn", ">", "0", "else", "1", "\n", "print", "(", "'data loading --'", ",", "len", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.__getitem__": [[45, 115], ["GulpVideoDataset.GulpVideoDataset.target_transform", "range", "slice", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.sample", "torch.from_numpy.append", "torch.from_numpy.append", "GulpVideoDataset.GulpVideoDataset.transform.randomize_parameters", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.append", "torch.from_numpy.append", "GulpVideoDataset.GulpVideoDataset.transform.randomize_parameters", "numpy.stack().transpose", "range", "min", "tuple", "len", "GulpVideoDataset.GulpVideoDataset.transform", "clip[].transpose", "clip_.append", "random.randint", "len", "GulpVideoDataset.GulpVideoDataset.transform", "numpy.linspace().round", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.stack", "c.transpose", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.randomize_parameters", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.randomize_parameters", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        With the given video index, it fetches frames. This functions is called\n        by Pytorch DataLoader threads. Each Dataloader thread loads a single\n        batch by calling this function per instance.\n        \"\"\"", "\n", "video_id", "=", "self", ".", "data", "[", "index", "]", "[", "'video_id'", "]", "\n", "frame_start", ",", "frame_end", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_index'", "]", "\n", "label", "=", "self", ".", "data", "[", "index", "]", "[", "'label'", "]", "\n", "\n", "target", "=", "{", "'video_id'", ":", "video_id", ",", "\n", "'label'", ":", "label", ",", "\n", "'label_name'", ":", "self", ".", "classes", "[", "label", "]", "}", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "if", "self", ".", "num_frames", "==", "1", ":", "\n", "            ", "if", "self", ".", "random_offset", ":", "\n", "                ", "num_frames_sample", "=", "frame_end", "-", "frame_start", "\n", "frame_indices", "=", "random", ".", "sample", "(", "range", "(", "frame_start", ",", "frame_end", ")", ",", "min", "(", "num_frames_sample", ",", "self", ".", "tsn", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "tsn", "==", "1", ":", "\n", "                    ", "frame_indices", "=", "[", "(", "frame_start", "+", "frame_end", "-", "1", ")", "//", "2", "]", "\n", "", "else", ":", "\n", "                    ", "frame_indices", "=", "tuple", "(", "np", ".", "linspace", "(", "frame_start", ",", "frame_end", "-", "1", ",", "self", ".", "tsn", ")", ".", "round", "(", ")", ")", "\n", "", "", "clip", ",", "_", "=", "self", ".", "gd", "[", "video_id", ",", "frame_indices", "]", "\n", "# if video is shorter than necessary", "\n", "for", "i", "in", "range", "(", "self", ".", "tsn", ")", ":", "\n", "                ", "if", "len", "(", "clip", ")", ">=", "self", ".", "tsn", ":", "\n", "                    ", "break", "\n", "", "clip", ".", "append", "(", "clip", "[", "i", "]", ")", "\n", "# augmentation", "\n", "", "if", "self", ".", "transform", ":", "\n", "                ", "self", ".", "transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "# format data to torch tensor", "\n", "", "if", "self", ".", "tsn", "==", "1", ":", "\n", "                ", "clip", "=", "torch", ".", "from_numpy", "(", "clip", "[", "0", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "clip_", "=", "[", "]", "\n", "for", "c", "in", "clip", ":", "\n", "                    ", "clip_", ".", "append", "(", "torch", ".", "from_numpy", "(", "c", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", "clip", "=", "clip_", "\n", "", "", "else", ":", "\n", "            ", "num_frames_sample", "=", "frame_end", "-", "frame_start", "\n", "num_frames_necessary", "=", "self", ".", "num_frames", "*", "self", ".", "step_size", "\n", "diff", "=", "num_frames_sample", "-", "num_frames_necessary", "\n", "offset", "=", "0", "\n", "if", "diff", ">", "0", ":", "\n", "                ", "if", "self", ".", "random_offset", ":", "\n", "                    ", "offset", "=", "random", ".", "randint", "(", "0", ",", "diff", ")", "\n", "", "else", ":", "\n", "                    ", "offset", "=", "diff", "//", "2", "\n", "# set target frames to be loaded", "\n", "", "", "frames_slice", "=", "slice", "(", "offset", "+", "frame_start", ",", "offset", "+", "frame_start", "+", "num_frames_necessary", ",", "\n", "self", ".", "step_size", ")", "\n", "clip", ",", "_", "=", "self", ".", "gd", "[", "video_id", ",", "frames_slice", "]", "\n", "# if video is shorter than necessary", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames", ")", ":", "\n", "                ", "if", "len", "(", "clip", ")", ">=", "self", ".", "num_frames", ":", "\n", "                    ", "break", "\n", "", "clip", ".", "append", "(", "clip", "[", "i", "]", ")", "\n", "# augmentation", "\n", "", "if", "self", ".", "transform", ":", "\n", "                ", "self", ".", "transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "# format data to torch tensor", "\n", "", "clip", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "clip", ",", "0", ")", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.__len__": [[116, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is called by PyTorch dataloader to decide the size of the dataset.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.make_db": [[122, 147], ["sorted", "GulpVideoDataset.GulpVideoDataset.gd.merged_meta_dict.items", "len", "GulpVideoDataset.GulpVideoDataset.data.append", "max", "range", "print", "min", "min", "GulpVideoDataset.GulpVideoDataset.data.append", "int"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append", "home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "make_db", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "]", "\n", "num_frames_necessary", "=", "self", ".", "num_frames", "*", "self", ".", "step_size", "\n", "video_dict_item_sorted", "=", "sorted", "(", "self", ".", "gd", ".", "merged_meta_dict", ".", "items", "(", ")", ")", "\n", "for", "video_id", ",", "video_info", "in", "video_dict_item_sorted", ":", "\n", "            ", "label_idx", "=", "self", ".", "label2idx", "[", "video_info", "[", "'meta_data'", "]", "[", "0", "]", "[", "'label'", "]", "]", "\n", "num_frames_video", "=", "len", "(", "video_info", "[", "'frame_info'", "]", ")", "\n", "if", "self", ".", "samples_per_video", "==", "1", ":", "\n", "                ", "self", ".", "data", ".", "append", "(", "{", "\n", "'video_id'", ":", "video_id", ",", "\n", "'label'", ":", "label_idx", ",", "\n", "'frame_index'", ":", "[", "0", ",", "num_frames_video", "]", "}", ")", "\n", "", "elif", "self", ".", "samples_per_video", ">", "1", ":", "\n", "                ", "num_diff", "=", "max", "(", "0", ",", "num_frames_video", "-", "num_frames_necessary", ")", "\n", "step", "=", "num_diff", "/", "(", "self", ".", "samples_per_video", "-", "1", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "samples_per_video", ")", ":", "\n", "                    ", "frame_start", "=", "min", "(", "num_frames_video", "-", "1", ",", "int", "(", "j", "*", "step", ")", ")", "\n", "frame_end", "=", "min", "(", "num_frames_video", ",", "frame_start", "+", "num_frames_necessary", ")", "\n", "self", ".", "data", ".", "append", "(", "{", "\n", "'video_id'", ":", "video_id", ",", "\n", "'label'", ":", "label_idx", ",", "\n", "'frame_index'", ":", "[", "frame_start", ",", "frame_end", "]", "}", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"samples_per_video=\"", ",", "self", ".", "samples_per_video", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.datasets.GulpVideoDataset.GulpVideoDataset.multiply_data": [[148, 150], ["None"], "methods", ["None"], ["", "", "", "def", "multiply_data", "(", "n_times", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", "*", "n_times", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.something-something.gen_json.transform_str": [[29, 36], ["string_.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace"], "function", ["None"], ["def", "transform_str", "(", "string_", ")", ":", "\n", "    ", "string", "=", "string_", ".", "replace", "(", "'['", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "']'", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "'('", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "')'", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "'\\''", ",", "''", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.something-something.webm_to_mp4.process_video": [[22, 34], ["os.path.join", "cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "os.system", "os.path.basename().split", "int", "int", "os.path.basename"], "function", ["None"], ["def", "process_video", "(", "v", ")", ":", "\n", "    ", "vid", "=", "os", ".", "path", ".", "basename", "(", "v", ")", ".", "split", "(", "'.webm'", ")", "[", "0", "]", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "mp4_dir", ",", "vid", "+", "'.mp4'", ")", "\n", "\n", "video", "=", "cv2", ".", "VideoCapture", "(", "v", ")", "\n", "height", "=", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", "\n", "width", "=", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", "\n", "\n", "height", "=", "(", "int", "(", "height", ")", "//", "2", ")", "*", "2", "\n", "width", "=", "(", "int", "(", "width", ")", "//", "2", ")", "*", "2", "\n", "\n", "os", ".", "system", "(", "'ffmpeg -i {} -s {}x{} {}'", ".", "format", "(", "v", ",", "width", ",", "height", ",", "output_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.something-something.divide_mp4.transform_cmd_line_str": [[27, 35], ["string_.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace"], "function", ["None"], ["def", "transform_cmd_line_str", "(", "string_", ")", ":", "\n", "    ", "string", "=", "string_", ".", "replace", "(", "'['", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "']'", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "'('", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "')'", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "'\\''", ",", "''", ")", "\n", "string", "=", "string", ".", "replace", "(", "' '", ",", "'\\ '", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.jester.jpg_to_mp4.process_video": [[22, 32], ["os.path.basename", "os.path.join", "cv2.imread", "os.path.join", "os.path.join", "os.system"], "function", ["None"], ["def", "process_video", "(", "v", ")", ":", "\n", "    ", "vid", "=", "os", ".", "path", ".", "basename", "(", "v", ")", "\n", "jpg", "=", "os", ".", "path", ".", "join", "(", "v", ",", "'00001.jpg'", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "jpg", ")", "\n", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "mp4_dir", ",", "vid", "+", "'.mp4'", ")", "\n", "\n", "jpgs", "=", "os", ".", "path", ".", "join", "(", "v", ",", "'%05d.jpg'", ")", "\n", "os", ".", "system", "(", "'ffmpeg -r 12 -f image2 -s {}x{} -i {} -crf 25 {}'", ".", "format", "(", "w", ",", "h", ",", "jpgs", ",", "output_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.Compose.__init__": [[24, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.Compose.__call__": [[27, 33], ["isinstance", "numpy.array", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "# if PIL Image, convert to Numpy array", "\n", "            ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.Compose.randomize_parameters": [[34, 38], ["getattr", "t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "getattr", "(", "t", ",", "\"randomize_parameters\"", ",", "None", ")", ":", "\n", "                ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToRGB2BGR.__init__": [[40, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToRGB2BGR.__call__": [[42, 44], ["cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToBGR2RGB.__init__": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToBGR2RGB.__call__": [[48, 50], ["cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToNormalizedTensor.__init__": [[52, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "norm_scale", "=", "255.0", ")", ":", "\n", "        ", "self", ".", "mean", "=", "[", "norm_scale", "*", "m", "for", "m", "in", "mean", "]", "\n", "self", ".", "std", "=", "[", "norm_scale", "*", "s", "for", "s", "in", "std", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ToNormalizedTensor.__call__": [[56, 62], ["numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "float32", ")", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "(", "img", "[", ":", ",", ":", ",", "0", "]", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "(", "img", "[", ":", ",", ":", ",", "1", "]", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "(", "img", "[", ":", ",", ":", ",", "2", "]", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop.__init__": [[77, 86], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop.get_params": [[87, 119], ["range", "min", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "size", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "size", "[", "0", "]", "*", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "ratio", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "size", "[", "0", "]", "and", "h", "<=", "size", "[", "1", "]", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "size", "[", "1", "]", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "size", "[", "0", "]", "-", "w", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n", "# Fallback", "\n", "", "", "w", "=", "min", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "i", "=", "(", "size", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "j", "=", "(", "size", "[", "0", "]", "-", "w", ")", "//", "2", "\n", "return", "i", ",", "j", ",", "w", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop.__call__": [[120, 132], ["isinstance", "cv2.resize", "torchvision.transforms.functional.resized_crop", "spatial_transforms.RandomResizedCrop.get_params", "spatial_transforms.RandomResizedCrop.get_params"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params", "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "ih", ",", "iw", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "params", "=", "self", ".", "get_params", "(", "(", "iw", ",", "ih", ")", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "params", "\n", "img", "=", "img", "[", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "return", "cv2", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "self", ".", "params", "=", "self", ".", "get_params", "(", "img", ".", "size", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "", "return", "F", ".", "resized_crop", "(", "img", ",", "*", "self", ".", "params", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop.randomize_parameters": [[133, 135], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomCrop.__init__": [[138, 144], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomCrop.get_params": [[145, 155], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "input_size", ",", "output_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "input_size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomCrop.__call__": [[156, 167], ["isinstance", "torchvision.transforms.functional.crop", "spatial_transforms.RandomCrop.get_params", "spatial_transforms.RandomCrop.get_params"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params", "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "ih", ",", "iw", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "params", "=", "self", ".", "get_params", "(", "(", "iw", ",", "ih", ")", ",", "self", ".", "size", ")", "\n", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "params", "\n", "return", "img", "[", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "self", ".", "params", "=", "self", ".", "get_params", "(", "img", ".", "size", ",", "self", ".", "size", ")", "\n", "", "return", "F", ".", "crop", "(", "img", ",", "*", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomCrop.randomize_parameters": [[168, 170], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.__init__": [[185, 194], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params": [[195, 223], ["min", "random.uniform", "random.uniform", "int", "int", "round", "round", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "size", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "minlen", "=", "min", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "target_scale", "=", "random", ".", "uniform", "(", "*", "scale", ")", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "ratio", ")", "\n", "w", "=", "int", "(", "round", "(", "minlen", "*", "target_scale", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "minlen", "*", "target_scale", "/", "aspect_ratio", ")", ")", "\n", "\n", "pad_t", "=", "0", "\n", "pad_b", "=", "0", "\n", "pad_l", "=", "0", "\n", "pad_r", "=", "0", "\n", "pad_type", "=", "-", "1", "\n", "if", "size", "[", "0", "]", ">=", "w", ":", "\n", "            ", "j", "=", "random", ".", "randint", "(", "0", ",", "size", "[", "0", "]", "-", "w", ")", "\n", "", "else", ":", "\n", "            ", "j", "=", "0", "\n", "pad_l", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "size", "[", "0", "]", ")", "\n", "pad_r", "=", "w", "-", "size", "[", "0", "]", "-", "pad_l", "\n", "pad_type", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "", "if", "size", "[", "1", "]", ">=", "h", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "size", "[", "1", "]", "-", "h", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "0", "\n", "pad_t", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "size", "[", "1", "]", ")", "\n", "pad_b", "=", "h", "-", "size", "[", "1", "]", "-", "pad_t", "\n", "pad_type", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "", "return", "i", ",", "j", ",", "h", ",", "w", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "pad_type", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.__call__": [[224, 249], ["isinstance", "cv2.resize", "torchvision.transforms.functional.resized_crop", "spatial_transforms.RandomResizedCrop2.get_params", "cv2.copyMakeBorder", "spatial_transforms.RandomResizedCrop2.get_params", "torchvision.transforms.functional.pad", "cv2.copyMakeBorder", "torchvision.transforms.functional.pad", "cv2.copyMakeBorder", "torchvision.transforms.functional.pad"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params", "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "ih", ",", "iw", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "params", "=", "self", ".", "get_params", "(", "(", "iw", ",", "ih", ")", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "", "i", ",", "j", ",", "h", ",", "w", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "pad_type", "=", "self", ".", "params", "\n", "if", "pad_type", "==", "0", ":", "\n", "                ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "", "elif", "pad_type", "==", "1", ":", "\n", "                ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "", "elif", "pad_type", "==", "2", ":", "\n", "                ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "cv2", ".", "BORDER_REFLECT_101", ")", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", "[", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "return", "img", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "params", "==", "None", ":", "\n", "                ", "self", ".", "params", "=", "self", ".", "get_params", "(", "img", ".", "size", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "", "i", ",", "j", ",", "h", ",", "w", ",", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", ",", "pad_type", "=", "self", ".", "params", "\n", "if", "pad_type", "==", "0", ":", "\n", "                ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "pad_l", ",", "pad_t", ",", "pad_r", ",", "pad_b", ")", ",", "padding_mode", "=", "'constant'", ")", "\n", "", "elif", "pad_type", "==", "1", ":", "\n", "                ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "pad_l", ",", "pad_t", ",", "pad_r", ",", "pad_b", ")", ",", "padding_mode", "=", "'edge'", ")", "\n", "", "elif", "pad_type", "==", "2", ":", "\n", "                ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "pad_l", ",", "pad_t", ",", "pad_r", ",", "pad_b", ")", ",", "padding_mode", "=", "'reflect'", ")", "\n", "", "return", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomResizedCrop2.randomize_parameters": [[250, 252], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomHorizontalFlip.__call__": [[256, 269], ["isinstance", "cv2.flip", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be flipped.\n        Returns:\n            PIL Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "hflip", "(", "img", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[270, 272], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.Resize.__init__": [[275, 283], ["isinstance", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "# self.size = (size, size)", "\n", "            ", "self", ".", "size", "=", "size", "\n", "print", "(", "\"[CHANGED Jul 18, 2018] Now RESIZE(INT) keeps the aspect ratio of input!!!\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.Resize.__call__": [[284, 302], ["isinstance", "isinstance", "cv2.resize", "torchvision.transforms.functional.resize", "cv2.resize", "cv2.resize", "int", "int", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "                ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "# if (w <= h and w == size) or (h <= w and h == size):", "\n", "#     return img", "\n", "if", "w", "<", "h", ":", "\n", "                    ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "float", "(", "size", ")", "*", "h", "/", "w", "/", "2", ")", "*", "2", "\n", "return", "cv2", ".", "resize", "(", "img", ",", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                    ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "float", "(", "size", ")", "*", "w", "/", "h", "/", "2", ")", "*", "2", "\n", "return", "cv2", ".", "resize", "(", "img", ",", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "return", "cv2", ".", "resize", "(", "img", ",", "size", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "resize", "(", "img", ",", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.CenterCrop.__init__": [[305, 310], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.CenterCrop.__call__": [[311, 321], ["isinstance", "int", "int", "torchvision.transforms.functional.center_crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "i", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "j", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "return", "img", "[", "i", ":", "i", "+", "th", ",", "j", ":", "j", "+", "tw", "]", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "center_crop", "(", "img", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.__init__": [[335, 340], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.__call__": [[341, 353], ["cv2.cvtColor", "cv2.cvtColor", "cv2.addWeighted", "cv2.convertScaleAbs", "cv2.multiply", "numpy.uint8", "numpy.int16"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# apply transforms in HSV colorspace", "\n", "        ", "imghsv", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "if", "self", ".", "brightness", ">", "0", "or", "self", ".", "contrast", ">", "0", ":", "\n", "            ", "imghsv", "[", ":", ",", ":", ",", "2", "]", "=", "cv2", ".", "convertScaleAbs", "(", "imghsv", "[", ":", ",", ":", ",", "2", "]", ",", "alpha", "=", "self", ".", "contrast_factor", ",", "beta", "=", "self", ".", "brightness_factor", "*", "255", ")", "\n", "", "if", "self", ".", "saturation", ">", "0", ":", "\n", "            ", "imghsv", "[", ":", ",", ":", ",", "1", "]", "=", "cv2", ".", "multiply", "(", "imghsv", "[", ":", ",", ":", ",", "1", "]", ",", "self", ".", "saturation_factor", ")", "\n", "", "if", "self", ".", "hue", ">", "0", ":", "\n", "            ", "imghsv", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "uint8", "(", "(", "np", ".", "int16", "(", "imghsv", "[", ":", ",", ":", ",", "0", "]", ")", "+", "self", ".", "hue_factor", "*", "180", ")", "%", "180", ")", "\n", "", "img_rgb", "=", "cv2", ".", "cvtColor", "(", "imghsv", ",", "cv2", ".", "COLOR_HSV2RGB", ")", "\n", "# blend the input image with the transformed image", "\n", "return", "cv2", ".", "addWeighted", "(", "img", ",", "0.5", ",", "img_rgb", ",", "0.5", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.__repr__": [[354, 356], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.spatial_transforms.ColorJitter.randomize_parameters": [[357, 362], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "max", "max"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "brightness", ",", "self", ".", "brightness", ")", "\n", "self", ".", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "self", ".", "contrast", ")", ",", "1", "+", "self", ".", "contrast", ")", "\n", "self", ".", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "self", ".", "saturation", ")", ",", "1", "+", "self", ".", "saturation", ")", "\n", "self", ".", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "self", ".", "hue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.mean.get_mean": [[1, 4], ["None"], "function", ["None"], ["def", "get_mean", "(", "data", "=", "'imagenet'", ")", ":", "\n", "# use ImageNet standard values", "\n", "    ", "return", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.mean.get_std": [[6, 8], ["None"], "function", ["None"], ["", "def", "get_std", "(", "data", "=", "'imagenet'", ")", ":", "\n", "    ", "return", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.target_transforms.Compose.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.target_transforms.Compose.__call__": [[10, 15], ["dst.append", "t"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.gulpio.gulpio.GulpChunk.append"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "dst", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "dst", ".", "append", "(", "t", "(", "target", ")", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.target_transforms.ClassLabel.__call__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.dataloader_utils.target_transforms.VideoID.__call__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'video_id'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xingyul_cpnet.knn_l2.knn_l2.knn": [[11, 19], ["tensorflow.square", "tensorflow.ones", "tensorflow.ones", "knn_module.knn_l2", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.knn_l2"], ["def", "knn", "(", "I", ",", "k", ",", "u", ")", ":", "\n", "    ", "'''\n    I has shape of [B, N, C]\n    '''", "\n", "I_norm", "=", "tf", ".", "square", "(", "tf", ".", "norm", "(", "I", ",", "axis", "=", "-", "1", ")", ")", "\n", "k", "=", "tf", ".", "ones", "(", "[", "k", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "u", "=", "tf", ".", "ones", "(", "[", "u", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "knn_module", ".", "knn_l2", "(", "I", ",", "I_norm", ",", "k", ",", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.knn_l2.knn_l2._my_knn_shape": [[20, 28], ["tensorflow.python.framework.ops.RegisterShape", "op.inputs[].get_shape().with_rank", "op.inputs[].get_shape().with_rank", "tensorflow.TensorShape", "op.inputs[].get_shape", "op.inputs[].get_shape"], "function", ["None"], ["", "@", "ops", ".", "RegisterShape", "(", "'KnnL2'", ")", "\n", "def", "_my_knn_shape", "(", "op", ")", ":", "\n", "    ", "shape1", "=", "op", ".", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "B", "=", "shape1", ".", "dims", "[", "0", "]", "\n", "N", "=", "shape1", ".", "dims", "[", "1", "]", "\n", "shape2", "=", "op", ".", "inputs", "[", "2", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "1", ")", "\n", "K", "=", "shape2", ".", "dims", "[", "0", "]", "\n", "return", "[", "tf", ".", "TensorShape", "(", "[", "B", ",", "N", ",", "K", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping_op_test.GroupPointTest.test": [[9, 11], ["None"], "methods", ["None"], ["  ", "def", "test", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping_op_test.GroupPointTest.test_grad": [[12, 29], ["tensorflow.device", "tensorflow.constant", "print", "tensorflow.constant", "tensorflow.constant", "tf_grouping.query_ball_point", "tf_grouping.group_point", "print", "tf_grouping_op_test.GroupPointTest.test_session", "print", "tensorflow.test.compute_gradient_error", "print", "tf_grouping_op_test.GroupPointTest.assertLess", "numpy.random.random().astype", "numpy.random.random().astype", "numpy.random.random().astype", "numpy.random.random", "numpy.random.random", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.query_ball_point", "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.group_point"], ["", "def", "test_grad", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "      ", "points", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "128", ",", "16", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "print", "(", "points", ")", "\n", "xyz1", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "128", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "xyz2", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "8", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "radius", "=", "0.3", "\n", "nsample", "=", "32", "\n", "idx", ",", "pts_cnt", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz1", ",", "xyz2", ")", "\n", "grouped_points", "=", "group_point", "(", "points", ",", "idx", ")", "\n", "print", "(", "grouped_points", ")", "\n", "\n", "", "with", "self", ".", "test_session", "(", ")", ":", "\n", "      ", "print", "(", "\"---- Going to compute gradient error\"", ")", "\n", "err", "=", "tf", ".", "test", ".", "compute_gradient_error", "(", "points", ",", "(", "1", ",", "128", ",", "16", ")", ",", "grouped_points", ",", "(", "1", ",", "8", ",", "32", ",", "16", ")", ")", "\n", "print", "(", "err", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.query_ball_point": [[8, 21], ["grouping_module.query_ball_point"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.query_ball_point"], ["def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        radius: float32, ball search radius\n        nsample: int32, number of points selected in each ball region\n        xyz1: (batch_size, ndataset, 3) float32 array, input points\n        xyz2: (batch_size, npoint, 3) float32 array, query points\n    Output:\n        idx: (batch_size, npoint, nsample) int32 array, indices to input points\n        pts_cnt: (batch_size, npoint) int32 array, number of unique points in each local region\n    '''", "\n", "#return grouping_module.query_ball_point(radius, nsample, xyz1, xyz2)", "\n", "return", "grouping_module", ".", "query_ball_point", "(", "xyz1", ",", "xyz2", ",", "radius", ",", "nsample", ")", "\n", "", "ops", ".", "NoGradient", "(", "'QueryBallPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.select_top_k": [[22, 32], ["grouping_module.selection_sort"], "function", ["None"], ["def", "select_top_k", "(", "k", ",", "dist", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k SMALLEST elements selected\n        dist: (b,m,n) float32 array, distance matrix, m query points, n dataset points\n    Output:\n        idx: (b,m,n) int32 array, first k in n are indices to the top k\n        dist_out: (b,m,n) float32 array, first k in n are the top k\n    '''", "\n", "return", "grouping_module", ".", "selection_sort", "(", "dist", ",", "k", ")", "\n", "", "ops", ".", "NoGradient", "(", "'SelectionSort'", ")", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.group_point": [[33, 42], ["grouping_module.group_point"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.group_point"], ["def", "group_point", "(", "points", ",", "idx", ")", ":", "\n", "    ", "'''\n    Input:\n        points: (batch_size, ndataset, channel) float32 array, points to sample from\n        idx: (batch_size, npoint, nsample) int32 array, indices to points\n    Output:\n        out: (batch_size, npoint, nsample, channel) float32 array, values sampled from points\n    '''", "\n", "return", "grouping_module", ".", "group_point", "(", "points", ",", "idx", ")", "\n", "", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping._group_point_grad": [[42, 47], ["tensorflow.RegisterGradient", "grouping_module.group_point_grad"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n", "def", "_group_point_grad", "(", "op", ",", "grad_out", ")", ":", "\n", "    ", "points", "=", "op", ".", "inputs", "[", "0", "]", "\n", "idx", "=", "op", ".", "inputs", "[", "1", "]", "\n", "return", "[", "grouping_module", ".", "group_point_grad", "(", "points", ",", "idx", ",", "grad_out", ")", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.knn_point": [[48, 70], ["tensorflow.tile", "tensorflow.tile", "tensorflow.reduce_sum", "tf_grouping.select_top_k", "tensorflow.slice", "tensorflow.slice", "tensorflow.reshape", "tensorflow.reshape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.grouping.tf_grouping.select_top_k"], ["", "def", "knn_point", "(", "k", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k in k-nn search\n        xyz1: (batch_size, ndataset, c) float32 array, input points\n        xyz2: (batch_size, npoint, c) float32 array, query points\n    Output:\n        val: (batch_size, npoint, k) float32 array, L2 distances\n        idx: (batch_size, npoint, k) int32 array, indices to input points\n    '''", "\n", "b", "=", "xyz1", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "n", "=", "xyz1", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "c", "=", "xyz1", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "m", "=", "xyz2", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "xyz1", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "xyz1", ",", "(", "b", ",", "1", ",", "n", ",", "c", ")", ")", ",", "[", "1", ",", "m", ",", "1", ",", "1", "]", ")", "\n", "xyz2", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "xyz2", ",", "(", "b", ",", "m", ",", "1", ",", "c", ")", ")", ",", "[", "1", ",", "1", ",", "n", ",", "1", "]", ")", "\n", "dist", "=", "tf", ".", "reduce_sum", "(", "(", "xyz1", "-", "xyz2", ")", "**", "2", ",", "-", "1", ")", "\n", "outi", ",", "out", "=", "select_top_k", "(", "k", ",", "dist", ")", "\n", "idx", "=", "tf", ".", "slice", "(", "outi", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "val", "=", "tf", ".", "slice", "(", "out", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "#val, idx = tf.nn.top_k(-dist, k=k) # ONLY SUPPORT CPU", "\n", "return", "val", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_112.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_112.convert_2d_3d": [[30, 43], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_112.placeholder_inputs": [[44, 48], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_112.get_model": [[49, 98], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "False", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "topks", "=", "[", "None", ",", "8", ",", "8", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "n_channels", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "topks", "[", "gp", "]", "is", "not", "None", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp", "=", "[", "c", "//", "4", ",", "c", "//", "2", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_112.get_loss": [[100, 108], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_224.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_224.convert_2d_3d": [[30, 46], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims", "numpy.tile", "tensorflow.global_variables", "var.get_shape"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "var", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "k", "in", "v", ".", "op", ".", "name", "]", "[", "0", "]", "\n", "if", "var", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "!=", "W", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "W", "=", "np", ".", "tile", "(", "W", ",", "[", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "/", "3", "\n", "", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_224.placeholder_inputs": [[47, 51], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_224.get_model": [[52, 105], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "True", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "# pointnet options", "\n", "topks", "=", "[", "None", ",", "4", ",", "4", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "pn", "=", "[", "[", "0", "]", "*", "3", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", "]", "*", "20", "+", "[", "1", "]", "*", "3", ",", "[", "0", "]", "*", "3", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", "*", "4", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv3'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "(", "n_channels", "*", "4", ")", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", "*", "4", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "pn", "[", "gp", "]", "[", "i", "]", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp0", "=", "[", "c", "//", "8", "]", ",", "mlp", "=", "[", "c", "//", "8", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_224.get_loss": [[107, 115], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_112.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_112.convert_2d_3d": [[30, 43], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_112.placeholder_inputs": [[44, 48], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_112.get_model": [[49, 99], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "False", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "topks", "=", "[", "None", ",", "8", ",", "8", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "pn", "=", "[", "[", "0", "]", "*", "3", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", "]", "*", "3", "+", "[", "1", "]", "*", "3", ",", "[", "0", "]", "*", "3", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "n_channels", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "pn", "[", "gp", "]", "[", "i", "]", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp", "=", "[", "c", "//", "4", ",", "c", "//", "2", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_112.get_loss": [[101, 109], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_224.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_224.convert_2d_3d": [[30, 43], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_224.placeholder_inputs": [[44, 48], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_224.get_model": [[49, 98], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "True", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "topks", "=", "[", "None", ",", "8", ",", "8", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "n_channels", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "topks", "[", "gp", "]", "is", "not", "None", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp", "=", "[", "c", "//", "4", ",", "c", "//", "2", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet18_cp_224.get_loss": [[100, 108], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_112.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_112.convert_2d_3d": [[30, 46], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims", "numpy.tile", "tensorflow.global_variables", "var.get_shape"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "var", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "k", "in", "v", ".", "op", ".", "name", "]", "[", "0", "]", "\n", "if", "var", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "!=", "W", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "W", "=", "np", ".", "tile", "(", "W", ",", "[", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "/", "3", "\n", "", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_112.placeholder_inputs": [[47, 51], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_112.get_model": [[52, 105], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "False", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "# pointnet options", "\n", "topks", "=", "[", "None", ",", "4", ",", "4", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "pn", "=", "[", "[", "0", "]", "*", "3", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", "]", "*", "20", "+", "[", "1", "]", "*", "3", ",", "[", "0", "]", "*", "3", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", "*", "4", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv3'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "(", "n_channels", "*", "4", ")", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", "*", "4", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "pn", "[", "gp", "]", "[", "i", "]", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp0", "=", "[", "c", "//", "8", "]", ",", "mlp", "=", "[", "c", "//", "8", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet101_cp_112.get_loss": [[107, 115], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.name_mapping": [[12, 29], ["var_dict.keys", "k.split", "key.replace", "key.replace", "key.replace"], "function", ["None"], ["def", "name_mapping", "(", "var_dict", ",", "debug", "=", "False", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "mapped_dict", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "key", "=", "k", ".", "split", "(", "':0'", ")", "[", "0", "]", "\n", "new_key", "=", "key", "\n", "if", "'/W'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/W'", ",", "'/weights'", ")", "\n", "", "elif", "'/mean/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/mean/EMA'", ",", "'/moving_mean'", ")", "\n", "", "elif", "'/variance/EMA'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'/variance/EMA'", ",", "'/moving_variance'", ")", "\n", "", "mapped_dict", "[", "new_key", "]", "=", "var_dict", "[", "k", "]", "\n", "", "if", "debug", ":", "\n", "        ", "mapped_dict", "[", "'fc/biases'", "]", "=", "var_dict", "[", "'linear/b:0'", "]", "\n", "mapped_dict", "[", "'fc/weights'", "]", "=", "var_dict", "[", "'linear/W:0'", "]", "\n", "", "return", "mapped_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.convert_2d_3d": [[30, 43], ["var_dict.keys", "copy.deepcopy", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "convert_2d_3d", "(", "var_dict", ")", ":", "\n", "    ", "keys", "=", "var_dict", ".", "keys", "(", ")", "\n", "converted_dict", "=", "copy", ".", "deepcopy", "(", "var_dict", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "'weights'", "in", "k", "and", "'conv'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "4", ":", "\n", "                ", "W", "=", "np", ".", "expand_dims", "(", "W", ",", "0", ")", "\n", "", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "if", "'fc/weights'", "in", "k", ":", "\n", "            ", "W", "=", "var_dict", "[", "k", "]", "\n", "converted_dict", "[", "k", "]", "=", "W", "\n", "", "", "return", "converted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.placeholder_inputs": [[44, 48], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["", "def", "placeholder_inputs", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "video_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_frames", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "video_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_model": [[49, 99], ["tf_util.conv3d", "tf_util.max_pool3d", "enumerate", "tensorflow.reduce_mean", "tf_util.dropout", "tf_util.fully_connected", "video.get_shape", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "tf_util.conv3d", "tensorflow.nn.relu", "tf_util.conv3d", "tf_util.conv3d", "tf_util.conv3d", "net_utils.cp_module", "tf_util.conv3d.get_shape", "tf_util.conv3d.get_shape"], "function", ["home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.max_pool3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.dropout", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.fully_connected", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.None.tf_util.conv3d", "home.repos.pwc.inspect_result.xingyul_cpnet.utils.net_utils.cp_module"], ["", "def", "get_model", "(", "video", ",", "is_training", ",", "num_classes", "=", "400", ",", "bn_decay", "=", "0.999", ",", "weight_decay", "=", "0.0001", ",", "pool_t", "=", "False", ",", "pool_first", "=", "True", ",", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\" Video Net, input is BxTxHxWx3, output Bx400 \"\"\"", "\n", "bsize", "=", "video", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "channel_stride", "=", "[", "(", "64", ",", "1", ")", ",", "(", "128", ",", "2", ")", ",", "(", "256", ",", "2", ")", ",", "(", "512", ",", "2", ")", "]", "\n", "# res block options", "\n", "num_blocks", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "topks", "=", "[", "None", ",", "8", ",", "8", ",", "None", "]", "\n", "shrink_ratios", "=", "[", "None", ",", "2", ",", "None", ",", "None", "]", "\n", "pn", "=", "[", "[", "0", "]", "*", "3", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", "]", "*", "3", "+", "[", "1", "]", "*", "3", ",", "[", "0", "]", "*", "3", "]", "\n", "\n", "net", "=", "tf_util", ".", "conv3d", "(", "video", ",", "64", ",", "[", "1", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", "if", "pool_first", "else", "1", ",", "2", "if", "pool_first", "else", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "tf_util", ".", "max_pool3d", "(", "net", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "scope", "=", "'pool0'", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "for", "gp", ",", "cs", "in", "enumerate", "(", "channel_stride", ")", ":", "\n", "        ", "n_channels", "=", "cs", "[", "0", "]", "\n", "stride", "=", "cs", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'group{}'", ".", "format", "(", "gp", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", "[", "gp", "]", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "end_points", "[", "'res{}_{}_in'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "else", ":", "\n", "                        ", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv1'", ")", "\n", "", "net_bra", "=", "tf_util", ".", "conv3d", "(", "net_bra", ",", "n_channels", ",", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'conv2'", ")", "\n", "if", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "!=", "n_channels", ":", "\n", "                        ", "net", "=", "tf_util", ".", "conv3d", "(", "net", ",", "n_channels", ",", "[", "1", ",", "1", ",", "1", "]", ",", "stride", "=", "[", "1", ",", "stride", ",", "stride", "]", ",", "bn", "=", "True", ",", "bn_decay", "=", "bn_decay", ",", "is_training", "=", "is_training", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "freeze_bn", "=", "freeze_bn", ",", "scope", "=", "'convshortcut'", ")", "\n", "", "net", "=", "net", "+", "net_bra", "\n", "end_points", "[", "'res{}_{}_mid'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "if", "pn", "[", "gp", "]", "[", "i", "]", ":", "\n", "                        ", "c", "=", "net", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "net_pointnet", ",", "end_point", "=", "net_utils", ".", "cp_module", "(", "net", ",", "k", "=", "topks", "[", "gp", "]", ",", "mlp", "=", "[", "c", "//", "4", ",", "c", "//", "2", "]", ",", "scope", "=", "'pointnet'", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "weight_decay", "=", "weight_decay", ",", "distance", "=", "'l2'", ",", "activation_fn", "=", "None", ",", "freeze_bn", "=", "freeze_bn", ",", "shrink_ratio", "=", "shrink_ratios", "[", "gp", "]", ")", "\n", "net", "+=", "net_pointnet", "\n", "end_points", "[", "'pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "end_point", "\n", "end_points", "[", "'after_pointnet{}_{}'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "end_points", "[", "'res{}_{}_out'", ".", "format", "(", "gp", ",", "i", ")", "]", "=", "net", "\n", "\n", "", "", "", "", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "weight_decay", "=", "weight_decay", ",", "scope", "=", "'fc'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xingyul_cpnet.models.c2d_resnet34_cp_224.get_loss": [[101, 109], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]]}