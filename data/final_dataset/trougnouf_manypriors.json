{"home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.parser_add_arguments": [[34, 49], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "parser_add_arguments", "(", "parser", ")", "->", "None", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--encode'", ",", "type", "=", "str", ",", "help", "=", "'Encode a given image file (dimensions have to be divisible by 16. Output is save_path/encoded/arg+.bitstream if not specified by out_fpath)'", ")", "\n", "parser", ".", "add_argument", "(", "'--decode'", ",", "type", "=", "str", ",", "help", "=", "'Decode a given bitstream. Output will be save_path/decoded/arg+.png if not specified'", ")", "\n", "parser", ".", "add_argument", "(", "'--segmentation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Segment images in the args.commons_test_dpath directory. Output will be save_path/segmentation/#.png'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Plot cumulative distribution functions of a given (pretrain+params) model'", ")", "\n", "parser", ".", "add_argument", "(", "'--timing'", ",", "type", "=", "str", ",", "help", "=", "'Analyse timing of a given (pretrain) model using given image. (if arg is not an existing file then args.in_fpath is used)'", ")", "\n", "parser", ".", "add_argument", "(", "'--complexity'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Analyze the complexity of a given model'", ")", "\n", "parser", ".", "add_argument", "(", "'--encdec_kodak'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Test (encdec) args.test_dpath images'", ")", "\n", "parser", ".", "add_argument", "(", "'--encdec_dir'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Test (encdec) args.test_dpath images, save results under test_<directory_name>'", ")", "\n", "parser", ".", "add_argument", "(", "'--encdec_commons'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Test (encdec) args.test_commons_dpath images on CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--in_fpath'", ",", "type", "=", "str", ",", "help", "=", "'Input file path for timing when given arg is \"default\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_fpath'", ",", "help", "=", "'Output file path for encode/decode (default: ../../models/compression/EXPNAME/encdec/IN_FPATH+EXT)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_commons_dpath'", ",", "help", "=", "'Path of Commons Test Photographs downloaded from https://commons.wikimedia.org/wiki/Category:Commons_Test_Photographs'", ")", "\n", "parser", ".", "add_argument", "(", "'--prior_utilisation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Measure utilisation of each CDF table with a given model and an image directory provided with --test_dpath'", ")", "\n", "parser", ".", "add_argument", "(", "'--get_kl_divergence'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Measure Kullback\u2013Leibler divergence between every distribution and its closest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.parser_autocomplete": [[50, 53], ["tests.check_parameters"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.check_parameters"], ["", "def", "parser_autocomplete", "(", "args", ")", ":", "\n", "    ", "args", ".", "pretrain_prefix", "=", "'val'", "if", "args", ".", "val_dpath", "is", "not", "None", "else", "'test'", "\n", "check_parameters", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.check_parameters": [[54, 56], ["None"], "function", ["None"], ["", "def", "check_parameters", "(", "args", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.testComplexity": [[58, 69], ["model.cpu.cpu", "model.cpu.update_entropy_table", "torch.no_grad", "model.cpu.eval().complexity_analysis", "logger.info", "model.cpu.eval"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.complexity_analysis", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval"], ["", "def", "testComplexity", "(", "model", ",", "max_dim", "=", "4096", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --complexity --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64\n    '''", "\n", "model", "=", "model", ".", "cpu", "(", ")", "\n", "model", ".", "update_entropy_table", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "res", "=", "model", ".", "eval", "(", ")", ".", "complexity_analysis", "(", ")", "\n", "logger", ".", "info", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.testTiming": [[70, 83], ["model.cpu.cpu", "common.libs.pt_helpers.fpath_to_tensor().unsqueeze().cpu", "torch.no_grad", "model.cpu.eval", "model.cpu.timing_analysis", "logger.info", "common.libs.pt_helpers.fpath_to_tensor().unsqueeze", "common.libs.pt_helpers.fpath_to_tensor"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.timing_analysis"], ["", "", "def", "testTiming", "(", "model", ",", "in_fpath", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --timing \"../../datasets/test/Commons_Test_Photographs\" --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64\n    '''", "\n", "#test_img = datasets.TestDirDataset(data_dir=args.test_commons_dpath, resize=None, verbose=True)[6]", "\n", "model", "=", "model", ".", "cpu", "(", ")", "\n", "test_img", "=", "pt_helpers", ".", "fpath_to_tensor", "(", "in_fpath", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "timing_dict", "=", "model", ".", "timing_analysis", "(", "test_img", ")", "\n", "logger", ".", "info", "(", "timing_dict", ")", "\n", "return", "timing_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.testSegmentation": [[84, 100], ["model.eval().cpu.update_entropy_table", "model.eval().cpu.eval().cpu", "enumerate", "compression.libs.datasets.TestDirDataset", "os.path.join", "os.makedirs", "os.path.join", "model.eval().cpu.segment", "model.eval().cpu.eval"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.segment", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval"], ["", "", "def", "testSegmentation", "(", "model", ",", "imgs_dpath", ",", "save_path", ")", ":", "\n", "    ", "'''\n    Segment the images in commons_test_dpath by distribution index.\n    egrun:\n        python tests.py --segmentation --commons_test_dpath \"../../datasets/test/Commons_Test_Photographs\" --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64\n\n    '''", "\n", "model", ".", "update_entropy_table", "(", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", ".", "cpu", "(", ")", "\n", "#for testimgid in range(25):", "\n", "for", "testimgid", ",", "test_img", "in", "enumerate", "(", "datasets", ".", "TestDirDataset", "(", "data_dir", "=", "imgs_dpath", ",", "resize", "=", "None", ",", "verbose", "=", "True", ")", ")", ":", "\n", "#test_img = datasets.TestDirDataset(data_dir=imgs_dpath, resize=None, verbose=True)#[testimgid]", "\n", "        ", "test_savedir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'segment'", ")", "\n", "os", ".", "makedirs", "(", "test_savedir", ",", "exist_ok", "=", "True", ")", "\n", "test_savepath", "=", "os", ".", "path", ".", "join", "(", "test_savedir", ",", "'{}.png'", ".", "format", "(", "testimgid", ")", ")", "\n", "model", ".", "segment", "(", "test_img", ",", "test_savepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.visualizePriors": [[101, 162], ["torch.no_grad", "model.eval", "model.update_entropy_table", "model.entropy_table_float.cpu", "numpy.arange", "matplotlib.figure", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.savefig", "plt.figure.add_gridspec", "fig.add_gridspec.subplots", "fig.add_gridspec.subplots", "model.entropy_table_float.cpu.transpose", "os.path.join", "axa.plot", "plt.figure.add_gridspec", "plt.figure.add_gridspec", "matplotlib.xticks", "matplotlib.yticks", "entropy_table[].transpose", "math.ceil", "math.ceil", "print", "gs.subplots.plot", "gs.subplots.label_outer", "math.sqrt", "math.sqrt", "axb.plot", "axb.label_outer", "model.entropy_table_float.cpu.transpose", "matplotlib.xticks", "matplotlib.yticks", "entropy_table[].transpose"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu"], ["", "", "def", "visualizePriors", "(", "model", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --plot --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64\n    '''", "\n", "ONEROW", "=", "False", "\n", "TICK", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "model", ".", "update_entropy_table", "(", ")", "\n", "entropy_table", "=", "model", ".", "entropy_table_float", ".", "cpu", "(", ")", "\n", "x", "=", "np", ".", "arange", "(", "model", ".", "min_feat", "-", ".5", ",", "model", ".", "max_feat", "+", "1.5", ")", "\n", "# plt.plot(x, entropy_table[0].transpose(0,1))", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "if", "model", ".", "num_distributions", ">", "1", ":", "\n", "            ", "if", "ONEROW", ":", "\n", "                ", "gs", "=", "fig", ".", "add_gridspec", "(", "1", ",", "model", ".", "num_distributions", ",", "hspace", "=", "0", ",", "wspace", "=", "0", ")", "# all flat", "\n", "axs", "=", "gs", ".", "subplots", "(", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "dist", "=", "0", "\n", "for", "axa", "in", "axs", ":", "\n", "                    ", "if", "TICK", "==", "False", ":", "\n", "                        ", "plt", ".", "xticks", "(", "[", "]", ")", "# hide ticks", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "# hide ticks", "\n", "", "axa", ".", "plot", "(", "x", ",", "entropy_table", "[", "dist", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "#axa.set_xlabel(\"CDF_{}\".format(dist))", "\n", "dist", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "model", ".", "num_distributions", "==", "8", ":", "\n", "                    ", "gs", "=", "fig", ".", "add_gridspec", "(", "2", ",", "4", ",", "hspace", "=", "0", ",", "wspace", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "gs", "=", "fig", ".", "add_gridspec", "(", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "model", ".", "num_distributions", ")", ")", ",", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "model", ".", "num_distributions", ")", ")", ",", "hspace", "=", "0", ",", "wspace", "=", "0", ")", "\n", "\n", "", "axs", "=", "gs", ".", "subplots", "(", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "dist", "=", "0", "\n", "try", ":", "\n", "                    ", "for", "axa", "in", "axs", ":", "\n", "                        ", "for", "axb", "in", "axa", ":", "\n", "                            ", "if", "TICK", "==", "False", ":", "\n", "                                ", "plt", ".", "xticks", "(", "[", "]", ")", "# hide ticks", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "# hide ticks", "\n", "", "axb", ".", "plot", "(", "x", ",", "entropy_table", "[", "dist", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "dist", "+=", "1", "\n", "", "", "for", "axa", "in", "axs", ":", "\n", "                        ", "for", "axb", "in", "axa", ":", "\n", "                            ", "axb", ".", "label_outer", "(", ")", "\n", "", "", "", "except", "TypeError", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "axs", ".", "plot", "(", "x", ",", "entropy_table", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "axs", ".", "label_outer", "(", ")", "\n", "", "", "", "else", ":", "\n", "# actually everything should work in the 1st condition for any ndists", "\n", "            ", "plt", ".", "figure", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "x", ",", "entropy_table", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'priors.svg'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.test_dir": [[163, 298], ["torch.no_grad", "model.eval().to", "set", "enumerate", "matplotlib.show", "logger.info", "logger.info", "hasattr", "loss_cls.to.to", "time.time", "model.eval().to.", "torch.nn.functional.mse_loss", "logger.info", "os.path.join", "os.makedirs", "common.libs.pt_helpers.tensor_to_imgfile", "jsonsaver.add_res", "jsonsaver.add_res", "hasattr", "loss_cls.to.to", "model.eval", "input.to.to", "loss_cls.to.", "torch.device", "common.libs.pt_helpers.torch_cuda_synchronize", "time.time", "set.update", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.libs.pt_ops.img_to_batch", "common.libs.pt_ops.img_to_batch", "torch.nn.functional.mse_loss().mean", "matplotlib.hist", "matplotlib.grid", "clipped_recon_image.detach", "loss_cls.to.", "common.extlibs.pt_ms_ssim.ms_ssim", "str", "os.path.join", "logger.info", "tb_logger.add_scalar", "tb_logger.add_scalar", "tb_logger.add_scalar", "tb_logger.add_scalar", "tb_logger.add_scalar", "logger.info", "input.to.to", "gt.to.to", "clipped_recon_image.detach", "psnr.tolist", "torch.log", "numpy.log", "clipped_recon_image.detach", "print", "len", "tb_logger.add_scalar", "torch.nn.functional.mse_loss", "torch.log", "numpy.log", "torch.log", "numpy.log", "len", "str"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.img_to_batch", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.img_to_batch", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ms_ssim"], ["", "", "", "def", "test_dir", "(", "model", ",", "step", ",", "jsonsaver", ",", "config", ":", "dict", ",", "loader", ",", "device", ",", "prefix", "=", "'test'", ",", "tb_logger", "=", "None", ",", "loss_cls", "=", "None", ",", "gt_src", "=", "[", "'input'", ",", "'tuple'", "]", "[", "0", "]", ",", "incl_combined_loss", "=", "False", ")", ":", "\n", "    ", "'''\n    test a directory where images fit in GPU memory, s.a. kodak\n    gt = 'input' if the loader returns one image which should be reconstructed as-is,\n    gt = 'tuple' if the loader returns an input and a different ground-truth\n    egrun:\n        python tests.py --encdec_kodak --test_dpath \"../../datasets/test/kodak/\" --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64\n    '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tmodel", "=", "model", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "sumBpp", "=", "0", "\n", "sumPsnr", "=", "0", "\n", "sumMsssim", "=", "0", "\n", "sumMsssimDB", "=", "0", "\n", "sum_combined_loss", "=", "0", "\n", "sum_visual_loss", "=", "0", "\n", "sum_bpp_string", "=", "0", "\n", "sum_bpp_side_string", "=", "0", "\n", "sum_reconstruction_loss", "=", "0", "\n", "sumTime", "=", "0", "\n", "cnt", "=", "0", "\n", "used_dists_all", "=", "set", "(", ")", "\n", "if", "loss_cls", "is", "not", "None", "and", "hasattr", "(", "loss_cls", ",", "'kernel'", ")", ":", "\n", "            ", "orig_device", "=", "loss_cls", ".", "kernel", ".", "device", "\n", "loss_cls", "=", "loss_cls", ".", "to", "(", "device", ")", "\n", "", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "gt_src", "==", "'input'", ":", "\n", "                ", "input", "=", "gt", "=", "input", ".", "to", "(", "device", ")", "\n", "", "elif", "gt_src", "==", "'tuple'", ":", "\n", "                ", "input", ",", "gt", "=", "input", "\n", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "gt", "=", "gt", ".", "to", "(", "device", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "clipped_recon_image", ",", "visual_loss", ",", "bpp_feature", ",", "bpp_z", ",", "bpp", ",", "used_dists_now", ",", "_", "=", "tmodel", "(", "input", ")", "\n", "if", "visual_loss", "is", "None", ":", "\n", "                ", "assert", "loss_cls", "is", "not", "None", "\n", "visual_loss", "=", "loss_cls", "(", "clipped_recon_image", ",", "gt", ")", "\n", "", "if", "device", "!=", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "                ", "pt_helpers", ".", "torch_cuda_synchronize", "(", ")", "\n", "", "encoding_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "sumTime", "+=", "encoding_time", "\n", "if", "used_dists_now", "is", "not", "None", ":", "\n", "                ", "used_dists_all", ".", "update", "(", "used_dists_now", ")", "\n", "", "visual_loss", ",", "bpp_feature", ",", "bpp_z", ",", "bpp", "=", "torch", ".", "mean", "(", "visual_loss", ")", ",", "torch", ".", "mean", "(", "bpp_feature", ")", ",", "torch", ".", "mean", "(", "bpp_z", ")", ",", "torch", ".", "mean", "(", "bpp", ")", "\n", "\n", "if", "config", "[", "'test_cs'", "]", ":", "\n", "                ", "if", "gt_src", "!=", "'input'", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "test_batched_recon_img", "=", "pt_ops", ".", "img_to_batch", "(", "clipped_recon_image", ".", "detach", "(", ")", ",", "config", "[", "'test_cs'", "]", ")", "\n", "test_batched_input_img", "=", "pt_ops", ".", "img_to_batch", "(", "input", ",", "config", "[", "'test_cs'", "]", ")", "\n", "mse", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "test_batched_recon_img", ",", "test_batched_input_img", ",", "reduction", "=", "'none'", ")", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "psnr", "=", "10", "*", "(", "torch", ".", "log", "(", "1.", "/", "mse", ")", "/", "np", ".", "log", "(", "10", ")", ")", "\n", "plt", ".", "hist", "(", "psnr", ".", "tolist", "(", ")", ",", "50", ",", "density", "=", "True", ",", "histtype", "=", "'step'", ",", "cumulative", "=", "True", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n", "", "mse", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "clipped_recon_image", ".", "detach", "(", ")", ",", "gt", ")", "\n", "psnr", "=", "10", "*", "(", "torch", ".", "log", "(", "1.", "/", "mse", ")", "/", "np", ".", "log", "(", "10", ")", ")", "\n", "if", "gt_src", "!=", "'input'", ":", "\n", "                ", "assert", "loss_cls", "is", "not", "None", "\n", "reconstruction_loss", "=", "loss_cls", "(", "input", ",", "clipped_recon_image", ")", "\n", "sum_reconstruction_loss", "+=", "reconstruction_loss", "\n", "", "sumBpp", "+=", "bpp", "\n", "sumPsnr", "+=", "psnr", "\n", "try", ":", "\n", "                ", "msssim", "=", "pt_ms_ssim", ".", "ms_ssim", "(", "clipped_recon_image", ".", "detach", "(", ")", ",", "gt", ",", "data_range", "=", "1.0", ",", "size_average", "=", "True", ")", "\n", "msssimDB", "=", "-", "10", "*", "(", "torch", ".", "log", "(", "1", "-", "msssim", ")", "/", "np", ".", "log", "(", "10", ")", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "msssim", "=", "0", "\n", "msssimDB", "=", "0", "\n", "", "sumMsssimDB", "+=", "msssimDB", "\n", "sumMsssim", "+=", "msssim", "\n", "sum_combined_loss", "+=", "config", "[", "'train_lambda'", "]", "*", "visual_loss", "+", "bpp", "\n", "sum_visual_loss", "+=", "visual_loss", "\n", "if", "gt", "==", "'input'", ":", "\n", "               ", "sum_reconstruction_loss", "=", "sum_visual_loss", "\n", "", "sum_bpp_string", "+=", "bpp_feature", "\n", "sum_bpp_side_string", "+=", "bpp_z", "\n", "logger", ".", "info", "(", "\"Bpp:{:.6f}, PSNR:{:.6f}, MS-SSIM:{:.6f}, MS-SSIM-DB:{:.6f}, visual_loss: {:.6f}, enctime: {:.3f}, dists:{}\"", ".", "format", "(", "bpp", ",", "psnr", ",", "msssim", ",", "msssimDB", ",", "visual_loss", ",", "encoding_time", ",", "used_dists_now", ")", ")", "\n", "test_savedir", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'save_path'", "]", ",", "'tests'", ",", "str", "(", "step", ")", ")", "\n", "os", ".", "makedirs", "(", "test_savedir", ",", "exist_ok", "=", "True", ")", "\n", "pt_helpers", ".", "tensor_to_imgfile", "(", "clipped_recon_image", ",", "os", ".", "path", ".", "join", "(", "\n", "test_savedir", ",", "prefix", "+", "str", "(", "batch_idx", ")", "+", "'.png'", ")", ")", "\n", "cnt", "+=", "1", "\n", "", "plt", ".", "show", "(", ")", "\n", "logger", ".", "info", "(", "\"Test on {} dataset: model-{}\"", ".", "format", "(", "prefix", ",", "step", ")", ")", "\n", "sumBpp", "/=", "cnt", "\n", "sumPsnr", "/=", "cnt", "\n", "sumMsssim", "/=", "cnt", "\n", "sumMsssimDB", "/=", "cnt", "\n", "sum_combined_loss", "/=", "cnt", "\n", "sum_visual_loss", "/=", "cnt", "\n", "sum_bpp_string", "/=", "cnt", "\n", "sum_bpp_side_string", "/=", "cnt", "\n", "sum_reconstruction_loss", "/=", "cnt", "\n", "sumTime", "/=", "cnt", "\n", "logger", ".", "info", "(", "\"Dataset Average result---Bpp:{:.6f}, PSNR:{:.6f}, MS-SSIM:{:.6f}, MS-SSIM-DB:{:.6f}, visual_loss:{:.6f}, combined_loss:{:.6f}, enctime: {:.6f}, dists: {}\"", ".", "format", "(", "sumBpp", ",", "sumPsnr", ",", "sumMsssim", ",", "sumMsssimDB", ",", "sum_visual_loss", ",", "sum_combined_loss", ",", "encoding_time", ",", "used_dists_all", ")", ")", "\n", "if", "not", "config", "[", "'nolog'", "]", ":", "\n", "            ", "if", "tb_logger", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "\"Add tensorboard---Step:{}\"", ".", "format", "(", "step", ")", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"BPP_Test\"", ",", "sumBpp", ",", "step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"PSNR_Test\"", ",", "sumPsnr", ",", "step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"MS-SSIM_Test\"", ",", "sumMsssim", ",", "step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"MS-SSIM_DB_Test\"", ",", "sumMsssimDB", ",", "step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"RD_Test\"", ",", "sum_combined_loss", ",", "step", ")", "\n", "if", "len", "(", "used_dists_all", ")", ">", "0", ":", "\n", "                    ", "tb_logger", ".", "add_scalar", "(", "\"used_dists_test\"", ",", "len", "(", "used_dists_all", ")", ",", "step", ")", "\n", "", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"No need to add tensorboard\"", ")", "\n", "", "jsonsaver", ".", "add_res", "(", "\n", "step", ",", "\n", "{", "'{}_bpp'", ".", "format", "(", "prefix", ")", ":", "sumBpp", ",", "\n", "'{}_visual_loss.format(prefix)'", ":", "sum_visual_loss", ",", "\n", "'{}_bpp_string'", ".", "format", "(", "prefix", ")", ":", "sum_bpp_string", ",", "\n", "'{}_bpp_side_string'", ".", "format", "(", "prefix", ")", ":", "sum_bpp_side_string", ",", "\n", "'{}_combined_loss'", ".", "format", "(", "prefix", ")", ":", "sum_combined_loss", ",", "\n", "'{}_reconstruction_loss'", ".", "format", "(", "prefix", ")", ":", "sum_reconstruction_loss", "}", ",", "\n", "write", "=", "False", ",", "\n", "rm_none", "=", "True", "\n", ")", "\n", "jsonsaver", ".", "add_res", "(", "\n", "step", ",", "\n", "{", "'{}_msssim'", ".", "format", "(", "prefix", ")", ":", "sumMsssim", ",", "\n", "'{}_msssimDB'", ".", "format", "(", "prefix", ")", ":", "sumMsssimDB", ",", "\n", "'{}_psnr'", ".", "format", "(", "prefix", ")", ":", "sumPsnr", "}", ",", "\n", "minimize", "=", "False", "\n", ")", "\n", "# ideally return a dict", "\n", "", "if", "loss_cls", "is", "not", "None", "and", "hasattr", "(", "loss_cls", ",", "'kernel'", ")", ":", "\n", "            ", "loss_cls", "=", "loss_cls", ".", "to", "(", "orig_device", ")", "\n", "", "if", "incl_combined_loss", ":", "\n", "            ", "return", "sum_visual_loss", ",", "sumBpp", ",", "sum_combined_loss", "\n", "", "return", "sum_visual_loss", ",", "sumBpp", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.commons_test_photographs": [[299, 379], ["model.cpu().eval", "torch.no_grad", "os.path.join", "set", "compression.libs.datasets.TestDirDataset", "torch.utils.data.DataLoader", "enumerate", "logger.info", "model.cpu", "str", "os.path.join", "time.time", "model.cpu().eval.", "bpps_string.append", "bpps.append", "bpps_side_string.append", "torch.nn.functional.mse_loss", "psnrs.append", "msssims.append", "combined_losses.append", "os.makedirs", "common.libs.pt_helpers.tensor_to_imgfile", "print", "jsonsaver.add_res", "jsonsaver.add_res", "jsonsaver.add_res", "common.libs.pt_ops.img_to_batch", "float", "float", "float", "time.time", "set.update", "breakpoint", "clipped_recon_image.detach", "float", "float", "float", "str", "torch.mean", "torch.mean", "common.extlibs.pt_ms_ssim.ms_ssim", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "clipped_recon_image.detach", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.img_to_batch", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ms_ssim"], ["", "", "def", "commons_test_photographs", "(", "model", ",", "step", ",", "jsonsaver", ",", "config", ":", "dict", ")", ":", "\n", "    ", "'''Test on commons images. These images are typically too large to test on\n    GPU (up to 4K) and the runtime is long so only manual evaluation is\n    performed (with --test)\n    TODO merge w/ test_dir\n    egrun:\n        python tests.py --encdec_commons --test_commons_dpath \"../../datasets/test/Commons_Test_Photographs/\" --pretrain ../../models/compression/mse_4096_manypriors_64pr/saved_models/checkpoint.pth --arch ManyPriors --num_distributions 64\n    '''", "\n", "cpunet", "=", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "sumTime", "=", "0", "\n", "cnt", "=", "0", "\n", "bpps", "=", "[", "]", "\n", "bpps_string", "=", "[", "]", "\n", "bpps_side_string", "=", "[", "]", "\n", "psnrs", "=", "[", "]", "\n", "msssims", "=", "[", "]", "\n", "combined_losses", "=", "[", "]", "\n", "test_savedir", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'save_path'", "]", ",", "'commons_tests'", ",", "str", "(", "step", ")", ")", "\n", "used_dists_all", "=", "set", "(", ")", "\n", "test_dataset", "=", "datasets", ".", "TestDirDataset", "(", "data_dir", "=", "config", "[", "'test_commons_dpath'", "]", ",", "resize", "=", "None", ",", "verbose", "=", "True", ")", "\n", "commons_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "commons_loader", ")", ":", "\n", "            ", "if", "config", "[", "'test_cs'", "]", ":", "\n", "                ", "input", "=", "pt_ops", ".", "img_to_batch", "(", "input", ",", "config", "[", "'test_cs'", "]", ")", "\n", "", "outdec_fpath", "=", "os", ".", "path", ".", "join", "(", "test_savedir", ",", "str", "(", "batch_idx", ")", "+", "'.png'", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "clipped_recon_image", ",", "visual_loss", ",", "bpp_feature", ",", "bpp_z", ",", "bpp", ",", "used_dists_now", ",", "_", "=", "cpunet", "(", "input", ")", "\n", "bpps_string", ".", "append", "(", "float", "(", "torch", ".", "mean", "(", "bpp_feature", ")", ")", ")", "\n", "bpps", ".", "append", "(", "float", "(", "torch", ".", "mean", "(", "bpp", ")", ")", ")", "\n", "bpps_side_string", ".", "append", "(", "float", "(", "bpp_z", ")", ")", "\n", "\n", "\n", "# if device != torch.device('cpu'):", "\n", "#     pt_helpers.torch_cuda_synchronize()", "\n", "encoding_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "sumTime", "+=", "encoding_time", "\n", "if", "used_dists_now", "is", "not", "None", ":", "\n", "                ", "used_dists_all", ".", "update", "(", "used_dists_now", ")", "\n", "\n", "", "if", "config", "[", "'test_cs'", "]", ":", "\n", "                ", "breakpoint", "(", ")", "\n", "", "mse", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "clipped_recon_image", ".", "detach", "(", ")", ",", "input", ")", "\n", "psnrs", ".", "append", "(", "float", "(", "10", "*", "(", "torch", ".", "log", "(", "1.", "/", "mse", ")", "/", "np", ".", "log", "(", "10", ")", ")", ")", ")", "\n", "\n", "msssims", ".", "append", "(", "float", "(", "pt_ms_ssim", ".", "ms_ssim", "(", "clipped_recon_image", ".", "detach", "(", ")", ",", "input", ",", "data_range", "=", "1.0", ",", "size_average", "=", "True", ")", ")", ")", "\n", "\n", "combined_losses", ".", "append", "(", "float", "(", "config", "[", "'train_lambda'", "]", "*", "visual_loss", "+", "bpp", ")", ")", "\n", "\n", "os", ".", "makedirs", "(", "test_savedir", ",", "exist_ok", "=", "True", ")", "\n", "pt_helpers", ".", "tensor_to_imgfile", "(", "clipped_recon_image", ",", "outdec_fpath", ")", "\n", "cnt", "+=", "1", "\n", "print", "(", "\"PSNR: {}; MS-SSIM: {}, bpp: {}; Encoding time: {}\"", ".", "format", "(", "psnrs", "[", "-", "1", "]", ",", "msssims", "[", "-", "1", "]", ",", "bpps", "[", "-", "1", "]", ",", "encoding_time", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Test on Kodak dataset: model-{}\"", ".", "format", "(", "step", ")", ")", "\n", "\n", "sumTime", "/=", "cnt", "\n", "if", "not", "config", "[", "'nolog'", "]", ":", "\n", "            ", "jsonsaver", ".", "add_res", "(", "\n", "step", ",", "\n", "{", "'commons_bpp'", ":", "statistics", ".", "mean", "(", "bpps", ")", ",", "\n", "'commons_bpp_string'", ":", "statistics", ".", "mean", "(", "bpps_string", ")", ",", "\n", "'commons_bpp_side_string'", ":", "statistics", ".", "mean", "(", "bpps_side_string", ")", ",", "\n", "'commons_combined_loss'", ":", "statistics", ".", "mean", "(", "combined_losses", ")", "}", ",", "\n", "write", "=", "False", "\n", ")", "\n", "jsonsaver", ".", "add_res", "(", "\n", "step", ",", "\n", "{", "'commons_msssim'", ":", "statistics", ".", "mean", "(", "msssims", ")", ",", "\n", "'commons_psnr'", ":", "statistics", ".", "mean", "(", "psnrs", ")", "}", ",", "\n", "minimize", "=", "False", "\n", ")", "\n", "jsonsaver", ".", "add_res", "(", "\n", "step", ",", "\n", "{", "'commons_bpps'", ":", "bpps", ",", "\n", "'commons_psnrs'", ":", "psnrs", ",", "\n", "'commons_msssims'", ":", "msssims", "}", ",", "val_type", "=", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.encode": [[380, 388], ["model.update_entropy_table", "common.libs.pt_helpers.fpath_to_tensor().unsqueeze().to", "model.encode", "common.libs.pt_helpers.fpath_to_tensor().unsqueeze", "common.libs.pt_helpers.fpath_to_tensor"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.encode"], ["", "", "", "def", "encode", "(", "model", ",", "in_fpath", ",", "out_fpath", ",", "device", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --encode \"../../datasets/test/Commons_Test_Photographs/Garden_snail_moving_down_the_Vennbahn_in_disputed_territory_(DSCF5879).png\" --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64 --device -1\n    '''", "\n", "model", ".", "update_entropy_table", "(", ")", "# this should be done before saving the model", "\n", "in_ptensor", "=", "pt_helpers", ".", "fpath_to_tensor", "(", "in_fpath", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "encode", "(", "in_ptensor", ",", "entropy_coding", "=", "True", ",", "out_fpath", "=", "out_fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.decode": [[389, 397], ["model.update_entropy_table", "model.decode", "common.libs.pt_helpers.tensor_to_imgfile"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.decode"], ["", "def", "decode", "(", "model", ",", "in_fpath", ",", "out_fpath", ",", "device", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --decode ../../models/compression/checkpoints/mse_4096_manypriors_64pr/encoded/Garden_snail_moving_down_the_Vennbahn_in_disputed_territory_(DSCF5879).png\" --pretrain mse_4096_manypriors_64pr --arch ManyPriors --num_distributions 64 --device -1\n    '''", "\n", "model", ".", "update_entropy_table", "(", ")", "\n", "decoded_tensor", "=", "model", ".", "decode", "(", "bitstream", "=", "None", ",", "in_fpath", "=", "in_fpath", ")", "\n", "pt_helpers", ".", "tensor_to_imgfile", "(", "decoded_tensor", ",", "out_fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.prior_utilisation": [[398, 425], ["model.cpu().eval", "model.cpu().eval.update_entropy_table", "common.libs.utilities.get_leaf", "os.path.isdir", "print", "os.path.join", "print", "torch.no_grad", "compression.libs.datasets.TestDirDataset", "torch.utils.data.DataLoader", "enumerate", "model.cpu", "tqdm.tqdm", "model.cpu().eval.encode", "indices.squeeze().bincount", "open", "fp.write", "print", "breakpoint", "indices.squeeze", "str", "int"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.get_leaf", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.encode", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write"], ["", "def", "prior_utilisation", "(", "model", ",", "test_dpath", ",", "save_path", ")", ":", "\n", "    ", "'''\n    egrun:\n        python tests.py --prior_utilisation --arch ManyPriors --num_distributions 64 --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d\n        \n\n    '''", "\n", "cpunet", "=", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "cpunet", ".", "update_entropy_table", "(", ")", "\n", "test_dname", "=", "utilities", ".", "get_leaf", "(", "test_dpath", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'prior_utilization_{test_dname}.csv'", ")", "\n", "print", "(", "f'prior_utilisation: save_path={save_path}'", ")", "\n", "", "dists_utilisation", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "TestDirDataset", "(", "data_dir", "=", "test_dpath", ",", "resize", "=", "None", ",", "verbose", "=", "True", ",", "crop_to_multiple", "=", "16", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "            ", "_", ",", "indices", ",", "_", ",", "_", "=", "cpunet", ".", "encode", "(", "input", ",", "entropy_coding", "=", "False", ")", "\n", "try", ":", "\n", "                ", "dists_utilisation", "+=", "indices", ".", "squeeze", "(", ")", ".", "bincount", "(", "minlength", "=", "cpunet", ".", "num_distributions", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "print", "(", "f'prior_utilization encountered an error: {e}'", ")", "\n", "breakpoint", "(", ")", "\n", "", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "','", ".", "join", "(", "str", "(", "int", "(", "i", ")", ")", "for", "i", "in", "dists_utilisation", ")", ")", "\n", "", "", "", "print", "(", "f'prior_utilisation: final results writen to save_path={save_path}'", ")", "\n", "# For some reason this ends up segfaulting, at ../../datasets/test/clic_test_pro/8ea6b5d7e5ec536504ec6c60a7c08c57.png?", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.get_kl_distance": [[427, 462], ["model.update_entropy_table", "torch.max", "range", "print", "range", "kl_list.append", "torch.zeros_like", "float", "torch.log2"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table"], ["", "def", "get_kl_distance", "(", "model", ",", "save_path", ")", ":", "\n", "    ", "'''\n    for each distribution, find another distribution with the smallest KL divergence\n    eg:\n    python tests.py --get_kl_divergence --arch ManyPriors --num_distributions 64 --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d\n    kl divergence: total=1294.6434326171875; list=[11.180265426635742, 15.62148666381836, 0.6328821182250977, 25.425758361816406, 22.071008682250977, 8.394054412841797, 14.890915870666504, 5.230834484100342, 32.154212951660156, 13.533382415771484, 16.60919189453125, 14.945428848266602, 21.37224006652832, 21.87444305419922, 23.744617462158203, 24.135114669799805, 33.01675033569336, 19.608814239501953, 44.85163116455078, 15.68785285949707, 8.100882530212402, 12.84747314453125, 15.888026237487793, 40.21651077270508, 40.77545928955078, 30.817012786865234, 16.717918395996094, 20.28795051574707, 34.27934265136719, 21.44320297241211, 21.49303436279297, 29.11978530883789, 8.077003479003906, 25.14607048034668, 39.531219482421875, 22.34889793395996, 0.3080233037471771, 8.447464942932129, 22.98062515258789, 25.84206771850586, 14.27016544342041, 20.396366119384766, 44.062286376953125, 19.36559295654297, 8.124574661254883, 28.762420654296875, 30.26300048828125, 7.108716011047363, 7.340500831604004, 32.1710319519043, 8.623671531677246, 8.779535293579102, 9.464139938354492, 22.005931854248047, 22.983409881591797, 25.63197135925293, 8.526240348815918, 21.092470169067383, 21.44297218322754, 28.9342098236084, 10.710474014282227, 32.67121124267578, 5.2777180671691895, 26.985843658447266], mean=20.228803634643555\n    \n    2 priors:\n    python tests.py --get_kl_divergence --arch ManyPriors --num_distributions 2 --pretrain mse_4096_b2017manypriors_2pr_16px_adam_2upd\n    \n    kl divergence: total=923.2313232421875; list=[775.3006591796875, 147.93069458007812]; mean=461.61566162109375\n    '''", "\n", "model", ".", "update_entropy_table", "(", ")", "\n", "# CDF to PDF", "\n", "probs", "=", "model", ".", "entropy_table_float", "[", ":", ",", ":", ",", "1", ":", "]", "-", "model", ".", "entropy_table_float", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "probs", "=", "torch", ".", "max", "(", "probs", ",", "torch", ".", "zeros_like", "(", "probs", ")", "+", "0.00000001", ")", "# avoid division by zero", "\n", "total_kl", "=", "0", "\n", "kl_list", "=", "[", "]", "\n", "for", "distn_a", "in", "range", "(", "model", ".", "num_distributions", ")", ":", "\n", "        ", "dist_a", "=", "probs", "[", "distn_a", "]", "\n", "min_kl", "=", "None", "\n", "for", "distn_b", "in", "range", "(", "model", ".", "num_distributions", ")", ":", "\n", "            ", "if", "distn_a", "==", "distn_b", ":", "\n", "                ", "continue", "\n", "", "dist_b", "=", "probs", "[", "distn_b", "]", "\n", "kl", "=", "(", "dist_a", "*", "torch", ".", "log2", "(", "dist_a", "/", "dist_b", ")", ")", ".", "sum", "(", ")", "\n", "if", "min_kl", "is", "None", "or", "min_kl", ">", "kl", ":", "\n", "                ", "min_kl", "=", "kl", "\n", "", "", "total_kl", "+=", "min_kl", "\n", "kl_list", ".", "append", "(", "float", "(", "min_kl", ")", ")", "\n", "# For each distribution, estimate cost to encode a symbol with the closest (next cheapest) distribution", "\n", "# estimate probabilities", "\n", "# for each distribution; get cheapest msg to encode", "\n", "# for each other distrubiton: calculate cost to encode that message and find min", "\n", "", "print", "(", "f'kl divergence: total={total_kl}; list={kl_list}; mean={total_kl/model.num_distributions}'", ")", "\n", "# Baseline: ", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.Test_train.setUp": [[308, 310], ["None"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "tearDown", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.Test_train.tearDown": [[310, 312], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "test_train_from_scratch_and_load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.Test_train.test_train_from_scratch_and_load": [[312, 328], ["compression.libs.initfun.get_args_jsonsaver", "common.libs.pt_helpers.get_device", "train.train_handler", "train.Test_train.assertTrue", "train.Test_train.assertTrue", "compression.libs.initfun.get_args_jsonsaver", "common.libs.pt_helpers.get_device", "train.train_handler", "train.Test_train.assertTrue", "train.Test_train.assertTrue", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.get_args_jsonsaver", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train_handler", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.get_args_jsonsaver", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train_handler"], ["", "def", "test_train_from_scratch_and_load", "(", "self", ")", ":", "\n", "# train from scratch", "\n", "        ", "args", ",", "jsonsaver", "=", "initfun", ".", "get_args_jsonsaver", "(", "parser_add_arguments", ",", "parser_autocomplete", ",", "\n", "[", "'--num_distributions'", ",", "'64'", ",", "'--arch'", ",", "'Balle2017ManyPriors'", ",", "'--tot_step'", ",", "'5000'", ",", "'--train_lambda'", ",", "'128'", ",", "'--expname'", ",", "'unittest_scratch'", "]", ")", "\n", "device", "=", "pt_helpers", ".", "get_device", "(", "args", ".", "device", ")", "\n", "train_handler", "(", "args", ",", "jsonsaver", ",", "device", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'..'", ",", "'models'", ",", "'compression'", ",", "'unittest_scratch'", ",", "'trainres.json'", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'..'", ",", "'models'", ",", "'compression'", ",", "'unittest_scratch'", ",", "'saved_models'", ",", "'iter_5000.pth'", ")", ")", ")", "\n", "# load that model", "\n", "# train from scratch", "\n", "args", ",", "jsonsaver", "=", "initfun", ".", "get_args_jsonsaver", "(", "parser_add_arguments", ",", "parser_autocomplete", ",", "\n", "[", "'--num_distributions'", ",", "'64'", ",", "'--arch'", ",", "'Balle2017ManyPriors'", ",", "'--tot_step'", ",", "'5000'", ",", "'--train_lambda'", ",", "'64'", ",", "'--pretrain'", ",", "'unittest_scratch'", ",", "'--expname'", ",", "'unittest_load'", ",", "'--reset_global_step'", "]", ")", "\n", "device", "=", "pt_helpers", ".", "get_device", "(", "args", ".", "device", ")", "\n", "train_handler", "(", "args", ",", "jsonsaver", ",", "device", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'..'", ",", "'models'", ",", "'compression'", ",", "'unittest_load'", ",", "'trainres.json'", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "'..'", ",", "'..'", ",", "'models'", ",", "'compression'", ",", "'unittest_load'", ",", "'saved_models'", ",", "'iter_5000.pth'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.parser_add_arguments": [[32, 54], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "str", "str", "OPTIMIZERS.keys", "OPTIMIZERS.keys"], "function", ["None"], ["def", "parser_add_arguments", "(", "parser", ")", "->", "None", ":", "\n", "# useful config", "\n", "    ", "parser", ".", "add_argument", "(", "'--tot_step'", ",", "type", "=", "int", ",", "help", "=", "'Number of training steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--reset_lr'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--reset_optimizer'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--reset_global_step'", ",", "action", "=", "'store_true'", ")", "\n", "# moderately useful config", "\n", "parser", ".", "add_argument", "(", "'--base_lr'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--train_data_dpaths'", ",", "nargs", "=", "'*'", ",", "type", "=", "str", ",", "help", "=", "'Training image directories'", ")", "\n", "# very unusual config", "\n", "parser", ".", "add_argument", "(", "'--tot_epoch'", ",", "type", "=", "int", ",", "help", "=", "'Number of passes through the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_update_mode'", ",", "help", "=", "'use worse_than_previous'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "help", "=", "'LR is multiplied by this value whenever performance does not improve in an steps-epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "help", "=", "'Logger frequency in # steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model_freq'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--test_step'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer_init'", ",", "help", "=", "'Initial optimizer: '", "+", "str", "(", "OPTIMIZERS", ".", "keys", "(", ")", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer_final'", ",", "help", "=", "'Final optimizer: '", "+", "str", "(", "OPTIMIZERS", ".", "keys", "(", ")", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer_switch_step'", ",", "type", "=", "int", ",", "help", "=", "'# of steps after which optimizer_final is chosen'", ")", "\n", "parser", ".", "add_argument", "(", "'--passthrough_ae'", ",", "dest", "=", "'passthrough_ae'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_passthrough_ae'", ",", "dest", "=", "'passthrough_ae'", ",", "action", "=", "'store_false'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.parser_autocomplete": [[55, 58], ["train.check_parameters"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.check_parameters"], ["", "def", "parser_autocomplete", "(", "args", ")", ":", "\n", "    ", "args", ".", "pretrain_prefix", "=", "'val'", "if", "args", ".", "val_dpath", "is", "not", "None", "else", "'test'", "\n", "check_parameters", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.check_parameters": [[59, 62], ["None"], "function", ["None"], ["", "def", "check_parameters", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "optimizer_final", "is", "None", "or", "args", ".", "optimizer_final", "in", "OPTIMIZERS", "\n", "assert", "args", ".", "test_dpath", "is", "not", "None", "or", "args", ".", "val_dpath", "is", "not", "None", ",", "'test_dpath and/or val_dpath required to update lr'", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train": [[63, 204], ["logger.info", "model.train", "set", "enumerate", "jsonsaver.add_res", "compression.libs.model_ops.save_model", "compression.tests.test_dir", "model.train", "compression.libs.Meter.AverageMeter", "input.to.to", "common.libs.locking.check_pause", "time.time", "model", "optimizer.zero_grad", "rd_loss.backward", "train.train.clip_gradient"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.save_model", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.tests.test_dir", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.check_pause", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.RoundNoGradient.backward"], ["", "def", "train", "(", "model", ",", "train_loader", ",", "test_loader", ",", "val_loader", ",", "device", ",", "tb_logger", ",", "data_epoch", ",", "global_step", ",", "jsonsaver", ",", "optimizer", ",", "config", ")", ":", "\n", "    ", "'''\n    Train model for a data epoch\n    returns current step\n    '''", "\n", "logger", ".", "info", "(", "\"Data epoch {} begin\"", ".", "format", "(", "data_epoch", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "elapsed", ",", "losses", ",", "bpps", ",", "bpp_features", ",", "bpp_zs", ",", "visual_losses", "=", "[", "Meter", ".", "AverageMeter", "(", "config", "[", "'print_freq'", "]", ")", "for", "_", "in", "range", "(", "6", ")", "]", "\n", "used_dists_all", "=", "set", "(", ")", "\n", "\n", "previous_vis_loss", "=", "None", "\n", "previous_bpp_loss", "=", "None", "\n", "previous_loss", "=", "None", "\n", "# the following is pretty ugly, should use a queue or such", "\n", "preprevious_vis_loss", "=", "None", "\n", "preprevious_bpp_loss", "=", "None", "\n", "preprevious_loss", "=", "None", "\n", "test_prefix", "=", "'test'", "if", "val_loader", "is", "None", "else", "'val'", "\n", "val_test_loader", "=", "test_loader", "if", "val_loader", "is", "None", "else", "val_loader", "\n", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "locking", ".", "check_pause", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "global_step", "+=", "1", "\n", "# print(\"debug\", torch.max(input), torch.min(input))", "\n", "clipped_recon_image", ",", "visual_loss", ",", "bpp_feature", ",", "bpp_z", ",", "bpp", ",", "used_dists_now", ",", "flag", "=", "model", "(", "input", ")", "\n", "\n", "distribution_loss", "=", "bpp", "\n", "if", "config", "[", "'num_distributions'", "]", "<=", "16", "and", "used_dists_now", "is", "not", "None", ":", "\n", "            ", "used_dists_all", ".", "update", "(", "used_dists_now", ")", "\n", "\n", "", "distortion", "=", "visual_loss", "\n", "rd_loss", "=", "config", "[", "'train_lambda'", "]", "*", "distortion", "+", "distribution_loss", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "rd_loss", ".", "backward", "(", ")", "\n", "\n", "def", "clip_gradient", "(", "optimizer", ",", "grad_clip", ")", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "for", "param", "in", "group", "[", "\"params\"", "]", ":", "\n", "                    ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "grad_clip", ",", "grad_clip", ")", "\n", "", "", "", "", "clip_gradient", "(", "optimizer", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# model_time += (time.time()-start_time)", "\n", "\n", "\n", "if", "(", "global_step", "%", "config", "[", "'print_freq'", "]", ")", "==", "0", ":", "\n", "# These were a separate step (global_step % cal_step), but we are", "\n", "# no longer calculating the average so this step should be simplified", "\n", "            ", "elapsed", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "losses", ".", "update", "(", "rd_loss", ".", "item", "(", ")", ")", "\n", "bpps", ".", "update", "(", "bpp", ".", "item", "(", ")", ")", "\n", "bpp_features", ".", "update", "(", "bpp_feature", ".", "item", "(", ")", ")", "\n", "bpp_zs", ".", "update", "(", "bpp_z", ".", "item", "(", ")", ")", "\n", "visual_losses", ".", "update", "(", "visual_loss", ".", "item", "(", ")", ")", "\n", "\n", "# begin = time.time()", "\n", "tb_logger", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "global_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'rd_loss'", ",", "losses", ".", "avg", ",", "global_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'visual_loss'", ",", "visual_losses", ".", "avg", ",", "global_step", ")", "\n", "#tb_logger.add_scalar('psnr', psnrs.avg, global_step)", "\n", "tb_logger", ".", "add_scalar", "(", "'bpp'", ",", "bpps", ".", "avg", ",", "global_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'bpp_feature'", ",", "bpp_features", ".", "avg", ",", "global_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'bpp_z'", ",", "bpp_zs", ".", "avg", ",", "global_step", ")", "\n", "process", "=", "global_step", "/", "config", "[", "'tot_step'", "]", "*", "100.0", "\n", "log", "=", "(", "' | '", ".", "join", "(", "[", "\n", "f'{config[\"expname\"]}'", ",", "\n", "f'Step [{global_step}/{config[\"tot_step\"]}={process:.2f}%]'", ",", "\n", "f'Data Epoch {data_epoch}'", ",", "\n", "f'Time {elapsed.val:.3f} ({elapsed.avg:.3f})'", ",", "\n", "f'Lr {optimizer.param_groups[0][\"lr\"]}'", ",", "\n", "f'Total Loss {losses.val:.3f} ({losses.avg:.3f})'", ",", "\n", "#f'PSNR {psnrs.val:.3f} ({psnrs.avg:.3f})',", "\n", "f'Bpp {bpps.val:.5f} ({bpps.avg:.5f})'", ",", "\n", "f'Bpp_feature {bpp_features.val:.5f} ({bpp_features.avg:.5f})'", ",", "\n", "f'Bpp_z {bpp_zs.val:.5f} ({bpp_zs.avg:.5f})'", ",", "\n", "f'Visual loss {visual_losses.val:.5f} ({visual_losses.avg:.5f})'", ",", "\n", "]", ")", ")", "\n", "if", "used_dists_now", "is", "not", "None", ":", "\n", "                ", "if", "config", "[", "'num_distributions'", "]", "<=", "16", ":", "\n", "                    ", "log", "+=", "(", "'| used_dists: {}'", ".", "format", "(", "used_dists_all", ")", ")", "\n", "used_dists_all", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "log", "+=", "(", "'| used_dists: {}'", ".", "format", "(", "len", "(", "used_dists_now", ")", ")", ")", "\n", "tb_logger", ".", "add_scalar", "(", "\"num_used_dists\"", ",", "len", "(", "used_dists_now", ")", ",", "global_step", ")", "\n", "", "log", "+=", "(", "'| flag: {}'", ".", "format", "(", "flag", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "log", ")", "\n", "", "if", "(", "global_step", "%", "config", "[", "'save_model_freq'", "]", ")", "==", "0", ":", "\n", "            ", "jsonsaver", ".", "add_res", "(", "\n", "global_step", ",", "\n", "{", "'train_bpp'", ":", "bpps", ".", "avg", ",", "\n", "'train_visual_loss'", ":", "visual_losses", ".", "avg", ",", "\n", "'train_bpp_string'", ":", "bpp_features", ".", "avg", ",", "\n", "'train_bpp_side_string'", ":", "bpp_zs", ".", "avg", ",", "\n", "'train_combined_loss'", ":", "losses", ".", "avg", ",", "\n", "'lr_vis'", ":", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'lr_bpp'", ":", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "}", "\n", ")", "\n", "model_ops", ".", "save_model", "(", "model", ",", "global_step", ",", "os", ".", "path", ".", "join", "(", "config", "[", "'save_path'", "]", ",", "'saved_models'", ")", ",", "optimizer", "=", "optimizer", ")", "\n", "\n", "", "if", "(", "global_step", "%", "config", "[", "'test_step'", "]", ")", "==", "0", ":", "\n", "            ", "val_vis_loss", ",", "val_bpp_loss", "=", "tests", ".", "test_dir", "(", "model", "=", "model", ",", "step", "=", "global_step", ",", "jsonsaver", "=", "jsonsaver", ",", "\n", "config", "=", "config", ",", "device", "=", "device", ",", "prefix", "=", "test_prefix", ",", "\n", "loader", "=", "val_test_loader", ",", "tb_logger", "=", "tb_logger", ")", "\n", "model", ".", "train", "(", ")", "\n", "update_vis", "=", "update_bit", "=", "False", "\n", "if", "previous_vis_loss", "is", "not", "None", "and", "previous_vis_loss", "<", "val_vis_loss", "and", "previous_loss", "<", "losses", ".", "avg", "and", "config", "[", "'lr_update_mode'", "]", "!=", "'liujiaheng'", ":", "\n", "                ", "if", "not", "config", "[", "'two_worse_before_lr_update'", "]", "or", "(", "preprevious_vis_loss", "is", "not", "None", "and", "preprevious_vis_loss", "<", "val_vis_loss", "and", "preprevious_loss", "<", "losses", ".", "avg", ")", ":", "\n", "                    ", "update_vis", "=", "True", "\n", "", "", "if", "previous_bpp_loss", "is", "not", "None", "and", "previous_bpp_loss", "<", "val_bpp_loss", "and", "previous_loss", "<", "losses", ".", "avg", "and", "config", "[", "'lr_update_mode'", "]", "!=", "'liujiaheng'", ":", "\n", "                ", "if", "not", "config", "[", "'two_worse_before_lr_update'", "]", "or", "(", "preprevious_bpp_loss", "is", "not", "None", "and", "preprevious_bpp_loss", "<", "val_bpp_loss", "and", "preprevious_loss", "<", "losses", ".", "avg", ")", ":", "\n", "                    ", "update_bit", "=", "True", "\n", "\n", "", "", "adjust_learning_rate", "(", "optimizer", ",", "global_step", ",", "lr_update_mode", "=", "config", "[", "'lr_update_mode'", "]", ",", "\n", "lr_decay", "=", "config", "[", "'lr_decay'", "]", ",", "bit", "=", "update_bit", ",", "encdec", "=", "update_vis", ")", "\n", "\n", "if", "config", "[", "'two_worse_before_lr_update'", "]", ":", "\n", "# TODO use a stack w/ any number of worse before update", "\n", "                ", "preprevious_vis_loss", "=", "previous_vis_loss", "\n", "preprevious_bpp_loss", "=", "previous_bpp_loss", "\n", "preprevious_loss", "=", "previous_loss", "\n", "", "previous_vis_loss", "=", "val_vis_loss", "\n", "previous_bpp_loss", "=", "val_bpp_loss", "\n", "previous_loss", "=", "losses", ".", "avg", "\n", "", "if", "(", "global_step", "%", "config", "[", "'save_model_freq'", "]", ")", "==", "0", ":", "\n", "            ", "cleanup_checkpoints", ".", "cleanup_checkpoints", "(", "expname", "=", "config", "[", "'expname'", "]", ")", "\n", "\n", "", "", "jsonsaver", ".", "add_res", "(", "\n", "global_step", ",", "\n", "{", "'train_bpp'", ":", "bpps", ".", "avg", ",", "\n", "'train_visual_loss'", ":", "visual_losses", ".", "avg", ",", "\n", "'train_bpp_string'", ":", "bpp_features", ".", "avg", ",", "\n", "'train_bpp_side_string'", ":", "bpp_zs", ".", "avg", ",", "\n", "'train_combined_loss'", ":", "losses", ".", "avg", "}", "\n", ")", "\n", "model_ops", ".", "save_model", "(", "model", ",", "global_step", ",", "os", ".", "path", ".", "join", "(", "config", "[", "'save_path'", "]", ",", "'saved_models'", ")", ",", "optimizer", "=", "optimizer", ")", "\n", "tests", ".", "test_dir", "(", "model", "=", "model", ",", "step", "=", "global_step", ",", "jsonsaver", "=", "jsonsaver", ",", "config", "=", "config", ",", "loader", "=", "val_test_loader", ",", "prefix", "=", "test_prefix", ",", "device", "=", "device", ",", "tb_logger", "=", "tb_logger", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.adjust_learning_rate": [[208, 219], ["NotImplementedError", "logger.info"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "global_step", ",", "lr_decay", ",", "lr_update_mode", "=", "'worse_than_previous'", ",", "bit", "=", "False", ",", "encdec", "=", "False", ")", ":", "\n", "    ", "if", "lr_update_mode", "==", "'worse_than_previous'", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "(", "'bit'", "in", "param_group", "[", "'name'", "]", "and", "not", "bit", ")", "or", "(", "'bit'", "not", "in", "param_group", "[", "'name'", "]", "and", "not", "encdec", ")", ":", "\n", "                ", "continue", "\n", "", "logger", ".", "info", "(", "'adjust_learning_rate: {}: {}->{}'", ".", "format", "(", "\n", "param_group", "[", "'name'", "]", ",", "\n", "param_group", "[", "'lr'", "]", ",", "param_group", "[", "'lr'", "]", "*", "lr_decay", ")", ")", "\n", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "lr_decay", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "lr_update_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.reset_lr": [[220, 235], ["model.get_parameters", "logger.info"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_parameters"], ["", "", "def", "reset_lr", "(", "optimizer", ",", "model", ",", "base_lr", ")", ":", "\n", "    ", "model_parameters", "=", "model", ".", "get_parameters", "(", "lr", "=", "base_lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "new_lr", "=", "None", "\n", "for", "model_parameter", "in", "model_parameters", ":", "\n", "            ", "if", "param_group", "[", "'name'", "]", "==", "model_parameter", "[", "'name'", "]", ":", "\n", "                ", "if", "'lr'", "in", "model_parameter", ":", "\n", "                    ", "new_lr", "=", "model_parameter", "[", "'lr'", "]", "\n", "", "else", ":", "\n", "                    ", "new_lr", "=", "base_lr", "\n", "", "continue", "\n", "", "", "if", "new_lr", "is", "None", ":", "\n", "            ", "new_lr", "=", "base_lr", "\n", "", "logger", ".", "info", "(", "'reset_lr: reset lr of {} to {}'", ".", "format", "(", "param_group", "[", "'name'", "]", ",", "new_lr", ")", ")", "\n", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train_handler": [[236, 297], ["compression.libs.model_ops.init_model", "compression.libs.datasets.get_val_test_loaders", "optimizer.", "tensorboardX.SummaryWriter", "compression.libs.datasets.Datasets", "torch.utils.data.DataLoader", "range", "compression.libs.initfun.get_best_checkpoint", "logger.info", "print", "model_ops.init_model.get_parameters", "logger.info", "compression.libs.model_ops.load_model", "logger.info", "model_ops.init_model.freeze_autoencoder", "os.path.join", "train.train", "compression.tools.cleanup_checkpoints.cleanup_checkpoints", "vars", "os.path.isfile", "compression.libs.model_ops.load_model", "compression.libs.model_ops.load_model", "train.reset_lr", "len", "logger.info", "model_ops.init_model.unfreeze_autoencoder", "logger.info", "str", "logger.info", "vars", "model_ops.init_model.get_parameters"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.init_model", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.get_val_test_loaders", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.get_best_checkpoint", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_parameters", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.load_model", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.freeze_autoencoder", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.cleanup_checkpoints", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.load_model", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.load_model", "home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.reset_lr", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.unfreeze_autoencoder", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_parameters"], ["", "", "def", "train_handler", "(", "args", ",", "jsonsaver", ",", "device", ")", ":", "\n", "# get model, step", "\n", "    ", "global_step", "=", "0", "\n", "model", "=", "model_ops", ".", "init_model", "(", "**", "vars", "(", "args", ")", ")", "\n", "if", "args", ".", "pretrain", "is", "not", "None", "and", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "        ", "args", ".", "pretrain", "=", "initfun", ".", "get_best_checkpoint", "(", "exp", "=", "args", ".", "pretrain", ",", "prefix", "=", "args", ".", "pretrain_prefix", ")", "\n", "", "if", "args", ".", "pretrain", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading model:{}\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "if", "args", ".", "reset_global_step", ":", "\n", "            ", "model_ops", ".", "load_model", "(", "model", ",", "args", ".", "pretrain", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "global_step", "=", "model_ops", ".", "load_model", "(", "model", ",", "args", ".", "pretrain", ",", "device", "=", "device", ")", "\n", "\n", "# get test loader(s)", "\n", "", "", "val_loader", ",", "test_loader", "=", "datasets", ".", "get_val_test_loaders", "(", "args", ".", "val_dpath", ",", "args", ".", "test_dpath", ")", "\n", "\n", "# get optimizer", "\n", "optimizer", "=", "OPTIMIZERS", "[", "args", ".", "optimizer_init", "]", "\n", "is_init_optimizer", "=", "True", "\n", "if", "args", ".", "optimizer_final", "is", "not", "None", "and", "args", ".", "optimizer_switch_step", "<=", "global_step", ":", "\n", "        ", "optimizer", "=", "OPTIMIZERS", "[", "args", ".", "optimizer_final", "]", "\n", "print", "(", "'optimizer: {}'", ".", "format", "(", "str", "(", "optimizer", ")", ")", ")", "\n", "is_init_optimizer", "=", "False", "\n", "", "optimizer", "=", "optimizer", "(", "model", ".", "get_parameters", "(", "lr", "=", "args", ".", "base_lr", ")", ",", "lr", "=", "args", ".", "base_lr", ")", "\n", "#optimizer = optim.Adam(parameters, lr=base_lr)", "\n", "if", "args", ".", "pretrain", "is", "not", "None", "and", "not", "args", ".", "reset_optimizer", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading optimizer:{}\"", ".", "format", "(", "args", ".", "pretrain", "+", "'.opt'", ")", ")", "\n", "model_ops", ".", "load_model", "(", "optimizer", ",", "args", ".", "pretrain", "+", "'.opt'", ",", "device", "=", "device", ")", "\n", "# if os.path.isfile(args.pretrain+'.opt.module'):", "\n", "#     optimizer = torch.load(args.pretrain+'.opt.module', map_location=device)", "\n", "if", "args", ".", "reset_lr", ":", "\n", "            ", "reset_lr", "(", "optimizer", ",", "model", ",", "args", ".", "base_lr", ")", "\n", "# FIXME freeze_autoencoder is likely wrong; should replace the optimizer with one that doesn't have the AE parameters", "\n", "", "", "if", "args", ".", "freeze_autoencoder", "or", "(", "args", ".", "freeze_autoencoder_steps", "is", "not", "None", "and", "args", ".", "freeze_autoencoder_steps", ">", "global_step", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Freezing autoencoder (experimental)'", ")", "\n", "model", ".", "freeze_autoencoder", "(", ")", "\n", "#global train_loader", "\n", "", "tb_logger", "=", "tensorboardX", ".", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'events'", ")", ")", "\n", "train_dataset", "=", "datasets", ".", "Datasets", "(", "args", ".", "train_data_dpaths", ",", "args", ".", "image_size", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "device", ".", "type", "!=", "'cpu'", ",", "\n", "num_workers", "=", "4", ")", "\n", "steps_epoch", "=", "global_step", "//", "(", "len", "(", "train_dataset", ")", "//", "(", "args", ".", "batch_size", ")", ")", "\n", "for", "data_epoch", "in", "range", "(", "steps_epoch", ",", "args", ".", "tot_epoch", ")", ":", "\n", "        ", "if", "args", ".", "optimizer_final", "is", "not", "None", "and", "args", ".", "optimizer_switch_step", "<=", "global_step", ":", "\n", "            ", "if", "is_init_optimizer", ":", "\n", "                ", "logger", ".", "info", "(", "'Switching optimizer from {} to {}'", ".", "format", "(", "args", ".", "optimizer_init", ",", "args", ".", "optimizer_final", ")", ")", "\n", "optimizer", "=", "OPTIMIZERS", "[", "args", ".", "optimizer_final", "]", "(", "model", ".", "get_parameters", "(", "lr", "=", "args", ".", "base_lr", ")", ",", "lr", "=", "args", ".", "base_lr", ")", "\n", "is_init_optimizer", "=", "False", "\n", "", "", "if", "global_step", ">", "args", ".", "tot_step", ":", "\n", "            ", "logger", ".", "info", "(", "'Ending at global_step={}'", ".", "format", "(", "global_step", ")", ")", "\n", "break", "\n", "", "if", "args", ".", "freeze_autoencoder_steps", "is", "not", "None", "and", "model", ".", "frozen_autoencoder", "and", "global_step", ">=", "args", ".", "freeze_autoencoder_steps", ":", "\n", "            ", "model", ".", "unfreeze_autoencoder", "(", ")", "\n", "logger", ".", "info", "(", "'unFreezing autoencoder'", ")", "\n", "# def train(model, train_loader, test_loader, val_loader, device, tb_logger, data_epoch, global_step, jsonsaver, optimizer, config):", "\n", "\n", "", "global_step", "=", "train", "(", "model", "=", "model", ",", "data_epoch", "=", "data_epoch", ",", "global_step", "=", "global_step", ",", "jsonsaver", "=", "jsonsaver", ",", "optimizer", "=", "optimizer", ",", "config", "=", "vars", "(", "args", ")", ",", "train_loader", "=", "train_loader", ",", "test_loader", "=", "test_loader", ",", "val_loader", "=", "val_loader", ",", "device", "=", "device", ",", "tb_logger", "=", "tb_logger", ")", "\n", "cleanup_checkpoints", ".", "cleanup_checkpoints", "(", "expname", "=", "args", ".", "expname", ")", "\n", "#save_model(model, global_step, save_path)", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.find_last_epoch": [[13, 25], ["os.listdir", "int", "[].split", "afile.split"], "function", ["None"], ["def", "find_last_epoch", "(", "dpath", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "dpath", ")", "\n", "greatest_epoch", "=", "-", "1", "\n", "for", "afile", "in", "files", ":", "\n", "        ", "try", ":", "\n", "#epoch = int(afile.split('_')[1].split('0')[0])", "\n", "            ", "epoch", "=", "int", "(", "afile", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "if", "epoch", ">", "greatest_epoch", ":", "\n", "                ", "greatest_epoch", "=", "epoch", "\n", "", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "continue", "\n", "", "", "return", "greatest_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.cleanup_checkpoints": [[26, 80], ["set", "os.listdir", "os.path.join", "set.copy", "isinstance", "keepers_def.copy.add", "keepers_def.copy.add", "common.libs.utilities.jsonfpath_load", "results[].values", "os.listdir", "print", "print", "cleanup_checkpoints.cleanup_tests", "len", "print", "print", "empties.append", "os.path.isdir", "print", "keepers_def.copy.add", "len", "print", "os.path.join", "os.path.isfile", "os.path.join", "len", "amember.startswith", "os.path.join", "os.path.isfile", "print", "str", "str", "os.remove", "ValueError", "cleanup_checkpoints.find_last_epoch", "cleanup_checkpoints.find_last_epoch", "str", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.jsonfpath_load", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.cleanup_tests", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.find_last_epoch", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.find_last_epoch"], ["", "def", "cleanup_checkpoints", "(", "expname", "=", "None", ",", "checkpoints_dir", "=", "CHECKPOINTS_DPATH", ",", "\n", "keepers_def", "=", "None", ")", ":", "\n", "    ", "'''orig: tcomp/tools/cleanup_checkpoints.py'''", "\n", "if", "keepers_def", "is", "None", ":", "\n", "        ", "keepers_def", "=", "set", "(", "[", "'events'", ",", "'log.txt'", "]", ")", "\n", "", "empties", "=", "[", "]", "\n", "models", "=", "os", ".", "listdir", "(", "checkpoints_dir", ")", "if", "expname", "is", "None", "else", "[", "expname", "]", "\n", "for", "expname", "in", "models", ":", "\n", "        ", "jsonfpath", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'trainres.json'", ")", "\n", "if", "expname", "==", "'backup'", "or", "not", "os", ".", "path", ".", "isfile", "(", "jsonfpath", ")", ":", "\n", "            ", "print", "(", "'cleanup: skipping '", "+", "expname", ")", "\n", "empties", ".", "append", "(", "expname", ")", "\n", "continue", "\n", "", "keepers", "=", "keepers_def", ".", "copy", "(", ")", "\n", "assert", "isinstance", "(", "keepers", ",", "set", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping {} (no saved_models directory)'", ".", "format", "(", "expname", ")", ")", "\n", "continue", "\n", "", "keepers", ".", "add", "(", "'iter_'", "+", "str", "(", "find_last_epoch", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ")", ")", ")", "+", "'.'", ")", "\n", "keepers", ".", "add", "(", "'epoch_'", "+", "str", "(", "find_last_epoch", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ")", ")", ")", "+", "'.'", ")", "\n", "#keepers.add(str(libutils.find_last_epoch(os.path.join('models', expname, 'checkpoints')))+'-')", "\n", "\n", "results", "=", "utilities", ".", "jsonfpath_load", "(", "jsonfpath", ")", "\n", "for", "anepoch", "in", "results", "[", "'best_step'", "]", ".", "values", "(", ")", ":", "\n", "#keepers.add('epoch_'+str(anepoch)+'.')", "\n", "            ", "keepers", ".", "add", "(", "'iter_'", "+", "str", "(", "anepoch", ")", "+", "'.'", ")", "\n", "", "if", "len", "(", "keepers", ")", "<=", "3", ":", "\n", "            ", "print", "(", "'warning: cleanup_checkpoints: {} has too few keepers ({}), aborting.'", ".", "format", "(", "expname", ",", "keepers", ")", ")", "\n", "continue", "\n", "# for dpath2clean in [os.path.join(checkpoints_dir, expname, adir) for adir in", "\n", "#                   ('checkpoints', 'checkpoints_test', 'vis')]:", "\n", "", "members", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ")", ")", "\n", "print", "(", "'cleanup_checkpoints: {}: found {} models'", ".", "format", "(", "expname", ",", "len", "(", "members", ")", ")", ")", "\n", "print", "(", "'cleanup_checkpoints: DBG: keepers: {}'", ".", "format", "(", "keepers", ")", ")", "\n", "for", "amember", "in", "members", ":", "\n", "            ", "rm", "=", "True", "\n", "for", "akeeper", "in", "keepers", ":", "\n", "                ", "if", "amember", ".", "startswith", "(", "akeeper", ")", ":", "\n", "                    ", "rm", "=", "False", "\n", "continue", "\n", "", "", "if", "rm", ":", "\n", "                ", "rmpath", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ",", "amember", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "rmpath", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "rmpath", ")", "\n", "#pass", "\n", "# elif os.path.isdir(rmpath):", "\n", "#     #pass", "\n", "#     shutil.rmtree(rmpath)", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "rmpath", ")", "\n", "", "print", "(", "'rm -r '", "+", "rmpath", ")", "\n", "", "", "cleanup_tests", "(", "expname", "=", "expname", ",", "checkpoints_dir", "=", "checkpoints_dir", ")", "\n", "", "if", "len", "(", "empties", ")", ">", "0", ":", "\n", "        ", "print", "(", "'Empty models: {}'", ".", "format", "(", "empties", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.cleanup_tests": [[82, 133], ["set", "os.listdir", "os.path.join", "set.copy", "isinstance", "keepers_def.copy.add", "common.libs.utilities.jsonfpath_load", "results[].values", "os.listdir", "print", "print", "len", "print", "print", "empties.append", "os.path.isdir", "print", "str", "keepers_def.copy.add", "len", "print", "os.path.join", "os.path.isfile", "os.path.join", "cleanup_checkpoints.find_last_epoch", "str", "len", "os.path.join", "os.path.isdir", "print", "os.path.join", "shutil.rmtree", "ValueError"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.jsonfpath_load", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.cleanup_checkpoints.find_last_epoch"], ["", "", "def", "cleanup_tests", "(", "expname", "=", "None", ",", "tests_dir", "=", "'tests'", ",", "\n", "keepers_def", "=", "None", ",", "checkpoints_dir", "=", "CHECKPOINTS_DPATH", ")", ":", "\n", "    ", "'''orig: tcomp/tools/cleanup_checkpoints.py'''", "\n", "if", "keepers_def", "is", "None", ":", "\n", "        ", "keepers_def", "=", "set", "(", ")", "\n", "", "empties", "=", "[", "]", "\n", "models", "=", "os", ".", "listdir", "(", "checkpoints_dir", ")", "if", "expname", "is", "None", "else", "[", "expname", "]", "\n", "for", "expname", "in", "models", ":", "\n", "        ", "jsonfpath", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'trainres.json'", ")", "\n", "if", "expname", "==", "'backup'", "or", "not", "os", ".", "path", ".", "isfile", "(", "jsonfpath", ")", ":", "\n", "            ", "print", "(", "'cleanup: skipping '", "+", "expname", ")", "\n", "empties", ".", "append", "(", "expname", ")", "\n", "continue", "\n", "", "keepers", "=", "keepers_def", ".", "copy", "(", ")", "\n", "assert", "isinstance", "(", "keepers", ",", "set", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "tests_dir", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping {} (no tests subdirectory)'", ".", "format", "(", "expname", ")", ")", "\n", "continue", "\n", "", "keepers", ".", "add", "(", "str", "(", "find_last_epoch", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "'saved_models'", ")", ")", ")", ")", "\n", "\n", "results", "=", "utilities", ".", "jsonfpath_load", "(", "jsonfpath", ")", "\n", "for", "anepoch", "in", "results", "[", "'best_step'", "]", ".", "values", "(", ")", ":", "\n", "#keepers.add('epoch_'+str(anepoch)+'.')", "\n", "            ", "keepers", ".", "add", "(", "str", "(", "anepoch", ")", ")", "\n", "", "if", "len", "(", "keepers", ")", "<=", "3", ":", "\n", "            ", "print", "(", "'warning: cleanup_checkpoints: {} has too few keepers ({}), aborting.'", ".", "format", "(", "expname", ",", "keepers", ")", ")", "\n", "continue", "\n", "# for dpath2clean in [os.path.join(checkpoints_dir, expname, adir) for adir in", "\n", "#                   ('checkpoints', 'checkpoints_test', 'vis')]:", "\n", "", "members", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "tests_dir", ")", ")", "\n", "print", "(", "'cleanup_checkpoints: {}: found {} models'", ".", "format", "(", "expname", ",", "len", "(", "members", ")", ")", ")", "\n", "print", "(", "'cleanup_checkpoints: DBG: keepers: {}'", ".", "format", "(", "keepers", ")", ")", "\n", "for", "amember", "in", "members", ":", "\n", "            ", "rm", "=", "True", "\n", "for", "akeeper", "in", "keepers", ":", "\n", "                ", "if", "amember", "==", "akeeper", ":", "\n", "                    ", "rm", "=", "False", "\n", "continue", "\n", "", "", "if", "rm", ":", "\n", "                ", "rmpath", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "expname", ",", "tests_dir", ",", "amember", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "rmpath", ")", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "rmpath", ")", "\n", "#pass", "\n", "# elif os.path.isdir(rmpath):", "\n", "#     #pass", "\n", "#     shutil.rmtree(rmpath)", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "rmpath", ")", "\n", "", "print", "(", "'rm -r '", "+", "rmpath", ")", "\n", "", "", "", "if", "len", "(", "empties", ")", ">", "0", ":", "\n", "        ", "print", "(", "'Empty models: {}'", ".", "format", "(", "empties", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.verify_images.is_valid_img_mtrunner": [[14, 19], ["common.libs.libimganalysis.is_valid_img", "os.path.join"], "function", ["None"], ["def", "is_valid_img_mtrunner", "(", "img_fn", ")", ":", "\n", "    ", "return", "libimganalysis", ".", "is_valid_img", "(", "os", ".", "path", ".", "join", "(", "imagedir", ",", "img_fn", ")", ",", "\n", "open_img", "=", "True", ",", "\n", "save_img", "=", "'--save_img'", "in", "sys", ".", "argv", ",", "#  --save_img is more thorough", "\n", "clean", "=", "True", ")", "\n", "", "utilities", ".", "mt_runner", "(", "is_valid_img_mtrunner", ",", "os", ".", "listdir", "(", "imagedir", ")", ")", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.get_cat_imgs": [[27, 50], ["set", "os.path.join", "print", "set", "known_cats.add", "os.path.exists", "site.api", "open", "json.dump", "rootcat.replace", "open", "json.load", "set.update", "set.add", "list", "site.api", "wikidownloader.get_cat_imgs"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.get_cat_imgs"], ["def", "get_cat_imgs", "(", "rootcat", "=", "CAT", "[", "'FP'", "]", ",", "site", "=", "SITE", ",", "known_cats", "=", "set", "(", ")", ",", "subcats", "=", "True", ")", "->", "list", ":", "\n", "    ", "json_fpath", "=", "os", ".", "path", ".", "join", "(", "JSONDIR", ",", "rootcat", ".", "replace", "(", "'/'", ",", "'-'", ")", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_fpath", ")", "and", "not", "FORCE_REFRESH_CATS", ":", "\n", "        ", "with", "open", "(", "json_fpath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "return", "json", ".", "load", "(", "fp", ")", "\n", "", "", "print", "(", "'Searching %s'", "%", "rootcat", ")", "\n", "res", "=", "set", "(", ")", "\n", "known_cats", ".", "add", "(", "rootcat", ")", "\n", "if", "subcats", ":", "\n", "        ", "subcatsres", "=", "site", ".", "api", "(", "'query'", ",", "list", "=", "'categorymembers'", ",", "cmtitle", "=", "rootcat", ",", "cmtype", "=", "'subcat'", ",", "cmlimit", "=", "'max'", ")", "[", "'query'", "]", "[", "'categorymembers'", "]", "\n", "for", "acat", "in", "subcatsres", ":", "\n", "            ", "if", "acat", "[", "'title'", "]", "in", "known_cats", ":", "\n", "                ", "continue", "\n", "", "res", ".", "update", "(", "get_cat_imgs", "(", "rootcat", "=", "acat", "[", "'title'", "]", ")", ")", "\n", "", "", "cmcontinue", "=", "queryres", "=", "None", "\n", "while", "cmcontinue", "is", "not", "None", "or", "queryres", "is", "None", ":", "\n", "        ", "queryres", "=", "site", ".", "api", "(", "'query'", ",", "list", "=", "'categorymembers'", ",", "cmtitle", "=", "rootcat", ",", "cmtype", "=", "'file'", ",", "cmlimit", "=", "'max'", ",", "cmcontinue", "=", "cmcontinue", ")", "#['query']['categorymembers']", "\n", "for", "afile", "in", "queryres", "[", "'query'", "]", "[", "'categorymembers'", "]", ":", "\n", "            ", "res", ".", "add", "(", "afile", "[", "'title'", "]", ")", "\n", "", "cmcontinue", "=", "None", "if", "'continue'", "not", "in", "queryres", "else", "queryres", "[", "'continue'", "]", "[", "'cmcontinue'", "]", "\n", "", "with", "open", "(", "json_fpath", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "list", "(", "res", ")", ",", "fp", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.dl_cat": [[52, 95], ["os.path.join", "os.makedirs", "list", "random.shuffle", "enumerate", "wikidownloader.get_cat_imgs", "os.listdir", "tqdm.tqdm", "os.path.join", "os.path.exists", "common.libs.utilities.checksum", "common.libs.utilities.checksum", "open", "print", "print", "os.remove", "os.path.join", "print", "os.remove", "apic.split", "apic.split", "print", "str", "print", "im.download", "apic.split", "breakpoint", "print"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.get_cat_imgs", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.checksum", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.checksum"], ["", "def", "dl_cat", "(", "rootcat", "=", "CAT", "[", "'FP'", "]", ",", "site", "=", "SITE", ",", "subcats", "=", "True", ",", "limit", "=", "LIMIT", "[", "'FP'", "]", ",", "dlrootdir", "=", "ROOTDIR", ",", "dldir", "=", "DLDIR", "[", "'FP'", "]", ",", "year", "=", "YEAR", "[", "'FP'", "]", ",", "delete_uncat", "=", "False", ")", ":", "\n", "    ", "dl_dpath", "=", "os", ".", "path", ".", "join", "(", "dlrootdir", ",", "dldir", ")", "\n", "os", ".", "makedirs", "(", "dl_dpath", ",", "exist_ok", "=", "True", ")", "\n", "todl_pictures", "=", "list", "(", "get_cat_imgs", "(", "rootcat", "=", "rootcat", ",", "subcats", "=", "subcats", ")", ")", "\n", "random", ".", "shuffle", "(", "todl_pictures", ")", "\n", "if", "delete_uncat", ":", "\n", "        ", "for", "fn", "in", "os", ".", "listdir", "(", "dl_dpath", ")", ":", "\n", "            ", "if", "'File:'", "+", "fn", "not", "in", "todl_pictures", ":", "\n", "                ", "todel_fpath", "=", "os", ".", "path", ".", "join", "(", "dl_dpath", ",", "fn", ")", "\n", "print", "(", "f'rm {todel_fpath}'", ")", "\n", "os", ".", "remove", "(", "todel_fpath", ")", "\n", "", "", "", "for", "i", ",", "apic", "in", "enumerate", "(", "tqdm", "(", "todl_pictures", ")", ",", "start", "=", "1", ")", ":", "\n", "        ", "if", "apic", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "in", "EXTS_TO_SKIP", ":", "\n", "            ", "continue", "\n", "", "target_fpath", "=", "os", ".", "path", ".", "join", "(", "dl_dpath", ",", "apic", ".", "split", "(", "':'", ")", "[", "-", "1", "]", ")", "\n", "im", "=", "site", ".", "images", "[", "apic", ".", "split", "(", "':'", ")", "[", "-", "1", "]", "]", "\n", "checksum", "=", "im", ".", "imageinfo", "[", "'sha1'", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "target_fpath", ")", ":", "\n", "            ", "localhash", "=", "utilities", ".", "checksum", "(", "target_fpath", ",", "htype", "=", "'sha1'", ")", "\n", "if", "checksum", "==", "localhash", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'warning: checksums do not match with local file. Re-downloading {target_fpath}.'", ")", "\n", "", "", "if", "year", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "imyear", "=", "im", ".", "_info", "[", "'imageinfo'", "]", "[", "0", "]", "[", "'timestamp'", "]", "[", "0", ":", "4", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "breakpoint", "(", ")", "\n", "", "if", "imyear", "!=", "str", "(", "year", ")", ":", "\n", "                ", "continue", "\n", "", "", "with", "open", "(", "target_fpath", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "try", ":", "\n", "                ", "print", "(", "\"Downloading %s\"", "%", "apic", ")", "\n", "im", ".", "download", "(", "fp", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'Unable to download %s: %s'", "%", "(", "apic", ",", "e", ")", ")", "\n", "", "", "localhash", "=", "utilities", ".", "checksum", "(", "target_fpath", ",", "htype", "=", "'sha1'", ")", "\n", "if", "localhash", "!=", "checksum", ":", "\n", "            ", "print", "(", "f'warning: checksums do not match; {target_fpath} is likely corrupted. You can download it manually or start this script over.'", ")", "\n", "print", "(", "f'rm {target_fpath}'", ")", "\n", "os", ".", "remove", "(", "target_fpath", ")", "\n", "", "if", "limit", "is", "not", "None", "and", "i", "==", "limit", ":", "\n", "            ", "break", "\n", "# cleanup decat images", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parser_add_arguments": [[98, 106], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "CAT.keys"], "function", ["None"], ["", "", "", "def", "parser_add_arguments", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--cat'", ",", "default", "=", "'FP'", ",", "help", "=", "'Category short name (presets). default: FP, options: {}'", ".", "format", "(", "CAT", ".", "keys", "(", ")", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--category'", ",", "help", "=", "'Category long name (what follows Category: on Wikimedia Commons)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dest_dirname'", ",", "help", "=", "'Destination directory name (default: Category:<CATEGORY>))'", ")", "\n", "parser", ".", "add_argument", "(", "'--limit'", ",", "type", "=", "int", ",", "help", "=", "'default: {}'", ".", "format", "(", "LIMIT", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--year'", ",", "type", "=", "int", ",", "help", "=", "'default: {}'", ".", "format", "(", "YEAR", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--rootdir'", ",", "default", "=", "ROOTDIR", ",", "help", "=", "'Root download directory (default: {})'", ".", "format", "(", "ROOTDIR", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--delete_uncat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Delete images which are no longer part of the category'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parser_autocomplete": [[107, 122], ["None"], "function", ["None"], ["", "def", "parser_autocomplete", "(", "args", ")", ":", "\n", "    ", "'''\n    args.cat presets\n    '''", "\n", "if", "args", ".", "category", "is", "None", ":", "\n", "        ", "assert", "args", ".", "cat", "in", "CAT", "\n", "args", ".", "category", "=", "CAT", "[", "args", ".", "cat", "]", "\n", "if", "args", ".", "limit", "is", "None", ":", "\n", "            ", "args", ".", "limit", "=", "LIMIT", "[", "args", ".", "cat", "]", "\n", "", "if", "args", ".", "year", "is", "None", ":", "\n", "            ", "args", ".", "year", "=", "YEAR", "[", "args", ".", "cat", "]", "\n", "", "if", "args", ".", "dest_dirname", "is", "None", ":", "\n", "            ", "args", ".", "dest_dirname", "=", "DLDIR", "[", "args", ".", "cat", "]", "\n", "", "", "if", "args", ".", "dest_dirname", "is", "None", ":", "\n", "        ", "args", ".", "dest_dirname", "=", "args", ".", "category", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parse_args": [[123, 130], ["argparse.ArgumentParser", "wikidownloader.parser_add_arguments", "argparse.ArgumentParser.parse_args", "wikidownloader.parser_autocomplete", "print"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parser_add_arguments", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parse_args", "home.repos.pwc.inspect_result.trougnouf_manypriors.tools.wikidownloader.parser_autocomplete"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "parser_add_arguments", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "parser_autocomplete", "(", "args", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.__init__": [[31, 67], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "compression.models.bitEstimator.MultiHeadBitEstimator", "numpy.zeros", "int", "torch.zeros", "encoder_cls", "decoder_cls", "compression.models.Balle2018PT_compressor.Analysis_net", "compression.models.Balle2018PT_compressor.Synthesis_net", "compression.models.Balle2018PT_compressor.Analysis2017_net", "compression.models.Balle2018PT_compressor.Synthesis2017_net", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "num_distributions", "=", "64", ",", "dist_patch_size", "=", "1", ",", "nchans_per_prior", "=", "None", ",", "min_feat", "=", "-", "127", ",", "max_feat", "=", "128", ",", "q_intv", "=", "1", ",", "precision", "=", "16", ",", "entropy_coding", "=", "False", ",", "model_param", "=", "'2018'", ",", "activation_function", "=", "'GDN'", ",", "passthrough_ae", "=", "False", ",", "encoder_cls", "=", "None", ",", "decoder_cls", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        max cost to encode the prior: (bits_per_prior) / (patch_size)**2; typically 6 * (16**2) = 0.0234375\n        for SpaceChans encoding:\n        (nch * (bits_per_prior)) / (patch_size**2 * nchan_per_prior) bpp for priors\n        eg: (256*8)/(128**2 * 4) = 0.0313 bpp\n        eg: (256*8)/(32**2 * 64) = 0.0313\n\n        model_param:\n            \"2017\" for original Balle2017 paper\n            \"2018\" to use encoder/decoder subnetwork of Balle2018 paper (default)\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "min_feat", "=", "min_feat", ",", "max_feat", "=", "max_feat", ",", "q_intv", "=", "q_intv", ",", "precision", "=", "precision", ",", "entropy_coding", "=", "entropy_coding", ",", "passthrough_ae", "=", "passthrough_ae", ")", "\n", "self", ".", "nchans_per_prior", "=", "nchans_per_prior", "\n", "if", "self", ".", "nchans_per_prior", "is", "None", ":", "\n", "            ", "self", ".", "nchans_per_prior", "=", "out_channel_M", "\n", "", "del", "self", ".", "bitEstimator_z", "\n", "if", "encoder_cls", "is", "not", "None", "and", "decoder_cls", "is", "not", "None", ":", "\n", "            ", "self", ".", "Encoder", "=", "encoder_cls", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "activation_function", "=", "activation_function", ")", "\n", "self", ".", "Decoder", "=", "decoder_cls", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "activation_function", "=", "activation_function", ")", "\n", "", "if", "model_param", "==", "'2018'", "or", "model_param", "is", "None", "or", "model_param", "==", "'None'", ":", "\n", "            ", "self", ".", "Encoder", "=", "Balle2018PT_compressor", ".", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "activation_function", "=", "activation_function", ")", "\n", "self", ".", "Decoder", "=", "Balle2018PT_compressor", ".", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "activation_function", "=", "activation_function", ")", "\n", "", "elif", "model_param", "==", "'2017'", ":", "\n", "            ", "self", ".", "Encoder", "=", "Balle2018PT_compressor", ".", "Analysis2017_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Balle2018PT_compressor", ".", "Synthesis2017_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"model_param={model_param}\"", ")", "\n", "#self.bitEstimators = nn.ModuleList()", "\n", "", "self", ".", "num_distributions", "=", "num_distributions", "\n", "self", ".", "dist_patch_size", "=", "dist_patch_size", "\n", "self", ".", "bitEstimators", "=", "bitEstimator", ".", "MultiHeadBitEstimator", "(", "self", ".", "nchans_per_prior", ",", "nb_head", "=", "self", ".", "num_distributions", ",", "shape", "=", "(", "'g'", ",", "'bs'", ",", "'ch'", ",", "'h'", ",", "'w'", ")", ",", "**", "kwargs", ")", "\n", "#self.previously_unused_dists = np.arange(self.num_distributions)", "\n", "self", ".", "dists_last_use", "=", "np", ".", "zeros", "(", "self", ".", "num_distributions", ",", "dtype", "=", "int", ")", "\n", "ntargets", "=", "int", "(", "(", "-", "self", ".", "min_feat", "+", "self", ".", "max_feat", ")", "/", "self", ".", "q_intv", "+", "1", ")", "\n", "self", ".", "entropy_table", "=", "torch", ".", "zeros", "(", "self", ".", "num_distributions", ",", "out_channel_M", ",", "ntargets", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.update_entropy_table": [[71, 88], ["int", "torch.linspace().to", "targets.expand().unsqueeze().contiguous.expand().unsqueeze().contiguous.expand().unsqueeze().contiguous", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators().squeeze().squeeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.squeeze", "torchac._renorm_cast_cdf_().squeeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.cpu", "range", "torch.equal", "logger.info", "logger.info", "torch.linspace", "targets.expand().unsqueeze().contiguous.expand().unsqueeze().contiguous.expand().unsqueeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators().squeeze", "torchac._renorm_cast_cdf_", "torchac._renorm_cast_cdf_().squeeze().squeeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.unsqueeze", "targets.expand().unsqueeze().contiguous.expand().unsqueeze().contiguous.expand", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "torchac._renorm_cast_cdf_().squeeze", "torchac._renorm_cast_cdf_", "entropy_table[].unsqueeze().unsqueeze", "entropy_table[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_"], ["", "def", "update_entropy_table", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ntargets", "=", "int", "(", "(", "-", "self", ".", "min_feat", "+", "self", ".", "max_feat", ")", "/", "self", ".", "q_intv", "+", "2", ")", "\n", "targets", "=", "torch", ".", "linspace", "(", "self", ".", "min_feat", "-", ".5", ",", "self", ".", "max_feat", "+", ".5", ",", "ntargets", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "targets", "=", "targets", ".", "expand", "(", "1", ",", "self", ".", "out_channel_M", ",", "ntargets", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "# contiguous?", "\n", "entropy_table", "=", "self", ".", "bitEstimators", "(", "targets", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "entropy_table_float", "=", "entropy_table", ".", "squeeze", "(", ")", "\n", "self", ".", "entropy_table", "=", "torchac", ".", "_renorm_cast_cdf_", "(", "entropy_table", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "precision", ")", ".", "squeeze", "(", "0", ")", "\n", "self", ".", "entropy_table_cpu", "=", "self", ".", "entropy_table", ".", "cpu", "(", ")", "\n", "\n", "for", "dist_i", "in", "range", "(", "self", ".", "num_distributions", ")", ":", "\n", "                ", "assert", "torch", ".", "equal", "(", "self", ".", "entropy_table", "[", "dist_i", "]", ",", "torchac", ".", "_renorm_cast_cdf_", "(", "entropy_table", "[", "dist_i", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "precision", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "", "return", "True", "\n", "", "except", "NameError", "as", "e", ":", "\n", "            ", "logger", ".", "info", "(", "e", ")", "\n", "logger", ".", "info", "(", "'update_entropy_table: renorm failed because missing torchac'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.get_parameters": [[89, 96], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.Encoder.parameters", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Decoder.parameters", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators.parameters"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ",", "lr", "=", "None", ")", ":", "\n", "        ", "assert", "lr", "is", "not", "None", "\n", "param_list", "=", "[", "\n", "{", "'params'", ":", "self", ".", "Encoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'encoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "Decoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'decoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "bitEstimators", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "*", "10", ",", "'name'", ":", "'bit_estimator'", "}", "]", "\n", "return", "param_list", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode": [[97, 107], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_use_estim_prior", "logger.info", "logger.info", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_find_best_priors", "logger.info", "logger.info", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_use_estim_prior"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_use_estim_prior", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_find_best_priors", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_use_estim_prior"], ["", "def", "entropy_encode", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "bitstream", ",", "nbytes", "=", "self", ".", "entropy_encode_use_estim_prior", "(", "*", "args", ")", "\n", "logger", ".", "info", "(", "'approx'", ")", "\n", "logger", ".", "info", "(", "nbytes", "*", "8", ")", "\n", "return", "bitstream", ",", "nbytes", "\n", "_", ",", "nbytes", ",", "best_priors", "=", "self", ".", "entropy_encode_find_best_priors", "(", "*", "args", ")", "\n", "logger", ".", "info", "(", "'find_best_priors:'", ")", "\n", "logger", ".", "info", "(", "nbytes", "*", "8", ")", "\n", "\n", "return", "self", ".", "entropy_encode_use_estim_prior", "(", "args", "[", "0", "]", ",", "best_priors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.encode": [[111, 169], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "torch.round", "torch.round.view().transpose().unsqueeze", "torch.round.view().transpose().unsqueeze.min", "torch.round.view().transpose().unsqueeze.max", "entropy_table.unsqueeze().expand", "torch.sum().min", "torch.gather().squeeze().unsqueeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Encoder", "print", "print", "print", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.update_entropy_table", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "entropy_table.size", "torch.gather", "torch.gather", "torchac.encode_cdf", "common.libs.utilities.compress_png", "torch.round.view().transpose", "entropy_table.unsqueeze", "torch.sum", "torch.gather().squeeze", "torch.gather().squeeze().unsqueeze.cpu", "features_int.cpu", "open", "fp.write", "indices.view().numpy", "torch.clamp", "torch.round.view", "torch.gather", "indices.view", "math.log", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.unsqueeze().expand", "indices.view().expand", "torch.log", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.unsqueeze", "indices.view", "torch.round.view().transpose", "torch.round.view"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write"], ["", "def", "encode", "(", "self", ",", "input_image", ",", "entropy_coding", "=", "True", ",", "out_fpath", "=", "None", ")", ":", "\n", "        ", "'''\n        encode an image, return bitstream as needed by decode\n        egruns:\n        python train.py --test_flags testKodakTiming --arch Balle2017ManyPriors --pretrain mse_4096_b2017manypriors_64pr_16px_swopt_cont\n        '''", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "feature", "=", "torch", ".", "round", "(", "self", ".", "Encoder", "(", "input_image", ")", ")", "\n", "#feature = feature.clamp(self.min_feat, self.max_feat) # DBG FIX", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "feature", ".", "shape", "\n", "### LUT", "\n", "\n", "feat2enc", "=", "feature", ".", "view", "(", "nch", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "#.contiguous().long()", "\n", "min_feat", "=", "feat2enc", ".", "min", "(", ")", "\n", "max_feat", "=", "feat2enc", ".", "max", "(", ")", "\n", "if", "min_feat", "<", "self", ".", "min_feat", "or", "max_feat", ">", "self", ".", "max_feat", ":", "\n", "            ", "print", "(", "f\"encode: warning: min_feat={min_feat}, max_feat={max_feat} exceed the current CDF tables' range [{self.min_feat},{self.max_feat}]\"", ")", "\n", "print", "(", "f\"Doubling the CDF table's size in this model's instance. This will increase runtime significantly; you likely want to clip the features instead.\"", ")", "\n", "self", ".", "min_feat", "=", "self", ".", "min_feat", "-", "self", ".", "max_feat", "\n", "self", ".", "max_feat", "*=", "2", "\n", "print", "(", "f'New values: model.min_feat={self.min_feat}, model.max_feat={self.max_feat}'", ")", "\n", "self", ".", "update_entropy_table", "(", ")", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "", "min_index", "=", "(", "-", "self", ".", "min_feat", "+", "min_feat", ")", ".", "long", "(", ")", "\n", "max_index", "=", "(", "-", "self", ".", "min_feat", "+", "max_feat", "+", "1", ")", ".", "long", "(", ")", "\n", "feat_indices_lower", "=", "(", "feat2enc", "-", "min_feat", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "feat_indices_upper", "=", "feat_indices_lower", "+", "1", "\n", "\n", "entropy_table", "=", "self", ".", "entropy_table_float", "[", "...", ",", "min_index", ":", "max_index", "+", "1", "]", "\n", "\n", "cdf_tbl", "=", "entropy_table", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "h", "*", "w", ",", "nch", ",", "entropy_table", ".", "size", "(", "-", "1", ")", ")", "\n", "probs", "=", "torch", ".", "gather", "(", "cdf_tbl", ",", "3", ",", "feat_indices_upper", ")", "-", "torch", ".", "gather", "(", "cdf_tbl", ",", "3", ",", "feat_indices_lower", ")", "\n", "\n", "_", ",", "indices", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "1.0", "*", "torch", ".", "log", "(", "probs", "+", "1e-10", ")", "/", "math", ".", "log", "(", "2.0", ")", ",", "0", ",", "50", ")", ",", "dim", "=", "(", "2", ")", ")", ".", "min", "(", "0", ")", "\n", "\n", "# replace min_feat by self.mean_feat when using full range of probabilities", "\n", "cdf_tbl", "=", "torch", ".", "gather", "(", "self", ".", "entropy_table", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "h", "*", "w", ",", "self", ".", "num_distributions", ",", "nch", ",", "nL", ")", ",", "1", ",", "indices", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "h", "*", "w", ",", "1", ",", "nch", ",", "nL", ")", ")", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "features_int", "=", "(", "(", "feature", ".", "view", "(", "1", ",", "nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "#breakpoint()", "\n", "#return [features_int, indices, h, w]", "\n", "if", "entropy_coding", ":", "\n", "            ", "bitstream", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ".", "cpu", "(", ")", ",", "features_int", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "bitstream", "=", "features_int", "\n", "#return [feature, probs, features_int, None]", "\n", "# TODO combine into a light archive", "\n", "", "if", "out_fpath", "is", "not", "None", "and", "entropy_coding", ":", "\n", "            ", "with", "open", "(", "out_fpath", "+", "'.mbs'", ",", "'wb'", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "bitstream", ")", "\n", "#with open(out_fpath+'.h', 'w') as fp:", "\n", "#    fp.write(str(h))", "\n", "#with open(out_fpath+'.w', 'w') as fp:", "\n", "#    fp.write(str(w))", "\n", "", "utilities", ".", "compress_png", "(", "indices", ".", "view", "(", "1", ",", "h", ",", "w", ")", ".", "numpy", "(", ")", ",", "out_fpath", "+", "'.png'", ")", "# alternatively use compress_lzma", "\n", "\n", "", "return", "[", "bitstream", ",", "indices", ",", "h", ",", "w", "]", "\n", "# TODO accelerate // use LUT instead of bitEstimators", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.decode": [[172, 199], ["isinstance", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "breakpoint", "torch.gather().squeeze().unsqueeze", "torchac.decode_cdf().to", "features.view().transpose().view.view().transpose().view.view().transpose().view", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Decoder", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Decoder", "torch.tensor", "open", "fp.read", "numpy.vstack().astype", "torch.gather().squeeze", "torchac.decode_cdf", "features.view().transpose().view.view().transpose().view.view().transpose", "torch.gather().squeeze().unsqueeze.cpu", "numpy.vstack", "torch.gather", "features.view().transpose().view.view().transpose().view.view", "map", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table_cpu.unsqueeze().expand", "torch.tensor.view().expand", "png.Reader().asDirect", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table_cpu.unsqueeze", "torch.tensor.view", "png.Reader"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu"], ["", "def", "decode", "(", "self", ",", "bitstream", ",", "in_fpath", "=", "None", ")", ":", "\n", "#return None  # FIXME RM", "\n", "\n", "\n", "        ", "if", "isinstance", "(", "bitstream", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "decoded_img", "=", "self", ".", "Decoder", "(", "bitstream", ")", "\n", "return", "decoded_img", "\n", "", "if", "in_fpath", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "in_fpath", "+", "'.mbs'", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "bitstream", "=", "fp", ".", "read", "(", ")", "\n", "#with open(in_fpath+'.h', 'r') as fp:", "\n", "#    h = int(fp.read())", "\n", "#with open(in_fpath+'.w', 'r') as fp:", "\n", "#    w = int(fp.read())", "\n", "", "indices", "=", "torch", ".", "tensor", "(", "np", ".", "vstack", "(", "map", "(", "np", ".", "uint16", ",", "png", ".", "Reader", "(", "in_fpath", "+", "'.png'", ")", ".", "asDirect", "(", ")", "[", "2", "]", ")", ")", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "h", ",", "w", "=", "indices", ".", "shape", "\n", "", "else", ":", "\n", "            ", "bitstream", ",", "indices", ",", "h", ",", "w", "=", "bitstream", "\n", "", "nch", "=", "self", ".", "out_channel_M", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "breakpoint", "(", ")", "\n", "cdf_tbl", "=", "torch", ".", "gather", "(", "self", ".", "entropy_table_cpu", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "h", "*", "w", ",", "self", ".", "num_distributions", ",", "nch", ",", "nL", ")", ",", "1", ",", "indices", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "h", "*", "w", ",", "1", ",", "nch", ",", "nL", ")", ")", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "features", "=", "torchac", ".", "decode_cdf", "(", "cdf_tbl", ".", "cpu", "(", ")", ",", "bitstream", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "features", "=", "features", ".", "view", "(", "1", ",", "-", "1", ",", "nch", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "1", ",", "nch", ",", "h", ",", "w", ")", "\n", "features", "=", "(", "features", "*", "self", ".", "q_intv", "+", "self", ".", "min_feat", ")", ".", "float", "(", ")", "\n", "decoded_img", "=", "self", ".", "Decoder", "(", "features", ")", "\n", "return", "decoded_img", "#.cpu()", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.segment": [[200, 232], ["torch.tensor", "color_palette[].view().expand", "color_palette[].view().expand", "color_palette[].view().expand", "torch.zeros", "torch.gather", "torch.gather", "torch.gather", "common.libs.pt_helpers.tensor_to_imgfile", "torch.no_grad", "torch.round", "torch.sum().argmin", "common.libs.distinct_colors.get_color_palette", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.size", "torch.sum().argmin.long", "torch.sum().argmin.long", "torch.sum().argmin.long", "len", "input_image.unsqueeze.unsqueeze.unsqueeze", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Encoder", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "color_palette[].view", "color_palette[].view", "color_palette[].view", "torch.sum", "torch.clamp", "torch.log2"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.distinct_colors.get_color_palette"], ["", "def", "segment", "(", "self", ",", "input_image", ",", "output_fpath", ")", ":", "\n", "        ", "'''\n        egrun:\n            python train.py --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d --test_flags segmentation --device -1\nCommand Line Args:   --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d --test_flags segmentation --device -1\n\n        '''", "\n", "# encode image, get indices", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "im_shape", "=", "input_image", ".", "shape", "\n", "if", "len", "(", "input_image", ".", "shape", ")", "<=", "3", ":", "\n", "                ", "input_image", "=", "input_image", ".", "unsqueeze", "(", "0", ")", "\n", "", "compressed_feature_renorm", "=", "torch", ".", "round", "(", "self", ".", "Encoder", "(", "input_image", ")", ")", "\n", "\n", "probs", "=", "self", ".", "bitEstimators", "(", "compressed_feature_renorm", "+", "0.5", ")", "-", "self", ".", "bitEstimators", "(", "compressed_feature_renorm", "-", "0.5", ")", "\n", "dist_select", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "torch", ".", "log2", "(", "probs", "+", "1e-10", ")", ",", "0", ",", "50", ")", ",", "dim", "=", "(", "2", ")", ")", ".", "argmin", "(", "0", ")", "\n", "", "del", "(", "compressed_feature_renorm", ")", "\n", "del", "(", "probs", ")", "\n", "\n", "color_palette", "=", "torch", ".", "tensor", "(", "distinct_colors", ".", "get_color_palette", "(", "self", ".", "num_distributions", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "r", "=", "color_palette", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "dist_select", ".", "size", "(", "1", ")", ",", "dist_select", ".", "size", "(", "2", ")", ")", "\n", "g", "=", "color_palette", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "dist_select", ".", "size", "(", "1", ")", ",", "dist_select", ".", "size", "(", "2", ")", ")", "\n", "b", "=", "color_palette", "[", ":", ",", "2", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "dist_select", ".", "size", "(", "1", ")", ",", "dist_select", ".", "size", "(", "2", ")", ")", "\n", "\n", "\n", "\n", "segmented", "=", "torch", ".", "zeros", "(", "3", ",", "dist_select", ".", "size", "(", "1", ")", ",", "dist_select", ".", "size", "(", "2", ")", ")", "\n", "segmented", "[", "0", "]", "=", "torch", ".", "gather", "(", "r", ",", "0", ",", "dist_select", ".", "long", "(", ")", ")", "\n", "segmented", "[", "1", "]", "=", "torch", ".", "gather", "(", "g", ",", "0", ",", "dist_select", ".", "long", "(", ")", ")", "\n", "segmented", "[", "2", "]", "=", "torch", ".", "gather", "(", "b", ",", "0", ",", "dist_select", ".", "long", "(", ")", ")", "\n", "\n", "pt_helpers", ".", "tensor_to_imgfile", "(", "segmented", ",", "output_fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.timing_analysis": [[237, 320], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.update_entropy_table", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "range", "logger.info", "logger.info", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.encode", "statistics.mean", "logger.info", "torch.no_grad", "time.perf_counter", "torch.round", "timedict[].append", "time.perf_counter", "torch.round.view().transpose().unsqueeze", "torch.round.view().transpose().unsqueeze.min", "torch.round.view().transpose().unsqueeze.max", "entropy_table.unsqueeze().expand", "torch.sum().argmin", "timedict[].append", "time.perf_counter", "torch.gather().squeeze().unsqueeze", "timedict[].append", "logger.info", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Encoder", "entropy_table.size", "torch.gather", "torch.gather", "time.perf_counter", "torchac.encode_cdf", "timedict[].append", "time.perf_counter", "torchac.decode_cdf", "timedict[].append", "time.perf_counter", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Decoder", "timedict[].append", "time.perf_counter", "torch.round.view().transpose", "entropy_table.unsqueeze", "torch.sum", "time.perf_counter", "torch.gather().squeeze", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter", "torch.round.view", "torch.log2", "torch.gather", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.unsqueeze().expand", "torch.sum().argmin.view().expand", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.unsqueeze", "torch.sum().argmin.view", "torch.round.view().transpose", "torch.round.view"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.encode"], ["", "def", "timing_analysis", "(", "self", ",", "input_image", ",", "entropy_coding", "=", "False", ")", ":", "\n", "        ", "'''\n        python train.py --test_flags timing --arch Balle2017ManyPriors --pretrain mse_4096_b2017manypriors_64pr_16px_swopt_cont --device -1\n        egrun\n        python train.py --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d --test_flags timing --device -1\n\n        the side string lzma compression is timed separately !\n        '''", "\n", "self", ".", "update_entropy_table", "(", ")", "\n", "\n", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "timedict", "=", "{", "'nnenc'", ":", "[", "]", ",", "'getindices_lut'", ":", "[", "]", ",", "'make_cdf_tbl'", ":", "[", "]", ",", "'nndec'", ":", "[", "]", ",", "'torchac_enc'", ":", "[", "]", ",", "'torchac_dec'", ":", "[", "]", "}", "#, 'getindices_nn': []}", "\n", "#_ = self.forward(input_image)  # time side string enc/dec", "\n", "try", ":", "\n", "            ", "bitstream", ",", "indices", ",", "h", ",", "w", "=", "self", ".", "encode", "(", "input_image", ")", "\n", "", "except", "NameError", ":", "\n", "            ", "logger", ".", "info", "(", "'timing_analysis: whole encode timing not completed due to missing torchac library'", ")", "\n", "", "for", "rep", "in", "range", "(", "50", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# one whole enc", "\n", "#tic = time.perf_counter()", "\n", "#timedict['enc'].append(time.perf_counter()-tic)", "\n", "\n", "# nnenc", "\n", "                ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "feature", "=", "torch", ".", "round", "(", "self", ".", "Encoder", "(", "input_image", ")", ")", "\n", "timedict", "[", "'nnenc'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "# get best indices", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "feature", ".", "shape", "\n", "#breakpoint()", "\n", "feat2enc", "=", "feature", ".", "view", "(", "nch", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "#.contiguous().long()", "\n", "#feat2enc = feature.view(-1, nch).unsqueeze(-1) # TODO DBG/rm, incorrect res", "\n", "min_feat", "=", "feat2enc", ".", "min", "(", ")", "\n", "max_feat", "=", "feat2enc", ".", "max", "(", ")", "\n", "min_index", "=", "(", "-", "self", ".", "min_feat", "+", "min_feat", ")", ".", "long", "(", ")", "\n", "max_index", "=", "(", "-", "self", ".", "min_feat", "+", "max_feat", "+", "1", ")", ".", "long", "(", ")", "\n", "feat_indices_lower", "=", "(", "feat2enc", "-", "min_feat", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "feat_indices_upper", "=", "feat_indices_lower", "+", "1", "\n", "entropy_table", "=", "self", ".", "entropy_table_float", "[", "...", ",", "min_index", ":", "max_index", "+", "1", "]", "\n", "cdf_tbl", "=", "entropy_table", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "self", ".", "num_distributions", ",", "h", "*", "w", ",", "nch", ",", "entropy_table", ".", "size", "(", "-", "1", ")", ")", "\n", "probs", "=", "torch", ".", "gather", "(", "cdf_tbl", ",", "3", ",", "feat_indices_upper", ")", "-", "torch", ".", "gather", "(", "cdf_tbl", ",", "3", ",", "feat_indices_lower", ")", "\n", "#indices = torch.sum(torch.clamp(-torch.log(probs + 1e-10) / math.log(2.0), 0, 50), dim=(2)).argmin(0)", "\n", "indices", "=", "torch", ".", "sum", "(", "-", "torch", ".", "log2", "(", "probs", ")", ",", "dim", "=", "2", ")", ".", "argmin", "(", "0", ")", "\n", "#breakpoint()", "\n", "timedict", "[", "'getindices_lut'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "# make cdf tbl", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "cdf_tbl", "=", "torch", ".", "gather", "(", "self", ".", "entropy_table", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "h", "*", "w", ",", "self", ".", "num_distributions", ",", "nch", ",", "nL", ")", ",", "1", ",", "indices", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "h", "*", "w", ",", "1", ",", "nch", ",", "nL", ")", ")", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "timedict", "[", "'make_cdf_tbl'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "try", ":", "\n", "# entropy_encode", "\n", "                    ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "features_int", "=", "(", "(", "feature", ".", "view", "(", "1", ",", "nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "bitstream", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "features_int", ")", "\n", "timedict", "[", "'torchac_enc'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "# entropy_decode", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "entropy_decoded", "=", "torchac", ".", "decode_cdf", "(", "cdf_tbl", ",", "bitstream", ")", "\n", "timedict", "[", "'torchac_dec'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "# nndec", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "reconst", "=", "self", ".", "Decoder", "(", "feature", ")", "\n", "timedict", "[", "'nndec'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "", "except", "NameError", ":", "\n", "# missing torchac", "\n", "                    ", "pass", "\n", "\n", "\n", "", "logger", ".", "info", "(", "timedict", ")", "\n", "\n", "\n", "", "", "for", "ares", "in", "timedict", ":", "\n", "            ", "timedict", "[", "ares", "]", "=", "statistics", ".", "mean", "(", "timedict", "[", "ares", "]", ")", "\n", "", "logger", ".", "info", "(", "'\\n'", ")", "\n", "logger", ".", "info", "(", "timedict", ")", "\n", "return", "timedict", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.forward": [[321, 397], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.Encoder", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.Decoder", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.clamp", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.lossfun", "dist_select.unique", "dist_select.unique.cpu", "numpy.setdiff1d", "torch.zeros", "torch.nn.init.uniform_", "torch.round", "torch.sum", "torch.sum.min", "int", "common.libs.pt_ops.img_to_batch", "torch.sum", "torch.sum.min", "int", "numpy.arange", "numpy.argwhere().flatten", "min", "torch.tensor", "torch.gather().sum", "torch.gather().sum", "logger.info", "logger.info", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode", "logger.info", "logger.info", "torch.tensor", "dist_select.unique.cpu.tolist", "input_image.size", "torch.zeros_like", "common.libs.pt_ops.RoundNoGradient().apply", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "torch.clamp", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.bitEstimators", "torch.clamp", "dist_select.unique.cpu", "dist_select.flatten", "numpy.random.choice", "torch.tensor", "input_image.size", "input_image.size", "numpy.argwhere", "minbits.flatten().sort", "victims.size", "torch.gather", "torch.gather", "common.libs.pt_helpers.get_num_bits", "common.libs.pt_ops.RoundNoGradient", "torch.log2", "torch.round.size", "torch.log2", "dist_select.unsqueeze", "dist_select.unsqueeze", "math.log2", "dist_select.cpu", "torch.round.size", "torch.round.size", "minbits.flatten"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.lossfun", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.img_to_batch", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.entropy_encode", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu"], ["", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "num_dists_to_force_train", "=", "0", "\n", "\n", "im_shape", "=", "input_image", ".", "shape", "\n", "feature", "=", "self", ".", "Encoder", "(", "input_image", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "quant_noise_feature", "=", "torch", ".", "zeros", "(", "input_image", ".", "size", "(", "0", ")", ",", "self", ".", "out_channel_M", ",", "input_image", ".", "size", "(", "2", ")", "//", "16", ",", "input_image", ".", "size", "(", "3", ")", "//", "16", ",", "device", "=", "self", ".", "device", ")", "\n", "quant_noise_feature", "=", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros_like", "(", "quant_noise_feature", ")", ",", "-", "0.5", ",", "0.5", ")", "\n", "compressed_feature_entropy", "=", "feature", "+", "quant_noise_feature", "\n", "if", "self", ".", "passthrough_ae", ":", "# ae: round, entropy: noise", "\n", "\n", "                ", "compressed_feature_ae", "=", "pt_ops", ".", "RoundNoGradient", "(", ")", ".", "apply", "(", "feature", ")", "\n", "", "else", ":", "# ae: noise, entropy: noise", "\n", "                ", "compressed_feature_ae", "=", "compressed_feature_entropy", "\n", "", "", "else", ":", "\n", "# ae and entropy: round", "\n", "            ", "compressed_feature_entropy", "=", "torch", ".", "round", "(", "feature", ")", "\n", "compressed_feature_ae", "=", "compressed_feature_entropy", "\n", "", "recon_image", "=", "self", ".", "Decoder", "(", "compressed_feature_ae", ")", "\n", "# recon_image = prediction + recon_res", "\n", "clipped_recon_image", "=", "recon_image", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "# distortion", "\n", "#visual_loss = torch.mean((recon_image - input_image).pow(2))", "\n", "visual_loss", "=", "self", ".", "lossfun", "(", "recon_image", ",", "input_image", ")", "\n", "\n", "\n", "total_bits_feature", "=", "0", "\n", "\n", "if", "self", ".", "dist_patch_size", "==", "1", "and", "self", ".", "nchans_per_prior", "==", "self", ".", "out_channel_M", ":", "\n", "            ", "probs", "=", "self", ".", "bitEstimators", "(", "compressed_feature_entropy", "+", "0.5", ")", "-", "self", ".", "bitEstimators", "(", "compressed_feature_entropy", "-", "0.5", ")", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "torch", ".", "log2", "(", "probs", "+", "1e-10", ")", ",", "0", ",", "50", ")", ",", "dim", "=", "(", "2", ")", ")", "\n", "minbits", ",", "dist_select", "=", "total_bits", ".", "min", "(", "0", ")", "\n", "feature_batched_shape", "=", "compressed_feature_entropy", ".", "shape", "\n", "max_num_dists_to_force_train", "=", "int", "(", "compressed_feature_entropy", ".", "size", "(", "0", ")", "*", "compressed_feature_entropy", ".", "size", "(", "2", ")", "*", "compressed_feature_entropy", ".", "size", "(", "3", ")", "*", "0.1", ")", "\n", "\n", "#im_batched = compressed_feature_renorm", "\n", "", "else", ":", "\n", "            ", "im_batched", "=", "pt_ops", ".", "img_to_batch", "(", "compressed_feature_entropy", ",", "self", ".", "dist_patch_size", ",", "self", ".", "nchans_per_prior", ")", "\n", "feature_batched_shape", "=", "im_batched", ".", "shape", "\n", "probs", "=", "self", ".", "bitEstimators", "(", "im_batched", "+", "0.5", ")", "-", "self", ".", "bitEstimators", "(", "im_batched", "-", "0.5", ")", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "torch", ".", "log2", "(", "probs", "+", "1e-10", ")", ",", "0", ",", "50", ")", ",", "dim", "=", "(", "2", ",", "3", ",", "4", ")", ")", "# per dist_i, batch", "\n", "minbits", ",", "dist_select", "=", "total_bits", ".", "min", "(", "0", ")", "\n", "max_num_dists_to_force_train", "=", "int", "(", "feature_batched_shape", "[", "0", "]", "*", "0.1", ")", "\n", "\n", "#print(dist_select)", "\n", "", "used_dists", "=", "dist_select", ".", "unique", "(", ")", "\n", "used_dists_cpu", "=", "used_dists", ".", "cpu", "(", ")", "\n", "self", ".", "dists_last_use", "[", "used_dists", ".", "cpu", "(", ")", "]", "=", "0", "\n", "unused_dists", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_distributions", ")", ",", "used_dists_cpu", ",", "assume_unique", "=", "True", ")", "\n", "self", ".", "dists_last_use", "[", "unused_dists", "]", "+=", "1", "\n", "if", "self", ".", "training", "and", "self", ".", "num_distributions", ">", "1", ":", "# and len(used_dists) < min((self.num_distributions // 4*3), self.out_channel_M//4*3):", "\n", "            ", "dists_i_to_train", "=", "np", ".", "argwhere", "(", "self", ".", "dists_last_use", ">", "50", ")", ".", "flatten", "(", ")", "\n", "num_dists_to_force_train", "=", "min", "(", "dists_i_to_train", ".", "size", ",", "max_num_dists_to_force_train", ")", "\n", "\n", "victims", "=", "minbits", ".", "flatten", "(", ")", ".", "sort", "(", "descending", "=", "True", ")", ".", "indices", "[", ":", "num_dists_to_force_train", "]", "\n", "dist_select", ".", "flatten", "(", ")", "[", "victims", "]", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "choice", "(", "unused_dists", ",", "victims", ".", "size", "(", ")", ",", "replace", "=", "False", ")", ",", "device", "=", "dist_select", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "training", "or", "not", "self", ".", "entropy_coding", ":", "\n", "            ", "total_bits_feature", "=", "torch", ".", "gather", "(", "total_bits", ",", "0", ",", "dist_select", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "total_bits_feature_theo", "=", "torch", ".", "gather", "(", "total_bits", ",", "0", ",", "dist_select", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "logger", ".", "info", "(", "'theobits'", ")", "\n", "logger", ".", "info", "(", "total_bits_feature_theo", ")", "\n", "bitstream", ",", "nbytes", "=", "self", ".", "entropy_encode", "(", "compressed_feature_entropy", ",", "dist_select", ")", "\n", "total_bits_feature", "=", "nbytes", "*", "8", "\n", "logger", ".", "info", "(", "'actualbits'", ")", "\n", "logger", ".", "info", "(", "total_bits_feature", ")", "\n", "#breakpoint()", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "bpp_sidestring", "=", "torch", ".", "tensor", "(", "(", "feature_batched_shape", "[", "0", "]", "*", "math", ".", "log2", "(", "self", ".", "num_distributions", ")", ")", "/", "(", "im_shape", "[", "0", "]", "*", "im_shape", "[", "2", "]", "*", "im_shape", "[", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "bpp_sidestring", "=", "torch", ".", "tensor", "(", "pt_helpers", ".", "get_num_bits", "(", "dist_select", ".", "cpu", "(", ")", ",", "integers", "=", "True", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "(", "im_shape", "[", "0", "]", "*", "im_shape", "[", "2", "]", "*", "im_shape", "[", "3", "]", ")", "\n", "", "bpp_feature", "=", "total_bits_feature", "/", "(", "im_shape", "[", "0", "]", "*", "im_shape", "[", "2", "]", "*", "im_shape", "[", "3", "]", ")", "\n", "bpp", "=", "bpp_feature", "+", "bpp_sidestring", "\n", "return", "clipped_recon_image", ",", "visual_loss", ",", "bpp_feature", ",", "bpp_sidestring", ",", "bpp", ",", "used_dists_cpu", ".", "tolist", "(", ")", ",", "num_dists_to_force_train", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_find_best_priors": [[399, 431], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "range", "features[].reshape().transpose", "range", "torch.tensor().reshape", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table[].unsqueeze().unsqueeze", "torchac.encode_cdf", "range", "bitstream.append", "dists.append", "len", "nbyteslist.append", "features[].reshape", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table[].unsqueeze().unsqueeze", "torchac.encode_cdf", "len", "torch.tensor", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table[].unsqueeze", "len", "len", "manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table[].unsqueeze"], "methods", ["None"], ["", "def", "entropy_encode_find_best_priors", "(", "self", ",", "features", ",", "*", "args", ")", ":", "\n", "        ", "'''\n        encode one spatial location at a time checking for the best prior\n        completely unnecessary\n        '''", "\n", "bitstream", "=", "[", "]", "\n", "dists", "=", "[", "]", "\n", "nbytes", "=", "0", "\n", "nbyteslist", "=", "[", "]", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "features", ".", "shape", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "\n", "for", "bn", "in", "range", "(", "bs", ")", ":", "\n", "            ", "features_int", "=", "features", "[", "bn", "]", ".", "reshape", "(", "1", ",", "nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# bs, h*w, nch", "\n", "features_int", "=", "(", "(", "features_int", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", "\n", "for", "adim", "in", "range", "(", "h", "*", "w", ")", ":", "\n", "                ", "afeature", "=", "features_int", "[", "bn", ",", "adim", "]", "\n", "best_dist", "=", "0", "\n", "cdf_tbl", "=", "self", ".", "entropy_table", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "smallest_bitstream", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "afeature", ")", "\n", "for", "adist", "in", "range", "(", "1", ",", "self", ".", "num_distributions", ")", ":", "\n", "                    ", "cdf_tbl", "=", "self", ".", "entropy_table", "[", "adist", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# 1, 1, nch, L", "\n", "encoded_str", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "afeature", ")", "\n", "if", "len", "(", "smallest_bitstream", ")", ">", "len", "(", "encoded_str", ")", ":", "\n", "                        ", "smallest_bitstream", "=", "encoded_str", "\n", "best_dist", "=", "adist", "\n", "", "", "bitstream", ".", "append", "(", "smallest_bitstream", ")", "\n", "dists", ".", "append", "(", "best_dist", ")", "\n", "nbytes", "+=", "len", "(", "smallest_bitstream", ")", "\n", "nbyteslist", ".", "append", "(", "len", "(", "smallest_bitstream", ")", ")", "\n", "\n", "", "", "return", "bitstream", ",", "nbytes", ",", "torch", ".", "tensor", "(", "dists", ")", ".", "reshape", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_encode_use_estim_prior": [[432, 476], ["manynets_compressor.Balle2017ManyPriors_ImageCompressor.entropy_table.size", "range", "logger.info", "torch.zeros", "dist_select.reshape", "range", "features[].reshape().transpose().contiguous", "torchac.encode_cdf", "bitstream.append", "len", "torchac.decode_cdf", "logger.info", "breakpoint", "features[].reshape().transpose", "features.max", "features.min", "torch.equal", "logger.info", "logger.info", "breakpoint", "features.min", "features.max", "features[].reshape", "torchac.decode_cdf.view().transpose().reshape", "torchac.decode_cdf.view().transpose", "torchac.decode_cdf.view"], "methods", ["None"], ["", "def", "entropy_encode_use_estim_prior", "(", "self", ",", "features", ",", "dist_select", ")", ":", "\n", "        ", "'''\n        encodes the whole image at once using the theoretical best prior\n        '''", "\n", "bitstream", "=", "[", "]", "\n", "nbytes", "=", "0", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "features", ".", "shape", "\n", "nL", "=", "self", ".", "entropy_table", ".", "size", "(", "-", "1", ")", "\n", "for", "bn", "in", "range", "(", "bs", ")", ":", "\n", "# too much memory to do all at once", "\n", "# entropy table: numdist*, nch, nL", "\n", "# dist_select: h, w", "\n", "# final dim: h*w, nch, nL", "\n", "            ", "cdf_tbl", "=", "torch", ".", "zeros", "(", "1", ",", "h", "*", "w", ",", "nch", ",", "nL", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "dist_select_view", "=", "dist_select", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "for", "adim", "in", "range", "(", "h", "*", "w", ")", ":", "\n", "                ", "cdf_tbl", "[", "0", ",", "adim", "]", "=", "self", ".", "entropy_table", "[", "dist_select_view", "[", "bn", ",", "adim", "]", "]", "\n", "# // version", "\n", "# cdf_tbl = torch.gather(", "\n", "#     self.entropy_table.view(self.num_distributions, 1, nch, nL).expand(self.num_distributions, h*w, nch, nL).contiguous(),", "\n", "#     0,", "\n", "#     dist_select.view(1, h*w, 1, 1).expand(1, h*w, nch, nL)", "\n", "#     )", "\n", "", "features_int", "=", "features", "[", "bn", "]", ".", "reshape", "(", "1", ",", "nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# bs, h*w, nch", "\n", "features_int", "=", "(", "(", "features_int", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "encoded_str", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "features_int", ")", "\n", "bitstream", ".", "append", "(", "encoded_str", ")", "\n", "nbytes", "+=", "len", "(", "encoded_str", ")", "\n", "decoded_str", "=", "torchac", ".", "decode_cdf", "(", "cdf_tbl", ",", "encoded_str", ")", "\n", "#print(encoded_str)", "\n", "#print(z_int)", "\n", "#print(decoded_str)", "\n", "decoded_str", "=", "(", "decoded_str", ".", "view", "(", "1", ",", "h", "*", "w", ",", "nch", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "1", ",", "nch", ",", "h", ",", "w", ")", "*", "self", ".", "q_intv", "+", "self", ".", "min_feat", ")", ".", "float", "(", ")", "\n", "if", "features", ".", "max", "(", ")", ">", "self", ".", "max_feat", "or", "features", ".", "min", "(", ")", "<", "self", ".", "min_feat", ":", "\n", "                ", "logger", ".", "info", "(", "'entropy_encode error: z out of range: [{}, {}] instead of [{}, {}]'", ".", "format", "(", "features", ".", "min", "(", ")", ",", "features", ".", "max", "(", ")", ",", "self", ".", "min_feat", ",", "self", ".", "max_feat", ")", ")", "\n", "breakpoint", "(", ")", "\n", "", "elif", "not", "torch", ".", "equal", "(", "features", ",", "decoded_str", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'entropy_encode error: z and decoded_str do not match.'", ")", "\n", "logger", ".", "info", "(", "cdf_tbl", ")", "\n", "breakpoint", "(", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "nbytes", "*", "8", ")", "\n", "return", "bitstream", ",", "nbytes", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Balle2018PTTFExp_ImageCompressor.__init__": [[14, 20], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "Balle2018PT_compressor.Analysis_net", "Balle2018PT_compressor.Synthesis_net", "Balle2018PT_compressor.SynthesisTFCodeExp_prior_net", "Balle2018PT_compressor.Analysis_prior_net"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "entropy_coding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "entropy_coding", "=", "entropy_coding", ",", "**", "kwargs", ")", "\n", "self", ".", "Encoder", "=", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "SynthesisTFCodeExp_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "Analysis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Balle2018PT_ImageCompressor.__init__": [[25, 31], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "Balle2018PT_compressor.Analysis_net", "Balle2018PT_compressor.Synthesis_net", "Balle2018PT_compressor.Synthesis_prior_net", "Balle2018PT_compressor.Analysis_prior_net"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "entropy_coding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "entropy_coding", "=", "entropy_coding", ",", "**", "kwargs", ")", "\n", "self", ".", "Encoder", "=", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "Synthesis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "Analysis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Balle2018PTStd_ImageCompressor.__init__": [[33, 39], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "Balle2018PT_compressor.Analysis_net", "Balle2018PT_compressor.Synthesis_net", "Balle2018PT_compressor.SynthesisStd_prior_net", "Balle2018PT_compressor.Analysis_prior_net"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "entropy_coding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "entropy_coding", "=", "entropy_coding", ",", "**", "kwargs", ")", "\n", "self", ".", "Encoder", "=", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "SynthesisStd_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "Analysis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Balle2018PTTF_ImageCompressor.__init__": [[41, 47], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "Balle2018PT_compressor.Analysis_net", "Balle2018PT_compressor.Synthesis_net", "Balle2018PT_compressor.SynthesisTFCode_prior_net", "Balle2018PT_compressor.Analysis_prior_net"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "entropy_coding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "entropy_coding", "=", "entropy_coding", ",", "**", "kwargs", ")", "\n", "self", ".", "Encoder", "=", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "SynthesisTFCode_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "Analysis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Balle2018PTPaperExp_ImageCompressor.__init__": [[49, 55], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "Balle2018PT_compressor.Analysis_net", "Balle2018PT_compressor.Synthesis_net", "Balle2018PT_compressor.SynthesisPaperExp_prior_net", "Balle2018PT_compressor.Analysis_prior_net"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "entropy_coding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ",", "entropy_coding", "=", "entropy_coding", ",", "**", "kwargs", ")", "\n", "self", ".", "Encoder", "=", "Analysis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "Synthesis_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "SynthesisPaperExp_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "Analysis_prior_net", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis_net.__init__": [[62, 97], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.Hardswish", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "activation_function", "=", "'GDN'", ")", ":", "\n", "        ", "super", "(", "Analysis_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "activation_function", "==", "'Hardswish'", ":", "\n", "            ", "activation_function", "=", "torch", ".", "nn", ".", "Hardswish", "(", ")", "\n", "self", ".", "gdn1", "=", "activation_function", "\n", "self", ".", "gdn2", "=", "activation_function", "\n", "self", ".", "gdn3", "=", "activation_function", "\n", "", "elif", "activation_function", "==", "'GDN'", ":", "\n", "            ", "activation_function", "=", "GDN", ".", "GDN", "\n", "self", ".", "gdn1", "=", "activation_function", "(", "out_channel_N", ")", "\n", "self", ".", "gdn2", "=", "activation_function", "(", "out_channel_N", ")", "\n", "self", ".", "gdn3", "=", "activation_function", "(", "out_channel_N", ")", "\n", "", "elif", "activation_function", "==", "'GELU'", ":", "\n", "            ", "activation_function", "=", "torch", ".", "nn", ".", "GELU", "\n", "self", ".", "gdn1", "=", "activation_function", "(", ")", "\n", "self", ".", "gdn2", "=", "activation_function", "(", ")", "\n", "self", ".", "gdn3", "=", "activation_function", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "activation_function", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "(", "3", "+", "out_channel_N", ")", "/", "(", "6", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv3", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_M", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv4", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv4", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis_net.forward": [[98, 103], ["Balle2018PT_compressor.Analysis_net.gdn1", "Balle2018PT_compressor.Analysis_net.gdn2", "Balle2018PT_compressor.Analysis_net.gdn3", "Balle2018PT_compressor.Analysis_net.conv4", "Balle2018PT_compressor.Analysis_net.conv1", "Balle2018PT_compressor.Analysis_net.conv2", "Balle2018PT_compressor.Analysis_net.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "gdn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "gdn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "gdn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "self", ".", "conv4", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis_prior_net.__init__": [[109, 122], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", "Analysis_prior_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "out_channel_M", ",", "out_channel_N", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_M", "+", "out_channel_M", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv3", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis_prior_net.forward": [[123, 128], ["torch.abs", "Balle2018PT_compressor.Analysis_prior_net.relu1", "Balle2018PT_compressor.Analysis_prior_net.relu2", "Balle2018PT_compressor.Analysis_prior_net.conv3", "Balle2018PT_compressor.Analysis_prior_net.conv1", "Balle2018PT_compressor.Analysis_prior_net.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "return", "self", ".", "conv3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis_prior_net.__init__": [[135, 148], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", "Synthesis_prior_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_M", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "# self.priordecoder = nn.Sequential(", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis_prior_net.forward": [[156, 160], ["Balle2018PT_compressor.Synthesis_prior_net.relu1", "Balle2018PT_compressor.Synthesis_prior_net.relu2", "torch.exp", "Balle2018PT_compressor.Synthesis_prior_net.deconv1", "Balle2018PT_compressor.Synthesis_prior_net.deconv2", "Balle2018PT_compressor.Synthesis_prior_net.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "return", "torch", ".", "exp", "(", "self", ".", "deconv3", "(", "x", ")", ")", "# why exp ?? seems to increase runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisPaperExp_prior_net.__init__": [[166, 180], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_M", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", ")", "\n", "# self.priordecoder = nn.Sequential(", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisPaperExp_prior_net.forward": [[188, 192], ["Balle2018PT_compressor.SynthesisPaperExp_prior_net.relu1", "Balle2018PT_compressor.SynthesisPaperExp_prior_net.relu2", "torch.exp", "Balle2018PT_compressor.SynthesisPaperExp_prior_net.deconv1", "Balle2018PT_compressor.SynthesisPaperExp_prior_net.deconv2", "Balle2018PT_compressor.SynthesisPaperExp_prior_net.relu3", "Balle2018PT_compressor.SynthesisPaperExp_prior_net.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "return", "torch", ".", "exp", "(", "self", ".", "relu3", "(", "self", ".", "deconv3", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisTFCode_prior_net.__init__": [[197, 210], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_M", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "# self.priordecoder = nn.Sequential(", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisTFCode_prior_net.forward": [[218, 222], ["Balle2018PT_compressor.SynthesisTFCode_prior_net.relu1", "Balle2018PT_compressor.SynthesisTFCode_prior_net.relu2", "Balle2018PT_compressor.SynthesisTFCode_prior_net.deconv3", "Balle2018PT_compressor.SynthesisTFCode_prior_net.deconv1", "Balle2018PT_compressor.SynthesisTFCode_prior_net.deconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "return", "self", ".", "deconv3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.__init__": [[227, 240], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_M", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "# self.priordecoder = nn.Sequential(", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.forward": [[248, 252], ["Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.relu1", "Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.relu2", "torch.exp", "Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.deconv1", "Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.deconv2", "Balle2018PT_compressor.SynthesisTFCodeExp_prior_net.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "return", "torch", ".", "exp", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisStd_prior_net.__init__": [[255, 257], ["Balle2018PT_compressor.Synthesis_prior_net.__init__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.SynthesisStd_prior_net.forward": [[257, 261], ["Balle2018PT_compressor.SynthesisStd_prior_net.relu1", "Balle2018PT_compressor.SynthesisStd_prior_net.relu2", "Balle2018PT_compressor.SynthesisStd_prior_net.relu2", "Balle2018PT_compressor.SynthesisStd_prior_net.deconv1", "Balle2018PT_compressor.SynthesisStd_prior_net.deconv2", "Balle2018PT_compressor.SynthesisStd_prior_net.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "return", "self", ".", "relu2", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis_net.__init__": [[266, 301], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "compression.models.GDN.GDN", "compression.models.GDN.GDN", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish.", "torch.nn.Hardswish", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "out_channel_fin", "=", "3", ",", "activation_function", "=", "'GDN'", ")", ":", "\n", "        ", "super", "(", "Synthesis_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "activation_function", "==", "'GDN'", ":", "\n", "            ", "self", ".", "igdn1", "=", "GDN", ".", "GDN", "(", "out_channel_N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "igdn2", "=", "GDN", ".", "GDN", "(", "out_channel_N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "igdn3", "=", "GDN", ".", "GDN", "(", "out_channel_N", ",", "inverse", "=", "True", ")", "\n", "", "elif", "activation_function", "==", "'Hardswish'", ":", "\n", "            ", "if", "activation_function", "==", "'Hardswish'", ":", "\n", "                ", "activation_function", "=", "torch", ".", "nn", ".", "Hardswish", "(", ")", "\n", "", "self", ".", "igdn1", "=", "activation_function", "\n", "self", ".", "igdn2", "=", "activation_function", "\n", "self", ".", "igdn3", "=", "activation_function", "\n", "", "else", ":", "\n", "            ", "if", "activation_function", "==", "'GELU'", ":", "\n", "                ", "activation_function", "=", "torch", ".", "nn", ".", "GELU", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "activation_function", ")", "\n", "", "self", ".", "igdn1", "=", "activation_function", "(", ")", "\n", "self", ".", "igdn2", "=", "activation_function", "(", ")", "\n", "self", ".", "igdn3", "=", "activation_function", "(", ")", "\n", "", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_M", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_M", "+", "out_channel_M", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "#self.igdn1 = GDN.GDN(out_channel_N, inverse=True)", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "#self.igdn2 = GDN.GDN(out_channel_N, inverse=True)", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "#self.igdn3 = GDN.GDN(out_channel_N, inverse=True)", "\n", "self", ".", "deconv4", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_fin", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv4", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_N", "+", "3", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv4", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis_net.forward": [[303, 309], ["Balle2018PT_compressor.Synthesis_net.igdn1", "Balle2018PT_compressor.Synthesis_net.igdn2", "Balle2018PT_compressor.Synthesis_net.igdn3", "Balle2018PT_compressor.Synthesis_net.deconv4", "Balle2018PT_compressor.Synthesis_net.deconv1", "Balle2018PT_compressor.Synthesis_net.deconv2", "Balle2018PT_compressor.Synthesis_net.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "igdn1", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "igdn2", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "igdn3", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "deconv4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis2017_net.__init__": [[314, 328], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "torch.nn.Conv2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ")", ":", "\n", "        ", "super", "(", "Analysis2017_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "out_channel_N", ",", "9", ",", "stride", "=", "4", ",", "padding", "=", "4", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "(", "3", "+", "out_channel_N", ")", "/", "(", "6", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "gdn1", "=", "GDN", ".", "GDN", "(", "out_channel_N", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "gdn2", "=", "GDN", ".", "GDN", "(", "out_channel_N", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "out_channel_N", ",", "out_channel_M", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv3", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "gdn3", "=", "GDN", ".", "GDN", "(", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Analysis2017_net.forward": [[330, 335], ["Balle2018PT_compressor.Analysis2017_net.gdn1", "Balle2018PT_compressor.Analysis2017_net.gdn2", "Balle2018PT_compressor.Analysis2017_net.gdn3", "Balle2018PT_compressor.Analysis2017_net.conv1", "Balle2018PT_compressor.Analysis2017_net.conv2", "Balle2018PT_compressor.Analysis2017_net.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "gdn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "gdn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "gdn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis2017_net.__init__": [[340, 356], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "compression.models.GDN.GDN", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "out_channel_fin", "=", "3", ")", ":", "\n", "        ", "super", "(", "Synthesis2017_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_M", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv1", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_M", "+", "out_channel_N", ")", "/", "(", "out_channel_M", "+", "out_channel_M", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv1", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "igdn1", "=", "GDN", ".", "GDN", "(", "out_channel_M", ",", "inverse", "=", "True", ")", "\n", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_N", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", "*", "1", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "igdn2", "=", "GDN", ".", "GDN", "(", "out_channel_N", ",", "inverse", "=", "True", ")", "\n", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "out_channel_N", ",", "out_channel_fin", ",", "9", ",", "stride", "=", "4", ",", "padding", "=", "3", ",", "output_padding", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "deconv3", ".", "weight", ".", "data", ",", "(", "math", ".", "sqrt", "(", "2", "*", "1", "*", "(", "out_channel_N", "+", "3", ")", "/", "(", "out_channel_N", "+", "out_channel_N", ")", ")", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv3", ".", "bias", ".", "data", ",", "0.01", ")", "\n", "self", ".", "igdn3", "=", "GDN", ".", "GDN", "(", "out_channel_N", ",", "inverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.Balle2018PT_compressor.Synthesis2017_net.forward": [[358, 363], ["Balle2018PT_compressor.Synthesis2017_net.deconv1", "Balle2018PT_compressor.Synthesis2017_net.deconv2", "Balle2018PT_compressor.Synthesis2017_net.deconv3", "Balle2018PT_compressor.Synthesis2017_net.igdn1", "Balle2018PT_compressor.Synthesis2017_net.igdn2", "Balle2018PT_compressor.Synthesis2017_net.igdn3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "deconv1", "(", "self", ".", "igdn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "deconv2", "(", "self", ".", "igdn2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "deconv3", "(", "self", ".", "igdn3", "(", "x", ")", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.LowerBound.forward": [[12, 17], ["ctx.save_for_backward", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "bound", ")", ":", "\n", "        ", "b", "=", "torch", ".", "ones_like", "(", "inputs", ")", "*", "bound", "\n", "ctx", ".", "save_for_backward", "(", "inputs", ",", "b", ")", "\n", "return", "torch", ".", "max", "(", "inputs", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.LowerBound.backward": [[18, 26], ["pass_through.type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "inputs", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "pass_through_1", "=", "inputs", ">=", "b", "\n", "pass_through_2", "=", "grad_output", "<", "0", "\n", "\n", "pass_through", "=", "pass_through_1", "|", "pass_through_2", "\n", "return", "pass_through", ".", "type", "(", "grad_output", ".", "dtype", ")", "*", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.GDN.__init__": [[33, 46], ["torch.nn.Module.__init__", "GDN.GDN.build"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.GDN.build"], ["def", "__init__", "(", "self", ",", "\n", "ch", ",", "\n", "inverse", "=", "False", ",", "\n", "beta_min", "=", "1e-6", ",", "\n", "gamma_init", "=", "0.1", ",", "\n", "reparam_offset", "=", "2", "**", "-", "18", ")", ":", "\n", "        ", "super", "(", "GDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inverse", "=", "inverse", "\n", "self", ".", "beta_min", "=", "beta_min", "\n", "self", ".", "gamma_init", "=", "gamma_init", "\n", "self", ".", "reparam_offset", "=", "reparam_offset", "\n", "\n", "self", ".", "build", "(", "ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.GDN.build": [[47, 64], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.nn.Parameter", "torch.nn.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "ch", ")", ":", "\n", "        ", "self", ".", "pedestal", "=", "self", ".", "reparam_offset", "**", "2", "\n", "self", ".", "beta_bound", "=", "(", "(", "self", ".", "beta_min", "+", "self", ".", "reparam_offset", "**", "2", ")", "**", "0.5", ")", "\n", "self", ".", "gamma_bound", "=", "self", ".", "reparam_offset", "\n", "\n", "# Create beta param", "\n", "beta", "=", "torch", ".", "sqrt", "(", "torch", ".", "ones", "(", "ch", ")", "+", "self", ".", "pedestal", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "beta", ")", "\n", "\n", "# Create gamma param", "\n", "eye", "=", "torch", ".", "eye", "(", "ch", ")", "\n", "g", "=", "self", ".", "gamma_init", "*", "eye", "\n", "g", "=", "g", "+", "self", ".", "pedestal", "\n", "gamma", "=", "torch", ".", "sqrt", "(", "g", ")", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "gamma", ")", "\n", "self", ".", "pedestal", "=", "self", ".", "pedestal", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.GDN.forward": [[65, 96], ["inputs.view.view.size", "LowerBound.apply", "LowerBound.apply", "gamma.view.view.view", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "inputs.view.view.dim", "inputs.view.view.size", "inputs.view.view.view", "outputs.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "unfold", "=", "False", "\n", "if", "inputs", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "unfold", "=", "True", "\n", "bs", ",", "ch", ",", "d", ",", "w", ",", "h", "=", "inputs", ".", "size", "(", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "bs", ",", "ch", ",", "d", "*", "w", ",", "h", ")", "\n", "\n", "", "_", ",", "ch", ",", "_", ",", "_", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "# Beta bound and reparam", "\n", "beta", "=", "LowerBound", ".", "apply", "(", "self", ".", "beta", ",", "self", ".", "beta_bound", ")", "\n", "beta", "=", "beta", "**", "2", "-", "self", ".", "pedestal", "\n", "\n", "# Gamma bound and reparam", "\n", "gamma", "=", "LowerBound", ".", "apply", "(", "self", ".", "gamma", ",", "self", ".", "gamma_bound", ")", "\n", "gamma", "=", "gamma", "**", "2", "-", "self", ".", "pedestal", "\n", "gamma", "=", "gamma", ".", "view", "(", "ch", ",", "ch", ",", "1", ",", "1", ")", "\n", "\n", "# Norm pool calc", "\n", "norm_", "=", "nn", ".", "functional", ".", "conv2d", "(", "inputs", "**", "2", ",", "gamma", ",", "beta", ")", "\n", "norm_", "=", "torch", ".", "sqrt", "(", "norm_", ")", "\n", "\n", "# Apply norm", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "outputs", "=", "inputs", "*", "norm_", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", "/", "norm_", "\n", "\n", "", "if", "unfold", ":", "\n", "            ", "outputs", "=", "outputs", ".", "view", "(", "bs", ",", "ch", ",", "d", ",", "w", ",", "h", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.count_GDN": [[97, 107], ["torch.DoubleTensor", "torch.DoubleTensor", "y.nelement", "m.gamma.size", "int"], "function", ["None"], ["", "", "def", "count_GDN", "(", "m", ",", "x", ":", "(", "torch", ".", "Tensor", ",", ")", ",", "y", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "'''\n    counter for thop\n    '''", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "# N x Cout x H x W x  (Cin x Kw x Kh + bias)", "\n", "total_ops", "=", "y", ".", "nelement", "(", ")", "*", "(", "m", ".", "gamma", ".", "size", "(", "0", ")", "+", "1", ")", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.GDN.gdn_flops_counter_hook": [[108, 137], ["list", "gdn_module.gamma.size", "gdn_module.gamma.size", "int", "int", "input.numel", "gdn_module.gamma.numel", "input.numel", "int", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "gdn_flops_counter_hook", "(", "gdn_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "# LowerBound fw: input, gamma, norm: input*2", "\n", "misc_flops", "=", "input", ".", "numel", "(", ")", "+", "gdn_module", ".", "gamma", ".", "numel", "(", ")", "+", "input", ".", "numel", "(", ")", "*", "2", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "[", "1", ",", "1", "]", "\n", "in_channels", "=", "gdn_module", ".", "gamma", ".", "size", "(", "0", ")", "\n", "out_channels", "=", "gdn_module", ".", "gamma", ".", "size", "(", "1", ")", "\n", "groups", "=", "1", "\n", "\n", "filters_per_channel", "=", "out_channels", "\n", "conv_per_position_flops", "=", "int", "(", "np", ".", "prod", "(", "kernel_dims", ")", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "int", "(", "np", ".", "prod", "(", "output_dims", ")", ")", "\n", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "+", "misc_flops", "\n", "\n", "gdn_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.Bitparm.__init__": [[13, 22], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "final", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bitparm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "final", "=", "final", "\n", "self", ".", "h", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "if", "not", "final", ":", "\n", "            ", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "a", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.Bitparm.forward": [[23, 29], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softplus", "torch.softplus", "torch.softplus", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "final", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", "\n", "return", "x", "+", "torch", ".", "tanh", "(", "x", ")", "*", "torch", ".", "tanh", "(", "self", ".", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitEstimator.__init__": [[34, 40], ["torch.Module.__init__", "bitEstimator.Bitparm", "bitEstimator.Bitparm", "bitEstimator.Bitparm", "bitEstimator.Bitparm"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BitEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f1", "=", "Bitparm", "(", "channel", ")", "\n", "self", ".", "f2", "=", "Bitparm", "(", "channel", ")", "\n", "self", ".", "f3", "=", "Bitparm", "(", "channel", ")", "\n", "self", ".", "f4", "=", "Bitparm", "(", "channel", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitEstimator.forward": [[41, 46], ["bitEstimator.BitEstimator.f1", "bitEstimator.BitEstimator.f2", "bitEstimator.BitEstimator.f3", "bitEstimator.BitEstimator.f4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "f1", "(", "x", ")", "\n", "x", "=", "self", ".", "f2", "(", "x", ")", "\n", "x", "=", "self", ".", "f3", "(", "x", ")", "\n", "return", "self", ".", "f4", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitparmSingle.__init__": [[51, 60], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "final", "=", "False", ")", ":", "\n", "        ", "super", "(", "BitparmSingle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "final", "=", "final", "\n", "self", ".", "h", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "if", "not", "final", ":", "\n", "            ", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "channel", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "0", ",", "0.01", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "a", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitparmSingle.forward": [[61, 67], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softplus", "torch.softplus", "torch.softplus", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "final", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", "\n", "return", "x", "+", "torch", ".", "tanh", "(", "x", ")", "*", "torch", ".", "tanh", "(", "self", ".", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitEstimatorSingle.__init__": [[73, 79], ["torch.Module.__init__", "bitEstimator.BitparmSingle", "bitEstimator.BitparmSingle", "bitEstimator.BitparmSingle", "bitEstimator.BitparmSingle"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BitEstimatorSingle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f1", "=", "BitparmSingle", "(", "channel", ")", "\n", "self", ".", "f2", "=", "BitparmSingle", "(", "channel", ")", "\n", "self", ".", "f3", "=", "BitparmSingle", "(", "channel", ")", "\n", "self", ".", "f4", "=", "BitparmSingle", "(", "channel", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.BitEstimatorSingle.forward": [[80, 85], ["bitEstimator.BitEstimatorSingle.f1", "bitEstimator.BitEstimatorSingle.f2", "bitEstimator.BitEstimatorSingle.f3", "bitEstimator.BitEstimatorSingle.f4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "f1", "(", "x", ")", "\n", "x", "=", "self", ".", "f2", "(", "x", ")", "\n", "x", "=", "self", ".", "f3", "(", "x", ")", "\n", "return", "self", ".", "f4", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.MultiHeadBitEstimator.__init__": [[91, 97], ["torch.Module.__init__", "bitEstimator.MultiHeadBitparm", "bitEstimator.MultiHeadBitparm", "bitEstimator.MultiHeadBitparm", "bitEstimator.MultiHeadBitparm"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ":", "int", ",", "nb_head", ":", "int", ",", "shape", "=", "(", "'g'", ",", "'bs'", ",", "'ch'", ",", "'h'", ",", "'w'", ")", ",", "bitparm_init_mode", "=", "'normal'", ",", "bitparm_init_range", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MultiHeadBitEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f1", "=", "MultiHeadBitparm", "(", "channel", ",", "nb_head", "=", "nb_head", ",", "shape", "=", "shape", ",", "bitparm_init_mode", "=", "bitparm_init_mode", ",", "bitparm_init_range", "=", "bitparm_init_range", ")", "\n", "self", ".", "f2", "=", "MultiHeadBitparm", "(", "channel", ",", "nb_head", "=", "nb_head", ",", "shape", "=", "shape", ",", "bitparm_init_mode", "=", "bitparm_init_mode", ",", "bitparm_init_range", "=", "bitparm_init_range", ")", "\n", "self", ".", "f3", "=", "MultiHeadBitparm", "(", "channel", ",", "nb_head", "=", "nb_head", ",", "shape", "=", "shape", ",", "bitparm_init_mode", "=", "bitparm_init_mode", ",", "bitparm_init_range", "=", "bitparm_init_range", ")", "\n", "self", ".", "f4", "=", "MultiHeadBitparm", "(", "channel", ",", "final", "=", "True", ",", "nb_head", "=", "nb_head", ",", "shape", "=", "shape", ",", "bitparm_init_mode", "=", "bitparm_init_mode", ",", "bitparm_init_range", "=", "bitparm_init_range", ")", "\n", "#        if bs_first:", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.MultiHeadBitEstimator.forward": [[102, 108], ["bitEstimator.MultiHeadBitEstimator.f1", "bitEstimator.MultiHeadBitEstimator.f2", "bitEstimator.MultiHeadBitEstimator.f3", "bitEstimator.MultiHeadBitEstimator.f4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#x = self.prep_input_fun(x)", "\n", "        ", "x", "=", "self", ".", "f1", "(", "x", ")", "\n", "x", "=", "self", ".", "f2", "(", "x", ")", "\n", "x", "=", "self", ".", "f3", "(", "x", ")", "\n", "return", "self", ".", "f4", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.MultiHeadBitparm.__init__": [[113, 135], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "init_fun", "init_fun", "torch.Parameter", "torch.Parameter", "torch.Parameter", "NotImplementedError", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "init_fun", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty().view", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "nb_head", ",", "final", "=", "False", ",", "shape", "=", "(", "'g'", ",", "'bs'", ",", "'ch'", ",", "'h'", ",", "'w'", ")", ",", "bitparm_init_mode", "=", "'normal'", ",", "bitparm_init_range", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "MultiHeadBitparm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "final", "=", "final", "\n", "if", "shape", "==", "(", "'g'", ",", "'bs'", ",", "'ch'", ",", "'h'", ",", "'w'", ")", ":", "# used in Balle2017ManyPriors_ImageCompressor", "\n", "            ", "params_shape", "=", "(", "nb_head", ",", "1", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "elif", "shape", "==", "(", "'bs'", ",", "'ch'", ",", "'g'", ",", "'h'", ",", "'w'", ")", ":", "\n", "            ", "params_shape", "=", "(", "1", ",", "channel", ",", "nb_head", ",", "1", ",", "1", ")", "\n", "#shape = (nb_head, 1, channel, 1, 1) if bs_first else (1, nb_head, channel, 1, 1)", "\n", "", "if", "bitparm_init_mode", "==", "'normal'", ":", "\n", "            ", "init_fun", "=", "torch", ".", "nn", ".", "init", ".", "normal_", "\n", "init_params", "=", "0", ",", "bitparm_init_range", "\n", "", "elif", "bitparm_init_mode", "==", "'xavier_uniform'", ":", "\n", "            ", "init_fun", "=", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "\n", "init_params", "=", "[", "bitparm_init_range", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "bitparm_init_mode", ")", "\n", "", "self", ".", "h", "=", "nn", ".", "Parameter", "(", "init_fun", "(", "torch", ".", "empty", "(", "nb_head", ",", "channel", ")", ".", "view", "(", "params_shape", ")", ",", "*", "init_params", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "init_fun", "(", "torch", ".", "empty", "(", "nb_head", ",", "channel", ")", ".", "view", "(", "params_shape", ")", ",", "*", "init_params", ")", ")", "\n", "if", "not", "final", ":", "\n", "            ", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "init_fun", "(", "torch", ".", "empty", "(", "nb_head", ",", "channel", ")", ".", "view", "(", "params_shape", ")", ",", "*", "init_params", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "a", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.bitEstimator.MultiHeadBitparm.forward": [[136, 142], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softplus", "torch.softplus", "torch.softplus", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "final", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "F", ".", "softplus", "(", "self", ".", "h", ")", "+", "self", ".", "b", "\n", "return", "x", "+", "torch", ".", "tanh", "(", "x", ")", "*", "torch", ".", "tanh", "(", "self", ".", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.__init__": [[45, 81], ["torch.nn.Module.__init__", "compression.models.bitEstimator.BitEstimator", "isinstance", "int", "torch.empty", "common.extlibs.pt_ms_ssim.SSIM", "common.extlibs.pt_ms_ssim.MS_SSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ",", "min_feat", "=", "-", "127", ",", "max_feat", "=", "128", ",", "min_feat_gaussian", "=", "-", "127", ",", "max_feat_gaussian", "=", "128", ",", "q_intv", "=", "1", ",", "precision", "=", "16", ",", "entropy_coding", "=", "False", ",", "conditional_distribution", "=", "'Laplace'", ",", "passthrough_ae", "=", "False", ",", "**", "kwargs", ")", ":", "#, out_channel_M=320, lossf='mse'):", "\n", "        ", "super", "(", "AbstractImageCompressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# DBG: targets should be 0.5?", "\n", "self", ".", "entropy_coding", "=", "entropy_coding", "and", "'torchac'", "in", "sys", ".", "modules", "\n", "self", ".", "out_channel_N", "=", "out_channel_N", "\n", "self", ".", "out_channel_M", "=", "out_channel_M", "\n", "self", ".", "bitEstimator_z", "=", "BitEstimator", "(", "out_channel_N", ")", "\n", "#self.out_channel_N = out_channel_N", "\n", "#self.out_channel_M = out_channel_M", "\n", "self", ".", "lossf", "=", "lossf", "\n", "if", "isinstance", "(", "lossf", ",", "str", ")", ":", "\n", "            ", "if", "lossf", "==", "'mse'", ":", "\n", "                ", "self", ".", "lossfun", "=", "F", ".", "mse_loss", "\n", "", "elif", "lossf", "==", "'ssim'", ":", "\n", "                ", "self", ".", "lossclass", "=", "pt_ms_ssim", ".", "SSIM", "(", ")", "\n", "self", ".", "lossfun", "=", "self", ".", "lossclass", ".", "lossfun", "\n", "", "elif", "lossf", "==", "'msssim'", ":", "\n", "                ", "self", ".", "lossclass", "=", "pt_ms_ssim", ".", "MS_SSIM", "(", ")", "\n", "self", ".", "lossfun", "=", "self", ".", "lossclass", ".", "lossfun", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "lossf", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lossfun", "=", "lossf", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "min_feat", ",", "self", ".", "max_feat", ",", "self", ".", "q_intv", ",", "self", ".", "precision", "=", "min_feat", ",", "max_feat", ",", "q_intv", ",", "precision", "\n", "self", ".", "min_feat_gaussian", ",", "self", ".", "max_feat_gaussian", "=", "min_feat_gaussian", ",", "max_feat_gaussian", "\n", "ntargets", "=", "int", "(", "(", "-", "self", ".", "min_feat", "+", "self", ".", "max_feat", ")", "/", "self", ".", "q_intv", "+", "1", ")", "\n", "#self.fixed_entropy_table = torch.nn.Parameter(torch.nn.init.zeros_(torch.empty(out_channel_M, ntargets)))", "\n", "self", ".", "z_entropy_table", "=", "torch", ".", "empty", "(", "out_channel_M", ",", "ntargets", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "if", "conditional_distribution", "==", "'Laplace'", ":", "\n", "            ", "self", ".", "conditional_distribution", "=", "torch", ".", "distributions", ".", "laplace", ".", "Laplace", "\n", "", "elif", "conditional_distribution", "==", "'Gaussian'", "or", "conditional_distribution", "==", "'Normal'", ":", "\n", "            ", "self", ".", "conditional_distribution", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "\n", "", "self", ".", "num_distributions", "=", "1", "\n", "self", ".", "frozen_autoencoder", "=", "False", "\n", "self", ".", "passthrough_ae", "=", "passthrough_ae", "\n", "#if passthrough_ae:", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.freeze_autoencoder": [[89, 97], ["abstract_model.AbstractImageCompressor.Encoder.parameters", "abstract_model.AbstractImageCompressor.Decoder.parameters"], "methods", ["None"], ["", "def", "freeze_autoencoder", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "Encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "Decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "bak_lossfun", "=", "self", ".", "lossfun", "\n", "self", ".", "lossfun", "=", "pt_ops", ".", "oneloss", "\n", "self", ".", "frozen_autoencoder", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.unfreeze_autoencoder": [[98, 106], ["abstract_model.AbstractImageCompressor.Encoder.parameters", "abstract_model.AbstractImageCompressor.Decoder.parameters"], "methods", ["None"], ["", "def", "unfreeze_autoencoder", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "Encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "self", ".", "Decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "lossfun", "=", "self", ".", "bak_lossfun", "\n", "del", "(", "self", ".", "bak_lossfun", ")", "\n", "self", ".", "frozen_autoencoder", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.forward": [[108, 173], ["torch.zeros", "torch.zeros", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "abstract_model.AbstractImageCompressor.Encoder", "abstract_model.AbstractImageCompressor.priorEncoder", "abstract_model.AbstractImageCompressor.priorDecoder", "abstract_model.AbstractImageCompressor.Decoder", "abstract_model.AbstractImageCompressor.clamp", "abstract_model.AbstractImageCompressor.lossfun", "abstract_model.AbstractImageCompressor.forward.feature_probs_based_sigma"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.lossfun"], ["", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "quant_noise_feature", "=", "torch", ".", "zeros", "(", "input_image", ".", "size", "(", "0", ")", ",", "self", ".", "out_channel_M", ",", "input_image", ".", "size", "(", "2", ")", "//", "16", ",", "input_image", ".", "size", "(", "3", ")", "//", "16", ",", "device", "=", "self", ".", "device", ")", "\n", "quant_noise_z", "=", "torch", ".", "zeros", "(", "input_image", ".", "size", "(", "0", ")", ",", "self", ".", "out_channel_N", ",", "input_image", ".", "size", "(", "2", ")", "//", "64", ",", "input_image", ".", "size", "(", "3", ")", "//", "64", ",", "device", "=", "self", ".", "device", ")", "\n", "quant_noise_feature", "=", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros_like", "(", "quant_noise_feature", ")", ",", "-", "0.5", ",", "0.5", ")", "\n", "quant_noise_z", "=", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros_like", "(", "quant_noise_z", ")", ",", "-", "0.5", ",", "0.5", ")", "\n", "feature", "=", "self", ".", "Encoder", "(", "input_image", ")", "\n", "batch_size", "=", "feature", ".", "size", "(", ")", "[", "0", "]", "\n", "z", "=", "self", ".", "priorEncoder", "(", "feature", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "compressed_z", "=", "z", "+", "quant_noise_z", "\n", "", "else", ":", "\n", "            ", "compressed_z", "=", "torch", ".", "round", "(", "z", ")", "\n", "", "recon_sigma", "=", "self", ".", "priorDecoder", "(", "compressed_z", ")", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "quant_noise_feature", "=", "torch", ".", "zeros", "(", "input_image", ".", "size", "(", "0", ")", ",", "self", ".", "out_channel_M", ",", "input_image", ".", "size", "(", "2", ")", "//", "16", ",", "input_image", ".", "size", "(", "3", ")", "//", "16", ",", "device", "=", "self", ".", "device", ")", "\n", "quant_noise_feature", "=", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros_like", "(", "quant_noise_feature", ")", ",", "-", "0.5", ",", "0.5", ")", "\n", "compressed_feature_entropy", "=", "feature", "+", "quant_noise_feature", "\n", "if", "self", ".", "passthrough_ae", ":", "# ae: round, entropy: noise", "\n", "\n", "                ", "compressed_feature_ae", "=", "pt_ops", ".", "RoundNoGradient", "(", ")", ".", "apply", "(", "feature", ")", "\n", "", "else", ":", "# ae: noise, entropy: noise", "\n", "                ", "compressed_feature_ae", "=", "compressed_feature_entropy", "\n", "", "", "else", ":", "\n", "# ae and entropy: round", "\n", "            ", "compressed_feature_entropy", "=", "torch", ".", "round", "(", "feature", ")", "\n", "compressed_feature_ae", "=", "compressed_feature_entropy", "\n", "\n", "", "recon_image", "=", "self", ".", "Decoder", "(", "compressed_feature_ae", ")", "\n", "clipped_recon_image", "=", "recon_image", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "\n", "visual_loss", "=", "self", ".", "lossfun", "(", "recon_image", ",", "input_image", ")", "\n", "\n", "def", "feature_probs_based_sigma", "(", "feature", ",", "sigma", ")", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros_like", "(", "sigma", ")", "\n", "sigma", "=", "sigma", ".", "clamp", "(", "1e-10", ",", "1e10", ")", "\n", "gaussian", "=", "self", ".", "conditional_distribution", "(", "mu", ",", "sigma", ")", "\n", "probs", "=", "gaussian", ".", "cdf", "(", "feature", "+", "0.5", ")", "-", "gaussian", ".", "cdf", "(", "feature", "-", "0.5", ")", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "1.0", "*", "torch", ".", "log", "(", "probs", "+", "1e-10", ")", "/", "math", ".", "log", "(", "2.0", ")", ",", "0", ",", "50", ")", ")", "\n", "return", "total_bits", ",", "probs", "\n", "\n", "", "def", "iclr18_estimate_bits_z", "(", "z", ")", ":", "\n", "#z = z[0, :, 2, 2].unsqueeze(0).unsqueeze(-1).unsqueeze(-1)", "\n", "            ", "prob", "=", "self", ".", "bitEstimator_z", "(", "z", "+", "0.5", ")", "-", "self", ".", "bitEstimator_z", "(", "z", "-", "0.5", ")", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "1.0", "*", "torch", ".", "log", "(", "prob", "+", "1e-10", ")", "/", "math", ".", "log", "(", "2.0", ")", ",", "0", ",", "50", ")", ")", "\n", "#breakpoint()", "\n", "return", "total_bits", ",", "prob", "\n", "", "total_bits_feature", ",", "_", "=", "feature_probs_based_sigma", "(", "compressed_feature_entropy", ",", "recon_sigma", ")", "\n", "\n", "im_shape", "=", "input_image", ".", "size", "(", ")", "\n", "bpp_feature", "=", "total_bits_feature", "/", "(", "batch_size", "*", "im_shape", "[", "2", "]", "*", "im_shape", "[", "3", "]", ")", "\n", "if", "self", ".", "training", "or", "not", "self", ".", "entropy_coding", ":", "\n", "            ", "total_bits_z", ",", "_", "=", "iclr18_estimate_bits_z", "(", "compressed_z", ")", "\n", "", "else", ":", "# eval", "\n", "            ", "print", "(", "'estimate: {}'", ".", "format", "(", "iclr18_estimate_bits_z", "(", "compressed_z", ")", "[", "0", "]", ")", ")", "# dbg", "\n", "bitstream_z", ",", "numbytes_z", "=", "self", ".", "entropy_encode", "(", "compressed_z", ")", "\n", "total_bits_z", "=", "numbytes_z", "*", "8", "\n", "print", "(", "'actual bits z: {}'", ".", "format", "(", "total_bits_z", ")", ")", "\n", "", "bpp_z", "=", "total_bits_z", "/", "(", "batch_size", "*", "im_shape", "[", "2", "]", "*", "im_shape", "[", "3", "]", ")", "\n", "bpp", "=", "bpp_feature", "+", "bpp_z", "\n", "#tbl = self.build_table_z(z, self.bitEstimator_z)", "\n", "#breakpoint()", "\n", "return", "clipped_recon_image", ",", "visual_loss", ",", "bpp_feature", ",", "bpp_z", ",", "bpp", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table": [[174, 201], ["int", "torch.linspace", "torch.linspace.expand().unsqueeze().unsqueeze", "abstract_model.AbstractImageCompressor.bitEstimator_z", "_renorm_cast_cdf_().squeeze().squeeze", "torch.zeros.squeeze", "int", "torch.linspace", "numpy.exp", "numpy.exp", "torch.zeros", "torch.zeros().short", "torch.zeros", "enumerate", "torch.linspace.to", "numpy.linspace", "numpy.linspace", "abstract_model.AbstractImageCompressor.conditional_distribution().cdf", "_renorm_cast_cdf_().squeeze().squeeze", "torch.linspace.expand().unsqueeze", "_renorm_cast_cdf_().squeeze", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "torch.zeros", "abstract_model.AbstractImageCompressor.conditional_distribution", "_renorm_cast_cdf_().squeeze", "torch.linspace.expand", "abstract_model._renorm_cast_cdf_", "torch.zeros.squeeze().unsqueeze", "abstract_model._renorm_cast_cdf_", "abstract_model.AbstractImageCompressor.conditional_CDF_float[].unsqueeze", "torch.zeros.squeeze"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_"], ["", "def", "update_entropy_table", "(", "self", ")", ":", "\n", "# side string learned entropy coding", "\n", "# # https://marknelson.us/posts/2014/10/19/data-compression-with-arithmetic-coding.html", "\n", "        ", "ntargets", "=", "int", "(", "(", "-", "self", ".", "min_feat", "+", "self", ".", "max_feat", ")", "/", "self", ".", "q_intv", "+", "2", ")", "# +2 = 19000->6000 DBG", "\n", "targets", "=", "torch", ".", "linspace", "(", "self", ".", "min_feat", "-", ".5", ",", "self", ".", "max_feat", "+", ".5", ",", "ntargets", ")", "\n", "targets", "=", "targets", ".", "expand", "(", "self", ".", "out_channel_N", ",", "ntargets", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "# 1, nch, L, 1", "\n", "probs", "=", "self", ".", "bitEstimator_z", "(", "targets", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "self", ".", "z_entropy_table", "=", "_renorm_cast_cdf_", "(", "#DBG", "\n", "(", "probs", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "precision", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "# 1,1,ch,L -> ch,L", "\n", "self", ".", "z_entropy_table_float", "=", "self", ".", "entropy_table_float", "=", "probs", ".", "squeeze", "(", ")", "\n", "\n", "# main features: gaussian conditional entropy", "\n", "ntargets", "=", "int", "(", "(", "-", "self", ".", "min_feat_gaussian", "+", "self", ".", "max_feat_gaussian", ")", "/", "self", ".", "q_intv", "+", "2", ")", "# +2 = 19000->6000 DBG", "\n", "targets", "=", "torch", ".", "linspace", "(", "self", ".", "min_feat_gaussian", "-", ".5", ",", "self", ".", "max_feat_gaussian", "+", ".5", ",", "ntargets", ")", "\n", "# #breakpoint()", "\n", "self", ".", "main_targets", "=", "targets", "\n", "\n", "self", ".", "scale_table", "=", "np", ".", "exp", "(", "np", ".", "linspace", "(", "np", ".", "log", "(", "0.11", ")", ",", "np", ".", "log", "(", "256", ")", ",", "NUMSCALES", ")", ")", "#256", "\n", "self", ".", "scale_table", "=", "np", ".", "exp", "(", "np", ".", "linspace", "(", "np", ".", "log", "(", "0.0001", ")", ",", "np", ".", "log", "(", "128", ")", ",", "NUMSCALES", ")", ")", "#256", "\n", "self", ".", "conditional_CDF_float", "=", "torch", ".", "zeros", "(", "NUMSCALES", ",", "ntargets", ")", "\n", "self", ".", "conditional_CDF", "=", "torch", ".", "zeros", "(", "NUMSCALES", ",", "ntargets", ")", ".", "short", "(", ")", "\n", "\n", "probs", "=", "torch", ".", "zeros", "(", "NUMSCALES", ",", "ntargets", ")", "\n", "for", "scalenum", ",", "ascale", "in", "enumerate", "(", "self", ".", "scale_table", ")", ":", "\n", "            ", "self", ".", "conditional_CDF_float", "[", "scalenum", "]", "=", "self", ".", "conditional_distribution", "(", "0", ",", "ascale", ")", ".", "cdf", "(", "self", ".", "main_targets", ")", "\n", "self", ".", "conditional_CDF", "[", "scalenum", "]", "=", "_renorm_cast_cdf_", "(", "self", ".", "conditional_CDF_float", "[", "scalenum", "]", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "precision", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "# self.conditional_CDF = _renorm_cast_cdf_(#DBG", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.eval": [[205, 209], ["abstract_model.AbstractImageCompressor.train", "abstract_model.AbstractImageCompressor.update_entropy_table"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.compression.train.train", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "entropy_coding", ":", "\n", "            ", "self", ".", "update_entropy_table", "(", ")", "\n", "", "return", "self", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.entropy_encode": [[210, 241], ["abstract_model.AbstractImageCompressor.z_entropy_table.size", "range", "logger.info", "abstract_model.AbstractImageCompressor.z_entropy_table.expand().contiguous", "z[].reshape().transpose().contiguous", "torchac.encode_cdf", "bitstream.append", "len", "torchac.decode_cdf", "torch.equal", "logger.info", "logger.info", "breakpoint", "abstract_model.AbstractImageCompressor.z_entropy_table.expand", "z[].reshape().transpose", "torchac.decode_cdf.view().transpose().reshape", "torchac.decode_cdf.float", "logger.info().format", "breakpoint", "z.max", "z.min", "z.min", "z.max", "z[].reshape", "torchac.decode_cdf.view().transpose", "logger.info", "torchac.decode_cdf.view"], "methods", ["None"], ["", "def", "entropy_encode", "(", "self", ",", "z", ")", ":", "\n", "        ", "'''entropy encode a whole sidestring'''", "\n", "#return self.entropy_encode_per_channel(z)#DBG", "\n", "bitstream", "=", "[", "]", "\n", "nbytes", "=", "0", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "z", ".", "shape", "\n", "nL", "=", "self", ".", "z_entropy_table", ".", "size", "(", "-", "1", ")", "\n", "for", "bn", "in", "range", "(", "bs", ")", ":", "\n", "            ", "cdf_tbl", "=", "self", ".", "z_entropy_table", ".", "expand", "(", "1", ",", "h", "*", "w", ",", "nch", ",", "nL", ")", ".", "contiguous", "(", ")", "\n", "#breakpoint()", "\n", "z_int", "=", "z", "[", "bn", "]", ".", "reshape", "(", "1", ",", "nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "z_int", "=", "(", "(", "z_int", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "encoded_str", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "z_int", ")", "\n", "bitstream", ".", "append", "(", "encoded_str", ")", "\n", "nbytes", "+=", "len", "(", "encoded_str", ")", "\n", "decoded_str", "=", "torchac", ".", "decode_cdf", "(", "cdf_tbl", ",", "encoded_str", ")", "\n", "#print(encoded_str)", "\n", "#print(z_int)", "\n", "#print(decoded_str)", "\n", "decoded_str", "=", "(", "decoded_str", ".", "view", "(", "1", ",", "h", "*", "w", ",", "nch", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "1", ",", "nch", ",", "h", ",", "w", ")", "*", "self", ".", "q_intv", "+", "self", ".", "min_feat", ")", "\n", "if", "not", "torch", ".", "equal", "(", "z", ",", "decoded_str", ".", "float", "(", ")", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'entropy_encode error: z and decoded_str do not match.'", ")", "\n", "logger", ".", "info", "(", "cdf_tbl", ")", "\n", "breakpoint", "(", ")", "\n", "", "elif", "z", ".", "max", "(", ")", ">", "self", ".", "max_feat", "or", "z", ".", "min", "(", ")", "<", "self", ".", "min_feat", ":", "\n", "                ", "logger", ".", "info", "(", "'entropy_encode error: z out of range: [] instead of []'", ")", ".", "format", "(", "z", ".", "min", "(", ")", ",", "z", ".", "max", "(", ")", ",", "self", ".", "min_feat", ",", "self", ".", "max_feat", ")", "\n", "breakpoint", "(", ")", "\n", "#assert torch.equal(z_int, decoded_str), (z_int, decoded_str)", "\n", "", "", "logger", ".", "info", "(", "nbytes", "*", "8", ")", "\n", "#breakpoint()", "\n", "return", "bitstream", ",", "nbytes", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.encode": [[242, 310], ["abstract_model.AbstractImageCompressor.Encoder", "torch.round", "torch.round", "abstract_model.AbstractImageCompressor.z_entropy_table.size", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand().unsqueeze", "abstract_model.AbstractImageCompressor.priorDecoder", "torch.zeros_like().flatten", "abstract_model.AbstractImageCompressor.clamp().flatten", "torchac.encode_cdf", "torchac.encode_cdf", "abstract_model.AbstractImageCompressor.priorEncoder", "abstract_model.AbstractImageCompressor.conditional_distribution", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze().unsqueeze", "abstract_model._renorm_cast_cdf_", "_renorm_cast_cdf_.cpu", "torch.round.cpu", "abstract_model.AbstractImageCompressor.cpu", "z_int.cpu", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand", "torch.zeros_like", "abstract_model.AbstractImageCompressor.clamp", "torch.zeros_like().flatten.flatten", "abstract_model.AbstractImageCompressor.clamp().flatten.flatten", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze", "abstract_model.AbstractImageCompressor.cdf().transpose", "torch.round.flatten", "abstract_model.AbstractImageCompressor.cdf", "torch.round.view().transpose", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze().expand", "abstract_model.AbstractImageCompressor.clamp().flatten.size", "torch.round.view", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu"], ["", "def", "encode", "(", "self", ",", "input_image", ",", "entropy_coding", "=", "True", ")", ":", "\n", "        ", "'''\n        egtest:\n            python train.py --test_flags testKodakTiming --arch Balle2018PT --pretrain mse_4096_swopt\n            TODO save to file (like manynets implementation)\n\n        '''", "\n", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input_image", ".", "shape", "\n", "feature", "=", "self", ".", "Encoder", "(", "input_image", ")", "\n", "feature_renorm", "=", "torch", ".", "round", "(", "feature", ")", "\n", "feature_renorm", "=", "(", "(", "feature_renorm", ".", "flatten", "(", ")", "-", "self", ".", "min_feat_gaussian", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", "\n", "z", "=", "torch", ".", "round", "(", "self", ".", "priorEncoder", "(", "feature", ")", ")", "\n", "bs", ",", "z_nch", ",", "z_h", ",", "z_w", "=", "z", ".", "shape", "\n", "z_nL", "=", "self", ".", "z_entropy_table", ".", "size", "(", "-", "1", ")", "\n", "cdf_z", "=", "self", ".", "z_entropy_table", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "z_h", "*", "z_w", ",", "z_nch", ",", "z_nL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "z_int", "=", "(", "(", "z", ".", "view", "(", "1", ",", "z_nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "# if entropy_coding:", "\n", "#     encoded_zstr = torchac.encode_cdf(cdf_tbl, z_int)  # comment to rm entropy coding", "\n", "\n", "recon_sigma", "=", "self", ".", "priorDecoder", "(", "z", ")", "\n", "\n", "mu", "=", "torch", ".", "zeros_like", "(", "recon_sigma", ")", ".", "flatten", "(", ")", "# loc", "\n", "sigma", "=", "recon_sigma", ".", "clamp", "(", "1e-10", ",", "1e10", ")", ".", "flatten", "(", ")", "# scale", "\n", "if", "GAUSSIAN_DISTRIBUTION_USES_LUT", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "gaussian", "=", "self", ".", "conditional_distribution", "(", "mu", ".", "flatten", "(", ")", ",", "sigma", ".", "flatten", "(", ")", ")", "\n", "cdf_main", "=", "gaussian", ".", "cdf", "(", "self", ".", "main_targets", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "sigma", ".", "size", "(", "0", ")", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cdf_main", "=", "_renorm_cast_cdf_", "(", "cdf_main", ",", "self", ".", "precision", ")", "\n", "#cdfmaintest = cdf_main.cpu()[:,:,0:100,:].contiguous()", "\n", "#feature_renormtest = feature_renorm[0:100].contiguous()", "\n", "#breakpoint()", "\n", "#astrtest = torchac.encode_cdf(cdfmaintest, feature_renormtest)", "\n", "", "if", "not", "entropy_coding", ":", "\n", "            ", "return", "feature_renorm", ",", "z_int", "\n", "", "encoded_mstr", "=", "torchac", ".", "encode_cdf", "(", "cdf_main", ".", "cpu", "(", ")", ",", "feature_renorm", ".", "cpu", "(", ")", ")", "\n", "\n", "#breakpoint()", "\n", "#probs_main = gaussian.cdf(feature + 0.5) - gaussian.cdf(feature - 0.5)", "\n", "#z2enc = z.view(z_nch,-1).transpose(0,1).unsqueeze(-1).contiguous().long()", "\n", "#z_indices_minus = (-self.min_feat+z2enc).unsqueeze(0)", "\n", "#z_indices_plus = (self.max_feat+z2enc).unsqueeze(0)", "\n", "#probs_z = torch.gather(cdf_tbl, 2, z_indices_plus) - torch.gather(cdf_tbl, 2, z_indices_minus)", "\n", "encoded_zstr", "=", "torchac", ".", "encode_cdf", "(", "cdf_z", ".", "cpu", "(", ")", ",", "z_int", ".", "cpu", "(", ")", ")", "\n", "\n", "''' TODO\n        Do I need to encode the CDF for every possible value L at each ch*h*w location ?\n        '''", "\n", "#breakpoint()", "\n", "#all_probs_main = gaussian.cdf(self.main_targets)", "\n", "#entropy_table_main = _renorm_cast_cdf_(all_probs_main.squeeze(-1).unsqueeze(0), self.precision).squeeze(0).squeeze(0)", "\n", "#breakpoint()", "\n", "#cdf_tbl_main = entropy_table_main.unsqueeze(0).expand(feat_h*feat_w, self.out_channel_M, self.main_targets.size(-2)).unsqueeze(0)", "\n", "#encoded_main_str = torchac.encode_cdf(cdf_tbl_main.cpu(), feature_renorm.cpu())", "\n", "# means = mu", "\n", "# log_scales = sigma", "\n", "# sym = feature_renorm", "\n", "# logit_probs_softmax = probs_main", "\n", "# targets = None", "\n", "\n", "\n", "# torchac.encode_logistic_mixture(targets, means, log_scales, logit_probs_softmax, sym)", "\n", "#breakpoint()", "\n", "### entropy-encode main string", "\n", "\n", "###", "\n", "\n", "return", "[", "encoded_mstr", ",", "encoded_zstr", ",", "in_h", ",", "in_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.decode": [[311, 342], ["isinstance", "torch.rand", "abstract_model.AbstractImageCompressor.priorDecoder", "abstract_model.AbstractImageCompressor.Decoder", "abstract_model.AbstractImageCompressor.z_entropy_table.size", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand().unsqueeze", "torchac.decode_cdf().to", "breakpoint", "z.view().transpose().view().float.view().transpose().view().float.view().transpose().view().float", "abstract_model.AbstractImageCompressor.priorDecoder", "torch.zeros_like().flatten", "abstract_model.AbstractImageCompressor.clamp().flatten", "abstract_model.AbstractImageCompressor.conditional_distribution", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze().unsqueeze", "abstract_model._renorm_cast_cdf_", "torchac.decode_cdf", "decoded_mstr.view.view.view", "bitstream.size", "torch.zeros_like().flatten.flatten", "abstract_model.AbstractImageCompressor.clamp().flatten.flatten", "_renorm_cast_cdf_.cpu", "bitstream.size", "bitstream.size", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand", "torchac.decode_cdf", "z.view().transpose().view().float.view().transpose().view().float.view().transpose().view", "torch.zeros_like", "abstract_model.AbstractImageCompressor.clamp", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze", "abstract_model.AbstractImageCompressor.cpu", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze", "z.view().transpose().view().float.view().transpose().view().float.view().transpose", "abstract_model.AbstractImageCompressor.cdf().transpose", "z.view().transpose().view().float.view().transpose().view().float.view", "abstract_model.AbstractImageCompressor.cdf", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze().expand", "abstract_model.AbstractImageCompressor.clamp().flatten.size", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu"], ["", "def", "decode", "(", "self", ",", "bitstream", ")", ":", "\n", "        ", "if", "isinstance", "(", "bitstream", ",", "torch", ".", "Tensor", ")", ":", "\n", "# for testing complexity", "\n", "            ", "HARDCODED_ZCH", "=", "192", "\n", "zshape", "=", "[", "bitstream", ".", "size", "(", "0", ")", ",", "HARDCODED_ZCH", ",", "bitstream", ".", "size", "(", "2", ")", "//", "4", ",", "bitstream", ".", "size", "(", "3", ")", "//", "4", "]", "\n", "z", "=", "torch", ".", "rand", "(", "zshape", ")", "\n", "z", "=", "self", ".", "priorDecoder", "(", "z", ")", "\n", "decoded_mstr", "=", "self", ".", "Decoder", "(", "bitstream", ")", "\n", "", "else", ":", "\n", "            ", "main_string", ",", "zstring", ",", "img_h", ",", "img_w", "=", "bitstream", "\n", "z_nL", "=", "self", ".", "z_entropy_table", ".", "size", "(", "-", "1", ")", "\n", "feat_h", "=", "img_h", "//", "16", "\n", "feat_w", "=", "img_w", "//", "16", "\n", "z_h", "=", "feat_h", "//", "16", "\n", "z_w", "=", "feat_w", "//", "16", "\n", "z_nch", "=", "self", ".", "out_channel_N", "\n", "cdf_z", "=", "self", ".", "z_entropy_table", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "z_h", "*", "z_w", ",", "z_nch", ",", "z_nL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "z", "=", "torchac", ".", "decode_cdf", "(", "cdf_z", ".", "cpu", "(", ")", ",", "zstring", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "z", "*", "self", ".", "q_intv", "+", "self", ".", "min_feat", "\n", "breakpoint", "(", ")", "\n", "z", "=", "z", ".", "view", "(", "1", ",", "-", "1", ",", "z_nch", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "1", ",", "z_nch", ",", "z_h", ",", "z_w", ")", ".", "float", "(", ")", "\n", "recon_sigma", "=", "self", ".", "priorDecoder", "(", "z", ")", "\n", "mu", "=", "torch", ".", "zeros_like", "(", "recon_sigma", ")", ".", "flatten", "(", ")", "\n", "sigma", "=", "recon_sigma", ".", "clamp", "(", "1e-10", ",", "1e10", ")", ".", "flatten", "(", ")", "\n", "gaussian", "=", "self", ".", "conditional_distribution", "(", "mu", ".", "flatten", "(", ")", ",", "sigma", ".", "flatten", "(", ")", ")", "\n", "cdf_main", "=", "gaussian", ".", "cdf", "(", "self", ".", "main_targets", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "sigma", ".", "size", "(", "0", ")", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cdf_main", "=", "_renorm_cast_cdf_", "(", "cdf_main", ",", "self", ".", "precision", ")", "\n", "decoded_mstr", "=", "torchac", ".", "decode_cdf", "(", "cdf_main", ".", "cpu", "(", ")", ",", "main_string", ")", "\n", "decoded_mstr", "=", "decoded_mstr", "*", "self", ".", "q_intv", "+", "self", ".", "min_feat", "\n", "decoded_mstr", "=", "decoded_mstr", ".", "view", "(", "1", ",", "3", ",", "feat_h", ",", "feat_w", ")", "\n", "", "return", "decoded_mstr", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.timing_analysis": [[343, 459], ["abstract_model.AbstractImageCompressor.update_entropy_table", "range", "logger.info", "logger.info", "statistics.mean", "torch.no_grad", "time.perf_counter", "abstract_model.AbstractImageCompressor.Encoder", "torch.round", "timedict[].append", "time.perf_counter", "torch.round", "timedict[].append", "time.perf_counter", "abstract_model.AbstractImageCompressor.z_entropy_table.size", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand().unsqueeze", "torchac.encode_cdf", "timedict[].append", "time.perf_counter", "torchac.decode_cdf", "timedict[].append", "time.perf_counter", "abstract_model.AbstractImageCompressor.priorDecoder", "timedict[].append", "time.perf_counter", "torch.zeros_like().flatten", "abstract_model.AbstractImageCompressor.clamp().flatten", "timedict[].append", "time.perf_counter", "torchac.encode_cdf", "timedict[].append", "time.perf_counter", "abstract_model.AbstractImageCompressor.Decoder", "timedict[].append", "time.perf_counter", "torchac.decode_cdf", "timedict[].append", "time.perf_counter", "abstract_model.AbstractImageCompressor.conditional_CDF.view", "exp_cdf.expand.expand.expand", "cdf_indices.view().expand.view().expand.view().expand", "torch.gather", "timedict[].append", "logger.info", "abstract_model.AbstractImageCompressor.conditional_CDF_float.view", "exp_cdf_flt.expand.expand.expand", "torch.gather", "torch.sum", "logger.info", "logger.info", "abstract_model.AbstractImageCompressor.clamp", "abstract_model.AbstractImageCompressor.conditional_distribution", "torch.sum", "logger.info", "logger.info", "abstract_model.AbstractImageCompressor.priorEncoder", "abstract_model.AbstractImageCompressor.contiguous", "z_int.contiguous", "abstract_model.AbstractImageCompressor.contiguous", "abstract_model.AbstractImageCompressor.conditional_distribution", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze().unsqueeze", "abstract_model._renorm_cast_cdf_", "torch.round.view().long", "torch.clamp", "torch.zeros_like().flatten.view().contiguous", "abstract_model.AbstractImageCompressor.cdf", "abstract_model.AbstractImageCompressor.cdf", "torch.clamp", "time.perf_counter", "time.perf_counter", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze().expand", "time.perf_counter", "time.perf_counter", "time.perf_counter", "torch.zeros_like", "abstract_model.AbstractImageCompressor.clamp", "torch.zeros_like().flatten.flatten", "abstract_model.AbstractImageCompressor.clamp.flatten", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter", "cdf_indices.view().expand.view().expand.view", "time.perf_counter", "abstract_model.AbstractImageCompressor.cdf().transpose().unsqueeze", "torch.round.view", "torch.gather", "torch.gather", "math.log", "torch.zeros_like().flatten.view", "math.log", "abstract_model.AbstractImageCompressor.z_entropy_table.unsqueeze", "torch.log", "torch.log", "abstract_model.AbstractImageCompressor.cdf().transpose", "torch.tensor().view().expand", "torch.round.flatten", "abstract_model.AbstractImageCompressor.cdf", "torch.tensor().view", "torch.round.view().transpose", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze().expand", "abstract_model.AbstractImageCompressor.clamp.size", "torch.tensor", "torch.round.view", "abstract_model.AbstractImageCompressor.main_targets.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.update_entropy_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_"], ["", "def", "timing_analysis", "(", "self", ",", "input_image", ",", "entropy_coding", "=", "False", ")", ":", "\n", "        ", "'''\n        egrun\n        python train.py --pretrain mse_4096_tfcodeexp_adam --test_flags timing --device -1 --arch Balle2018PTTFExp\n        '''", "\n", "self", ".", "update_entropy_table", "(", ")", "\n", "timedict", "=", "{", "'nnenc_main'", ":", "[", "]", ",", "'nnenc_hp'", ":", "[", "]", ",", "'nndec_hp'", ":", "[", "]", ",", "'nndec_main'", ":", "[", "]", ",", "'make_cdf_tbl'", ":", "[", "]", ",", "'make_cdf_tbl_lut'", ":", "[", "]", ",", "'torchac_enc_main'", ":", "[", "]", ",", "'torchac_enc_hp'", ":", "[", "]", ",", "'torchac_dec_hp'", ":", "[", "]", ",", "'torchac_dec_main'", ":", "[", "]", "}", "\n", "\n", "for", "rep", "in", "range", "(", "50", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input_image", ".", "shape", "\n", "feature", "=", "self", ".", "Encoder", "(", "input_image", ")", "\n", "feature_renorm", "=", "torch", ".", "round", "(", "feature", ")", "\n", "timedict", "[", "'nnenc_main'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "z", "=", "torch", ".", "round", "(", "self", ".", "priorEncoder", "(", "feature", ")", ")", "\n", "timedict", "[", "'nnenc_hp'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "\n", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "bs", ",", "z_nch", ",", "z_h", ",", "z_w", "=", "z", ".", "shape", "\n", "z_nL", "=", "self", ".", "z_entropy_table", ".", "size", "(", "-", "1", ")", "\n", "cdf_z", "=", "self", ".", "z_entropy_table", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "z_h", "*", "z_w", ",", "z_nch", ",", "z_nL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "z_int", "=", "(", "(", "z", ".", "view", "(", "1", ",", "z_nch", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "encoded_zstr", "=", "torchac", ".", "encode_cdf", "(", "cdf_z", ".", "contiguous", "(", ")", ",", "z_int", ".", "contiguous", "(", ")", ")", "# comment to rm entropy coding", "\n", "timedict", "[", "'torchac_enc_hp'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "decoded_zstr", "=", "torchac", ".", "decode_cdf", "(", "cdf_z", ".", "contiguous", "(", ")", ",", "encoded_zstr", ")", "\n", "timedict", "[", "'torchac_dec_hp'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "recon_sigma", "=", "self", ".", "priorDecoder", "(", "z", ")", "\n", "timedict", "[", "'nndec_hp'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "mu", "=", "torch", ".", "zeros_like", "(", "recon_sigma", ")", ".", "flatten", "(", ")", "# loc", "\n", "sigma", "=", "recon_sigma", ".", "clamp", "(", "1e-10", ",", "1e10", ")", ".", "flatten", "(", ")", "# scale", "\n", "\n", "if", "GAUSSIAN_DISTRIBUTION_USES_LUT", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                    ", "gaussian", "=", "self", ".", "conditional_distribution", "(", "mu", ".", "flatten", "(", ")", ",", "sigma", ".", "flatten", "(", ")", ")", "\n", "cdf_main", "=", "gaussian", ".", "cdf", "(", "self", ".", "main_targets", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "sigma", ".", "size", "(", "0", ")", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cdf_main", "=", "_renorm_cast_cdf_", "(", "cdf_main", ",", "self", ".", "precision", ")", "\n", "", "timedict", "[", "'make_cdf_tbl'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "#cdfmaintest = cdf_main.cpu()[:,:,0:100,:].contiguous()", "\n", "#feature_renormtest = feature_renorm[0:100].contiguous()", "\n", "#breakpoint()", "\n", "#astrtest = torchac.encode_cdf(cdfmaintest, feature_renormtest)", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "#if not entropy_coding:", "\n", "#    return feature_renorm, z_int", "\n", "feature_renorm_short", "=", "(", "(", "feature_renorm", ".", "flatten", "(", ")", "-", "self", ".", "min_feat_gaussian", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", "\n", "encoded_mstr", "=", "torchac", ".", "encode_cdf", "(", "cdf_main", ",", "feature_renorm_short", ")", "\n", "timedict", "[", "'torchac_enc_main'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "decoded_features", "=", "self", ".", "Decoder", "(", "feature_renorm", ")", "\n", "timedict", "[", "'nndec_main'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "decoded_mstr", "=", "torchac", ".", "decode_cdf", "(", "cdf_main", ",", "encoded_mstr", ")", "\n", "timedict", "[", "'torchac_dec_main'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "_", ",", "feat_nch", ",", "feat_h", ",", "feat_w", "=", "feature", ".", "shape", "\n", "cdf_indices", "=", "(", "recon_sigma", "-", "torch", ".", "tensor", "(", "self", ".", "scale_table", ")", ".", "view", "(", "NUMSCALES", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "NUMSCALES", ",", "feat_nch", ",", "feat_h", ",", "feat_w", ")", ")", ".", "abs", "(", ")", ".", "argmin", "(", "0", ")", "\n", "exp_cdf", "=", "self", ".", "conditional_CDF", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "z_nL", ")", "# 64,1,1,257)", "\n", "exp_cdf", "=", "exp_cdf", ".", "expand", "(", "-", "1", ",", "feat_nch", ",", "feat_h", "*", "feat_w", ",", "z_nL", ")", "\n", "cdf_indices", "=", "cdf_indices", ".", "view", "(", "1", ",", "feat_nch", ",", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "z_nL", ")", "\n", "cdf_tbl_main", "=", "torch", ".", "gather", "(", "exp_cdf", ",", "0", ",", "cdf_indices", ")", "\n", "timedict", "[", "'make_cdf_tbl_lut'", "]", ".", "append", "(", "time", ".", "perf_counter", "(", ")", "-", "tic", ")", "\n", "\n", "logger", ".", "info", "(", "timedict", ")", "\n", "\n", "# check accuracy w/ quantization", "\n", "\n", "exp_cdf_flt", "=", "self", ".", "conditional_CDF_float", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "z_nL", ")", "# 64,1,1,257)", "\n", "exp_cdf_flt", "=", "exp_cdf_flt", ".", "expand", "(", "-", "1", ",", "feat_nch", ",", "feat_h", "*", "feat_w", ",", "z_nL", ")", "\n", "cdf_tbl_main_flt", "=", "torch", ".", "gather", "(", "exp_cdf_flt", ",", "0", ",", "cdf_indices", ")", "\n", "feat_indices_lower", "=", "(", "feature_renorm", ".", "view", "(", "1", ",", "feat_nch", ",", "-", "1", ",", "1", ")", ")", ".", "long", "(", ")", "-", "self", ".", "min_feat", "\n", "feat_indices_upper", "=", "feat_indices_lower", "+", "1", "\n", "probs_flt", "=", "(", "torch", ".", "gather", "(", "cdf_tbl_main_flt", ",", "3", ",", "feat_indices_upper", ")", "-", "torch", ".", "gather", "(", "cdf_tbl_main_flt", ",", "3", ",", "feat_indices_lower", ")", ")", ".", "float", "(", ")", "\n", "#cdf_indices[:,:,:,0].reshape(1,256,-1)", "\n", "#exp_cdf[:,:,:,0]", "\n", "#probs_flt = self.conditional_CDF_float.view(-1, 1, 1, z_nL) # 64,1,1,257)", "\n", "#probs_flt = probs_flt.expand(-1, feat_nch, feat_h*feat_w, z_nL)", "\n", "#recon_sigma_quant = torch.gather(exp_cdf_flt[:,:,:,0], 0, cdf_indices[:,:,:,0].reshape(1,256,-1)).view(recon_sigma.shape)", "\n", "#g#aussian_quant = self.conditional_distribution(mu.view(recon_sigma_quant.shape).contiguous(), recon_sigma_quant.contiguous())", "\n", "#probs = gaussian_quant.cdf(feature + 0.5) - gaussian_quant.cdf(feature - 0.5)", "\n", "#breakpoint()", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "1.0", "*", "torch", ".", "log", "(", "probs_flt", "+", "1e-10", ")", "/", "math", ".", "log", "(", "2.0", ")", ",", "0", ",", "50", ")", ")", "\n", "logger", ".", "info", "(", "'quant: '", ")", "\n", "logger", ".", "info", "(", "total_bits", ")", "\n", "sigma", "=", "recon_sigma", ".", "clamp", "(", "1e-10", ",", "1e10", ")", "\n", "gaussian", "=", "self", ".", "conditional_distribution", "(", "mu", ".", "view", "(", "sigma", ".", "shape", ")", ".", "contiguous", "(", ")", ",", "sigma", ")", "\n", "probs", "=", "gaussian", ".", "cdf", "(", "feature", "+", "0.5", ")", "-", "gaussian", ".", "cdf", "(", "feature", "-", "0.5", ")", "\n", "total_bits", "=", "torch", ".", "sum", "(", "torch", ".", "clamp", "(", "-", "1.0", "*", "torch", ".", "log", "(", "probs", "+", "1e-10", ")", "/", "math", ".", "log", "(", "2.0", ")", ",", "0", ",", "50", ")", ")", "\n", "logger", ".", "info", "(", "'noquant: '", ")", "\n", "logger", ".", "info", "(", "total_bits", ")", "\n", "#breakpoint()", "\n", "\n", "\n", "\n", "", "", "for", "ares", "in", "timedict", ":", "\n", "            ", "timedict", "[", "ares", "]", "=", "statistics", ".", "mean", "(", "timedict", "[", "ares", "]", ")", "\n", "", "logger", ".", "info", "(", "'\\n'", ")", "\n", "logger", ".", "info", "(", "timedict", ")", "\n", "return", "timedict", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.entropy_encode_per_channel": [[461, 491], ["range", "logger.info", "breakpoint", "range", "abstract_model.AbstractImageCompressor.z_entropy_table[].expand().contiguous", "torchac.encode_cdf", "bitstream.append", "len", "torchac.decode_cdf", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "breakpoint", "abstract_model.AbstractImageCompressor.z_entropy_table[].expand", "torch.equal", "[].flatten", "abstract_model.AbstractImageCompressor.z_entropy_table.size"], "methods", ["None"], ["", "def", "entropy_encode_per_channel", "(", "self", ",", "z", ")", ":", "\n", "        ", "'''entropy encode a sidestring per channel (useful for debugging)'''", "\n", "bitstream", "=", "[", "]", "\n", "nbytes", "=", "0", "\n", "bs", ",", "nch", ",", "h", ",", "w", "=", "z", ".", "shape", "\n", "#z -= 0.5", "\n", "for", "bn", "in", "range", "(", "bs", ")", ":", "\n", "            ", "for", "ch", "in", "range", "(", "nch", ")", ":", "\n", "                ", "cdf_tbl", "=", "self", ".", "z_entropy_table", "[", "ch", "]", ".", "expand", "(", "1", ",", "h", ",", "w", ",", "self", ".", "z_entropy_table", ".", "size", "(", "-", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "z_int", "=", "(", "(", "z", "[", "bn", ",", "ch", "]", "-", "self", ".", "min_feat", ")", "/", "self", ".", "q_intv", ")", ".", "round", "(", ")", ".", "short", "(", ")", ".", "flatten", "(", ")", "\n", "encoded_str", "=", "torchac", ".", "encode_cdf", "(", "cdf_tbl", ",", "z_int", ")", "\n", "bitstream", ".", "append", "(", "encoded_str", ")", "\n", "nbytes", "+=", "len", "(", "encoded_str", ")", "\n", "decoded_str", "=", "torchac", ".", "decode_cdf", "(", "cdf_tbl", ",", "encoded_str", ")", "\n", "logger", ".", "info", "(", "ch", ")", "\n", "logger", ".", "info", "(", "'encoded_str'", ")", "\n", "logger", ".", "info", "(", "encoded_str", ")", "\n", "#print(z_int)", "\n", "\n", "if", "not", "torch", ".", "equal", "(", "z_int", ",", "decoded_str", ")", "or", "ch", "==", "5", "or", "ch", "==", "6", ":", "# DBG", "\n", "                    ", "logger", ".", "info", "(", "decoded_str", ")", "\n", "logger", ".", "info", "(", "'z, z_int, z_entropy_table'", ")", "\n", "logger", ".", "info", "(", "z", "[", "bn", "]", "[", "ch", "]", ".", "flatten", "(", ")", ")", "#dbg", "\n", "logger", ".", "info", "(", "z_int", ")", "\n", "logger", ".", "info", "(", "self", ".", "z_entropy_table", "[", "ch", "]", ")", "#dbg", "\n", "breakpoint", "(", ")", "\n", "#assert torch.equal(z_int, decoded_str), (z_int, decoded_str)", "\n", "", "", "", "logger", ".", "info", "(", "nbytes", "*", "8", ")", "\n", "breakpoint", "(", ")", "\n", "return", "bitstream", ",", "nbytes", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_parameters": [[494, 504], ["abstract_model.AbstractImageCompressor.Encoder.parameters", "abstract_model.AbstractImageCompressor.Decoder.parameters", "abstract_model.AbstractImageCompressor.priorEncoder.parameters", "abstract_model.AbstractImageCompressor.priorDecoder.parameters", "abstract_model.AbstractImageCompressor.bitEstimator_z.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ",", "lr", "=", "None", ")", ":", "\n", "        ", "assert", "lr", "is", "not", "None", "\n", "param_list", "=", "[", "\n", "{", "'params'", ":", "self", ".", "Encoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'encoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "Decoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'decoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "priorEncoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'prior_encoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "priorDecoder", ".", "parameters", "(", ")", ",", "'name'", ":", "'prior_decoder'", "}", ",", "\n", "{", "'params'", ":", "self", ".", "bitEstimator_z", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "*", "10", ",", "'name'", ":", "'bit_estimator'", "}", ",", "\n", "]", "# Note that bit_estimator must be last", "\n", "return", "param_list", "\n", "#return self.parameters()", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.compress": [[506, 512], ["abstract_model.AbstractImageCompressor.Encoder", "abstract_model.AbstractImageCompressor.priorEncoder", "torch.round", "torch.round"], "methods", ["None"], ["", "def", "compress", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "feature", "=", "self", ".", "Encoder", "(", "input_image", ")", "\n", "z", "=", "self", ".", "priorEncoder", "(", "feature", ")", "\n", "compressed_z", "=", "torch", ".", "round", "(", "z", ")", "\n", "compressed_feature", "=", "torch", ".", "round", "(", "feature", ")", "\n", "return", "compressed_feature", ",", "compressed_z", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_encoding_class": [[513, 515], ["abstract_model.Encoder"], "methods", ["None"], ["", "def", "get_encoding_class", "(", "self", ")", ":", "\n", "        ", "return", "Encoder", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_decoding_class": [[516, 518], ["abstract_model.Decoder"], "methods", ["None"], ["", "def", "get_decoding_class", "(", "self", ")", ":", "\n", "        ", "return", "Decoder", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.complexity_analysis": [[519, 536], ["abstract_model.AbstractImageCompressor.get_encoding_class", "ptflops.get_model_complexity_info", "abstract_model.AbstractImageCompressor.get_decoding_class", "ptflops.get_model_complexity_info"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_encoding_class", "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.get_decoding_class"], ["", "def", "complexity_analysis", "(", "self", ")", ":", "\n", "        ", "'''\n        egrun:\n            CUDA_AVAILABLE_DEVICES=\"\" python train.py --test_flags complexity --pretrain mse_4096_b2017manypriors_64pr_16px_adam_2upd_d --device -1\n\n        '''", "\n", "IMGCH", ",", "IMGHEIGHT", ",", "IMGWIDTH", "=", "3", ",", "2160", ",", "3840", "\n", "LATENTCH", "=", "256", "\n", "# TODO add custom GDN hook", "\n", "encoder", "=", "self", ".", "get_encoding_class", "(", ")", "\n", "#res = encoder(test_img)", "\n", "#breakpoint()", "\n", "#print(test_img.shape)", "\n", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "encoder", ",", "(", "IMGCH", ",", "IMGHEIGHT", ",", "IMGWIDTH", ")", ",", "custom_modules_hooks", "=", "{", "GDN", ".", "GDN", ":", "GDN", ".", "gdn_flops_counter_hook", "}", ")", "\n", "\n", "decoder", "=", "self", ".", "get_decoding_class", "(", ")", "\n", "macs", ",", "params", "=", "ptflops", ".", "get_model_complexity_info", "(", "decoder", ",", "(", "LATENTCH", ",", "IMGHEIGHT", "//", "16", ",", "IMGWIDTH", "//", "16", ")", ",", "custom_modules_hooks", "=", "{", "GDN", ".", "GDN", ":", "GDN", ".", "gdn_flops_counter_hook", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.cpu": [[537, 540], ["torch.device", "abstract_model.AbstractImageCompressor.to"], "methods", ["None"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "return", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.Encoder.__init__": [[543, 546], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "compressor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compressor", "=", "compressor", "\n", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.Encoder.forward": [[546, 548], ["abstract_model.Encoder.compressor.encode"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.encode"], ["", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "return", "self", ".", "compressor", ".", "encode", "(", "input_image", ",", "entropy_coding", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.Decoder.__init__": [[550, 553], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "compressor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compressor", "=", "compressor", "\n", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.Decoder.forward": [[553, 555], ["abstract_model.Decoder.compressor.decode"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model.AbstractImageCompressor.decode"], ["", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "return", "self", ".", "compressor", ".", "decode", "(", "input_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.models.abstract_model._renorm_cast_cdf_": [[28, 43], ["torch.tensor().pow_", "cdf.to.mul", "torch.arange", "cdf.to.add_", "cdf.to.round", "cdf.to.to", "torch.tensor"], "function", ["None"], ["def", "_renorm_cast_cdf_", "(", "cdf", ",", "precision", ")", ":", "\n", "    ", "Lp", "=", "cdf", ".", "shape", "[", "-", "1", "]", "\n", "finals", "=", "1", "# NHW1", "\n", "# RENORMALIZATION_FACTOR in cuda", "\n", "f", "=", "torch", ".", "tensor", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "cdf", ".", "device", ")", ".", "pow_", "(", "precision", ")", "\n", "cdf", "=", "cdf", ".", "mul", "(", "(", "f", "-", "(", "Lp", "-", "1", ")", ")", "/", "finals", ")", "# TODO # DBG, was -1", "\n", "#breakpoint()", "\n", "r", "=", "torch", ".", "arange", "(", "Lp", ",", "dtype", "=", "torch", ".", "int16", ",", "device", "=", "cdf", ".", "device", ")", "\n", "#r = torch.ones_like(cdf)", "\n", "cdf", ".", "add_", "(", "r", ")", "\n", "#breakpoint()", "\n", "cdf", "=", "cdf", ".", "round", "(", ")", "\n", "\n", "cdf", "=", "cdf", ".", "to", "(", "dtype", "=", "torch", ".", "int16", ",", "non_blocking", "=", "False", ")", "\n", "return", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.common_parser_add_arguments": [[26, 67], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "common_parser_add_arguments", "(", "parser", ")", "->", "None", ":", "\n", "# very useful config", "\n", "    ", "parser", ".", "add_argument", "(", "'--expname'", ",", "help", "=", "'experiment name (default is autogenerated from config file)'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--pretrain'", ",", "help", "=", "'load pretrain model. argument can be an experiment name, an experiment directory path, or a specific model file'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "is_config_file", "=", "True", ",", "dest", "=", "'config'", ",", "required", "=", "False", ",", "help", "=", "'config in yaml format'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "help", "=", "'[*]_ImageCompressor class name as defined in models'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_lambda'", ",", "type", "=", "int", ",", "help", "=", "'RD tradeoff (higher = better IQ'", ")", "\n", "parser", ".", "add_argument", "(", "'--lossf'", ",", "help", "=", "'mse, msssim, ssim'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_distributions'", ",", "type", "=", "int", ",", "help", "=", "'Number of distributions in ManyPriors architectures'", ")", "\n", "# moderately useful config", "\n", "parser", ".", "add_argument", "(", "'--val_dpath'", ",", "dest", "=", "'val_dpath'", ",", "help", "=", "'the path of validation dataset (used to decay the learning rate)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_dpath'", ",", "dest", "=", "'test_dpath'", ",", "help", "=", "'the path of test dataset (kodak test set), used to decay the learning rate if val_dpath is not provided'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_channel_N'", ",", "type", "=", "int", ",", "help", "=", "'Model parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_channel_M'", ",", "type", "=", "int", ",", "help", "=", "'Model parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "help", "=", "'Device index (-1 for CPU)'", ")", "\n", "# very unusual config", "\n", "#################################################################################################################", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "234", ",", "type", "=", "int", ",", "help", "=", "'seed for random functions, and network initialization'", ")", "\n", "parser", ".", "add_argument", "(", "'--global_step'", ",", "type", "=", "int", ",", "help", "=", "'Starting step (does not influence pretrain)'", ")", "\n", "parser", ".", "add_argument", "(", "'--entropy_coding'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Perform entropy coding to determine actual bpp of bitstream'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_channel_H'", ",", "help", "=", "'Model parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--synthesis_prior_arch'", ",", "help", "=", "'Class name as defined in models (for Balle2018 scheme override)'", ")", "\n", "parser", ".", "add_argument", "(", "'--analysis_arch'", ",", "help", "=", "'Class name as defined in models (for Balle2018 scheme override)'", ")", "\n", "parser", ".", "add_argument", "(", "'--analysis_prior_arch'", ",", "help", "=", "'Class name as defined in models (for Balle2018 scheme override)'", ")", "\n", "parser", ".", "add_argument", "(", "'--synthesis_arch'", ",", "help", "=", "'Class name as defined in models (for Balle2018 scheme override)'", ")", "\n", "parser", ".", "add_argument", "(", "'--consistent_patch_size'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use the same patch size for testing as for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "help", "=", "'Crop size'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_patch_size'", ",", "type", "=", "int", ",", "help", "=", "'Number of features represented by the distribution (deprecated)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nchans_per_prior'", ",", "help", "=", "'Number of channels per prior distribution (blank=all)'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_param'", ",", "help", "=", "'A class specific parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--conditional_distribution'", ",", "help", "=", "'Conditional distribution used in Balle2018 type model (Gaussian, Laplace)'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation_function'", ",", "help", "=", "'Activation function used in the main encoder/decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--bitparm_init_range'", ",", "type", "=", "float", ",", "help", "=", "'Entropy model init parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--bitparm_init_mode'", ",", "help", "=", "'Entropy model init mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_autoencoder'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Freeze autoencoder to fine-tune entropy model'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_autoencoder_steps'", ",", "type", "=", "int", ",", "help", "=", "'Freeze autoencoder to fine-tune entropy model'", ")", "\n", "parser", ".", "add_argument", "(", "'--two_worse_before_lr_update'", ",", "action", "=", "'store_true'", ",", "help", "=", "'LR update after two worse epochs instead of 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_prefix'", ",", "help", "=", "'use test to load the best checkpoint for testing, or val to continue training (autodetected)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "help", "=", "f'Save path, this argument is normally autogenerated as {CHECKPOINTS_DPATH}/expname'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_cs'", ",", "type", "=", "int", ",", "help", "=", "'Test crop size'", ")", "\n", "parser", ".", "add_argument", "(", "'--nolog'", ",", "action", "=", "'store_true'", ",", "help", "=", "'No log to json (not implemented everywhere)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.get_args_jsonsaver": [[68, 81], ["configargparse.ArgumentParser", "initfun.common_parser_add_arguments", "specific_parser_add_arguments_fun", "configargparse.ArgumentParser.parse_known_args", "logger.info", "initfun.common_init_parser_autocomplete", "specific_parser_autocomplete_fun", "logger.info", "logger.info", "initfun.dump_config_get_saver", "configargparse.ArgumentParser.print_values"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.common_parser_add_arguments", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.common_init_parser_autocomplete", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.dump_config_get_saver"], ["", "def", "get_args_jsonsaver", "(", "specific_parser_add_arguments_fun", ":", "Callable", ",", "specific_parser_autocomplete_fun", ":", "Callable", ",", "cli_args", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ")", ":", "\n", "    ", "parser", "=", "configargparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ",", "default_config_files", "=", "[", "'config/defaults.yaml'", "]", ",", "config_file_parser_class", "=", "configargparse", ".", "YAMLConfigFileParser", ")", "\n", "common_parser_add_arguments", "(", "parser", ")", "\n", "specific_parser_add_arguments_fun", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_known_args", "(", "cli_args", ")", "# args is useful for testing", "\n", "logger", ".", "info", "(", "'get_args_jsonsaver: unknown arguments: {}'", ".", "format", "(", "args", "[", "1", "]", ")", ")", "\n", "args", "=", "args", "[", "0", "]", "\n", "common_init_parser_autocomplete", "(", "args", ")", "\n", "specific_parser_autocomplete_fun", "(", "args", ")", "\n", "logger", ".", "info", "(", "'config: '", ")", "\n", "logger", ".", "info", "(", "parser", ".", "print_values", "(", ")", ")", "\n", "jsonsaver", "=", "dump_config_get_saver", "(", "args", ")", "\n", "return", "args", ",", "jsonsaver", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.common_init_parser_autocomplete": [[103, 145], ["logging.Formatter", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logger.addHandler", "logger.setLevel", "common.libs.pt_helpers.get_device", "logger.info", "torch.manual_seed", "torch.device", "torch.cuda.set_device", "os.path.join", "logger.info", "logger.info", "os.path.join", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logger.addHandler", "common.libs.utilities.args_to_file", "os.makedirs", "shutil.copyfile", "logger.info", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "common.libs.utilities.get_leaf().split", "datetime.datetime.now().isoformat", "common.libs.utilities.get_leaf", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.get_leaf"], ["", "def", "common_init_parser_autocomplete", "(", "args", ":", "configargparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s] %(message)s'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(filename)s][L%(lineno)d][%(levelname)s] %(message)s'", ")", "\n", "stdhandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stdhandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "stdhandler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "stdhandler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "device", "=", "pt_helpers", ".", "get_device", "(", "args", ".", "device", ")", "\n", "logger", ".", "info", "(", "'Using device {}'", ".", "format", "(", "str", "(", "device", ")", ")", ")", "\n", "if", "device", "!=", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "torch", ".", "manual_seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "if", "args", ".", "config", "is", "None", "and", "args", ".", "pretrain", "is", "not", "None", ":", "\n", "# get config from pretrain. TODO This is currently pointless because config is read once with argparse initialization.", "\n", "# we should read the pretrain config and initialize missing values.", "\n", "        ", "args", ".", "config", "=", "os", ".", "path", ".", "join", "(", "CHECKPOINTS_DPATH", ",", "args", ".", "pretrain", ",", "'config.yaml'", ")", "\n", "logger", ".", "info", "(", "'common_init_parser_autocomplete: missing config. Did you mean to run with \"--config {}\"?'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "CHECKPOINTS_DPATH", ",", "args", ".", "pretrain", ",", "'config.yaml'", ")", ")", ")", "\n", "if", "args", ".", "expname", "is", "None", ":", "\n", "            ", "args", ".", "expname", "=", "args", ".", "pretrain", "\n", "", "", "if", "args", ".", "expname", "is", "None", ":", "\n", "        ", "if", "args", ".", "config", "is", "None", ":", "\n", "            ", "args", ".", "expname", "=", "'defaults'", "\n", "", "else", ":", "\n", "            ", "args", ".", "expname", "=", "utilities", ".", "get_leaf", "(", "args", ".", "config", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "# use directory where config is located as expname", "\n", "", "logger", ".", "info", "(", "'common_init_parser_autocomplete: expname set to {}'", ".", "format", "(", "args", ".", "expname", ")", ")", "\n", "", "if", "args", ".", "save_path", "is", "None", ":", "\n", "        ", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "CHECKPOINTS_DPATH", ",", "args", ".", "expname", ")", "\n", "", "if", "args", ".", "expname", "!=", "'None'", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'saved_models'", ")", ",", "exist_ok", "=", "True", ")", "\n", "filehandler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'log.txt'", ")", ")", "\n", "filehandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "filehandler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "filehandler", ")", "\n", "\n", "utilities", ".", "args_to_file", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'cmd.sh'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'history'", ")", ",", "exist_ok", "=", "True", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'cmd.sh'", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'history'", ",", "'cmd_{}.sh'", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", ")", ")", ")", "\n", "", "if", "args", ".", "config", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'warning: args.config was not specified. Using default parameters and CLI args. Model parameters are not automatically inferred from pretrained model.'", ")", "\n", "# logger.info(\"image compression training\") # TODO move to each script", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.dump_config_get_saver": [[150, 157], ["common.libs.json_saver.JSONSaver", "open", "yaml.dump", "open", "yaml.dump", "os.path.join", "os.path.join().format", "vars", "os.path.join", "vars", "datetime.datetime.now().isoformat", "os.path.join", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "dump_config_get_saver", "(", "args", ")", ":", "# unused?", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'history'", ",", "'config_{}.yaml'", ")", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "yaml", ".", "dump", "(", "vars", "(", "args", ")", ",", "fp", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "yaml", ".", "dump", "(", "vars", "(", "args", ")", ",", "fp", ")", "\n", "", "jsonsaver", "=", "json_saver", ".", "JSONSaver", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'trainres.json'", ")", ")", "\n", "return", "jsonsaver", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.initfun.get_best_checkpoint": [[158, 188], ["os.path.isdir", "os.path.join", "common.libs.utilities.jsonfpath_load", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "print", "os.path.join", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.jsonfpath_load"], ["", "def", "get_best_checkpoint", "(", "exp", ",", "checkpoints_dir", "=", "CHECKPOINTS_DPATH", ",", "prefix", "=", "'test'", ",", "step", "=", "None", ",", "suffix", "=", "'combined_loss'", ",", "\n", "fallback_fn", "=", "'checkpoint.pth'", ")", "->", "str", ":", "\n", "    ", "'''exp can be an expname or a directory path\n    this function can also be used to get a specific step / checkpoint w/ step arg\n    '''", "\n", "if", "os", ".", "path", ".", "isdir", "(", "exp", ")", ":", "\n", "        ", "exp_dpath", "=", "exp", "\n", "", "else", ":", "\n", "        ", "exp_dpath", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "exp", ")", "\n", "# get a given step instead of best checkpoint (not implemented in train.py but path can be given in args.pretrain)", "\n", "", "if", "step", "is", "not", "None", "and", "step", "!=", "0", ":", "\n", "        ", "model_fpath", "=", "os", ".", "path", ".", "join", "(", "exp_dpath", ",", "'saved_models'", ",", "\"iter_{}.pth\"", ".", "format", "(", "step", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "model_fpath", ")", "\n", "return", "model_fpath", "\n", "", "jsonfpath", "=", "os", ".", "path", ".", "join", "(", "exp_dpath", ",", "'trainres.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "jsonfpath", ")", ":", "\n", "        ", "print", "(", "'get_best_checkpoint: jsonfpath not found: {}'", ".", "format", "(", "jsonfpath", ")", ")", "\n", "fallback_fpath", "=", "os", ".", "path", ".", "join", "(", "exp_dpath", ",", "'saved_models'", ",", "fallback_fn", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fallback_fpath", ")", ":", "\n", "            ", "return", "fallback_fpath", "\n", "", "return", "''", "\n", "", "results", "=", "utilities", ".", "jsonfpath_load", "(", "jsonfpath", ")", "\n", "metric", "=", "\"{}_{}\"", ".", "format", "(", "prefix", ",", "suffix", ")", "\n", "prefix_alt", "=", "'test'", "if", "prefix", "==", "'val'", "else", "'test'", "\n", "if", "metric", "not", "in", "results", "[", "'best_step'", "]", ":", "\n", "        ", "metric", "=", "\"{}_{}\"", ".", "format", "(", "prefix_alt", ",", "suffix", ")", "\n", "", "best_iter", "=", "results", "[", "'best_step'", "]", "[", "metric", "]", "\n", "model_fpath", "=", "os", ".", "path", ".", "join", "(", "exp_dpath", ",", "'saved_models'", ",", "\"iter_{}.pth\"", ".", "format", "(", "best_iter", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "model_fpath", ")", ",", "model_fpath", "\n", "return", "model_fpath", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.CustomModel_ImageCompressor.__init__": [[94, 100], ["compression.models.abstract_model.AbstractImageCompressor.__init__", "globals", "globals", "globals", "globals"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "synthesis_prior_arch", ",", "synthesis_arch", ",", "analysis_arch", ",", "analysis_prior_arch", ",", "out_channel_N", "=", "192", ",", "out_channel_M", "=", "320", ",", "lossf", "=", "'mse'", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ",", "lossf", "=", "lossf", ",", "device", "=", "device", ")", "\n", "self", ".", "Encoder", "=", "globals", "(", ")", "[", "analysis_arch", "]", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "Decoder", "=", "globals", "(", ")", "[", "synthesis_arch", "]", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorDecoder", "=", "globals", "(", ")", "[", "synthesis_prior_arch", "]", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "self", ".", "priorEncoder", "=", "globals", "(", ")", "[", "analysis_prior_arch", "]", "(", "out_channel_N", "=", "out_channel_N", ",", "out_channel_M", "=", "out_channel_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.save_model": [[53, 60], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "optimizer.state_dict", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict"], ["", "def", "save_model", "(", "model", ",", "iter", ",", "name", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "fn", "=", "\"iter_{}.pth\"", ".", "format", "(", "iter", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "name", ",", "fn", ")", ")", "\n", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "name", ",", "fn", "+", "'.module'", ")", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "name", ",", "fn", "+", "'.opt'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ",", "os", ".", "path", ".", "join", "(", "name", ",", "fn", "+", "'.opt.module'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.load_model": [[62, 92], ["common.libs.pt_helpers.get_device", "str", "str.find", "int", "open", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "print", "print", "str.find", "str.find", "str.find", "model.load_state_dict", "open", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "print", "torch.load.items", "str", "breakpoint", "model.load_state_dict", "torch.load.items"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.load_state_dict", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.load_state_dict"], ["", "", "def", "load_model", "(", "model", ",", "fpath", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "'''\n    step is infered from fpath\n    '''", "\n", "device", "=", "pt_helpers", ".", "get_device", "(", "device", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "device", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "print", "(", "model", ".", "load_state_dict", "(", "model_dict", ")", ")", "#, strict=False))  # strict doesn't work for optimizer", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "device", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "'bitEstimators'", "in", "str", "(", "e", ")", ":", "\n", "                ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", "and", "'bitEstimators'", "not", "in", "k", ")", "}", "\n", "", "else", ":", "\n", "                ", "breakpoint", "(", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "print", "(", "model", ".", "load_state_dict", "(", "model_dict", ")", ")", "#, strict=False))  # strict doesn't work for optimizer", "\n", "", "", "f", "=", "str", "(", "f", ")", "\n", "if", "f", ".", "find", "(", "'iter_'", ")", "!=", "-", "1", "and", "f", ".", "find", "(", "'.pth'", ")", "!=", "-", "1", ":", "\n", "        ", "st", "=", "f", ".", "find", "(", "'iter_'", ")", "+", "5", "\n", "ed", "=", "f", ".", "find", "(", "'.pth'", ",", "st", ")", "\n", "return", "int", "(", "f", "[", "st", ":", "ed", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.model_ops.init_model": [[102, 119], ["common.libs.pt_helpers.get_device", "print", "print", "globals", "exit", "print", "globals", "arch.split"], "function", ["None"], ["", "", "def", "init_model", "(", "arch", ":", "str", ",", "device", "=", "'cuda:0'", ",", "std_suffix", ":", "str", "=", "'ImageCompressor'", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''\n    std_suffix is 'ImageCompressor' (for most compression models) or 'DC' (for denoisecompress)\n    '''", "\n", "arch_class_str", "=", "std_suffix", "\n", "device", "=", "pt_helpers", ".", "get_device", "(", "device", ")", "\n", "if", "arch", "is", "not", "None", "and", "arch", "!=", "'ImageCompressor'", "and", "arch", "!=", "'DC'", ":", "\n", "        ", "arch_class_str", "=", "'{}_{}'", ".", "format", "(", "arch", ",", "arch_class_str", ")", "\n", "", "try", ":", "\n", "        ", "return", "globals", "(", ")", "[", "arch_class_str", "]", "(", "device", "=", "device", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "print", "(", "'Invalid architecture: {}. List of valid architectures:'", ".", "format", "(", "arch", ")", ")", "\n", "for", "arch", "in", "globals", "(", ")", ":", "\n", "            ", "if", "'_'", "+", "std_suffix", "in", "arch", ":", "\n", "                ", "print", "(", "arch", ".", "split", "(", "'_'", "+", "std_suffix", ")", "[", "0", "]", ")", "\n", "", "", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.WeightedMeter.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "val", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.WeightedMeter.update": [[12, 17], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ":", "float", ",", "num", ":", "int", "=", "1", ")", ":", "\n", "        ", "self", ".", "count", "+=", "num", "\n", "self", ".", "sum", "+=", "val", "*", "num", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.WeightedMeter.reset": [[18, 23], ["max", "max"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total", ":", "float", "=", "0", ",", "count", ":", "int", "=", "0", ")", ":", "\n", "        ", "self", ".", "count", "=", "count", "\n", "self", ".", "sum", "=", "total", "\n", "self", ".", "avg", "=", "total", "/", "max", "(", "count", ",", "1", ")", "\n", "self", ".", "val", "=", "total", "/", "max", "(", "count", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.__init__": [[26, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ":", "int", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "assert", "length", ">", "0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "current", ":", "int", "=", "-", "1", "\n", "self", ".", "history", ":", "List", "[", "float", "]", "=", "[", "None", "]", "*", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.val": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "history", "[", "self", ".", "current", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.avg": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update": [[42, 52], ["len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ":", "float", ")", ":", "\n", "        ", "self", ".", "current", "=", "(", "self", ".", "current", "+", "1", ")", "%", "len", "(", "self", ".", "history", ")", "\n", "self", ".", "sum", "+=", "val", "\n", "\n", "old", "=", "self", ".", "history", "[", "self", ".", "current", "]", "\n", "if", "old", "is", "None", ":", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "sum", "-=", "old", "\n", "", "self", ".", "history", "[", "self", ".", "current", "]", "=", "val", "\n", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.Datasets.__init__": [[20, 30], ["isinstance", "datasets.Datasets.image_paths.extend", "os.path.exists", "Exception", "sorted", "glob.glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dpaths", ",", "image_size", "=", "256", ")", ":", "\n", "#self.data_dir = data_dir", "\n", "        ", "if", "isinstance", "(", "data_dpaths", ",", "str", ")", ":", "\n", "            ", "data_dpaths", "=", "[", "data_dpaths", "]", "\n", "", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "for", "data_dir", "in", "data_dpaths", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "                ", "raise", "Exception", "(", "f\"[!] {data_dir} not exitd\"", ")", "\n", "", "self", ".", "image_paths", ".", "extend", "(", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"*.*\"", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.Datasets.__getitem__": [[31, 42], ["PIL.Image.open().convert", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "PIL.Image.open", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image_ori", "=", "self", ".", "image_paths", "[", "item", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_ori", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "image_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# transforms.Normalize((5, 0.5, 0.5), (0.5, 0.5, 0.5))", "\n", "]", ")", "\n", "return", "transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.Datasets.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.Datasets_Img_Coords.__init__": [[47, 51], ["datasets.Datasets.__init__", "isinstance", "dataio.get_mgrid"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dpaths", ",", "image_size", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_dpaths", ",", "image_size", ")", "\n", "assert", "isinstance", "(", "image_size", ",", "int", ")", "# TODO test dif shape s.a. 768*512", "\n", "self", ".", "mgrid", "=", "dataio", ".", "get_mgrid", "(", "(", "image_size", ",", "image_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.Datasets_Img_Coords.__getitem__": [[52, 55], ["datasets.Datasets.__getitem__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.TestDirDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.TestDirDataset.__init__": [[81, 106], ["torchvision.transforms.Compose", "int", "NotImplementedError", "os.path.exists", "Exception", "os.path.isdir", "sorted", "sorted", "os.path.isfile", "os.path.exists", "ValueError", "glob.glob.glob", "len", "sorted", "torchvision.transforms.ToTensor", "glob.glob.glob", "os.path.join", "glob.glob.glob", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "data_dir_2", "=", "None", ",", "resize", "=", "None", ",", "verbose", "=", "False", ",", "crop_to_multiple", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "data_dir_2", "=", "data_dir_2", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "resize", "=", "int", "(", "resize", ")", "\n", "raise", "NotImplementedError", "(", "'resize'", ")", "\n", "", "self", ".", "resize", "=", "resize", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "raise", "Exception", "(", "f\"[!] {self.data_dir} not exitd\"", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "data_dir", ")", ":", "\n", "            ", "self", ".", "image_path", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"*.*\"", ")", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "data_dir", ")", ":", "\n", "            ", "self", ".", "image_path", "=", "[", "data_dir", "]", "\n", "", "if", "data_dir_2", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir_2", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f'data_dir_2={data_dir_2} does not exist'", ")", "\n", "#raise ValueError(f'{data_dir_2=} does not exist')  # FIXME restore this (req modern python3)", "\n", "", "self", ".", "image_path_2", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir_2", ",", "\"*.png\"", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "image_path_2", ")", "==", "0", ":", "\n", "                ", "self", ".", "image_path_2", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir_2", ",", "\"*.jpg\"", ")", ")", ")", "\n", "", "", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "crop_to_multiple", "=", "crop_to_multiple", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.TestDirDataset.__getitem__": [[107, 131], ["PIL.Image.open().convert", "datasets.TestDirDataset.transform", "hasattr", "print", "PIL.Image.open().convert", "datasets.TestDirDataset.transform", "os.path.exists", "common.libs.pt_ops.crop_to_multiple", "PIL.Image.open", "common.libs.utilities.filesize", "common.libs.utilities.filesize", "PIL.Image.open", "common.libs.pt_ops.crop_to_multiple", "common.libs.pt_ops.crop_to_multiple"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.crop_to_multiple", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.filesize", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.filesize", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.crop_to_multiple", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.crop_to_multiple"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image_ori", "=", "self", ".", "image_path", "[", "item", "]", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'{}: loading {}'", ".", "format", "(", "self", ",", "image_ori", ")", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "image_ori", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "ch", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "#image = image[:, :h-h%64, :w-w%64] # ensure divisible by 16, actually no longer necessary bc taken care of in preprocessing", "\n", "if", "hasattr", "(", "self", ",", "'image_path_2'", ")", ":", "\n", "#print(self.image_path_2)", "\n", "#print(item)", "\n", "            ", "image_ori2", "=", "self", ".", "image_path_2", "[", "item", "]", "\n", "image2", "=", "Image", ".", "open", "(", "image_ori2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image2", "=", "self", ".", "transform", "(", "image2", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_ori2", "+", "'.bpg'", ")", ":", "\n", "                ", "size", "=", "utilities", ".", "filesize", "(", "image_ori2", "+", "'.bpg'", ")", "\n", "", "else", ":", "\n", "                ", "size", "=", "utilities", ".", "filesize", "(", "image_ori2", ")", "\n", "", "if", "self", ".", "crop_to_multiple", "is", "not", "None", ":", "\n", "                ", "return", "pt_ops", ".", "crop_to_multiple", "(", "image", ",", "self", ".", "crop_to_multiple", ")", ",", "pt_ops", ".", "crop_to_multiple", "(", "image2", ",", "self", ".", "crop_to_multiple", ")", ",", "size", "\n", "", "return", "image", ",", "image2", ",", "size", "\n", "", "if", "self", ".", "crop_to_multiple", "is", "not", "None", ":", "\n", "            ", "return", "pt_ops", ".", "crop_to_multiple", "(", "image", ",", "self", ".", "crop_to_multiple", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.TestDirDataset.__len__": [[132, 134], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.get_loader": [[58, 69], ["datasets.Datasets", "datasets.Datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_loader", "(", "train_data_dir", ",", "test_data_dir", ",", "image_size", ",", "batch_size", ")", ":", "\n", "    ", "train_dataset", "=", "Datasets", "(", "train_data_dir", ",", "image_size", ")", "\n", "test_dataset", "=", "Datasets", "(", "test_data_dir", ",", "image_size", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.get_train_loader": [[71, 79], ["datasets.Datasets", "torch.manual_seed", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_train_loader", "(", "train_data_dir", ",", "image_size", ",", "batch_size", ")", ":", "\n", "    ", "train_dataset", "=", "Datasets", "(", "train_data_dir", ",", "image_size", ")", "\n", "torch", ".", "manual_seed", "(", "3334", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "train_dataset", ",", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.datasets.get_val_test_loaders": [[137, 149], ["datasets.TestDirDataset", "torch.utils.data.DataLoader", "datasets.TestDirDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_val_test_loaders", "(", "val_dpath", ",", "test_dpath", ")", ":", "\n", "    ", "if", "test_dpath", "is", "None", ":", "\n", "        ", "test_loader", "=", "None", "\n", "", "else", ":", "\n", "        ", "test_dataset", "=", "TestDirDataset", "(", "data_dir", "=", "test_dpath", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "", "if", "val_dpath", "is", "None", ":", "\n", "        ", "val_loader", "=", "None", "\n", "", "else", ":", "\n", "        ", "val_dataset", "=", "TestDirDataset", "(", "data_dir", "=", "val_dpath", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "", "return", "val_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.checksum": [[13, 28], ["hashlib.sha256.hexdigest", "hashlib.sha1", "open", "hashlib.sha256", "NotImplementedError", "file.read", "hashlib.sha256.update"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update"], ["", "def", "checksum", "(", "fpath", ",", "htype", "=", "'sha1'", ")", ":", "\n", "    ", "if", "htype", "==", "'sha1'", ":", "\n", "        ", "h", "=", "hashlib", ".", "sha1", "(", ")", "\n", "", "elif", "htype", "==", "'sha256'", ":", "\n", "        ", "h", "=", "hashlib", ".", "sha256", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "type", ")", "\n", "", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "while", "True", ":", "\n", "# Reading is buffered, so we can read smaller chunks.", "\n", "            ", "chunk", "=", "file", ".", "read", "(", "h", ".", "block_size", ")", "\n", "if", "not", "chunk", ":", "\n", "                ", "break", "\n", "", "h", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "h", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.cp": [[29, 34], ["subprocess.run", "shutil.copy2"], "function", ["None"], ["", "def", "cp", "(", "inpath", ",", "outpath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "subprocess", ".", "run", "(", "(", "'cp'", ",", "'--reflink=auto'", ",", "inpath", ",", "outpath", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "shutil", ".", "copy2", "(", "inpath", ",", "outpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.jsonfpath_load": [[35, 48], ["os.path.isfile", "print", "isinstance", "open", "json.load", "default_type", "int", "x.items", "k.isdigit"], "function", ["None"], ["", "", "def", "jsonfpath_load", "(", "fpath", ",", "default_type", "=", "dict", ",", "default", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "print", "(", "'jsonfpath_load: warning: {} does not exist, returning default'", ".", "format", "(", "fpath", ")", ")", "\n", "if", "default", "is", "None", ":", "\n", "            ", "return", "default_type", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "default", "\n", "", "", "def", "jsonKeys2int", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "return", "{", "k", "if", "not", "k", ".", "isdigit", "(", ")", "else", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "}", "\n", "", "return", "x", "\n", "", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ",", "object_hook", "=", "jsonKeys2int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.dict_to_json": [[49, 52], ["open", "json.dump"], "function", ["None"], ["", "", "def", "dict_to_json", "(", "adict", ",", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "adict", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.get_leaf": [[53, 57], ["os.path.basename", "os.path.relpath"], "function", ["None"], ["", "", "def", "get_leaf", "(", "path", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Returns the leaf of a path, whether it's a file or directory followed by\n    / or not.\"\"\"", "\n", "return", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "relpath", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.get_root": [[58, 65], ["fpath.endswith", "os.path.dirname"], "function", ["None"], ["", "def", "get_root", "(", "fpath", ":", "str", ")", "->", "str", ":", "\n", "    ", "'''\n    return root directory a file (fpath) is located in.\n    '''", "\n", "while", "fpath", ".", "endswith", "(", "os", ".", "pathsep", ")", ":", "\n", "        ", "fpath", "=", "fpath", "[", ":", "-", "1", "]", "\n", "", "return", "os", ".", "path", ".", "dirname", "(", "fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.avg_listofdicts": [[66, 75], ["dict", "listofdicts[].keys", "dict.keys", "list", "adict.items", "statistics.mean", "res[].append"], "function", ["None"], ["", "def", "avg_listofdicts", "(", "listofdicts", ")", ":", "\n", "    ", "res", "=", "dict", "(", ")", "\n", "for", "akey", "in", "listofdicts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "res", "[", "akey", "]", "=", "list", "(", ")", "\n", "", "for", "adict", "in", "listofdicts", ":", "\n", "        ", "for", "akey", ",", "aval", "in", "adict", ".", "items", "(", ")", ":", "\n", "            ", "res", "[", "akey", "]", ".", "append", "(", "aval", ")", "\n", "", "", "for", "akey", "in", "res", ".", "keys", "(", ")", ":", "\n", "        ", "res", "[", "akey", "]", "=", "statistics", ".", "mean", "(", "res", "[", "akey", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.list_of_tuples_to_csv": [[76, 82], ["open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow"], "function", ["None"], ["", "", "def", "list_of_tuples_to_csv", "(", "listoftuples", ",", "heading", ",", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "fp", ")", "\n", "csvwriter", ".", "writerow", "(", "heading", ")", "\n", "for", "arow", "in", "listoftuples", ":", "\n", "            ", "csvwriter", ".", "writerow", "(", "arow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.filesize": [[83, 85], ["os.stat"], "function", ["None"], ["", "", "", "def", "filesize", "(", "fpath", ")", ":", "\n", "    ", "return", "os", ".", "stat", "(", "fpath", ")", ".", "st_size", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.noop": [[97, 99], ["None"], "function", ["None"], ["", "", "def", "noop", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pass", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.RoundNoGradient.forward": [[28, 31], ["x.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "round", "(", ")", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.RoundNoGradient.backward": [[31, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "        ", "return", "g", "", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.pt_crop_batch": [[3, 11], ["None"], "function", ["None"], ["def", "pt_crop_batch", "(", "batch", ",", "cs", ":", "int", ")", ":", "\n", "    ", "'''\n    center crop an image batch to cs\n    also compatible with numpy tensors\n    '''", "\n", "x0", "=", "(", "batch", ".", "shape", "[", "3", "]", "-", "cs", ")", "//", "2", "\n", "y0", "=", "(", "batch", ".", "shape", "[", "2", "]", "-", "cs", ")", "//", "2", "\n", "return", "batch", "[", ":", ",", ":", ",", "y0", ":", "y0", "+", "cs", ",", "x0", ":", "x0", "+", "cs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.crop_to_multiple": [[12, 14], ["tensor.size", "tensor.size", "tensor.size", "tensor.size"], "function", ["None"], ["", "def", "crop_to_multiple", "(", "tensor", ",", "multiple", "=", "64", ")", ":", "\n", "    ", "return", "tensor", "[", "...", ",", ":", "tensor", ".", "size", "(", "-", "2", ")", "-", "tensor", ".", "size", "(", "-", "2", ")", "%", "multiple", ",", ":", "tensor", ".", "size", "(", "-", "1", ")", "-", "tensor", ".", "size", "(", "-", "1", ")", "%", "multiple", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_ops.img_to_batch": [[15, 26], ["img.unfold().unfold().transpose().reshape().transpose().reshape", "img.dim", "img.unfold().unfold().transpose().reshape().transpose", "img.unfold().unfold().transpose().reshape", "img.unfold().unfold().transpose", "img.unfold().unfold", "img.unfold"], "function", ["None"], ["", "def", "img_to_batch", "(", "img", ",", "patch_size", ":", "int", ",", "nchans_per_prior", ":", "int", "=", "None", ")", ":", "\n", "    ", "_", ",", "ch", ",", "height", ",", "width", "=", "img", ".", "shape", "\n", "if", "nchans_per_prior", "is", "None", ":", "\n", "        ", "nchans_per_prior", "=", "ch", "\n", "", "assert", "height", "%", "patch_size", "==", "0", "and", "width", "%", "patch_size", "==", "0", ",", "(", "\n", "'img_to_batch: dims must be dividable by patch_size. {}%{}!=0'", ".", "format", "(", "\n", "img", ".", "shape", ",", "patch_size", ")", ")", "\n", "assert", "img", ".", "dim", "(", ")", "==", "4", "\n", "return", "img", ".", "unfold", "(", "2", ",", "patch_size", ",", "patch_size", ")", ".", "unfold", "(", "\n", "3", ",", "patch_size", ",", "patch_size", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "\n", "ch", ",", "-", "1", ",", "patch_size", ",", "patch_size", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "nchans_per_prior", ",", "patch_size", ",", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.Test_locking.test_lock_unlock": [[75, 89], ["locking.lock", "locking.Test_locking.assertTrue", "locking.Test_locking.assertFalse", "locking.lock", "locking.Test_locking.assertTrue", "locking.Test_locking.assertFalse", "locking.Test_locking.assertTrue", "locking.Test_locking.assertFalse", "locking.Test_locking.assertFalse", "locking.Test_locking.assertFalse", "os.remove", "locking.is_owned", "locking.is_owned", "locking.is_owned", "locking.is_locked", "locking.unlock", "open", "f.write", "locking.unlock", "locking.is_locked", "locking.is_owned"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.lock", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.lock", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_locked", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.unlock", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.unlock", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_locked", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned"], ["    ", "def", "test_lock_unlock", "(", "self", ")", ":", "\n", "        ", "lock", "(", "'cpu'", ")", "\n", "self", ".", "assertTrue", "(", "is_owned", "(", "'cpu'", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_owned", "(", "'gpu'", ")", ")", "\n", "lock", "(", "'gpu'", ")", "\n", "self", ".", "assertTrue", "(", "is_owned", "(", "'gpu'", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_locked", "(", "'gpu'", ")", ")", "\n", "self", ".", "assertTrue", "(", "unlock", "(", "'gpu'", ")", ")", "\n", "with", "open", "(", "LOCK_FPATH", "[", "'cpu'", "]", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'123'", ")", "\n", "", "self", ".", "assertFalse", "(", "unlock", "(", "'cpu'", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_locked", "(", "'cpu'", ")", ")", "\n", "self", ".", "assertFalse", "(", "is_owned", "(", "'cpu'", ")", ")", "\n", "os", ".", "remove", "(", "LOCK_FPATH", "[", "'cpu'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_locked": [[13, 27], ["open", "int", "f.readline", "os.getpid", "os.kill"], "function", ["None"], ["def", "is_locked", "(", "device", "=", "'gpu'", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "LOCK_FPATH", "[", "device", "]", ",", "'r'", ")", "as", "f", ":", "\n", "#if (lock_owner := int(f.readline())) == os.getpid():  # not compat w/ python 3.6", "\n", "            ", "lock_owner", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "if", "(", "lock_owner", "==", "os", ".", "getpid", "(", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "try", ":", "\n", "                ", "os", ".", "kill", "(", "lock_owner", ",", "0", ")", "# harmless", "\n", "", "except", "OSError", ":", "# PID doesn't exist", "\n", "                ", "return", "False", "\n", "", "return", "True", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned": [[28, 36], ["open", "int", "os.getpid", "f.readline"], "function", ["None"], ["", "", "def", "is_owned", "(", "device", "=", "'gpu'", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "LOCK_FPATH", "[", "device", "]", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "if", "int", "(", "f", ".", "readline", "(", ")", ")", "==", "os", ".", "getpid", "(", ")", ":", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.lock": [[37, 51], ["locking.is_owned", "locking.is_locked", "time.sleep", "min", "int", "print", "open", "f.write", "print", "random.random", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_locked", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write"], ["", "", "def", "lock", "(", "device", ":", "str", "=", "'gpu'", ")", ":", "\n", "    ", "\"\"\"device: gpu, cpu\"\"\"", "\n", "backoff_time", "=", "BACKOFF_SECONDS", "\n", "while", "not", "is_owned", "(", "device", ")", ":", "\n", "        ", "if", "is_locked", "(", "device", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "int", "(", "backoff_time", ")", ")", "\n", "backoff_time", "=", "min", "(", "10", "+", "random", ".", "random", "(", ")", ",", "backoff_time", "*", "1.1", ")", "\n", "if", "backoff_time", ">", "BACKOFF_SECONDS", "*", "1.1", "**", "9", "and", "backoff_time", "<", "BACKOFF_SECONDS", "*", "1.1", "**", "11", ":", "\n", "                ", "print", "(", "'lock: spinning for %s...'", "%", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "LOCK_FPATH", "[", "device", "]", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "", "if", "backoff_time", ">=", "BACKOFF_SECONDS", "*", "1.1", "**", "9", ":", "\n", "                ", "print", "(", "'lock:ed %s.'", "%", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.unlock": [[52, 58], ["locking.is_owned", "os.remove"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.is_owned"], ["", "", "", "", "def", "unlock", "(", "device", ":", "str", "=", "'gpu'", ")", ":", "\n", "    ", "\"\"\"device: gpu, cpu\"\"\"", "\n", "if", "is_owned", "(", "device", ")", ":", "\n", "        ", "os", ".", "remove", "(", "LOCK_FPATH", "[", "device", "]", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.locking.check_pause": [[59, 71], ["os.path.join", "os.path.isfile", "time.sleep", "os.getpid", "print"], "function", ["None"], ["", "def", "check_pause", "(", ")", ":", "\n", "    ", "\"\"\"\n    touch ~/locking/pause_<PID>\n    to pause\n    \"\"\"", "\n", "backoff_time", "=", "BACKOFF_SECONDS", "\n", "lock_fpath", "=", "os", ".", "path", ".", "join", "(", "LOCKDIR", ",", "\"pause_%u\"", "%", "os", ".", "getpid", "(", ")", ")", "\n", "while", "os", ".", "path", ".", "isfile", "(", "lock_fpath", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "backoff_time", ")", "\n", "backoff_time", "+=", "1", "\n", "if", "backoff_time", "==", "BACKOFF_SECONDS", "+", "10", ":", "\n", "            ", "print", "(", "'paused by %s'", "%", "lock_fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.__init__": [[9, 16], ["common.libs.utilities.jsonfpath_load", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.jsonfpath_load"], ["    ", "def", "__init__", "(", "self", ",", "jsonfpath", ",", "step_type", ":", "str", "=", "[", "'step'", ",", "'epoch'", "]", "[", "0", "]", ",", "\n", "default", "=", "{", "'best_val'", ":", "dict", "(", ")", "}", ")", ":", "\n", "        ", "self", ".", "best_key_str", "=", "'best_{}'", ".", "format", "(", "step_type", ")", "# best step/epoch #", "\n", "self", ".", "jsonfpath", "=", "jsonfpath", "\n", "self", ".", "results", "=", "utilities", ".", "jsonfpath_load", "(", "jsonfpath", ",", "default", "=", "default", ")", "\n", "if", "self", ".", "best_key_str", "not", "in", "self", ".", "results", ":", "\n", "            ", "self", ".", "results", "[", "self", ".", "best_key_str", "]", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.add_res": [[17, 50], ["res.items", "dict", "dict", "res.values", "isinstance", "common.libs.utilities.dict_to_json", "ValueError", "val_type"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.dict_to_json"], ["", "", "def", "add_res", "(", "self", ",", "step", ":", "int", ",", "res", ":", "dict", ",", "minimize", "=", "True", ",", "write", "=", "True", ",", "\n", "val_type", "=", "float", ",", "epoch", "=", "None", ",", "rm_none", "=", "False", ",", "key_prefix", "=", "''", ")", ":", "\n", "        ", "'''epoch is an alias for step\n        Set rm_none to True to ignore zero values'''", "\n", "if", "epoch", "is", "not", "None", "and", "step", "is", "None", ":", "\n", "            ", "step", "=", "epoch", "\n", "", "elif", "(", "epoch", "is", "None", "and", "step", "is", "None", ")", "or", "step", "is", "None", "or", "epoch", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'JSONSaver.add_res: Must specify either step or epoch'", ")", "\n", "", "if", "step", "not", "in", "self", ".", "results", ":", "\n", "            ", "self", ".", "results", "[", "step", "]", "=", "dict", "(", ")", "\n", "", "if", "key_prefix", "!=", "''", ":", "\n", "            ", "res_", "=", "dict", "(", ")", "\n", "for", "akey", ",", "aval", "in", "res", ".", "values", "(", ")", ":", "\n", "                ", "res_", "[", "key_prefix", "+", "akey", "]", "=", "aval", "\n", "", "res", "=", "res_", "\n", "", "for", "akey", ",", "aval", "in", "res", ".", "items", "(", ")", ":", "\n", "            ", "if", "val_type", "is", "not", "None", ":", "\n", "                ", "aval", "=", "val_type", "(", "aval", ")", "\n", "", "self", ".", "results", "[", "step", "]", "[", "akey", "]", "=", "aval", "\n", "if", "isinstance", "(", "aval", ",", "list", ")", ":", "\n", "                ", "continue", "\n", "", "if", "rm_none", "and", "aval", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "akey", "not", "in", "self", ".", "results", "[", "'best_val'", "]", "and", "akey", "in", "self", ".", "results", "[", "self", ".", "best_key_str", "]", ":", "# works when best_val has been removed but best_step exists", "\n", "                ", "self", ".", "results", "[", "'best_val'", "]", "[", "akey", "]", "=", "self", ".", "results", "[", "self", ".", "results", "[", "self", ".", "best_key_str", "]", "[", "akey", "]", "]", "[", "akey", "]", "\n", "", "if", "(", "akey", "not", "in", "self", ".", "results", "[", "self", ".", "best_key_str", "]", "\n", "or", "akey", "not", "in", "self", ".", "results", "[", "'best_val'", "]", "\n", "or", "(", "self", ".", "results", "[", "'best_val'", "]", "[", "akey", "]", ">", "aval", "and", "minimize", ")", "\n", "or", "(", "self", ".", "results", "[", "'best_val'", "]", "[", "akey", "]", "<", "aval", "and", "not", "minimize", ")", ")", ":", "\n", "                ", "self", ".", "results", "[", "self", ".", "best_key_str", "]", "[", "akey", "]", "=", "step", "\n", "self", ".", "results", "[", "'best_val'", "]", "[", "akey", "]", "=", "aval", "\n", "", "", "if", "write", ":", "\n", "            ", "utilities", ".", "dict_to_json", "(", "self", ".", "results", ",", "self", ".", "jsonfpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write": [[51, 53], ["common.libs.utilities.dict_to_json"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.utilities.dict_to_json"], ["", "", "def", "write", "(", "self", ")", ":", "\n", "        ", "utilities", ".", "dict_to_json", "(", "self", ".", "results", ",", "self", ".", "jsonfpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.get_best_steps": [[54, 56], ["set", "json_saver.JSONSaver.results[].values"], "methods", ["None"], ["", "def", "get_best_steps", "(", "self", ")", "->", "Set", "[", "int", "]", ":", "\n", "        ", "return", "set", "(", "self", ".", "results", "[", "self", ".", "best_key_str", "]", ".", "values", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_losses.MS_SSIM_loss.__init__": [[7, 10], ["piqa.MS_SSIM.__init__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "reduction", "=", "None", ",", "**", "kwargs", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_losses.MS_SSIM_loss.forward": [[10, 12], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "1", "-", "super", "(", ")", ".", "forward", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_losses.SSIM_loss.__init__": [[14, 17], ["piqa.SSIM.__init__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "reduction", "=", "None", ",", "**", "kwargs", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.pt_losses.SSIM_loss.forward": [[17, 19], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "1", "-", "super", "(", ")", ".", "forward", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.distinct_colors._gen_color_palette": [[10, 15], ["common.extlibs.glasbey.Glasbey", "common.extlibs.glasbey.Glasbey.generate_palette", "common.extlibs.glasbey.Glasbey.convert_palette_to_rgb"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.generate_palette", "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.convert_palette_to_rgb"], ["def", "_gen_color_palette", "(", "num", ")", ":", "\n", "    ", "\"\"\"Generate a new color palette\"\"\"", "\n", "gl", "=", "Glasbey", "(", ")", "\n", "pa", "=", "gl", ".", "generate_palette", "(", "size", "=", "num", ")", "\n", "return", "gl", ".", "convert_palette_to_rgb", "(", "pa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.distinct_colors.get_color_palette": [[17, 30], ["os.path.join", "os.path.join", "os.path.isfile", "distinct_colors._gen_color_palette", "os.makedirs", "open", "json.dump", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.distinct_colors._gen_color_palette"], ["", "def", "get_color_palette", "(", "num", ")", ":", "\n", "    ", "\"\"\"Get a color palette with n distinct colors\"\"\"", "\n", "palette_dpath", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'common'", ",", "'cfg'", ",", "'color_palettes'", ")", "\n", "palette_fpath", "=", "os", ".", "path", ".", "join", "(", "palette_dpath", ",", "\"%u.json\"", "%", "num", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "palette_fpath", ")", ":", "\n", "        ", "palette", "=", "_gen_color_palette", "(", "num", ")", "\n", "os", ".", "makedirs", "(", "palette_dpath", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "palette_fpath", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "palette", ",", "fp", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "palette_fpath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "palette", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "", "return", "palette", "\n", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.SSIM.__init__": [[220, 246], ["super().__init__", "_fspecial_gauss_1d().repeat", "pt_ms_ssim._fspecial_gauss_1d"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._fspecial_gauss_1d"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_range", "=", "1.0", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "channel", "=", "3", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ",", "\n", "nonnegative_ssim", "=", "True", ")", ":", "\n", "        ", "r\"\"\" class for ssim\n        Args:\n            data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n            size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n            win_size: (int, optional): the size of gauss kernel\n            win_sigma: (float, optional): sigma of normal distribution\n            channel (int, optional): input channels (default: 3)\n            K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n            nonnegative_ssim (bool, optional): force the ssim response to be nonnegative with relu.\n        \"\"\"", "\n", "\n", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", ".", "repeat", "(", "channel", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "data_range", "=", "data_range", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "nonnegative_ssim", "=", "nonnegative_ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.SSIM.forward": [[247, 254], ["pt_ms_ssim.ssim"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ssim"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "ssim", "(", "X", ",", "Y", ",", "\n", "data_range", "=", "self", ".", "data_range", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "nonnegative_ssim", "=", "self", ".", "nonnegative_ssim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.SSIM.lossfun": [[255, 257], ["pt_ms_ssim.SSIM.forward"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.forward"], ["", "def", "lossfun", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "forward", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.__init__": [[260, 286], ["super().__init__", "_fspecial_gauss_1d().repeat", "pt_ms_ssim._fspecial_gauss_1d"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._fspecial_gauss_1d"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_range", "=", "1.0", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "channel", "=", "3", ",", "\n", "weights", "=", "None", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ")", ":", "\n", "        ", "r\"\"\" class for ms-ssim\n        Args:\n            data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n            size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n            win_size: (int, optional): the size of gauss kernel\n            win_sigma: (float, optional): sigma of normal distribution\n            channel (int, optional): input channels (default: 3)\n            weights (list, optional): weights for different levels\n            K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n        \"\"\"", "\n", "\n", "super", "(", "MS_SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", ".", "repeat", "(", "channel", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "data_range", "=", "data_range", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "K", "=", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.forward": [[287, 294], ["pt_ms_ssim.ms_ssim"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ms_ssim"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "ms_ssim", "(", "X", ",", "Y", ",", "\n", "data_range", "=", "self", ".", "data_range", ",", "\n", "size_average", "=", "self", ".", "size_average", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "K", "=", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.lossfun": [[295, 297], ["pt_ms_ssim.MS_SSIM.forward"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.MS_SSIM.forward"], ["", "def", "lossfun", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "forward", "(", "X", ",", "Y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._fspecial_gauss_1d": [[8, 24], ["torch.arange().to", "torch.arange().to", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.exp.unsqueeze"], "function", ["None"], ["def", "_fspecial_gauss_1d", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "r\"\"\"Create 1-D gauss kernel\n    Args:\n        size (int): the size of gauss kernel\n        sigma (float): sigma of normal distribution\n\n    Returns:\n        torch.Tensor: 1D kernel (1 x 1 x size)\n    \"\"\"", "\n", "coords", "=", "torch", ".", "arange", "(", "size", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "coords", "-=", "size", "//", "2", "\n", "\n", "g", "=", "torch", ".", "exp", "(", "-", "(", "coords", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g", "/=", "g", ".", "sum", "(", ")", "\n", "\n", "return", "g", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter": [[26, 39], ["torch.conv2d", "torch.conv2d", "win.transpose"], "function", ["None"], ["", "def", "gaussian_filter", "(", "input", ",", "win", ")", ":", "\n", "    ", "r\"\"\" Blur input with 1-D kernel\n    Args:\n        input (torch.Tensor): a batch of tensors to be blured\n        window (torch.Tensor): 1-D gauss kernel\n\n    Returns:\n        torch.Tensor: blured tensors\n    \"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "win", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "C", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "win", ".", "transpose", "(", "2", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "C", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._ssim": [[41, 85], ["win.to.to", "pt_ms_ssim.gaussian_filter", "pt_ms_ssim.gaussian_filter", "gaussian_filter.pow", "gaussian_filter.pow", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "torch.flatten().mean", "pt_ms_ssim.gaussian_filter", "pt_ms_ssim.gaussian_filter", "pt_ms_ssim.gaussian_filter", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.gaussian_filter"], ["", "def", "_ssim", "(", "X", ",", "Y", ",", "\n", "data_range", ",", "\n", "win", ",", "\n", "size_average", "=", "True", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ")", ":", "\n", "\n", "    ", "r\"\"\" Calculate ssim index for X and Y\n\n    Args:\n        X (torch.Tensor): images\n        Y (torch.Tensor): images\n        win (torch.Tensor): 1-D gauss kernel\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n\n    Returns:\n        torch.Tensor: ssim results.\n    \"\"\"", "\n", "K1", ",", "K2", "=", "K", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "X", ".", "shape", "\n", "compensation", "=", "1.0", "\n", "\n", "C1", "=", "(", "K1", "*", "data_range", ")", "**", "2", "\n", "C2", "=", "(", "K2", "*", "data_range", ")", "**", "2", "\n", "\n", "win", "=", "win", ".", "to", "(", "X", ".", "device", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "mu1", "=", "gaussian_filter", "(", "X", ",", "win", ")", "\n", "mu2", "=", "gaussian_filter", "(", "Y", ",", "win", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "compensation", "*", "(", "gaussian_filter", "(", "X", "*", "X", ",", "win", ")", "-", "mu1_sq", ")", "\n", "sigma2_sq", "=", "compensation", "*", "(", "gaussian_filter", "(", "Y", "*", "Y", ",", "win", ")", "-", "mu2_sq", ")", "\n", "sigma12", "=", "compensation", "*", "(", "gaussian_filter", "(", "X", "*", "Y", ",", "win", ")", "-", "mu1_mu2", ")", "\n", "\n", "cs_map", "=", "(", "2", "*", "sigma12", "+", "C2", ")", "/", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", "# set alpha=beta=gamma=1", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "/", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", ")", "*", "cs_map", "\n", "\n", "ssim_per_channel", "=", "torch", ".", "flatten", "(", "ssim_map", ",", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "cs", "=", "torch", ".", "flatten", "(", "cs_map", ",", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "return", "ssim_per_channel", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ssim": [[87, 142], ["pt_ms_ssim._ssim", "len", "ValueError", "ValueError", "ValueError", "ValueError", "pt_ms_ssim._fspecial_gauss_1d", "win.repeat.repeat", "torch.relu", "torch.relu", "torch.relu.mean", "torch.relu.mean", "X.type", "Y.type"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._ssim", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._fspecial_gauss_1d"], ["", "def", "ssim", "(", "X", ",", "Y", ",", "\n", "data_range", "=", "1.0", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "win", "=", "None", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ",", "\n", "nonnegative_ssim", "=", "True", ")", ":", "\n", "    ", "r\"\"\" interface of ssim\n    Args:\n        X (torch.Tensor): a batch of images, (N,C,H,W)\n        Y (torch.Tensor): a batch of images, (N,C,H,W)\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n        win_size: (int, optional): the size of gauss kernel\n        win_sigma: (float, optional): sigma of normal distribution\n        win (torch.Tensor, optional): 1-D gauss kernel. if None, a new kernel will be created according to win_size and win_sigma\n        K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n        nonnegative_ssim (bool, optional): force the ssim response to be nonnegative with relu\n\n    Returns:\n        torch.Tensor: ssim results\n    \"\"\"", "\n", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should be 4-d tensors.'", ")", "\n", "\n", "", "if", "not", "X", ".", "type", "(", ")", "==", "Y", ".", "type", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should have the same dtype.'", ")", "\n", "\n", "", "if", "not", "X", ".", "shape", "==", "Y", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should have the same shape.'", ")", "\n", "\n", "", "if", "win", "is", "not", "None", ":", "# set win_size", "\n", "        ", "win_size", "=", "win", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "(", "win_size", "%", "2", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Window size should be odd.'", ")", "\n", "\n", "", "if", "win", "is", "None", ":", "\n", "        ", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", "\n", "win", "=", "win", ".", "repeat", "(", "X", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "ssim_per_channel", ",", "cs", "=", "_ssim", "(", "X", ",", "Y", ",", "\n", "data_range", "=", "data_range", ",", "\n", "win", "=", "win", ",", "\n", "size_average", "=", "False", ",", "\n", "K", "=", "K", ")", "\n", "if", "nonnegative_ssim", ":", "\n", "        ", "ssim_per_channel", "=", "torch", ".", "relu", "(", "ssim_per_channel", ")", "\n", "\n", "", "if", "size_average", ":", "\n", "        ", "return", "ssim_per_channel", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_per_channel", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim.ms_ssim": [[144, 217], ["min", "torch.FloatTensor().to", "torch.FloatTensor().to", "range", "torch.relu", "torch.relu", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "len", "ValueError", "ValueError", "ValueError", "ValueError", "pt_ms_ssim._fspecial_gauss_1d", "win.repeat.repeat", "pt_ms_ssim._ssim", "torch.prod.mean", "torch.prod.mean", "F.avg_pool2d.type", "F.avg_pool2d.type", "torch.FloatTensor", "torch.FloatTensor", "mcs.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.FloatTensor().to.view", "torch.relu", "torch.relu"], "function", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._fspecial_gauss_1d", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_ms_ssim._ssim"], ["", "", "def", "ms_ssim", "(", "X", ",", "Y", ",", "\n", "data_range", "=", "1.0", ",", "\n", "size_average", "=", "True", ",", "\n", "win_size", "=", "11", ",", "\n", "win_sigma", "=", "1.5", ",", "\n", "win", "=", "None", ",", "\n", "weights", "=", "None", ",", "\n", "K", "=", "(", "0.01", ",", "0.03", ")", ")", ":", "\n", "\n", "    ", "r\"\"\" interface of ms-ssim\n    Args:\n        X (torch.Tensor): a batch of images, (N,C,H,W)\n        Y (torch.Tensor): a batch of images, (N,C,H,W)\n        data_range (float or int, optional): value range of input images. (usually 1.0 or 255)\n        size_average (bool, optional): if size_average=True, ssim of all images will be averaged as a scalar\n        win_size: (int, optional): the size of gauss kernel\n        win_sigma: (float, optional): sigma of normal distribution\n        win (torch.Tensor, optional): 1-D gauss kernel. if None, a new kernel will be created according to win_size and win_sigma\n        weights (list, optional): weights for different levels\n        K (list or tuple, optional): scalar constants (K1, K2). Try a larger K2 constant (e.g. 0.4) if you get a negative or NaN results.\n    Returns:\n        torch.Tensor: ms-ssim results\n    \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should be 4-d tensors.'", ")", "\n", "\n", "", "if", "not", "X", ".", "type", "(", ")", "==", "Y", ".", "type", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should have the same dtype.'", ")", "\n", "\n", "", "if", "not", "X", ".", "shape", "==", "Y", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images should have the same dimensions.'", ")", "\n", "\n", "", "if", "win", "is", "not", "None", ":", "# set win_size", "\n", "        ", "win_size", "=", "win", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "(", "win_size", "%", "2", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Window size should be odd.'", ")", "\n", "\n", "", "smaller_side", "=", "min", "(", "X", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "assert", "smaller_side", ">", "(", "win_size", "-", "1", ")", "*", "(", "2", "**", "4", ")", ",", "\"Image size should be larger than %d due to the 4 downsamplings in ms-ssim\"", "%", "(", "(", "win_size", "-", "1", ")", "*", "(", "2", "**", "4", ")", ")", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "weights", "=", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", "\n", "", "weights", "=", "torch", ".", "FloatTensor", "(", "weights", ")", ".", "to", "(", "X", ".", "device", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "if", "win", "is", "None", ":", "\n", "        ", "win", "=", "_fspecial_gauss_1d", "(", "win_size", ",", "win_sigma", ")", "\n", "win", "=", "win", ".", "repeat", "(", "X", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "levels", "=", "weights", ".", "shape", "[", "0", "]", "\n", "mcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "levels", ")", ":", "\n", "        ", "ssim_per_channel", ",", "cs", "=", "_ssim", "(", "X", ",", "Y", ",", "\n", "win", "=", "win", ",", "\n", "data_range", "=", "data_range", ",", "\n", "size_average", "=", "False", ",", "\n", "K", "=", "K", ")", "\n", "\n", "if", "i", "<", "levels", "-", "1", ":", "\n", "            ", "mcs", ".", "append", "(", "torch", ".", "relu", "(", "cs", ")", ")", "\n", "padding", "=", "(", "X", ".", "shape", "[", "2", "]", "%", "2", ",", "X", ".", "shape", "[", "3", "]", "%", "2", ")", "\n", "X", "=", "F", ".", "avg_pool2d", "(", "X", ",", "kernel_size", "=", "2", ",", "padding", "=", "padding", ")", "\n", "Y", "=", "F", ".", "avg_pool2d", "(", "Y", ",", "kernel_size", "=", "2", ",", "padding", "=", "padding", ")", "\n", "\n", "", "", "ssim_per_channel", "=", "torch", ".", "relu", "(", "ssim_per_channel", ")", "# (batch, channel)", "\n", "mcs_and_ssim", "=", "torch", ".", "stack", "(", "mcs", "+", "[", "ssim_per_channel", "]", ",", "dim", "=", "0", ")", "# (level, batch, channel)", "\n", "ms_ssim_val", "=", "torch", ".", "prod", "(", "mcs_and_ssim", "**", "weights", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ms_ssim_val", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ms_ssim_val", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.RAdam.__init__": [[7, 24], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "if", "isinstance", "(", "params", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "params", ")", ">", "0", "and", "isinstance", "(", "params", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "for", "param", "in", "params", ":", "\n", "                ", "if", "'betas'", "in", "param", "and", "(", "param", "[", "'betas'", "]", "[", "0", "]", "!=", "betas", "[", "0", "]", "or", "param", "[", "'betas'", "]", "[", "1", "]", "!=", "betas", "[", "1", "]", ")", ":", "\n", "                    ", "param", "[", "'buffer'", "]", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "", "", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", ")", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.RAdam.__setstate__": [[25, 27], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.RAdam.step": [[28, 95], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "group", "[", "'buffer'", "]", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.PlainRAdam.__init__": [[98, 112], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.PlainRAdam.__setstate__": [[113, 115], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.PlainRAdam.step": [[116, 171], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.AdamW.__init__": [[175, 188], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "warmup", "=", "warmup", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.AdamW.__setstate__": [[189, 191], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.radam.AdamW.step": [[192, 245], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.__init__": [[13, 28], ["dict", "pt_rangelars.Lookahead.defaults.update", "collections.defaultdict", "dict.items", "ValueError", "ValueError", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update"], ["    ", "def", "__init__", "(", "self", ",", "base_optimizer", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "defaults", "=", "dict", "(", "lookahead_alpha", "=", "alpha", ",", "lookahead_k", "=", "k", ",", "lookahead_step", "=", "0", ")", "\n", "self", ".", "base_optimizer", "=", "base_optimizer", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "\n", "self", ".", "defaults", "=", "base_optimizer", ".", "defaults", "\n", "self", ".", "defaults", ".", "update", "(", "defaults", ")", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "# manually add our defaults to the param groups", "\n", "for", "name", ",", "default", "in", "defaults", ".", "items", "(", ")", ":", "\n", "            ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.update_slow": [[29, 40], ["slow.add_", "fast_p.data.copy_", "torch.empty_like", "param_state[].copy_"], "methods", ["None"], ["", "", "", "def", "update_slow", "(", "self", ",", "group", ")", ":", "\n", "        ", "for", "fast_p", "in", "group", "[", "\"params\"", "]", ":", "\n", "            ", "if", "fast_p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "param_state", "=", "self", ".", "state", "[", "fast_p", "]", "\n", "if", "'slow_buffer'", "not", "in", "param_state", ":", "\n", "                ", "param_state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "fast_p", ".", "data", ")", "\n", "param_state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "fast_p", ".", "data", ")", "\n", "", "slow", "=", "param_state", "[", "'slow_buffer'", "]", "\n", "slow", ".", "add_", "(", "group", "[", "'lookahead_alpha'", "]", ",", "fast_p", ".", "data", "-", "slow", ")", "\n", "fast_p", ".", "data", ".", "copy_", "(", "slow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.sync_lookahead": [[41, 44], ["pt_rangelars.Lookahead.update_slow"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.update_slow"], ["", "", "def", "sync_lookahead", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "self", ".", "update_slow", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.step": [[45, 54], ["pt_rangelars.Lookahead.base_optimizer.step", "pt_rangelars.Lookahead.update_slow"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.step", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.update_slow"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "# print(self.k)", "\n", "#assert id(self.param_groups) == id(self.base_optimizer.param_groups)", "\n", "        ", "loss", "=", "self", ".", "base_optimizer", ".", "step", "(", "closure", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lookahead_step'", "]", "+=", "1", "\n", "if", "group", "[", "'lookahead_step'", "]", "%", "group", "[", "'lookahead_k'", "]", "==", "0", ":", "\n", "                ", "self", ".", "update_slow", "(", "group", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict": [[55, 67], ["pt_rangelars.Lookahead.base_optimizer.state_dict", "isinstance", "id", "pt_rangelars.Lookahead.state.items"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "fast_state_dict", "=", "self", ".", "base_optimizer", ".", "state_dict", "(", ")", "\n", "slow_state", "=", "{", "\n", "(", "id", "(", "k", ")", "if", "isinstance", "(", "k", ",", "torch", ".", "Tensor", ")", "else", "k", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "state", ".", "items", "(", ")", "\n", "}", "\n", "fast_state", "=", "fast_state_dict", "[", "'state'", "]", "\n", "param_groups", "=", "fast_state_dict", "[", "'param_groups'", "]", "\n", "return", "{", "\n", "'state'", ":", "fast_state", ",", "\n", "'slow_state'", ":", "slow_state", ",", "\n", "'param_groups'", ":", "param_groups", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.load_state_dict": [[69, 94], ["pt_rangelars.Lookahead.base_optimizer.load_state_dict", "super().load_state_dict", "print", "collections.defaultdict", "pt_rangelars.Lookahead.defaults.items", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.load_state_dict", "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Lookahead.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "fast_state_dict", "=", "{", "\n", "'state'", ":", "state_dict", "[", "'state'", "]", ",", "\n", "'param_groups'", ":", "state_dict", "[", "'param_groups'", "]", ",", "\n", "}", "\n", "self", ".", "base_optimizer", ".", "load_state_dict", "(", "fast_state_dict", ")", "\n", "\n", "# We want to restore the slow state, but share param_groups reference", "\n", "# with base_optimizer. This is a bit redundant but least code", "\n", "slow_state_new", "=", "False", "\n", "if", "'slow_state'", "not", "in", "state_dict", ":", "\n", "            ", "print", "(", "'Loading state_dict from optimizer without Lookahead applied.'", ")", "\n", "state_dict", "[", "'slow_state'", "]", "=", "defaultdict", "(", "dict", ")", "\n", "slow_state_new", "=", "True", "\n", "", "slow_state_dict", "=", "{", "\n", "'state'", ":", "state_dict", "[", "'slow_state'", "]", ",", "\n", "'param_groups'", ":", "state_dict", "[", "'param_groups'", "]", ",", "# this is pointless but saves code", "\n", "}", "\n", "super", "(", "Lookahead", ",", "self", ")", ".", "load_state_dict", "(", "slow_state_dict", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "# make both ref same container", "\n", "if", "slow_state_new", ":", "\n", "# reapply defaults to catch missing lookahead specific ones", "\n", "            ", "for", "name", ",", "default", "in", "self", ".", "defaults", ".", "items", "(", ")", ":", "\n", "                ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                    ", "group", ".", "setdefault", "(", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__init__": [[103, 107], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "Ralamb", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__setstate__": [[108, 110], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Ralamb", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Ralamb.step": [[111, 196], ["closure", "p.grad.data.float", "p.data.float", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.float.clone", "p.data.float.clone.pow().sum().sqrt", "p.data.pow().sum().sqrt().clamp", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.clone.addcdiv_", "p.data.float.clone.add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "int", "p.data.float.clone.pow().sum", "p.data.pow().sum().sqrt", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.clone.pow", "p.data.pow().sum", "p.data.pow"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Ralamb does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# m_t", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# v_t", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "radam_step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "radam_step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "radam_step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "radam_step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "radam_step", "=", "p_data_fp32", ".", "clone", "(", ")", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "radam_step", ".", "addcdiv_", "(", "-", "radam_step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "radam_step", ".", "add_", "(", "-", "radam_step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "radam_norm", "=", "radam_step", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "weight_norm", "=", "p", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "clamp", "(", "0", ",", "10", ")", "\n", "if", "weight_norm", "==", "0", "or", "radam_norm", "==", "0", ":", "\n", "                    ", "trust_ratio", "=", "1", "\n", "", "else", ":", "\n", "                    ", "trust_ratio", "=", "weight_norm", "/", "radam_norm", "\n", "\n", "", "state", "[", "'weight_norm'", "]", "=", "weight_norm", "\n", "state", "[", "'adam_norm'", "]", "=", "radam_norm", "\n", "state", "[", "'trust_ratio'", "]", "=", "trust_ratio", "\n", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "p_data_fp32", ".", "addcdiv_", "(", "-", "radam_step_size", "*", "group", "[", "'lr'", "]", "*", "trust_ratio", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "radam_step_size", "*", "group", "[", "'lr'", "]", "*", "trust_ratio", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.LookaheadAdam": [[95, 98], ["Adam", "pt_rangelars.Lookahead"], "function", ["None"], ["", "", "", "", "", "def", "LookaheadAdam", "(", "params", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "     ", "adam", "=", "Adam", "(", "params", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "Lookahead", "(", "adam", ",", "alpha", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.extlibs.pt_rangelars.Over9000": [[203, 206], ["pt_rangelars.Ralamb", "pt_rangelars.Lookahead"], "function", ["None"], ["", "", "def", "Over9000", "(", "params", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "ralamb", "=", "Ralamb", "(", "params", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "Lookahead", "(", "ralamb", ",", "alpha", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.view_palette.palette_to_image": [[9, 28], ["Image.new", "Image.new.load", "enumerate", "isinstance", "range", "isinstance", "range", "len", "tuple", "int", "round"], "function", ["None"], ["def", "palette_to_image", "(", "palette", ")", ":", "\n", "    ", "from", "PIL", "import", "Image", "\n", "\n", "WIDTH", "=", "180", "\n", "HEIGHT_SEGMENT", "=", "20", "\n", "img", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "WIDTH", ",", "HEIGHT_SEGMENT", "*", "len", "(", "palette", ")", ")", ",", "\"black\"", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "i", ",", "color", "in", "enumerate", "(", "palette", ")", ":", "\n", "        ", "if", "isinstance", "(", "color", ",", "int", ")", ":", "\n", "            ", "b", "=", "(", "color", ">>", "0", ")", "%", "256", "\n", "g", "=", "(", "color", ">>", "8", ")", "%", "256", "\n", "r", "=", "(", "color", ">>", "16", ")", "%", "256", "\n", "color", "=", "(", "r", ",", "g", ",", "b", ")", "\n", "", "elif", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "color", "=", "tuple", "(", "int", "(", "round", "(", "k", "*", "255", ")", ")", "for", "k", "in", "color", ")", "\n", "", "for", "x", "in", "range", "(", "WIDTH", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "HEIGHT_SEGMENT", ")", ":", "\n", "                ", "pixels", "[", "x", ",", "y", "+", "i", "*", "HEIGHT_SEGMENT", "]", "=", "color", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.__init__": [[51, 117], ["glasbey.Glasbey.load_or_generate_color_table", "glasbey.Glasbey.check_validity_internal_palette", "os.path.dirname", "type", "os.path.isfile", "type", "glasbey.Glasbey.load_palette", "colorspacious.cspace_convert", "colorspacious.cspace_convert", "colorspacious.cspace_convert", "numpy.linalg.norm", "os.path.realpath", "type", "glasbey.Glasbey.check_validity_rbg_palette", "type", "len"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.load_or_generate_color_table", "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.check_validity_internal_palette", "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.load_palette", "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.check_validity_rbg_palette"], ["    ", "def", "__init__", "(", "self", ",", "\n", "base_palette", "=", "None", ",", "\n", "overwrite_base_palette", ":", "bool", "=", "False", ",", "\n", "no_black", ":", "bool", "=", "False", ",", "\n", "lightness_range", "=", "None", ",", "\n", "chroma_range", "=", "None", ",", "\n", "hue_range", "=", "None", ")", ":", "\n", "# Constants", "\n", "        ", "self", ".", "MAX", "=", "256", "\n", "self", ".", "NUM_COLORS", "=", "self", ".", "MAX", "*", "self", ".", "MAX", "*", "self", ".", "MAX", "\n", "self", ".", "LUT", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "+", "\"/rgb_cam02ucs_lut.npz\"", "\n", "\n", "self", ".", "overwrite_base_palette", "=", "overwrite_base_palette", "\n", "\n", "# Check input", "\n", "if", "type", "(", "base_palette", ")", "==", "str", ":", "\n", "            ", "assert", "os", ".", "path", ".", "isfile", "(", "base_palette", ")", ",", "\"file does not exist: {}\"", ".", "format", "(", "base_palette", ")", "\n", "", "elif", "type", "(", "base_palette", ")", "==", "list", ":", "\n", "            ", "assert", "self", ".", "check_validity_rbg_palette", "(", "base_palette", ")", ",", "\"Base palette must be in this format: [(255,255,255), ...]\"", "\n", "assert", "not", "self", ".", "overwrite_base_palette", ",", "\"base_palette is no file, cannot overwrite it!\"", "\n", "", "else", ":", "\n", "            ", "assert", "not", "self", ".", "overwrite_base_palette", ",", "\"no base_palette specified, cannot overwrite it!\"", "\n", "\n", "# Load colors", "\n", "", "self", ".", "colors", "=", "self", ".", "load_or_generate_color_table", "(", ")", "\n", "\n", "# Initialize base palette", "\n", "if", "type", "(", "base_palette", ")", "==", "str", ":", "\n", "            ", "self", ".", "base_palette", "=", "base_palette", "\n", "self", ".", "palette", "=", "self", ".", "load_palette", "(", "base_palette", ")", "\n", "self", ".", "palette", "=", "[", "self", ".", "colors", "[", "i", ",", ":", "]", "for", "i", "in", "self", ".", "palette", "]", "\n", "", "elif", "type", "(", "base_palette", ")", "==", "list", "and", "len", "(", "base_palette", ")", ">", "0", ":", "\n", "            ", "self", ".", "palette", "=", "[", "(", "rgb", "[", "0", "]", "*", "256", "+", "rgb", "[", "1", "]", ")", "*", "256", "+", "rgb", "[", "2", "]", "for", "rgb", "in", "base_palette", "]", "\n", "self", ".", "palette", "=", "[", "self", ".", "colors", "[", "i", ",", ":", "]", "for", "i", "in", "self", ".", "palette", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "palette", "=", "[", "self", ".", "colors", "[", "-", "1", ",", ":", "]", "]", "# white", "\n", "\n", "", "assert", "self", ".", "check_validity_internal_palette", "(", ")", ",", "\"Internal error during __init__: self.palette is poorly formatted.\"", "\n", "\n", "# Update self.colors", "\n", "# Exclude greys (values with low Chroma in JCh) and set lightness range,", "\n", "if", "lightness_range", "is", "not", "None", ":", "\n", "            ", "jch", "=", "cspace_convert", "(", "self", ".", "colors", ",", "\"CAM02-UCS\"", ",", "\"JCh\"", ")", "\n", "self", ".", "colors", "=", "self", ".", "colors", "[", "\n", "(", "jch", "[", ":", ",", "0", "]", ">=", "lightness_range", "[", "0", "]", ")", "&", "(", "jch", "[", ":", ",", "0", "]", "<=", "lightness_range", "[", "1", "]", ")", ",", ":", "\n", "]", "\n", "", "if", "chroma_range", "is", "not", "None", ":", "\n", "            ", "jch", "=", "cspace_convert", "(", "self", ".", "colors", ",", "\"CAM02-UCS\"", ",", "\"JCh\"", ")", "\n", "self", ".", "colors", "=", "self", ".", "colors", "[", "\n", "(", "jch", "[", ":", ",", "1", "]", ">=", "chroma_range", "[", "0", "]", ")", "&", "(", "jch", "[", ":", ",", "1", "]", "<=", "chroma_range", "[", "1", "]", ")", ",", ":", "\n", "]", "\n", "", "if", "hue_range", "is", "not", "None", ":", "\n", "            ", "jch", "=", "cspace_convert", "(", "self", ".", "colors", ",", "\"CAM02-UCS\"", ",", "\"JCh\"", ")", "\n", "if", "hue_range", "[", "0", "]", ">", "hue_range", "[", "1", "]", ":", "\n", "                ", "self", ".", "colors", "=", "self", ".", "colors", "[", "\n", "(", "jch", "[", ":", ",", "2", "]", ">=", "hue_range", "[", "0", "]", ")", "|", "(", "jch", "[", ":", ",", "2", "]", "<=", "hue_range", "[", "1", "]", ")", ",", ":", "\n", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "colors", "=", "self", ".", "colors", "[", "\n", "(", "jch", "[", ":", ",", "2", "]", ">=", "hue_range", "[", "0", "]", ")", "&", "(", "jch", "[", ":", ",", "2", "]", "<=", "hue_range", "[", "1", "]", ")", ",", ":", "\n", "]", "\n", "# Exclude colors that are close to black", "\n", "", "", "if", "no_black", ":", "\n", "            ", "MIN_DISTANCE_TO_BLACK", "=", "35", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "(", "self", ".", "colors", "-", "self", ".", "colors", "[", "0", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "colors", "=", "self", ".", "colors", "[", "d", ">", "MIN_DISTANCE_TO_BLACK", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.generate_palette": [[118, 156], ["ProgressBar().start", "range", "ProgressBar().start.finish", "glasbey.Glasbey.check_validity_internal_palette", "colorspacious.cspace_convert", "len", "colorspacious.cspace_convert", "numpy.ones", "numpy.linalg.norm", "numpy.minimum", "Percentage", "Bar", "ETA", "glasbey.Glasbey.generate_palette.update_distances"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.check_validity_internal_palette"], ["", "", "def", "generate_palette", "(", "self", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n        Return palette in sRGB1 format.\n\n        If the palette isn't long enough, new entries are generated.\n        \"\"\"", "\n", "if", "size", "<=", "len", "(", "self", ".", "palette", ")", ":", "\n", "            ", "return", "cspace_convert", "(", "self", ".", "palette", "[", "0", ":", "size", "]", ",", "\"CAM02-UCS\"", ",", "\"sRGB1\"", ")", "\n", "\n", "# Initialize distances array", "\n", "", "num_colors", "=", "self", ".", "colors", ".", "shape", "[", "0", "]", "\n", "distances", "=", "np", ".", "ones", "(", "shape", "=", "(", "num_colors", ",", "1", ")", ")", "*", "1000", "\n", "\n", "# A function to recompute minimum distances from palette to all colors", "\n", "def", "update_distances", "(", "colors", ",", "color", ")", ":", "\n", "            ", "d", "=", "np", ".", "linalg", ".", "norm", "(", "(", "colors", "-", "color", ")", ",", "axis", "=", "1", ")", "\n", "np", ".", "minimum", "(", "distances", ",", "d", ".", "reshape", "(", "distances", ".", "shape", ")", ",", "distances", ")", "\n", "\n", "# Build progress bar", "\n", "", "widgets", "=", "[", "\"Generating palette: \"", ",", "Percentage", "(", ")", ",", "\" \"", ",", "Bar", "(", ")", ",", "\" \"", ",", "ETA", "(", ")", "]", "\n", "pbar", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "size", ")", ".", "start", "(", ")", "\n", "# Update distances for the colors that are already in the palette", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "palette", ")", "-", "1", ")", ":", "\n", "            ", "update_distances", "(", "self", ".", "colors", ",", "self", ".", "palette", "[", "i", "]", ")", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "# Iteratively build palette", "\n", "", "while", "len", "(", "self", ".", "palette", ")", "<", "size", ":", "\n", "            ", "update_distances", "(", "self", ".", "colors", ",", "self", ".", "palette", "[", "-", "1", "]", ")", "\n", "self", ".", "palette", ".", "append", "(", "self", ".", "colors", "[", "np", ".", "argmax", "(", "distances", ")", ",", ":", "]", ")", "\n", "pbar", ".", "update", "(", "len", "(", "self", ".", "palette", ")", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "assert", "self", ".", "check_validity_internal_palette", "(", ")", ",", "\"Internal error during extend_palette: self.palette is poorly formatted.\"", "\n", "\n", "if", "self", ".", "overwrite_base_palette", ":", "\n", "            ", "self", ".", "save_palette", "(", "palette", "=", "self", ".", "palette", ",", "path", "=", "self", ".", "base_palette", ",", "format", "=", "\"byte\"", ",", "overwrite", "=", "True", ")", "\n", "\n", "", "return", "cspace_convert", "(", "self", ".", "palette", "[", "0", ":", "size", "]", ",", "\"CAM02-UCS\"", ",", "\"sRGB1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.load_or_generate_color_table": [[157, 167], ["numpy.load", "glasbey.Glasbey.generate_color_table", "numpy.savez_compressed"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.generate_color_table"], ["", "def", "load_or_generate_color_table", "(", "self", ")", ":", "\n", "# Load or generate RGB to CAM02-UCS color lookup table", "\n", "        ", "try", ":", "\n", "            ", "colors", "=", "np", ".", "load", "(", "self", ".", "LUT", ")", "[", "\"lut\"", "]", "\n", "# Sanity check", "\n", "assert", "colors", ".", "shape", "==", "(", "self", ".", "NUM_COLORS", ",", "3", ")", "\n", "", "except", ":", "\n", "            ", "colors", "=", "self", ".", "generate_color_table", "(", ")", "\n", "np", ".", "savez_compressed", "(", "self", ".", "LUT", ",", "lut", "=", "colors", ")", "\n", "", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.generate_color_table": [[168, 194], ["ProgressBar().start", "numpy.empty", "range", "ProgressBar().start.finish", "Percentage", "Bar", "ETA", "range", "ProgressBar", "range", "colorspacious.cspace_convert", "ProgressBar().start.update"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.Meter.AverageMeter.update"], ["", "def", "generate_color_table", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a lookup table with all possible RGB colors, encoded in\n        perceptually uniform CAM02-UCS color space.\n\n        Table rows correspond to individual RGB colors, columns correspond to J',\n        a', and b' components. The table is stored as a NumPy array.\n        \"\"\"", "\n", "\n", "widgets", "=", "[", "\"Generating color table: \"", ",", "Percentage", "(", ")", ",", "\" \"", ",", "Bar", "(", ")", ",", "\" \"", ",", "ETA", "(", ")", "]", "\n", "pbar", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "(", "self", ".", "MAX", "*", "self", ".", "MAX", ")", ")", ".", "start", "(", ")", "\n", "\n", "i", "=", "0", "\n", "colors", "=", "np", ".", "empty", "(", "shape", "=", "(", "self", ".", "NUM_COLORS", ",", "3", ")", ",", "dtype", "=", "float", ")", "\n", "for", "r", "in", "range", "(", "self", ".", "MAX", ")", ":", "\n", "            ", "for", "g", "in", "range", "(", "self", ".", "MAX", ")", ":", "\n", "                ", "d", "=", "i", "*", "self", ".", "MAX", "\n", "for", "b", "in", "range", "(", "self", ".", "MAX", ")", ":", "\n", "                    ", "colors", "[", "d", "+", "b", ",", ":", "]", "=", "(", "r", ",", "g", ",", "b", ")", "\n", "", "colors", "[", "d", ":", "d", "+", "self", ".", "MAX", "]", "=", "cspace_convert", "(", "\n", "colors", "[", "d", ":", "d", "+", "self", ".", "MAX", "]", ",", "\"sRGB255\"", ",", "\"CAM02-UCS\"", "\n", ")", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "i", "+=", "1", "\n", "", "", "pbar", ".", "finish", "(", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.load_palette": [[195, 207], ["os.path.isfile", "list", "open", "list.append", "int", "line.strip().split", "line.strip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_palette", "(", "path", ")", ":", "\n", "        ", "\"\"\"\n        Expected format: sRGB255\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "palette", "=", "list", "(", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "rgb", "=", "[", "int", "(", "c", ")", "for", "c", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "]", "\n", "palette", ".", "append", "(", "(", "rgb", "[", "0", "]", "*", "256", "+", "rgb", "[", "1", "]", ")", "*", "256", "+", "rgb", "[", "2", "]", ")", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.save_palette": [[208, 228], ["open", "os.path.isfile", "format.lower", "tuple", "file.write", "format.lower", "ValueError", "file.write", "int", "round", "abs"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write", "home.repos.pwc.inspect_result.trougnouf_manypriors.libs.json_saver.JSONSaver.write"], ["", "@", "staticmethod", "\n", "def", "save_palette", "(", "palette", ",", "path", ":", "str", ",", "format", ":", "str", "=", "\"byte\"", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Output format examples (white):\n            * byte:  255,255,255  (sRGB255)\n            * float: 1.000000,1.000000,1.000000\n        \"\"\"", "\n", "if", "not", "overwrite", ":", "\n", "            ", "assert", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "if", "format", ".", "lower", "(", ")", "==", "\"byte\"", ":", "\n", "                ", "for", "color", "in", "palette", ":", "\n", "                    ", "rgb255", "=", "tuple", "(", "int", "(", "round", "(", "k", "*", "255", ")", ")", "for", "k", "in", "color", ")", "\n", "file", ".", "write", "(", "\"{},{},{}\\n\"", ".", "format", "(", "*", "rgb255", ")", ")", "\n", "", "", "elif", "format", ".", "lower", "(", ")", "==", "\"float\"", ":", "\n", "                ", "for", "color", "in", "palette", ":", "\n", "                    ", "file", ".", "write", "(", "\"{:.6f},{:.6f},{:.6f}\\n\"", ".", "format", "(", "*", "(", "abs", "(", "k", ")", "for", "k", "in", "color", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Format doesn't match. Choose between 'byte' and 'float'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.check_validity_internal_palette": [[229, 236], ["type", "len", "type"], "methods", ["None"], ["", "", "", "def", "check_validity_internal_palette", "(", "self", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "palette", ")", "!=", "list", ":", "\n", "            ", "return", "False", "\n", "", "for", "color", "in", "self", ".", "palette", ":", "\n", "            ", "if", "len", "(", "color", ")", "!=", "3", "or", "type", "(", "color", ")", "!=", "np", ".", "ndarray", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.check_validity_rbg_palette": [[237, 248], ["type", "len", "type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_validity_rbg_palette", "(", "palette", ")", ":", "\n", "        ", "if", "type", "(", "palette", ")", "!=", "list", ":", "\n", "            ", "return", "False", "\n", "", "for", "color", "in", "palette", ":", "\n", "            ", "if", "len", "(", "color", ")", "!=", "3", "or", "type", "(", "color", ")", "!=", "tuple", ":", "\n", "                ", "return", "False", "\n", "", "if", "not", "0", "<=", "color", "[", "0", "]", "<=", "255", "and", "0", "<=", "color", "[", "1", "]", "<=", "255", "and", "0", "<=", "color", "[", "2", "]", "<=", "255", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.convert_palette_to_rgb": [[249, 255], ["tuple", "int", "round"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "convert_palette_to_rgb", "(", "palette", ")", ":", "\n", "        ", "\"\"\"\n        Convert palette from sRGB1 to sRGB255.\n        \"\"\"", "\n", "return", "[", "tuple", "(", "int", "(", "round", "(", "k", "*", "255", ")", ")", "for", "k", "in", "color", ")", "for", "color", "in", "palette", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.glasbey.Glasbey.view_palette": [[256, 265], ["palette_to_image", "palette_to_image.show"], "methods", ["home.repos.pwc.inspect_result.trougnouf_manypriors.glasbey.view_palette.palette_to_image"], ["", "@", "staticmethod", "\n", "def", "view_palette", "(", "palette", ")", ":", "\n", "        ", "\"\"\"\n        Show palette in imagemagick window.\n\n        Expected format: sRGB1 or sRGB255\n        \"\"\"", "\n", "img", "=", "palette_to_image", "(", "palette", ")", "\n", "img", ".", "show", "(", ")", "\n", "\n"]]}