{"home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.setup.read": [[7, 9], ["open().read", "open", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.setup.read"], ["def", "read", "(", "fname", ":", "str", ")", "->", "str", ":", "\n", "    ", "return", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "fname", ")", ")", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.setup.find_version": [[11, 21], ["setup.read", "re.match", "re.match.group"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.setup.read"], ["", "def", "find_version", "(", ")", "->", "str", ":", "\n", "    ", "version_file", "=", "read", "(", "\"catenets/version.py\"", ")", "\n", "version_re", "=", "r\"__version__ = \\\"(?P<version>.+)\\\"\"", "\n", "version_raw", "=", "re", ".", "match", "(", "version_re", ",", "version_file", ")", "\n", "\n", "if", "version_raw", "is", "None", ":", "\n", "        ", "return", "\"0.0.1\"", "\n", "\n", "", "version", "=", "version_raw", ".", "group", "(", "\"version\"", ")", "\n", "return", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.run_experiments_AISTATS.init_arg": [[16, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "init_arg", "(", ")", "->", "Any", ":", "\n", "# arg parser if script is run from shell", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "default", "=", "\"simulation\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--setting\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--models\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--file_name\"", ",", "default", "=", "\"results\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_repeats\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.run_experiments_benchmarks_NeurIPS.init_arg": [[20, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "init_arg", "(", ")", "->", "Any", ":", "\n", "# arg parser", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--setting\"", ",", "default", "=", "\"C\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "default", "=", "'ihdp'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--file_name\"", ",", "default", "=", "\"results\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_exp\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_reps'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_trans'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--simu_num'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.None.run_experiments_inductive_bias_NeurIPS.init_arg": [[20, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "range"], "function", ["None"], ["def", "init_arg", "(", ")", "->", "Any", ":", "\n", "# arg parser", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--setup\"", ",", "default", "=", "\"A\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--file_name\"", ",", "default", "=", "\"results\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_exp\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_0\"", ",", "default", "=", "2000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--models\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--n1_loop\"", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "200", ",", "2000", ",", "500", "]", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--rho_loop\"", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "0.8", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--factual_eval\"", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--simu_nums'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "x", "for", "x", "in", "range", "(", "1", ",", "78", ")", "]", ",", "type", "=", "int", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.ihdp_experiments_catenets.do_ihdp_experiments": [[31, 108], ["open", "csv.writer", "csv.writer.writerow", "catenets.datasets.dataset_ihdp.load_raw", "isinstance", "open.close", "os.path.isdir", "os.makedirs", "list", "isinstance", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.prepare_ihdp_data", "numpy.var", "numpy.var", "numpy.var", "range", "ValueError", "range", "ValueError", "models.items", "csv.writer.writerow", "models.keys", "print", "sklearn.clone", "sklearn.clone.set_params", "sklearn.clone.fit", "sklearn.clone.predict", "sklearn.clone.predict", "pehe_in.append", "pehe_out.append", "models.keys", "sklearn.clone.set_params", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_raw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.prepare_ihdp_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["def", "do_ihdp_experiments", "(", "\n", "n_exp", ":", "Union", "[", "int", ",", "list", "]", "=", "100", ",", "\n", "n_reps", ":", "int", "=", "5", ",", "\n", "file_name", ":", "str", "=", "\"ihdp_all\"", ",", "\n", "model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "setting", ":", "str", "=", "\"original\"", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "", "if", "(", "setting", "==", "'original'", ")", "or", "(", "setting", "==", "'C'", ")", ":", "\n", "        ", "setting", "=", "'C'", "\n", "", "elif", "(", "setting", "==", "'modified'", ")", "or", "(", "setting", "==", "'D'", ")", ":", "\n", "        ", "setting", "=", "'D'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Setting should be one of original or modified. You passed {}.'", ".", "format", "(", "\n", "setting", ")", ")", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "setting", "+", "\".csv\"", ")", ",", "\"w\"", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "'exp'", ",", "'run'", ",", "'cate_var_in'", ",", "'cate_var_out'", ",", "'y_var_in'", "]", "+", "[", "name", "+", "\"_in\"", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "name", "+", "\"_out\"", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "# get data", "\n", "data_train", ",", "data_test", "=", "load_raw", "(", "DATA_DIR", ")", "\n", "\n", "if", "isinstance", "(", "n_exp", ",", "int", ")", ":", "\n", "        ", "experiment_loop", "=", "list", "(", "range", "(", "1", ",", "n_exp", "+", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "n_exp", ",", "list", ")", ":", "\n", "        ", "experiment_loop", "=", "n_exp", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"n_exp should be either an integer or a list of integers.\"", ")", "\n", "\n", "", "for", "i_exp", "in", "experiment_loop", ":", "\n", "# get data", "\n", "        ", "data_exp", "=", "get_one_data_set", "(", "data_train", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "data_exp_test", "=", "get_one_data_set", "(", "data_test", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "cate_true_in", ",", "X_t", ",", "cate_true_out", "=", "prepare_ihdp_data", "(", "\n", "data_exp", ",", "data_exp_test", ",", "setting", "=", "setting", "\n", ")", "\n", "\n", "# compute some stats", "\n", "cate_var_in", "=", "np", ".", "var", "(", "cate_true_in", ")", "\n", "cate_var_out", "=", "np", ".", "var", "(", "cate_true_out", ")", "\n", "y_var_in", "=", "np", ".", "var", "(", "y", ")", "\n", "\n", "for", "k", "in", "range", "(", "n_reps", ")", ":", "\n", "            ", "pehe_in", "=", "[", "]", "\n", "pehe_out", "=", "[", "]", "\n", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f\"Experiment {i_exp}, run {k}, with {model_name}\"", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "estimator_temp", ".", "set_params", "(", "seed", "=", "k", ")", "\n", "if", "model_params", "is", "not", "None", ":", "\n", "                    ", "estimator_temp", ".", "set_params", "(", "**", "model_params", ")", "\n", "\n", "# fit estimator", "\n", "", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_in", "=", "estimator_temp", ".", "predict", "(", "X", ",", "return_po", "=", "False", ")", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe_in", ".", "append", "(", "eval_root_mse", "(", "cate_pred_in", ",", "cate_true_in", ")", ")", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_true_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "[", "i_exp", ",", "k", ",", "cate_var_in", ",", "cate_var_out", ",", "y_var_in", "]", "+", "pehe_in", "+", "pehe_out", ")", "\n", "\n", "", "", "out_file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.twins_experiments_catenets.do_twins_experiment_loop": [[33, 40], ["print", "twins_experiments_catenets.do_twins_experiments"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.do_twins_experiments"], ["def", "do_twins_experiment_loop", "(", "n_train_loop", "=", "[", "500", ",", "1000", ",", "2000", ",", "5000", ",", "None", "]", ",", "\n", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'twins'", ",", "models", ":", "dict", "=", "None", ",", "\n", "test_size", "=", "0.5", ")", ":", "\n", "    ", "for", "n", "in", "n_train_loop", ":", "\n", "        ", "print", "(", "\"Running twins experiments for subset_train {}\"", ".", "format", "(", "n", ")", ")", "\n", "do_twins_experiments", "(", "n_exp", "=", "n_exp", ",", "file_name", "=", "file_name", ",", "models", "=", "models", ",", "subset_train", "=", "n", ",", "\n", "test_size", "=", "test_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.twins_experiments_catenets.do_twins_experiments": [[42, 85], ["open", "csv.writer", "csv.writer.writerow", "range", "open.close", "os.path.isdir", "os.makedirs", "twins_experiments_catenets.prepare_twins", "models.items", "csv.writer.writerow", "models.keys", "print", "sklearn.clone", "sklearn.clone.set_params", "sklearn.clone.fit", "sklearn.clone.predict", "pehe_out.append", "catenets.experiment_utils.base.eval_root_mse", "str", "str"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.twins_experiments_catenets.prepare_twins", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["", "", "def", "do_twins_experiments", "(", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'twins'", ",", "\n", "models", ":", "dict", "=", "None", ",", "subset_train", ":", "int", "=", "None", ",", "\n", "prop_treated", "=", "0.5", ",", "test_size", "=", "0.5", ")", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "str", "(", "prop_treated", ")", "+", "SEP", "+", "str", "(", "subset_train", ")", "+", "'.csv'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "name", "+", "'_pehe'", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "\n", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "for", "i_exp", "in", "range", "(", "n_exp", ")", ":", "\n", "        ", "pehe_out", "=", "[", "]", "\n", "\n", "# get data", "\n", "X", ",", "X_t", ",", "y", ",", "w", ",", "y0_out", ",", "y1_out", "=", "prepare_twins", "(", "seed", "=", "i_exp", ",", "treat_prop", "=", "prop_treated", ",", "\n", "subset_train", "=", "subset_train", ",", "\n", "test_size", "=", "test_size", ")", "\n", "\n", "ite_out", "=", "y1_out", "-", "y0_out", "\n", "\n", "# split data", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Experiment {} with {}\"", ".", "format", "(", "i_exp", ",", "model_name", ")", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "estimator_temp", ".", "set_params", "(", "**", "{", "'binary_y'", ":", "True", ",", "'seed'", ":", "i_exp", "}", ")", "\n", "\n", "# fit estimator", "\n", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ")", "\n", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "ite_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "pehe_out", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.twins_experiments_catenets.prepare_twins": [[88, 152], ["os.path.exists", "os.path.isdir", "os.makedirs", "str", "print", "pandas.read_csv", "numpy.asarray", "numpy.asarray().reshape", "numpy.asarray().reshape", "pandas.read_csv", "numpy.asarray", "numpy.asarray().reshape", "numpy.asarray().reshape", "print", "numpy.random.seed", "catenets.datasets.load", "sklearn.model_selection.train_test_split", "pandas.DataFrame", "pd.DataFrame.to_csv", "pandas.DataFrame", "pd.DataFrame.to_csv", "str", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "str", "str"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["", "def", "prepare_twins", "(", "treat_prop", "=", "0.5", ",", "seed", "=", "42", ",", "test_size", "=", "0.5", ",", "\n", "subset_train", ":", "int", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "EXP_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "EXP_DIR", ")", "\n", "\n", "", "out_base", "=", "'preprocessed'", "+", "SEP", "+", "str", "(", "treat_prop", ")", "+", "SEP", "+", "str", "(", "subset_train", ")", "+", "SEP", "+", "str", "(", "test_size", ")", "+", "SEP", "+", "str", "(", "seed", ")", "\n", "outfile_train", "=", "EXP_DIR", "/", "(", "out_base", "+", "SEP", "+", "'train.csv'", ")", "\n", "outfile_test", "=", "EXP_DIR", "/", "(", "out_base", "+", "SEP", "+", "'test.csv'", ")", "\n", "\n", "feat_list", "=", "[", "\n", "'dmage'", ",", "'mpcb'", ",", "'cigar'", ",", "'drink'", ",", "'wtgain'", ",", "'gestat'", ",", "'dmeduc'", ",", "\n", "'nprevist'", ",", "'dmar'", ",", "'anemia'", ",", "'cardiac'", ",", "'lung'", ",", "\n", "'diabetes'", ",", "'herpes'", ",", "'hydra'", ",", "'hemo'", ",", "'chyper'", ",", "'phyper'", ",", "\n", "'eclamp'", ",", "'incervix'", ",", "'pre4000'", ",", "'dtotord'", ",", "'preterm'", ",", "\n", "'renal'", ",", "'rh'", ",", "'uterine'", ",", "'othermr'", ",", "'adequacy_1'", ",", "'adequacy_2'", ",", "\n", "'adequacy_3'", ",", "'pldel_1'", ",", "'pldel_2'", ",", "'pldel_3'", ",", "\n", "'pldel_4'", ",", "'pldel_5'", ",", "'resstatb_1'", ",", "'resstatb_2'", ",", "'resstatb_3'", ",", "'resstatb_4'", "\n", "]", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "outfile_train", ")", ":", "\n", "        ", "print", "(", "'Reading existing preprocessed twins file {}'", ".", "format", "(", "out_base", ")", ")", "\n", "# use existing file", "\n", "df_train", "=", "pd", ".", "read_csv", "(", "outfile_train", ")", "\n", "X", "=", "onp", ".", "asarray", "(", "df_train", "[", "feat_list", "]", ")", "\n", "y", "=", "onp", ".", "asarray", "(", "df_train", "[", "[", "'y'", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "w", "=", "onp", ".", "asarray", "(", "df_train", "[", "[", "'w'", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "df_test", "=", "pd", ".", "read_csv", "(", "outfile_test", ")", "\n", "X_t", "=", "onp", ".", "asarray", "(", "df_test", "[", "feat_list", "]", ")", "\n", "y0_out", "=", "onp", ".", "asarray", "(", "df_test", "[", "[", "'y0'", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "y1_out", "=", "onp", ".", "asarray", "(", "df_test", "[", "[", "'y1'", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "", "else", ":", "\n", "# create file", "\n", "        ", "print", "(", "'Creating preprocessed twins file {}'", ".", "format", "(", "out_base", ")", ")", "\n", "onp", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "x", ",", "w", ",", "y", ",", "pos", ",", "_", ",", "_", "=", "load", "(", "'twins'", ",", "seed", "=", "seed", ",", "treat_prop", "=", "treat_prop", ",", "train_ratio", "=", "1", ")", "\n", "\n", "X", ",", "X_t", ",", "y", ",", "y_t", ",", "w", ",", "w_t", ",", "y0_in", ",", "y0_out", ",", "y1_in", ",", "y1_out", "=", "train_test_split", "(", "x", ",", "y", ",", "w", ",", "\n", "pos", "[", ":", ",", "0", "]", ",", "\n", "pos", "[", ":", ",", "1", "]", ",", "\n", "test_size", "=", "test_size", ",", "\n", "random_state", "=", "seed", ")", "\n", "if", "subset_train", "is", "not", "None", ":", "\n", "            ", "X", ",", "y", ",", "w", ",", "y0_in", ",", "y1_in", "=", "X", "[", ":", "subset_train", ",", ":", "]", ",", "y", "[", ":", "subset_train", "]", ",", "w", "[", ":", "subset_train", "]", ",", "y0_in", "[", ":", "subset_train", "]", ",", "y1_in", "[", ":", "subset_train", "]", "\n", "\n", "# save data", "\n", "", "save_df_train", "=", "pd", ".", "DataFrame", "(", "X", ",", "columns", "=", "feat_list", ")", "\n", "save_df_train", "[", "'y0'", "]", "=", "y0_in", "\n", "save_df_train", "[", "'y1'", "]", "=", "y1_in", "\n", "save_df_train", "[", "'w'", "]", "=", "w", "\n", "save_df_train", "[", "'y'", "]", "=", "y", "\n", "save_df_train", ".", "to_csv", "(", "outfile_train", ")", "\n", "\n", "save_df_train", "=", "pd", ".", "DataFrame", "(", "X_t", ",", "columns", "=", "feat_list", ")", "\n", "save_df_train", "[", "'y0'", "]", "=", "y0_out", "\n", "save_df_train", "[", "'y1'", "]", "=", "y1_out", "\n", "save_df_train", "[", "'w'", "]", "=", "w_t", "\n", "save_df_train", "[", "'y'", "]", "=", "y_t", "\n", "save_df_train", ".", "to_csv", "(", "outfile_test", ")", "\n", "\n", "", "return", "X", ",", "X_t", ",", "y", ",", "w", ",", "y0_out", ",", "y1_out", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_benchmarks_NeurIPS21.acic_experiments_catenets.do_acic_experiments": [[29, 81], ["open", "csv.writer", "csv.writer.writerow", "range", "open.close", "os.path.isdir", "os.makedirs", "catenets.datasets.load", "numpy.var", "numpy.var", "numpy.var", "range", "models.items", "csv.writer.writerow", "models.keys", "print", "sklearn.clone", "sklearn.clone.set_params", "sklearn.clone.fit", "sklearn.clone.predict", "sklearn.clone.predict", "pehe_in.append", "pehe_out.append", "str", "models.keys", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse", "str", "str"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["def", "do_acic_experiments", "(", "n_exp", ":", "int", "=", "10", ",", "n_reps", "=", "5", ",", "file_name", ":", "str", "=", "'results_catenets'", ",", "\n", "simu_num", ":", "int", "=", "1", ",", "models", ":", "dict", "=", "None", ",", "train_size", ":", "int", "=", "4000", ",", "\n", "pre_trans", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "str", "(", "pre_trans", ")", "+", "\n", "SEP", "+", "str", "(", "simu_num", ")", "+", "SEP", "+", "str", "(", "train_size", ")", "+", "'.csv'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "'file_name'", ",", "'run'", ",", "'cate_var_in'", ",", "'cate_var_out'", ",", "'y_var_in'", "]", "+", "[", "name", "+", "'_in'", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "name", "+", "'_out'", "for", "name", "in", "\n", "models", ".", "keys", "(", ")", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "for", "i_exp", "in", "range", "(", "n_exp", ")", ":", "\n", "# get data", "\n", "        ", "X", ",", "w", ",", "y", ",", "po_train", ",", "X_test", ",", "w_test", ",", "y_test", ",", "po_test", "=", "load", "(", "\n", "\"acic2016\"", ",", "preprocessed", "=", "pre_trans", ",", "original_acic_outcomes", "=", "True", ",", "\n", "i_exp", "=", "i_exp", ",", "simu_num", "=", "simu_num", ",", "train_size", "=", "train_size", ")", "\n", "\n", "cate_in", "=", "po_train", "[", ":", ",", "1", "]", "-", "po_train", "[", ":", ",", "0", "]", "\n", "cate_out", "=", "po_test", "[", ":", ",", "1", "]", "-", "po_test", "[", ":", ",", "0", "]", "\n", "\n", "cate_var_in", "=", "np", ".", "var", "(", "cate_in", ")", "\n", "cate_var_out", "=", "np", ".", "var", "(", "cate_out", ")", "\n", "y_var_in", "=", "np", ".", "var", "(", "y", ")", "\n", "for", "k", "in", "range", "(", "n_reps", ")", ":", "\n", "            ", "pehe_in", "=", "[", "]", "\n", "pehe_out", "=", "[", "]", "\n", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "\"Experiment {}, run {}, with {}\"", ".", "format", "(", "i_exp", ",", "k", ",", "model_name", ")", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "estimator_temp", ".", "set_params", "(", "seed", "=", "k", ")", "\n", "\n", "# fit estimator", "\n", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_in", "=", "estimator_temp", ".", "predict", "(", "X", ",", "return_po", "=", "False", ")", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_test", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe_in", ".", "append", "(", "eval_root_mse", "(", "cate_pred_in", ",", "cate_in", ")", ")", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "\n", "[", "i_exp", ",", "k", ",", "cate_var_in", ",", "cate_var_out", ",", "y_var_in", "]", "+", "pehe_in", "+", "pehe_out", ")", "\n", "\n", "", "", "out_file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.ihdp_experiments.do_ihdp_experiments": [[62, 126], ["open", "csv.writer", "csv.writer.writerow", "catenets.datasets.dataset_ihdp.load_raw", "isinstance", "open.close", "isinstance", "os.path.exists", "os.makedirs", "list", "isinstance", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.prepare_ihdp_data", "catenets.experiment_utils.base.get_model_set.items", "csv.writer.writerow", "catenets.experiment_utils.base.get_model_set", "range", "ValueError", "catenets.info", "sklearn.clone", "sklearn.clone.fit", "sklearn.clone.predict", "sklearn.clone.predict", "pehe_in.append", "pehe_out.append", "catenets.experiment_utils.base.get_model_set.keys", "catenets.experiment_utils.base.get_model_set.keys", "sklearn.clone.set_params", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_raw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.prepare_ihdp_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_model_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["def", "do_ihdp_experiments", "(", "\n", "n_exp", ":", "Union", "[", "int", ",", "list", "]", "=", "100", ",", "\n", "file_name", ":", "str", "=", "\"ihdp_results_scaled\"", ",", "\n", "model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "scale_cate", ":", "bool", "=", "True", ",", "\n", "models", ":", "Union", "[", "list", ",", "dict", ",", "str", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "FULL_MODEL_SET_IHDP", "\n", "", "elif", "isinstance", "(", "models", ",", "(", "list", ",", "str", ")", ")", ":", "\n", "        ", "models", "=", "get_model_set", "(", "models", ")", "\n", "\n", "# make path", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "# get file to write in", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "\".csv\"", ")", ",", "\"w\"", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "name", "+", "\"_in\"", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "\n", "name", "+", "\"_out\"", "for", "name", "in", "models", ".", "keys", "(", ")", "\n", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "# get data", "\n", "data_train", ",", "data_test", "=", "load_raw", "(", "DATA_DIR", ")", "\n", "\n", "if", "isinstance", "(", "n_exp", ",", "int", ")", ":", "\n", "        ", "experiment_loop", "=", "list", "(", "range", "(", "1", ",", "n_exp", "+", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "n_exp", ",", "list", ")", ":", "\n", "        ", "experiment_loop", "=", "n_exp", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"n_exp should be either an integer or a list of integers.\"", ")", "\n", "\n", "", "for", "i_exp", "in", "experiment_loop", ":", "\n", "        ", "pehe_in", "=", "[", "]", "\n", "pehe_out", "=", "[", "]", "\n", "\n", "# get data", "\n", "data_exp", "=", "get_one_data_set", "(", "data_train", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "data_exp_test", "=", "get_one_data_set", "(", "data_test", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "cate_true_in", ",", "X_t", ",", "cate_true_out", "=", "prepare_ihdp_data", "(", "\n", "data_exp", ",", "data_exp_test", ",", "rescale", "=", "scale_cate", "\n", ")", "\n", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "log", ".", "info", "(", "f\"Experiment {i_exp} with {model_name}\"", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "if", "model_params", "is", "not", "None", ":", "\n", "                ", "estimator_temp", ".", "set_params", "(", "**", "model_params", ")", "\n", "\n", "# fit estimator", "\n", "", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_in", "=", "estimator_temp", ".", "predict", "(", "X", ",", "return_po", "=", "False", ")", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe_in", ".", "append", "(", "eval_root_mse", "(", "cate_pred_in", ",", "cate_true_in", ")", ")", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_true_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "pehe_in", "+", "pehe_out", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop": [[133, 250], ["catenets.debug", "simulations_AISTATS.do_one_experiment_repeat", "catenets.debug", "simulations_AISTATS.do_one_experiment_repeat", "catenets.debug", "simulations_AISTATS.do_one_experiment_repeat", "catenets.debug", "simulations_AISTATS.do_one_experiment_repeat"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.do_one_experiment_repeat", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.do_one_experiment_repeat", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.do_one_experiment_repeat", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.do_one_experiment_repeat"], ["def", "simulation_experiment_loop", "(", "\n", "range_change", ":", "list", ",", "\n", "change_dim", ":", "str", "=", "N_STRING", ",", "\n", "n_train", ":", "int", "=", "NTRAIN_BASE", ",", "\n", "n_test", ":", "int", "=", "NTEST_BASE", ",", "\n", "n_repeats", ":", "int", "=", "10", ",", "\n", "d", ":", "int", "=", "D_BASE", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "5", ",", "\n", "n_o", ":", "int", "=", "5", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "file_base", ":", "str", "=", "\"results\"", ",", "\n", "xi", ":", "float", "=", "BASE_XI", ",", "\n", "mu_1_model", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "correlated_x", ":", "bool", "=", "False", ",", "\n", "mu_1_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "mu_0_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "nonlinear_prop", ":", "bool", "=", "True", ",", "\n", "prop_offset", ":", "Union", "[", "float", ",", "str", "]", "=", "\"center\"", ",", "\n", "target_prop", ":", "Optional", "[", "float", "]", "=", "TARGET_PROP_BASE", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "change_dim", "is", "N_STRING", ":", "\n", "        ", "for", "n", "in", "range_change", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Running experiments for {N_STRING} set to {n}\"", ")", "\n", "do_one_experiment_repeat", "(", "\n", "n_train", "=", "n", ",", "\n", "n_test", "=", "n_test", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "n_t", ",", "\n", "file_base", "=", "file_base", ",", "\n", "xi", "=", "xi", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "correlated_x", "=", "correlated_x", ",", "\n", "models", "=", "models", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "nonlinear_prop", "=", "nonlinear_prop", ",", "\n", "prop_offset", "=", "prop_offset", ",", "\n", "target_prop", "=", "target_prop", ",", "\n", ")", "\n", "", "", "elif", "change_dim", "is", "XI_STRING", ":", "\n", "        ", "for", "xi_temp", "in", "range_change", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Running experiments for {XI_STRING} set to {xi_temp}\"", ")", "\n", "do_one_experiment_repeat", "(", "\n", "n_train", "=", "n_train", ",", "\n", "n_test", "=", "n_test", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "n_t", ",", "\n", "file_base", "=", "file_base", ",", "\n", "xi", "=", "xi_temp", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "correlated_x", "=", "correlated_x", ",", "\n", "models", "=", "models", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "nonlinear_prop", "=", "nonlinear_prop", ",", "\n", "prop_offset", "=", "prop_offset", ",", "\n", "target_prop", "=", "target_prop", ",", "\n", ")", "\n", "\n", "", "", "elif", "change_dim", "is", "D_T_STRING", ":", "\n", "        ", "for", "d_t_temp", "in", "range_change", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Running experiments for {D_T_STRING} set to {d_t_temp}\"", ")", "\n", "do_one_experiment_repeat", "(", "\n", "n_train", "=", "n_train", ",", "\n", "n_test", "=", "n_test", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "d_t_temp", ",", "\n", "file_base", "=", "file_base", ",", "\n", "xi", "=", "xi", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "correlated_x", "=", "correlated_x", ",", "\n", "models", "=", "models", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "nonlinear_prop", "=", "nonlinear_prop", ",", "\n", "prop_offset", "=", "prop_offset", ",", "\n", "target_prop", "=", "target_prop", ",", "\n", ")", "\n", "\n", "", "", "elif", "change_dim", "is", "TARGET_STRING", ":", "\n", "        ", "for", "target_prop_temp", "in", "range_change", ":", "\n", "            ", "log", ".", "debug", "(", "\n", "f\"Running experiments for {TARGET_STRING} set to {target_prop_temp}\"", "\n", ")", "\n", "do_one_experiment_repeat", "(", "\n", "n_train", "=", "n_train", ",", "\n", "n_test", "=", "n_test", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "n_t", ",", "\n", "file_base", "=", "file_base", ",", "\n", "xi", "=", "xi", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "correlated_x", "=", "correlated_x", ",", "\n", "models", "=", "models", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "nonlinear_prop", "=", "nonlinear_prop", ",", "\n", "prop_offset", "=", "prop_offset", ",", "\n", "target_prop", "=", "target_prop_temp", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.do_one_experiment_repeat": [[253, 340], ["open", "csv.writer", "csv.writer.writerow", "open.close", "os.path.exists", "os.makedirs", "list", "str", "str", "catenets.debug", "simulations_AISTATS.one_simulation_experiment", "csv.writer.writerow", "range", "models.keys", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.one_simulation_experiment"], ["", "", "", "def", "do_one_experiment_repeat", "(", "\n", "n_train", ":", "int", "=", "NTRAIN_BASE", ",", "\n", "n_test", ":", "int", "=", "NTEST_BASE", ",", "\n", "n_repeats", ":", "int", "=", "10", ",", "\n", "d", ":", "int", "=", "D_BASE", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "file_base", ":", "str", "=", "\"results\"", ",", "\n", "xi", ":", "float", "=", "BASE_XI", ",", "\n", "mu_1_model", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "correlated_x", ":", "bool", "=", "True", ",", "\n", "mu_1_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "mu_0_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "nonlinear_prop", ":", "bool", "=", "True", ",", "\n", "range_exp", ":", "Optional", "[", "list", "]", "=", "None", ",", "\n", "prop_offset", ":", "Union", "[", "float", ",", "str", "]", "=", "0", ",", "\n", "target_prop", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "# make path", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "if", "range_exp", "is", "None", ":", "\n", "        ", "range_exp", "=", "list", "(", "range", "(", "1", ",", "n_repeats", "+", "1", ")", ")", "\n", "\n", "", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "FULL_MODEL_SET_AISTATS", "\n", "\n", "", "if", "target_prop", "is", "None", ":", "\n", "        ", "prop_string", "=", "str", "(", "prop_offset", ")", "\n", "", "else", ":", "\n", "        ", "prop_string", "=", "str", "(", "target_prop", ")", "\n", "\n", "# create file name and file", "\n", "", "file_name", "=", "(", "\n", "file_base", "\n", "+", "SEP", "\n", "+", "str", "(", "n_train", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "d", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "n_w", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "n_c", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "n_o", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "n_t", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "xi", ")", "\n", "+", "SEP", "\n", "+", "prop_string", "\n", ")", "\n", "\n", "out_file", "=", "open", "(", "RESULT_DIR", "+", "file_name", "+", "CSV_STRING", ",", "\"w\"", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "name", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "for", "i", "in", "range_exp", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Running experiment {i}.\"", ")", "\n", "mses", "=", "one_simulation_experiment", "(", "\n", "n_train", "=", "n_train", ",", "\n", "n_test", "=", "n_test", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "n_t", ",", "\n", "seed", "=", "i", ",", "\n", "xi", "=", "xi", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "correlated_x", "=", "correlated_x", ",", "\n", "models", "=", "models", ",", "\n", "nonlinear_prop", "=", "nonlinear_prop", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "prop_offset", "=", "prop_offset", ",", "\n", "target_prop", "=", "target_prop", ",", "\n", ")", "\n", "writer", ".", "writerow", "(", "mses", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.one_simulation_experiment": [[342, 406], ["catenets.experiment_utils.simulation_utils.simulate_treatment_setup", "models.items", "catenets.debug", "sklearn.clone", "sklearn.clone.fit", "sklearn.clone.predict", "rmses.append", "catenets.experiment_utils.base.eval_root_mse"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.simulate_treatment_setup", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["", "def", "one_simulation_experiment", "(", "\n", "n_train", ":", "int", ",", "\n", "n_test", ":", "int", "=", "NTEST_BASE", ",", "\n", "d", ":", "int", "=", "D_BASE", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "xi", ":", "float", "=", "BASE_XI", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "mu_1_model", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "propensity_model", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "correlated_x", ":", "bool", "=", "False", ",", "\n", "mu_1_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "mu_0_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "nonlinear_prop", ":", "bool", "=", "False", ",", "\n", "prop_offset", ":", "Union", "[", "float", ",", "str", "]", "=", "0", ",", "\n", "target_prop", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", "->", "list", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "FULL_MODEL_SET_AISTATS", "\n", "\n", "# get data", "\n", "", "X", ",", "y", ",", "w", ",", "p", ",", "t", "=", "simulate_treatment_setup", "(", "\n", "n_train", "+", "n_test", ",", "\n", "d", "=", "d", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_t", "=", "n_t", ",", "\n", "propensity_model", "=", "propensity_model", ",", "\n", "propensity_model_params", "=", "{", "\n", "\"xi\"", ":", "xi", ",", "\n", "\"nonlinear\"", ":", "nonlinear_prop", ",", "\n", "\"offset\"", ":", "prop_offset", ",", "\n", "\"target_prop\"", ":", "target_prop", ",", "\n", "}", ",", "\n", "seed", "=", "seed", ",", "\n", "mu_1_model", "=", "mu_1_model", ",", "\n", "mu_0_model_params", "=", "mu_0_model_params", ",", "\n", "mu_1_model_params", "=", "mu_1_model_params", ",", "\n", "covariate_model_params", "=", "{", "\"correlated\"", ":", "correlated_x", "}", ",", "\n", ")", "\n", "# split data", "\n", "X_train", ",", "y_train", ",", "w_train", ",", "_", "=", "(", "\n", "X", "[", ":", "n_train", ",", ":", "]", ",", "\n", "y", "[", ":", "n_train", "]", ",", "\n", "w", "[", ":", "n_train", "]", ",", "\n", "p", "[", ":", "n_train", "]", ",", "\n", ")", "\n", "X_test", ",", "t_test", "=", "X", "[", "n_train", ":", ",", ":", "]", ",", "t", "[", "n_train", ":", "]", "\n", "\n", "rmses", "=", "[", "]", "\n", "for", "model_name", ",", "model", "in", "models", ".", "items", "(", ")", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Training model {model_name}\"", ")", "\n", "\n", "estimator", "=", "clone", "(", "model", ")", "\n", "estimator", ".", "fit", "(", "X", "=", "X_train", ",", "y", "=", "y_train", ",", "w", "=", "w_train", ")", "\n", "\n", "cate_test", "=", "estimator", ".", "predict", "(", "X_test", ",", "return_po", "=", "False", ")", "\n", "rmses", ".", "append", "(", "eval_root_mse", "(", "cate_test", ",", "t_test", ")", ")", "\n", "\n", "", "return", "rmses", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.main_AISTATS": [[408, 484], ["simulations_AISTATS.simulation_experiment_loop", "catenets.experiment_utils.base.get_model_set", "simulations_AISTATS.simulation_experiment_loop", "type", "type", "simulations_AISTATS.simulation_experiment_loop", "simulations_AISTATS.simulation_experiment_loop", "simulations_AISTATS.simulation_experiment_loop"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_model_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_AISTATS21.simulations_AISTATS.simulation_experiment_loop"], ["", "def", "main_AISTATS", "(", "\n", "setting", ":", "int", "=", "1", ",", "\n", "models", ":", "Any", "=", "None", ",", "\n", "file_name", ":", "str", "=", "\"res\"", ",", "\n", "n_repeats", ":", "int", "=", "10", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "FULL_MODEL_SET_AISTATS", "\n", "", "elif", "type", "(", "models", ")", "is", "list", "or", "type", "(", "models", ")", "is", "str", ":", "\n", "        ", "models", "=", "get_model_set", "(", "models", ")", "\n", "\n", "", "if", "setting", "==", "1", ":", "\n", "# no treatment effect, with confounding, by n", "\n", "        ", "simulation_experiment_loop", "(", "\n", "[", "1000", ",", "2000", ",", "5000", ",", "10000", "]", ",", "\n", "change_dim", "=", "\"n\"", ",", "\n", "n_t", "=", "0", ",", "\n", "n_w", "=", "0", ",", "\n", "n_c", "=", "5", ",", "\n", "n_o", "=", "5", ",", "\n", "file_base", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", ")", "\n", "", "elif", "setting", "==", "2", ":", "\n", "# with treatment effect, with confounding, by n", "\n", "        ", "simulation_experiment_loop", "(", "\n", "[", "1000", ",", "2000", ",", "5000", ",", "10000", "]", ",", "\n", "change_dim", "=", "\"n\"", ",", "\n", "n_t", "=", "5", ",", "\n", "n_w", "=", "0", ",", "\n", "n_c", "=", "5", ",", "\n", "n_o", "=", "5", ",", "\n", "file_base", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", ")", "\n", "", "elif", "setting", "==", "3", ":", "\n", "# Potential outcomes are supported on independent covariates, no confounding, by n", "\n", "        ", "simulation_experiment_loop", "(", "\n", "[", "1000", ",", "2000", ",", "5000", ",", "10000", "]", ",", "\n", "change_dim", "=", "\"n\"", ",", "\n", "n_t", "=", "10", ",", "\n", "n_w", "=", "0", ",", "\n", "n_c", "=", "0", ",", "\n", "n_o", "=", "10", ",", "\n", "file_base", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "xi", "=", "0.5", ",", "\n", "mu_1_model_params", "=", "{", "\"withbase\"", ":", "False", "}", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", ")", "\n", "", "elif", "setting", "==", "4", ":", "\n", "# vary number of predictive features at n=2000", "\n", "        ", "simulation_experiment_loop", "(", "\n", "[", "0", ",", "1", ",", "3", ",", "5", ",", "7", ",", "10", "]", ",", "\n", "change_dim", "=", "D_T_STRING", ",", "\n", "n_train", "=", "2000", ",", "\n", "n_c", "=", "5", ",", "\n", "n_o", "=", "5", ",", "\n", "file_base", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", ")", "\n", "", "elif", "setting", "==", "5", ":", "\n", "# vary percentage treated at n=2000", "\n", "        ", "simulation_experiment_loop", "(", "\n", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", ",", "\n", "change_dim", "=", "TARGET_STRING", ",", "\n", "n_train", "=", "2000", ",", "\n", "n_c", "=", "5", ",", "\n", "n_o", "=", "5", ",", "\n", "n_t", "=", "0", ",", "\n", "n_repeats", "=", "n_repeats", ",", "\n", "file_base", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.do_twins_experiment_loop": [[48, 58], ["print", "experiments_twins.do_twins_experiments"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.do_twins_experiments"], ["def", "do_twins_experiment_loop", "(", "n_train_loop", "=", "[", "500", ",", "1000", ",", "2000", ",", "5000", ",", "None", "]", ",", "\n", "prop_loop", "=", "[", "0.1", ",", "0.25", ",", "0.5", ",", "0.75", ",", "0.9", "]", ",", "\n", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'twins'", ",", "models", ":", "dict", "=", "None", ",", "\n", "test_size", "=", "0.5", ")", ":", "\n", "    ", "for", "n", "in", "n_train_loop", ":", "\n", "        ", "for", "prop", "in", "prop_loop", ":", "\n", "            ", "print", "(", "'Running twins experiment for {} training samples with {} treated.'", ".", "format", "(", "n", ",", "\n", "prop", ")", ")", "\n", "do_twins_experiments", "(", "n_exp", "=", "n_exp", ",", "file_name", "=", "file_name", ",", "models", "=", "models", ",", "subset_train", "=", "n", ",", "\n", "prop_treated", "=", "prop", ",", "test_size", "=", "test_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.do_twins_experiments": [[60, 141], ["open", "csv.writer", "csv.writer.writerow", "range", "open.close", "os.path.isdir", "os.makedirs", "catenets.datasets.load", "experiments_twins.split_data", "sklearn.preprocessing.label_binarize", "models.items", "csv.writer.writerow", "print", "sklearn.clone", "sklearn.clone.set_params", "sklearn.clone.fit", "pehe_out.append", "models.keys", "sklearn.clone.predict", "numpy.zeros", "auc_ite.append", "auc_mu0.append", "auc_mu1.append", "ap_mu0.append", "ap_mu1.append", "sklearn.clone.predict", "catenets.experiment_utils.base.eval_root_mse", "str", "models.keys", "sklearn.metrics.roc_auc_score", "experiments_twins.eval_roc_auc", "experiments_twins.eval_roc_auc", "experiments_twins.eval_ap", "experiments_twins.eval_ap", "models.keys", "str", "models.keys", "models.keys", "models.keys"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.split_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_roc_auc", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_roc_auc", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_ap", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_ap"], ["", "", "", "def", "do_twins_experiments", "(", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'twins'", ",", "\n", "models", ":", "dict", "=", "None", ",", "subset_train", ":", "int", "=", "None", ",", "prop_treated", "=", "0.5", ",", "\n", "test_size", "=", "0.5", ")", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "str", "(", "prop_treated", ")", "+", "SEP", "+", "str", "(", "subset_train", ")", "+", "\n", "'.csv'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "name", "+", "'_cate'", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "name", "+", "'_auc_ite'", "for", "name", "in", "models", ".", "keys", "(", ")", "if", "'R'", "not", "in", "name", "and", "'X'", "not", "in", "\n", "name", "]", "+", "[", "name", "+", "'_auc_mu0'", "for", "name", "in", "models", ".", "keys", "(", ")", "if", "'R'", "not", "in", "name", "and", "'X'", "not", "in", "\n", "name", "]", "+", "[", "name", "+", "'_auc_mu1'", "for", "name", "in", "models", ".", "keys", "(", ")", "if", "'R'", "not", "in", "name", "and", "'X'", "not", "in", "\n", "name", "]", "+", "[", "name", "+", "'_ap_mu0'", "for", "name", "in", "models", ".", "keys", "(", ")", "if", "'R'", "not", "in", "name", "and", "'X'", "\n", "not", "in", "name", "]", "+", "[", "name", "+", "'_ap_mu1'", "for", "name", "in", "models", ".", "keys", "(", ")", "if", "'R'", "not", "in", "name", "and", "'X'", "not", "in", "name", "]", "\n", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "for", "i_exp", "in", "range", "(", "n_exp", ")", ":", "\n", "        ", "pehe_out", "=", "[", "]", "\n", "auc_ite", "=", "[", "]", "\n", "auc_mu0", "=", "[", "]", "\n", "auc_mu1", "=", "[", "]", "\n", "ap_mu0", "=", "[", "]", "\n", "ap_mu1", "=", "[", "]", "\n", "\n", "# get data", "\n", "x", ",", "w", ",", "y", ",", "pos", ",", "_", ",", "_", "=", "load", "(", "'twins'", ",", "seed", "=", "i_exp", ",", "treat_prop", "=", "prop_treated", ",", "train_ratio", "=", "1", ")", "\n", "\n", "# split data", "\n", "X", ",", "X_t", ",", "y", ",", "y_t", ",", "w", ",", "w_t", ",", "y0_in", ",", "y0_out", ",", "y1_in", ",", "y1_out", "=", "split_data", "(", "x", ",", "y", ",", "w", ",", "pos", ",", "\n", "random_state", "=", "i_exp", ",", "\n", "subset_train", "=", "subset_train", ",", "\n", "test_size", "=", "test_size", ")", "\n", "\n", "ite_out", "=", "y1_out", "-", "y0_out", "\n", "\n", "ite_out_encoded", "=", "label_binarize", "(", "ite_out", ",", "[", "-", "1", ",", "0", ",", "1", "]", ")", "\n", "\n", "n_test", "=", "X_t", ".", "shape", "[", "0", "]", "\n", "\n", "# split data", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Experiment {} with {}\"", ".", "format", "(", "i_exp", ",", "model_name", ")", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "estimator_temp", ".", "set_params", "(", "**", "{", "'binary_y'", ":", "True", "}", ")", "\n", "\n", "# fit estimator", "\n", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "if", "'DR'", "not", "in", "model_name", "and", "'R'", "not", "in", "model_name", "and", "'X'", "not", "in", "model_name", ":", "\n", "                ", "cate_pred_out", ",", "mu0_pred", ",", "mu1_pred", "=", "estimator_temp", ".", "predict", "(", "X_t", ",", "return_po", "=", "True", ")", "\n", "\n", "# create probabilities for each possible level of ITE", "\n", "probs", "=", "np", ".", "zeros", "(", "(", "n_test", ",", "3", ")", ")", "\n", "probs", "[", ":", ",", "0", "]", "=", "(", "mu0_pred", "*", "(", "1", "-", "mu1_pred", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "# P(Y1-Y0=-1)", "\n", "probs", "[", ":", ",", "1", "]", "=", "(", "(", "mu0_pred", "*", "mu1_pred", ")", "+", "(", "(", "1", "-", "mu0_pred", ")", "*", "(", "1", "-", "mu1_pred", ")", ")", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", ")", "# P(Y1-Y0=0)", "\n", "probs", "[", ":", ",", "2", "]", "=", "(", "mu1_pred", "*", "(", "1", "-", "mu0_pred", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "# P(Y1-Y0=1)", "\n", "auc_ite", ".", "append", "(", "roc_auc_score", "(", "ite_out_encoded", ",", "probs", ")", ")", "\n", "\n", "# evaluate performance on potential outcomes", "\n", "auc_mu0", ".", "append", "(", "eval_roc_auc", "(", "y0_out", ",", "mu0_pred", ")", ")", "\n", "auc_mu1", ".", "append", "(", "eval_roc_auc", "(", "y1_out", ",", "mu1_pred", ")", ")", "\n", "ap_mu0", ".", "append", "(", "eval_ap", "(", "y0_out", ",", "mu0_pred", ")", ")", "\n", "ap_mu1", ".", "append", "(", "eval_ap", "(", "y1_out", ",", "mu1_pred", ")", ")", "\n", "", "else", ":", "\n", "                ", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ")", "\n", "\n", "", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "ite_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "pehe_out", "+", "auc_ite", "+", "auc_mu0", "+", "auc_mu1", "+", "ap_mu0", "+", "ap_mu1", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.split_data": [[144, 155], ["sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "split_data", "(", "X", ",", "y", ",", "w", ",", "pos", ",", "test_size", "=", "0.5", ",", "random_state", "=", "42", ",", "\n", "subset_train", ":", "int", "=", "None", ")", ":", "\n", "    ", "X", ",", "X_t", ",", "y", ",", "y_t", ",", "w", ",", "w_t", ",", "y0_in", ",", "y0_out", ",", "y1_in", ",", "y1_out", "=", "train_test_split", "(", "X", ",", "y", ",", "w", ",", "pos", "[", ":", ",", "0", "]", ",", "pos", "[", ":", ",", "1", "]", ",", "\n", "test_size", "=", "test_size", ",", "\n", "random_state", "=", "random_state", ")", "\n", "if", "subset_train", "is", "not", "None", ":", "\n", "        ", "X", ",", "y", ",", "w", ",", "y0_in", ",", "y1_in", "=", "X", "[", ":", "subset_train", ",", ":", "]", ",", "y", "[", ":", "subset_train", "]", ",", "w", "[", ":", "subset_train", "]", ",", "y0_in", "[", ":", "subset_train", "]", ",", "y1_in", "[", ":", "subset_train", "]", "\n", "\n", "", "return", "X", ",", "X_t", ",", "y", ",", "y_t", ",", "w", ",", "w_t", ",", "y0_in", ",", "y0_out", ",", "y1_in", ",", "y1_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_roc_auc": [[157, 161], ["catenets.models.jax.base.check_shape_1d_data", "catenets.models.jax.base.check_shape_1d_data", "sklearn.metrics.roc_auc_score"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["", "def", "eval_roc_auc", "(", "targets", ",", "preds", ")", ":", "\n", "    ", "preds", "=", "check_shape_1d_data", "(", "preds", ")", "\n", "targets", "=", "check_shape_1d_data", "(", "targets", ")", "\n", "return", "roc_auc_score", "(", "targets", ",", "preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_twins.eval_ap": [[163, 167], ["catenets.models.jax.base.check_shape_1d_data", "catenets.models.jax.base.check_shape_1d_data", "sklearn.metrics.average_precision_score"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["", "def", "eval_ap", "(", "targets", ",", "preds", ")", ":", "\n", "    ", "preds", "=", "check_shape_1d_data", "(", "preds", ")", "\n", "targets", "=", "check_shape_1d_data", "(", "targets", ")", "\n", "return", "average_precision_score", "(", "targets", ",", "preds", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.do_acic_simu_loops": [[201, 241], ["experiments_AB.do_acic_simu", "experiments_AB.do_acic_simu"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.do_acic_simu", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.do_acic_simu"], ["def", "do_acic_simu_loops", "(", "\n", "rho_loop", ":", "list", "=", "[", "0", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "0.8", "]", ",", "\n", "n1_loop", ":", "list", "=", "[", "200", ",", "2000", ",", "500", "]", ",", "\n", "n_exp", ":", "int", "=", "10", ",", "\n", "file_name", ":", "str", "=", "\"acic_simu\"", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "n_0", ":", "int", "=", "2000", ",", "\n", "n_test", ":", "int", "=", "500", ",", "\n", "setting", ":", "str", "=", "\"A\"", ",", "\n", "factual_eval", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "", "for", "n_1", "in", "n1_loop", ":", "\n", "        ", "if", "setting", "==", "\"A\"", ":", "\n", "            ", "for", "rho", "in", "rho_loop", ":", "\n", "                ", "do_acic_simu", "(", "\n", "n_1", "=", "n_1", ",", "\n", "n_exp", "=", "n_exp", ",", "\n", "file_name", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "n_0", "=", "n_0", ",", "\n", "n_test", "=", "n_test", ",", "\n", "prop_omega", "=", "0", ",", "\n", "prop_gamma", "=", "rho", ",", "\n", "factual_eval", "=", "factual_eval", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "rho", "in", "rho_loop", ":", "\n", "                ", "do_acic_simu", "(", "\n", "n_1", "=", "n_1", ",", "\n", "n_exp", "=", "n_exp", ",", "\n", "file_name", "=", "file_name", ",", "\n", "models", "=", "models", ",", "\n", "n_0", "=", "n_0", ",", "\n", "n_test", "=", "n_test", ",", "\n", "prop_gamma", "=", "0", ",", "\n", "prop_omega", "=", "rho", ",", "\n", "factual_eval", "=", "factual_eval", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.do_acic_simu": [[244, 407], ["open", "csv.writer", "csv.writer.writerow", "isinstance", "open.close", "isinstance", "os.path.isdir", "os.makedirs", "list", "isinstance", "numpy.var", "numpy.var", "models.items", "range", "ValueError", "experiments_AB.acic_simu", "experiments_AB.acic_simu", "print", "sklearn.clone", "sklearn.clone.fit", "rmse_cate.append", "csv.writer.writerow", "csv.writer.writerow", "str", "models.keys", "sklearn.clone.predict", "rmse_mu0.append", "rmse_mu1.append", "sklearn.clone.predict", "catenets.experiment_utils.base.eval_root_mse", "models.keys", "models.keys", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse", "rmse_factual.append", "str", "models.keys", "catenets.experiment_utils.base.eval_root_mse", "str", "str", "ValueError"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.acic_simu", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.acic_simu", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["", "", "", "", "def", "do_acic_simu", "(", "\n", "n_exp", ":", "Union", "[", "int", ",", "list", "]", "=", "10", ",", "\n", "file_name", ":", "str", "=", "\"acic_simu\"", ",", "\n", "models", ":", "Union", "[", "dict", ",", "str", ",", "None", "]", "=", "None", ",", "\n", "n_0", ":", "int", "=", "2000", ",", "\n", "n_1", ":", "int", "=", "200", ",", "\n", "n_test", ":", "int", "=", "500", ",", "\n", "error_sd", ":", "float", "=", "1", ",", "\n", "sp_lin", ":", "float", "=", "0.6", ",", "\n", "sp_nonlin", ":", "float", "=", "0.3", ",", "\n", "prop_gamma", ":", "float", "=", "0", ",", "\n", "ate_goal", ":", "float", "=", "0", ",", "\n", "inter", ":", "bool", "=", "True", ",", "\n", "prop_omega", ":", "float", "=", "0", ",", "\n", "factual_eval", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "", "elif", "isinstance", "(", "models", ",", "str", ")", ":", "\n", "        ", "if", "models", "==", "\"all\"", ":", "\n", "            ", "models", "=", "ALL_MODELS", "\n", "", "elif", "models", "==", "\"ablations\"", ":", "\n", "            ", "models", "=", "ABLATIONS", "\n", "", "elif", "models", "==", "'flex_lambda'", ":", "\n", "            ", "models", "=", "FLEX_LAMBDA", "\n", "", "elif", "models", "==", "'t_lambda'", ":", "\n", "            ", "models", "=", "T_LAMBDA", "\n", "", "elif", "models", "==", "'offset_lambda'", ":", "\n", "            ", "models", "=", "OFFSET_LAMBDA", "\n", "", "elif", "models", "==", "\"snet\"", ":", "\n", "            ", "models", "=", "SNET_VARIANTS", "\n", "", "elif", "models", "==", "\"dragon\"", ":", "\n", "            ", "models", "=", "DRAGON_VARIANTS", "\n", "", "elif", "models", "==", "\"twostep\"", ":", "\n", "            ", "models", "=", "TWOSTEP_LEARNERS", "\n", "", "elif", "models", "==", "\"dr\"", ":", "\n", "            ", "models", "=", "DR_VARIANTS", "\n", "", "elif", "models", "==", "\"x\"", ":", "\n", "            ", "models", "=", "X_VARIANTS", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{models} is not a valid model selection string.\"", ")", "\n", "\n", "# get file to write in", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR_SIMU", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR_SIMU", ")", "\n", "\n", "", "out_file", "=", "open", "(", "\n", "RESULT_DIR_SIMU", "\n", "+", "file_name", "\n", "+", "SEP", "\n", "+", "str", "(", "n_0", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "n_1", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "prop_gamma", ")", "\n", "+", "SEP", "\n", "+", "str", "(", "prop_omega", ")", "\n", "+", "\".csv\"", ",", "\n", "\"w\"", ",", "\n", "buffering", "=", "1", ",", "\n", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "(", "\n", "[", "\"y_var\"", ",", "\"cate_var\"", "]", "\n", "+", "[", "name", "+", "\"_cate\"", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "\n", "+", "[", "\n", "name", "+", "\"_mu0\"", "\n", "for", "name", "in", "models", ".", "keys", "(", ")", "\n", "if", "\"R\"", "not", "in", "name", "and", "\"X\"", "not", "in", "name", "\n", "]", "\n", "+", "[", "\n", "name", "+", "\"_mu1\"", "\n", "for", "name", "in", "models", ".", "keys", "(", ")", "\n", "if", "\"R\"", "not", "in", "name", "and", "\"X\"", "not", "in", "name", "\n", "]", "\n", ")", "\n", "\n", "if", "factual_eval", ":", "\n", "        ", "header", "=", "header", "+", "[", "\n", "name", "+", "'_factual'", "for", "name", "in", "models", ".", "keys", "(", ")", "\n", "if", "'R'", "not", "in", "name", "and", "'X'", "not", "in", "name", "\n", "]", "\n", "\n", "", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "if", "isinstance", "(", "n_exp", ",", "int", ")", ":", "\n", "        ", "experiment_loop", "=", "list", "(", "range", "(", "1", ",", "n_exp", "+", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "n_exp", ",", "list", ")", ":", "\n", "        ", "experiment_loop", "=", "n_exp", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"n_exp should be either an integer or a list of integers.\"", ")", "\n", "\n", "", "for", "i_exp", "in", "experiment_loop", ":", "\n", "        ", "rmse_cate", "=", "[", "]", "\n", "rmse_mu0", "=", "[", "]", "\n", "rmse_mu1", "=", "[", "]", "\n", "\n", "# get data", "\n", "if", "not", "factual_eval", ":", "\n", "            ", "X", ",", "y", ",", "w", ",", "X_t", ",", "mu_0_t", ",", "mu_1_t", ",", "cate_t", "=", "acic_simu", "(", "\n", "i_exp", ",", "\n", "n_0", "=", "n_0", ",", "\n", "n_1", "=", "n_1", ",", "\n", "n_test", "=", "n_test", ",", "\n", "error_sd", "=", "error_sd", ",", "\n", "sp_lin", "=", "sp_lin", ",", "\n", "sp_nonlin", "=", "sp_nonlin", ",", "\n", "prop_gamma", "=", "prop_gamma", ",", "\n", "ate_goal", "=", "ate_goal", ",", "\n", "inter", "=", "inter", ",", "\n", "prop_omega", "=", "prop_omega", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rmse_factual", "=", "[", "]", "\n", "X", ",", "y", ",", "w", ",", "X_t", ",", "y_t", ",", "w_t", ",", "mu_0_t", ",", "mu_1_t", ",", "cate_t", "=", "acic_simu", "(", "\n", "i_exp", ",", "\n", "n_0", "=", "n_0", ",", "\n", "n_1", "=", "n_1", ",", "\n", "n_test", "=", "n_test", ",", "\n", "error_sd", "=", "error_sd", ",", "\n", "sp_lin", "=", "sp_lin", ",", "\n", "sp_nonlin", "=", "sp_nonlin", ",", "\n", "prop_gamma", "=", "prop_gamma", ",", "\n", "ate_goal", "=", "ate_goal", ",", "\n", "inter", "=", "inter", ",", "\n", "prop_omega", "=", "prop_omega", ",", "\n", "return_ytest", "=", "True", ",", "\n", ")", "\n", "\n", "", "y_var", "=", "onp", ".", "var", "(", "y", ")", "\n", "cate_var", "=", "onp", ".", "var", "(", "cate_t", ")", "\n", "\n", "# split data", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"Experiment {i_exp} with {model_name}\"", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "\n", "# fit estimator", "\n", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "if", "(", "\n", "\"R\"", "not", "in", "model_name", "\n", "and", "\"X\"", "not", "in", "model_name", "\n", ")", ":", "\n", "                ", "cate_pred_out", ",", "mu0_pred", ",", "mu1_pred", "=", "estimator_temp", ".", "predict", "(", "\n", "X_t", ",", "return_po", "=", "True", "\n", ")", "\n", "rmse_mu0", ".", "append", "(", "eval_root_mse", "(", "mu0_pred", ",", "mu_0_t", ")", ")", "\n", "rmse_mu1", ".", "append", "(", "eval_root_mse", "(", "mu1_pred", ",", "mu_1_t", ")", ")", "\n", "if", "factual_eval", ":", "\n", "                    ", "pred_factual", "=", "w_t", "*", "mu1_pred", "+", "(", "1", "-", "w_t", ")", "*", "mu0_pred", "\n", "rmse_factual", ".", "append", "(", "eval_root_mse", "(", "pred_factual", ",", "y_t", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ")", "\n", "\n", "", "rmse_cate", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_t", ")", ")", "\n", "\n", "", "if", "not", "factual_eval", ":", "\n", "            ", "writer", ".", "writerow", "(", "[", "y_var", ",", "cate_var", "]", "+", "rmse_cate", "+", "rmse_mu0", "+", "rmse_mu1", ")", "\n", "", "else", ":", "\n", "            ", "writer", ".", "writerow", "(", "[", "y_var", ",", "cate_var", "]", "+", "rmse_cate", "+", "rmse_mu0", "+", "rmse_mu1", "+", "rmse_factual", ")", "\n", "\n", "", "", "out_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_AB.acic_simu": [[409, 445], ["catenets.datasets.load"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["", "def", "acic_simu", "(", "\n", "i_exp", ":", "onp", ".", "ndarray", ",", "\n", "n_0", ":", "int", "=", "2000", ",", "\n", "n_1", ":", "int", "=", "200", ",", "\n", "n_test", ":", "int", "=", "500", ",", "\n", "error_sd", ":", "float", "=", "1", ",", "\n", "sp_lin", ":", "float", "=", "0.6", ",", "\n", "sp_nonlin", ":", "float", "=", "0.3", ",", "\n", "prop_gamma", ":", "float", "=", "0", ",", "\n", "prop_omega", ":", "float", "=", "0", ",", "\n", "ate_goal", ":", "float", "=", "0", ",", "\n", "inter", ":", "bool", "=", "True", ",", "\n", "return_ytest", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "X_train", ",", "w_train", ",", "y_train", ",", "_", ",", "X_test", ",", "w_test", ",", "y_test", ",", "po_test", "=", "load", "(", "\n", "\"acic2016\"", ",", "\n", "i_exp", "=", "i_exp", ",", "\n", "n_0", "=", "n_0", ",", "\n", "n_1", "=", "n_1", ",", "\n", "n_test", "=", "n_test", ",", "\n", "error_sd", "=", "error_sd", ",", "\n", "sp_lin", "=", "sp_lin", ",", "\n", "sp_nonlin", "=", "sp_nonlin", ",", "\n", "prop_gamma", "=", "prop_gamma", ",", "\n", "prop_omega", "=", "prop_omega", ",", "\n", "ate_goal", "=", "ate_goal", ",", "\n", "inter", "=", "inter", ",", "\n", ")", "\n", "mu_0_t", "=", "po_test", "[", ":", ",", "0", "]", "\n", "mu_1_t", "=", "po_test", "[", ":", ",", "1", "]", "\n", "cate_t", "=", "mu_1_t", "-", "mu_0_t", "\n", "\n", "if", "return_ytest", ":", "\n", "        ", "return", "X_train", ",", "y_train", ",", "w_train", ",", "X_test", ",", "y_test", ",", "w_test", ",", "mu_0_t", ",", "mu_1_t", ",", "cate_t", "\n", "\n", "", "return", "X_train", ",", "y_train", ",", "w_train", ",", "X_test", ",", "mu_0_t", ",", "mu_1_t", ",", "cate_t", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_CD.do_ihdp_experiments": [[60, 121], ["open", "csv.writer", "csv.writer.writerow", "catenets.datasets.dataset_ihdp.load_raw", "isinstance", "open.close", "os.path.isdir", "os.makedirs", "list", "isinstance", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.get_one_data_set", "catenets.datasets.dataset_ihdp.prepare_ihdp_data", "models.items", "csv.writer.writerow", "range", "ValueError", "print", "sklearn.clone", "sklearn.clone.fit", "sklearn.clone.predict", "sklearn.clone.predict", "pehe_in.append", "pehe_out.append", "models.keys", "models.keys", "sklearn.clone.set_params", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_raw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.prepare_ihdp_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["def", "do_ihdp_experiments", "(", "\n", "n_exp", ":", "Union", "[", "int", ",", "list", "]", "=", "100", ",", "\n", "file_name", ":", "str", "=", "\"ihdp_all\"", ",", "\n", "model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "models", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "setting", ":", "str", "=", "\"C\"", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "setting", "+", "\".csv\"", ")", ",", "\"w\"", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "name", "+", "\"_in\"", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "\n", "name", "+", "\"_out\"", "for", "name", "in", "models", ".", "keys", "(", ")", "\n", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "# get data", "\n", "data_train", ",", "data_test", "=", "load_raw", "(", "DATA_DIR", ")", "\n", "\n", "if", "isinstance", "(", "n_exp", ",", "int", ")", ":", "\n", "        ", "experiment_loop", "=", "list", "(", "range", "(", "1", ",", "n_exp", "+", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "n_exp", ",", "list", ")", ":", "\n", "        ", "experiment_loop", "=", "n_exp", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"n_exp should be either an integer or a list of integers.\"", ")", "\n", "\n", "", "for", "i_exp", "in", "experiment_loop", ":", "\n", "        ", "pehe_in", "=", "[", "]", "\n", "pehe_out", "=", "[", "]", "\n", "\n", "# get data", "\n", "data_exp", "=", "get_one_data_set", "(", "data_train", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "data_exp_test", "=", "get_one_data_set", "(", "data_test", ",", "i_exp", "=", "i_exp", ",", "get_po", "=", "True", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "cate_true_in", ",", "X_t", ",", "cate_true_out", "=", "prepare_ihdp_data", "(", "\n", "data_exp", ",", "data_exp_test", ",", "setting", "=", "setting", "\n", ")", "\n", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"Experiment {i_exp} with {model_name}\"", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "if", "model_params", "is", "not", "None", ":", "\n", "                ", "estimator_temp", ".", "set_params", "(", "**", "model_params", ")", "\n", "\n", "# fit estimator", "\n", "", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_in", "=", "estimator_temp", ".", "predict", "(", "X", ",", "return_po", "=", "False", ")", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_t", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe_in", ".", "append", "(", "eval_root_mse", "(", "cate_pred_in", ",", "cate_true_in", ")", ")", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_true_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "pehe_in", "+", "pehe_out", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_acic.do_acic_orig_loop": [[45, 53], ["print", "experiments_acic.do_acic_experiments"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_acic.do_acic_experiments"], ["def", "do_acic_orig_loop", "(", "simu_nums", ",", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'results'", ",", "\n", "models", ":", "dict", "=", "None", ",", "train_size", ":", "float", "=", "0.8", ")", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "", "for", "simu_num", "in", "simu_nums", ":", "\n", "        ", "print", "(", "'Running simulation setting {}'", ".", "format", "(", "simu_num", ")", ")", "\n", "do_acic_experiments", "(", "n_exp", "=", "n_exp", ",", "file_name", "=", "file_name", ",", "simu_num", "=", "simu_num", ",", "models", "=", "models", ",", "\n", "train_size", "=", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiments_inductivebias_NeurIPS21.experiments_acic.do_acic_experiments": [[55, 107], ["open", "csv.writer", "csv.writer.writerow", "range", "open.close", "os.path.isdir", "os.makedirs", "catenets.datasets.load", "numpy.var", "numpy.var", "numpy.var", "models.items", "csv.writer.writerow", "print", "sklearn.clone", "sklearn.clone.fit", "sklearn.clone.predict", "sklearn.clone.predict", "pehe_in.append", "pehe_out.append", "models.keys", "catenets.experiment_utils.base.eval_root_mse", "catenets.experiment_utils.base.eval_root_mse", "str", "models.keys", "str", "str"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse"], ["", "", "def", "do_acic_experiments", "(", "n_exp", ":", "int", "=", "10", ",", "file_name", ":", "str", "=", "'results_catenets'", ",", "\n", "simu_num", ":", "int", "=", "1", ",", "models", ":", "dict", "=", "None", ",", "train_size", ":", "float", "=", "0.8", ",", "\n", "pre_trans", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "models", "is", "None", ":", "\n", "        ", "models", "=", "ALL_MODELS", "\n", "\n", "# get file to write in", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "RESULT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "RESULT_DIR", ")", "\n", "\n", "", "out_file", "=", "open", "(", "RESULT_DIR", "/", "(", "file_name", "+", "SEP", "+", "str", "(", "pre_trans", ")", "+", "\n", "SEP", "+", "str", "(", "simu_num", ")", "+", "SEP", "+", "str", "(", "train_size", ")", "+", "'.csv'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out_file", ")", "\n", "header", "=", "[", "'file_name'", ",", "'cate_var_in'", ",", "'cate_var_out'", ",", "'y_var_in'", "]", "+", "[", "name", "+", "'_in'", "for", "name", "in", "models", ".", "keys", "(", ")", "]", "+", "[", "name", "+", "'_out'", "for", "name", "in", "\n", "models", ".", "keys", "(", ")", "]", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "\n", "for", "i_exp", "in", "range", "(", "n_exp", ")", ":", "\n", "# get data", "\n", "        ", "X", ",", "w", ",", "y", ",", "po_train", ",", "X_test", ",", "w_test", ",", "y_test", ",", "po_test", "=", "load", "(", "\n", "\"acic2016\"", ",", "preprocessed", "=", "pre_trans", ",", "original_acic_outcomes", "=", "True", ",", "\n", "keep_categorical", "=", "False", ",", "random_split", "=", "True", ",", "\n", "i_exp", "=", "i_exp", ",", "simu_num", "=", "simu_num", ",", "train_size", "=", "train_size", ")", "\n", "\n", "cate_in", "=", "po_train", "[", ":", ",", "1", "]", "-", "po_train", "[", ":", ",", "0", "]", "\n", "cate_out", "=", "po_test", "[", ":", ",", "1", "]", "-", "po_test", "[", ":", ",", "0", "]", "\n", "\n", "cate_var_in", "=", "np", ".", "var", "(", "cate_in", ")", "\n", "cate_var_out", "=", "np", ".", "var", "(", "cate_out", ")", "\n", "y_var_in", "=", "np", ".", "var", "(", "y", ")", "\n", "\n", "pehe_in", "=", "[", "]", "\n", "pehe_out", "=", "[", "]", "\n", "\n", "for", "model_name", ",", "estimator", "in", "models", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Experiment {} with {}\"", ".", "format", "(", "i_exp", ",", "model_name", ")", ")", "\n", "estimator_temp", "=", "clone", "(", "estimator", ")", "\n", "\n", "# fit estimator", "\n", "estimator_temp", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "w", "=", "w", ")", "\n", "\n", "cate_pred_in", "=", "estimator_temp", ".", "predict", "(", "X", ",", "return_po", "=", "False", ")", "\n", "cate_pred_out", "=", "estimator_temp", ".", "predict", "(", "X_test", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe_in", ".", "append", "(", "eval_root_mse", "(", "cate_pred_in", ",", "cate_in", ")", ")", "\n", "pehe_out", ".", "append", "(", "eval_root_mse", "(", "cate_pred_out", ",", "cate_out", ")", ")", "\n", "\n", "", "writer", ".", "writerow", "(", "\n", "[", "i_exp", ",", "cate_var_in", ",", "cate_var_out", ",", "y_var_in", "]", "+", "pehe_in", "+", "pehe_out", ")", "\n", "\n", "", "out_file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.remove": [[15, 17], ["loguru.logger.remove"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.remove"], ["def", "remove", "(", ")", "->", "None", ":", "\n", "    ", "logger", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.add": [[19, 44], ["loguru.logger.add", "loguru.logger.add"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.add", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.add"], ["", "def", "add", "(", "\n", "sink", ":", "Union", "[", "None", ",", "str", ",", "os", ".", "PathLike", ",", "TextIO", ",", "logging", ".", "Handler", "]", "=", "None", ",", "\n", "level", ":", "str", "=", "\"ERROR\"", ",", "\n", ")", "->", "None", ":", "\n", "    ", "sink", "=", "DEFAULT_SINK", "if", "sink", "is", "None", "else", "sink", "\n", "try", ":", "\n", "        ", "logger", ".", "add", "(", "\n", "sink", "=", "sink", ",", "\n", "format", "=", "LOG_FORMAT", ",", "\n", "enqueue", "=", "True", ",", "\n", "colorize", "=", "False", ",", "\n", "diagnose", "=", "True", ",", "\n", "backtrace", "=", "True", ",", "\n", "rotation", "=", "\"10 MB\"", ",", "\n", "retention", "=", "\"1 day\"", ",", "\n", "level", "=", "level", ",", "\n", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "logger", ".", "add", "(", "\n", "sink", "=", "sink", ",", "\n", "format", "=", "LOG_FORMAT", ",", "\n", "colorize", "=", "False", ",", "\n", "diagnose", "=", "True", ",", "\n", "backtrace", "=", "True", ",", "\n", "level", "=", "level", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.traceback_and_raise": [[47, 58], ["issubclass", "Exception", "loguru.logger.opt().exception", "loguru.logger.opt().critical", "loguru.logger.debug", "type", "loguru.logger.opt", "loguru.logger.opt"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.critical", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug"], ["", "", "def", "traceback_and_raise", "(", "e", ":", "Any", ",", "verbose", ":", "bool", "=", "False", ")", "->", "NoReturn", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "logger", ".", "opt", "(", "lazy", "=", "True", ")", ".", "exception", "(", "e", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "opt", "(", "lazy", "=", "True", ")", ".", "critical", "(", "e", ")", "\n", "", "", "except", "BaseException", "as", "ex", ":", "\n", "        ", "logger", ".", "debug", "(", "\"failed to print exception\"", ",", "ex", ")", "\n", "", "if", "not", "issubclass", "(", "type", "(", "e", ")", ",", "Exception", ")", ":", "\n", "        ", "e", "=", "Exception", "(", "e", ")", "\n", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function": [[60, 76], ["getattr", "loguru.logger.opt", "getattr.", "loguru.logger.debug", "loguru.logger.debug", "print"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug"], ["", "def", "create_log_and_print_function", "(", "level", ":", "str", ")", "->", "Callable", ":", "\n", "    ", "def", "log_and_print", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "method", "=", "getattr", "(", "logger", ".", "opt", "(", "lazy", "=", "True", ")", ",", "level", ",", "None", ")", "\n", "if", "method", "is", "not", "None", ":", "\n", "                ", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "debug", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "except", "BaseException", "as", "e", ":", "\n", "            ", "msg", "=", "f\"failed to log exception. {e}\"", "\n", "try", ":", "\n", "                ", "logger", ".", "debug", "(", "msg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "f\"{msg}. {e}\"", ")", "\n", "\n", "", "", "", "return", "log_and_print", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.traceback": [[78, 80], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "traceback", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"exception\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.critical": [[82, 84], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "critical", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"critical\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.error": [[86, 88], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "error", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"error\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.warning": [[90, 92], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "warning", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"warning\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info": [[94, 96], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "info", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"info\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug": [[98, 100], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "debug", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"debug\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.trace": [[102, 104], ["logger.create_log_and_print_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.create_log_and_print_function"], ["", "def", "trace", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "return", "create_log_and_print_function", "(", "level", "=", "\"trace\"", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_twins.preprocess": [[26, 209], ["numpy.random.seed", "random.seed", "pandas.read_csv", "list", "numpy.asarray", "numpy.asarray().reshape", "numpy.array", "numpy.asarray().reshape", "numpy.array", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler.fit", "sklearn.preprocessing.MinMaxScaler.transform", "numpy.random.binomial", "cleaned_columns.append", "df[].apply", "pd.read_csv.loc[].mean", "pandas.concat", "numpy.vstack", "numpy.random.permutation", "col.replace().replace", "numpy.asarray", "numpy.asarray", "numpy.ones", "numpy.random.uniform", "pandas.get_dummies", "int", "int", "col.replace", "numpy.exp", "df[].mode", "numpy.shape", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit"], ["def", "preprocess", "(", "\n", "fn_csv", ":", "Path", ",", "\n", "train_ratio", ":", "float", "=", "0.8", ",", "\n", "treatment_type", ":", "str", "=", "\"rand\"", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "treat_prop", ":", "float", "=", "0.5", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"Helper for preprocessing the Twins dataset.\n\n    Parameters\n    ----------\n    fn_csv: Path\n        Dataset CSV file path.\n    train_ratio: float\n        The ratio of training data.\n    treatment_type: string\n        The treatment selection strategy.\n    seed: float\n        Random seed.\n\n    Returns\n    -------\n    train_x: array or pd.DataFrame\n        Features in training data.\n    train_t: array or pd.DataFrame\n        Treatments in training data.\n    train_y: array or pd.DataFrame\n        Observed outcomes in training data.\n    train_potential_y: array or pd.DataFrame\n        Potential outcomes in training data.\n    test_x: array or pd.DataFrame\n        Features in testing data.\n    test_potential_y: array or pd.DataFrame\n        Potential outcomes in testing data.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Load original data (11400 patients, 30 features, 2 dimensional potential outcomes)", "\n", "df", "=", "pd", ".", "read_csv", "(", "fn_csv", ")", "\n", "\n", "cleaned_columns", "=", "[", "]", "\n", "for", "col", "in", "df", ".", "columns", ":", "\n", "        ", "cleaned_columns", ".", "append", "(", "col", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", ".", "replace", "(", "\"\u2019\"", ",", "\"\"", ")", ")", "\n", "", "df", ".", "columns", "=", "cleaned_columns", "\n", "\n", "feat_list", "=", "list", "(", "df", ")", "\n", "\n", "# 8: factor not on certificate, 9: factor not classifiable --> np.nan --> mode imputation", "\n", "medrisk_list", "=", "[", "\n", "\"anemia\"", ",", "\n", "\"cardiac\"", ",", "\n", "\"lung\"", ",", "\n", "\"diabetes\"", ",", "\n", "\"herpes\"", ",", "\n", "\"hydra\"", ",", "\n", "\"hemo\"", ",", "\n", "\"chyper\"", ",", "\n", "\"phyper\"", ",", "\n", "\"eclamp\"", ",", "\n", "\"incervix\"", ",", "\n", "\"pre4000\"", ",", "\n", "\"dtotord\"", ",", "\n", "\"preterm\"", ",", "\n", "\"renal\"", ",", "\n", "\"rh\"", ",", "\n", "\"uterine\"", ",", "\n", "\"othermr\"", ",", "\n", "]", "\n", "# 99: missing", "\n", "other_list", "=", "[", "\"cigar\"", ",", "\"drink\"", ",", "\"wtgain\"", ",", "\"gestat\"", ",", "\"dmeduc\"", ",", "\"nprevist\"", "]", "\n", "\n", "other_list2", "=", "[", "\"pldel\"", ",", "\"resstatb\"", "]", "# but no samples are missing..", "\n", "\n", "bin_list", "=", "[", "\"dmar\"", "]", "+", "medrisk_list", "\n", "con_list", "=", "[", "\"dmage\"", ",", "\"mpcb\"", "]", "+", "other_list", "\n", "cat_list", "=", "[", "\"adequacy\"", "]", "+", "other_list2", "\n", "\n", "for", "feat", "in", "medrisk_list", ":", "\n", "        ", "df", "[", "feat", "]", "=", "df", "[", "feat", "]", ".", "apply", "(", "lambda", "x", ":", "df", "[", "feat", "]", ".", "mode", "(", ")", "[", "0", "]", "if", "x", "in", "[", "8", ",", "9", "]", "else", "x", ")", "\n", "\n", "", "for", "feat", "in", "other_list", ":", "\n", "        ", "df", ".", "loc", "[", "df", "[", "feat", "]", "==", "99", ",", "feat", "]", "=", "df", ".", "loc", "[", "df", "[", "feat", "]", "!=", "99", ",", "feat", "]", ".", "mean", "(", ")", "\n", "\n", "", "df_features", "=", "df", "[", "con_list", "+", "bin_list", "]", "\n", "\n", "for", "feat", "in", "cat_list", ":", "\n", "        ", "df_features", "=", "pd", ".", "concat", "(", "\n", "[", "df_features", ",", "pd", ".", "get_dummies", "(", "df", "[", "feat", "]", ",", "prefix", "=", "feat", ")", "]", ",", "axis", "=", "1", "\n", ")", "\n", "\n", "# Define features", "\n", "", "feat_list", "=", "[", "\n", "\"dmage\"", ",", "\n", "\"mpcb\"", ",", "\n", "\"cigar\"", ",", "\n", "\"drink\"", ",", "\n", "\"wtgain\"", ",", "\n", "\"gestat\"", ",", "\n", "\"dmeduc\"", ",", "\n", "\"nprevist\"", ",", "\n", "\"dmar\"", ",", "\n", "\"anemia\"", ",", "\n", "\"cardiac\"", ",", "\n", "\"lung\"", ",", "\n", "\"diabetes\"", ",", "\n", "\"herpes\"", ",", "\n", "\"hydra\"", ",", "\n", "\"hemo\"", ",", "\n", "\"chyper\"", ",", "\n", "\"phyper\"", ",", "\n", "\"eclamp\"", ",", "\n", "\"incervix\"", ",", "\n", "\"pre4000\"", ",", "\n", "\"dtotord\"", ",", "\n", "\"preterm\"", ",", "\n", "\"renal\"", ",", "\n", "\"rh\"", ",", "\n", "\"uterine\"", ",", "\n", "\"othermr\"", ",", "\n", "\"adequacy_1\"", ",", "\n", "\"adequacy_2\"", ",", "\n", "\"adequacy_3\"", ",", "\n", "\"pldel_1\"", ",", "\n", "\"pldel_2\"", ",", "\n", "\"pldel_3\"", ",", "\n", "\"pldel_4\"", ",", "\n", "\"pldel_5\"", ",", "\n", "\"resstatb_1\"", ",", "\n", "\"resstatb_2\"", ",", "\n", "\"resstatb_3\"", ",", "\n", "\"resstatb_4\"", ",", "\n", "]", "\n", "\n", "x", "=", "np", ".", "asarray", "(", "df_features", "[", "feat_list", "]", ")", "\n", "y0", "=", "np", ".", "asarray", "(", "df", "[", "[", "\"outcome(t=0)\"", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "y0", "=", "np", ".", "array", "(", "y0", "<", "9999", ",", "dtype", "=", "int", ")", "\n", "\n", "y1", "=", "np", ".", "asarray", "(", "df", "[", "[", "\"outcome(t=1)\"", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "y1", "=", "np", ".", "array", "(", "y1", "<", "9999", ",", "dtype", "=", "int", ")", "\n", "\n", "# Preprocessing", "\n", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "x", ")", "\n", "x", "=", "scaler", ".", "transform", "(", "x", ")", "\n", "\n", "no", ",", "dim", "=", "x", ".", "shape", "\n", "\n", "if", "treatment_type", "==", "\"rand\"", ":", "\n", "# assign with p=0.5", "\n", "        ", "prob", "=", "np", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", "*", "treat_prop", "\n", "", "elif", "treatment_type", "==", "\"logistic\"", ":", "\n", "# assign with logistic prob", "\n", "        ", "coef", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ",", "size", "=", "[", "np", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "1", "]", ")", "\n", "prob", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "np", ".", "matmul", "(", "x", ",", "coef", ")", ")", ")", "\n", "\n", "", "w", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "prob", ")", "\n", "y", "=", "y1", "*", "w", "+", "y0", "*", "(", "1", "-", "w", ")", "\n", "\n", "potential_y", "=", "np", ".", "vstack", "(", "(", "y0", ",", "y1", ")", ")", ".", "T", "\n", "\n", "# Train/test division", "\n", "if", "train_ratio", "<", "1", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "no", ")", "\n", "train_idx", "=", "idx", "[", ":", "int", "(", "train_ratio", "*", "no", ")", "]", "\n", "test_idx", "=", "idx", "[", "int", "(", "train_ratio", "*", "no", ")", ":", "]", "\n", "\n", "train_x", "=", "x", "[", "train_idx", ",", ":", "]", "\n", "train_w", "=", "w", "[", "train_idx", "]", "\n", "train_y", "=", "y", "[", "train_idx", "]", "\n", "train_potential_y", "=", "potential_y", "[", "train_idx", ",", ":", "]", "\n", "\n", "test_x", "=", "x", "[", "test_idx", ",", ":", "]", "\n", "test_potential_y", "=", "potential_y", "[", "test_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "train_x", "=", "x", "\n", "train_w", "=", "w", "\n", "train_y", "=", "y", "\n", "train_potential_y", "=", "potential_y", "\n", "test_x", "=", "None", "\n", "test_potential_y", "=", "None", "\n", "\n", "", "return", "train_x", ",", "train_w", ",", "train_y", ",", "train_potential_y", ",", "test_x", ",", "test_potential_y", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_twins.load": [[211, 265], ["network.download_if_needed", "catenets.debug", "dataset_twins.preprocess"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess"], ["", "def", "load", "(", "\n", "data_path", ":", "Path", ",", "\n", "train_ratio", ":", "float", "=", "0.8", ",", "\n", "treatment_type", ":", "str", "=", "\"rand\"", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "treat_prop", ":", "float", "=", "0.5", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Twins dataset dataloader.\n        - Download the dataset if needed.\n        - Load the dataset.\n        - Preprocess the data.\n        - Return train/test split.\n\n    Parameters\n    ----------\n    data_path: Path\n        Path to the CSV. If it is missing, it will be downloaded.\n    train_ratio: float\n        Train/test ratio\n    treatment_type: str\n        Treatment generation strategy\n    seed: float\n        Random seed\n    treat_prop: float\n        Treatment proportion\n\n    Returns\n    -------\n    train_x: array or pd.DataFrame\n        Features in training data.\n    train_t: array or pd.DataFrame\n        Treatments in training data.\n    train_y: array or pd.DataFrame\n        Observed outcomes in training data.\n    train_potential_y: array or pd.DataFrame\n        Potential outcomes in training data.\n    test_x: array or pd.DataFrame\n        Features in testing data.\n    test_potential_y: array or pd.DataFrame\n        Potential outcomes in testing data.\n    \"\"\"", "\n", "csv", "=", "data_path", "/", "DATASET", "\n", "\n", "download_if_needed", "(", "csv", ",", "http_url", "=", "URL", ")", "\n", "\n", "log", ".", "debug", "(", "f\"load dataset {csv}\"", ")", "\n", "\n", "return", "preprocess", "(", "\n", "csv", ",", "\n", "train_ratio", "=", "train_ratio", ",", "\n", "treatment_type", "=", "treatment_type", ",", "\n", "seed", "=", "seed", ",", "\n", "treat_prop", "=", "treat_prop", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_covariates": [[52, 83], ["pandas.read_csv", "X.drop.drop", "X.drop.drop", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform", "type", "sklearn.preprocessing.OneHotEncoder", "sklearn.preprocessing.OneHotEncoder.fit", "range", "feature_list.append", "numpy.array().reshape", "len", "list", "sklearn.preprocessing.OneHotEncoder.transform().toarray", "numpy.array", "sklearn.preprocessing.OneHotEncoder.get_feature_names", "sklearn.preprocessing.OneHotEncoder.transform", "list", "numpy.array().reshape", "sklearn.preprocessing.OneHotEncoder.get_feature_names", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit"], ["def", "get_acic_covariates", "(", "\n", "fn_csv", ":", "Path", ",", "keep_categorical", ":", "bool", "=", "False", ",", "preprocessed", ":", "bool", "=", "True", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "X", "=", "pd", ".", "read_csv", "(", "fn_csv", ")", "\n", "if", "not", "keep_categorical", ":", "\n", "        ", "X", "=", "X", ".", "drop", "(", "columns", "=", "[", "\"x_2\"", ",", "\"x_21\"", ",", "\"x_24\"", "]", ")", "\n", "", "else", ":", "\n", "# encode categorical features", "\n", "        ", "feature_list", "=", "[", "]", "\n", "for", "cols_", "in", "X", ".", "columns", ":", "\n", "            ", "if", "type", "(", "X", ".", "loc", "[", "X", ".", "index", "[", "0", "]", ",", "cols_", "]", ")", "not", "in", "[", "np", ".", "int64", ",", "np", ".", "float64", "]", ":", "\n", "\n", "                ", "enc", "=", "OneHotEncoder", "(", "drop", "=", "\"first\"", ")", "\n", "\n", "enc", ".", "fit", "(", "np", ".", "array", "(", "X", "[", "[", "cols_", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "list", "(", "enc", ".", "get_feature_names", "(", ")", ")", ")", ")", ":", "\n", "                    ", "X", "[", "cols_", "+", "list", "(", "enc", ".", "get_feature_names", "(", ")", ")", "[", "k", "]", "]", "=", "enc", ".", "transform", "(", "\n", "np", ".", "array", "(", "X", "[", "[", "cols_", "]", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", ")", ".", "toarray", "(", ")", "[", ":", ",", "k", "]", "\n", "\n", "", "feature_list", ".", "append", "(", "cols_", ")", "\n", "\n", "", "", "X", ".", "drop", "(", "feature_list", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "", "if", "preprocessed", ":", "\n", "        ", "X_t", "=", "X", ".", "values", "\n", "", "else", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "X_t", "=", "scaler", ".", "fit_transform", "(", "X", ")", "\n", "", "return", "X_t", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess_simu": [[85, 198], ["dataset_acic2016.get_acic_covariates", "numpy.random.seed", "numpy.arange", "numpy.random.shuffle", "numpy.zeros().reshape", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.mean", "numpy.random.choice", "numpy.random.choice", "numpy.random.normal().reshape", "numpy.zeros", "numpy.dot().reshape", "numpy.dot().reshape", "numpy.arange", "numpy.random.shuffle", "list", "range", "numpy.random.choice", "numpy.random.choice", "numpy.asarray().squeeze", "numpy.asarray().squeeze", "numpy.arange", "numpy.dot", "numpy.dot", "list.append", "numpy.array", "numpy.dot().reshape", "numpy.dot().reshape", "numpy.random.normal", "numpy.dot", "numpy.dot", "numpy.asarray", "numpy.asarray", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_covariates"], ["", "def", "preprocess_simu", "(", "\n", "fn_csv", ":", "Path", ",", "\n", "n_0", ":", "int", "=", "2000", ",", "\n", "n_1", ":", "int", "=", "200", ",", "\n", "n_test", ":", "int", "=", "500", ",", "\n", "error_sd", ":", "float", "=", "1", ",", "\n", "sp_lin", ":", "float", "=", "0.6", ",", "\n", "sp_nonlin", ":", "float", "=", "0.3", ",", "\n", "prop_gamma", ":", "float", "=", "0", ",", "\n", "prop_omega", ":", "float", "=", "0", ",", "\n", "ate_goal", ":", "float", "=", "0", ",", "\n", "inter", ":", "bool", "=", "True", ",", "\n", "i_exp", ":", "int", "=", "0", ",", "\n", "keep_categorical", ":", "bool", "=", "False", ",", "\n", "preprocessed", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "X", "=", "get_acic_covariates", "(", "\n", "fn_csv", ",", "keep_categorical", "=", "keep_categorical", ",", "preprocessed", "=", "preprocessed", "\n", ")", "\n", "np", ".", "random", ".", "seed", "(", "i_exp", ")", "\n", "\n", "# shuffle indices", "\n", "n_total", ",", "n_cov", "=", "X", ".", "shape", "\n", "ind", "=", "np", ".", "arange", "(", "n_total", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ind", ")", "\n", "ind_test", "=", "ind", "[", "-", "n_test", ":", "]", "\n", "ind_1", "=", "ind", "[", "n_0", ":", "(", "n_0", "+", "n_1", ")", "]", "\n", "\n", "# create treatment indicator (treatment assignment does not matter in test set)", "\n", "w", "=", "np", ".", "zeros", "(", "n_total", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "w", "[", "ind_1", "]", "=", "1", "\n", "\n", "# create dgp", "\n", "coeffs_", "=", "[", "0", ",", "1", "]", "\n", "# sample baseline coefficients", "\n", "beta_0", "=", "np", ".", "random", ".", "choice", "(", "coeffs_", ",", "size", "=", "n_cov", ",", "replace", "=", "True", ",", "p", "=", "[", "1", "-", "sp_lin", ",", "sp_lin", "]", ")", "\n", "intercept", "=", "np", ".", "random", ".", "choice", "(", "[", "x", "for", "x", "in", "np", ".", "arange", "(", "-", "1", ",", "1.25", ",", "0.25", ")", "]", ")", "\n", "\n", "# sample treatment effect coefficients", "\n", "gamma", "=", "np", ".", "random", ".", "choice", "(", "\n", "coeffs_", ",", "size", "=", "n_cov", ",", "replace", "=", "True", ",", "p", "=", "[", "1", "-", "prop_gamma", ",", "prop_gamma", "]", "\n", ")", "\n", "omega", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "replace", "=", "True", ",", "size", "=", "n_cov", ",", "p", "=", "[", "prop_omega", ",", "1", "-", "prop_omega", "]", "\n", ")", "\n", "\n", "# simulate mu_0 and mu_1", "\n", "mu_0", "=", "(", "intercept", "+", "np", ".", "dot", "(", "X", ",", "beta_0", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "mu_1", "=", "(", "intercept", "+", "np", ".", "dot", "(", "X", ",", "gamma", "+", "beta_0", "*", "omega", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "if", "sp_nonlin", ">", "0", ":", "\n", "        ", "coefs_sq", "=", "[", "0", ",", "0.1", "]", "\n", "beta_sq", "=", "np", ".", "random", ".", "choice", "(", "\n", "coefs_sq", ",", "size", "=", "N_NUM_COLS", ",", "replace", "=", "True", ",", "p", "=", "[", "1", "-", "sp_nonlin", ",", "sp_nonlin", "]", "\n", ")", "\n", "omega", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "replace", "=", "True", ",", "size", "=", "N_NUM_COLS", ",", "p", "=", "[", "prop_omega", ",", "1", "-", "prop_omega", "]", "\n", ")", "\n", "X_sq", "=", "X", "[", ":", ",", "NUMERIC_COLS", "]", "**", "2", "\n", "mu_0", "=", "mu_0", "+", "np", ".", "dot", "(", "X_sq", ",", "beta_sq", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "mu_1", "=", "mu_1", "+", "np", ".", "dot", "(", "X_sq", ",", "beta_sq", "*", "omega", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "if", "inter", ":", "\n", "# randomly add some interactions", "\n", "            ", "ind_c", "=", "np", ".", "arange", "(", "n_cov", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ind_c", ")", "\n", "inter_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_cov", "-", "2", ",", "2", ")", ":", "\n", "                ", "inter_list", ".", "append", "(", "X", "[", ":", ",", "ind_c", "[", "i", "]", "]", "*", "X", "[", ":", ",", "ind_c", "[", "i", "+", "1", "]", "]", ")", "\n", "\n", "", "X_inter", "=", "np", ".", "array", "(", "inter_list", ")", ".", "T", "\n", "n_inter", "=", "X_inter", ".", "shape", "[", "1", "]", "\n", "beta_inter", "=", "np", ".", "random", ".", "choice", "(", "\n", "coefs_sq", ",", "size", "=", "n_inter", ",", "replace", "=", "True", ",", "p", "=", "[", "1", "-", "sp_nonlin", ",", "sp_nonlin", "]", "\n", ")", "\n", "omega", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "0", ",", "1", "]", ",", "replace", "=", "True", ",", "size", "=", "n_inter", ",", "p", "=", "[", "prop_omega", ",", "1", "-", "prop_omega", "]", "\n", ")", "\n", "mu_0", "=", "mu_0", "+", "np", ".", "dot", "(", "X_inter", ",", "beta_inter", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "mu_1", "=", "mu_1", "+", "np", ".", "dot", "(", "X_inter", ",", "beta_inter", "*", "omega", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "", "ate", "=", "np", ".", "mean", "(", "mu_1", "-", "mu_0", ")", "\n", "mu_1", "=", "mu_1", "-", "ate", "+", "ate_goal", "\n", "\n", "y", "=", "(", "\n", "w", "*", "mu_1", "\n", "+", "(", "1", "-", "w", ")", "*", "mu_0", "\n", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "error_sd", ",", "n_total", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", ")", "\n", "\n", "X_train", ",", "y_train", ",", "w_train", ",", "mu_0_train", ",", "mu_1_train", "=", "(", "\n", "X", "[", "ind", "[", ":", "(", "n_0", "+", "n_1", ")", "]", ",", ":", "]", ",", "\n", "y", "[", "ind", "[", ":", "(", "n_0", "+", "n_1", ")", "]", "]", ",", "\n", "w", "[", "ind", "[", ":", "(", "n_0", "+", "n_1", ")", "]", "]", ",", "\n", "mu_0", "[", "ind", "[", ":", "(", "n_0", "+", "n_1", ")", "]", "]", ",", "\n", "mu_1", "[", "ind", "[", ":", "(", "n_0", "+", "n_1", ")", "]", "]", ",", "\n", ")", "\n", "X_test", ",", "y_test", ",", "w_test", ",", "mu_0_t", ",", "mu_1_t", "=", "(", "\n", "X", "[", "ind_test", ",", ":", "]", ",", "\n", "y", "[", "ind_test", "]", ",", "\n", "w", "[", "ind_test", "]", ",", "\n", "mu_0", "[", "ind_test", "]", ",", "\n", "mu_1", "[", "ind_test", "]", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "X_train", ",", "\n", "w_train", ",", "\n", "y_train", ",", "\n", "np", ".", "asarray", "(", "[", "mu_0_train", ",", "mu_1_train", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", "X_test", ",", "\n", "w_test", ",", "\n", "y_test", ",", "\n", "np", ".", "asarray", "(", "[", "mu_0_t", ",", "mu_1_t", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_orig_filenames": [[201, 204], ["sorted", "glob.glob", "str"], "function", ["None"], ["", "def", "get_acic_orig_filenames", "(", "data_path", ":", "Path", ",", "simu_num", ":", "int", ")", "->", "list", ":", "\n", "    ", "return", "sorted", "(", "glob", ".", "glob", "(", "(", "data_path", "/", "(", "\"data_cf_all/\"", "+", "str", "(", "simu_num", ")", "+", "\n", "'/zymu_*.csv'", ")", ")", ".", "__str__", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_orig_outcomes": [[206, 217], ["dataset_acic2016.get_acic_orig_filenames", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_orig_filenames"], ["", "def", "get_acic_orig_outcomes", "(", "data_path", ":", "Path", ",", "\n", "simu_num", ":", "int", ",", "\n", "i_exp", ":", "int", ")", "->", "Tuple", ":", "\n", "    ", "file_list", "=", "get_acic_orig_filenames", "(", "data_path", "=", "data_path", ",", "\n", "simu_num", "=", "simu_num", ")", "\n", "\n", "out", "=", "pd", ".", "read_csv", "(", "file_list", "[", "i_exp", "]", ")", "\n", "w", "=", "out", "[", "'z'", "]", "\n", "y", "=", "w", "*", "out", "[", "'y1'", "]", "+", "(", "1", "-", "w", ")", "*", "out", "[", "'y0'", "]", "\n", "mu_0", ",", "mu_1", "=", "out", "[", "'mu0'", "]", ",", "out", "[", "'mu1'", "]", "\n", "return", "y", ".", "values", ",", "w", ".", "values", ",", "mu_0", ".", "values", ",", "mu_1", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess_acic_orig": [[219, 256], ["dataset_acic2016.get_acic_covariates", "dataset_acic2016.get_acic_orig_outcomes", "sklearn.model_selection.train_test_split", "numpy.asarray().squeeze", "numpy.asarray().squeeze", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_covariates", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.get_acic_orig_outcomes"], ["", "def", "preprocess_acic_orig", "(", "fn_csv", ":", "Path", ",", "\n", "data_path", ":", "Path", ",", "\n", "preprocessed", ":", "bool", "=", "False", ",", "\n", "keep_categorical", ":", "bool", "=", "True", ",", "\n", "simu_num", ":", "int", "=", "1", ",", "\n", "i_exp", ":", "int", "=", "0", ",", "\n", "train_size", ":", "int", "=", "4000", ",", "\n", "random_split", ":", "bool", "=", "False", "\n", ")", "->", "Tuple", ":", "\n", "    ", "X", "=", "get_acic_covariates", "(", "\n", "fn_csv", ",", "keep_categorical", "=", "keep_categorical", ",", "preprocessed", "=", "preprocessed", "\n", ")", "\n", "\n", "y", ",", "w", ",", "mu_0", ",", "mu_1", "=", "get_acic_orig_outcomes", "(", "data_path", "=", "data_path", ",", "simu_num", "=", "simu_num", ",", "i_exp", "=", "i_exp", ")", "\n", "\n", "if", "not", "random_split", ":", "\n", "        ", "X_train", ",", "y_train", ",", "w_train", ",", "mu_0_train", ",", "mu_1_train", "=", "X", "[", ":", "train_size", ",", ":", "]", ",", "y", "[", ":", "train_size", "]", ",", "w", "[", ":", "train_size", "]", ",", "mu_0", "[", ":", "train_size", "]", ",", "mu_1", "[", ":", "train_size", "]", "\n", "X_test", ",", "y_test", ",", "w_test", ",", "mu_0_test", ",", "mu_1_test", "=", "X", "[", "train_size", ":", ",", ":", "]", ",", "y", "[", "train_size", ":", "]", ",", "w", "[", "train_size", ":", "]", ",", "mu_0", "[", "train_size", ":", "]", ",", "mu_1", "[", "train_size", ":", "]", "\n", "", "else", ":", "\n", "        ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", ",", "w_train", ",", "w_test", ",", "mu_0_train", ",", "mu_0_test", ",", "mu_1_train", ",", "mu_1_test", "=", "train_test_split", "(", "X", ",", "y", ",", "w", ",", "mu_0", ",", "mu_1", ",", "\n", "test_size", "=", "1", "-", "train_size", ",", "\n", "random_state", "=", "i_exp", ")", "\n", "\n", "", "return", "(", "\n", "X_train", ",", "\n", "w_train", ",", "\n", "y_train", ",", "\n", "np", ".", "asarray", "(", "[", "mu_0_train", ",", "mu_1_train", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", "X_test", ",", "\n", "w_test", ",", "\n", "y_test", ",", "\n", "np", ".", "asarray", "(", "[", "mu_0_test", ",", "mu_1_test", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess": [[259, 270], ["dataset_acic2016.preprocess_simu", "dataset_acic2016.preprocess_acic_orig"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess_simu", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess_acic_orig"], ["", "def", "preprocess", "(", "fn_csv", ":", "Path", ",", "\n", "data_path", ":", "Path", ",", "\n", "preprocessed", ":", "bool", "=", "True", ",", "\n", "original_acic_outcomes", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "if", "not", "original_acic_outcomes", ":", "\n", "        ", "return", "preprocess_simu", "(", "fn_csv", "=", "fn_csv", ",", "preprocessed", "=", "preprocessed", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "preprocess_acic_orig", "(", "fn_csv", "=", "fn_csv", ",", "preprocessed", "=", "preprocessed", ",", "\n", "data_path", "=", "data_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.load": [[272, 326], ["catenets.debug", "dataset_acic2016.preprocess", "network.download_if_needed", "network.download_if_needed"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_acic2016.preprocess", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed"], ["", "", "def", "load", "(", "\n", "data_path", ":", "Path", ",", "\n", "preprocessed", ":", "bool", "=", "True", ",", "\n", "original_acic_outcomes", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    ACIC2016 dataset dataloader.\n        - Download the dataset if needed.\n        - Load the dataset.\n        - Preprocess the data.\n        - Return train/test split.\n\n    Parameters\n    ----------\n    data_path: Path\n        Path to the CSV. If it is missing, it will be downloaded.\n    preprocessed: bool\n        Switch between the raw and preprocessed versions of the dataset.\n    original_acic_outcomes: bool\n        Switch between new simulations (Inductive bias paper) and original acic outcomes\n\n    Returns\n    -------\n    train_x: array or pd.DataFrame\n        Features in training data.\n    train_t: array or pd.DataFrame\n        Treatments in training data.\n    train_y: array or pd.DataFrame\n        Observed outcomes in training data.\n    train_potential_y: array or pd.DataFrame\n        Potential outcomes in training data.\n    test_x: array or pd.DataFrame\n        Features in testing data.\n    test_potential_y: array or pd.DataFrame\n        Potential outcomes in testing data.\n    \"\"\"", "\n", "if", "preprocessed", ":", "\n", "        ", "csv", "=", "data_path", "/", "\"x_trans.csv\"", "\n", "\n", "download_if_needed", "(", "csv", ",", "file_id", "=", "PREPROCESSED_FILE_ID", ")", "\n", "", "else", ":", "\n", "        ", "arch", "=", "data_path", "/", "\"data_cf_all.tar.gz\"", "\n", "\n", "download_if_needed", "(", "\n", "arch", ",", "file_id", "=", "FILE_ID", ",", "unarchive", "=", "True", ",", "unarchive_folder", "=", "data_path", "\n", ")", "\n", "\n", "csv", "=", "data_path", "/", "\"data_cf_all/x.csv\"", "\n", "", "log", ".", "debug", "(", "f\"load dataset {csv}\"", ")", "\n", "\n", "return", "preprocess", "(", "csv", ",", "data_path", "=", "data_path", ",", "preprocessed", "=", "preprocessed", ",", "\n", "original_acic_outcomes", "=", "original_acic_outcomes", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_gdrive_if_needed": [[13, 30], ["pathlib.Path", "pathlib.Path.exists", "google_drive_downloader.GoogleDriveDownloader.download_file_from_google_drive"], "function", ["None"], ["def", "download_gdrive_if_needed", "(", "path", ":", "Path", ",", "file_id", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Helper for downloading a file from Google Drive, if it is now already on the disk.\n\n    Parameters\n    ----------\n    path: Path\n        Where to download the file\n    file_id: str\n        Google Drive File ID. Details: https://developers.google.com/drive/api/v3/about-files\n    \"\"\"", "\n", "path", "=", "Path", "(", "path", ")", "\n", "\n", "if", "path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "gdd", ".", "download_file_from_google_drive", "(", "file_id", "=", "file_id", ",", "dest_path", "=", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_http_if_needed": [[32, 53], ["pathlib.Path", "pathlib.Path.exists", "url.lower().startswith", "ValueError", "urllib.request.urlretrieve", "url.lower"], "function", ["None"], ["", "def", "download_http_if_needed", "(", "path", ":", "Path", ",", "url", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Helper for downloading a file, if it is now already on the disk.\n\n    Parameters\n    ----------\n    path: Path\n        Where to download the file.\n    url: URL string\n        HTTP URL for the dataset.\n    \"\"\"", "\n", "path", "=", "Path", "(", "path", ")", "\n", "\n", "if", "path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "url", ".", "lower", "(", ")", ".", "startswith", "(", "\"http\"", ")", ":", "\n", "        ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "path", ")", "# nosec", "\n", "return", "\n", "\n", "", "raise", "ValueError", "(", "f\"Invalid url provided {url}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.unarchive_if_needed": [[55, 76], ["str().endswith", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "str().endswith", "str", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "NotImplementedError", "str"], "function", ["None"], ["", "def", "unarchive_if_needed", "(", "path", ":", "Path", ",", "output_folder", ":", "Path", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Helper for uncompressing archives. Supports .tar.gz and .tar.\n\n    Parameters\n    ----------\n    path: Path\n        Source archive.\n    output_folder: Path\n        Where to unarchive.\n    \"\"\"", "\n", "if", "str", "(", "path", ")", ".", "endswith", "(", "\".tar.gz\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "path", ",", "\"r:gz\"", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "output_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "", "elif", "str", "(", "path", ")", ".", "endswith", "(", "\".tar\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "path", ",", "\"r:\"", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "output_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"archive not supported {path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed": [[78, 112], ["network.download_gdrive_if_needed", "ValueError", "network.unarchive_if_needed", "network.download_http_if_needed", "ValueError"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_gdrive_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.unarchive_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_http_if_needed"], ["", "", "def", "download_if_needed", "(", "\n", "download_path", ":", "Path", ",", "\n", "file_id", ":", "Optional", "[", "str", "]", "=", "None", ",", "# used for downloading from Google Drive", "\n", "http_url", ":", "Optional", "[", "str", "]", "=", "None", ",", "# used for downloading from a HTTP URL", "\n", "unarchive", ":", "bool", "=", "False", ",", "# unzip a downloaded archive", "\n", "unarchive_folder", ":", "Optional", "[", "Path", "]", "=", "None", ",", "# unzip folder", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Helper for retrieving online datasets.\n\n    Parameters\n    ----------\n    download_path: str\n        Where to download the archive\n    file_id: str, optional\n        Set this if you want to download from a public Google drive share\n    http_url: str, optional\n        Set this if you want to download from a HTTP URL\n    unarchive: bool\n        Set this if you want to try to unarchive the downloaded file\n    unarchive_folder: str\n        Mandatory if you set unarchive to True.\n    \"\"\"", "\n", "if", "file_id", "is", "not", "None", ":", "\n", "        ", "download_gdrive_if_needed", "(", "download_path", ",", "file_id", ")", "\n", "", "elif", "http_url", "is", "not", "None", ":", "\n", "        ", "download_http_if_needed", "(", "download_path", ",", "http_url", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please provide a download URL\"", ")", "\n", "\n", "", "if", "unarchive", "and", "unarchive_folder", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please provide a folder for the archive\"", ")", "\n", "", "if", "unarchive", "and", "unarchive_folder", "is", "not", "None", ":", "\n", "        ", "unarchive_if_needed", "(", "download_path", ",", "unarchive_folder", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.__init__.load": [[16, 34], ["dataset_twins.load", "dataset_ihdp.load", "dataset_acic2016.load", "Exception"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_data_npz": [[27, 57], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["def", "load_data_npz", "(", "fname", ":", "Path", ",", "get_po", ":", "bool", "=", "True", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Helper function for loading the IHDP data set (adapted from https://github.com/clinicalml/cfrnet)\n\n    Parameters\n    ----------\n    fname: Path\n        Dataset path\n\n    Returns\n    -------\n    data: dict\n        Raw IHDP dict, with X, w, y and yf keys.\n    \"\"\"", "\n", "data_in", "=", "np", ".", "load", "(", "fname", ")", "\n", "data", "=", "{", "\"X\"", ":", "data_in", "[", "\"x\"", "]", ",", "\"w\"", ":", "data_in", "[", "\"t\"", "]", ",", "\"y\"", ":", "data_in", "[", "\"yf\"", "]", "}", "\n", "try", ":", "\n", "        ", "data", "[", "\"ycf\"", "]", "=", "data_in", "[", "\"ycf\"", "]", "\n", "", "except", "BaseException", ":", "\n", "        ", "data", "[", "\"ycf\"", "]", "=", "None", "\n", "\n", "", "if", "get_po", ":", "\n", "        ", "data", "[", "\"mu0\"", "]", "=", "data_in", "[", "\"mu0\"", "]", "\n", "data", "[", "\"mu1\"", "]", "=", "data_in", "[", "\"mu1\"", "]", "\n", "\n", "", "data", "[", "\"HAVE_TRUTH\"", "]", "=", "not", "data", "[", "\"ycf\"", "]", "is", "None", "\n", "data", "[", "\"dim\"", "]", "=", "data", "[", "\"X\"", "]", ".", "shape", "[", "1", "]", "\n", "data", "[", "\"n\"", "]", "=", "data", "[", "\"X\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.prepare_ihdp_data": [[59, 141], ["numpy.sqrt", "cate_in.var"], "function", ["None"], ["", "def", "prepare_ihdp_data", "(", "\n", "data_train", ":", "dict", ",", "\n", "data_test", ":", "dict", ",", "\n", "rescale", ":", "bool", "=", "False", ",", "\n", "setting", ":", "str", "=", "\"C\"", ",", "\n", "return_pos", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Helper for preprocessing the IHDP dataset.\n\n    Parameters\n    ----------\n    data_train: pd.DataFrame or dict\n        Train dataset\n    data_test: pd.DataFrame or dict\n        Test dataset\n    rescale: bool, default False\n        Rescale the outcomes to have similar scale\n    setting: str, default C\n        Experiment setting\n    return_pos: bool\n        Return potential outcomes\n\n    Returns\n    -------\n    X: dict or pd.DataFrame\n        Training Feature set\n    y: pd.DataFrame or list\n        Outcome list\n    t: pd.DataFrame or list\n        Treatment list\n    cate_true_in: pd.DataFrame or list\n        Average treatment effects for the training set\n    X_t: pd.Dataframe or list\n        Test feature set\n    cate_true_out: pd.DataFrame of list\n        Average treatment effects for the testing set\n    \"\"\"", "\n", "\n", "X", ",", "y", ",", "w", ",", "mu0", ",", "mu1", "=", "(", "\n", "data_train", "[", "\"X\"", "]", ",", "\n", "data_train", "[", "\"y\"", "]", ",", "\n", "data_train", "[", "\"w\"", "]", ",", "\n", "data_train", "[", "\"mu0\"", "]", ",", "\n", "data_train", "[", "\"mu1\"", "]", ",", "\n", ")", "\n", "\n", "X_t", ",", "_", ",", "_", ",", "mu0_t", ",", "mu1_t", "=", "(", "\n", "data_test", "[", "\"X\"", "]", ",", "\n", "data_test", "[", "\"y\"", "]", ",", "\n", "data_test", "[", "\"w\"", "]", ",", "\n", "data_test", "[", "\"mu0\"", "]", ",", "\n", "data_test", "[", "\"mu1\"", "]", ",", "\n", ")", "\n", "if", "setting", "==", "\"D\"", ":", "\n", "        ", "y", "[", "w", "==", "1", "]", "=", "y", "[", "w", "==", "1", "]", "+", "mu0", "[", "w", "==", "1", "]", "\n", "mu1", "=", "mu0", "+", "mu1", "\n", "mu1_t", "=", "mu0_t", "+", "mu1_t", "\n", "\n", "", "if", "rescale", ":", "\n", "# rescale all outcomes to have similar scale of CATEs if sd_cate > 1", "\n", "        ", "cate_in", "=", "mu0", "-", "mu1", "\n", "sd_cate", "=", "np", ".", "sqrt", "(", "cate_in", ".", "var", "(", ")", ")", "\n", "\n", "if", "sd_cate", ">", "1", ":", "\n", "# training data", "\n", "            ", "error", "=", "y", "-", "w", "*", "mu1", "-", "(", "1", "-", "w", ")", "*", "mu0", "\n", "mu0", "=", "mu0", "/", "sd_cate", "\n", "mu1", "=", "mu1", "/", "sd_cate", "\n", "y", "=", "w", "*", "mu1", "+", "(", "1", "-", "w", ")", "*", "mu0", "+", "error", "\n", "\n", "# test data", "\n", "mu0_t", "=", "mu0_t", "/", "sd_cate", "\n", "mu1_t", "=", "mu1_t", "/", "sd_cate", "\n", "\n", "", "", "cate_true_in", "=", "mu1", "-", "mu0", "\n", "cate_true_out", "=", "mu1_t", "-", "mu0_t", "\n", "\n", "if", "return_pos", ":", "\n", "        ", "return", "X", ",", "y", ",", "w", ",", "cate_true_in", ",", "X_t", ",", "cate_true_out", ",", "mu0", ",", "mu1", ",", "mu0_t", ",", "mu1_t", "\n", "\n", "", "return", "X", ",", "y", ",", "w", ",", "cate_true_in", ",", "X_t", ",", "cate_true_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set": [[143, 173], ["None"], "function", ["None"], ["", "def", "get_one_data_set", "(", "D", ":", "dict", ",", "i_exp", ":", "int", ",", "get_po", ":", "bool", "=", "True", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Helper for getting the IHDP data for one experiment. Adapted from https://github.com/clinicalml/cfrnet\n\n    Parameters\n    ----------\n    D: dict or pd.DataFrame\n        All the experiment\n    i_exp: int\n        Experiment number\n\n    Returns\n    -------\n    data: dict or pd.Dataframe\n        dict with the experiment\n    \"\"\"", "\n", "D_exp", "=", "{", "}", "\n", "D_exp", "[", "\"X\"", "]", "=", "D", "[", "\"X\"", "]", "[", ":", ",", ":", ",", "i_exp", "-", "1", "]", "\n", "D_exp", "[", "\"w\"", "]", "=", "D", "[", "\"w\"", "]", "[", ":", ",", "i_exp", "-", "1", ":", "i_exp", "]", "\n", "D_exp", "[", "\"y\"", "]", "=", "D", "[", "\"y\"", "]", "[", ":", ",", "i_exp", "-", "1", ":", "i_exp", "]", "\n", "if", "D", "[", "\"HAVE_TRUTH\"", "]", ":", "\n", "        ", "D_exp", "[", "\"ycf\"", "]", "=", "D", "[", "\"ycf\"", "]", "[", ":", ",", "i_exp", "-", "1", ":", "i_exp", "]", "\n", "", "else", ":", "\n", "        ", "D_exp", "[", "\"ycf\"", "]", "=", "None", "\n", "\n", "", "if", "get_po", ":", "\n", "        ", "D_exp", "[", "\"mu0\"", "]", "=", "D", "[", "\"mu0\"", "]", "[", ":", ",", "i_exp", "-", "1", ":", "i_exp", "]", "\n", "D_exp", "[", "\"mu1\"", "]", "=", "D", "[", "\"mu1\"", "]", "[", ":", ",", "i_exp", "-", "1", ":", "i_exp", "]", "\n", "\n", "", "return", "D_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load": [[175, 230], ["dataset_ihdp.load_raw", "dataset_ihdp.get_one_data_set", "dataset_ihdp.get_one_data_set", "dataset_ihdp.prepare_ihdp_data", "numpy.asarray().squeeze", "numpy.asarray().squeeze", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_raw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.get_one_data_set", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.prepare_ihdp_data"], ["", "def", "load", "(", "data_path", ":", "Path", ",", "exp", ":", "int", "=", "1", ",", "rescale", ":", "bool", "=", "False", ",", "**", "kwargs", ":", "Any", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Get IHDP train/test datasets with treatments and labels.\n\n    Parameters\n    ----------\n    data_path: Path\n        Path to the dataset csv. If the data is missing, it will be downloaded.\n\n\n    Returns\n    -------\n    X: pd.Dataframe or array\n        The training feature set\n    w: pd.DataFrame or array\n        Training treatment assignments.\n    y: pd.Dataframe or array\n        The training labels\n    training potential outcomes: pd.DataFrame or array.\n        Potential outcomes for the training set.\n    X_t: pd.DataFrame or array\n        The testing feature set\n    testing potential outcomes: pd.DataFrame of array\n        Potential outcomes for the testing set.\n    \"\"\"", "\n", "data_train", ",", "data_test", "=", "load_raw", "(", "data_path", ")", "\n", "\n", "data_exp", "=", "get_one_data_set", "(", "data_train", ",", "i_exp", "=", "exp", ",", "get_po", "=", "True", ")", "\n", "data_exp_test", "=", "get_one_data_set", "(", "data_test", ",", "i_exp", "=", "exp", ",", "get_po", "=", "True", ")", "\n", "\n", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "cate_true_in", ",", "\n", "X_t", ",", "\n", "cate_true_out", ",", "\n", "mu0", ",", "\n", "mu1", ",", "\n", "mu0_t", ",", "\n", "mu1_t", ",", "\n", ")", "=", "prepare_ihdp_data", "(", "\n", "data_exp", ",", "\n", "data_exp_test", ",", "\n", "rescale", "=", "rescale", ",", "\n", "return_pos", "=", "True", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "X", ",", "\n", "w", ",", "\n", "y", ",", "\n", "np", ".", "asarray", "(", "[", "mu0", ",", "mu1", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", "X_t", ",", "\n", "np", ".", "asarray", "(", "[", "mu0_t", ",", "mu1_t", "]", ")", ".", "squeeze", "(", ")", ".", "T", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_raw": [[233, 268], ["catenets.debug", "network.download_if_needed", "network.download_if_needed", "dataset_ihdp.load_data_npz", "dataset_ihdp.load_data_npz", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.network.download_if_needed", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_data_npz", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load_data_npz"], ["", "def", "load_raw", "(", "data_path", ":", "Path", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Get IHDP raw train/test sets.\n\n    Parameters\n    ----------\n    data_path: Path\n        Path to the dataset csv. If the data is missing, it will be downloaded.\n\n    Returns\n    -------\n\n    data_train: dict or pd.DataFrame\n        Training data\n    data_test: dict or pd.DataFrame\n        Testing data\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_path", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "pass", "\n", "\n", "", "train_csv", "=", "data_path", "/", "TRAIN_DATASET", "\n", "test_csv", "=", "data_path", "/", "TEST_DATASET", "\n", "\n", "log", ".", "debug", "(", "f\"load raw dataset {train_csv}\"", ")", "\n", "\n", "download_if_needed", "(", "train_csv", ",", "http_url", "=", "TRAIN_URL", ")", "\n", "download_if_needed", "(", "test_csv", ",", "http_url", "=", "TEST_URL", ")", "\n", "\n", "data_train", "=", "load_data_npz", "(", "train_csv", ",", "get_po", "=", "True", ")", "\n", "data_test", "=", "load_data_npz", "(", "test_csv", ",", "get_po", "=", "True", ")", "\n", "\n", "return", "data_train", ",", "data_test", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.test_datasets.test_dataset_sanity_twins": [[6, 27], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "int"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"train_ratio\"", ",", "[", "0.5", ",", "0.8", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"treatment_type\"", ",", "[", "\"rand\"", ",", "\"logistic\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"treat_prop\"", ",", "[", "0.1", ",", "0.9", "]", ")", "\n", "def", "test_dataset_sanity_twins", "(", "\n", "train_ratio", ":", "float", ",", "treatment_type", ":", "str", ",", "treat_prop", ":", "float", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\n", "\"twins\"", ",", "\n", "train_ratio", "=", "train_ratio", ",", "\n", "treatment_type", "=", "treatment_type", ",", "\n", "treat_prop", "=", "treat_prop", ",", "\n", ")", "\n", "\n", "total", "=", "X_train", ".", "shape", "[", "0", "]", "+", "X_test", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "int", "(", "total", "*", "train_ratio", ")", "==", "X_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "1", "]", "==", "X_test", ".", "shape", "[", "1", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train_full", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "W_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_test", ".", "shape", "[", "0", "]", "==", "Y_test", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.test_datasets.test_dataset_sanity_ihdp": [[29, 37], ["catenets.datasets.load"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["", "def", "test_dataset_sanity_ihdp", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "\n", "assert", "X_train", ".", "shape", "[", "1", "]", "==", "X_test", ".", "shape", "[", "1", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train_full", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "W_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_test", ".", "shape", "[", "0", "]", "==", "Y_test", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.test_datasets.test_dataset_sanity_acic2016": [[39, 51], ["pytest.mark.parametrize", "catenets.datasets.load"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"preprocessed\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_dataset_sanity_acic2016", "(", "preprocessed", ":", "bool", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\n", "\"acic2016\"", ",", "preprocessed", "=", "preprocessed", "\n", ")", "\n", "\n", "assert", "X_train", ".", "shape", "[", "1", "]", "==", "X_test", ".", "shape", "[", "1", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "Y_train_full", ".", "shape", "[", "0", "]", "\n", "assert", "X_train", ".", "shape", "[", "0", "]", "==", "W_train", ".", "shape", "[", "0", "]", "\n", "assert", "X_test", ".", "shape", "[", "0", "]", "==", "Y_test", ".", "shape", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_mse_model": [[33, 42], ["predict_fun", "jax.mean"], "function", ["None"], ["def", "eval_mse_model", "(", "\n", "inputs", ":", "jnp", ".", "ndarray", ",", "\n", "targets", ":", "jnp", ".", "ndarray", ",", "\n", "predict_fun", ":", "Callable", ",", "\n", "params", ":", "jnp", ".", "ndarray", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# evaluate the mse of a model given its function and params", "\n", "    ", "preds", "=", "predict_fun", "(", "params", ",", "inputs", ")", "\n", "return", "jnp", ".", "mean", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_mse": [[44, 48], ["catenets.models.jax.base.check_shape_1d_data", "catenets.models.jax.base.check_shape_1d_data", "jax.mean"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["", "def", "eval_mse", "(", "preds", ":", "jnp", ".", "ndarray", ",", "targets", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "preds", "=", "check_shape_1d_data", "(", "preds", ")", "\n", "targets", "=", "check_shape_1d_data", "(", "targets", ")", "\n", "return", "jnp", ".", "mean", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_root_mse": [[50, 54], ["catenets.models.jax.base.check_shape_1d_data", "catenets.models.jax.base.check_shape_1d_data", "jax.sqrt", "base.eval_mse"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_mse"], ["", "def", "eval_root_mse", "(", "cate_pred", ":", "jnp", ".", "ndarray", ",", "cate_true", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "cate_true", "=", "check_shape_1d_data", "(", "cate_true", ")", "\n", "cate_pred", "=", "check_shape_1d_data", "(", "cate_pred", ")", "\n", "return", "jnp", ".", "sqrt", "(", "eval_mse", "(", "cate_pred", ",", "cate_true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.eval_abs_error_ate": [[56, 60], ["catenets.models.jax.base.check_shape_1d_data", "catenets.models.jax.base.check_shape_1d_data", "jax.abs", "jax.mean", "jax.mean"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["", "def", "eval_abs_error_ate", "(", "cate_pred", ":", "jnp", ".", "ndarray", ",", "cate_true", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "cate_true", "=", "check_shape_1d_data", "(", "cate_true", ")", "\n", "cate_pred", "=", "check_shape_1d_data", "(", "cate_pred", ")", "\n", "return", "jnp", ".", "abs", "(", "jnp", ".", "mean", "(", "cate_pred", ")", "-", "jnp", ".", "mean", "(", "cate_true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_model_set": [[62, 97], ["type", "dict.values", "base.get_all_snets", "type", "ValueError", "model.get_params", "model.set_params", "base.get_all_pseudoout_models", "dict.update", "base.get_all_twostep_models", "model_params.items", "dict", "model.get_params.keys", "catenets.models.jax.get_catenet", "base.get_all_snets", "base.get_all_pseudoout_models", "catenets.models.jax.get_catenet"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_snets", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_pseudoout_models", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_twostep_models", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.__init__.get_catenet", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_snets", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_pseudoout_models", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.__init__.get_catenet"], ["", "def", "get_model_set", "(", "\n", "model_selection", ":", "Union", "[", "str", ",", "list", "]", "=", "\"all\"", ",", "model_params", ":", "Optional", "[", "dict", "]", "=", "None", "\n", ")", "->", "Dict", ":", "\n", "    ", "\"\"\"Helper function to retrieve a set of models\"\"\"", "\n", "# get model selection", "\n", "if", "type", "(", "model_selection", ")", "is", "str", ":", "\n", "        ", "if", "model_selection", "==", "\"snet\"", ":", "\n", "            ", "models", "=", "get_all_snets", "(", ")", "\n", "", "elif", "model_selection", "==", "\"pseudo\"", ":", "\n", "            ", "models", "=", "get_all_pseudoout_models", "(", ")", "\n", "", "elif", "model_selection", "==", "\"twostep\"", ":", "\n", "            ", "models", "=", "get_all_twostep_models", "(", ")", "\n", "", "elif", "model_selection", "==", "\"all\"", ":", "\n", "            ", "models", "=", "dict", "(", "**", "get_all_snets", "(", ")", ",", "**", "get_all_pseudoout_models", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "models", "=", "{", "model_selection", ":", "get_catenet", "(", "model_selection", ")", "(", ")", "}", "# type: ignore", "\n", "", "", "elif", "type", "(", "model_selection", ")", "is", "list", ":", "\n", "        ", "models", "=", "{", "}", "\n", "for", "model", "in", "model_selection", ":", "\n", "            ", "models", ".", "update", "(", "{", "model", ":", "get_catenet", "(", "model", ")", "(", ")", "}", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"model_selection should be string or list.\"", ")", "\n", "\n", "# set hyperparameters", "\n", "", "if", "model_params", "is", "not", "None", ":", "\n", "        ", "for", "model", "in", "models", ".", "values", "(", ")", ":", "\n", "            ", "existing_params", "=", "model", ".", "get_params", "(", ")", "\n", "new_params", "=", "{", "\n", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "model_params", ".", "items", "(", ")", "\n", "if", "key", "in", "existing_params", ".", "keys", "(", ")", "\n", "}", "\n", "model", ".", "set_params", "(", "**", "new_params", ")", "\n", "\n", "", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_snets": [[104, 109], ["model_dict.update", "catenets.models.jax.get_catenet"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.__init__.get_catenet"], ["def", "get_all_snets", "(", ")", "->", "Dict", ":", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_SNETS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_pseudoout_models": [[111, 118], ["model_dict.update", "catenets.models.jax.PseudoOutcomeNet"], "function", ["None"], ["", "def", "get_all_pseudoout_models", "(", ")", "->", "Dict", ":", "# DR, RA, PW learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "trans", "in", "ALL_PSEUDOOUT_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "\n", "{", "PSEUDOOUT_NAME", "+", "SEP", "+", "trans", ":", "PseudoOutcomeNet", "(", "transformation", "=", "trans", ")", "}", "\n", ")", "\n", "", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.base.get_all_twostep_models": [[120, 125], ["model_dict.update", "catenets.models.jax.get_catenet"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.__init__.get_catenet"], ["", "def", "get_all_twostep_models", "(", ")", "->", "Dict", ":", "# DR, RA, R, X learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_TWOSTEP_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.generate_score": [[13, 16], ["numpy.mean", "numpy.sqrt", "numpy.std", "len"], "function", ["None"], ["def", "generate_score", "(", "metric", ":", "np", ".", "ndarray", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "percentile_val", "=", "1.96", "\n", "return", "(", "np", ".", "mean", "(", "metric", ")", ",", "percentile_val", "*", "np", ".", "std", "(", "metric", ")", "/", "np", ".", "sqrt", "(", "len", "(", "metric", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.print_score": [[18, 20], ["str", "str", "round", "round"], "function", ["None"], ["", "def", "print_score", "(", "score", ":", "Tuple", "[", "float", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "return", "str", "(", "round", "(", "score", "[", "0", "]", ",", "4", ")", ")", "+", "\" +/- \"", "+", "str", "(", "round", "(", "score", "[", "1", "]", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model": [[22, 72], ["numpy.zeros", "numpy.zeros", "sklearn.model_selection.KFold.split", "tester.generate_score", "tester.generate_score", "len", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "copy.deepcopy", "copy.deepcopy.fit", "catenets.experiment_utils.torch_metrics.abs_error_ATE", "catenets.experiment_utils.torch_metrics.sqrt_PEHE", "numpy.unique", "copy.deepcopy.predict().detach().cpu().numpy", "tester.print_score", "tester.print_score", "numpy.asarray", "copy.deepcopy.predict().detach().cpu", "copy.deepcopy.predict", "copy.deepcopy.predict().detach", "copy.deepcopy.predict"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.generate_score", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.generate_score", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.torch_metrics.abs_error_ATE", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_regression.sqrt_PEHE", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.print_score", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.print_score", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict"], ["", "def", "evaluate_treatments_model", "(", "\n", "estimator", ":", "Any", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "Y", ":", "torch", ".", "Tensor", ",", "\n", "Y_full", ":", "torch", ".", "Tensor", ",", "\n", "W", ":", "torch", ".", "Tensor", ",", "\n", "n_folds", ":", "int", "=", "3", ",", "\n", "seed", ":", "int", "=", "0", ",", "\n", ")", "->", "dict", ":", "\n", "    ", "metric_pehe", "=", "np", ".", "zeros", "(", "n_folds", ")", "\n", "metric_ate", "=", "np", ".", "zeros", "(", "n_folds", ")", "\n", "\n", "indx", "=", "0", "\n", "if", "len", "(", "np", ".", "unique", "(", "Y", ")", ")", "==", "2", ":", "\n", "        ", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "n_folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "", "else", ":", "\n", "        ", "skf", "=", "KFold", "(", "n_splits", "=", "n_folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "\n", "", "for", "train_index", ",", "test_index", "in", "skf", ".", "split", "(", "X", ",", "Y", ")", ":", "\n", "\n", "        ", "X_train", "=", "X", "[", "train_index", "]", "\n", "Y_train", "=", "Y", "[", "train_index", "]", "\n", "W_train", "=", "W", "[", "train_index", "]", "\n", "\n", "X_test", "=", "X", "[", "test_index", "]", "\n", "Y_full_test", "=", "Y_full", "[", "test_index", "]", "\n", "\n", "model", "=", "copy", ".", "deepcopy", "(", "estimator", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "try", ":", "\n", "            ", "te_pred", "=", "model", ".", "predict", "(", "X_test", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "te_pred", "=", "np", ".", "asarray", "(", "model", ".", "predict", "(", "X_test", ")", ")", "\n", "\n", "", "metric_ate", "[", "indx", "]", "=", "abs_error_ATE", "(", "Y_full_test", ",", "te_pred", ")", "\n", "metric_pehe", "[", "indx", "]", "=", "sqrt_PEHE", "(", "Y_full_test", ",", "te_pred", ")", "\n", "indx", "+=", "1", "\n", "\n", "", "output_pehe", "=", "generate_score", "(", "metric_pehe", ")", "\n", "output_ate", "=", "generate_score", "(", "metric_ate", ")", "\n", "\n", "return", "{", "\n", "\"raw\"", ":", "{", "\n", "\"pehe\"", ":", "output_pehe", ",", "\n", "\"ate\"", ":", "output_ate", ",", "\n", "}", ",", "\n", "\"str\"", ":", "{", "\n", "\"pehe\"", ":", "print_score", "(", "output_pehe", ")", ",", "\n", "\"ate\"", ":", "print_score", "(", "output_ate", ")", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.torch_metrics.sqrt_PEHE": [[5, 16], ["torch.Tensor", "torch.Tensor", "torch.sqrt", "torch.mean"], "function", ["None"], ["def", "sqrt_PEHE", "(", "po", ":", "torch", ".", "Tensor", ",", "hat_te", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Precision in Estimation of Heterogeneous Effect(PyTorch version).\n    PEHE reflects the ability to capture individual variation in treatment effects.\n    Args:\n        po: expected outcome.\n        hat_te: estimated outcome.\n    \"\"\"", "\n", "po", "=", "torch", ".", "Tensor", "(", "po", ")", "\n", "hat_te", "=", "torch", ".", "Tensor", "(", "hat_te", ")", "\n", "return", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "(", "(", "po", "[", ":", ",", "1", "]", "-", "po", "[", ":", ",", "0", "]", ")", "-", "hat_te", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.torch_metrics.abs_error_ATE": [[18, 29], ["torch.Tensor", "torch.Tensor", "torch.abs", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "abs_error_ATE", "(", "po", ":", "torch", ".", "Tensor", ",", "hat_te", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Average Treatment Effect.\n    ATE measures what is the expected causal effect of the treatment across all individuals in the population.\n    Args:\n        po: expected outcome.\n        hat_te: estimated outcome.\n    \"\"\"", "\n", "po", "=", "torch", ".", "Tensor", "(", "po", ")", "\n", "hat_te", "=", "torch", ".", "Tensor", "(", "hat_te", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "po", "[", ":", ",", "1", "]", "-", "po", "[", ":", ",", "0", "]", ")", "-", "torch", ".", "mean", "(", "hat_te", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.simulate_treatment_setup": [[11, 127], ["numpy.random.seed", "covariate_model", "mu_0_model", "mu_1_model", "propensity_model", "numpy.random.binomial", "ValueError", "numpy.random.normal"], "function", ["None"], ["def", "simulate_treatment_setup", "(", "\n", "n", ":", "int", ",", "\n", "d", ":", "int", "=", "25", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "covariate_model", ":", "Any", "=", "None", ",", "\n", "covariate_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "propensity_model", ":", "Any", "=", "None", ",", "\n", "propensity_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "mu_0_model", ":", "Any", "=", "None", ",", "\n", "mu_0_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "mu_1_model", ":", "Any", "=", "None", ",", "\n", "mu_1_model_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "error_sd", ":", "float", "=", "1", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Generic function to flexibly simulate a treatment setup.\n\n    Parameters\n    ----------\n    n: int\n        Number of observations to generate\n    d: int\n        dimension of X to generate\n    n_o: int\n        Dimension of outcome-factor\n    n_c: int\n        Dimension of confounding factor\n    n_t: int\n        Dimension of purely predictive variables (support of tau(x)\n    n_w: int\n        Dimension of treatment assignment factor\n    covariate_model:\n        Model to generate covariates. Default: multivariate normal\n    covariate_model_params: dict\n        Additional parameters to pass to covariate model\n    propensity_model:\n        Model to generate propensity scores\n    propensity_model_params:\n        Additional parameters to pass to propensity model\n    mu_0_model:\n        Model to generate untreated outcomes\n    mu_0_model_params:\n        Additional parameters to pass to untreated outcome model\n    mu_1_model:\n        Model to generate treated outcomes.\n    mu_1_model_params:\n        Additional parameters to pass to treated outcome model\n    error_sd: float, default 1\n        Standard deviation of normal errors\n    seed: int\n        Seed\n\n    Returns\n    -------\n        X, y, w, p, t - Covariates, observed outcomes, treatment indicators, propensities, CATE\n    \"\"\"", "\n", "# input checks", "\n", "n_nuisance", "=", "d", "-", "(", "n_c", "+", "n_o", "+", "n_w", "+", "n_t", ")", "\n", "if", "n_nuisance", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dimensions should add up to maximally d.\"", ")", "\n", "\n", "# set defaults", "\n", "", "if", "covariate_model", "is", "None", ":", "\n", "        ", "covariate_model", "=", "normal_covariate_model", "\n", "\n", "", "if", "covariate_model_params", "is", "None", ":", "\n", "        ", "covariate_model_params", "=", "{", "}", "\n", "\n", "", "if", "propensity_model", "is", "None", ":", "\n", "        ", "propensity_model", "=", "propensity_AISTATS", "\n", "\n", "", "if", "propensity_model_params", "is", "None", ":", "\n", "        ", "propensity_model_params", "=", "{", "}", "\n", "\n", "", "if", "mu_0_model", "is", "None", ":", "\n", "        ", "mu_0_model", "=", "mu0_AISTATS", "\n", "\n", "", "if", "mu_0_model_params", "is", "None", ":", "\n", "        ", "mu_0_model_params", "=", "{", "}", "\n", "\n", "", "if", "mu_1_model", "is", "None", ":", "\n", "        ", "mu_1_model", "=", "mu1_AISTATS", "\n", "\n", "", "if", "mu_1_model_params", "is", "None", ":", "\n", "        ", "mu_1_model_params", "=", "{", "}", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# generate data and outcomes", "\n", "X", "=", "covariate_model", "(", "\n", "n", "=", "n", ",", "\n", "n_nuisance", "=", "n_nuisance", ",", "\n", "n_c", "=", "n_c", ",", "\n", "n_o", "=", "n_o", ",", "\n", "n_w", "=", "n_w", ",", "\n", "n_t", "=", "n_t", ",", "\n", "**", "covariate_model_params", "\n", ")", "\n", "mu_0", "=", "mu_0_model", "(", "X", ",", "n_c", "=", "n_c", ",", "n_o", "=", "n_o", ",", "n_w", "=", "n_w", ",", "**", "mu_0_model_params", ")", "\n", "mu_1", "=", "mu_1_model", "(", "\n", "X", ",", "n_c", "=", "n_c", ",", "n_o", "=", "n_o", ",", "n_w", "=", "n_w", ",", "n_t", "=", "n_t", ",", "mu_0", "=", "mu_0", ",", "**", "mu_1_model_params", "\n", ")", "\n", "t", "=", "mu_1", "-", "mu_0", "\n", "\n", "# generate treatments", "\n", "p", "=", "propensity_model", "(", "X", ",", "n_c", "=", "n_c", ",", "n_w", "=", "n_w", ",", "**", "propensity_model_params", ")", "\n", "w", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "p", "=", "p", ")", "\n", "\n", "# generate observables", "\n", "y", "=", "w", "*", "mu_1", "+", "(", "1", "-", "w", ")", "*", "mu_0", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "error_sd", ",", "n", ")", "\n", "\n", "return", "X", ",", "y", ",", "w", ",", "p", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.get_multivariate_normal_params": [[130, 147], ["numpy.zeros", "numpy.random.uniform", "numpy.zeros", "numpy.eye", "numpy.transpose", "numpy.eye", "numpy.ones", "numpy.eye"], "function", ["None"], ["", "def", "get_multivariate_normal_params", "(", "\n", "m", ":", "int", ",", "correlated", ":", "bool", "=", "False", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "# Adapted from Hassanpour & Greiner (2020)", "\n", "    ", "if", "correlated", ":", "\n", "        ", "mu", "=", "np", ".", "zeros", "(", "m", ")", "# np.random.normal(size=m)/10", "\n", "temp", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "m", ",", "m", ")", ")", "\n", "temp", "=", "0.5", "*", "(", "np", ".", "transpose", "(", "temp", ")", "+", "temp", ")", "\n", "sig", "=", "(", "np", ".", "ones", "(", "(", "m", ",", "m", ")", ")", "-", "np", ".", "eye", "(", "m", ")", ")", "*", "temp", "/", "10", "+", "0.5", "*", "np", ".", "eye", "(", "\n", "m", "\n", ")", "# (temp + m * np.eye(m)) / 10", "\n", "\n", "", "else", ":", "\n", "        ", "mu", "=", "np", ".", "zeros", "(", "m", ")", "\n", "sig", "=", "np", ".", "eye", "(", "m", ")", "\n", "\n", "", "return", "mu", ",", "sig", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.get_set_normal_covariates": [[149, 154], ["simulation_utils.get_multivariate_normal_params", "numpy.random.multivariate_normal"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.get_multivariate_normal_params"], ["", "def", "get_set_normal_covariates", "(", "m", ":", "int", ",", "n", ":", "int", ",", "correlated", ":", "bool", "=", "False", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "m", "==", "0", ":", "\n", "        ", "return", "\n", "", "mu", ",", "sig", "=", "get_multivariate_normal_params", "(", "m", ",", "correlated", "=", "correlated", ")", "\n", "return", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "mu", ",", "cov", "=", "sig", ",", "size", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.normal_covariate_model": [[156, 171], ["numpy.hstack", "simulation_utils.get_set_normal_covariates"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.get_set_normal_covariates"], ["", "def", "normal_covariate_model", "(", "\n", "n", ":", "int", ",", "\n", "n_nuisance", ":", "int", "=", "25", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "correlated", ":", "bool", "=", "False", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "X_stack", ":", "Tuple", "=", "(", ")", "\n", "for", "n_x", "in", "[", "n_w", ",", "n_c", ",", "n_o", ",", "n_t", ",", "n_nuisance", "]", ":", "\n", "        ", "if", "n_x", ">", "0", ":", "\n", "            ", "X_stack", "=", "(", "*", "X_stack", ",", "get_set_normal_covariates", "(", "n_x", ",", "n", ",", "correlated", ")", ")", "\n", "\n", "", "", "return", "np", ".", "hstack", "(", "X_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.propensity_AISTATS": [[173, 208], ["numpy.ones", "numpy.ones", "scipy.special.expit", "numpy.dot", "numpy.dot", "type", "type", "numpy.average", "scipy.special.expit", "ValueError", "numpy.average", "numpy.median"], "function", ["None"], ["", "def", "propensity_AISTATS", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "xi", ":", "float", "=", "0.5", ",", "\n", "nonlinear", ":", "bool", "=", "True", ",", "\n", "offset", ":", "Any", "=", "0", ",", "\n", "target_prop", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_c", "+", "n_w", "==", "0", ":", "\n", "# constant propensity", "\n", "        ", "return", "xi", "*", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "coefs", "=", "np", ".", "ones", "(", "n_c", "+", "n_w", ")", "\n", "\n", "if", "nonlinear", ":", "\n", "            ", "z", "=", "np", ".", "dot", "(", "X", "[", ":", ",", ":", "(", "n_c", "+", "n_w", ")", "]", "**", "2", ",", "coefs", ")", "/", "(", "n_c", "+", "n_w", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "np", ".", "dot", "(", "X", "[", ":", ",", ":", "(", "n_c", "+", "n_w", ")", "]", ",", "coefs", ")", "/", "(", "n_c", "+", "n_w", ")", "\n", "\n", "", "if", "type", "(", "offset", ")", "is", "float", "or", "type", "(", "offset", ")", "is", "int", ":", "\n", "            ", "prop", "=", "expit", "(", "xi", "*", "z", "+", "offset", ")", "\n", "if", "target_prop", "is", "not", "None", ":", "\n", "                ", "avg_prop", "=", "np", ".", "average", "(", "prop", ")", "\n", "prop", "=", "target_prop", "/", "avg_prop", "*", "prop", "\n", "", "return", "prop", "\n", "", "elif", "offset", "==", "\"center\"", ":", "\n", "# center the propensity scores to median 0.5", "\n", "            ", "prop", "=", "expit", "(", "xi", "*", "(", "z", "-", "np", ".", "median", "(", "z", ")", ")", ")", "\n", "if", "target_prop", "is", "not", "None", ":", "\n", "                ", "avg_prop", "=", "np", ".", "average", "(", "prop", ")", "\n", "prop", "=", "target_prop", "/", "avg_prop", "*", "prop", "\n", "", "return", "prop", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a valid value for offset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.propensity_constant": [[210, 214], ["numpy.ones"], "function", ["None"], ["", "", "", "def", "propensity_constant", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "n_c", ":", "int", "=", "0", ",", "n_w", ":", "int", "=", "0", ",", "xi", ":", "float", "=", "0.5", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "xi", "*", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.mu0_AISTATS": [[216, 227], ["numpy.zeros", "numpy.dot", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "mu0_AISTATS", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "n_w", ":", "int", "=", "0", ",", "n_c", ":", "int", "=", "0", ",", "n_o", ":", "int", "=", "0", ",", "scale", ":", "bool", "=", "False", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_c", "+", "n_o", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "scale", ":", "\n", "            ", "coefs", "=", "np", ".", "ones", "(", "n_c", "+", "n_o", ")", "\n", "", "else", ":", "\n", "            ", "coefs", "=", "10", "*", "np", ".", "ones", "(", "n_c", "+", "n_o", ")", "/", "(", "n_c", "+", "n_o", ")", "\n", "", "return", "np", ".", "dot", "(", "X", "[", ":", ",", "n_w", ":", "(", "n_w", "+", "n_c", "+", "n_o", ")", "]", "**", "2", ",", "coefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.mu1_AISTATS": [[229, 253], ["numpy.dot", "numpy.ones", "numpy.dot", "numpy.ones"], "function", ["None"], ["", "", "def", "mu1_AISTATS", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "mu_0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "nonlinear", ":", "int", "=", "2", ",", "\n", "withbase", ":", "bool", "=", "True", ",", "\n", "scale", ":", "bool", "=", "False", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_t", "==", "0", ":", "\n", "        ", "return", "mu_0", "\n", "# use additive effect", "\n", "", "else", ":", "\n", "        ", "if", "scale", ":", "\n", "            ", "coefs", "=", "10", "*", "np", ".", "ones", "(", "n_t", ")", "/", "n_t", "\n", "", "else", ":", "\n", "            ", "coefs", "=", "np", ".", "ones", "(", "n_t", ")", "\n", "", "X_sel", "=", "X", "[", ":", ",", "(", "n_w", "+", "n_c", "+", "n_o", ")", ":", "(", "n_w", "+", "n_c", "+", "n_o", "+", "n_t", ")", "]", "\n", "", "if", "withbase", ":", "\n", "        ", "return", "mu_0", "+", "np", ".", "dot", "(", "X_sel", "**", "nonlinear", ",", "coefs", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "dot", "(", "X_sel", "**", "nonlinear", ",", "coefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.uniform_covariate_model": [[257, 269], ["numpy.random.uniform"], "function", ["None"], ["", "", "def", "uniform_covariate_model", "(", "\n", "n", ":", "int", ",", "\n", "n_nuisance", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "low", ":", "int", "=", "-", "1", ",", "\n", "high", ":", "int", "=", "1", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "d", "=", "n_nuisance", "+", "n_c", "+", "n_o", "+", "n_w", "+", "n_t", "\n", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "low", ",", "high", "=", "high", ",", "size", "=", "(", "n", ",", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.mu1_additive": [[271, 284], ["numpy.random.normal", "numpy.dot"], "function", ["None"], ["", "def", "mu1_additive", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "mu_0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_t", "==", "0", ":", "\n", "        ", "return", "mu_0", "\n", "", "else", ":", "\n", "        ", "coefs", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "n_t", ")", "\n", "return", "np", ".", "dot", "(", "X", "[", ":", ",", "(", "n_w", "+", "n_c", "+", "n_o", ")", ":", "(", "n_w", "+", "n_c", "+", "n_o", "+", "n_t", ")", "]", ",", "coefs", ")", "/", "n_t", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.mu0_hg": [[287, 293], ["numpy.zeros", "numpy.random.normal", "numpy.dot"], "function", ["None"], ["", "", "def", "mu0_hg", "(", "X", ":", "np", ".", "ndarray", ",", "n_w", ":", "int", "=", "0", ",", "n_c", ":", "int", "=", "0", ",", "n_o", ":", "int", "=", "0", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_c", "+", "n_o", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "coefs", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "n_c", "+", "n_o", ")", "\n", "return", "np", ".", "dot", "(", "X", "[", ":", ",", "n_w", ":", "(", "n_w", "+", "n_c", "+", "n_o", ")", "]", ",", "coefs", ")", "/", "(", "n_c", "+", "n_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.mu1_hg": [[295, 308], ["numpy.zeros", "numpy.random.normal", "numpy.dot"], "function", ["None"], ["", "", "def", "mu1_hg", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "\n", "n_w", ":", "int", "=", "0", ",", "\n", "n_c", ":", "int", "=", "0", ",", "\n", "n_o", ":", "int", "=", "0", ",", "\n", "n_t", ":", "int", "=", "0", ",", "\n", "mu_0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "n_c", "+", "n_o", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "coefs", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "n_c", "+", "n_o", ")", "\n", "return", "np", ".", "dot", "(", "X", "[", ":", ",", "n_w", ":", "(", "n_w", "+", "n_c", "+", "n_o", ")", "]", "**", "2", ",", "coefs", ")", "/", "(", "n_c", "+", "n_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.simulation_utils.propensity_hg": [[310, 323], ["numpy.random.normal", "numpy.dot", "scipy.special.expit", "numpy.ones"], "function", ["None"], ["", "", "def", "propensity_hg", "(", "\n", "X", ":", "np", ".", "ndarray", ",", "n_c", ":", "int", "=", "0", ",", "n_w", ":", "int", "=", "0", ",", "xi", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "# propensity set-up used in Hassanpour & Greiner (2020)", "\n", "    ", "if", "n_c", "+", "n_w", "==", "0", ":", "\n", "        ", "return", "0.5", "*", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "xi", "is", "None", ":", "\n", "            ", "xi", "=", "1", "\n", "\n", "", "coefs", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "n_c", "+", "n_w", ")", "\n", "z", "=", "np", ".", "dot", "(", "X", "[", ":", ",", ":", "(", "n_c", "+", "n_w", ")", "]", ",", "coefs", ")", "\n", "return", "expit", "(", "xi", "*", "z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BasicNet.__init__": [[81, 162], ["torch.nn.Module.__init__", "torch.nn.Sequential().to", "torch.optim.Adam", "list", "ValueError", "range", "layers.append", "layers.append", "base.BasicNet.parameters", "NONLIN.keys", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL", "layers.extend", "layers.extend", "layers.extend", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["            ", "models", ".", "update", "(", "{", "model", ":", "get_catenet", "(", "model", ")", "(", ")", "}", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"model_selection should be string or list.\"", ")", "\n", "\n", "# set hyperparameters", "\n", "", "if", "model_params", "is", "not", "None", ":", "\n", "        ", "for", "model", "in", "models", ".", "values", "(", ")", ":", "\n", "            ", "existing_params", "=", "model", ".", "get_params", "(", ")", "\n", "new_params", "=", "{", "\n", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "model_params", ".", "items", "(", ")", "\n", "if", "key", "in", "existing_params", ".", "keys", "(", ")", "\n", "}", "\n", "model", ".", "set_params", "(", "**", "new_params", ")", "\n", "\n", "", "", "return", "models", "\n", "\n", "\n", "", "ALL_SNETS", "=", "[", "T_NAME", ",", "SNET1_NAME", ",", "SNET2_NAME", ",", "SNET3_NAME", ",", "SNET_NAME", "]", "\n", "ALL_PSEUDOOUT_MODELS", "=", "[", "DR_TRANSFORMATION", ",", "PW_TRANSFORMATION", ",", "RA_TRANSFORMATION", "]", "\n", "ALL_TWOSTEP_MODELS", "=", "[", "DRNET_NAME", ",", "RANET_NAME", ",", "XNET_NAME", ",", "RNET_NAME", "]", "\n", "\n", "\n", "def", "get_all_snets", "(", ")", "->", "Dict", ":", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_SNETS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "\n", "\n", "", "def", "get_all_pseudoout_models", "(", ")", "->", "Dict", ":", "# DR, RA, PW learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "trans", "in", "ALL_PSEUDOOUT_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "\n", "{", "PSEUDOOUT_NAME", "+", "SEP", "+", "trans", ":", "PseudoOutcomeNet", "(", "transformation", "=", "trans", ")", "}", "\n", ")", "\n", "", "return", "model_dict", "\n", "\n", "\n", "", "def", "get_all_twostep_models", "(", ")", "->", "Dict", ":", "# DR, RA, R, X learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_TWOSTEP_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BasicNet.forward": [[164, 166], ["base.BasicNet.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BasicNet.train": [[167, 244], ["base.BasicNet._check_tensor", "base.BasicNet._check_tensor().squeeze", "catenets.models.torch.utils.model_utils.make_val_split", "y_val.squeeze.squeeze.squeeze", "numpy.arange", "range", "int", "numpy.random.shuffle", "range", "torch.Tensor().to", "base.BasicNet._check_tensor", "numpy.round", "base.BasicNet.optimizer.zero_grad", "base.BasicNet.forward().squeeze", "loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "base.BasicNet.optimizer.step", "torch.Tensor().to.append", "weight[].detach", "torch.nn.BCELoss", "torch.nn.MSELoss", "base.BasicNet.parameters", "loss.detach", "torch.Tensor", "torch.nn.BCELoss", "torch.nn.MSELoss", "torch.no_grad", "base.BasicNet.forward().squeeze", "loss", "min", "base.BasicNet.forward", "catenets.info", "base.BasicNet.forward", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BasicNet._check_tensor": [[245, 250], ["isinstance", "X.to", "torch.from_numpy().to", "torch.from_numpy", "numpy.asarray"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.RepresentationNet.__init__": [[268, 294], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential().to", "list", "ValueError", "NONLIN.keys", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL", "layers.extend", "layers.extend", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.RepresentationNet.forward": [[295, 297], ["base.RepresentationNet.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.__init__": [[342, 427], ["torch.nn.Module.__init__", "range", "layers.extend", "torch.nn.Sequential().to", "torch.optim.Adam", "list", "ValueError", "base.PropensityNet.parameters", "NONLIN.keys", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL", "layers.extend", "layers.extend", "layers.extend", "torch.nn.Linear", "torch.nn.Softmax", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "NL", "torch.nn.Linear", "NL"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.forward": [[429, 431], ["base.PropensityNet.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.get_importance_weights": [[432, 437], ["catenets.models.torch.utils.weight_utils.compute_importance_weights", "base.PropensityNet.forward().squeeze", "base.PropensityNet.forward"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_importance_weights", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.loss": [[438, 440], ["torch.nn.NLLLoss", "torch.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.train": [[441, 506], ["base.PropensityNet._check_tensor", "base.PropensityNet._check_tensor().long", "catenets.models.torch.utils.model_utils.make_val_split", "y_val.squeeze.squeeze.squeeze", "numpy.arange", "range", "int", "numpy.random.shuffle", "range", "torch.Tensor().to", "base.PropensityNet._check_tensor", "numpy.round", "base.PropensityNet.optimizer.zero_grad", "y[].squeeze", "base.PropensityNet.forward().squeeze", "base.PropensityNet.loss", "base.PropensityNet.backward", "torch.nn.utils.clip_grad_norm_", "base.PropensityNet.optimizer.step", "torch.Tensor().to.append", "base.PropensityNet.parameters", "base.PropensityNet.detach", "torch.Tensor", "torch.no_grad", "base.PropensityNet.forward().squeeze", "base.PropensityNet.loss", "min", "base.PropensityNet.forward", "catenets.info", "base.PropensityNet.forward", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet._check_tensor": [[507, 512], ["isinstance", "X.to", "torch.from_numpy().to", "torch.from_numpy", "numpy.asarray"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.__init__": [[521, 525], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.score": [[526, 551], ["base.BaseCATEEstimator._check_tensor", "base.BaseCATEEstimator._check_tensor", "base.BaseCATEEstimator.predict", "torch.sqrt", "len", "len", "ValueError", "ValueError", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.train": [[552, 574], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.fit": [[575, 583], ["base.BaseCATEEstimator.train"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.forward": [[584, 598], ["base.BaseCATEEstimator.predict"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator.predict": [[599, 621], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor": [[622, 627], ["isinstance", "X.to", "torch.from_numpy().to", "torch.from_numpy", "numpy.asarray"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet.__init__": [[83, 149], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "catenets.models.torch.base.RepresentationNet", "range", "representation_nets.BasicDragonNet._po_estimators.append", "catenets.models.torch.base.BasicNet"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "propensity_estimator", ":", "nn", ".", "Module", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "weighting_strategy", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "penalty_disc", ":", "float", "=", "0", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "prop_loss_multiplier", ":", "float", "=", "1", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicDragonNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "penalty_disc", "=", "penalty_disc", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "prop_loss_multiplier", "=", "prop_loss_multiplier", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "_repr_estimator", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "self", ".", "_po_estimators", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"{name}_po_estimator_{idx}\"", ",", "\n", "n_units_r", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", "\n", ")", "\n", "", "self", ".", "_propensity_estimator", "=", "propensity_estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet.loss": [[150, 182], ["torch.mean", "torch.mean", "torch.nn.CrossEntropyLoss", "representation_nets.BasicDragonNet.loss.po_loss"], "methods", ["None"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "po_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", "discrepancy", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", "\n", "po_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "t_true", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "y0_pred", "=", "po_pred", "[", ":", ",", "0", "]", "\n", "y1_pred", "=", "po_pred", "[", ":", ",", "1", "]", "\n", "\n", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "def", "prop_loss", "(", "t_pred", ":", "torch", ".", "Tensor", ",", "t_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "t_pred", "=", "t_pred", "+", "EPS", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "t_pred", ",", "t_true", ")", "\n", "\n", "", "return", "(", "\n", "po_loss", "(", "po_pred", ",", "y_true", ",", "t_true", ")", "+", "\n", "self", ".", "prop_loss_multiplier", "*", "prop_loss", "(", "t_pred", ",", "t_true", ")", "+", "discrepancy", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet.train": [[184, 272], ["torch.Tensor().to", "torch.Tensor().squeeze().to", "torch.Tensor().squeeze().long().to", "catenets.models.torch.utils.model_utils.make_val_split", "numpy.arange", "torch.optim.Adam", "range", "int", "list", "numpy.random.shuffle", "range", "torch.Tensor().to", "torch.Tensor", "torch.Tensor().squeeze", "torch.Tensor().squeeze().long", "numpy.round", "list", "representation_nets.BasicDragonNet._propensity_estimator.parameters", "torch.optim.Adam.zero_grad", "y[].squeeze", "w[].squeeze", "representation_nets.BasicDragonNet._step", "representation_nets.BasicDragonNet.loss", "representation_nets.BasicDragonNet.backward", "torch.optim.Adam.step", "torch.Tensor().to.append", "list", "list", "representation_nets.BasicDragonNet._po_estimators[].parameters", "representation_nets.BasicDragonNet.detach", "torch.Tensor", "torch.no_grad", "representation_nets.BasicDragonNet._step", "representation_nets.BasicDragonNet.loss", "torch.Tensor", "torch.Tensor().squeeze", "representation_nets.BasicDragonNet._repr_estimator.parameters", "representation_nets.BasicDragonNet._po_estimators[].parameters", "min", "catenets.info", "torch.Tensor", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info"], ["", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"BasicDragonNet\"", ":", "\n", "        ", "\"\"\"\n        Fit the treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", "=", "w", ",", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "self", ".", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "np", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "np", ".", "arange", "(", "n", ")", "\n", "\n", "params", "=", "(", "\n", "list", "(", "self", ".", "_repr_estimator", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "0", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "1", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_propensity_estimator", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "# training", "\n", "val_loss_best", "=", "LARGE_VAL", "\n", "patience", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "train_loss", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "\n", "X_next", "=", "X", "[", "idx_next", "]", "\n", "y_next", "=", "y", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "w_next", "=", "w", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "\n", "po_preds", ",", "prop_preds", ",", "discr", "=", "self", ".", "_step", "(", "X_next", ",", "w_next", ")", "\n", "batch_loss", "=", "self", ".", "loss", "(", "po_preds", ",", "prop_preds", ",", "y_next", ",", "w_next", ",", "discr", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "po_preds", ",", "prop_preds", ",", "discr", "=", "self", ".", "_step", "(", "X_val", ",", "w_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "po_preds", ",", "prop_preds", ",", "y_val", ",", "w_val", ",", "discr", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[{self.name}] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet._step": [[273, 278], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet._forward": [[279, 286], ["representation_nets.BasicDragonNet._check_tensor", "representation_nets.BasicDragonNet._repr_estimator().squeeze", "torch.vstack", "representation_nets.BasicDragonNet._repr_estimator"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "_forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", "\n", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet.predict": [[287, 315], ["representation_nets.BasicDragonNet._check_tensor().float", "representation_nets.BasicDragonNet._forward", "representation_nets.BasicDragonNet._repr_estimator.model.eval", "representation_nets.BasicDragonNet._po_estimators[].model.eval", "representation_nets.BasicDragonNet._po_estimators[].model.eval", "representation_nets.BasicDragonNet._check_tensor"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._forward", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict the treatment effects\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "_repr_estimator", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_po_estimators", "[", "0", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_po_estimators", "[", "1", "]", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "preds", "=", "self", ".", "_forward", "(", "X", ")", "\n", "y0_preds", "=", "preds", "[", ":", ",", "0", "]", "\n", "y1_preds", "=", "preds", "[", ":", ",", "1", "]", "\n", "\n", "outcome", "=", "y1_preds", "-", "y0_preds", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y0_preds", ",", "y1_preds", "\n", "\n", "", "return", "outcome", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.BasicDragonNet._maximum_mean_discrepancy": [[316, 329], ["torch.sum", "w.unsqueeze.unsqueeze.unsqueeze", "torch.sqrt", "torch.mean", "torch.mean", "torch.sum", "torch.var"], "methods", ["None"], ["", "def", "_maximum_mean_discrepancy", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "w", ".", "shape", "[", "0", "]", "\n", "n_t", "=", "torch", ".", "sum", "(", "w", ")", "\n", "\n", "X", "=", "X", "/", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "X", ",", "dim", "=", "0", ")", "+", "EPS", ")", "\n", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "mean_control", "=", "(", "n", "/", "(", "n", "-", "n_t", ")", ")", "*", "torch", ".", "mean", "(", "(", "1", "-", "w", ")", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "mean_treated", "=", "(", "n", "/", "n_t", ")", "*", "torch", ".", "mean", "(", "w", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "\n", "return", "self", ".", "penalty_disc", "*", "torch", ".", "sum", "(", "(", "mean_treated", "-", "mean_control", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.TARNet.__init__": [[336, 374], ["catenets.models.torch.base.PropensityNet().to", "representation_nets.BasicDragonNet.__init__", "catenets.models.torch.base.PropensityNet"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "0", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "penalty_disc", ":", "float", "=", "DEFAULT_PENALTY_DISC", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "propensity_estimator", "=", "PropensityNet", "(", "\n", "\"tarnet_propensity_estimator\"", ",", "\n", "n_unit_in", ",", "\n", "2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "super", "(", "TARNet", ",", "self", ")", ".", "__init__", "(", "\n", "\"TARNet\"", ",", "\n", "n_unit_in", ",", "\n", "propensity_estimator", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "penalty_disc", "=", "penalty_disc", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "prop_loss_multiplier", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.TARNet._step": [[375, 388], ["representation_nets.TARNet._repr_estimator().squeeze", "representation_nets.TARNet._propensity_estimator", "torch.vstack", "representation_nets.TARNet._maximum_mean_discrepancy", "representation_nets.TARNet._repr_estimator"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._maximum_mean_discrepancy"], ["", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "po_preds", "=", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "X", ")", "\n", "\n", "return", "po_preds", ",", "prop_preds", ",", "self", ".", "_maximum_mean_discrepancy", "(", "repr_preds", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.DragonNet.__init__": [[395, 430], ["catenets.models.torch.base.PropensityNet().to", "representation_nets.BasicDragonNet.__init__", "catenets.models.torch.base.PropensityNet"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "0", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "propensity_estimator", "=", "PropensityNet", "(", "\n", "\"dragonnet_propensity_estimator\"", ",", "\n", "n_units_r", ",", "\n", "2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "super", "(", "DragonNet", ",", "self", ")", ".", "__init__", "(", "\n", "\"DragonNet\"", ",", "\n", "n_unit_in", ",", "\n", "propensity_estimator", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.representation_nets.DragonNet._step": [[432, 445], ["representation_nets.DragonNet._repr_estimator().squeeze", "representation_nets.DragonNet._propensity_estimator", "torch.vstack", "representation_nets.DragonNet._maximum_mean_discrepancy", "representation_nets.DragonNet._repr_estimator"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._maximum_mean_discrepancy"], ["", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "po_preds", "=", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "repr_preds", ")", "\n", "\n", "return", "po_preds", ",", "prop_preds", ",", "self", ".", "_maximum_mean_discrepancy", "(", "repr_preds", ",", "w", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet.__init__": [[92, 239], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "catenets.models.torch.base.RepresentationNet", "catenets.models.torch.base.RepresentationNet", "torch.optim.Adam", "catenets.models.torch.base.RepresentationNet", "catenets.models.torch.base.RepresentationNet", "catenets.models.torch.base.RepresentationNet", "range", "catenets.models.torch.base.PropensityNet().to", "catenets.models.torch.base.RepresentationNet", "range", "snet.SNet._po_estimators.append", "list", "snet.SNet._po_estimators.append", "list", "catenets.models.torch.base.BasicNet", "catenets.models.torch.base.PropensityNet", "list", "snet.SNet._propensity_estimator.parameters", "catenets.models.torch.base.BasicNet", "list", "snet.SNet._po_estimators[].parameters", "list", "snet.SNet._po_estimators[].parameters", "list", "snet.SNet._po_estimators[].parameters", "list", "snet.SNet._po_estimators[].parameters", "list", "list", "snet.SNet._reps_mu1.parameters", "list", "snet.SNet._reps_prop.parameters", "snet.SNet._reps_o.parameters", "snet.SNet._reps_mu0.parameters", "list", "snet.SNet._reps_mu1.parameters", "list", "list", "snet.SNet._reps_mu0.parameters", "snet.SNet._reps_c.parameters", "snet.SNet._reps_o.parameters"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R_BIG_S", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_r_small", ":", "int", "=", "DEFAULT_UNITS_R_SMALL_S", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_orthogonal", ":", "float", "=", "DEFAULT_PENALTY_ORTHOGONAL", ",", "\n", "penalty_disc", ":", "float", "=", "DEFAULT_PENALTY_DISC", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "ortho_reg_type", ":", "str", "=", "\"abs\"", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "clipping_value", ":", "int", "=", "1", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "with_prop", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "prop_loss_multiplier", ":", "float", "=", "1", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "SNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_unit_in", "=", "n_unit_in", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "penalty_orthogonal", "=", "penalty_orthogonal", "\n", "self", ".", "penalty_disc", "=", "penalty_disc", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "ortho_reg_type", "=", "ortho_reg_type", "\n", "self", ".", "clipping_value", "=", "clipping_value", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "with_prop", "=", "with_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "prop_loss_multiplier", "=", "prop_loss_multiplier", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "_reps_mu0", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "self", ".", "_reps_mu1", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_po_estimators", "=", "[", "]", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "self", ".", "_reps_c", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_reps_o", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_reps_prop", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"snet_po_estimator_{idx}\"", ",", "\n", "n_units_r", "\n", "+", "n_units_r_small", "\n", "+", "n_units_r_small", ",", "# (reps_c, reps_o, reps_mu{idx})", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", "\n", ")", "\n", "", "self", ".", "_propensity_estimator", "=", "PropensityNet", "(", "\n", "\"snet_propensity_estimator\"", ",", "\n", "n_units_r", "+", "n_units_r", ",", "# reps_c, reps_w", "\n", "2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "params", "=", "(", "\n", "list", "(", "self", ".", "_reps_c", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_o", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu0", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu1", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_prop", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "0", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "1", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_propensity_estimator", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_reps_o", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"snet_po_estimator_{idx}\"", ",", "\n", "n_units_r", "\n", "+", "n_units_r_small", ",", "# (reps_o, reps_mu{idx})", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", ")", "\n", "\n", "", "params", "=", "(", "list", "(", "self", ".", "_reps_o", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu0", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu1", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "0", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "1", "]", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet.loss": [[240, 281], ["torch.mean", "torch.mean", "snet.SNet._ortho_reg", "torch.nn.BCELoss", "snet.SNet.loss.head_loss"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._ortho_reg"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "discrepancy", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "def", "prop_loss", "(", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "with_prop", ":", "\n", "                ", "t_pred", "=", "t_pred", "+", "EPS", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "t_pred", ",", "t_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "\n", "", "", "return", "(", "\n", "po_loss", "(", "y0_pred", ",", "y1_pred", ",", "y_true", ",", "t_true", ")", "\n", "+", "self", ".", "prop_loss_multiplier", "*", "prop_loss", "(", "t_pred", ",", "t_true", ")", "\n", "+", "discrepancy", "\n", "+", "self", ".", "_ortho_reg", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet.train": [[283, 376], ["torch.Tensor().to", "torch.Tensor().squeeze().to", "torch.Tensor().squeeze().long().to", "catenets.models.torch.utils.model_utils.make_val_split", "numpy.arange", "range", "int", "numpy.random.shuffle", "range", "torch.Tensor().to", "torch.Tensor", "torch.Tensor().squeeze", "torch.Tensor().squeeze().long", "numpy.round", "snet.SNet.optimizer.zero_grad", "y[].squeeze", "w[].squeeze", "snet.SNet._step", "snet.SNet.loss", "snet.SNet.backward", "torch.nn.utils.clip_grad_norm_", "snet.SNet.optimizer.step", "torch.Tensor().to.append", "snet.SNet.parameters", "snet.SNet.detach", "torch.Tensor", "torch.no_grad", "snet.SNet._step", "snet.SNet.loss().detach().cpu", "torch.Tensor", "torch.Tensor().squeeze", "min", "catenets.info", "snet.SNet.loss().detach", "torch.Tensor", "snet.SNet.loss", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss"], ["", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"SNet\"", ":", "\n", "        ", "\"\"\"\n        Fit treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", "=", "w", ",", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "self", ".", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "np", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "np", ".", "arange", "(", "n", ")", "\n", "\n", "# training", "\n", "val_loss_best", "=", "LARGE_VAL", "\n", "patience", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "train_loss", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "\n", "X_next", "=", "X", "[", "idx_next", "]", "\n", "y_next", "=", "y", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "w_next", "=", "w", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "=", "self", ".", "_step", "(", "X_next", ",", "w_next", ")", "\n", "batch_loss", "=", "self", ".", "loss", "(", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", ",", "y_next", ",", "w_next", "\n", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "=", "self", ".", "_step", "(", "\n", "X_val", ",", "w_val", "\n", ")", "\n", "val_loss", "=", "(", "\n", "self", ".", "loss", "(", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", ",", "y_val", ",", "w_val", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[SNet] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._ortho_reg": [[377, 457], ["torch.sum", "min", "min", "snet.SNet._ortho_reg._get_absolute_rowsums"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._get_absolute_rowsums"], ["", "def", "_ortho_reg", "(", "self", ")", "->", "float", ":", "\n", "        ", "def", "_get_absolute_rowsums", "(", "mat", ":", "torch", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "mat", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "def", "_get_cos_reg", "(", "\n", "params_0", ":", "torch", ".", "Tensor", ",", "params_1", ":", "torch", ".", "Tensor", ",", "normalize", ":", "bool", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "normalize", ":", "\n", "                ", "params_0", "=", "params_0", "/", "torch", ".", "linalg", ".", "norm", "(", "params_0", ",", "dim", "=", "0", ")", "\n", "params_1", "=", "params_1", "/", "torch", ".", "linalg", ".", "norm", "(", "params_1", ",", "dim", "=", "0", ")", "\n", "\n", "", "x_min", "=", "min", "(", "params_0", ".", "shape", "[", "0", "]", ",", "params_1", ".", "shape", "[", "0", "]", ")", "\n", "y_min", "=", "min", "(", "params_0", ".", "shape", "[", "1", "]", ",", "params_1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "linalg", ".", "norm", "(", "\n", "params_0", "[", ":", "x_min", ",", ":", "y_min", "]", "*", "params_1", "[", ":", "x_min", ",", ":", "y_min", "]", ",", "\"fro\"", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "\n", "", "reps_o_params", "=", "self", ".", "_reps_o", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_mu0_params", "=", "self", ".", "_reps_mu0", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_mu1_params", "=", "self", ".", "_reps_mu1", ".", "model", "[", "0", "]", ".", "weight", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "reps_c_params", "=", "self", ".", "_reps_c", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_prop_params", "=", "self", ".", "_reps_prop", ".", "model", "[", "0", "]", ".", "weight", "\n", "\n", "# define ortho-reg function", "\n", "", "if", "self", ".", "ortho_reg_type", "==", "\"abs\"", ":", "\n", "            ", "col_o", "=", "_get_absolute_rowsums", "(", "reps_o_params", ")", "\n", "col_mu0", "=", "_get_absolute_rowsums", "(", "reps_mu0_params", ")", "\n", "col_mu1", "=", "_get_absolute_rowsums", "(", "reps_mu1_params", ")", "\n", "if", "self", ".", "with_prop", ":", "\n", "                ", "col_c", "=", "_get_absolute_rowsums", "(", "reps_c_params", ")", "\n", "col_w", "=", "_get_absolute_rowsums", "(", "reps_prop_params", ")", "\n", "\n", "return", "self", ".", "penalty_orthogonal", "*", "torch", ".", "sum", "(", "\n", "col_c", "*", "col_o", "\n", "+", "col_c", "*", "col_w", "\n", "+", "col_c", "*", "col_mu1", "\n", "+", "col_c", "*", "col_mu0", "\n", "+", "col_w", "*", "col_o", "\n", "+", "col_mu0", "*", "col_o", "\n", "+", "col_o", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_w", "\n", "+", "col_w", "*", "col_mu1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "torch", ".", "sum", "(", "\n", "+", "col_mu0", "*", "col_o", "\n", "+", "col_o", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_mu1", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "ortho_reg_type", "==", "\"fro\"", ":", "\n", "            ", "if", "self", ".", "with_prop", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "(", "\n", "_get_cos_reg", "(", "reps_c_params", ",", "reps_o_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu1_params", ",", "reps_prop_params", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "(", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_mu1_params", ")", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid orth_reg_typ {self.ortho_reg_type}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._maximum_mean_discrepancy": [[458, 471], ["torch.sum", "w.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sqrt", "torch.mean", "torch.mean", "torch.var"], "methods", ["None"], ["", "", "def", "_maximum_mean_discrepancy", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "w", ".", "shape", "[", "0", "]", "\n", "n_t", "=", "torch", ".", "sum", "(", "w", ")", "\n", "\n", "X", "=", "X", "/", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "X", ",", "dim", "=", "0", ")", "+", "EPS", ")", "\n", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "mean_control", "=", "(", "n", "/", "(", "n", "-", "n_t", ")", ")", "*", "torch", ".", "mean", "(", "(", "1", "-", "w", ")", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "mean_treated", "=", "(", "n", "/", "n_t", ")", "*", "torch", ".", "mean", "(", "w", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "(", "mean_treated", "-", "mean_control", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._step": [[472, 480], ["snet.SNet._forward", "snet.SNet._maximum_mean_discrepancy"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._forward", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._maximum_mean_discrepancy"], ["", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "reps_o", "=", "self", ".", "_forward", "(", "X", ")", "\n", "\n", "discrepancy", "=", "self", ".", "penalty_disc", "*", "self", ".", "_maximum_mean_discrepancy", "(", "reps_o", ",", "w", ")", "\n", "\n", "return", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._forward": [[481, 505], ["snet.SNet._reps_o", "snet.SNet._reps_mu0", "snet.SNet._reps_mu1", "snet.SNet._reps_c", "snet.SNet._reps_prop", "torch.cat", "torch.cat", "torch.cat", "snet.SNet._propensity_estimator", "torch.cat", "torch.cat", "torch.ones", "len"], "methods", ["None"], ["", "def", "_forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "reps_o", "=", "self", ".", "_reps_o", "(", "X", ")", "\n", "reps_mu0", "=", "self", ".", "_reps_mu0", "(", "X", ")", "\n", "reps_mu1", "=", "self", ".", "_reps_mu1", "(", "X", ")", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "reps_c", "=", "self", ".", "_reps_c", "(", "X", ")", "\n", "reps_w", "=", "self", ".", "_reps_prop", "(", "X", ")", "\n", "\n", "reps_po_0", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_o", ",", "reps_mu0", ")", ",", "dim", "=", "1", ")", "\n", "reps_po_1", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_o", ",", "reps_mu1", ")", ",", "dim", "=", "1", ")", "\n", "reps_w", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_w", ")", ",", "dim", "=", "1", ")", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "reps_w", ")", "\n", "", "else", ":", "\n", "            ", "reps_po_0", "=", "torch", ".", "cat", "(", "(", "reps_o", ",", "reps_mu0", ")", ",", "dim", "=", "1", ")", "\n", "reps_po_1", "=", "torch", ".", "cat", "(", "(", "reps_o", ",", "reps_mu1", ")", ",", "dim", "=", "1", ")", "\n", "prop_preds", "=", "0.5", "*", "torch", ".", "ones", "(", "len", "(", "X", ")", ")", "# no probability predictions", "\n", "\n", "", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "reps_po_0", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "reps_po_1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "reps_o", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet.predict": [[506, 537], ["snet.SNet._check_tensor().float", "snet.SNet._forward", "snet.SNet._po_estimators[].model.eval", "snet.SNet._po_estimators[].model.eval", "snet.SNet._reps_o.model.eval", "snet.SNet._reps_mu1.model.eval", "snet.SNet._reps_mu0.model.eval", "snet.SNet._reps_c.model.eval", "snet.SNet._reps_prop.model.eval", "snet.SNet._check_tensor"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.snet.SNet._forward", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "_po_estimators", "[", "0", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_po_estimators", "[", "1", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_o", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_mu1", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_mu0", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "with_prop", ":", "\n", "                ", "self", ".", "_reps_c", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_prop", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "y0_preds", ",", "y1_preds", ",", "_", ",", "_", "=", "self", ".", "_forward", "(", "X", ")", "\n", "\n", "outcome", "=", "y1_preds", "-", "y0_preds", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y0_preds", ",", "y1_preds", "\n", "\n", "", "return", "outcome", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner.__init__": [[109, 178], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "pseudo_outcome_nets.PseudoOutcomeLearner._generate_propensity_estimator"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_propensity_estimator"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", ",", "\n", "po_estimator", ":", "Any", "=", "None", ",", "\n", "te_estimator", ":", "Any", "=", "None", ",", "\n", "n_folds", ":", "int", "=", "DEFAULT_CF_FOLDS", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_out_t", ":", "int", "=", "DEFAULT_LAYERS_OUT_T", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_out_t", ":", "int", "=", "DEFAULT_UNITS_OUT_T", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "0", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "weight_decay_t", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "lr_t", ":", "float", "=", "DEFAULT_STEP_SIZE_T", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "weighting_strategy", ":", "Optional", "[", "str", "]", "=", "\"prop\"", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", ":", "\n", "        ", "super", "(", "PseudoOutcomeLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_unit_in", "=", "n_unit_in", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_units_out_prop", "=", "n_units_out_prop", "\n", "self", ".", "n_layers_out_prop", "=", "n_layers_out_prop", "\n", "self", ".", "weight_decay_t", "=", "weight_decay_t", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "weighting_strategy", "=", "weighting_strategy", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_t", "=", "lr_t", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "self", ".", "n_folds", "=", "n_folds", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "n_layers_out_t", "=", "n_layers_out_t", "\n", "self", ".", "n_units_out_t", "=", "n_units_out_t", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "# set estimators", "\n", "self", ".", "_te_template", "=", "te_estimator", "\n", "self", ".", "_po_template", "=", "po_estimator", "\n", "\n", "self", ".", "_te_estimator", "=", "self", ".", "_generate_te_estimator", "(", ")", "\n", "self", ".", "_po_estimator", "=", "self", ".", "_generate_te_estimator", "(", ")", "\n", "if", "weighting_strategy", "is", "not", "None", ":", "\n", "            ", "self", ".", "_propensity_estimator", "=", "self", ".", "_generate_propensity_estimator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator": [[179, 203], ["catenets.models.torch.base.BasicNet().to", "copy.deepcopy", "catenets.models.torch.base.BasicNet"], "methods", ["None"], ["", "", "def", "_generate_te_estimator", "(", "self", ",", "name", ":", "str", "=", "\"te_estimator\"", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "_te_template", "is", "not", "None", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_te_template", ")", "\n", "", "return", "BasicNet", "(", "\n", "name", ",", "\n", "self", ".", "n_unit_in", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_layers_out", "=", "self", ".", "n_layers_out_t", ",", "\n", "n_units_out", "=", "self", ".", "n_units_out_t", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay_t", ",", "\n", "lr", "=", "self", ".", "lr_t", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "n_iter_min", "=", "self", ".", "n_iter_min", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator": [[204, 229], ["catenets.models.torch.base.BasicNet().to", "copy.deepcopy", "catenets.models.torch.base.BasicNet"], "methods", ["None"], ["", "def", "_generate_po_estimator", "(", "self", ",", "name", ":", "str", "=", "\"po_estimator\"", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "_po_template", "is", "not", "None", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_po_template", ")", "\n", "\n", "", "return", "BasicNet", "(", "\n", "name", ",", "\n", "self", ".", "n_unit_in", ",", "\n", "binary_y", "=", "self", ".", "binary_y", ",", "\n", "n_layers_out", "=", "self", ".", "n_layers_out", ",", "\n", "n_units_out", "=", "self", ".", "n_units_out", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "n_iter_min", "=", "self", ".", "n_iter_min", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_propensity_estimator": [[230, 255], ["catenets.models.torch.base.PropensityNet().to", "ValueError", "catenets.models.torch.base.PropensityNet"], "methods", ["None"], ["", "def", "_generate_propensity_estimator", "(", "\n", "self", ",", "name", ":", "str", "=", "\"propensity_estimator\"", "\n", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "weighting_strategy", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weighting_strategy for PropensityNet\"", ")", "\n", "", "return", "PropensityNet", "(", "\n", "name", ",", "\n", "self", ".", "n_unit_in", ",", "\n", "2", ",", "# number of treatments", "\n", "self", ".", "weighting_strategy", ",", "\n", "n_units_out_prop", "=", "self", ".", "n_units_out_prop", ",", "\n", "n_layers_out_prop", "=", "self", ".", "n_layers_out_prop", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", ",", "\n", "dropout", "=", "self", ".", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner.train": [[256, 316], ["pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().float", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().squeeze().float", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().squeeze().float", "len", "pseudo_outcome_nets.PseudoOutcomeLearner._second_step", "numpy.ones", "pseudo_outcome_nets.PseudoOutcomeLearner._first_step", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().squeeze", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().squeeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "pseudo_outcome_nets.PseudoOutcomeLearner.cpu", "pseudo_outcome_nets.PseudoOutcomeLearner.cpu", "torch.zeros().to", "pseudo_outcome_nets.PseudoOutcomeLearner._first_step", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner._second_step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner._first_step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner._first_step", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "train", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "\"PseudoOutcomeLearner\"", ":", "\n", "        ", "\"\"\"\n        Train treatment effects nets.\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Train-sample features\n        y: array-like of shape (n_samples,)\n            Train-sample labels\n        w: array-like of shape (n_samples,)\n            Train-sample treatments\n        \"\"\"", "\n", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "y", "=", "self", ".", "_check_tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "self", ".", "_check_tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "\n", "n", "=", "len", "(", "y", ")", "\n", "\n", "# STEP 1: fit plug-in estimators via cross-fitting", "\n", "if", "self", ".", "n_folds", "==", "1", ":", "\n", "            ", "pred_mask", "=", "np", ".", "ones", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "# fit plug-in models", "\n", "mu_0_pred", ",", "mu_1_pred", ",", "p_pred", "=", "self", ".", "_first_step", "(", "\n", "X", ",", "y", ",", "w", ",", "pred_mask", ",", "pred_mask", "\n", ")", "\n", "", "else", ":", "\n", "            ", "mu_0_pred", ",", "mu_1_pred", ",", "p_pred", "=", "(", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", ")", "\n", "\n", "# create folds stratified by treatment assignment to ensure balance", "\n", "splitter", "=", "StratifiedKFold", "(", "\n", "n_splits", "=", "self", ".", "n_folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "for", "train_index", ",", "test_index", "in", "splitter", ".", "split", "(", "X", ".", "cpu", "(", ")", ",", "w", ".", "cpu", "(", ")", ")", ":", "\n", "# create masks", "\n", "                ", "pred_mask", "=", "torch", ".", "zeros", "(", "n", ",", "dtype", "=", "bool", ")", ".", "to", "(", "DEVICE", ")", "\n", "pred_mask", "[", "test_index", "]", "=", "1", "\n", "\n", "# fit plug-in te_estimator", "\n", "(", "\n", "mu_0_pred", "[", "pred_mask", "]", ",", "\n", "mu_1_pred", "[", "pred_mask", "]", ",", "\n", "p_pred", "[", "pred_mask", "]", ",", "\n", ")", "=", "self", ".", "_first_step", "(", "X", ",", "y", ",", "w", ",", "~", "pred_mask", ",", "pred_mask", ")", "\n", "\n", "# use estimated propensity scores", "\n", "", "", "if", "self", ".", "weighting_strategy", "is", "not", "None", ":", "\n", "            ", "p", "=", "p_pred", "\n", "\n", "# STEP 2: direct TE estimation", "\n", "", "self", ".", "_second_step", "(", "X", ",", "y", ",", "w", ",", "p", ",", "mu_0_pred", ",", "mu_1_pred", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner.predict": [[317, 338], ["pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor().float", "catenets.models.torch.utils.model_utils.predict_wrapper", "NotImplementedError", "pseudo_outcome_nets.PseudoOutcomeLearner._te_estimator.model.eval", "pseudo_outcome_nets.PseudoOutcomeLearner._check_tensor"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        te_est: array-like of shape (n_samples,)\n            Predicted treatment effects\n        \"\"\"", "\n", "if", "return_po", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"PseudoOutcomeLearners have no Potential outcome predictors.\"", "\n", ")", "\n", "", "if", "not", "training", ":", "\n", "            ", "self", ".", "_te_estimator", ".", "model", ".", "eval", "(", ")", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "return", "predict_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._first_step": [[339, 349], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._second_step": [[350, 361], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_pos": [[362, 386], ["pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.model_utils.predict_wrapper", "catenets.models.torch.utils.model_utils.predict_wrapper"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper"], ["", "def", "_impute_pos", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# split sample", "\n", "        ", "X_fit", ",", "Y_fit", ",", "W_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "y", "[", "fit_mask", "]", ",", "w", "[", "fit_mask", "]", "\n", "\n", "# fit two separate (standard) models", "\n", "# untreated model", "\n", "temp_model_0", "=", "self", ".", "_generate_po_estimator", "(", "\"po_estimator_0_impute_pos\"", ")", "\n", "train_wrapper", "(", "temp_model_0", ",", "X_fit", "[", "W_fit", "==", "0", "]", ",", "Y_fit", "[", "W_fit", "==", "0", "]", ")", "\n", "\n", "# treated model", "\n", "temp_model_1", "=", "self", ".", "_generate_po_estimator", "(", "\"po_estimator_1_impute_pos\"", ")", "\n", "train_wrapper", "(", "temp_model_1", ",", "X_fit", "[", "W_fit", "==", "1", "]", ",", "Y_fit", "[", "W_fit", "==", "1", "]", ")", "\n", "\n", "mu_0_pred", "=", "predict_wrapper", "(", "temp_model_0", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "mu_1_pred", "=", "predict_wrapper", "(", "temp_model_1", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "\n", "return", "mu_0_pred", ",", "mu_1_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_propensity": [[387, 406], ["pseudo_outcome_nets.PseudoOutcomeLearner._generate_propensity_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "pseudo_outcome_nets.PseudoOutcomeLearner.get_importance_weights"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_propensity_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.get_importance_weights"], ["", "def", "_impute_propensity", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# split sample", "\n", "        ", "X_fit", ",", "W_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "w", "[", "fit_mask", "]", "\n", "\n", "# fit propensity estimator", "\n", "temp_propensity_estimator", "=", "self", ".", "_generate_propensity_estimator", "(", "\n", "\"prop_estimator_impute_propensity\"", "\n", ")", "\n", "train_wrapper", "(", "temp_propensity_estimator", ",", "X_fit", ",", "W_fit", ")", "\n", "\n", "# predict propensity on hold out", "\n", "return", "temp_propensity_estimator", ".", "get_importance_weights", "(", "\n", "X", "[", "pred_mask", ",", ":", "]", ",", "w", "[", "pred_mask", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_unconditional_mean": [[408, 423], ["pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.model_utils.predict_wrapper"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_po_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper"], ["", "def", "_impute_unconditional_mean", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# R-learner and U-learner need to impute unconditional mean", "\n", "        ", "X_fit", ",", "Y_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "y", "[", "fit_mask", "]", "\n", "\n", "# fit model", "\n", "temp_model", "=", "self", ".", "_generate_po_estimator", "(", "\"po_est_impute_unconditional_mean\"", ")", "\n", "train_wrapper", "(", "temp_model", ",", "X_fit", ",", "Y_fit", ")", "\n", "\n", "return", "predict_wrapper", "(", "temp_model", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.DRLearner._first_step": [[430, 441], ["pseudo_outcome_nets.DRLearner._impute_pos", "pseudo_outcome_nets.DRLearner._impute_propensity().squeeze", "mu0_pred.squeeze", "mu1_pred.squeeze", "pseudo_outcome_nets.DRLearner._impute_propensity"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_pos", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_propensity"], ["def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.DRLearner._second_step": [[442, 453], ["catenets.models.torch.utils.transformations.dr_transformation_cate", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.transformations.dr_transformation_cate.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.dr_transformation_cate", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "dr_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ",", "mu_1", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PWLearner._first_step": [[460, 472], ["pseudo_outcome_nets.PWLearner._impute_propensity().squeeze", "pseudo_outcome_nets.PWLearner._impute_propensity"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_propensity"], ["def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "np", ".", "nan", ",", "np", ".", "nan", "# not needed", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu0_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PWLearner._second_step": [[473, 484], ["catenets.models.torch.utils.transformations.pw_transformation_cate", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.transformations.pw_transformation_cate.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.pw_transformation_cate", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "pw_transformation_cate", "(", "y", ",", "w", ",", "p", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.RALearner._first_step": [[491, 502], ["pseudo_outcome_nets.RALearner._impute_pos", "mu0_pred.squeeze", "mu1_pred.squeeze"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_pos"], ["def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "np", ".", "nan", "# not needed", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.RALearner._second_step": [[503, 514], ["catenets.models.torch.utils.transformations.ra_transformation_cate", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.transformations.ra_transformation_cate.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.ra_transformation_cate", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "ra_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ",", "mu_1", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.ULearner._first_step": [[521, 534], ["pseudo_outcome_nets.ULearner._impute_unconditional_mean().squeeze", "pseudo_outcome_nets.ULearner._impute_propensity().squeeze", "pseudo_outcome_nets.ULearner._impute_unconditional_mean", "pseudo_outcome_nets.ULearner._impute_propensity"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_unconditional_mean", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_propensity"], ["def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "mu_pred", "=", "self", ".", "_impute_unconditional_mean", "(", "X", ",", "y", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "mu1_pred", "=", "np", ".", "nan", "# only have one thing to impute here", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.ULearner._second_step": [[535, 546], ["catenets.models.torch.utils.transformations.u_transformation_cate", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.transformations.u_transformation_cate.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.u_transformation_cate", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "u_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.RLearner._first_step": [[554, 566], ["pseudo_outcome_nets.RLearner._impute_unconditional_mean().squeeze", "pseudo_outcome_nets.RLearner._impute_propensity().squeeze", "pseudo_outcome_nets.RLearner._impute_unconditional_mean", "pseudo_outcome_nets.RLearner._impute_propensity"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_unconditional_mean", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_propensity"], ["def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu_pred", "=", "self", ".", "_impute_unconditional_mean", "(", "X", ",", "y", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "mu1_pred", "=", "np", ".", "nan", "# only have one thing to impute here", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.RLearner._second_step": [[567, 579], ["catenets.models.torch.utils.transformations.u_transformation_cate", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.transformations.u_transformation_cate.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.u_transformation_cate", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "u_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ")", "\n", "train_wrapper", "(", "\n", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ",", "weight", "=", "(", "w", "-", "p", ")", "**", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner.__init__": [[588, 599], ["pseudo_outcome_nets.PseudoOutcomeLearner.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "weighting_strategy", ":", "str", "=", "\"prop\"", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "weighting_strategy", "=", "weighting_strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner._first_step": [[600, 611], ["pseudo_outcome_nets.XLearner._impute_pos", "mu0_pred.squeeze", "mu1_pred.squeeze"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._impute_pos"], ["", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "np", ".", "nan", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner._second_step": [[612, 631], ["pseudo_outcome_nets.XLearner._generate_te_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "pseudo_outcome_nets.XLearner._generate_te_estimator", "catenets.models.torch.utils.model_utils.train_wrapper", "catenets.models.torch.utils.model_utils.train_wrapper", "pseudo_0.detach", "pseudo_1.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.PseudoOutcomeLearner._generate_te_estimator", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "# split by treatment status, fit one model per group", "\n", "        ", "pseudo_0", "=", "mu_1", "[", "w", "==", "0", "]", "-", "y", "[", "w", "==", "0", "]", "\n", "self", ".", "_te_estimator_0", "=", "self", ".", "_generate_te_estimator", "(", "\"te_estimator_0_xnet\"", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator_0", ",", "X", "[", "w", "==", "0", "]", ",", "pseudo_0", ".", "detach", "(", ")", ")", "\n", "\n", "pseudo_1", "=", "y", "[", "w", "==", "1", "]", "-", "mu_0", "[", "w", "==", "1", "]", "\n", "self", ".", "_te_estimator_1", "=", "self", ".", "_generate_te_estimator", "(", "\"te_estimator_1_xnet\"", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator_1", ",", "X", "[", "w", "==", "1", "]", ",", "pseudo_1", ".", "detach", "(", ")", ")", "\n", "\n", "train_wrapper", "(", "self", ".", "_propensity_estimator", ",", "X", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.pseudo_outcome_nets.XLearner.predict": [[632, 664], ["pseudo_outcome_nets.XLearner._check_tensor().float().to", "catenets.models.torch.utils.model_utils.predict_wrapper", "catenets.models.torch.utils.model_utils.predict_wrapper", "pseudo_outcome_nets.XLearner._propensity_estimator.get_importance_weights", "NotImplementedError", "pseudo_outcome_nets.XLearner._te_estimator_1.model.eval", "pseudo_outcome_nets.XLearner._te_estimator_0.model.eval", "pseudo_outcome_nets.XLearner._check_tensor().float", "pseudo_outcome_nets.XLearner._check_tensor"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.get_importance_weights", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        return_po: bool, default False\n            Whether to return potential outcome predictions. Placeholder, can only accept False.\n        Returns\n        -------\n        te_est: array-like of shape (n_samples,)\n            Predicted treatment effects\n        \"\"\"", "\n", "if", "return_po", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"PseudoOutcomeLearners have no Potential outcome predictors.\"", "\n", ")", "\n", "\n", "", "if", "not", "training", ":", "\n", "            ", "self", ".", "_te_estimator_1", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_te_estimator_0", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "tau0_pred", "=", "predict_wrapper", "(", "self", ".", "_te_estimator_0", ",", "X", ")", "\n", "tau1_pred", "=", "predict_wrapper", "(", "self", ".", "_te_estimator_1", ",", "X", ")", "\n", "\n", "weight", "=", "self", ".", "_propensity_estimator", ".", "get_importance_weights", "(", "X", ")", "\n", "\n", "return", "weight", "*", "tau0_pred", "+", "(", "1", "-", "weight", ")", "*", "tau1_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.slearner.SLearner.__init__": [[68, 137], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "catenets.models.torch.base.BasicNet().to", "catenets.models.torch.base.PropensityNet().to", "catenets.models.torch.base.BasicNet", "catenets.models.torch.base.PropensityNet"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", ",", "\n", "po_estimator", ":", "Any", "=", "None", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "weighting_strategy", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "SLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_weighting_strategy", "=", "weighting_strategy", "\n", "if", "po_estimator", "is", "not", "None", ":", "\n", "            ", "self", ".", "_po_estimator", "=", "po_estimator", "\n", "", "else", ":", "\n", "            ", "self", ".", "_po_estimator", "=", "BasicNet", "(", "\n", "\"slearner_po_estimator\"", ",", "\n", "n_unit_in", "+", "1", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "lr", "=", "lr", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "if", "weighting_strategy", "is", "not", "None", ":", "\n", "            ", "self", ".", "_propensity_estimator", "=", "PropensityNet", "(", "\n", "\"slearner_prop_estimator\"", ",", "\n", "n_unit_in", ",", "\n", "2", ",", "# number of treatments", "\n", "weighting_strategy", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "lr", "=", "lr", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.slearner.SLearner.train": [[138, 187], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.cat().to", "hasattr", "catenets.info", "slearner.SLearner._propensity_estimator.train", "slearner.SLearner._propensity_estimator.get_importance_weights", "slearner.SLearner._po_estimator.train", "NotImplementedError", "catenets.info", "slearner.SLearner._po_estimator.fit", "catenets.info", "slearner.SLearner._po_estimator.train", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "hasattr", "hasattr", "torch.cat().to.detach().numpy", "torch.Tensor().to.detach().numpy", "torch.Tensor().to.reshape", "torch.cat().to.detach", "torch.Tensor().to.detach"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.PropensityNet.get_importance_weights", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train"], ["", "", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"SLearner\"", ":", "\n", "        ", "\"\"\"\n        Fit treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# add indicator as additional variable", "\n", "X_ext", "=", "torch", ".", "cat", "(", "(", "X", ",", "w", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ",", "dim", "=", "1", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "not", "(", "\n", "hasattr", "(", "self", ".", "_po_estimator", ",", "\"train\"", ")", "or", "hasattr", "(", "self", ".", "_po_estimator", ",", "\"fit\"", ")", "\n", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"invalid po_estimator for the slearner\"", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "_po_estimator", ",", "\"fit\"", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"Fit the sklearn po_estimator\"", ")", "\n", "self", ".", "_po_estimator", ".", "fit", "(", "X_ext", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "self", "\n", "\n", "", "if", "self", ".", "_weighting_strategy", "is", "None", ":", "\n", "# fit standard S-learner", "\n", "            ", "log", ".", "info", "(", "\"Fit the PyTorch po_estimator\"", ")", "\n", "self", ".", "_po_estimator", ".", "train", "(", "X_ext", ",", "y", ")", "\n", "return", "self", "\n", "\n", "# use reweighting within the outcome model", "\n", "", "log", ".", "info", "(", "\"Fit the PyTorch po_estimator with the propensity estimator\"", ")", "\n", "self", ".", "_propensity_estimator", ".", "train", "(", "X", ",", "w", ")", "\n", "weights", "=", "self", ".", "_propensity_estimator", ".", "get_importance_weights", "(", "X", ",", "w", ")", "\n", "self", ".", "_po_estimator", ".", "train", "(", "X_ext", ",", "y", ",", "weight", "=", "weights", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.slearner.SLearner._create_extended_matrices": [[188, 199], ["slearner.SLearner._check_tensor", "torch.ones().to", "torch.zeros().to", "torch.cat().to", "torch.cat().to", "torch.ones", "torch.zeros", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "_create_extended_matrices", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", "\n", "\n", "# create extended matrices", "\n", "w_1", "=", "torch", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "w_0", "=", "torch", ".", "zeros", "(", "(", "n", ",", "1", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "X_ext_0", "=", "torch", ".", "cat", "(", "(", "X", ",", "w_0", ")", ",", "dim", "=", "1", ")", ".", "to", "(", "DEVICE", ")", "\n", "X_ext_1", "=", "torch", ".", "cat", "(", "(", "X", ",", "w_1", ")", ",", "dim", "=", "1", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "return", "[", "X_ext_0", ",", "X_ext_1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.slearner.SLearner.predict": [[200, 228], ["slearner.SLearner._check_tensor().float", "slearner.SLearner._create_extended_matrices", "slearner.SLearner._po_estimator.model.eval", "y.append", "slearner.SLearner._check_tensor", "catenets.models.torch.utils.model_utils.predict_wrapper().to", "catenets.models.torch.utils.model_utils.predict_wrapper"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.slearner.SLearner._create_extended_matrices", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "_po_estimator", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "X_ext", "=", "self", ".", "_create_extended_matrices", "(", "X", ")", "\n", "\n", "y", "=", "[", "]", "\n", "for", "ext_mat", "in", "X_ext", ":", "\n", "            ", "y", ".", "append", "(", "predict_wrapper", "(", "self", ".", "_po_estimator", ",", "ext_mat", ")", ".", "to", "(", "DEVICE", ")", ")", "\n", "\n", "", "outcome", "=", "y", "[", "1", "]", "-", "y", "[", "0", "]", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y", "[", "0", "]", ",", "y", "[", "1", "]", "\n", "\n", "", "return", "outcome", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.tlearner.TLearner.__init__": [[56, 105], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "range", "tlearner.TLearner._plug_in.append", "tlearner.TLearner._plug_in.append", "copy.deepcopy", "catenets.models.torch.base.BasicNet().to", "catenets.models.torch.base.BasicNet"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", ",", "\n", "po_estimator", ":", "Any", "=", "None", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "TLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_plug_in", ":", "Any", "=", "[", "]", "\n", "plugins", "=", "[", "f\"tlearner_po_estimator_{i}\"", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "if", "po_estimator", "is", "not", "None", ":", "\n", "            ", "for", "plugin", "in", "plugins", ":", "\n", "                ", "self", ".", "_plug_in", ".", "append", "(", "copy", ".", "deepcopy", "(", "po_estimator", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "plugin", "in", "plugins", ":", "\n", "                ", "self", ".", "_plug_in", ".", "append", "(", "\n", "BasicNet", "(", "\n", "plugin", ",", "\n", "n_unit_in", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "lr", "=", "lr", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.tlearner.TLearner.predict": [[107, 135], ["tlearner.TLearner._check_tensor().float", "enumerate", "y_hat.append", "tlearner.TLearner._check_tensor", "plugin.model.eval", "catenets.models.torch.utils.model_utils.predict_wrapper"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper"], ["", "", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n        Parameters\n        ----------\n        X: torch.Tensor of shape (n_samples, n_features)\n            Test-sample features\n        return_po: bool\n            Return potential outcomes too\n\n        Returns\n        -------\n        y: torch.Tensor of shape (n_samples,)\n        \"\"\"", "\n", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "\n", "y_hat", "=", "[", "]", "\n", "for", "widx", ",", "plugin", "in", "enumerate", "(", "self", ".", "_plug_in", ")", ":", "\n", "            ", "if", "not", "training", ":", "\n", "                ", "plugin", ".", "model", ".", "eval", "(", ")", "\n", "", "y_hat", ".", "append", "(", "predict_wrapper", "(", "plugin", ",", "X", ")", ")", "\n", "\n", "", "outcome", "=", "y_hat", "[", "1", "]", "-", "y_hat", "[", "0", "]", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y_hat", "[", "0", "]", ",", "y_hat", "[", "1", "]", "\n", "\n", "", "return", "outcome", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.tlearner.TLearner.train": [[136, 162], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "enumerate", "catenets.models.torch.utils.model_utils.train_wrapper", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper"], ["", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"TLearner\"", ":", "\n", "        ", "\"\"\"\n        Train plug-in models.\n\n        Parameters\n        ----------\n        X : torch.Tensor (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "for", "widx", ",", "plugin", "in", "enumerate", "(", "self", ".", "_plug_in", ")", ":", "\n", "            ", "train_wrapper", "(", "plugin", ",", "X", "[", "w", "==", "widx", "]", ",", "y", "[", "w", "==", "widx", "]", ")", "\n", "\n", "", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTELinearLayer.__init__": [[35, 46], ["torch.nn.Module.__init__", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.5", ",", "*", "args", ":", "Any", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTELinearLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTELinearLayer.forward": [[47, 57], ["len", "ValueError", "flextenet.FlexTELinearLayer.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexLinearLayer layer. It requires the features vector and the treatments vector\"", "\n", ")", "\n", "\n", "", "features_vector", "=", "tensors", "[", "0", "]", "\n", "treatments_vector", "=", "tensors", "[", "1", "]", "\n", "\n", "return", "[", "self", ".", "model", "(", "features_vector", ")", ",", "treatments_vector", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTESplitLayer.__init__": [[64, 100], ["torch.nn.Module.__init__", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "n_units_in", ":", "int", ",", "\n", "n_units_in_p", ":", "int", ",", "\n", "n_units_s", ":", "int", ",", "\n", "n_units_p", ":", "int", ",", "\n", "first_layer", ":", "bool", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.5", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTESplitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "first_layer", "=", "first_layer", "\n", "self", ".", "n_units_in", "=", "n_units_in", "\n", "self", ".", "n_units_in_p", "=", "n_units_in_p", "\n", "self", ".", "n_units_s", "=", "n_units_s", "\n", "self", ".", "n_units_p", "=", "n_units_p", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in", ",", "n_units_s", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "n_units_p", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "n_units_p", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in", ",", "n_units_s", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "n_units_p", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "n_units_p", ")", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTESplitLayer.forward": [[101, 130], ["ValueError", "ValueError", "flextenet.FlexTESplitLayer.net_shared", "flextenet.FlexTESplitLayer.net_p0", "flextenet.FlexTESplitLayer.net_p1", "flextenet.FlexTESplitLayer.net_shared", "flextenet.FlexTESplitLayer.net_p0", "flextenet.FlexTESplitLayer.net_p1", "len", "len", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "self", ".", "first_layer", "and", "len", "(", "tensors", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexSplitLayer layer. It requires the features vector and the treatments vector\"", "\n", ")", "\n", "", "if", "not", "self", ".", "first_layer", "and", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexSplitLayer layer. It requires X_s, X_p0, X_p1 and W as input\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "first_layer", ":", "\n", "            ", "X", "=", "tensors", "[", "0", "]", "\n", "W", "=", "tensors", "[", "1", "]", "\n", "\n", "rep_s", "=", "self", ".", "net_shared", "(", "X", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "X", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "X", ")", "\n", "\n", "", "else", ":", "\n", "            ", "X_s", "=", "tensors", "[", "0", "]", "\n", "X_p0", "=", "tensors", "[", "1", "]", "\n", "X_p1", "=", "tensors", "[", "2", "]", "\n", "W", "=", "tensors", "[", "3", "]", "\n", "\n", "rep_s", "=", "self", ".", "net_shared", "(", "X_s", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "[", "rep_s", ",", "rep_p0", ",", "rep_p1", ",", "W", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTEOutputLayer.__init__": [[133, 156], ["torch.nn.Module.__init__", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_units_in", ":", "int", ",", "n_units_in_p", ":", "int", ",", "private", ":", "bool", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "dropout_prob", ":", "float", "=", "0.5", ",", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTEOutputLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "private", "=", "private", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTEOutputLayer.forward": [[159, 180], ["len", "ValueError", "flextenet.FlexTEOutputLayer.net_p0().squeeze", "flextenet.FlexTEOutputLayer.net_p1().squeeze", "flextenet.FlexTEOutputLayer.net_shared().squeeze", "flextenet.FlexTEOutputLayer.net_p0().squeeze", "flextenet.FlexTEOutputLayer.net_p1().squeeze", "flextenet.FlexTEOutputLayer.net_p0", "flextenet.FlexTEOutputLayer.net_p1", "flextenet.FlexTEOutputLayer.net_shared", "flextenet.FlexTEOutputLayer.net_p0", "flextenet.FlexTEOutputLayer.net_p1", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexSplitLayer layer. It requires X_s, X_p0, X_p1 and W as input\"", "\n", ")", "\n", "", "X_s", "=", "tensors", "[", "0", "]", "\n", "X_p0", "=", "tensors", "[", "1", "]", "\n", "X_p1", "=", "tensors", "[", "2", "]", "\n", "W", "=", "tensors", "[", "3", "]", "\n", "\n", "if", "self", ".", "private", ":", "\n", "            ", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p1", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "(", "1", "-", "W", ")", "*", "rep_p0", "+", "W", "*", "rep_p1", "\n", "", "else", ":", "\n", "            ", "rep_s", "=", "self", ".", "net_shared", "(", "X_s", ")", ".", "squeeze", "(", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p1", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "(", "1", "-", "W", ")", "*", "rep_p0", "+", "W", "*", "rep_p1", "+", "rep_s", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseParallelActivation.__init__": [[188, 192], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "self", ",", "act", ":", "Callable", ",", "**", "act_kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", "ElementWiseParallelActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "act_kwargs", "=", "act_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseParallelActivation.forward": [[193, 204], ["len", "ValueError", "flextenet.ElementWiseParallelActivation.act", "flextenet.ElementWiseParallelActivation.act", "flextenet.ElementWiseParallelActivation.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the ElementWiseParallelActivation layer. It requires X_s, X_p0, X_p1, t as input\"", "\n", ")", "\n", "\n", "", "return", "[", "\n", "self", ".", "act", "(", "tensors", "[", "0", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "self", ".", "act", "(", "tensors", "[", "1", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "self", ".", "act", "(", "tensors", "[", "2", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "tensors", "[", "3", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.__init__": [[213, 217], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "self", ",", "act", ":", "Callable", ",", "**", "act_kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", "ElementWiseSplitActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "act_kwargs", "=", "act_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.ElementWiseSplitActivation.forward": [[218, 227], ["len", "ValueError", "flextenet.ElementWiseSplitActivation.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the ElementWiseSplitActivation layer. It requires X, t as input\"", "\n", ")", "\n", "\n", "", "return", "[", "\n", "self", ".", "act", "(", "tensors", "[", "0", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "tensors", "[", "1", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.__init__": [[291, 455], ["catenets.models.torch.base.BaseCATEEstimator.__init__", "layers.extend", "range", "layers.append", "torch.nn.Sequential().to", "layers.extend", "range", "layers.extend", "range", "layers.extend", "flextenet.FlexTEOutputLayer", "layers.append", "layers.extend", "layers.extend", "flextenet.FlexTESplitLayer", "flextenet.ElementWiseParallelActivation", "torch.nn.Sigmoid", "torch.nn.Sequential", "flextenet.FlexTELinearLayer", "flextenet.ElementWiseSplitActivation", "flextenet.FlexTESplitLayer", "flextenet.ElementWiseParallelActivation", "torch.nn.SELU", "flextenet.FlexTESplitLayer", "flextenet.ElementWiseParallelActivation", "torch.nn.SELU", "flextenet.FlexTELinearLayer", "flextenet.ElementWiseSplitActivation", "torch.nn.SELU", "flextenet.FlexTESplitLayer", "flextenet.ElementWiseParallelActivation", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.SELU"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_s_out", ":", "int", "=", "DEFAULT_DIM_S_OUT", ",", "\n", "n_units_p_out", ":", "int", "=", "DEFAULT_DIM_P_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_s_r", ":", "int", "=", "DEFAULT_DIM_S_R", ",", "\n", "n_units_p_r", ":", "int", "=", "DEFAULT_DIM_P_R", ",", "\n", "private_out", ":", "bool", "=", "False", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_orthogonal", ":", "float", "=", "DEFAULT_PENALTY_ORTHOGONAL", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "shared_repr", ":", "bool", "=", "False", ",", "\n", "normalize_ortho", ":", "bool", "=", "False", ",", "\n", "mode", ":", "int", "=", "1", ",", "\n", "clipping_value", ":", "int", "=", "1", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.5", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "if", "n_layers_r", "else", "1", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_s_out", "=", "n_units_s_out", "\n", "self", ".", "n_units_p_out", "=", "n_units_p_out", "\n", "self", ".", "n_units_s_r", "=", "n_units_s_r", "\n", "self", ".", "n_units_p_r", "=", "n_units_p_r", "\n", "self", ".", "private_out", "=", "private_out", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "penalty_orthogonal", "=", "penalty_orthogonal", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "shared_repr", "=", "shared_repr", "\n", "self", ".", "normalize_ortho", "=", "normalize_ortho", "\n", "self", ".", "clipping_value", "=", "clipping_value", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "shared_repr", ":", "# fully shared representation as in TARNet", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTELinearLayer", "(", "\"shared_repr_layer_0\"", ",", "dropout", ",", "dropout_prob", ",", "\n", "n_unit_in", ",", "n_units_s_r", ")", ",", "\n", "ElementWiseSplitActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers_r", "-", "1", ")", ":", "\n", "                ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTELinearLayer", "(", "\n", "f\"shared_repr_layer_{i + 1}\"", ",", "dropout", ",", "dropout_prob", ",", "n_units_s_r", ",", "\n", "n_units_s_r", "\n", ")", ",", "\n", "ElementWiseSplitActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "", "else", ":", "# shared AND private representations", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "\"shared_private_layer_0\"", ",", "\n", "n_unit_in", ",", "\n", "n_unit_in", ",", "\n", "n_units_s_r", ",", "\n", "n_units_p_r", ",", "\n", "first_layer", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "n_layers_r", "-", "1", ")", ":", "\n", "                ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "f\"shared_private_layer_{i + 1}\"", ",", "\n", "n_units_s_r", ",", "\n", "n_units_s_r", "+", "n_units_p_r", ",", "\n", "n_units_s_r", ",", "\n", "n_units_p_r", ",", "\n", "first_layer", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add output layers", "\n", "", "", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "\"output_layer_0\"", ",", "\n", "n_units_s_r", ",", "\n", "n_units_s_r", "if", "shared_repr", "else", "n_units_s_r", "+", "n_units_p_r", ",", "\n", "n_units_s_out", ",", "\n", "n_units_p_out", ",", "\n", "first_layer", "=", "(", "shared_repr", ")", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "n_layers_out", "-", "1", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "f\"output_layer_{i + 1}\"", ",", "\n", "n_units_s_out", ",", "\n", "n_units_s_out", "+", "n_units_p_out", ",", "\n", "n_units_s_out", ",", "\n", "n_units_p_out", ",", "\n", "first_layer", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# append final layer", "\n", "", "layers", ".", "append", "(", "\n", "FlexTEOutputLayer", "(", "\n", "n_units_s_out", ",", "n_units_s_out", "+", "n_units_p_out", ",", "private", "=", "self", ".", "private_out", ",", "\n", "dropout", "=", "dropout", ",", "dropout_prob", "=", "dropout_prob", "\n", ")", "\n", ")", "\n", "if", "binary_y", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet._ortho_penalty_asymmetric": [[456, 512], ["min", "min", "torch.sum", "isinstance", "flextenet.FlexTENet._ortho_penalty_asymmetric._apply_reg_split_layer"], "methods", ["None"], ["", "def", "_ortho_penalty_asymmetric", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "_get_cos_reg", "(", "\n", "params_0", ":", "torch", ".", "Tensor", ",", "params_1", ":", "torch", ".", "Tensor", ",", "normalize", ":", "bool", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "normalize", ":", "\n", "                ", "params_0", "=", "params_0", "/", "torch", ".", "linalg", ".", "norm", "(", "params_0", ",", "dim", "=", "0", ")", "\n", "params_1", "=", "params_1", "/", "torch", ".", "linalg", ".", "norm", "(", "params_1", ",", "dim", "=", "0", ")", "\n", "\n", "", "x_min", "=", "min", "(", "params_0", ".", "shape", "[", "0", "]", ",", "params_1", ".", "shape", "[", "0", "]", ")", "\n", "y_min", "=", "min", "(", "params_0", ".", "shape", "[", "1", "]", ",", "params_1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "linalg", ".", "norm", "(", "\n", "params_0", "[", ":", "x_min", ",", ":", "y_min", "]", "*", "params_1", "[", ":", "x_min", ",", ":", "y_min", "]", ",", "\"fro\"", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "\n", "", "def", "_apply_reg_split_layer", "(", "\n", "layer", ":", "FlexTESplitLayer", ",", "full", ":", "bool", "=", "True", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "_ortho_body", "=", "0", "\n", "if", "full", ":", "\n", "                ", "_ortho_body", "=", "_get_cos_reg", "(", "\n", "layer", ".", "net_p0", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p1", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", "", "_ortho_body", "+=", "torch", ".", "sum", "(", "\n", "_get_cos_reg", "(", "\n", "layer", ".", "net_shared", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p0", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", "+", "_get_cos_reg", "(", "\n", "layer", ".", "net_shared", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p1", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", ")", "\n", "return", "_ortho_body", "\n", "\n", "", "ortho_body", "=", "0", "\n", "for", "layer", "in", "self", ".", "model", ":", "\n", "            ", "if", "not", "isinstance", "(", "layer", ",", "(", "FlexTESplitLayer", ",", "FlexTEOutputLayer", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "FlexTESplitLayer", ")", ":", "\n", "                ", "ortho_body", "+=", "_apply_reg_split_layer", "(", "layer", ",", "full", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "private_out", ":", "\n", "                ", "continue", "\n", "\n", "", "ortho_body", "+=", "_apply_reg_split_layer", "(", "layer", ",", "full", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "penalty_orthogonal", "*", "ortho_body", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss": [[513, 533], ["torch.mean", "torch.mean", "flextenet.FlexTENet.loss.po_loss"], "methods", ["None"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "return", "po_loss", "(", ")", "+", "self", ".", "_ortho_penalty_asymmetric", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train": [[534, 620], ["torch.Tensor().to", "torch.Tensor().squeeze().to", "torch.Tensor().squeeze().long().to", "catenets.models.torch.utils.model_utils.make_val_split", "numpy.arange", "torch.optim.Adam", "range", "int", "flextenet.FlexTENet.parameters", "numpy.random.shuffle", "range", "torch.Tensor().to", "torch.Tensor", "torch.Tensor().squeeze", "torch.Tensor().squeeze().long", "numpy.round", "torch.optim.Adam.zero_grad", "y[].squeeze", "w[].squeeze", "flextenet.FlexTENet.predict", "flextenet.FlexTENet.loss", "flextenet.FlexTENet.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.Tensor().to.append", "flextenet.FlexTENet.parameters", "flextenet.FlexTENet.detach", "torch.Tensor", "torch.no_grad", "flextenet.FlexTENet.predict", "flextenet.FlexTENet.loss().detach().cpu", "torch.Tensor", "torch.Tensor().squeeze", "min", "catenets.info", "flextenet.FlexTENet.loss().detach", "torch.Tensor", "flextenet.FlexTENet.loss", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.info", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss"], ["", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"FlexTENet\"", ":", "\n", "        ", "\"\"\"\n        Fit treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", "=", "w", ",", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "self", ".", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "np", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "np", ".", "arange", "(", "n", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "\n", "# training", "\n", "val_loss_best", "=", "LARGE_VAL", "\n", "patience", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "train_loss", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "\n", "X_next", "=", "X", "[", "idx_next", "]", "\n", "y_next", "=", "y", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "w_next", "=", "w", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "\n", "_", ",", "mu0", ",", "mu1", "=", "self", ".", "predict", "(", "X_next", ",", "return_po", "=", "True", ",", "training", "=", "True", ")", "\n", "batch_loss", "=", "self", ".", "loss", "(", "mu0", ",", "mu1", ",", "y_next", ",", "w_next", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "_", ",", "mu0", ",", "mu1", "=", "self", ".", "predict", "(", "X_val", ",", "return_po", "=", "True", ",", "training", "=", "True", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "mu0", ",", "mu1", ",", "y_val", ",", "w_val", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[FlexTENet] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.predict": [[621, 649], ["flextenet.FlexTENet._check_tensor().float", "torch.zeros().to", "torch.ones().to", "flextenet.FlexTENet.model", "flextenet.FlexTENet.model", "flextenet.FlexTENet.model.eval", "flextenet.FlexTENet._check_tensor", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.base.BaseCATEEstimator._check_tensor"], ["", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "W0", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "W1", "=", "torch", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "mu0", "=", "self", ".", "model", "(", "[", "X", ",", "W0", "]", ")", "\n", "mu1", "=", "self", ".", "model", "(", "[", "X", ",", "W1", "]", ")", "\n", "\n", "te", "=", "mu1", "-", "mu0", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "te", ",", "mu0", ",", "mu1", "\n", "\n", "", "return", "te", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_pseudo_outcome_nets.test_nn_model_params": [[21, 33], ["pytest.mark.parametrize", "model_t"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"model_t\"", ",", "[", "DRLearner", ",", "PWLearner", ",", "RALearner", ",", "RLearner", ",", "ULearner", ",", "XLearner", "]", "\n", ")", "\n", "def", "test_nn_model_params", "(", "model_t", ":", "Any", ")", "->", "None", ":", "\n", "    ", "model", "=", "model_t", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", ")", "\n", "\n", "assert", "model", ".", "_te_estimator", "is", "not", "None", "\n", "assert", "model", ".", "_po_estimator", "is", "not", "None", "\n", "assert", "model", ".", "_propensity_estimator", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_pseudo_outcome_nets.test_nn_model_params_nonlin": [[35, 50], ["pytest.mark.parametrize", "pytest.mark.parametrize", "model_t", "isinstance"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"nonlin\"", ",", "[", "\"elu\"", ",", "\"relu\"", ",", "\"sigmoid\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"model_t\"", ",", "[", "DRLearner", ",", "PWLearner", ",", "RALearner", ",", "RLearner", ",", "ULearner", ",", "XLearner", "]", "\n", ")", "\n", "def", "test_nn_model_params_nonlin", "(", "nonlin", ":", "str", ",", "model_t", ":", "Any", ")", "->", "None", ":", "\n", "    ", "model", "=", "model_t", "(", "2", ",", "binary_y", "=", "True", ",", "nonlin", "=", "nonlin", ")", "\n", "\n", "nonlins", "=", "{", "\n", "\"elu\"", ":", "nn", ".", "ELU", ",", "\n", "\"relu\"", ":", "nn", ".", "ReLU", ",", "\n", "\"sigmoid\"", ":", "nn", ".", "Sigmoid", ",", "\n", "}", "\n", "\n", "for", "mod", "in", "[", "model", ".", "_te_estimator", ",", "model", ".", "_po_estimator", ",", "model", ".", "_propensity_estimator", "]", ":", "\n", "        ", "assert", "isinstance", "(", "mod", ".", "model", "[", "2", "]", ",", "nonlins", "[", "nonlin", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_pseudo_outcome_nets.test_nn_model_sanity": [[52, 65], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "model_t", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "4", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_t\"", ",", "[", "DRLearner", ",", "RALearner", ",", "XLearner", "]", ")", "\n", "def", "test_nn_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "model_t", ":", "Any", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "model_t", "(", "X_train", ".", "shape", "[", "1", "]", ",", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.{model_t} with NNs on {dataset} = {score['str']}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_pseudo_outcome_nets.test_sklearn_model_pseudo_outcome_binary": [[68, 125], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "model_t", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "xgboost.XGBClassifier", "sklearn.ensemble.RandomForestRegressor", "type", "type"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"po_estimator\"", ",", "\n", "[", "\n", "XGBClassifier", "(", "\n", "n_estimators", "=", "100", ",", "\n", "reg_lambda", "=", "1e-3", ",", "\n", "reg_alpha", "=", "1e-3", ",", "\n", "colsample_bytree", "=", "0.1", ",", "\n", "colsample_bynode", "=", "0.1", ",", "\n", "colsample_bylevel", "=", "0.1", ",", "\n", "max_depth", "=", "6", ",", "\n", "tree_method", "=", "\"hist\"", ",", "\n", "learning_rate", "=", "1e-2", ",", "\n", "min_child_weight", "=", "0", ",", "\n", "max_bin", "=", "256", ",", "\n", "random_state", "=", "0", ",", "\n", "eval_metric", "=", "\"logloss\"", ",", "\n", "use_label_encoder", "=", "False", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"te_estimator\"", ",", "\n", "[", "\n", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "100", ",", "\n", "max_depth", "=", "6", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_t\"", ",", "[", "DRLearner", ",", "RALearner", "]", ")", "\n", "def", "test_sklearn_model_pseudo_outcome_binary", "(", "\n", "dataset", ":", "str", ",", "\n", "pehe_threshold", ":", "float", ",", "\n", "po_estimator", ":", "Any", ",", "\n", "te_estimator", ":", "Any", ",", "\n", "model_t", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "model_t", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "True", ",", "\n", "po_estimator", "=", "po_estimator", ",", "\n", "te_estimator", "=", "te_estimator", ",", "\n", "batch_size", "=", "1024", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "\n", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ",", "n_folds", "=", "3", "\n", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model {model_t} with po_estimator = {type(po_estimator)},\"", "\n", "f\"te_estimator = {type(te_estimator)} on {dataset} = {score['str']}\"", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_pseudo_outcome_nets.test_model_predict_api": [[129, 143], ["catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.XLearner", "catenets.models.torch.XLearner.fit", "catenets.models.torch.XLearner.predict", "catenets.models.torch.XLearner.score", "len", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_predict_api", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "XLearner", "(", "X_train", ".", "shape", "[", "1", "]", ",", "binary_y", "=", "False", ",", "batch_size", "=", "1024", ",", "n_iter", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_flextenet.test_flextenet_model_params": [[9, 56], ["catenets.models.torch.FlexTENet"], "function", ["None"], ["def", "test_flextenet_model_params", "(", ")", "->", "None", ":", "\n", "    ", "model", "=", "FlexTENet", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_layers_r", "=", "2", ",", "\n", "n_units_s_out", "=", "20", ",", "\n", "n_units_p_out", "=", "30", ",", "\n", "n_units_s_r", "=", "40", ",", "\n", "n_units_p_r", "=", "50", ",", "\n", "private_out", "=", "True", ",", "\n", "weight_decay", "=", "1e-5", ",", "\n", "penalty_orthogonal", "=", "1e-7", ",", "\n", "lr", "=", "1e-2", ",", "\n", "n_iter", "=", "123", ",", "\n", "batch_size", "=", "234", ",", "\n", "early_stopping", "=", "True", ",", "\n", "patience", "=", "5", ",", "\n", "n_iter_min", "=", "13", ",", "\n", "n_iter_print", "=", "7", ",", "\n", "seed", "=", "42", ",", "\n", "shared_repr", "=", "False", ",", "\n", "normalize_ortho", "=", "False", ",", "\n", "mode", "=", "1", ",", "\n", ")", "\n", "\n", "assert", "model", ".", "binary_y", "is", "True", "\n", "assert", "model", ".", "n_layers_out", "==", "1", "\n", "assert", "model", ".", "n_layers_r", "==", "2", "\n", "assert", "model", ".", "n_units_s_out", "==", "20", "\n", "assert", "model", ".", "n_units_p_out", "==", "30", "\n", "assert", "model", ".", "n_units_s_r", "==", "40", "\n", "assert", "model", ".", "n_units_p_r", "==", "50", "\n", "assert", "model", ".", "private_out", "is", "True", "\n", "assert", "model", ".", "weight_decay", "==", "1e-5", "\n", "assert", "model", ".", "penalty_orthogonal", "==", "1e-7", "\n", "assert", "model", ".", "lr", "==", "1e-2", "\n", "assert", "model", ".", "n_iter", "==", "123", "\n", "assert", "model", ".", "batch_size", "==", "234", "\n", "assert", "model", ".", "early_stopping", "is", "True", "\n", "assert", "model", ".", "patience", "==", "5", "\n", "assert", "model", ".", "n_iter_min", "==", "13", "\n", "assert", "model", ".", "n_iter_print", "==", "7", "\n", "assert", "model", ".", "seed", "==", "42", "\n", "assert", "model", ".", "shared_repr", "is", "False", "\n", "assert", "model", ".", "normalize_ortho", "is", "False", "\n", "assert", "model", ".", "mode", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_flextenet.test_flextenet_model_sanity": [[58, 77], ["pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.FlexTENet", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "def", "test_flextenet_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "FlexTENet", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ",", "\n", "batch_size", "=", "1024", ",", "\n", "lr", "=", "1e-3", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "\n", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ",", "n_folds", "=", "2", "\n", ")", "\n", "\n", "print", "(", "f\"Evaluation for model FlexTENet on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_flextenet.test_flextenet_model_predict_api": [[79, 112], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.FlexTENet", "catenets.models.torch.FlexTENet.fit", "catenets.models.torch.FlexTENet.predict", "catenets.models.torch.FlexTENet.predict", "catenets.models.torch.FlexTENet.score", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"shared_repr\"", ",", "[", "False", ",", "True", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"private_out\"", ",", "[", "False", ",", "True", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_units_p_r\"", ",", "[", "50", ",", "150", "]", ")", "\n", "def", "test_flextenet_model_predict_api", "(", "\n", "shared_repr", ":", "bool", ",", "private_out", ":", "bool", ",", "n_units_p_r", ":", "int", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "FlexTENet", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ",", "\n", "batch_size", "=", "1024", ",", "\n", "n_iter", "=", "100", ",", "\n", "lr", "=", "1e-3", ",", "\n", "shared_repr", "=", "shared_repr", ",", "\n", "private_out", "=", "private_out", ",", "\n", "n_units_p_r", "=", "n_units_p_r", ",", "\n", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "out", ",", "p0", ",", "p1", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "True", ")", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p0", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p1", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_snet.test_model_params": [[10, 80], ["catenets.models.torch.SNet", "catenets.models.torch.SNet", "len", "len", "len", "len", "len", "len", "numpy.testing.assert_raises", "numpy.testing.assert_raises", "numpy.testing.assert_raises", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "test_model_params", "(", ")", "->", "None", ":", "\n", "# with propensity estimator", "\n", "    ", "model", "=", "SNet", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_units_out", "=", "2", ",", "\n", "n_layers_r", "=", "3", ",", "\n", "n_units_r", "=", "4", ",", "\n", "weight_decay", "=", "0.5", ",", "\n", "lr", "=", "0.6", ",", "\n", "n_iter", "=", "700", ",", "\n", "batch_size", "=", "80", ",", "\n", "val_split_prop", "=", "0.9", ",", "\n", "n_iter_print", "=", "10", ",", "\n", "seed", "=", "11", ",", "\n", ")", "\n", "\n", "assert", "model", ".", "_reps_c", "is", "not", "None", "\n", "assert", "model", ".", "_reps_o", "is", "not", "None", "\n", "assert", "model", ".", "_reps_mu0", "is", "not", "None", "\n", "assert", "model", ".", "_reps_mu1", "is", "not", "None", "\n", "assert", "model", ".", "_reps_prop", "is", "not", "None", "\n", "assert", "model", ".", "_propensity_estimator", "is", "not", "None", "\n", "assert", "len", "(", "model", ".", "_po_estimators", ")", "==", "2", "\n", "\n", "for", "mod", "in", "model", ".", "_po_estimators", ":", "\n", "        ", "assert", "len", "(", "mod", ".", "model", ")", "==", "5", "# 1 in + NL + 4 * (n_layers_out - 1) + 1 out + NL", "\n", "\n", "", "assert", "len", "(", "model", ".", "_reps_c", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_reps_o", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_reps_mu0", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_reps_mu1", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_propensity_estimator", ".", "model", ")", "==", "8", "\n", "\n", "# remove propensity estimator", "\n", "model", "=", "SNet", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_units_out", "=", "2", ",", "\n", "n_layers_r", "=", "3", ",", "\n", "n_units_r", "=", "4", ",", "\n", "weight_decay", "=", "0.5", ",", "\n", "lr", "=", "0.6", ",", "\n", "n_iter", "=", "700", ",", "\n", "batch_size", "=", "80", ",", "\n", "val_split_prop", "=", "0.9", ",", "\n", "n_iter_print", "=", "10", ",", "\n", "seed", "=", "11", ",", "\n", "with_prop", "=", "False", "\n", ")", "\n", "\n", "with", "np", ".", "testing", ".", "assert_raises", "(", "AttributeError", ")", ":", "\n", "        ", "model", ".", "_reps_c", "\n", "", "with", "np", ".", "testing", ".", "assert_raises", "(", "AttributeError", ")", ":", "\n", "        ", "model", ".", "_reps_prop", "\n", "", "with", "np", ".", "testing", ".", "assert_raises", "(", "AttributeError", ")", ":", "\n", "        ", "model", ".", "_propensity_estimator", "\n", "", "assert", "model", ".", "_reps_o", "is", "not", "None", "\n", "assert", "model", ".", "_reps_mu0", "is", "not", "None", "\n", "assert", "model", ".", "_reps_mu1", "is", "not", "None", "\n", "assert", "len", "(", "model", ".", "_po_estimators", ")", "==", "2", "\n", "\n", "for", "mod", "in", "model", ".", "_po_estimators", ":", "\n", "        ", "assert", "len", "(", "mod", ".", "model", ")", "==", "5", "# 1 in + NL + 4 * (n_layers_out - 1) + 1 out + NL", "\n", "\n", "", "assert", "len", "(", "model", ".", "_reps_o", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_reps_mu0", ".", "model", ")", "==", "9", "\n", "assert", "len", "(", "model", ".", "_reps_mu1", ".", "model", ")", "==", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_snet.test_model_params_nonlin": [[82, 105], ["pytest.mark.parametrize", "catenets.models.torch.SNet", "isinstance"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"nonlin\"", ",", "[", "\"elu\"", ",", "\"relu\"", ",", "\"sigmoid\"", ",", "\"selu\"", ",", "\"leaky_relu\"", "]", ")", "\n", "def", "test_model_params_nonlin", "(", "nonlin", ":", "str", ")", "->", "None", ":", "\n", "    ", "model", "=", "SNet", "(", "2", ",", "nonlin", "=", "nonlin", ")", "\n", "\n", "nonlins", "=", "{", "\n", "\"elu\"", ":", "nn", ".", "ELU", ",", "\n", "\"relu\"", ":", "nn", ".", "ReLU", ",", "\n", "\"sigmoid\"", ":", "nn", ".", "Sigmoid", ",", "\n", "\"selu\"", ":", "nn", ".", "SELU", ",", "\n", "\"leaky_relu\"", ":", "nn", ".", "LeakyReLU", ",", "\n", "}", "\n", "\n", "for", "mod", "in", "[", "\n", "model", ".", "_reps_c", ",", "\n", "model", ".", "_reps_o", ",", "\n", "model", ".", "_reps_mu0", ",", "\n", "model", ".", "_reps_mu1", ",", "\n", "model", ".", "_reps_prop", ",", "\n", "model", ".", "_po_estimators", "[", "0", "]", ",", "\n", "model", ".", "_po_estimators", "[", "1", "]", ",", "\n", "model", ".", "_propensity_estimator", ",", "\n", "]", ":", "\n", "        ", "assert", "isinstance", "(", "mod", ".", "model", "[", "2", "]", ",", "nonlins", "[", "nonlin", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_snet.test_model_sanity": [[107, 142], ["pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SNet", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "catenets.models.torch.SNet", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "len", "len", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "def", "test_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "# with propensity estimator", "\n", "model", "=", "SNet", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ",", "\n", "batch_size", "=", "1024", ",", "\n", "n_iter", "=", "1500", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "\n", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ",", "n_folds", "=", "3", "\n", ")", "\n", "\n", "print", "(", "f\"Evaluation for model SNet on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n", "model", "=", "SNet", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ",", "\n", "batch_size", "=", "1024", ",", "\n", "n_iter", "=", "1500", ",", "\n", "with_prop", "=", "False", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "\n", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ",", "n_folds", "=", "3", "\n", ")", "\n", "\n", "print", "(", "f\"Evaluation for model SNet (with_prop=False) on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_snet.test_model_predict_api": [[144, 163], ["catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SNet", "catenets.models.torch.SNet.fit", "catenets.models.torch.SNet.predict", "catenets.models.torch.SNet.predict", "catenets.models.torch.SNet.score", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_predict_api", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "SNet", "(", "X_train", ".", "shape", "[", "1", "]", ",", "batch_size", "=", "1024", ",", "n_iter", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "out", ",", "p0", ",", "p1", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "True", ")", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p0", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p1", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_representation_net.test_model_params": [[11, 37], ["pytest.mark.parametrize", "snet", "len", "len", "len"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"snet\"", ",", "[", "TARNet", ",", "DragonNet", "]", ")", "\n", "def", "test_model_params", "(", "snet", ":", "Type", ")", "->", "None", ":", "\n", "    ", "model", "=", "snet", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_units_out", "=", "2", ",", "\n", "n_layers_r", "=", "3", ",", "\n", "n_units_r", "=", "4", ",", "\n", "weight_decay", "=", "0.5", ",", "\n", "lr", "=", "0.6", ",", "\n", "n_iter", "=", "700", ",", "\n", "batch_size", "=", "80", ",", "\n", "val_split_prop", "=", "0.9", ",", "\n", "n_iter_print", "=", "10", ",", "\n", "seed", "=", "11", ",", "\n", ")", "\n", "\n", "assert", "model", ".", "_repr_estimator", "is", "not", "None", "\n", "assert", "model", ".", "_propensity_estimator", "is", "not", "None", "\n", "assert", "len", "(", "model", ".", "_po_estimators", ")", "==", "2", "\n", "\n", "for", "mod", "in", "model", ".", "_po_estimators", ":", "\n", "        ", "assert", "len", "(", "mod", ".", "model", ")", "==", "5", "# 1 in + NL + 4 * (n_layers_out - 1) + 1 out + NL", "\n", "\n", "", "assert", "len", "(", "model", ".", "_repr_estimator", ".", "model", ")", "==", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_representation_net.test_model_params_nonlin": [[39, 57], ["pytest.mark.parametrize", "pytest.mark.parametrize", "snet", "isinstance"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"nonlin\"", ",", "[", "\"elu\"", ",", "\"relu\"", ",", "\"sigmoid\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"snet\"", ",", "[", "TARNet", ",", "DragonNet", "]", ")", "\n", "def", "test_model_params_nonlin", "(", "nonlin", ":", "str", ",", "snet", ":", "Type", ")", "->", "None", ":", "\n", "    ", "model", "=", "snet", "(", "2", ",", "nonlin", "=", "nonlin", ")", "\n", "\n", "nonlins", "=", "{", "\n", "\"elu\"", ":", "nn", ".", "ELU", ",", "\n", "\"relu\"", ":", "nn", ".", "ReLU", ",", "\n", "\"sigmoid\"", ":", "nn", ".", "Sigmoid", ",", "\n", "}", "\n", "\n", "for", "mod", "in", "[", "\n", "model", ".", "_repr_estimator", ",", "\n", "model", ".", "_po_estimators", "[", "0", "]", ",", "\n", "model", ".", "_po_estimators", "[", "1", "]", ",", "\n", "model", ".", "_propensity_estimator", ",", "\n", "]", ":", "\n", "        ", "assert", "isinstance", "(", "mod", ".", "model", "[", "2", "]", ",", "nonlins", "[", "nonlin", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_representation_net.test_model_sanity": [[59, 74], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "snet", "catenets.experiment_utils.tester.evaluate_treatments_model", "print"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"snet\"", ",", "[", "TARNet", ",", "DragonNet", "]", ")", "\n", "def", "test_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "snet", ":", "Type", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "snet", "(", "X_train", ".", "shape", "[", "1", "]", ",", "batch_size", "=", "1024", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "\n", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ",", "n_folds", "=", "3", "\n", ")", "\n", "\n", "print", "(", "f\"Evaluation for model {snet} on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_representation_net.test_model_predict_api": [[76, 95], ["catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.TARNet", "catenets.models.torch.TARNet.fit", "catenets.models.torch.TARNet.predict", "catenets.models.torch.TARNet.predict", "catenets.models.torch.TARNet.score", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_predict_api", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "TARNet", "(", "X_train", ".", "shape", "[", "1", "]", ",", "batch_size", "=", "1024", ",", "n_iter", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "out", ",", "p0", ",", "p1", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "True", ")", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p0", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p1", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_nn_model_params": [[15, 53], ["catenets.models.torch.SLearner", "len", "len"], "function", ["None"], ["def", "test_nn_model_params", "(", ")", "->", "None", ":", "\n", "    ", "model", "=", "SLearner", "(", "\n", "2", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_units_out", "=", "2", ",", "\n", "n_units_out_prop", "=", "33", ",", "\n", "n_layers_out_prop", "=", "12", ",", "\n", "weight_decay", "=", "0.5", ",", "\n", "lr", "=", "0.6", ",", "\n", "n_iter", "=", "700", ",", "\n", "batch_size", "=", "80", ",", "\n", "val_split_prop", "=", "0.9", ",", "\n", "n_iter_print", "=", "10", ",", "\n", "seed", "=", "11", ",", "\n", "weighting_strategy", "=", "\"ipw\"", ",", "\n", ")", "\n", "\n", "assert", "model", ".", "_weighting_strategy", "==", "\"ipw\"", "\n", "assert", "model", ".", "_propensity_estimator", "is", "not", "None", "\n", "assert", "model", ".", "_po_estimator", "is", "not", "None", "\n", "\n", "assert", "model", ".", "_po_estimator", ".", "n_iter", "==", "700", "\n", "assert", "model", ".", "_po_estimator", ".", "batch_size", "==", "80", "\n", "assert", "model", ".", "_po_estimator", ".", "n_iter_print", "==", "10", "\n", "assert", "model", ".", "_po_estimator", ".", "seed", "==", "11", "\n", "assert", "model", ".", "_po_estimator", ".", "val_split_prop", "==", "0.9", "\n", "assert", "(", "\n", "len", "(", "model", ".", "_po_estimator", ".", "model", ")", "==", "5", "\n", ")", "# 1 in + NL + 3 * (n_layers_hidden -1) + out + Sigmoid", "\n", "\n", "assert", "model", ".", "_propensity_estimator", ".", "n_iter", "==", "700", "\n", "assert", "model", ".", "_propensity_estimator", ".", "batch_size", "==", "80", "\n", "assert", "model", ".", "_propensity_estimator", ".", "n_iter_print", "==", "10", "\n", "assert", "model", ".", "_propensity_estimator", ".", "seed", "==", "11", "\n", "assert", "model", ".", "_propensity_estimator", ".", "val_split_prop", "==", "0.9", "\n", "assert", "(", "\n", "len", "(", "model", ".", "_propensity_estimator", ".", "model", ")", "==", "38", "\n", ")", "# 1 in + NL + 3 * (n_layers_hidden - 1) + out + Softmax", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_nn_model_params_nonlin": [[56, 68], ["pytest.mark.parametrize", "catenets.models.torch.SLearner", "isinstance"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"nonlin\"", ",", "[", "\"elu\"", ",", "\"relu\"", ",", "\"sigmoid\"", "]", ")", "\n", "def", "test_nn_model_params_nonlin", "(", "nonlin", ":", "str", ")", "->", "None", ":", "\n", "    ", "model", "=", "SLearner", "(", "2", ",", "True", ",", "nonlin", "=", "nonlin", ",", "weighting_strategy", "=", "\"ipw\"", ")", "\n", "\n", "nonlins", "=", "{", "\n", "\"elu\"", ":", "nn", ".", "ELU", ",", "\n", "\"relu\"", ":", "nn", ".", "ReLU", ",", "\n", "\"sigmoid\"", ":", "nn", ".", "Sigmoid", ",", "\n", "}", "\n", "\n", "for", "mod", "in", "[", "model", ".", "_propensity_estimator", ",", "model", ".", "_po_estimator", "]", ":", "\n", "        ", "assert", "isinstance", "(", "mod", ".", "model", "[", "2", "]", ",", "nonlins", "[", "nonlin", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_nn_model_sanity": [[70, 91], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"weighting_strategy\"", ",", "[", "\"ipw\"", ",", "None", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "def", "test_nn_model_sanity", "(", "\n", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "weighting_strategy", ":", "Optional", "[", "str", "]", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "SLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ",", "\n", "weighting_strategy", "=", "weighting_strategy", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.SLearner(NN)(weighting_strategy={weighting_strategy}) on {dataset} = {score['str']}\"", "\n", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_sklearn_model_sanity_binary_output": [[93, 144], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "xgboost.XGBClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.linear_model.LogisticRegression"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"po_estimator\"", ",", "\n", "[", "\n", "XGBClassifier", "(", "\n", "n_estimators", "=", "100", ",", "\n", "reg_lambda", "=", "1e-3", ",", "\n", "reg_alpha", "=", "1e-3", ",", "\n", "colsample_bytree", "=", "0.1", ",", "\n", "colsample_bynode", "=", "0.1", ",", "\n", "colsample_bylevel", "=", "0.1", ",", "\n", "max_depth", "=", "6", ",", "\n", "tree_method", "=", "\"hist\"", ",", "\n", "learning_rate", "=", "1e-2", ",", "\n", "min_child_weight", "=", "0", ",", "\n", "max_bin", "=", "256", ",", "\n", "random_state", "=", "0", ",", "\n", "eval_metric", "=", "\"logloss\"", ",", "\n", "use_label_encoder", "=", "False", ",", "\n", ")", ",", "\n", "RandomForestClassifier", "(", "\n", "n_estimators", "=", "100", ",", "\n", "max_depth", "=", "6", ",", "\n", ")", ",", "\n", "LogisticRegression", "(", "\n", "C", "=", "1.0", ",", "\n", "solver", "=", "\"sag\"", ",", "\n", "max_iter", "=", "10000", ",", "\n", "penalty", "=", "\"l2\"", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_sklearn_model_sanity_binary_output", "(", "\n", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "po_estimator", ":", "Any", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "SLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "True", ",", "\n", "po_estimator", "=", "po_estimator", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.SLearner with {po_estimator.__class__} on {dataset} = {score['str']}\"", "\n", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_slearner_sklearn_model_ihdp": [[146, 174], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "sklearn.ensemble.RandomForestRegressor"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"exp\"", ",", "[", "1", ",", "10", ",", "40", ",", "50", ",", "99", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"po_estimator\"", ",", "\n", "[", "\n", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "100", ",", "\n", "max_depth", "=", "6", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_slearner_sklearn_model_ihdp", "(", "po_estimator", ":", "Any", ",", "exp", ":", "int", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\n", "\"ihdp\"", ",", "exp", "=", "exp", ",", "rescale", "=", "True", "\n", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "SLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "False", ",", "\n", "po_estimator", "=", "po_estimator", ",", "\n", ")", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.SLearner with {po_estimator.__class__} on ihdp[{exp}] = {score['str']}\"", "\n", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "1.5", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_slearner.test_model_predict_api": [[176, 195], ["catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.SLearner", "catenets.models.torch.SLearner.fit", "catenets.models.torch.SLearner.predict", "catenets.models.torch.SLearner.predict", "catenets.models.torch.SLearner.score", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_predict_api", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "SLearner", "(", "X_train", ".", "shape", "[", "1", "]", ",", "binary_y", "=", "False", ",", "batch_size", "=", "1024", ",", "n_iter", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "out", ",", "p0", ",", "p1", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "True", ")", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p0", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p1", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_nn_model_params": [[15, 39], ["catenets.models.torch.TLearner", "len", "len"], "function", ["None"], ["def", "test_nn_model_params", "(", ")", "->", "None", ":", "\n", "    ", "model", "=", "TLearner", "(", "\n", "2", ",", "\n", "True", ",", "\n", "n_layers_out", "=", "1", ",", "\n", "n_units_out", "=", "2", ",", "\n", "weight_decay", "=", "0.5", ",", "\n", "lr", "=", "0.6", ",", "\n", "n_iter", "=", "700", ",", "\n", "batch_size", "=", "80", ",", "\n", "val_split_prop", "=", "0.9", ",", "\n", "n_iter_print", "=", "10", ",", "\n", "seed", "=", "11", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "model", ".", "_plug_in", ")", "==", "2", "\n", "\n", "for", "mod", "in", "model", ".", "_plug_in", ":", "\n", "        ", "assert", "mod", ".", "n_iter", "==", "700", "\n", "assert", "mod", ".", "batch_size", "==", "80", "\n", "assert", "mod", ".", "n_iter_print", "==", "10", "\n", "assert", "mod", ".", "seed", "==", "11", "\n", "assert", "mod", ".", "val_split_prop", "==", "0.9", "\n", "assert", "len", "(", "mod", ".", "model", ")", "==", "5", "# 2 in + NL + 3 * (n_layers_hidden - 1) + 2 out", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_nn_model_params_nonlin": [[41, 55], ["pytest.mark.parametrize", "catenets.models.torch.TLearner", "len", "isinstance"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"nonlin\"", ",", "[", "\"elu\"", ",", "\"relu\"", ",", "\"sigmoid\"", "]", ")", "\n", "def", "test_nn_model_params_nonlin", "(", "nonlin", ":", "str", ")", "->", "None", ":", "\n", "    ", "model", "=", "TLearner", "(", "2", ",", "True", ",", "nonlin", "=", "nonlin", ")", "\n", "\n", "assert", "len", "(", "model", ".", "_plug_in", ")", "==", "2", "\n", "\n", "nonlins", "=", "{", "\n", "\"elu\"", ":", "nn", ".", "ELU", ",", "\n", "\"relu\"", ":", "nn", ".", "ReLU", ",", "\n", "\"sigmoid\"", ":", "nn", ".", "Sigmoid", ",", "\n", "}", "\n", "\n", "for", "mod", "in", "model", ".", "_plug_in", ":", "\n", "        ", "assert", "isinstance", "(", "mod", ".", "model", "[", "2", "]", ",", "nonlins", "[", "nonlin", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_nn_model_sanity": [[57, 69], ["pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.TLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "def", "test_nn_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "TLearner", "(", "X_train", ".", "shape", "[", "1", "]", ",", "binary_y", "=", "(", "len", "(", "np", ".", "unique", "(", "Y_train", ")", ")", "==", "2", ")", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "f\"Evaluation for model torch.TLearner(NN) on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_sklearn_model_sanity_binary_output": [[71, 122], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.TLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "xgboost.XGBClassifier", "sklearn.ensemble.RandomForestClassifier", "sklearn.linear_model.LogisticRegression"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"po_estimator\"", ",", "\n", "[", "\n", "XGBClassifier", "(", "\n", "n_estimators", "=", "100", ",", "\n", "reg_lambda", "=", "1e-3", ",", "\n", "reg_alpha", "=", "1e-3", ",", "\n", "colsample_bytree", "=", "0.1", ",", "\n", "colsample_bynode", "=", "0.1", ",", "\n", "colsample_bylevel", "=", "0.1", ",", "\n", "max_depth", "=", "6", ",", "\n", "tree_method", "=", "\"hist\"", ",", "\n", "learning_rate", "=", "1e-2", ",", "\n", "min_child_weight", "=", "0", ",", "\n", "max_bin", "=", "256", ",", "\n", "random_state", "=", "0", ",", "\n", "eval_metric", "=", "\"logloss\"", ",", "\n", "use_label_encoder", "=", "False", ",", "\n", ")", ",", "\n", "RandomForestClassifier", "(", "\n", "n_estimators", "=", "100", ",", "\n", "max_depth", "=", "6", ",", "\n", ")", ",", "\n", "LogisticRegression", "(", "\n", "C", "=", "1.0", ",", "\n", "solver", "=", "\"sag\"", ",", "\n", "max_iter", "=", "10000", ",", "\n", "penalty", "=", "\"l2\"", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_sklearn_model_sanity_binary_output", "(", "\n", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "po_estimator", ":", "Any", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "TLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "True", ",", "\n", "po_estimator", "=", "po_estimator", ",", "\n", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.TLearner with {po_estimator.__class__} on {dataset} = {score['str']}\"", "\n", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_sklearn_model_sanity_regression": [[124, 167], ["pytest.mark.parametrize", "pytest.mark.parametrize", "catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.TLearner", "catenets.experiment_utils.tester.evaluate_treatments_model", "print", "xgboost.XGBRegressor", "sklearn.ensemble.RandomForestRegressor"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"ihdp\"", ",", "1.5", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"po_estimator\"", ",", "\n", "[", "\n", "XGBRegressor", "(", "\n", "n_estimators", "=", "1000", ",", "\n", "reg_lambda", "=", "1e-3", ",", "\n", "reg_alpha", "=", "1e-3", ",", "\n", "colsample_bytree", "=", "0.1", ",", "\n", "colsample_bynode", "=", "0.1", ",", "\n", "colsample_bylevel", "=", "0.1", ",", "\n", "max_depth", "=", "7", ",", "\n", "tree_method", "=", "\"hist\"", ",", "\n", "learning_rate", "=", "1e-2", ",", "\n", "min_child_weight", "=", "0", ",", "\n", "max_bin", "=", "256", ",", "\n", "random_state", "=", "0", ",", "\n", "eval_metric", "=", "\"logloss\"", ",", "\n", ")", ",", "\n", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "100", ",", "\n", "max_depth", "=", "6", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_sklearn_model_sanity_regression", "(", "\n", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "po_estimator", ":", "Any", "\n", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "TLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "False", ",", "\n", "po_estimator", "=", "po_estimator", ",", "\n", ")", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "\n", "print", "(", "\n", "f\"Evaluation for model torch.TLearner with {po_estimator.__class__ } on {dataset} = {score['str']}\"", "\n", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.test_torch_tlearner.test_model_predict_api": [[169, 192], ["catenets.datasets.load", "W_train.ravel.ravel", "catenets.models.torch.TLearner", "catenets.models.torch.TLearner.fit", "catenets.models.torch.TLearner.predict", "catenets.models.torch.TLearner.predict", "catenets.models.torch.TLearner.score", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_predict_api", "(", ")", "->", "None", ":", "\n", "    ", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "W_train", "=", "W_train", ".", "ravel", "(", ")", "\n", "\n", "model", "=", "TLearner", "(", "\n", "X_train", ".", "shape", "[", "1", "]", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_iter", "=", "100", ",", "\n", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "W_train", ")", "\n", "\n", "out", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "out", ",", "p0", ",", "p1", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "True", ")", "\n", "assert", "len", "(", "out", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p0", ")", "==", "len", "(", "X_test", ")", "\n", "assert", "len", "(", "p1", ")", "==", "len", "(", "X_test", ")", "\n", "\n", "score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "score", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_importance_weights": [[26, 52], ["ValueError", "weight_utils.compute_ipw", "weight_utils.compute_trunc_ipw", "weight_utils.compute_overlap_weights", "weight_utils.compute_matching_weights"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_ipw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_trunc_ipw", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_overlap_weights", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_matching_weights"], ["def", "compute_importance_weights", "(", "\n", "propensity", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "weighting_strategy", ":", "str", ",", "\n", "weight_args", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "weighting_strategy", "not", "in", "ALL_WEIGHTING_STRATEGIES", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"weighting_strategy should be in {ALL_WEIGHTING_STRATEGIES}\"", "\n", "f\"You passed {weighting_strategy}\"", "\n", ")", "\n", "", "if", "weight_args", "is", "None", ":", "\n", "        ", "weight_args", "=", "{", "}", "\n", "\n", "", "if", "weighting_strategy", "==", "PROP", ":", "\n", "        ", "return", "propensity", "\n", "", "elif", "weighting_strategy", "==", "ONE_MINUS_PROP", ":", "\n", "        ", "return", "1", "-", "propensity", "\n", "", "elif", "weighting_strategy", "==", "IPW_NAME", ":", "\n", "        ", "return", "compute_ipw", "(", "propensity", ",", "w", ")", "\n", "", "elif", "weighting_strategy", "==", "TRUNC_IPW_NAME", ":", "\n", "        ", "return", "compute_trunc_ipw", "(", "propensity", ",", "w", ",", "**", "weight_args", ")", "\n", "", "elif", "weighting_strategy", "==", "OVERLAP_NAME", ":", "\n", "        ", "return", "compute_overlap_weights", "(", "propensity", ",", "w", ")", "\n", "", "elif", "weighting_strategy", "==", "MATCHING_NAME", ":", "\n", "        ", "return", "compute_matching_weights", "(", "propensity", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_ipw": [[54, 57], ["torch.mean"], "function", ["None"], ["", "", "def", "compute_ipw", "(", "propensity", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "p_hat", "=", "torch", ".", "mean", "(", "w", ")", "\n", "return", "w", "*", "p_hat", "/", "propensity", "+", "(", "1", "-", "w", ")", "*", "(", "1", "-", "p_hat", ")", "/", "(", "1", "-", "propensity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_trunc_ipw": [[59, 64], ["weight_utils.compute_ipw", "torch.where"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_ipw"], ["", "def", "compute_trunc_ipw", "(", "\n", "propensity", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ",", "cutoff", ":", "float", "=", "0.05", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "ipw", "=", "compute_ipw", "(", "propensity", ",", "w", ")", "\n", "return", "torch", ".", "where", "(", "(", "propensity", ">", "cutoff", ")", "&", "(", "propensity", "<", "1", "-", "cutoff", ")", ",", "ipw", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_matching_weights": [[67, 70], ["weight_utils.compute_ipw", "torch.minimum"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_ipw"], ["", "def", "compute_matching_weights", "(", "propensity", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "ipw", "=", "compute_ipw", "(", "propensity", ",", "w", ")", "\n", "return", "torch", ".", "minimum", "(", "ipw", ",", "1", "-", "ipw", ")", "*", "ipw", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_overlap_weights": [[72, 75], ["weight_utils.compute_ipw"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.weight_utils.compute_ipw"], ["", "def", "compute_overlap_weights", "(", "propensity", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "ipw", "=", "compute_ipw", "(", "propensity", ",", "w", ")", "\n", "return", "propensity", "*", "(", "1", "-", "propensity", ")", "*", "ipw", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.dr_transformation_cate": [[10, 45], ["torch.full"], "function", ["None"], ["def", "dr_transformation_cate", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Transforms data to efficient influence function/aipw pseudo-outcome for CATE estimation\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        The treatment propensity, estimated or known. Can be None, then p=0.5 is assumed\n    mu_0: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group\n    Returns\n    -------\n    d_hat:\n        EIF transformation for CATE\n    \"\"\"", "\n", "if", "p", "is", "None", ":", "\n", "# assume equal", "\n", "        ", "p", "=", "torch", ".", "full", "(", "y", ".", "shape", ",", "0.5", ")", "\n", "\n", "", "EPS", "=", "1e-7", "\n", "w_1", "=", "w", "/", "(", "p", "+", "EPS", ")", "\n", "w_0", "=", "(", "1", "-", "w", ")", "/", "(", "EPS", "+", "1", "-", "p", ")", "\n", "return", "(", "w_1", "-", "w_0", ")", "*", "y", "+", "(", "(", "1", "-", "w_1", ")", "*", "mu_1", "-", "(", "1", "-", "w_0", ")", "*", "mu_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.pw_transformation_cate": [[47, 77], ["torch.full"], "function", ["None"], ["", "def", "pw_transformation_cate", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "mu_0", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "mu_1", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Transform data to Horvitz-Thompson transformation for CATE\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        The treatment propensity, estimated or known. Can be None, then p=0.5 is assumed\n    mu_0: array-like of shape (n_samples,)\n         Estimated or known potential outcome mean of the control group. Placeholder, not used.\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group. Placeholder, not used.\n    Returns\n    -------\n    res: array-like of shape (n_samples,)\n        Horvitz-Thompson transformed data\n    \"\"\"", "\n", "if", "p", "is", "None", ":", "\n", "# assume equal propensities", "\n", "        ", "p", "=", "torch", ".", "full", "(", "y", ".", "shape", ",", "0.5", ")", "\n", "", "return", "(", "w", "/", "p", "-", "(", "1", "-", "w", ")", "/", "(", "1", "-", "p", ")", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.ra_transformation_cate": [[79, 108], ["None"], "function", ["None"], ["", "def", "ra_transformation_cate", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Transform data to regression adjustment for CATE\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        Placeholder, not used. The treatment propensity, estimated or known.\n    mu_0: array-like of shape (n_samples,)\n         Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group\n\n    Returns\n    -------\n    res: array-like of shape (n_samples,)\n        Regression adjusted transformation\n    \"\"\"", "\n", "return", "w", "*", "(", "y", "-", "mu_0", ")", "+", "(", "1", "-", "w", ")", "*", "(", "mu_1", "-", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.transformations.u_transformation_cate": [[110, 139], ["torch.full"], "function", ["None"], ["", "def", "u_transformation_cate", "(", "\n", "y", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ",", "p", ":", "torch", ".", "Tensor", ",", "mu", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Transform data to U-transformation (described in Kuenzel et al, 2019, Nie & Wager, 2017)\n    which underlies both R-learner and U-learner\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        Placeholder, not used. The treatment propensity, estimated or known.\n    mu_0: array-like of shape (n_samples,)\n         Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group\n\n    Returns\n    -------\n    res: array-like of shape (n_samples,)\n        Regression adjusted transformation\n    \"\"\"", "\n", "if", "p", "is", "None", ":", "\n", "# assume equal propensities", "\n", "        ", "p", "=", "torch", ".", "full", "(", "y", ".", "shape", ",", "0.5", ")", "\n", "", "return", "(", "y", "-", "mu", ")", "/", "(", "w", "-", "p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.make_val_split": [[19, 74], ["X.cpu.cpu", "y.cpu.cpu", "w.cpu.cpu", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "X_t.to", "y_t.to", "w_t.to", "X_val.to", "y_val.to", "w_val.to", "X_t.to", "y_t.to", "X_val.to", "y_val.to"], "function", ["None"], ["def", "make_val_split", "(", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "stratify_w", ":", "bool", "=", "True", ",", "\n", ")", "->", "Any", ":", "\n", "    ", "if", "val_split_prop", "==", "0", ":", "\n", "# return original data", "\n", "        ", "if", "w", "is", "None", ":", "\n", "            ", "return", "X", ",", "y", ",", "X", ",", "y", ",", "TRAIN_STRING", "\n", "\n", "", "return", "X", ",", "y", ",", "w", ",", "X", ",", "y", ",", "w", ",", "TRAIN_STRING", "\n", "\n", "", "X", "=", "X", ".", "cpu", "(", ")", "\n", "y", "=", "y", ".", "cpu", "(", ")", "\n", "# make actual split", "\n", "if", "w", "is", "None", ":", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", "=", "train_test_split", "(", "\n", "X", ",", "y", ",", "test_size", "=", "val_split_prop", ",", "random_state", "=", "seed", ",", "shuffle", "=", "True", "\n", ")", "\n", "return", "(", "\n", "X_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "X_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "VALIDATION_STRING", ",", "\n", ")", "\n", "\n", "", "w", "=", "w", ".", "cpu", "(", ")", "\n", "if", "stratify_w", ":", "\n", "# split to stratify by group", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", ",", "w_t", ",", "w_val", "=", "train_test_split", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "test_size", "=", "val_split_prop", ",", "\n", "random_state", "=", "seed", ",", "\n", "stratify", "=", "w", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", ",", "w_t", ",", "w_val", "=", "train_test_split", "(", "\n", "X", ",", "y", ",", "w", ",", "test_size", "=", "val_split_prop", ",", "random_state", "=", "seed", ",", "shuffle", "=", "True", "\n", ")", "\n", "\n", "", "return", "(", "\n", "X_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "w_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "X_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "w_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "VALIDATION_STRING", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.train_wrapper": [[77, 91], ["hasattr", "catenets.debug", "estimator.train", "hasattr", "catenets.debug", "estimator.fit", "NotImplementedError", "X.detach().numpy", "y.detach().numpy", "X.detach", "y.detach"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.train", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit"], ["", "def", "train_wrapper", "(", "\n", "estimator", ":", "Any", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "hasattr", "(", "estimator", ",", "\"train\"", ")", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Train PyTorch network {estimator}\"", ")", "\n", "estimator", ".", "train", "(", "X", ",", "y", ",", "**", "kwargs", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"fit\"", ")", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Train sklearn estimator {estimator}\"", ")", "\n", "estimator", ".", "fit", "(", "X", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Invalid estimator for the {estimator}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.model_utils.predict_wrapper": [[93, 108], ["hasattr", "estimator", "hasattr", "X.detach().numpy", "torch.Tensor", "hasattr", "estimator.predict_proba", "X.detach().numpy", "estimator.predict", "torch.Tensor", "NotImplementedError", "X.detach", "X.detach"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict"], ["", "", "def", "predict_wrapper", "(", "estimator", ":", "Any", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "hasattr", "(", "estimator", ",", "\"forward\"", ")", ":", "\n", "        ", "return", "estimator", "(", "X", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"predict_proba\"", ")", ":", "\n", "        ", "X_np", "=", "X", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "no_event_proba", "=", "estimator", ".", "predict_proba", "(", "X_np", ")", "[", ":", ",", "0", "]", "# no event probability", "\n", "\n", "return", "torch", ".", "Tensor", "(", "no_event_proba", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"predict\"", ")", ":", "\n", "        ", "X_np", "=", "X", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "no_event_proba", "=", "estimator", ".", "predict", "(", "X_np", ")", "\n", "\n", "return", "torch", ".", "Tensor", "(", "no_event_proba", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Invalid estimator for the {estimator}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.decorators.check_input_train": [[9, 30], ["torch.Tensor", "func", "ValueError"], "function", ["None"], ["def", "check_input_train", "(", "func", ":", "Callable", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"Decorator used for checking training params.\n\n    Args:\n        func: the function to be benchmarked.\n\n    Returns:\n        Callable: the decorator\n\n    \"\"\"", "\n", "\n", "def", "wrapper", "(", "self", ":", "Any", ",", "X", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", ")", "->", "Any", ":", "\n", "\n", "        ", "w", "=", "torch", ".", "Tensor", "(", "w", ")", "\n", "\n", "if", "not", "(", "(", "w", "==", "0", ")", "|", "(", "w", "==", "1", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"W should be binary\"", ")", "\n", "\n", "", "return", "func", "(", "self", ",", "X", ",", "y", ",", "w", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.utils.decorators.benchmark": [[32, 52], ["time.time", "func", "time.time", "catenets.debug", "round"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug"], ["", "def", "benchmark", "(", "func", ":", "Callable", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"Decorator used for function duration benchmarking. It is active only with DEBUG loglevel.\n\n    Args:\n        func: the function to be benchmarked.\n\n    Returns:\n        Callable: the decorator\n\n    \"\"\"", "\n", "\n", "def", "wrapper", "(", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "res", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "log", ".", "debug", "(", "\"{} took {} seconds\"", ".", "format", "(", "func", ".", "__qualname__", ",", "round", "(", "end", "-", "start", ",", "4", ")", ")", ")", "\n", "return", "res", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score": [[104, 130], ["catenets.models.jax.model_utils.check_X_is_np", "catenets.models.jax.model_utils.check_X_is_np", "base.BaseCATENet.predict", "jax.sqrt", "len", "len", "ValueError", "ValueError", "jax.mean"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict"], ["def", "get_all_snets", "(", ")", "->", "Dict", ":", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_SNETS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "\n", "\n", "", "def", "get_all_pseudoout_models", "(", ")", "->", "Dict", ":", "# DR, RA, PW learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "trans", "in", "ALL_PSEUDOOUT_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "\n", "{", "PSEUDOOUT_NAME", "+", "SEP", "+", "trans", ":", "PseudoOutcomeNet", "(", "transformation", "=", "trans", ")", "}", "\n", ")", "\n", "", "return", "model_dict", "\n", "\n", "\n", "", "def", "get_all_twostep_models", "(", ")", "->", "Dict", ":", "# DR, RA, R, X learner", "\n", "    ", "model_dict", "=", "{", "}", "\n", "for", "name", "in", "ALL_TWOSTEP_MODELS", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "name", ":", "get_catenet", "(", "name", ")", "(", ")", "}", ")", "\n", "", "return", "model_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._get_train_function": [[131, 134], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.fit": [[135, 169], ["catenets.models.jax.model_utils.check_X_is_np", "base.BaseCATENet._check_inputs", "base.BaseCATENet._get_train_function", "base.BaseCATENet.get_params", "base.BaseCATENet.", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._check_inputs", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_train_function"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._get_predict_function": [[170, 173], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.predict": [[174, 202], ["catenets.models.jax.model_utils.check_X_is_np", "base.BaseCATENet._get_predict_function", "base.BaseCATENet."], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_predict_function"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._check_inputs": [[204, 212], ["ValueError", "ValueError", "numpy.sum", "numpy.sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.fit_and_select_params": [[213, 272], ["catenets.models.jax.model_utils.check_X_is_np", "base.BaseCATENet._check_inputs", "sklearn.model_selection.ParameterGrid", "base.BaseCATENet.get_params", "base.BaseCATENet._get_train_function", "param_settings.extend", "jax.array().argmin", "base.BaseCATENet.set_params", "ValueError", "catenets.debug", "models.append", "losses.append", "base.BaseCATENet.", "base.BaseCATENet.", "jax.array", "base.BaseCATENet.items", "param_setting.keys", "str", "param_setting.items"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._check_inputs", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_train_function", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock": [[40, 62], ["range", "jax.experimental.stax.serial", "jax.experimental.stax.Dense", "jax.experimental.stax.Dense", "ValueError"], "function", ["None"], ["    ", "preds", "=", "predict_fun", "(", "params", ",", "inputs", ")", "\n", "return", "jnp", ".", "mean", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "\n", "\n", "\n", "", "def", "eval_mse", "(", "preds", ":", "jnp", ".", "ndarray", ",", "targets", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "preds", "=", "check_shape_1d_data", "(", "preds", ")", "\n", "targets", "=", "check_shape_1d_data", "(", "targets", ")", "\n", "return", "jnp", ".", "mean", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "\n", "\n", "\n", "", "def", "eval_root_mse", "(", "cate_pred", ":", "jnp", ".", "ndarray", ",", "cate_true", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "cate_true", "=", "check_shape_1d_data", "(", "cate_true", ")", "\n", "cate_pred", "=", "check_shape_1d_data", "(", "cate_pred", ")", "\n", "return", "jnp", ".", "sqrt", "(", "eval_mse", "(", "cate_pred", ",", "cate_true", ")", ")", "\n", "\n", "\n", "", "def", "eval_abs_error_ate", "(", "cate_pred", ":", "jnp", ".", "ndarray", ",", "cate_true", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "cate_true", "=", "check_shape_1d_data", "(", "cate_true", ")", "\n", "cate_pred", "=", "check_shape_1d_data", "(", "cate_pred", ")", "\n", "return", "jnp", ".", "abs", "(", "jnp", ".", "mean", "(", "cate_pred", ")", "-", "jnp", ".", "mean", "(", "cate_true", ")", ")", "\n", "\n", "\n", "", "def", "get_model_set", "(", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead": [[64, 97], ["range", "range", "jax.experimental.stax.serial", "jax.experimental.stax.serial", "jax.experimental.stax.Dense", "jax.experimental.stax.Dense", "jax.experimental.stax.Dense", "jax.experimental.stax.Dense", "ValueError"], "function", ["None"], [")", "->", "Dict", ":", "\n", "    ", "\"\"\"Helper function to retrieve a set of models\"\"\"", "\n", "# get model selection", "\n", "if", "type", "(", "model_selection", ")", "is", "str", ":", "\n", "        ", "if", "model_selection", "==", "\"snet\"", ":", "\n", "            ", "models", "=", "get_all_snets", "(", ")", "\n", "", "elif", "model_selection", "==", "\"pseudo\"", ":", "\n", "            ", "models", "=", "get_all_pseudoout_models", "(", ")", "\n", "", "elif", "model_selection", "==", "\"twostep\"", ":", "\n", "            ", "models", "=", "get_all_twostep_models", "(", ")", "\n", "", "elif", "model_selection", "==", "\"all\"", ":", "\n", "            ", "models", "=", "dict", "(", "**", "get_all_snets", "(", ")", ",", "**", "get_all_pseudoout_models", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "models", "=", "{", "model_selection", ":", "get_catenet", "(", "model_selection", ")", "(", ")", "}", "# type: ignore", "\n", "", "", "elif", "type", "(", "model_selection", ")", "is", "list", ":", "\n", "        ", "models", "=", "{", "}", "\n", "for", "model", "in", "model_selection", ":", "\n", "            ", "models", ".", "update", "(", "{", "model", ":", "get_catenet", "(", "model", ")", "(", ")", "}", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"model_selection should be string or list.\"", ")", "\n", "\n", "# set hyperparameters", "\n", "", "if", "model_params", "is", "not", "None", ":", "\n", "        ", "for", "model", "in", "models", ".", "values", "(", ")", ":", "\n", "            ", "existing_params", "=", "model", ".", "get_params", "(", ")", "\n", "new_params", "=", "{", "\n", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "model_params", ".", "items", "(", ")", "\n", "if", "key", "in", "existing_params", ".", "keys", "(", ")", "\n", "}", "\n", "model", ".", "set_params", "(", "**", "new_params", ")", "\n", "\n", "", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only": [[274, 439], ["catenets.models.jax.model_utils.check_shape_1d_data", "jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "base.OutputHead", "jax.experimental.optimizers.adam", "init_fun", "opt_init", "numpy.arange", "range", "get_params", "get_params", "opt_update", "int", "numpy.random.shuffle", "range", "base.train_output_net_only.loss"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet1.__init__": [[91, 139], ["None"], "methods", ["None"], ["n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "weighting_strategy", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "penalty_disc", ":", "float", "=", "0", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "prop_loss_multiplier", ":", "float", "=", "1", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicDragonNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "penalty_disc", "=", "penalty_disc", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "prop_loss_multiplier", "=", "prop_loss_multiplier", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "_repr_estimator", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "self", ".", "_po_estimators", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"{name}_po_estimator_{idx}\"", ",", "\n", "n_units_r", ",", "\n", "binary_y", "=", "binary_y", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet1._get_train_function": [[140, 142], ["None"], "methods", ["None"], ["n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet1._get_predict_function": [[143, 145], ["None"], "methods", ["None"], ["batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.TARNet.__init__": [[150, 193], ["representation_nets.SNet1.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "po_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", "discrepancy", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", "\n", "po_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "t_true", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "y0_pred", "=", "po_pred", "[", ":", ",", "0", "]", "\n", "y1_pred", "=", "po_pred", "[", ":", ",", "1", "]", "\n", "\n", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "def", "prop_loss", "(", "t_pred", ":", "torch", ".", "Tensor", ",", "t_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "t_pred", "=", "t_pred", "+", "EPS", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "t_pred", ",", "t_true", ")", "\n", "\n", "", "return", "(", "\n", "po_loss", "(", "po_pred", ",", "y_true", ",", "t_true", ")", "+", "\n", "self", ".", "prop_loss_multiplier", "*", "prop_loss", "(", "t_pred", ",", "t_true", ")", "+", "discrepancy", "\n", ")", "\n", "\n", "", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"BasicDragonNet\"", ":", "\n", "        "]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet2.__init__": [[249, 297], ["None"], "methods", ["None"], ["\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "po_preds", ",", "prop_preds", ",", "discr", "=", "self", ".", "_step", "(", "X_val", ",", "w_val", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "po_preds", ",", "prop_preds", ",", "y_val", ",", "w_val", ",", "discr", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[{self.name}] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "...", "\n", "\n", "", "def", "_forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", "\n", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet2._get_train_function": [[298, 300], ["None"], "methods", ["None"], ["\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "_repr_estimator", ".", "model", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.SNet2._get_predict_function": [[301, 303], ["None"], "methods", ["None"], ["self", ".", "_po_estimators", "[", "0", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_po_estimators", "[", "1", "]", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.DragonNet.__init__": [[308, 354], ["representation_nets.SNet2.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["\n", "outcome", "=", "y1_preds", "-", "y0_preds", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y0_preds", ",", "y1_preds", "\n", "\n", "", "return", "outcome", "\n", "\n", "", "def", "_maximum_mean_discrepancy", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "w", ".", "shape", "[", "0", "]", "\n", "n_t", "=", "torch", ".", "sum", "(", "w", ")", "\n", "\n", "X", "=", "X", "/", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "X", ",", "dim", "=", "0", ")", "+", "EPS", ")", "\n", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "mean_control", "=", "(", "n", "/", "(", "n", "-", "n_t", ")", ")", "*", "torch", ".", "mean", "(", "(", "1", "-", "w", ")", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "mean_treated", "=", "(", "n", "/", "n_t", ")", "*", "torch", ".", "mean", "(", "w", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "\n", "return", "self", ".", "penalty_disc", "*", "torch", ".", "sum", "(", "(", "mean_treated", "-", "mean_control", ")", "**", "2", ")", "\n", "\n", "\n", "", "", "class", "TARNet", "(", "BasicDragonNet", ")", ":", "\n", "    ", "\"\"\"\n    Class implements Shalit et al (2017)'s TARNet\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "0", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "penalty_disc", ":", "float", "=", "DEFAULT_PENALTY_DISC", ",", "\n", "batch_norm", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "propensity_estimator", "=", "PropensityNet", "(", "\n", "\"tarnet_propensity_estimator\"", ",", "\n", "n_unit_in", ",", "\n", "2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.mmd2_lin": [[358, 371], ["jax.sum", "jax.sum", "jax.sqrt", "jax.mean", "jax.mean", "jax.var"], "function", ["None"], ["dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "super", "(", "TARNet", ",", "self", ")", ".", "__init__", "(", "\n", "\"TARNet\"", ",", "\n", "n_unit_in", ",", "\n", "propensity_estimator", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "penalty_disc", "=", "penalty_disc", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "**", "kwargs", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.predict_snet1": [[373, 402], ["predict_fun_repr", "predict_fun_head", "predict_fun_head", "NotImplementedError"], "function", ["None"], ["self", ".", "prop_loss_multiplier", "=", "0", "\n", "\n", "", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "po_preds", "=", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "X", ")", "\n", "\n", "return", "po_preds", ",", "prop_preds", ",", "self", ".", "_maximum_mean_discrepancy", "(", "repr_preds", ",", "w", ")", "\n", "\n", "\n", "", "", "class", "DragonNet", "(", "BasicDragonNet", ")", ":", "\n", "    ", "\"\"\"\n    Class implements a variant based on Shi et al (2019)'s DragonNet.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "0", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.train_snet1": [[404, 629], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "representation_nets.train_snet1.init_fun_snet1"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], ["dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "propensity_estimator", "=", "PropensityNet", "(", "\n", "\"dragonnet_propensity_estimator\"", ",", "\n", "n_units_r", ",", "\n", "2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "super", "(", "DragonNet", ",", "self", ")", ".", "__init__", "(", "\n", "\"DragonNet\"", ",", "\n", "n_unit_in", ",", "\n", "propensity_estimator", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "repr_preds", "=", "self", ".", "_repr_estimator", "(", "X", ")", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "repr_preds", ")", ".", "squeeze", "(", ")", "\n", "\n", "po_preds", "=", "torch", ".", "vstack", "(", "(", "y0_preds", ",", "y1_preds", ")", ")", ".", "T", "\n", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "repr_preds", ")", "\n", "\n", "return", "po_preds", ",", "prop_preds", ",", "self", ".", "_maximum_mean_discrepancy", "(", "repr_preds", ",", "w", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.train_snet2": [[632, 896], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.OutputHead", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "representation_nets.train_snet2.init_fun_snet2"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.representation_nets.predict_snet2": [[899, 938], ["predict_fun_repr", "predict_fun_head", "predict_fun_head", "predict_fun_prop"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data": [[17, 25], ["len", "y.reshape"], "function", ["None"], ["\n", "\n", "def", "make_val_split", "(", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "stratify_w", ":", "bool", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np": [[27, 30], ["jax.asarray"], "function", ["None"], ["    ", "if", "val_split_prop", "==", "0", ":", "\n", "# return original data", "\n", "        ", "if", "w", "is", "None", ":", "\n", "            ", "return", "X", ",", "y", ",", "X", ",", "y", ",", "TRAIN_STRING", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split": [[32, 71], ["sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split"], "function", ["None"], ["", "return", "X", ",", "y", ",", "w", ",", "X", ",", "y", ",", "w", ",", "TRAIN_STRING", "\n", "\n", "", "X", "=", "X", ".", "cpu", "(", ")", "\n", "y", "=", "y", ".", "cpu", "(", ")", "\n", "# make actual split", "\n", "if", "w", "is", "None", ":", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", "=", "train_test_split", "(", "\n", "X", ",", "y", ",", "test_size", "=", "val_split_prop", ",", "random_state", "=", "seed", ",", "shuffle", "=", "True", "\n", ")", "\n", "return", "(", "\n", "X_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "X_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "VALIDATION_STRING", ",", "\n", ")", "\n", "\n", "", "w", "=", "w", ".", "cpu", "(", ")", "\n", "if", "stratify_w", ":", "\n", "# split to stratify by group", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", ",", "w_t", ",", "w_val", "=", "train_test_split", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "test_size", "=", "val_split_prop", ",", "\n", "random_state", "=", "seed", ",", "\n", "stratify", "=", "w", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "X_t", ",", "X_val", ",", "y_t", ",", "y_val", ",", "w_t", ",", "w_val", "=", "train_test_split", "(", "\n", "X", ",", "y", ",", "w", ",", "test_size", "=", "val_split_prop", ",", "random_state", "=", "seed", ",", "shuffle", "=", "True", "\n", ")", "\n", "\n", "", "return", "(", "\n", "X_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "w_t", ".", "to", "(", "DEVICE", ")", ",", "\n", "X_val", ".", "to", "(", "DEVICE", ")", ",", "\n", "y_val", ".", "to", "(", "DEVICE", ")", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.heads_l2_penalty": [[73, 101], ["sum", "sum", "sum", "jax.sum", "range", "jax.sum", "jax.sum", "range", "range"], "function", ["None"], ["VALIDATION_STRING", ",", "\n", ")", "\n", "\n", "\n", "", "def", "train_wrapper", "(", "\n", "estimator", ":", "Any", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "    ", "if", "hasattr", "(", "estimator", ",", "\"train\"", ")", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Train PyTorch network {estimator}\"", ")", "\n", "estimator", ".", "train", "(", "X", ",", "y", ",", "**", "kwargs", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"fit\"", ")", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Train sklearn estimator {estimator}\"", ")", "\n", "estimator", ".", "fit", "(", "X", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Invalid estimator for the {estimator}\"", ")", "\n", "\n", "\n", "", "", "def", "predict_wrapper", "(", "estimator", ":", "Any", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "hasattr", "(", "estimator", ",", "\"forward\"", ")", ":", "\n", "        ", "return", "estimator", "(", "X", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"predict_proba\"", ")", ":", "\n", "        ", "X_np", "=", "X", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "no_event_proba", "=", "estimator", ".", "predict_proba", "(", "X_np", ")", "[", ":", ",", "0", "]", "# no event probability", "\n", "\n", "return", "torch", ".", "Tensor", "(", "no_event_proba", ")", "\n", "", "elif", "hasattr", "(", "estimator", ",", "\"predict\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.SNet.__init__": [[118, 177], ["None"], "methods", ["None"], ["with_prop", ":", "bool", "=", "True", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "prop_loss_multiplier", ":", "float", "=", "1", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.2", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "SNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_unit_in", "=", "n_unit_in", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "penalty_orthogonal", "=", "penalty_orthogonal", "\n", "self", ".", "penalty_disc", "=", "penalty_disc", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "ortho_reg_type", "=", "ortho_reg_type", "\n", "self", ".", "clipping_value", "=", "clipping_value", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "with_prop", "=", "with_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "prop_loss_multiplier", "=", "prop_loss_multiplier", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "_reps_mu0", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "self", ".", "_reps_mu1", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_po_estimators", "=", "[", "]", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "self", ".", "_reps_c", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_reps_o", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r_small", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "self", ".", "_reps_prop", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"snet_po_estimator_{idx}\"", ",", "\n", "n_units_r", "\n", "+", "n_units_r_small", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.SNet._get_predict_function": [[178, 183], ["None"], "methods", ["None"], ["+", "n_units_r_small", ",", "# (reps_c, reps_o, reps_mu{idx})", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.SNet._get_train_function": [[184, 189], ["None"], "methods", ["None"], ["dropout_prob", "=", "dropout_prob", ",", "\n", "dropout", "=", "dropout", "\n", ")", "\n", ")", "\n", "", "self", ".", "_propensity_estimator", "=", "PropensityNet", "(", "\n", "\"snet_propensity_estimator\"", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.train_snet": [[191, 584], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.OutputHead", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "snet.train_snet.init_fun_snet"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], ["2", ",", "\n", "\"prop\"", ",", "\n", "n_layers_out_prop", "=", "n_layers_out_prop", ",", "\n", "n_units_out_prop", "=", "n_units_out_prop", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "params", "=", "(", "\n", "list", "(", "self", ".", "_reps_c", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_o", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu0", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu1", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_prop", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "0", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "1", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_propensity_estimator", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_reps_o", "=", "RepresentationNet", "(", "\n", "n_unit_in", ",", "n_units", "=", "n_units_r", ",", "n_layers", "=", "n_layers_r", ",", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "_po_estimators", ".", "append", "(", "\n", "BasicNet", "(", "\n", "f\"snet_po_estimator_{idx}\"", ",", "\n", "n_units_r", "\n", "+", "n_units_r_small", ",", "# (reps_o, reps_mu{idx})", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "batch_norm", "=", "batch_norm", "\n", ")", "\n", ")", "\n", "\n", "", "params", "=", "(", "list", "(", "self", ".", "_reps_o", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu0", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_reps_mu1", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "0", "]", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "_po_estimators", "[", "1", "]", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "", "def", "loss", "(", "\n", "self", ",", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "discrepancy", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "def", "prop_loss", "(", "\n", "t_pred", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "with_prop", ":", "\n", "                ", "t_pred", "=", "t_pred", "+", "EPS", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "t_pred", ",", "t_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "\n", "", "", "return", "(", "\n", "po_loss", "(", "y0_pred", ",", "y1_pred", ",", "y_true", ",", "t_true", ")", "\n", "+", "self", ".", "prop_loss_multiplier", "*", "prop_loss", "(", "t_pred", ",", "t_true", ")", "\n", "+", "discrepancy", "\n", "+", "self", ".", "_ortho_reg", "(", ")", "\n", ")", "\n", "\n", "", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"SNet\"", ":", "\n", "        ", "\"\"\"\n        Fit treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", "=", "w", ",", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "self", ".", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "np", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "np", ".", "arange", "(", "n", ")", "\n", "\n", "# training", "\n", "val_loss_best", "=", "LARGE_VAL", "\n", "patience", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "train_loss", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "\n", "X_next", "=", "X", "[", "idx_next", "]", "\n", "y_next", "=", "y", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "w_next", "=", "w", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "=", "self", ".", "_step", "(", "X_next", ",", "w_next", ")", "\n", "batch_loss", "=", "self", ".", "loss", "(", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", ",", "y_next", ",", "w_next", "\n", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "=", "self", ".", "_step", "(", "\n", "X_val", ",", "w_val", "\n", ")", "\n", "val_loss", "=", "(", "\n", "self", ".", "loss", "(", "\n", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", ",", "y_val", ",", "w_val", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[SNet] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "def", "_ortho_reg", "(", "self", ")", "->", "float", ":", "\n", "        ", "def", "_get_absolute_rowsums", "(", "mat", ":", "torch", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "mat", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "def", "_get_cos_reg", "(", "\n", "params_0", ":", "torch", ".", "Tensor", ",", "params_1", ":", "torch", ".", "Tensor", ",", "normalize", ":", "bool", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "normalize", ":", "\n", "                ", "params_0", "=", "params_0", "/", "torch", ".", "linalg", ".", "norm", "(", "params_0", ",", "dim", "=", "0", ")", "\n", "params_1", "=", "params_1", "/", "torch", ".", "linalg", ".", "norm", "(", "params_1", ",", "dim", "=", "0", ")", "\n", "\n", "", "x_min", "=", "min", "(", "params_0", ".", "shape", "[", "0", "]", ",", "params_1", ".", "shape", "[", "0", "]", ")", "\n", "y_min", "=", "min", "(", "params_0", ".", "shape", "[", "1", "]", ",", "params_1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "linalg", ".", "norm", "(", "\n", "params_0", "[", ":", "x_min", ",", ":", "y_min", "]", "*", "params_1", "[", ":", "x_min", ",", ":", "y_min", "]", ",", "\"fro\"", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "\n", "", "reps_o_params", "=", "self", ".", "_reps_o", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_mu0_params", "=", "self", ".", "_reps_mu0", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_mu1_params", "=", "self", ".", "_reps_mu1", ".", "model", "[", "0", "]", ".", "weight", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "reps_c_params", "=", "self", ".", "_reps_c", ".", "model", "[", "0", "]", ".", "weight", "\n", "reps_prop_params", "=", "self", ".", "_reps_prop", ".", "model", "[", "0", "]", ".", "weight", "\n", "\n", "# define ortho-reg function", "\n", "", "if", "self", ".", "ortho_reg_type", "==", "\"abs\"", ":", "\n", "            ", "col_o", "=", "_get_absolute_rowsums", "(", "reps_o_params", ")", "\n", "col_mu0", "=", "_get_absolute_rowsums", "(", "reps_mu0_params", ")", "\n", "col_mu1", "=", "_get_absolute_rowsums", "(", "reps_mu1_params", ")", "\n", "if", "self", ".", "with_prop", ":", "\n", "                ", "col_c", "=", "_get_absolute_rowsums", "(", "reps_c_params", ")", "\n", "col_w", "=", "_get_absolute_rowsums", "(", "reps_prop_params", ")", "\n", "\n", "return", "self", ".", "penalty_orthogonal", "*", "torch", ".", "sum", "(", "\n", "col_c", "*", "col_o", "\n", "+", "col_c", "*", "col_w", "\n", "+", "col_c", "*", "col_mu1", "\n", "+", "col_c", "*", "col_mu0", "\n", "+", "col_w", "*", "col_o", "\n", "+", "col_mu0", "*", "col_o", "\n", "+", "col_o", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_w", "\n", "+", "col_w", "*", "col_mu1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "torch", ".", "sum", "(", "\n", "+", "col_mu0", "*", "col_o", "\n", "+", "col_o", "*", "col_mu1", "\n", "+", "col_mu0", "*", "col_mu1", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "ortho_reg_type", "==", "\"fro\"", ":", "\n", "            ", "if", "self", ".", "with_prop", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "(", "\n", "_get_cos_reg", "(", "reps_c_params", ",", "reps_o_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_c_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_prop_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu1_params", ",", "reps_prop_params", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "penalty_orthogonal", "*", "(", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu0_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_o_params", ",", "reps_mu1_params", ")", "\n", "+", "_get_cos_reg", "(", "reps_mu0_params", ",", "reps_mu1_params", ")", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid orth_reg_typ {self.ortho_reg_type}\"", ")", "\n", "\n", "", "", "def", "_maximum_mean_discrepancy", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n", "=", "w", ".", "shape", "[", "0", "]", "\n", "n_t", "=", "torch", ".", "sum", "(", "w", ")", "\n", "\n", "X", "=", "X", "/", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "X", ",", "dim", "=", "0", ")", "+", "EPS", ")", "\n", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "mean_control", "=", "(", "n", "/", "(", "n", "-", "n_t", ")", ")", "*", "torch", ".", "mean", "(", "(", "1", "-", "w", ")", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "mean_treated", "=", "(", "n", "/", "n_t", ")", "*", "torch", ".", "mean", "(", "w", ".", "T", "*", "X", ",", "dim", "=", "0", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "(", "mean_treated", "-", "mean_control", ")", "**", "2", ")", "\n", "\n", "", "def", "_step", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "reps_o", "=", "self", ".", "_forward", "(", "X", ")", "\n", "\n", "discrepancy", "=", "self", ".", "penalty_disc", "*", "self", ".", "_maximum_mean_discrepancy", "(", "reps_o", ",", "w", ")", "\n", "\n", "return", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "discrepancy", "\n", "\n", "", "def", "_forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "reps_o", "=", "self", ".", "_reps_o", "(", "X", ")", "\n", "reps_mu0", "=", "self", ".", "_reps_mu0", "(", "X", ")", "\n", "reps_mu1", "=", "self", ".", "_reps_mu1", "(", "X", ")", "\n", "\n", "if", "self", ".", "with_prop", ":", "\n", "            ", "reps_c", "=", "self", ".", "_reps_c", "(", "X", ")", "\n", "reps_w", "=", "self", ".", "_reps_prop", "(", "X", ")", "\n", "\n", "reps_po_0", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_o", ",", "reps_mu0", ")", ",", "dim", "=", "1", ")", "\n", "reps_po_1", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_o", ",", "reps_mu1", ")", ",", "dim", "=", "1", ")", "\n", "reps_w", "=", "torch", ".", "cat", "(", "(", "reps_c", ",", "reps_w", ")", ",", "dim", "=", "1", ")", "\n", "prop_preds", "=", "self", ".", "_propensity_estimator", "(", "reps_w", ")", "\n", "", "else", ":", "\n", "            ", "reps_po_0", "=", "torch", ".", "cat", "(", "(", "reps_o", ",", "reps_mu0", ")", ",", "dim", "=", "1", ")", "\n", "reps_po_1", "=", "torch", ".", "cat", "(", "(", "reps_o", ",", "reps_mu1", ")", ",", "dim", "=", "1", ")", "\n", "prop_preds", "=", "0.5", "*", "torch", ".", "ones", "(", "len", "(", "X", ")", ")", "# no probability predictions", "\n", "\n", "", "y0_preds", "=", "self", ".", "_po_estimators", "[", "0", "]", "(", "reps_po_0", ")", ".", "squeeze", "(", ")", "\n", "y1_preds", "=", "self", ".", "_po_estimators", "[", "1", "]", "(", "reps_po_1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "y0_preds", ",", "y1_preds", ",", "prop_preds", ",", "reps_o", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "_po_estimators", "[", "0", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_po_estimators", "[", "1", "]", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_o", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_mu1", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_mu0", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "with_prop", ":", "\n", "                ", "self", ".", "_reps_c", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_reps_prop", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "y0_preds", ",", "y1_preds", ",", "_", ",", "_", "=", "self", ".", "_forward", "(", "X", ")", "\n", "\n", "outcome", "=", "y1_preds", "-", "y0_preds", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "outcome", ",", "y0_preds", ",", "y1_preds", "\n", "\n", "", "return", "outcome", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.predict_snet": [[587, 633], ["predict_fun_repr", "predict_fun_repr", "predict_fun_repr", "predict_fun_repr", "predict_fun_repr", "catenets.models.jax.disentangled_nets._concatenate_representations", "catenets.models.jax.disentangled_nets._concatenate_representations", "catenets.models.jax.disentangled_nets._concatenate_representations", "predict_fun_head", "predict_fun_head", "predict_fun_prop"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._concatenate_representations", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._concatenate_representations", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._concatenate_representations"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.train_snet_noprop": [[636, 932], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "snet.train_snet_noprop.init_fun_snet_noprop"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.snet.predict_snet_noprop": [[934, 974], ["predict_fun_repr", "predict_fun_repr", "predict_fun_repr", "jax.concatenate", "jax.concatenate", "predict_fun_head", "predict_fun_head", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.RNet.__init__": [[111, 171], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "second_stage_strategy", ":", "str", "=", "R_STRATEGY_NAME", ",", "\n", "data_split", ":", "bool", "=", "False", ",", "\n", "cross_fit", ":", "bool", "=", "False", ",", "\n", "n_cf_folds", ":", "int", "=", "DEFAULT_CF_FOLDS", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_layers_out_t", ":", "int", "=", "DEFAULT_LAYERS_OUT_T", ",", "\n", "n_layers_r_t", ":", "int", "=", "DEFAULT_LAYERS_R_T", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_units_out_t", ":", "int", "=", "DEFAULT_UNITS_OUT_T", ",", "\n", "n_units_r_t", ":", "int", "=", "DEFAULT_UNITS_R_T", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_t", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "step_size_t", ":", "float", "=", "DEFAULT_STEP_SIZE_T", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "binary_y", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "# settings", "\n", "        ", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "second_stage_strategy", "=", "second_stage_strategy", "\n", "self", ".", "data_split", "=", "data_split", "\n", "self", ".", "cross_fit", "=", "cross_fit", "\n", "self", ".", "n_cf_folds", "=", "n_cf_folds", "\n", "\n", "# model architecture hyperparams", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_layers_out_t", "=", "n_layers_out_t", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "\n", "self", ".", "n_layers_r_t", "=", "n_layers_r_t", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_units_out_t", "=", "n_units_out_t", "\n", "self", ".", "n_units_r", "=", "n_units_r", "\n", "self", ".", "n_units_r_t", "=", "n_units_r_t", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "\n", "# other hyperparameters", "\n", "self", ".", "penalty_l2", "=", "penalty_l2", "\n", "self", ".", "penalty_l2_t", "=", "penalty_l2_t", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "step_size_t", "=", "step_size_t", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.RNet._get_train_function": [[172, 174], ["None"], "methods", ["None"], ["", "def", "_get_train_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "train_r_net", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.RNet.fit": [[175, 193], ["catenets.models.jax.model_utils.check_X_is_np", "rnet.RNet._check_inputs", "rnet.RNet._get_train_function", "rnet.RNet.get_params", "rnet.RNet."], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._check_inputs", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_train_function"], ["", "def", "fit", "(", "\n", "self", ",", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "p", ":", "Optional", "[", "jnp", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "\"RNet\"", ":", "\n", "# overwrite super so we can pass p as extra param", "\n", "# some quick input checks", "\n", "        ", "X", "=", "check_X_is_np", "(", "X", ")", "\n", "self", ".", "_check_inputs", "(", "w", ",", "p", ")", "\n", "\n", "train_func", "=", "self", ".", "_get_train_function", "(", ")", "\n", "train_params", "=", "self", ".", "get_params", "(", ")", "\n", "\n", "self", ".", "_params", ",", "self", ".", "_predict_funs", "=", "train_func", "(", "X", ",", "y", ",", "w", ",", "p", ",", "**", "train_params", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.RNet._get_predict_function": [[194, 197], ["None"], "methods", ["None"], ["", "def", "_get_predict_function", "(", "self", ")", "->", "Callable", ":", "\n", "# Two step nets do not need this", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.RNet.predict": [[198, 213], ["isinstance", "rnet.RNet._predict_funs", "NotImplementedError", "NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "\n", "self", ",", "X", ":", "jnp", ".", "ndarray", ",", "return_po", ":", "bool", "=", "False", ",", "return_prop", ":", "bool", "=", "False", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# check input", "\n", "        ", "if", "return_po", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"TwoStepNets have no Potential outcome predictors.\"", "\n", ")", "\n", "\n", "", "if", "return_prop", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"TwoStepNets have no Propensity predictors.\"", ")", "\n", "\n", "", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "", "return", "self", ".", "_predict_funs", "(", "self", ".", "_params", ",", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.train_r_net": [[215, 395], ["catenets.debug", "catenets.models.jax.model_utils.check_shape_1d_data", "rnet._train_and_predict_r_stage1", "catenets.debug", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "rnet.train_r_stage2", "catenets.debug", "numpy.ones", "numpy.ones", "catenets.debug", "numpy.random.choice", "numpy.zeros", "numpy.zeros", "numpy.zeros", "catenets.debug", "numpy.zeros", "rnet._train_and_predict_r_stage1", "catenets.models.jax.base.train_output_net_only", "ValueError", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet._train_and_predict_r_stage1", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.train_r_stage2", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet._train_and_predict_r_stage1", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only"], ["", "", "def", "train_r_net", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "p", ":", "Optional", "[", "jnp", ".", "ndarray", "]", "=", "None", ",", "\n", "second_stage_strategy", ":", "str", "=", "R_STRATEGY_NAME", ",", "\n", "data_split", ":", "bool", "=", "False", ",", "\n", "cross_fit", ":", "bool", "=", "False", ",", "\n", "n_cf_folds", ":", "int", "=", "DEFAULT_CF_FOLDS", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_layers_r_t", ":", "int", "=", "DEFAULT_LAYERS_R_T", ",", "\n", "n_layers_out_t", ":", "int", "=", "DEFAULT_LAYERS_OUT_T", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_units_out_t", ":", "int", "=", "DEFAULT_UNITS_OUT_T", ",", "\n", "n_units_r_t", ":", "int", "=", "DEFAULT_UNITS_R_T", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_t", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "step_size_t", ":", "float", "=", "DEFAULT_STEP_SIZE_T", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "binary_y", ":", "bool", "=", "False", "\n", ")", "->", "Any", ":", "\n", "# get shape of data", "\n", "    ", "n", ",", "d", "=", "X", ".", "shape", "\n", "\n", "if", "p", "is", "not", "None", ":", "\n", "        ", "p", "=", "check_shape_1d_data", "(", "p", ")", "\n", "\n", "# split data as wanted", "\n", "", "if", "not", "cross_fit", ":", "\n", "        ", "if", "not", "data_split", ":", "\n", "            ", "log", ".", "debug", "(", "\"Training first stage with all data (no data splitting)\"", ")", "\n", "# use all data for both", "\n", "fit_mask", "=", "onp", ".", "ones", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "pred_mask", "=", "onp", ".", "ones", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "debug", "(", "\"Training first stage with half of the data (data splitting)\"", ")", "\n", "# split data in half", "\n", "fit_idx", "=", "onp", ".", "random", ".", "choice", "(", "n", ",", "int", "(", "onp", ".", "round", "(", "n", "/", "2", ")", ")", ")", "\n", "fit_mask", "=", "onp", ".", "zeros", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "\n", "fit_mask", "[", "fit_idx", "]", "=", "1", "\n", "pred_mask", "=", "~", "fit_mask", "\n", "\n", "", "mu_hat", ",", "pi_hat", "=", "_train_and_predict_r_stage1", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "fit_mask", ",", "\n", "pred_mask", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "binary_y", "=", "binary_y", "\n", ")", "\n", "if", "data_split", ":", "\n", "# keep only prediction data", "\n", "            ", "X", ",", "y", ",", "w", "=", "X", "[", "pred_mask", ",", ":", "]", ",", "y", "[", "pred_mask", ",", ":", "]", ",", "w", "[", "pred_mask", ",", ":", "]", "\n", "\n", "if", "p", "is", "not", "None", ":", "\n", "                ", "p", "=", "p", "[", "pred_mask", ",", ":", "]", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "log", ".", "debug", "(", "f\"Training first stage in {n_cf_folds} folds (cross-fitting)\"", ")", "\n", "# do cross fitting", "\n", "mu_hat", ",", "pi_hat", "=", "onp", ".", "zeros", "(", "(", "n", ",", "1", ")", ")", ",", "onp", ".", "zeros", "(", "(", "n", ",", "1", ")", ")", "\n", "splitter", "=", "StratifiedKFold", "(", "n_splits", "=", "n_cf_folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "\n", "fold_count", "=", "1", "\n", "for", "train_idx", ",", "test_idx", "in", "splitter", ".", "split", "(", "X", ",", "w", ")", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Training fold {fold_count}.\"", ")", "\n", "fold_count", "=", "fold_count", "+", "1", "\n", "\n", "pred_mask", "=", "onp", ".", "zeros", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "pred_mask", "[", "test_idx", "]", "=", "1", "\n", "fit_mask", "=", "~", "pred_mask", "\n", "\n", "mu_hat", "[", "pred_mask", "]", ",", "pi_hat", "[", "pred_mask", "]", "=", "_train_and_predict_r_stage1", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "fit_mask", ",", "\n", "pred_mask", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "binary_y", "=", "binary_y", "\n", ")", "\n", "\n", "", "", "log", ".", "debug", "(", "\"Training second stage.\"", ")", "\n", "\n", "if", "p", "is", "not", "None", ":", "\n", "# use known propensity score", "\n", "        ", "p", "=", "check_shape_1d_data", "(", "p", ")", "\n", "pi_hat", "=", "p", "\n", "\n", "", "y", ",", "w", "=", "check_shape_1d_data", "(", "y", ")", ",", "check_shape_1d_data", "(", "w", ")", "\n", "w_ortho", "=", "w", "-", "pi_hat", "\n", "y_ortho", "=", "y", "-", "mu_hat", "\n", "\n", "if", "second_stage_strategy", "==", "R_STRATEGY_NAME", ":", "\n", "        ", "return", "train_r_stage2", "(", "\n", "X", ",", "\n", "y_ortho", ",", "\n", "w_ortho", ",", "\n", "n_layers_out", "=", "n_layers_out_t", ",", "\n", "n_units_out", "=", "n_units_out_t", ",", "\n", "n_layers_r", "=", "n_layers_r_t", ",", "\n", "n_units_r", "=", "n_units_r_t", ",", "\n", "penalty_l2", "=", "penalty_l2_t", ",", "\n", "step_size", "=", "step_size_t", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "", "elif", "second_stage_strategy", "==", "U_STRATEGY_NAME", ":", "\n", "        ", "return", "train_output_net_only", "(", "\n", "X", ",", "\n", "y_ortho", "/", "w_ortho", ",", "\n", "n_layers_out", "=", "n_layers_out_t", ",", "\n", "n_units_out", "=", "n_units_out_t", ",", "\n", "n_layers_r", "=", "n_layers_r_t", ",", "\n", "n_units_r", "=", "n_units_r_t", ",", "\n", "penalty_l2", "=", "penalty_l2_t", ",", "\n", "step_size", "=", "step_size_t", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"R-learner only supports strategies R and U.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet._train_and_predict_r_stage1": [[397, 474], ["catenets.debug", "catenets.models.jax.base.train_output_net_only", "predict_fun_out", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "predict_fun_prop", "len", "w.reshape.reshape", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only"], ["", "", "def", "_train_and_predict_r_stage1", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "fit_mask", ":", "jnp", ".", "ndarray", ",", "\n", "pred_mask", ":", "jnp", ".", "ndarray", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "binary_y", ":", "bool", "=", "False", "\n", ")", "->", "Any", ":", "\n", "    ", "if", "len", "(", "w", ".", "shape", ")", ">", "1", ":", "\n", "        ", "w", "=", "w", ".", "reshape", "(", "(", "len", "(", "w", ")", ",", ")", ")", "\n", "\n", "# split the data", "\n", "", "X_fit", ",", "y_fit", ",", "w_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "y", "[", "fit_mask", "]", ",", "w", "[", "fit_mask", "]", "\n", "X_pred", "=", "X", "[", "pred_mask", ",", ":", "]", "\n", "\n", "log", ".", "debug", "(", "\"Training output Net\"", ")", "\n", "params_out", ",", "predict_fun_out", "=", "train_output_net_only", "(", "\n", "X_fit", ",", "\n", "y_fit", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "binary_y", "=", "binary_y", "\n", ")", "\n", "mu_hat", "=", "predict_fun_out", "(", "params_out", ",", "X_pred", ")", "\n", "\n", "log", ".", "debug", "(", "\"Training propensity net\"", ")", "\n", "params_prop", ",", "predict_fun_prop", "=", "train_output_net_only", "(", "\n", "X_fit", ",", "\n", "w_fit", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "pi_hat", "=", "predict_fun_prop", "(", "params_prop", ",", "X_pred", ")", "\n", "\n", "return", "mu_hat", ",", "pi_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.rnet.train_r_stage2": [[476, 613], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.base.make_val_split", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "init_fun", "opt_init", "numpy.arange", "range", "get_params", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "predict_fun", "sum", "get_params", "opt_update", "int", "numpy.random.shuffle", "range", "rnet.train_r_stage2.loss"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss"], ["", "def", "train_r_stage2", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y_ortho", ":", "jnp", ".", "ndarray", ",", "\n", "w_ortho", ":", "jnp", ".", "ndarray", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "0", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", ")", "->", "Any", ":", "\n", "# function to train a single output head", "\n", "# input check", "\n", "    ", "y_ortho", ",", "w_ortho", "=", "check_shape_1d_data", "(", "y_ortho", ")", ",", "check_shape_1d_data", "(", "w_ortho", ")", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "input_shape", "=", "(", "-", "1", ",", "d", ")", "\n", "rng_key", "=", "random", ".", "PRNGKey", "(", "seed", ")", "\n", "onp", ".", "random", ".", "seed", "(", "seed", ")", "# set seed for data generation via numpy as well", "\n", "\n", "# get validation split (can be none)", "\n", "X", ",", "y_ortho", ",", "w_ortho", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y_ortho", ",", "w_ortho", ",", "val_split_prop", "=", "val_split_prop", ",", "seed", "=", "seed", ",", "stratify_w", "=", "False", "\n", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# get output head", "\n", "init_fun", ",", "predict_fun", "=", "OutputHead", "(", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "\n", "# define loss and grad", "\n", "@", "jit", "\n", "def", "loss", "(", "params", ":", "dict", ",", "batch", ":", "jnp", ".", "ndarray", ",", "penalty", ":", "float", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# mse loss function", "\n", "        ", "inputs", ",", "ortho_targets", ",", "ortho_treats", "=", "batch", "\n", "preds", "=", "predict_fun", "(", "params", ",", "inputs", ")", "\n", "weightsq", "=", "sum", "(", "\n", "[", "\n", "jnp", ".", "sum", "(", "params", "[", "i", "]", "[", "0", "]", "**", "2", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "(", "n_layers_out", "+", "n_layers_r", ")", "+", "1", ",", "2", ")", "\n", "]", "\n", ")", "\n", "if", "not", "avg_objective", ":", "\n", "            ", "return", "(", "\n", "jnp", ".", "sum", "(", "(", "ortho_targets", "-", "ortho_treats", "*", "preds", ")", "**", "2", ")", "\n", "+", "0.5", "*", "penalty", "*", "weightsq", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "jnp", ".", "average", "(", "(", "ortho_targets", "-", "ortho_treats", "*", "preds", ")", "**", "2", ")", "\n", "+", "0.5", "*", "penalty", "*", "weightsq", "\n", ")", "\n", "\n", "# set optimization routine", "\n", "# set optimizer", "\n", "", "", "opt_init", ",", "opt_update", ",", "get_params", "=", "optimizers", ".", "adam", "(", "step_size", "=", "step_size", ")", "\n", "\n", "# set update function", "\n", "@", "jit", "\n", "def", "update", "(", "i", ":", "int", ",", "state", ":", "dict", ",", "batch", ":", "jnp", ".", "ndarray", ",", "penalty", ":", "float", ")", "->", "jnp", ".", "ndarray", ":", "\n", "        ", "params", "=", "get_params", "(", "state", ")", "\n", "g_params", "=", "grad", "(", "loss", ")", "(", "params", ",", "batch", ",", "penalty", ")", "\n", "# g_params = optimizers.clip_grads(g_params, 1.0)", "\n", "return", "opt_update", "(", "i", ",", "g_params", ",", "state", ")", "\n", "\n", "# initialise states", "\n", "", "_", ",", "init_params", "=", "init_fun", "(", "rng_key", ",", "input_shape", ")", "\n", "opt_state", "=", "opt_init", "(", "init_params", ")", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "batch_size", "if", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "onp", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "onp", ".", "arange", "(", "n", ")", "\n", "\n", "l_best", "=", "LARGE_VAL", "\n", "p_curr", "=", "0", "\n", "\n", "# do training", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "        ", "onp", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "next_batch", "=", "X", "[", "idx_next", ",", ":", "]", ",", "y_ortho", "[", "idx_next", ",", ":", "]", ",", "w_ortho", "[", "idx_next", ",", ":", "]", "\n", "opt_state", "=", "update", "(", "i", "*", "n_batches", "+", "b", ",", "opt_state", ",", "next_batch", ",", "penalty_l2", ")", "\n", "\n", "", "if", "(", "i", "%", "n_iter_print", "==", "0", ")", "or", "early_stopping", ":", "\n", "            ", "params_curr", "=", "get_params", "(", "opt_state", ")", "\n", "l_curr", "=", "loss", "(", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "penalty_l2", ")", "\n", "\n", "", "if", "i", "%", "n_iter_print", "==", "0", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Epoch: {i}, current {val_string} loss: {l_curr}\"", ")", "\n", "\n", "", "if", "early_stopping", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "n_iter_min", ")", ":", "\n", "# check if loss updated", "\n", "            ", "if", "l_curr", "<", "l_best", ":", "\n", "                ", "l_best", "=", "l_curr", "\n", "p_curr", "=", "0", "\n", "", "else", ":", "\n", "                ", "p_curr", "=", "p_curr", "+", "1", "\n", "\n", "", "if", "p_curr", ">", "patience", ":", "\n", "                ", "trained_params", "=", "get_params", "(", "opt_state", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "                    ", "l_final", "=", "loss", "(", "trained_params", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ")", "\n", "return", "trained_params", ",", "predict_fun", ",", "l_final", "\n", "\n", "", "return", "trained_params", ",", "predict_fun", "\n", "\n", "# get final parameters", "\n", "", "", "", "trained_params", "=", "get_params", "(", "opt_state", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "        ", "l_final", "=", "loss", "(", "trained_params", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ")", "\n", "return", "trained_params", ",", "predict_fun", ",", "l_final", "\n", "\n", "", "return", "trained_params", ",", "predict_fun", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets.SNet3.__init__": [[113, 168], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R_BIG_S3", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_r_small", ":", "int", "=", "DEFAULT_UNITS_R_SMALL_S3", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_orthogonal", ":", "float", "=", "DEFAULT_PENALTY_ORTHOGONAL", ",", "\n", "penalty_disc", ":", "float", "=", "DEFAULT_PENALTY_DISC", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "reg_diff", ":", "bool", "=", "False", ",", "\n", "penalty_diff", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "same_init", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "binary_y", "=", "binary_y", "\n", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_layers_out_prop", "=", "n_layers_out_prop", "\n", "self", ".", "n_units_r", "=", "n_units_r", "\n", "self", ".", "n_units_r_small", "=", "n_units_r_small", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_units_out_prop", "=", "n_units_out_prop", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "\n", "self", ".", "penalty_l2", "=", "penalty_l2", "\n", "self", ".", "penalty_orthogonal", "=", "penalty_orthogonal", "\n", "self", ".", "penalty_disc", "=", "penalty_disc", "\n", "self", ".", "reg_diff", "=", "reg_diff", "\n", "self", ".", "penalty_diff", "=", "penalty_diff", "\n", "self", ".", "same_init", "=", "same_init", "\n", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets.SNet3._get_predict_function": [[169, 171], ["None"], "methods", ["None"], ["", "def", "_get_predict_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "predict_snet3", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets.SNet3._get_train_function": [[172, 174], ["None"], "methods", ["None"], ["", "def", "_get_train_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "train_snet3", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._get_absolute_rowsums": [[45, 47], ["jax.sum", "jax.abs"], "function", ["None"], ["def", "_get_absolute_rowsums", "(", "mat", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "jnp", ".", "sum", "(", "jnp", ".", "abs", "(", "mat", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets._concatenate_representations": [[49, 51], ["jax.concatenate"], "function", ["None"], ["", "def", "_concatenate_representations", "(", "reps", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "jnp", ".", "concatenate", "(", "reps", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets.train_snet3": [[177, 519], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.ReprBlock", "catenets.models.jax.base.OutputHead", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "disentangled_nets.train_snet3.init_fun_snet3"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.ReprBlock", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], ["", "", "def", "train_snet3", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R_BIG_S3", ",", "\n", "n_units_r_small", ":", "int", "=", "DEFAULT_UNITS_R_SMALL_S3", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_out_prop", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_out_prop", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_disc", ":", "float", "=", "DEFAULT_PENALTY_DISC", ",", "\n", "penalty_orthogonal", ":", "float", "=", "DEFAULT_PENALTY_ORTHOGONAL", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "reg_diff", ":", "bool", "=", "False", ",", "\n", "penalty_diff", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", "same_init", ":", "bool", "=", "False", ",", "\n", ")", "->", "Any", ":", "\n", "    ", "\"\"\"\n    SNet-3, based on the decompostion used in Hassanpour and Greiner (2020)\n    \"\"\"", "\n", "# function to train a net with 3 representations", "\n", "y", ",", "w", "=", "check_shape_1d_data", "(", "y", ")", ",", "check_shape_1d_data", "(", "w", ")", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "input_shape", "=", "(", "-", "1", ",", "d", ")", "\n", "rng_key", "=", "random", ".", "PRNGKey", "(", "seed", ")", "\n", "onp", ".", "random", ".", "seed", "(", "seed", ")", "# set seed for data generation via numpy as well", "\n", "\n", "if", "not", "reg_diff", ":", "\n", "        ", "penalty_diff", "=", "penalty_l2", "\n", "\n", "# get validation split (can be none)", "\n", "", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", ",", "val_split_prop", "=", "val_split_prop", ",", "seed", "=", "seed", "\n", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# get representation layers", "\n", "init_fun_repr", ",", "predict_fun_repr", "=", "ReprBlock", "(", "\n", "n_layers", "=", "n_layers_r", ",", "n_units", "=", "n_units_r", ",", "nonlin", "=", "nonlin", "\n", ")", "\n", "init_fun_repr_small", ",", "predict_fun_repr_small", "=", "ReprBlock", "(", "\n", "n_layers", "=", "n_layers_r", ",", "n_units", "=", "n_units_r_small", ",", "nonlin", "=", "nonlin", "\n", ")", "\n", "\n", "# get output head functions (output heads share same structure)", "\n", "init_fun_head_po", ",", "predict_fun_head_po", "=", "OutputHead", "(", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "# add propensity head", "\n", "init_fun_head_prop", ",", "predict_fun_head_prop", "=", "OutputHead", "(", "\n", "n_layers_out", "=", "n_layers_out_prop", ",", "\n", "n_units_out", "=", "n_units_out_prop", ",", "\n", "binary_y", "=", "True", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "\n", "def", "init_fun_snet3", "(", "rng", ":", "float", ",", "input_shape", ":", "Tuple", ")", "->", "Tuple", "[", "Tuple", ",", "List", "]", ":", "\n", "# chain together the layers", "\n", "# param should look like [repr_c, repr_o, repr_t, po_0, po_1, prop]", "\n", "# initialise representation layers", "\n", "        ", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "input_shape_repr", ",", "param_repr_c", "=", "init_fun_repr", "(", "layer_rng", ",", "input_shape", ")", "\n", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "input_shape_repr_small", ",", "param_repr_o", "=", "init_fun_repr_small", "(", "\n", "layer_rng", ",", "input_shape", "\n", ")", "\n", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "_", ",", "param_repr_w", "=", "init_fun_repr_small", "(", "layer_rng", ",", "input_shape", ")", "\n", "\n", "# each head gets two representations", "\n", "input_shape_repr", "=", "input_shape_repr", "[", ":", "-", "1", "]", "+", "(", "\n", "input_shape_repr", "[", "-", "1", "]", "+", "input_shape_repr_small", "[", "-", "1", "]", ",", "\n", ")", "\n", "\n", "# initialise output heads", "\n", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "if", "same_init", ":", "\n", "# initialise both on same values", "\n", "            ", "input_shape", ",", "param_0", "=", "init_fun_head_po", "(", "layer_rng", ",", "input_shape_repr", ")", "\n", "input_shape", ",", "param_1", "=", "init_fun_head_po", "(", "layer_rng", ",", "input_shape_repr", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", ",", "param_0", "=", "init_fun_head_po", "(", "layer_rng", ",", "input_shape_repr", ")", "\n", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "input_shape", ",", "param_1", "=", "init_fun_head_po", "(", "layer_rng", ",", "input_shape_repr", ")", "\n", "", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "input_shape", ",", "param_prop", "=", "init_fun_head_prop", "(", "layer_rng", ",", "input_shape_repr", ")", "\n", "return", "input_shape", ",", "[", "\n", "param_repr_c", ",", "\n", "param_repr_o", ",", "\n", "param_repr_w", ",", "\n", "param_0", ",", "\n", "param_1", ",", "\n", "param_prop", ",", "\n", "]", "\n", "\n", "# Define loss functions", "\n", "# loss functions for the head", "\n", "", "if", "not", "binary_y", ":", "\n", "\n", "        ", "def", "loss_head", "(", "\n", "params", ":", "List", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# mse loss function", "\n", "            ", "inputs", ",", "targets", ",", "weights", "=", "batch", "\n", "preds", "=", "predict_fun_head_po", "(", "params", ",", "inputs", ")", "\n", "return", "jnp", ".", "sum", "(", "weights", "*", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "def", "loss_head", "(", "\n", "params", ":", "List", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# log loss function", "\n", "            ", "inputs", ",", "targets", ",", "weights", "=", "batch", "\n", "preds", "=", "predict_fun_head_po", "(", "params", ",", "inputs", ")", "\n", "return", "-", "jnp", ".", "sum", "(", "\n", "weights", "\n", "*", "(", "targets", "*", "jnp", ".", "log", "(", "preds", ")", "+", "(", "1", "-", "targets", ")", "*", "jnp", ".", "log", "(", "1", "-", "preds", ")", ")", "\n", ")", "\n", "\n", "", "", "def", "loss_head_prop", "(", "\n", "params", ":", "List", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# log loss function for propensities", "\n", "        ", "inputs", ",", "targets", "=", "batch", "\n", "preds", "=", "predict_fun_head_prop", "(", "params", ",", "inputs", ")", "\n", "return", "-", "jnp", ".", "sum", "(", "targets", "*", "jnp", ".", "log", "(", "preds", ")", "+", "(", "1", "-", "targets", ")", "*", "jnp", ".", "log", "(", "1", "-", "preds", ")", ")", "\n", "\n", "# complete loss function for all parts", "\n", "", "@", "jit", "\n", "def", "loss_snet3", "(", "\n", "params", ":", "List", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty_l2", ":", "float", ",", "\n", "penalty_orthogonal", ":", "float", ",", "\n", "penalty_disc", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# params: list[repr_c, repr_o, repr_t, po_0, po_1, prop]", "\n", "# batch: (X, y, w)", "\n", "        ", "X", ",", "y", ",", "w", "=", "batch", "\n", "\n", "# get representation", "\n", "reps_c", "=", "predict_fun_repr", "(", "params", "[", "0", "]", ",", "X", ")", "\n", "reps_o", "=", "predict_fun_repr_small", "(", "params", "[", "1", "]", ",", "X", ")", "\n", "reps_w", "=", "predict_fun_repr_small", "(", "params", "[", "2", "]", ",", "X", ")", "\n", "\n", "# concatenate", "\n", "reps_po", "=", "_concatenate_representations", "(", "(", "reps_c", ",", "reps_o", ")", ")", "\n", "reps_prop", "=", "_concatenate_representations", "(", "(", "reps_c", ",", "reps_w", ")", ")", "\n", "\n", "# pass down to heads", "\n", "loss_0", "=", "loss_head", "(", "params", "[", "3", "]", ",", "(", "reps_po", ",", "y", ",", "1", "-", "w", ")", ",", "penalty_l2", ")", "\n", "loss_1", "=", "loss_head", "(", "params", "[", "4", "]", ",", "(", "reps_po", ",", "y", ",", "w", ")", ",", "penalty_l2", ")", "\n", "\n", "# pass down to propensity head", "\n", "loss_prop", "=", "loss_head_prop", "(", "params", "[", "5", "]", ",", "(", "reps_prop", ",", "w", ")", ",", "penalty_l2", ")", "\n", "weightsq_prop", "=", "sum", "(", "\n", "[", "\n", "jnp", ".", "sum", "(", "params", "[", "5", "]", "[", "i", "]", "[", "0", "]", "**", "2", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "n_layers_out_prop", "+", "1", ",", "2", ")", "\n", "]", "\n", ")", "\n", "\n", "# which variable has impact on which representation", "\n", "col_c", "=", "_get_absolute_rowsums", "(", "params", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "col_o", "=", "_get_absolute_rowsums", "(", "params", "[", "1", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "col_w", "=", "_get_absolute_rowsums", "(", "params", "[", "2", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "loss_o", "=", "penalty_orthogonal", "*", "(", "\n", "jnp", ".", "sum", "(", "col_c", "*", "col_o", "+", "col_c", "*", "col_w", "+", "col_w", "*", "col_o", ")", "\n", ")", "\n", "\n", "# is rep_o balanced between groups?", "\n", "loss_disc", "=", "penalty_disc", "*", "mmd2_lin", "(", "reps_o", ",", "w", ")", "\n", "\n", "# weight decay on representations", "\n", "weightsq_body", "=", "sum", "(", "\n", "[", "\n", "sum", "(", "\n", "[", "jnp", ".", "sum", "(", "params", "[", "j", "]", "[", "i", "]", "[", "0", "]", "**", "2", ")", "for", "i", "in", "range", "(", "0", ",", "2", "*", "n_layers_r", ",", "2", ")", "]", "\n", ")", "\n", "for", "j", "in", "range", "(", "3", ")", "\n", "]", "\n", ")", "\n", "weightsq_head", "=", "heads_l2_penalty", "(", "\n", "params", "[", "3", "]", ",", "params", "[", "4", "]", ",", "n_layers_out", ",", "reg_diff", ",", "penalty_l2", ",", "penalty_diff", "\n", ")", "\n", "\n", "if", "not", "avg_objective", ":", "\n", "            ", "return", "(", "\n", "loss_0", "\n", "+", "loss_1", "\n", "+", "loss_prop", "\n", "+", "loss_o", "\n", "+", "loss_disc", "\n", "+", "0.5", "*", "(", "penalty_l2", "*", "(", "weightsq_body", "+", "weightsq_prop", ")", "+", "weightsq_head", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "n_batch", "=", "y", ".", "shape", "[", "0", "]", "\n", "return", "(", "\n", "(", "loss_0", "+", "loss_1", ")", "/", "n_batch", "\n", "+", "loss_prop", "/", "n_batch", "\n", "+", "loss_o", "\n", "+", "loss_disc", "\n", "+", "0.5", "*", "(", "penalty_l2", "*", "(", "weightsq_body", "+", "weightsq_prop", ")", "+", "weightsq_head", ")", "\n", ")", "\n", "\n", "# Define optimisation routine", "\n", "", "", "opt_init", ",", "opt_update", ",", "get_params", "=", "optimizers", ".", "adam", "(", "step_size", "=", "step_size", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "\n", "i", ":", "int", ",", "\n", "state", ":", "dict", ",", "\n", "batch", ":", "jnp", ".", "ndarray", ",", "\n", "penalty_l2", ":", "float", ",", "\n", "penalty_orthogonal", ":", "float", ",", "\n", "penalty_disc", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# updating function", "\n", "        ", "params", "=", "get_params", "(", "state", ")", "\n", "return", "opt_update", "(", "\n", "i", ",", "\n", "grad", "(", "loss_snet3", ")", "(", "\n", "params", ",", "batch", ",", "penalty_l2", ",", "penalty_orthogonal", ",", "penalty_disc", "\n", ")", ",", "\n", "state", ",", "\n", ")", "\n", "\n", "# initialise states", "\n", "", "_", ",", "init_params", "=", "init_fun_snet3", "(", "rng_key", ",", "input_shape", ")", "\n", "opt_state", "=", "opt_init", "(", "init_params", ")", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "batch_size", "if", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "onp", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "onp", ".", "arange", "(", "n", ")", "\n", "\n", "l_best", "=", "LARGE_VAL", "\n", "p_curr", "=", "0", "\n", "\n", "# do training", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "        ", "onp", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "next_batch", "=", "X", "[", "idx_next", ",", ":", "]", ",", "y", "[", "idx_next", ",", ":", "]", ",", "w", "[", "idx_next", "]", "\n", "opt_state", "=", "update", "(", "\n", "i", "*", "n_batches", "+", "b", ",", "\n", "opt_state", ",", "\n", "next_batch", ",", "\n", "penalty_l2", ",", "\n", "penalty_orthogonal", ",", "\n", "penalty_disc", ",", "\n", ")", "\n", "\n", "", "if", "(", "i", "%", "n_iter_print", "==", "0", ")", "or", "early_stopping", ":", "\n", "            ", "params_curr", "=", "get_params", "(", "opt_state", ")", "\n", "l_curr", "=", "loss_snet3", "(", "\n", "params_curr", ",", "\n", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "\n", "penalty_l2", ",", "\n", "penalty_orthogonal", ",", "\n", "penalty_disc", ",", "\n", ")", "\n", "\n", "", "if", "i", "%", "n_iter_print", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "f\"Epoch: {i}, current {val_string} loss {l_curr}\"", ")", "\n", "\n", "", "if", "early_stopping", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "n_iter_min", ")", ":", "\n", "# check if loss updated", "\n", "            ", "if", "l_curr", "<", "l_best", ":", "\n", "                ", "l_best", "=", "l_curr", "\n", "p_curr", "=", "0", "\n", "params_best", "=", "params_curr", "\n", "", "else", ":", "\n", "                ", "if", "onp", ".", "isnan", "(", "l_curr", ")", ":", "\n", "# if diverged, return best", "\n", "                    ", "return", "params_best", ",", "(", "\n", "predict_fun_repr", ",", "\n", "predict_fun_head_po", ",", "\n", "predict_fun_head_prop", ",", "\n", ")", "\n", "", "p_curr", "=", "p_curr", "+", "1", "\n", "\n", "", "if", "p_curr", ">", "patience", ":", "\n", "                ", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "                    ", "l_final", "=", "loss_snet3", "(", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ",", "0", ")", "\n", "return", "(", "\n", "params_curr", ",", "\n", "(", "predict_fun_repr", ",", "predict_fun_head_po", ",", "predict_fun_head_prop", ")", ",", "\n", "l_final", ",", "\n", ")", "\n", "\n", "", "return", "params_curr", ",", "(", "\n", "predict_fun_repr", ",", "\n", "predict_fun_head_po", ",", "\n", "predict_fun_head_prop", ",", "\n", ")", "\n", "\n", "# return the parameters", "\n", "", "", "", "trained_params", "=", "get_params", "(", "opt_state", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "        ", "l_final", "=", "loss_snet3", "(", "get_params", "(", "opt_state", ")", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ")", "\n", "return", "(", "\n", "trained_params", ",", "\n", "(", "predict_fun_repr", ",", "predict_fun_head_po", ",", "predict_fun_head_prop", ")", ",", "\n", "l_final", ",", "\n", ")", "\n", "\n", "", "return", "trained_params", ",", "(", "\n", "predict_fun_repr", ",", "\n", "predict_fun_head_po", ",", "\n", "predict_fun_head_prop", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.disentangled_nets.predict_snet3": [[522, 571], ["predict_fun_repr", "predict_fun_repr", "predict_fun_repr", "jax.concatenate", "jax.concatenate", "predict_fun_head", "predict_fun_head", "predict_fun_prop"], "function", ["None"], ["", "def", "predict_snet3", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "trained_params", ":", "dict", ",", "\n", "predict_funs", ":", "list", ",", "\n", "return_po", ":", "bool", "=", "False", ",", "\n", "return_prop", ":", "bool", "=", "False", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# unpack inputs", "\n", "    ", "predict_fun_repr", ",", "predict_fun_head", ",", "predict_fun_prop", "=", "predict_funs", "\n", "param_repr_c", ",", "param_repr_o", ",", "param_repr_t", "=", "(", "\n", "trained_params", "[", "0", "]", ",", "\n", "trained_params", "[", "1", "]", ",", "\n", "trained_params", "[", "2", "]", ",", "\n", ")", "\n", "param_0", ",", "param_1", ",", "param_prop", "=", "(", "\n", "trained_params", "[", "3", "]", ",", "\n", "trained_params", "[", "4", "]", ",", "\n", "trained_params", "[", "5", "]", ",", "\n", ")", "\n", "\n", "# get representations", "\n", "rep_c", "=", "predict_fun_repr", "(", "param_repr_c", ",", "X", ")", "\n", "rep_o", "=", "predict_fun_repr", "(", "param_repr_o", ",", "X", ")", "\n", "rep_w", "=", "predict_fun_repr", "(", "param_repr_t", ",", "X", ")", "\n", "\n", "# concatenate", "\n", "reps_po", "=", "jnp", ".", "concatenate", "(", "(", "rep_c", ",", "rep_o", ")", ",", "axis", "=", "1", ")", "\n", "reps_prop", "=", "jnp", ".", "concatenate", "(", "(", "rep_c", ",", "rep_w", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# get potential outcomes", "\n", "mu_0", "=", "predict_fun_head", "(", "param_0", ",", "reps_po", ")", "\n", "mu_1", "=", "predict_fun_head", "(", "param_1", ",", "reps_po", ")", "\n", "\n", "te", "=", "mu_1", "-", "mu_0", "\n", "if", "return_prop", ":", "\n", "# get propensity", "\n", "        ", "prop", "=", "predict_fun_prop", "(", "param_prop", ",", "reps_prop", ")", "\n", "\n", "# stack other outputs", "\n", "", "if", "return_po", ":", "\n", "        ", "if", "return_prop", ":", "\n", "            ", "return", "te", ",", "mu_0", ",", "mu_1", ",", "prop", "\n", "", "else", ":", "\n", "            ", "return", "te", ",", "mu_0", ",", "mu_1", "\n", "", "", "else", ":", "\n", "        ", "if", "return_prop", ":", "\n", "            ", "return", "te", ",", "prop", "\n", "", "else", ":", "\n", "            ", "return", "te", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.__init__": [[143, 209], ["None"], "methods", ["None"], ["self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_units_out_prop", "=", "n_units_out_prop", "\n", "self", ".", "n_layers_out_prop", "=", "n_layers_out_prop", "\n", "self", ".", "weight_decay_t", "=", "weight_decay_t", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "weighting_strategy", "=", "weighting_strategy", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_t", "=", "lr_t", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "self", ".", "n_folds", "=", "n_folds", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "n_layers_out_t", "=", "n_layers_out_t", "\n", "self", ".", "n_units_out_t", "=", "n_units_out_t", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "# set estimators", "\n", "self", ".", "_te_template", "=", "te_estimator", "\n", "self", ".", "_po_template", "=", "po_estimator", "\n", "\n", "self", ".", "_te_estimator", "=", "self", ".", "_generate_te_estimator", "(", ")", "\n", "self", ".", "_po_estimator", "=", "self", ".", "_generate_te_estimator", "(", ")", "\n", "if", "weighting_strategy", "is", "not", "None", ":", "\n", "            ", "self", ".", "_propensity_estimator", "=", "self", ".", "_generate_propensity_estimator", "(", ")", "\n", "\n", "", "", "def", "_generate_te_estimator", "(", "self", ",", "name", ":", "str", "=", "\"te_estimator\"", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "_te_template", "is", "not", "None", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_te_template", ")", "\n", "", "return", "BasicNet", "(", "\n", "name", ",", "\n", "self", ".", "n_unit_in", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_layers_out", "=", "self", ".", "n_layers_out_t", ",", "\n", "n_units_out", "=", "self", ".", "n_units_out_t", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay_t", ",", "\n", "lr", "=", "self", ".", "lr_t", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "n_iter_min", "=", "self", ".", "n_iter_min", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "def", "_generate_po_estimator", "(", "self", ",", "name", ":", "str", "=", "\"po_estimator\"", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "_po_template", "is", "not", "None", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_po_template", ")", "\n", "\n", "", "return", "BasicNet", "(", "\n", "name", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet._get_train_function": [[210, 212], ["None"], "methods", ["None"], ["self", ".", "n_unit_in", ",", "\n", "binary_y", "=", "self", ".", "binary_y", ",", "\n", "n_layers_out", "=", "self", ".", "n_layers_out", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit": [[213, 239], ["catenets.models.jax.model_utils.check_X_is_np", "pseudo_outcome_nets.PseudoOutcomeNet._check_inputs", "pseudo_outcome_nets.PseudoOutcomeNet._get_train_function", "pseudo_outcome_nets.PseudoOutcomeNet.get_params", "pseudo_outcome_nets.PseudoOutcomeNet.keys", "pseudo_outcome_nets.PseudoOutcomeNet.update", "pseudo_outcome_nets.PseudoOutcomeNet.", "pseudo_outcome_nets.PseudoOutcomeNet."], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet._check_inputs", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_train_function"], ["n_units_out", "=", "self", ".", "n_units_out", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "n_iter_min", "=", "self", ".", "n_iter_min", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "def", "_generate_propensity_estimator", "(", "\n", "self", ",", "name", ":", "str", "=", "\"propensity_estimator\"", "\n", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "self", ".", "weighting_strategy", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weighting_strategy for PropensityNet\"", ")", "\n", "", "return", "PropensityNet", "(", "\n", "name", ",", "\n", "self", ".", "n_unit_in", ",", "\n", "2", ",", "# number of treatments", "\n", "self", ".", "weighting_strategy", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet._get_predict_function": [[240, 243], ["None"], "methods", ["None"], ["n_units_out_prop", "=", "self", ".", "n_units_out_prop", ",", "\n", "n_layers_out_prop", "=", "self", ".", "n_layers_out_prop", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.predict": [[244, 263], ["isinstance", "NotImplementedError", "NotImplementedError", "pseudo_outcome_nets.PseudoOutcomeNet._predict_funs", "pseudo_outcome_nets.PseudoOutcomeNet._predict_funs"], "methods", ["None"], ["n_iter", "=", "self", ".", "n_iter", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "n_iter_print", "=", "self", ".", "n_iter_print", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "nonlin", "=", "self", ".", "nonlin", ",", "\n", "val_split_prop", "=", "self", ".", "val_split_prop", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "early_stopping", "=", "self", ".", "early_stopping", ",", "\n", "dropout_prob", "=", "self", ".", "dropout_prob", ",", "\n", "dropout", "=", "self", ".", "dropout", "\n", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "def", "train", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "w", ":", "torch", ".", "Tensor", "\n", ")", "->", "\"PseudoOutcomeLearner\"", ":", "\n", "        "]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.DRNet.__init__": [[268, 329], ["pseudo_outcome_nets.PseudoOutcomeNet.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["\n", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "y", "=", "self", ".", "_check_tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "self", ".", "_check_tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "\n", "n", "=", "len", "(", "y", ")", "\n", "\n", "# STEP 1: fit plug-in estimators via cross-fitting", "\n", "if", "self", ".", "n_folds", "==", "1", ":", "\n", "            ", "pred_mask", "=", "np", ".", "ones", "(", "n", ",", "dtype", "=", "bool", ")", "\n", "# fit plug-in models", "\n", "mu_0_pred", ",", "mu_1_pred", ",", "p_pred", "=", "self", ".", "_first_step", "(", "\n", "X", ",", "y", ",", "w", ",", "pred_mask", ",", "pred_mask", "\n", ")", "\n", "", "else", ":", "\n", "            ", "mu_0_pred", ",", "mu_1_pred", ",", "p_pred", "=", "(", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", "torch", ".", "zeros", "(", "n", ")", ".", "to", "(", "DEVICE", ")", ",", "\n", ")", "\n", "\n", "# create folds stratified by treatment assignment to ensure balance", "\n", "splitter", "=", "StratifiedKFold", "(", "\n", "n_splits", "=", "self", ".", "n_folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "for", "train_index", ",", "test_index", "in", "splitter", ".", "split", "(", "X", ".", "cpu", "(", ")", ",", "w", ".", "cpu", "(", ")", ")", ":", "\n", "# create masks", "\n", "                ", "pred_mask", "=", "torch", ".", "zeros", "(", "n", ",", "dtype", "=", "bool", ")", ".", "to", "(", "DEVICE", ")", "\n", "pred_mask", "[", "test_index", "]", "=", "1", "\n", "\n", "# fit plug-in te_estimator", "\n", "(", "\n", "mu_0_pred", "[", "pred_mask", "]", ",", "\n", "mu_1_pred", "[", "pred_mask", "]", ",", "\n", "p_pred", "[", "pred_mask", "]", ",", "\n", ")", "=", "self", ".", "_first_step", "(", "X", ",", "y", ",", "w", ",", "~", "pred_mask", ",", "pred_mask", ")", "\n", "\n", "# use estimated propensity scores", "\n", "", "", "if", "self", ".", "weighting_strategy", "is", "not", "None", ":", "\n", "            ", "p", "=", "p_pred", "\n", "\n", "# STEP 2: direct TE estimation", "\n", "", "self", ".", "_second_step", "(", "X", ",", "y", ",", "w", ",", "p", ",", "mu_0_pred", ",", "mu_1_pred", ")", "\n", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        te_est: array-like of shape (n_samples,)\n            Predicted treatment effects\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.RANet.__init__": [[335, 396], ["pseudo_outcome_nets.PseudoOutcomeNet.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["            ", "self", ".", "_te_estimator", ".", "model", ".", "eval", "(", ")", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "return", "predict_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ")", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "_impute_pos", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# split sample", "\n", "        ", "X_fit", ",", "Y_fit", ",", "W_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "y", "[", "fit_mask", "]", ",", "w", "[", "fit_mask", "]", "\n", "\n", "# fit two separate (standard) models", "\n", "# untreated model", "\n", "temp_model_0", "=", "self", ".", "_generate_po_estimator", "(", "\"po_estimator_0_impute_pos\"", ")", "\n", "train_wrapper", "(", "temp_model_0", ",", "X_fit", "[", "W_fit", "==", "0", "]", ",", "Y_fit", "[", "W_fit", "==", "0", "]", ")", "\n", "\n", "# treated model", "\n", "temp_model_1", "=", "self", ".", "_generate_po_estimator", "(", "\"po_estimator_1_impute_pos\"", ")", "\n", "train_wrapper", "(", "temp_model_1", ",", "X_fit", "[", "W_fit", "==", "1", "]", ",", "Y_fit", "[", "W_fit", "==", "1", "]", ")", "\n", "\n", "mu_0_pred", "=", "predict_wrapper", "(", "temp_model_0", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "mu_1_pred", "=", "predict_wrapper", "(", "temp_model_1", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "\n", "return", "mu_0_pred", ",", "mu_1_pred", "\n", "\n", "", "def", "_impute_propensity", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# split sample", "\n", "        ", "X_fit", ",", "W_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "w", "[", "fit_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PWNet.__init__": [[402, 463], ["pseudo_outcome_nets.PseudoOutcomeNet.__init__"], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__"], ["\n", "# predict propensity on hold out", "\n", "return", "temp_propensity_estimator", ".", "get_importance_weights", "(", "\n", "X", "[", "pred_mask", ",", ":", "]", ",", "w", "[", "pred_mask", "]", "\n", ")", "\n", "\n", "", "def", "_impute_unconditional_mean", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# R-learner and U-learner need to impute unconditional mean", "\n", "        ", "X_fit", ",", "Y_fit", "=", "X", "[", "fit_mask", ",", ":", "]", ",", "y", "[", "fit_mask", "]", "\n", "\n", "# fit model", "\n", "temp_model", "=", "self", ".", "_generate_po_estimator", "(", "\"po_est_impute_unconditional_mean\"", ")", "\n", "train_wrapper", "(", "temp_model", ",", "X_fit", ",", "Y_fit", ")", "\n", "\n", "return", "predict_wrapper", "(", "temp_model", ",", "X", "[", "pred_mask", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "class", "DRLearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    DR-learner for CATE estimation, based on doubly robust AIPW pseudo-outcome\n    \"\"\"", "\n", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "dr_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ",", "mu_1", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "", "", "class", "PWLearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    PW-learner for CATE estimation, based on singly robust Horvitz Thompson pseudo-outcome\n    \"\"\"", "\n", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.train_pseudooutcome_net": [[466, 687], ["catenets.models.jax.transformation_utils._get_transformation_function", "catenets.debug", "catenets.models.jax.transformation_utils._get_transformation_function.", "catenets.models.jax.model_utils.check_shape_1d_data", "ValueError", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.base.train_output_net_only", "catenets.models.jax.base.train_output_net_only", "pseudo_outcome_nets._train_and_predict_first_stage", "catenets.debug", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.std", "numpy.std", "catenets.debug", "numpy.ones", "numpy.ones", "catenets.debug", "numpy.random.choice", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "catenets.debug", "numpy.zeros", "pseudo_outcome_nets._train_and_predict_first_stage", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets._train_and_predict_first_stage", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets._train_and_predict_first_stage"], ["pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "np", ".", "nan", ",", "np", ".", "nan", "# not needed", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu0_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "pw_transformation_cate", "(", "y", ",", "w", ",", "p", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "", "", "class", "RALearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    RA-learner for CATE estimation, based on singly robust regression-adjusted pseudo-outcome\n    \"\"\"", "\n", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "np", ".", "nan", "# not needed", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "ra_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ",", "mu_1", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "", "", "class", "ULearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    U-learner for CATE estimation. Based on pseudo-outcome (Y-mu(x))/(w-pi(x))\n    \"\"\"", "\n", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "mu_pred", "=", "self", ".", "_impute_unconditional_mean", "(", "X", ",", "y", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "mu1_pred", "=", "np", ".", "nan", "# only have one thing to impute here", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "u_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "", "", "class", "RLearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    R-learner for CATE estimation. Based on pseudo-outcome (Y-mu(x))/(w-pi(x)) and sample weight\n    (w-pi(x))^2 -- can only be implemented if .fit of te_estimator takes argument 'sample_weight'.\n    \"\"\"", "\n", "\n", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu_pred", "=", "self", ".", "_impute_unconditional_mean", "(", "X", ",", "y", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "mu1_pred", "=", "np", ".", "nan", "# only have one thing to impute here", "\n", "p_pred", "=", "self", ".", "_impute_propensity", "(", "X", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", ".", "squeeze", "(", ")", "\n", "return", "mu_pred", ",", "mu1_pred", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "        ", "pseudo_outcome", "=", "u_transformation_cate", "(", "y", ",", "w", ",", "p", ",", "mu_0", ")", "\n", "train_wrapper", "(", "\n", "self", ".", "_te_estimator", ",", "X", ",", "pseudo_outcome", ".", "detach", "(", ")", ",", "weight", "=", "(", "w", "-", "p", ")", "**", "2", "\n", ")", "\n", "\n", "\n", "", "", "class", "XLearner", "(", "PseudoOutcomeLearner", ")", ":", "\n", "    ", "\"\"\"\n    X-learner for CATE estimation. Combines two CATE estimates via a weighting function g(x):\n    tau(x) = g(x) tau_0(x) + (1-g(x)) tau_1(x)\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "weighting_strategy", ":", "str", "=", "\"prop\"", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "weighting_strategy", "=", "weighting_strategy", "\n", "\n", "", "def", "_first_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "fit_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mu0_pred", ",", "mu1_pred", "=", "self", ".", "_impute_pos", "(", "X", ",", "y", ",", "w", ",", "fit_mask", ",", "pred_mask", ")", "\n", "p_pred", "=", "np", ".", "nan", "\n", "return", "mu0_pred", ".", "squeeze", "(", ")", ",", "mu1_pred", ".", "squeeze", "(", ")", ",", "p_pred", "\n", "\n", "", "def", "_second_step", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", "p", ":", "torch", ".", "Tensor", ",", "\n", "mu_0", ":", "torch", ".", "Tensor", ",", "\n", "mu_1", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "None", ":", "\n", "# split by treatment status, fit one model per group", "\n", "        ", "pseudo_0", "=", "mu_1", "[", "w", "==", "0", "]", "-", "y", "[", "w", "==", "0", "]", "\n", "self", ".", "_te_estimator_0", "=", "self", ".", "_generate_te_estimator", "(", "\"te_estimator_0_xnet\"", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator_0", ",", "X", "[", "w", "==", "0", "]", ",", "pseudo_0", ".", "detach", "(", ")", ")", "\n", "\n", "pseudo_1", "=", "y", "[", "w", "==", "1", "]", "-", "mu_0", "[", "w", "==", "1", "]", "\n", "self", ".", "_te_estimator_1", "=", "self", ".", "_generate_te_estimator", "(", "\"te_estimator_1_xnet\"", ")", "\n", "train_wrapper", "(", "self", ".", "_te_estimator_1", ",", "X", "[", "w", "==", "1", "]", ",", "pseudo_1", ".", "detach", "(", ")", ")", "\n", "\n", "train_wrapper", "(", "self", ".", "_propensity_estimator", ",", "X", ",", "w", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        return_po: bool, default False\n            Whether to return potential outcome predictions. Placeholder, can only accept False.\n        Returns\n        -------\n        te_est: array-like of shape (n_samples,)\n            Predicted treatment effects\n        \"\"\"", "\n", "if", "return_po", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"PseudoOutcomeLearners have no Potential outcome predictors.\"", "\n", ")", "\n", "\n", "", "if", "not", "training", ":", "\n", "            ", "self", ".", "_te_estimator_1", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_te_estimator_0", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "tau0_pred", "=", "predict_wrapper", "(", "self", ".", "_te_estimator_0", ",", "X", ")", "\n", "tau1_pred", "=", "predict_wrapper", "(", "self", ".", "_te_estimator_1", ",", "X", ")", "\n", "\n", "weight", "=", "self", ".", "_propensity_estimator", ".", "get_importance_weights", "(", "X", ")", "\n", "\n", "return", "weight", "*", "tau0_pred", "+", "(", "1", "-", "weight", ")", "*", "tau1_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets._train_and_predict_first_stage": [[690, 816], ["catenets.debug", "train_fun", "len", "w.reshape.reshape", "predict_fun", "predict_fun", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "predict_fun_prop", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.offsetnet.OffsetNet.__init__": [[87, 129], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_p", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", ")", ":", "\n", "# structure of net", "\n", "        ", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_r", "=", "n_units_r", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "\n", "# penalties", "\n", "self", ".", "penalty_l2", "=", "penalty_l2", "\n", "self", ".", "penalty_l2_p", "=", "penalty_l2_p", "\n", "\n", "# training params", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.offsetnet.OffsetNet._get_train_function": [[130, 132], ["None"], "methods", ["None"], ["", "def", "_get_train_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "train_offsetnet", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.offsetnet.OffsetNet._get_predict_function": [[133, 135], ["None"], "methods", ["None"], ["", "def", "_get_predict_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "predict_offsetnet", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.offsetnet.predict_offsetnet": [[137, 169], ["predict_fun_head", "predict_fun_head", "NotImplementedError", "jax.experimental.stax.sigmoid", "jax.experimental.stax.sigmoid"], "function", ["None"], ["", "", "def", "predict_offsetnet", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "trained_params", ":", "jnp", ".", "ndarray", ",", "\n", "predict_funs", ":", "List", "[", "Any", "]", ",", "\n", "return_po", ":", "bool", "=", "False", ",", "\n", "return_prop", ":", "bool", "=", "False", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "if", "return_prop", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"OffsetNet does not implement a propensity model.\"", ")", "\n", "\n", "# unpack inputs", "\n", "", "predict_fun_head", "=", "predict_funs", "[", "0", "]", "\n", "binary_y", "=", "predict_funs", "[", "1", "]", "\n", "param_0", ",", "param_1", "=", "trained_params", "[", "0", "]", ",", "trained_params", "[", "1", "]", "\n", "\n", "# get potential outcomes", "\n", "mu_0", "=", "predict_fun_head", "(", "param_0", ",", "X", ")", "\n", "offset", "=", "predict_fun_head", "(", "param_1", ",", "X", ")", "\n", "\n", "if", "not", "binary_y", ":", "\n", "        ", "if", "return_po", ":", "\n", "            ", "return", "offset", ",", "mu_0", ",", "mu_0", "+", "offset", "\n", "", "else", ":", "\n", "            ", "return", "offset", "\n", "", "", "else", ":", "\n", "# still need to sigmoid", "\n", "        ", "po_0", "=", "sigmoid", "(", "mu_0", ")", "\n", "po_1", "=", "sigmoid", "(", "mu_0", "+", "offset", ")", "\n", "if", "return_po", ":", "\n", "            ", "return", "po_1", "-", "po_0", ",", "po_0", ",", "po_1", "\n", "", "else", ":", "\n", "            ", "return", "po_1", "-", "po_0", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.offsetnet.train_offsetnet": [[171, 365], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "offsetnet.train_offsetnet.init_fun_offset"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead"], ["", "", "", "def", "train_offsetnet", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_p", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", ":", "\n", "# input check", "\n", "    ", "y", ",", "w", "=", "check_shape_1d_data", "(", "y", ")", ",", "check_shape_1d_data", "(", "w", ")", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "input_shape", "=", "(", "-", "1", ",", "d", ")", "\n", "rng_key", "=", "random", ".", "PRNGKey", "(", "seed", ")", "\n", "onp", ".", "random", ".", "seed", "(", "seed", ")", "# set seed for data generation via numpy as well", "\n", "\n", "# get validation split (can be none)", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", ",", "val_split_prop", "=", "val_split_prop", ",", "seed", "=", "seed", "\n", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# get output head functions (both heads share same structure)", "\n", "init_fun_head", ",", "predict_fun_head", "=", "OutputHead", "(", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "\n", "def", "init_fun_offset", "(", "rng", ":", "float", ",", "input_shape", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "# chain together the layers", "\n", "# param should look like [param_base, param_offset]", "\n", "        ", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "_", ",", "param_base", "=", "init_fun_head", "(", "layer_rng", ",", "input_shape", ")", "\n", "rng", ",", "layer_rng", "=", "random", ".", "split", "(", "rng", ")", "\n", "input_shape", ",", "param_offset", "=", "init_fun_head", "(", "layer_rng", ",", "input_shape", ")", "\n", "return", "input_shape", ",", "[", "param_base", ",", "param_offset", "]", "\n", "\n", "# Define loss functions", "\n", "", "if", "not", "binary_y", ":", "\n", "\n", "        ", "@", "jit", "\n", "def", "loss_offsetnet", "(", "\n", "params", ":", "jnp", ".", "ndarray", ",", "batch", ":", "jnp", ".", "ndarray", ",", "penalty", ":", "float", ",", "penalty_l2_p", ":", "float", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# params: list[representation, head_0, head_1]", "\n", "# batch: (X, y, w)", "\n", "            ", "inputs", ",", "targets", ",", "w", "=", "batch", "\n", "preds_0", "=", "predict_fun_head", "(", "params", "[", "0", "]", ",", "inputs", ")", "\n", "offset", "=", "predict_fun_head", "(", "params", "[", "1", "]", ",", "inputs", ")", "\n", "preds", "=", "preds_0", "+", "w", "*", "offset", "\n", "weightsq_head", "=", "heads_l2_penalty", "(", "\n", "params", "[", "0", "]", ",", "\n", "params", "[", "1", "]", ",", "\n", "n_layers_out", "+", "n_layers_r", ",", "\n", "False", ",", "\n", "penalty", ",", "\n", "penalty_l2_p", ",", "\n", ")", "\n", "if", "not", "avg_objective", ":", "\n", "                ", "return", "jnp", ".", "sum", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "+", "0.5", "*", "weightsq_head", "\n", "", "else", ":", "\n", "                ", "return", "jnp", ".", "average", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", "+", "0.5", "*", "weightsq_head", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "        ", "def", "loss_offsetnet", "(", "\n", "params", ":", "jnp", ".", "ndarray", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty", ":", "float", ",", "\n", "penalty_l2_p", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# params: list[representation, head_0, head_1]", "\n", "# batch: (X, y, w)", "\n", "            ", "inputs", ",", "targets", ",", "w", "=", "batch", "\n", "preds_0", "=", "predict_fun_head", "(", "params", "[", "0", "]", ",", "inputs", ")", "\n", "offset", "=", "predict_fun_head", "(", "params", "[", "1", "]", ",", "inputs", ")", "\n", "preds", "=", "sigmoid", "(", "preds_0", "+", "w", "*", "offset", ")", "\n", "weightsq_head", "=", "heads_l2_penalty", "(", "\n", "params", "[", "0", "]", ",", "\n", "params", "[", "1", "]", ",", "\n", "n_layers_out", "+", "n_layers_r", ",", "\n", "False", ",", "\n", "penalty", ",", "\n", "penalty_l2_p", ",", "\n", ")", "\n", "if", "not", "avg_objective", ":", "\n", "                ", "return", "(", "\n", "-", "jnp", ".", "sum", "(", "\n", "(", "targets", "*", "jnp", ".", "log", "(", "preds", ")", "+", "(", "1", "-", "targets", ")", "*", "jnp", ".", "log", "(", "1", "-", "preds", ")", ")", "\n", ")", "\n", "+", "0.5", "*", "weightsq_head", "\n", ")", "\n", "", "else", ":", "\n", "                ", "n_batch", "=", "y", ".", "shape", "[", "0", "]", "\n", "return", "(", "\n", "-", "jnp", ".", "sum", "(", "\n", "(", "targets", "*", "jnp", ".", "log", "(", "preds", ")", "+", "(", "1", "-", "targets", ")", "*", "jnp", ".", "log", "(", "1", "-", "preds", ")", ")", "\n", ")", "\n", "/", "n_batch", "\n", "+", "0.5", "*", "weightsq_head", "\n", ")", "\n", "\n", "# Define optimisation routine", "\n", "", "", "", "opt_init", ",", "opt_update", ",", "get_params", "=", "optimizers", ".", "adam", "(", "step_size", "=", "step_size", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "\n", "i", ":", "int", ",", "state", ":", "dict", ",", "batch", ":", "jnp", ".", "ndarray", ",", "penalty_l2", ":", "float", ",", "penalty_l2_p", ":", "float", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# updating function", "\n", "        ", "params", "=", "get_params", "(", "state", ")", "\n", "return", "opt_update", "(", "\n", "i", ",", "grad", "(", "loss_offsetnet", ")", "(", "params", ",", "batch", ",", "penalty_l2", ",", "penalty_l2_p", ")", ",", "state", "\n", ")", "\n", "\n", "# initialise states", "\n", "", "_", ",", "init_params", "=", "init_fun_offset", "(", "rng_key", ",", "input_shape", ")", "\n", "opt_state", "=", "opt_init", "(", "init_params", ")", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "batch_size", "if", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "onp", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "onp", ".", "arange", "(", "n", ")", "\n", "\n", "l_best", "=", "LARGE_VAL", "\n", "p_curr", "=", "0", "\n", "\n", "pred_funs", "=", "predict_fun_head", ",", "binary_y", "\n", "\n", "# do training", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "        ", "onp", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "next_batch", "=", "X", "[", "idx_next", ",", ":", "]", ",", "y", "[", "idx_next", ",", ":", "]", ",", "w", "[", "idx_next", "]", "\n", "opt_state", "=", "update", "(", "\n", "i", "*", "n_batches", "+", "b", ",", "opt_state", ",", "next_batch", ",", "penalty_l2", ",", "penalty_l2_p", "\n", ")", "\n", "\n", "", "if", "(", "i", "%", "n_iter_print", "==", "0", ")", "or", "early_stopping", ":", "\n", "            ", "params_curr", "=", "get_params", "(", "opt_state", ")", "\n", "l_curr", "=", "loss_offsetnet", "(", "\n", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "penalty_l2", ",", "penalty_l2_p", "\n", ")", "\n", "\n", "", "if", "i", "%", "n_iter_print", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "f\"Epoch: {i}, current {val_string} loss {l_curr}\"", ")", "\n", "\n", "", "if", "early_stopping", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "n_iter_min", ")", ":", "\n", "            ", "if", "l_curr", "<", "l_best", ":", "\n", "                ", "l_best", "=", "l_curr", "\n", "p_curr", "=", "0", "\n", "", "else", ":", "\n", "                ", "p_curr", "=", "p_curr", "+", "1", "\n", "\n", "", "if", "p_curr", ">", "patience", ":", "\n", "                ", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "                    ", "l_final", "=", "loss_offsetnet", "(", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ")", "\n", "return", "params_curr", ",", "pred_funs", ",", "l_final", "\n", "\n", "", "return", "params_curr", ",", "pred_funs", "\n", "\n", "# return the parameters", "\n", "", "", "", "trained_params", "=", "get_params", "(", "opt_state", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "        ", "l_final", "=", "loss_offsetnet", "(", "get_params", "(", "opt_state", ")", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ")", "\n", "return", "trained_params", ",", "pred_funs", ",", "l_final", "\n", "\n", "", "return", "trained_params", ",", "pred_funs", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.__init__": [[120, 178], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "weight_strategy", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "first_stage_strategy", ":", "str", "=", "T_STRATEGY", ",", "\n", "first_stage_args", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_layers_out_t", ":", "int", "=", "DEFAULT_LAYERS_OUT_T", ",", "\n", "n_layers_r_t", ":", "int", "=", "DEFAULT_LAYERS_R_T", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_units_out_t", ":", "int", "=", "DEFAULT_UNITS_OUT_T", ",", "\n", "n_units_r_t", ":", "int", "=", "DEFAULT_UNITS_R_T", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_t", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "step_size_t", ":", "float", "=", "DEFAULT_STEP_SIZE_T", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", ")", ":", "\n", "# settings", "\n", "        ", "self", ".", "weight_strategy", "=", "weight_strategy", "\n", "self", ".", "first_stage_strategy", "=", "first_stage_strategy", "\n", "self", ".", "first_stage_args", "=", "first_stage_args", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "\n", "# model architecture hyperparams", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_layers_out_t", "=", "n_layers_out_t", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "\n", "self", ".", "n_layers_r_t", "=", "n_layers_r_t", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_units_out_t", "=", "n_units_out_t", "\n", "self", ".", "n_units_r", "=", "n_units_r", "\n", "self", ".", "n_units_r_t", "=", "n_units_r_t", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "\n", "# other hyperparameters", "\n", "self", ".", "penalty_l2", "=", "penalty_l2", "\n", "self", ".", "penalty_l2_t", "=", "penalty_l2_t", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "step_size_t", "=", "step_size_t", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet._get_train_function": [[179, 181], ["None"], "methods", ["None"], ["", "def", "_get_train_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "train_x_net", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet._get_predict_function": [[182, 185], ["None"], "methods", ["None"], ["", "def", "_get_predict_function", "(", "self", ")", "->", "Callable", ":", "\n", "# Two step nets do not need this", "\n", "        ", "return", "predict_x_net", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict": [[186, 215], ["catenets.models.jax.model_utils.check_X_is_np", "xnet.XNet._get_predict_function", "xnet.XNet."], "methods", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_predict_function"], ["", "def", "predict", "(", "\n", "self", ",", "X", ":", "jnp", ".", "ndarray", ",", "return_po", ":", "bool", "=", "False", ",", "return_prop", ":", "bool", "=", "False", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Predict treatment effect estimates using a CATENet. Depending on method, can also return\n        potential outcome estimate and propensity score estimate.\n\n        Parameters\n        ----------\n        X: pd.DataFrame or np.array\n            Covariate matrix\n        return_po: bool, default False\n            Whether to return potential outcome estimate\n        return_prop: bool, default False\n            Whether to return propensity estimate\n\n        Returns\n        -------\n        array of CATE estimates, optionally also potential outcomes and propensity\n        \"\"\"", "\n", "X", "=", "check_X_is_np", "(", "X", ")", "\n", "predict_func", "=", "self", ".", "_get_predict_function", "(", ")", "\n", "return", "predict_func", "(", "\n", "X", ",", "\n", "trained_params", "=", "self", ".", "_params", ",", "\n", "predict_funs", "=", "self", ".", "_predict_funs", ",", "\n", "return_po", "=", "return_po", ",", "\n", "return_prop", "=", "return_prop", ",", "\n", "weight_strategy", "=", "self", ".", "weight_strategy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.train_x_net": [[218, 390], ["catenets.models.jax.model_utils.check_shape_1d_data", "catenets.debug", "xnet._get_first_stage_pos", "catenets.debug", "len", "w.reshape.reshape", "ValueError", "ValueError", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet._get_first_stage_pos", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only"], ["", "", "def", "train_x_net", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "weight_strategy", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "first_stage_strategy", ":", "str", "=", "T_STRATEGY", ",", "\n", "first_stage_args", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_layers_out_t", ":", "int", "=", "DEFAULT_LAYERS_OUT_T", ",", "\n", "n_layers_r_t", ":", "int", "=", "DEFAULT_LAYERS_R_T", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "n_units_out_t", ":", "int", "=", "DEFAULT_UNITS_OUT_T", ",", "\n", "n_units_r_t", ":", "int", "=", "DEFAULT_UNITS_R_T", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_l2_t", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "step_size_t", ":", "float", "=", "DEFAULT_STEP_SIZE_T", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", ")", "->", "Tuple", ":", "\n", "    ", "y", "=", "check_shape_1d_data", "(", "y", ")", "\n", "if", "len", "(", "w", ".", "shape", ")", ">", "1", ":", "\n", "        ", "w", "=", "w", ".", "reshape", "(", "(", "len", "(", "w", ")", ",", ")", ")", "\n", "\n", "", "if", "weight_strategy", "not", "in", "[", "0", ",", "1", ",", "-", "1", ",", "None", "]", ":", "\n", "# weight_strategy is coded as follows:", "\n", "# for tau(x)=g(x)tau_0(x) + (1-g(x))tau_1(x) [eq 9, kuenzel et al (2019)]", "\n", "# weight_strategy=0 sets g(x)=0, weight_strategy=1 sets g(x)=1,", "\n", "# weight_strategy=None sets g(x)=pi(x) [propensity score],", "\n", "# weight_strategy=-1 sets g(x)=(1-pi(x))", "\n", "        ", "raise", "ValueError", "(", "\"XNet only implements weight_strategy in [0, 1, -1, None]\"", ")", "\n", "\n", "", "if", "first_stage_strategy", "not", "in", "ALL_STRATEGIES", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Parameter first stage should be in \"", "\n", "\"catenets.models.twostep_nets.ALL_STRATEGIES. \"", "\n", "\"You passed {}\"", ".", "format", "(", "first_stage_strategy", ")", "\n", ")", "\n", "\n", "# first stage: get estimates of PO regression", "\n", "", "log", ".", "debug", "(", "\"Training first stage\"", ")", "\n", "\n", "mu_hat_0", ",", "mu_hat_1", "=", "_get_first_stage_pos", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", "first_stage_strategy", "=", "first_stage_strategy", ",", "\n", "first_stage_args", "=", "first_stage_args", ",", "\n", ")", "\n", "\n", "if", "weight_strategy", "is", "None", "or", "weight_strategy", "==", "-", "1", ":", "\n", "# also fit propensity estimator", "\n", "        ", "log", ".", "debug", "(", "\"Training propensity net\"", ")", "\n", "params_prop", ",", "predict_fun_prop", "=", "train_output_net_only", "(", "\n", "X", ",", "\n", "w", ",", "\n", "binary_y", "=", "True", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "params_prop", ",", "predict_fun_prop", "=", "None", ",", "None", "\n", "\n", "# second stage", "\n", "", "log", ".", "debug", "(", "\"Training second stage\"", ")", "\n", "if", "not", "weight_strategy", "==", "0", ":", "\n", "# fit tau_0", "\n", "        ", "log", ".", "debug", "(", "\"Fitting tau_0\"", ")", "\n", "pseudo_outcome0", "=", "mu_hat_1", "-", "y", "[", "w", "==", "0", "]", "\n", "params_tau0", ",", "predict_fun_tau0", "=", "train_output_net_only", "(", "\n", "X", "[", "w", "==", "0", "]", ",", "\n", "pseudo_outcome0", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_layers_out", "=", "n_layers_out_t", ",", "\n", "n_units_out", "=", "n_units_out_t", ",", "\n", "n_layers_r", "=", "n_layers_r_t", ",", "\n", "n_units_r", "=", "n_units_r_t", ",", "\n", "penalty_l2", "=", "penalty_l2_t", ",", "\n", "step_size", "=", "step_size_t", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "params_tau0", ",", "predict_fun_tau0", "=", "None", ",", "None", "\n", "\n", "", "if", "not", "weight_strategy", "==", "1", ":", "\n", "# fit tau_1", "\n", "        ", "log", ".", "debug", "(", "\"Fitting tau_1\"", ")", "\n", "pseudo_outcome1", "=", "y", "[", "w", "==", "1", "]", "-", "mu_hat_0", "\n", "params_tau1", ",", "predict_fun_tau1", "=", "train_output_net_only", "(", "\n", "X", "[", "w", "==", "1", "]", ",", "\n", "pseudo_outcome1", ",", "\n", "binary_y", "=", "False", ",", "\n", "n_layers_out", "=", "n_layers_out_t", ",", "\n", "n_units_out", "=", "n_units_out_t", ",", "\n", "n_layers_r", "=", "n_layers_r_t", ",", "\n", "n_units_r", "=", "n_units_r_t", ",", "\n", "penalty_l2", "=", "penalty_l2_t", ",", "\n", "step_size", "=", "step_size_t", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "params_tau1", ",", "predict_fun_tau1", "=", "None", ",", "None", "\n", "\n", "", "params", "=", "params_tau0", ",", "params_tau1", ",", "params_prop", "\n", "predict_funs", "=", "predict_fun_tau0", ",", "predict_fun_tau1", ",", "predict_fun_prop", "\n", "\n", "return", "params", ",", "predict_funs", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet._get_first_stage_pos": [[392, 464], ["train_fun", "predict_fun"], "function", ["None"], ["", "def", "_get_first_stage_pos", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "first_stage_strategy", ":", "str", "=", "T_STRATEGY", ",", "\n", "first_stage_args", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ":", "\n", "    ", "if", "first_stage_args", "is", "None", ":", "\n", "        ", "first_stage_args", "=", "{", "}", "\n", "\n", "", "train_fun", ":", "Callable", "\n", "predict_fun", ":", "Callable", "\n", "\n", "if", "first_stage_strategy", "==", "T_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_tnet", ",", "predict_t_net", "\n", "", "elif", "first_stage_strategy", "==", "S_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_snet", ",", "predict_snet", "\n", "", "elif", "first_stage_strategy", "==", "S1_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_snet1", ",", "predict_snet1", "\n", "", "elif", "first_stage_strategy", "==", "S2_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_snet2", ",", "predict_snet2", "\n", "", "elif", "first_stage_strategy", "==", "S3_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_snet3", ",", "predict_snet3", "\n", "", "elif", "first_stage_strategy", "==", "OFFSET_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_offsetnet", ",", "predict_offsetnet", "\n", "", "elif", "first_stage_strategy", "==", "FLEX_STRATEGY", ":", "\n", "        ", "train_fun", ",", "predict_fun", "=", "train_flextenet", ",", "predict_flextenet", "\n", "\n", "", "trained_params", ",", "pred_fun", "=", "train_fun", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", "**", "first_stage_args", "\n", ")", "\n", "\n", "_", ",", "mu_0", ",", "mu_1", "=", "predict_fun", "(", "X", ",", "trained_params", ",", "pred_fun", ",", "return_po", "=", "True", ")", "\n", "\n", "return", "mu_0", "[", "w", "==", "1", "]", ",", "mu_1", "[", "w", "==", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.predict_x_net": [[466, 509], ["NotImplementedError", "NotImplementedError", "predict_fun_tau0", "predict_fun_tau1", "predict_fun_prop"], "function", ["None"], ["", "def", "predict_x_net", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "trained_params", ":", "dict", ",", "\n", "predict_funs", ":", "list", ",", "\n", "return_po", ":", "bool", "=", "False", ",", "\n", "return_prop", ":", "bool", "=", "False", ",", "\n", "weight_strategy", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "if", "return_po", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"TwoStepNets have no Potential outcome predictors.\"", ")", "\n", "\n", "", "if", "return_prop", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"TwoStepNets have no Propensity predictors.\"", ")", "\n", "\n", "", "params_tau0", ",", "params_tau1", ",", "params_prop", "=", "trained_params", "\n", "predict_fun_tau0", ",", "predict_fun_tau1", ",", "predict_fun_prop", "=", "predict_funs", "\n", "\n", "tau0_pred", ":", "jnp", ".", "ndarray", "\n", "tau1_pred", ":", "jnp", ".", "ndarray", "\n", "\n", "if", "not", "weight_strategy", "==", "0", ":", "\n", "        ", "tau0_pred", "=", "predict_fun_tau0", "(", "params_tau0", ",", "X", ")", "\n", "", "else", ":", "\n", "        ", "tau0_pred", "=", "0", "\n", "\n", "", "if", "not", "weight_strategy", "==", "1", ":", "\n", "        ", "tau1_pred", "=", "predict_fun_tau1", "(", "params_tau1", ",", "X", ")", "\n", "", "else", ":", "\n", "        ", "tau1_pred", "=", "0", "\n", "\n", "", "if", "weight_strategy", "is", "None", "or", "weight_strategy", "==", "-", "1", ":", "\n", "        ", "prop_pred", "=", "predict_fun_prop", "(", "params_prop", ",", "X", ")", "\n", "\n", "", "if", "weight_strategy", "is", "None", ":", "\n", "        ", "weight", "=", "prop_pred", "\n", "", "elif", "weight_strategy", "==", "-", "1", ":", "\n", "        ", "weight", "=", "1", "-", "prop_pred", "\n", "", "elif", "weight_strategy", "==", "0", ":", "\n", "        ", "weight", "=", "0", "\n", "", "elif", "weight_strategy", "==", "1", ":", "\n", "        ", "weight", "=", "1", "\n", "\n", "", "return", "weight", "*", "tau0_pred", "+", "(", "1", "-", "weight", ")", "*", "tau1_pred", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.__init__.get_catenet": [[90, 96], ["ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils.aipw_te_transformation": [[16, 51], ["numpy.full", "len"], "function", ["None"], ["def", "aipw_te_transformation", "(", "\n", "y", ":", "np", ".", "ndarray", ",", "\n", "w", ":", "np", ".", "ndarray", ",", "\n", "p", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "\n", "mu_0", ":", "np", ".", "ndarray", ",", "\n", "mu_1", ":", "np", ".", "ndarray", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Transforms data to efficient influence function pseudo-outcome for CATE estimation\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        The treatment propensity, estimated or known. Can be None, then p=0.5 is assumed\n    mu_0: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group\n\n    Returns\n    -------\n    d_hat:\n        EIF transformation for CATE\n    \"\"\"", "\n", "if", "p", "is", "None", ":", "\n", "# assume equal", "\n", "        ", "p", "=", "np", ".", "full", "(", "len", "(", "y", ")", ",", "0.5", ")", "\n", "\n", "", "w_1", "=", "w", "/", "p", "\n", "w_0", "=", "(", "1", "-", "w", ")", "/", "(", "1", "-", "p", ")", "\n", "return", "(", "w_1", "-", "w_0", ")", "*", "y", "+", "(", "(", "1", "-", "w_1", ")", "*", "mu_1", "-", "(", "1", "-", "w_0", ")", "*", "mu_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils.ht_te_transformation": [[53, 85], ["numpy.full", "len"], "function", ["None"], ["", "def", "ht_te_transformation", "(", "\n", "y", ":", "np", ".", "ndarray", ",", "\n", "w", ":", "np", ".", "ndarray", ",", "\n", "p", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "mu_0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "mu_1", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Transform data to Horvitz-Thompson transformation for CATE\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        The treatment propensity, estimated or known. Can be None, then p=0.5 is assumed\n    mu_0: array-like of shape (n_samples,)\n        Placeholder, not used. Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Placerholder, not used. Estimated or known potential outcome mean of the treatment group\n\n    Returns\n    -------\n    res: array-like of shape (n_samples,)\n        Horvitz-Thompson transformed data\n    \"\"\"", "\n", "if", "p", "is", "None", ":", "\n", "# assume equal propensities", "\n", "        ", "p", "=", "np", ".", "full", "(", "len", "(", "y", ")", ",", "0.5", ")", "\n", "", "return", "(", "w", "/", "p", "-", "(", "1", "-", "w", ")", "/", "(", "1", "-", "p", ")", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils.ra_te_transformation": [[87, 116], ["None"], "function", ["None"], ["", "def", "ra_te_transformation", "(", "\n", "y", ":", "np", ".", "ndarray", ",", "\n", "w", ":", "np", ".", "ndarray", ",", "\n", "p", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "\n", "mu_0", ":", "np", ".", "ndarray", ",", "\n", "mu_1", ":", "np", ".", "ndarray", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Transform data to regression adjustment for CATE\n\n    Parameters\n    ----------\n    y : array-like of shape (n_samples,) or (n_samples, )\n        The observed outcome variable\n    w: array-like of shape (n_samples,)\n        The observed treatment indicator\n    p: array-like of shape (n_samples,)\n        Placeholder, not used. The treatment propensity, estimated or known.\n    mu_0: array-like of shape (n_samples,)\n         Estimated or known potential outcome mean of the control group\n    mu_1: array-like of shape (n_samples,)\n        Estimated or known potential outcome mean of the treatment group\n\n    Returns\n    -------\n    res: array-like of shape (n_samples,)\n        Regression adjusted transformation\n    \"\"\"", "\n", "return", "w", "*", "(", "y", "-", "mu_0", ")", "+", "(", "1", "-", "w", ")", "*", "(", "mu_1", "-", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function": [[125, 136], ["ValueError"], "function", ["None"], ["def", "_get_transformation_function", "(", "transformation_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"\n    Get transformation function associated with a name\n    \"\"\"", "\n", "if", "transformation_name", "not", "in", "ALL_TRANSFORMATIONS", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Parameter first stage should be in \"", "\n", "\"catenets.models.transformations.ALL_TRANSFORMATIONS.\"", "\n", "\" You passed {}\"", ".", "format", "(", "transformation_name", ")", "\n", ")", "\n", "", "return", "TRANSFORMATION_DICT", "[", "transformation_name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.FlexTENet.__init__": [[104, 164], ["None"], "methods", ["None"], ["\"Invalid number of tensor for the FlexSplitLayer layer. It requires the features vector and the treatments vector\"", "\n", ")", "\n", "", "if", "not", "self", ".", "first_layer", "and", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexSplitLayer layer. It requires X_s, X_p0, X_p1 and W as input\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "first_layer", ":", "\n", "            ", "X", "=", "tensors", "[", "0", "]", "\n", "W", "=", "tensors", "[", "1", "]", "\n", "\n", "rep_s", "=", "self", ".", "net_shared", "(", "X", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "X", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "X", ")", "\n", "\n", "", "else", ":", "\n", "            ", "X_s", "=", "tensors", "[", "0", "]", "\n", "X_p0", "=", "tensors", "[", "1", "]", "\n", "X_p1", "=", "tensors", "[", "2", "]", "\n", "W", "=", "tensors", "[", "3", "]", "\n", "\n", "rep_s", "=", "self", ".", "net_shared", "(", "X_s", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "[", "rep_s", ",", "rep_p0", ",", "rep_p1", ",", "W", "]", "\n", "\n", "\n", "", "", "class", "FlexTEOutputLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_units_in", ":", "int", ",", "n_units_in_p", ":", "int", ",", "private", ":", "bool", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "dropout_prob", ":", "float", "=", "0.5", ",", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTEOutputLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "private", "=", "private", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "dropout_prob", ")", ",", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net_shared", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "self", ".", "net_p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_units_in_p", ",", "1", ")", ")", ".", "to", "(", "\n", "DEVICE", "\n", ")", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the FlexSplitLayer layer. It requires X_s, X_p0, X_p1 and W as input\"", "\n", ")", "\n", "", "X_s", "=", "tensors", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.FlexTENet._get_train_function": [[165, 167], ["None"], "methods", ["None"], ["X_p0", "=", "tensors", "[", "1", "]", "\n", "X_p1", "=", "tensors", "[", "2", "]", "\n", "W", "=", "tensors", "[", "3", "]", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.FlexTENet._get_predict_function": [[168, 170], ["None"], "methods", ["None"], ["\n", "if", "self", ".", "private", ":", "\n", "            ", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.train_flextenet": [[172, 556], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "flextenet.FlexTENetArchitecture", "flextenet.SplitLayerAsymmetric.init_fun", "opt_init", "numpy.arange", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "jax.experimental.optimizers.adam", "get_params", "opt_update", "int", "range", "get_params", "range", "get_params", "opt_init2", "range", "get_params2", "predict_fun", "flextenet._compute_penalty", "predict_fun", "flextenet._compute_penalty", "jax.experimental.optimizers.sgd", "ValueError", "jax.grad", "numpy.round", "numpy.random.shuffle", "range", "flextenet.train_flextenet.loss"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.FlexTENetArchitecture", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_penalty", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_penalty", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.torch.flextenet.FlexTENet.loss"], ["\n", "return", "(", "1", "-", "W", ")", "*", "rep_p0", "+", "W", "*", "rep_p1", "\n", "", "else", ":", "\n", "            ", "rep_s", "=", "self", ".", "net_shared", "(", "X_s", ")", ".", "squeeze", "(", ")", "\n", "rep_p0", "=", "self", ".", "net_p0", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p0", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "rep_p1", "=", "self", ".", "net_p1", "(", "torch", ".", "cat", "(", "[", "X_s", ",", "X_p1", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "(", "1", "-", "W", ")", "*", "rep_p0", "+", "W", "*", "rep_p1", "+", "rep_s", "\n", "\n", "\n", "", "", "", "class", "ElementWiseParallelActivation", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Layer that applies a scalar function elementwise on its inputs.\n\n    Input looks like: X_s, X_p0, X_p1, t = inputs\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "act", ":", "Callable", ",", "**", "act_kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", "ElementWiseParallelActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "act_kwargs", "=", "act_kwargs", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the ElementWiseParallelActivation layer. It requires X_s, X_p0, X_p1, t as input\"", "\n", ")", "\n", "\n", "", "return", "[", "\n", "self", ".", "act", "(", "tensors", "[", "0", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "self", ".", "act", "(", "tensors", "[", "1", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "self", ".", "act", "(", "tensors", "[", "2", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "tensors", "[", "3", "]", ",", "\n", "]", "\n", "\n", "\n", "", "", "class", "ElementWiseSplitActivation", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Layer that applies a scalar function elementwise on its inputs.\n\n    Input looks like: X, t = inputs\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "act", ":", "Callable", ",", "**", "act_kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", "ElementWiseSplitActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "act_kwargs", "=", "act_kwargs", "\n", "\n", "", "def", "forward", "(", "self", ",", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "List", ":", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid number of tensor for the ElementWiseSplitActivation layer. It requires X, t as input\"", "\n", ")", "\n", "\n", "", "return", "[", "\n", "self", ".", "act", "(", "tensors", "[", "0", "]", ",", "**", "self", ".", "act_kwargs", ")", ",", "\n", "tensors", "[", "1", "]", ",", "\n", "]", "\n", "\n", "\n", "", "", "class", "FlexTENet", "(", "BaseCATEEstimator", ")", ":", "\n", "    ", "\"\"\"\n    CLass implements FlexTENet, an architecture for treatment effect estimation that allows for\n    both shared and private information in each layer of the network.\n\n    Parameters\n    ----------\n    n_unit_in: int\n        Number of features\n    binary_y: bool, default False\n        Whether the outcome is binary\n    n_layers_out: int\n        Number of hypothesis layers (n_layers_out x n_units_out + 1 x Linear layer)\n    n_units_s_out: int\n        Number of hidden units in each shared hypothesis layer\n    n_units_p_out: int\n        Number of hidden units in each private hypothesis layer\n    n_layers_r: int\n        Number of representation layers before hypothesis layers (distinction between\n        hypothesis layers and representation layers is made to match TARNet & SNets)\n    n_units_s_r: int\n        Number of hidden units in each shared representation layer\n    n_units_s_r: int\n        Number of hidden units in each private representation layer\n    private_out: bool, False\n        Whether the final prediction layer should be fully private, or retain a shared component.\n    weight_decay: float\n        l2 (ridge) penalty\n    penalty_orthogonal: float\n        orthogonalisation penalty\n    lr: float\n        learning rate for optimizer\n    n_iter: int\n        Maximum number of iterations\n    batch_size: int\n        Batch size\n    val_split_prop: float\n        Proportion of samples used for validation split (can be 0)\n    early_stopping: bool, default True\n        Whether to use early stopping\n    patience: int\n        Number of iterations to wait before early stopping after decrease in validation loss\n    n_iter_min: int\n        Minimum number of iterations to go through before starting early stopping\n    n_iter_print: int\n        Number of iterations after which to print updates\n    seed: int\n        Seed used\n    opt: str, default 'adam'\n        Optimizer to use, accepts 'adam' and 'sgd'\n    shared_repr: bool, False\n        Whether to use a shared representation block as TARNet\n    lr_scale: float\n        Whether to scale down the learning rate after unfreezing the private components of the\n        network (only used if pretrain_shared=True)\n    normalize_ortho: bool, False\n        Whether to normalize the orthogonality penalty (by depth of network)\n    clipping_value: int, default 1\n        Gradients clipping value\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "n_unit_in", ":", "int", ",", "\n", "binary_y", ":", "bool", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_s_out", ":", "int", "=", "DEFAULT_DIM_S_OUT", ",", "\n", "n_units_p_out", ":", "int", "=", "DEFAULT_DIM_P_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_s_r", ":", "int", "=", "DEFAULT_DIM_S_R", ",", "\n", "n_units_p_r", ":", "int", "=", "DEFAULT_DIM_P_R", ",", "\n", "private_out", ":", "bool", "=", "False", ",", "\n", "weight_decay", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "penalty_orthogonal", ":", "float", "=", "DEFAULT_PENALTY_ORTHOGONAL", ",", "\n", "lr", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "shared_repr", ":", "bool", "=", "False", ",", "\n", "normalize_ortho", ":", "bool", "=", "False", ",", "\n", "mode", ":", "int", "=", "1", ",", "\n", "clipping_value", ":", "int", "=", "1", ",", "\n", "dropout", ":", "bool", "=", "False", ",", "\n", "dropout_prob", ":", "float", "=", "0.5", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "FlexTENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "if", "n_layers_r", "else", "1", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_s_out", "=", "n_units_s_out", "\n", "self", ".", "n_units_p_out", "=", "n_units_p_out", "\n", "self", ".", "n_units_s_r", "=", "n_units_s_r", "\n", "self", ".", "n_units_p_r", "=", "n_units_p_r", "\n", "self", ".", "private_out", "=", "private_out", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "penalty_orthogonal", "=", "penalty_orthogonal", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "shared_repr", "=", "shared_repr", "\n", "self", ".", "normalize_ortho", "=", "normalize_ortho", "\n", "self", ".", "clipping_value", "=", "clipping_value", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "shared_repr", ":", "# fully shared representation as in TARNet", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTELinearLayer", "(", "\"shared_repr_layer_0\"", ",", "dropout", ",", "dropout_prob", ",", "\n", "n_unit_in", ",", "n_units_s_r", ")", ",", "\n", "ElementWiseSplitActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers_r", "-", "1", ")", ":", "\n", "                ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTELinearLayer", "(", "\n", "f\"shared_repr_layer_{i + 1}\"", ",", "dropout", ",", "dropout_prob", ",", "n_units_s_r", ",", "\n", "n_units_s_r", "\n", ")", ",", "\n", "ElementWiseSplitActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "", "else", ":", "# shared AND private representations", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "\"shared_private_layer_0\"", ",", "\n", "n_unit_in", ",", "\n", "n_unit_in", ",", "\n", "n_units_s_r", ",", "\n", "n_units_p_r", ",", "\n", "first_layer", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "n_layers_r", "-", "1", ")", ":", "\n", "                ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "f\"shared_private_layer_{i + 1}\"", ",", "\n", "n_units_s_r", ",", "\n", "n_units_s_r", "+", "n_units_p_r", ",", "\n", "n_units_s_r", ",", "\n", "n_units_p_r", ",", "\n", "first_layer", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add output layers", "\n", "", "", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "\"output_layer_0\"", ",", "\n", "n_units_s_r", ",", "\n", "n_units_s_r", "if", "shared_repr", "else", "n_units_s_r", "+", "n_units_p_r", ",", "\n", "n_units_s_out", ",", "\n", "n_units_p_out", ",", "\n", "first_layer", "=", "(", "shared_repr", ")", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# add required number of layers", "\n", "for", "i", "in", "range", "(", "n_layers_out", "-", "1", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "FlexTESplitLayer", "(", "\n", "f\"output_layer_{i + 1}\"", ",", "\n", "n_units_s_out", ",", "\n", "n_units_s_out", "+", "n_units_p_out", ",", "\n", "n_units_s_out", ",", "\n", "n_units_p_out", ",", "\n", "first_layer", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", "dropout_prob", "=", "dropout_prob", "\n", ")", ",", "\n", "ElementWiseParallelActivation", "(", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# append final layer", "\n", "", "layers", ".", "append", "(", "\n", "FlexTEOutputLayer", "(", "\n", "n_units_s_out", ",", "n_units_s_out", "+", "n_units_p_out", ",", "private", "=", "self", ".", "private_out", ",", "\n", "dropout", "=", "dropout", ",", "dropout_prob", "=", "dropout_prob", "\n", ")", "\n", ")", "\n", "if", "binary_y", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "def", "_ortho_penalty_asymmetric", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "_get_cos_reg", "(", "\n", "params_0", ":", "torch", ".", "Tensor", ",", "params_1", ":", "torch", ".", "Tensor", ",", "normalize", ":", "bool", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "normalize", ":", "\n", "                ", "params_0", "=", "params_0", "/", "torch", ".", "linalg", ".", "norm", "(", "params_0", ",", "dim", "=", "0", ")", "\n", "params_1", "=", "params_1", "/", "torch", ".", "linalg", ".", "norm", "(", "params_1", ",", "dim", "=", "0", ")", "\n", "\n", "", "x_min", "=", "min", "(", "params_0", ".", "shape", "[", "0", "]", ",", "params_1", ".", "shape", "[", "0", "]", ")", "\n", "y_min", "=", "min", "(", "params_0", ".", "shape", "[", "1", "]", ",", "params_1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "linalg", ".", "norm", "(", "\n", "params_0", "[", ":", "x_min", ",", ":", "y_min", "]", "*", "params_1", "[", ":", "x_min", ",", ":", "y_min", "]", ",", "\"fro\"", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "\n", "", "def", "_apply_reg_split_layer", "(", "\n", "layer", ":", "FlexTESplitLayer", ",", "full", ":", "bool", "=", "True", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "_ortho_body", "=", "0", "\n", "if", "full", ":", "\n", "                ", "_ortho_body", "=", "_get_cos_reg", "(", "\n", "layer", ".", "net_p0", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p1", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", "", "_ortho_body", "+=", "torch", ".", "sum", "(", "\n", "_get_cos_reg", "(", "\n", "layer", ".", "net_shared", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p0", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", "+", "_get_cos_reg", "(", "\n", "layer", ".", "net_shared", "[", "-", "1", "]", ".", "weight", ",", "\n", "layer", ".", "net_p1", "[", "-", "1", "]", ".", "weight", ",", "\n", "self", ".", "normalize_ortho", ",", "\n", ")", "\n", ")", "\n", "return", "_ortho_body", "\n", "\n", "", "ortho_body", "=", "0", "\n", "for", "layer", "in", "self", ".", "model", ":", "\n", "            ", "if", "not", "isinstance", "(", "layer", ",", "(", "FlexTESplitLayer", ",", "FlexTEOutputLayer", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "FlexTESplitLayer", ")", ":", "\n", "                ", "ortho_body", "+=", "_apply_reg_split_layer", "(", "layer", ",", "full", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "private_out", ":", "\n", "                ", "continue", "\n", "\n", "", "ortho_body", "+=", "_apply_reg_split_layer", "(", "layer", ",", "full", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "penalty_orthogonal", "*", "ortho_body", "\n", "\n", "", "def", "loss", "(", "\n", "self", ",", "\n", "y0_pred", ":", "torch", ".", "Tensor", ",", "\n", "y1_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "t_true", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "def", "head_loss", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "if", "self", ".", "binary_y", ":", "\n", "                ", "return", "nn", ".", "BCELoss", "(", ")", "(", "y_pred", ",", "y_true", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "y_pred", "-", "y_true", ")", "**", "2", "\n", "\n", "", "", "def", "po_loss", "(", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "loss0", "=", "torch", ".", "mean", "(", "(", "1.0", "-", "t_true", ")", "*", "head_loss", "(", "y0_pred", ",", "y_true", ")", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "t_true", "*", "head_loss", "(", "y1_pred", ",", "y_true", ")", ")", "\n", "\n", "return", "loss0", "+", "loss1", "\n", "\n", "", "return", "po_loss", "(", ")", "+", "self", ".", "_ortho_penalty_asymmetric", "(", ")", "\n", "\n", "", "def", "train", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "w", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "\"FlexTENet\"", ":", "\n", "        ", "\"\"\"\n        Fit treatment models.\n\n        Parameters\n        ----------\n        X : torch.Tensor of shape (n_samples, n_features)\n            The features to fit to\n        y : torch.Tensor of shape (n_samples,) or (n_samples, )\n            The outcome variable\n        w: torch.Tensor of shape (n_samples,)\n            The treatment indicator\n        \"\"\"", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", ".", "to", "(", "DEVICE", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "squeeze", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "w", "=", "torch", ".", "Tensor", "(", "w", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.predict_flextenet": [[558, 584], ["catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "predict_funs", "predict_funs", "jax.ones", "jax.zeros", "ValueError"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], [")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "self", ".", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "np", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "np", ".", "arange", "(", "n", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "\n", "# training", "\n", "val_loss_best", "=", "LARGE_VAL", "\n", "patience", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "train_loss", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg": [[587, 595], ["jax.linalg.norm", "jax.linalg.norm", "jax.linalg.norm", "jax.dot", "jax.transpose"], "function", ["None"], ["w_next", "=", "w", "[", "idx_next", "]", ".", "squeeze", "(", ")", "\n", "\n", "_", ",", "mu0", ",", "mu1", "=", "self", ".", "predict", "(", "X_next", ",", "return_po", "=", "True", ",", "training", "=", "True", ")", "\n", "batch_loss", "=", "self", ".", "loss", "(", "mu0", ",", "mu1", ",", "y_next", ",", "w_next", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_ortho_penalty_asymmetric": [[597, 652], ["flextenet._get_cos_reg", "sum", "range", "flextenet._get_cos_reg", "flextenet._get_cos_reg", "flextenet._get_cos_reg", "flextenet._get_cos_reg", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._get_cos_reg"], ["\n", "train_loss", ".", "append", "(", "batch_loss", ".", "detach", "(", ")", ")", "\n", "\n", "", "train_loss", "=", "torch", ".", "Tensor", "(", "train_loss", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "if", "self", ".", "early_stopping", "or", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "_", ",", "mu0", ",", "mu1", "=", "self", ".", "predict", "(", "X_val", ",", "return_po", "=", "True", ",", "training", "=", "True", ")", "\n", "val_loss", "=", "self", ".", "loss", "(", "mu0", ",", "mu1", ",", "y_val", ",", "w_val", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                        ", "if", "val_loss_best", ">", "val_loss", ":", "\n", "                            ", "val_loss_best", "=", "val_loss", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                            ", "patience", "+=", "1", "\n", "", "if", "patience", ">", "self", ".", "patience", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "self", ".", "n_iter_min", ")", ":", "\n", "                            ", "break", "\n", "", "", "if", "i", "%", "self", ".", "n_iter_print", "==", "0", ":", "\n", "                        ", "log", ".", "info", "(", "\n", "f\"[FlexTENet] Epoch: {i}, current {val_string} loss: {val_loss} train_loss: {torch.mean(train_loss)}\"", "\n", ")", "\n", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "return_po", ":", "bool", "=", "False", ",", "training", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Predict treatment effects and potential outcomes\n\n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            Test-sample features\n        Returns\n        -------\n        y: array-like of shape (n_samples,)\n        \"\"\"", "\n", "if", "not", "training", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "X", "=", "self", ".", "_check_tensor", "(", "X", ")", ".", "float", "(", ")", "\n", "W0", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "W1", "=", "torch", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "mu0", "=", "self", ".", "model", "(", "[", "X", ",", "W0", "]", ")", "\n", "mu1", "=", "self", ".", "model", "(", "[", "X", ",", "W1", "]", ")", "\n", "\n", "te", "=", "mu1", "-", "mu0", "\n", "\n", "if", "return_po", ":", "\n", "            ", "return", "te", ",", "mu0", ",", "mu1", "\n", "\n", "", "return", "te", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_penalty_l2": [[654, 726], ["sum", "sum", "jax.sum", "sum", "sum", "sum", "jax.sum", "jax.sum", "jax.sum", "jax.sum", "jax.sum", "range", "jax.sum", "sum", "range", "sum", "jax.sum", "range", "range", "range", "jax.sum", "jax.sum", "range", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_penalty": [[728, 763], ["flextenet._compute_penalty_l2", "flextenet._compute_ortho_penalty_asymmetric"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_penalty_l2", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet._compute_ortho_penalty_asymmetric"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.SplitLayerAsymmetric": [[767, 813], ["jax.experimental.stax.Dense", "jax.experimental.stax.Dense", "jax.random.split", "apply_s", "apply_s", "kwargs.keys", "apply_p", "apply_p", "apply_p", "apply_p", "jax.concatenate", "jax.concatenate", "init_s", "init_p", "init_p", "init_s", "init_p", "init_p"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.TEOutputLayerAsymmetric": [[815, 860], ["jax.experimental.stax.Dense", "jax.random.split", "apply_f", "apply_f", "jax.random.split", "apply_f", "jax.concatenate", "jax.concatenate", "apply_f", "apply_f", "kwargs.keys", "jax.concatenate", "jax.concatenate", "init_f", "init_f", "init_f", "init_f", "init_f", "init_f", "init_f", "init_f"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.FlexTENetArchitecture": [[862, 937], ["ValueError", "Layer", "range", "jax.experimental.stax.serial", "jax.experimental.stax.serial", "range", "range", "Head", "Head", "flextenet.DenseW", "Layer", "Layer", "flextenet.DenseW", "Layer"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.DenseW", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.DenseW"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.elementwise_split": [[941, 954], ["jax.experimental.stax.elu"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.elementwise_parallel": [[959, 978], ["fun", "jax.experimental.stax.elu"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.flextenet.DenseW": [[983, 1003], ["jax.experimental.stax.glorot_normal", "jax.experimental.stax.normal", "jax.random.split", "W_init", "b_init", "jax.dot"], "function", ["None"], []], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet.__init__": [[86, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "train_separate", ":", "bool", "=", "True", ",", "\n", "penalty_diff", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "binary_y", "=", "binary_y", "\n", "self", ".", "n_layers_out", "=", "n_layers_out", "\n", "self", ".", "n_units_out", "=", "n_units_out", "\n", "self", ".", "n_layers_r", "=", "n_layers_r", "\n", "self", ".", "n_units_r", "=", "n_units_r", "\n", "self", ".", "penalty_l2", "=", "penalty_l2", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "val_split_prop", "=", "val_split_prop", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "n_iter_min", "=", "n_iter_min", "\n", "self", ".", "n_iter_print", "=", "n_iter_print", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "train_separate", "=", "train_separate", "\n", "self", ".", "penalty_diff", "=", "penalty_diff", "\n", "self", ".", "nonlin", "=", "nonlin", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_predict_function": [[126, 128], ["None"], "methods", ["None"], ["", "def", "_get_predict_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "predict_t_net", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.TNet._get_train_function": [[129, 131], ["None"], "methods", ["None"], ["", "def", "_get_train_function", "(", "self", ")", "->", "Callable", ":", "\n", "        ", "return", "train_tnet", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.train_tnet": [[133, 247], ["len", "w.reshape.reshape", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "catenets.debug", "catenets.models.jax.base.train_output_net_only", "tnet._train_tnet_jointly", "len"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.catenets.logger.debug", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.train_output_net_only", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet._train_tnet_jointly"], ["", "", "def", "train_tnet", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "train_separate", ":", "bool", "=", "True", ",", "\n", "penalty_diff", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", ")", "->", "Any", ":", "\n", "# w should be 1-D for indexing", "\n", "    ", "if", "len", "(", "w", ".", "shape", ")", ">", "1", ":", "\n", "        ", "w", "=", "w", ".", "reshape", "(", "(", "len", "(", "w", ")", ",", ")", ")", "\n", "\n", "", "if", "train_separate", ":", "\n", "# train two heads completely independently", "\n", "        ", "log", ".", "debug", "(", "\"Training PO_0 Net\"", ")", "\n", "out_0", "=", "train_output_net_only", "(", "\n", "X", "[", "w", "==", "0", "]", ",", "\n", "y", "[", "w", "==", "0", "]", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", ")", "\n", "log", ".", "debug", "(", "\"Training PO_1 Net\"", ")", "\n", "out_1", "=", "train_output_net_only", "(", "\n", "X", "[", "w", "==", "1", "]", ",", "\n", "y", "[", "w", "==", "1", "]", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", "avg_objective", "=", "avg_objective", ",", "\n", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "            ", "params_0", ",", "predict_fun_0", ",", "loss_0", "=", "out_0", "\n", "params_1", ",", "predict_fun_1", ",", "loss_1", "=", "out_1", "\n", "return", "(", "params_0", ",", "params_1", ")", ",", "(", "predict_fun_0", ",", "predict_fun_1", ")", ",", "loss_1", "+", "loss_0", "\n", "\n", "", "params_0", ",", "predict_fun_0", "=", "out_0", "\n", "params_1", ",", "predict_fun_1", "=", "out_1", "\n", "", "else", ":", "\n", "# train jointly by regularizing similarity", "\n", "        ", "params", ",", "predict_fun", "=", "_train_tnet_jointly", "(", "\n", "X", ",", "\n", "y", ",", "\n", "w", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "penalty_l2", "=", "penalty_l2", ",", "\n", "step_size", "=", "step_size", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "val_split_prop", "=", "val_split_prop", ",", "\n", "early_stopping", "=", "early_stopping", ",", "\n", "patience", "=", "patience", ",", "\n", "n_iter_min", "=", "n_iter_min", ",", "\n", "n_iter_print", "=", "n_iter_print", ",", "\n", "seed", "=", "seed", ",", "\n", "return_val_loss", "=", "return_val_loss", ",", "\n", "penalty_diff", "=", "penalty_diff", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "params_0", ",", "params_1", "=", "params", "[", "0", "]", ",", "params", "[", "1", "]", "\n", "predict_fun_0", ",", "predict_fun_1", "=", "predict_fun", ",", "predict_fun", "\n", "\n", "", "return", "(", "params_0", ",", "params_1", ")", ",", "(", "predict_fun_0", ",", "predict_fun_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet.predict_t_net": [[249, 270], ["predict_fun_0", "predict_fun_1", "NotImplementedError"], "function", ["None"], ["", "def", "predict_t_net", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "trained_params", ":", "dict", ",", "\n", "predict_funs", ":", "list", ",", "\n", "return_po", ":", "bool", "=", "False", ",", "\n", "return_prop", ":", "bool", "=", "False", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "if", "return_prop", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"TNet does not implement a propensity model.\"", ")", "\n", "\n", "# return CATE predictions using T-net params", "\n", "", "params_0", ",", "params_1", "=", "trained_params", "\n", "predict_fun_0", ",", "predict_fun_1", "=", "predict_funs", "\n", "\n", "mu_0", "=", "predict_fun_0", "(", "params_0", ",", "X", ")", "\n", "mu_1", "=", "predict_fun_1", "(", "params_1", ",", "X", ")", "\n", "\n", "if", "return_po", ":", "\n", "        ", "return", "mu_1", "-", "mu_0", ",", "mu_0", ",", "mu_1", "\n", "", "else", ":", "\n", "        ", "return", "mu_1", "-", "mu_0", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.tnet._train_tnet_jointly": [[272, 459], ["jax.random.PRNGKey", "numpy.random.seed", "catenets.models.jax.model_utils.make_val_split", "catenets.models.jax.base.OutputHead", "jax.experimental.optimizers.adam", "opt_init", "numpy.arange", "range", "get_params", "catenets.models.jax.model_utils.check_shape_1d_data", "catenets.models.jax.model_utils.check_shape_1d_data", "tnet._train_tnet_jointly.loss_head"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.OutputHead", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["", "", "def", "_train_tnet_jointly", "(", "\n", "X", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "jnp", ".", "ndarray", ",", "\n", "w", ":", "jnp", ".", "ndarray", ",", "\n", "binary_y", ":", "bool", "=", "False", ",", "\n", "n_layers_out", ":", "int", "=", "DEFAULT_LAYERS_OUT", ",", "\n", "n_units_out", ":", "int", "=", "DEFAULT_UNITS_OUT", ",", "\n", "n_layers_r", ":", "int", "=", "DEFAULT_LAYERS_R", ",", "\n", "n_units_r", ":", "int", "=", "DEFAULT_UNITS_R", ",", "\n", "penalty_l2", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "step_size", ":", "float", "=", "DEFAULT_STEP_SIZE", ",", "\n", "n_iter", ":", "int", "=", "DEFAULT_N_ITER", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "val_split_prop", ":", "float", "=", "DEFAULT_VAL_SPLIT", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", "patience", ":", "int", "=", "DEFAULT_PATIENCE", ",", "\n", "n_iter_min", ":", "int", "=", "DEFAULT_N_ITER_MIN", ",", "\n", "n_iter_print", ":", "int", "=", "DEFAULT_N_ITER_PRINT", ",", "\n", "seed", ":", "int", "=", "DEFAULT_SEED", ",", "\n", "return_val_loss", ":", "bool", "=", "False", ",", "\n", "same_init", ":", "bool", "=", "True", ",", "\n", "penalty_diff", ":", "float", "=", "DEFAULT_PENALTY_L2", ",", "\n", "nonlin", ":", "str", "=", "DEFAULT_NONLIN", ",", "\n", "avg_objective", ":", "bool", "=", "DEFAULT_AVG_OBJECTIVE", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# input check", "\n", "    ", "y", ",", "w", "=", "check_shape_1d_data", "(", "y", ")", ",", "check_shape_1d_data", "(", "w", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "input_shape", "=", "(", "-", "1", ",", "d", ")", "\n", "rng_key", "=", "random", ".", "PRNGKey", "(", "seed", ")", "\n", "onp", ".", "random", ".", "seed", "(", "seed", ")", "# set seed for data generation via numpy as well", "\n", "\n", "# get validation split (can be none)", "\n", "X", ",", "y", ",", "w", ",", "X_val", ",", "y_val", ",", "w_val", ",", "val_string", "=", "make_val_split", "(", "\n", "X", ",", "y", ",", "w", ",", "val_split_prop", "=", "val_split_prop", ",", "seed", "=", "seed", "\n", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "# could be different from before due to split", "\n", "\n", "# get output head functions (both heads share same structure)", "\n", "init_fun_head", ",", "predict_fun_head", "=", "OutputHead", "(", "\n", "n_layers_out", "=", "n_layers_out", ",", "\n", "n_units_out", "=", "n_units_out", ",", "\n", "binary_y", "=", "binary_y", ",", "\n", "n_layers_r", "=", "n_layers_r", ",", "\n", "n_units_r", "=", "n_units_r", ",", "\n", "nonlin", "=", "nonlin", ",", "\n", ")", "\n", "\n", "# Define loss functions", "\n", "# loss functions for the head", "\n", "if", "not", "binary_y", ":", "\n", "\n", "        ", "def", "loss_head", "(", "\n", "params", ":", "List", ",", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# mse loss function", "\n", "            ", "inputs", ",", "targets", ",", "weights", "=", "batch", "\n", "preds", "=", "predict_fun_head", "(", "params", ",", "inputs", ")", "\n", "return", "jnp", ".", "sum", "(", "weights", "*", "(", "(", "preds", "-", "targets", ")", "**", "2", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "def", "loss_head", "(", "\n", "params", ":", "List", ",", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# mse loss function", "\n", "            ", "inputs", ",", "targets", ",", "weights", "=", "batch", "\n", "preds", "=", "predict_fun_head", "(", "params", ",", "inputs", ")", "\n", "return", "-", "jnp", ".", "sum", "(", "\n", "weights", "\n", "*", "(", "targets", "*", "jnp", ".", "log", "(", "preds", ")", "+", "(", "1", "-", "targets", ")", "*", "jnp", ".", "log", "(", "1", "-", "preds", ")", ")", "\n", ")", "\n", "\n", "", "", "@", "jit", "\n", "def", "loss_tnet", "(", "\n", "params", ":", "List", ",", "\n", "batch", ":", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ",", "\n", "penalty_l2", ":", "float", ",", "\n", "penalty_diff", ":", "float", ",", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# params: list[representation, head_0, head_1]", "\n", "# batch: (X, y, w)", "\n", "        ", "X", ",", "y", ",", "w", "=", "batch", "\n", "\n", "# pass down to two heads", "\n", "loss_0", "=", "loss_head", "(", "params", "[", "0", "]", ",", "(", "X", ",", "y", ",", "1", "-", "w", ")", ")", "\n", "loss_1", "=", "loss_head", "(", "params", "[", "1", "]", ",", "(", "X", ",", "y", ",", "w", ")", ")", "\n", "\n", "# regularization", "\n", "weightsq_head", "=", "heads_l2_penalty", "(", "\n", "params", "[", "0", "]", ",", "\n", "params", "[", "1", "]", ",", "\n", "n_layers_r", "+", "n_layers_out", ",", "\n", "True", ",", "\n", "penalty_l2", ",", "\n", "penalty_diff", ",", "\n", ")", "\n", "if", "not", "avg_objective", ":", "\n", "            ", "return", "loss_0", "+", "loss_1", "+", "0.5", "*", "(", "weightsq_head", ")", "\n", "", "else", ":", "\n", "            ", "n_batch", "=", "y", ".", "shape", "[", "0", "]", "\n", "return", "(", "loss_0", "+", "loss_1", ")", "/", "n_batch", "+", "0.5", "*", "(", "weightsq_head", ")", "\n", "\n", "# Define optimisation routine", "\n", "", "", "opt_init", ",", "opt_update", ",", "get_params", "=", "optimizers", ".", "adam", "(", "step_size", "=", "step_size", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "\n", "i", ":", "int", ",", "state", ":", "dict", ",", "batch", ":", "jnp", ".", "ndarray", ",", "penalty_l2", ":", "float", ",", "penalty_diff", ":", "float", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "# updating function", "\n", "        ", "params", "=", "get_params", "(", "state", ")", "\n", "return", "opt_update", "(", "\n", "i", ",", "grad", "(", "loss_tnet", ")", "(", "params", ",", "batch", ",", "penalty_l2", ",", "penalty_diff", ")", ",", "state", "\n", ")", "\n", "\n", "# initialise states", "\n", "", "if", "same_init", ":", "\n", "        ", "_", ",", "init_head", "=", "init_fun_head", "(", "rng_key", ",", "input_shape", ")", "\n", "init_params", "=", "[", "init_head", ",", "init_head", "]", "\n", "", "else", ":", "\n", "        ", "rng_key", ",", "rng_key_2", "=", "random", ".", "split", "(", "rng_key", ")", "\n", "_", ",", "init_head_0", "=", "init_fun_head", "(", "rng_key", ",", "input_shape", ")", "\n", "_", ",", "init_head_1", "=", "init_fun_head", "(", "rng_key_2", ",", "input_shape", ")", "\n", "init_params", "=", "[", "init_head_0", ",", "init_head_1", "]", "\n", "\n", "", "opt_state", "=", "opt_init", "(", "init_params", ")", "\n", "\n", "# calculate number of batches per epoch", "\n", "batch_size", "=", "batch_size", "if", "batch_size", "<", "n", "else", "n", "\n", "n_batches", "=", "int", "(", "onp", ".", "round", "(", "n", "/", "batch_size", ")", ")", "if", "batch_size", "<", "n", "else", "1", "\n", "train_indices", "=", "onp", ".", "arange", "(", "n", ")", "\n", "\n", "l_best", "=", "LARGE_VAL", "\n", "p_curr", "=", "0", "\n", "\n", "# do training", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "# shuffle data for minibatches", "\n", "        ", "onp", ".", "random", ".", "shuffle", "(", "train_indices", ")", "\n", "for", "b", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "idx_next", "=", "train_indices", "[", "\n", "(", "b", "*", "batch_size", ")", ":", "min", "(", "(", "b", "+", "1", ")", "*", "batch_size", ",", "n", "-", "1", ")", "\n", "]", "\n", "next_batch", "=", "X", "[", "idx_next", ",", ":", "]", ",", "y", "[", "idx_next", ",", ":", "]", ",", "w", "[", "idx_next", "]", "\n", "opt_state", "=", "update", "(", "\n", "i", "*", "n_batches", "+", "b", ",", "opt_state", ",", "next_batch", ",", "penalty_l2", ",", "penalty_diff", "\n", ")", "\n", "\n", "", "if", "(", "i", "%", "n_iter_print", "==", "0", ")", "or", "early_stopping", ":", "\n", "            ", "params_curr", "=", "get_params", "(", "opt_state", ")", "\n", "l_curr", "=", "loss_tnet", "(", "\n", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "penalty_l2", ",", "penalty_diff", "\n", ")", "\n", "\n", "", "if", "i", "%", "n_iter_print", "==", "0", ":", "\n", "            ", "log", ".", "debug", "(", "f\"Epoch: {i}, current {val_string} loss {l_curr}\"", ")", "\n", "\n", "", "if", "early_stopping", "and", "(", "(", "i", "+", "1", ")", "*", "n_batches", ">", "n_iter_min", ")", ":", "\n", "            ", "if", "l_curr", "<", "l_best", ":", "\n", "                ", "l_best", "=", "l_curr", "\n", "p_curr", "=", "0", "\n", "params_best", "=", "params_curr", "\n", "", "else", ":", "\n", "                ", "if", "onp", ".", "isnan", "(", "l_curr", ")", ":", "\n", "# if diverged, return best", "\n", "                    ", "return", "params_best", ",", "predict_fun_head", "\n", "", "p_curr", "=", "p_curr", "+", "1", "\n", "\n", "", "if", "p_curr", ">", "patience", ":", "\n", "                ", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "                    ", "l_final", "=", "loss_tnet", "(", "params_curr", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ")", "\n", "return", "params_curr", ",", "predict_fun_head", ",", "l_final", "\n", "\n", "", "return", "params_curr", ",", "predict_fun_head", "\n", "\n", "# return the parameters", "\n", "", "", "", "trained_params", "=", "get_params", "(", "opt_state", ")", "\n", "\n", "if", "return_val_loss", ":", "\n", "# return loss without penalty", "\n", "        ", "l_final", "=", "loss_tnet", "(", "get_params", "(", "opt_state", ")", ",", "(", "X_val", ",", "y_val", ",", "w_val", ")", ",", "0", ",", "0", ")", "\n", "return", "trained_params", ",", "predict_fun_head", ",", "l_final", "\n", "\n", "", "return", "trained_params", ",", "predict_fun_head", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_transformation_utils.test_get_transformation_function_sanity": [[18, 26], ["zip", "pytest.raises", "catenets.models.jax.transformation_utils._get_transformation_function", "catenets.models.jax.transformation_utils._get_transformation_function"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function"], ["def", "test_get_transformation_function_sanity", "(", ")", "->", "None", ":", "\n", "    ", "expected_fns", "=", "[", "ht_te_transformation", ",", "aipw_te_transformation", ",", "ra_te_transformation", "]", "\n", "\n", "for", "tr", ",", "expected", "in", "zip", "(", "ALL_TRANSFORMATIONS", ",", "expected_fns", ")", ":", "\n", "        ", "assert", "_get_transformation_function", "(", "tr", ")", "is", "expected", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "_get_transformation_function", "(", "\"invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_transformation_utils.test_aipw_te_transformation_sanity": [[28, 40], ["pytest.mark.parametrize", "fn", "catenets.models.jax.transformation_utils._get_transformation_function", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"fn\"", ",", "[", "aipw_te_transformation", ",", "_get_transformation_function", "(", "DR_TRANSFORMATION", ")", "]", "\n", ")", "\n", "def", "test_aipw_te_transformation_sanity", "(", "fn", ":", "Callable", ")", "->", "None", ":", "\n", "    ", "res", "=", "fn", "(", "\n", "y", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "\n", "w", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "\n", "p", "=", "None", ",", "\n", "mu_0", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", ",", "\n", "mu_1", "=", "np", ".", "array", "(", "[", "0.6", ",", "0.4", "]", ")", ",", "\n", ")", "\n", "assert", "res", ".", "shape", "[", "0", "]", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_transformation_utils.test_ht_te_transformation_sanity": [[42, 51], ["pytest.mark.parametrize", "fn", "catenets.models.jax.transformation_utils._get_transformation_function", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"fn\"", ",", "[", "ht_te_transformation", ",", "_get_transformation_function", "(", "PW_TRANSFORMATION", ")", "]", "\n", ")", "\n", "def", "test_ht_te_transformation_sanity", "(", "fn", ":", "Callable", ")", "->", "None", ":", "\n", "    ", "res", "=", "fn", "(", "\n", "y", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "\n", "w", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "\n", ")", "\n", "assert", "res", ".", "shape", "[", "0", "]", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_transformation_utils.test_ra_te_transformation_sanity": [[53, 65], ["pytest.mark.parametrize", "fn", "catenets.models.jax.transformation_utils._get_transformation_function", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.transformation_utils._get_transformation_function"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"fn\"", ",", "[", "ra_te_transformation", ",", "_get_transformation_function", "(", "RA_TRANSFORMATION", ")", "]", "\n", ")", "\n", "def", "test_ra_te_transformation_sanity", "(", "fn", ":", "Callable", ")", "->", "None", ":", "\n", "    ", "res", "=", "fn", "(", "\n", "y", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "\n", "w", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "\n", "p", "=", "None", ",", "\n", "mu_0", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", ",", "\n", "mu_1", "=", "np", ".", "array", "(", "[", "0.6", ",", "0.4", "]", ")", ",", "\n", ")", "\n", "assert", "res", ".", "shape", "[", "0", "]", "==", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_regression.sqrt_PEHE": [[39, 41], ["numpy.sqrt", "numpy.mean"], "function", ["None"], ["def", "sqrt_PEHE", "(", "y", ":", "np", ".", "ndarray", ",", "hat_y", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "(", "y", "[", ":", ",", "1", "]", "-", "y", "[", ":", ",", "0", "]", ")", "-", "hat_y", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_regression.test_model_fit_issue_twins_version": [[43, 65], ["pytest.mark.skipif", "pytest.mark.parametrize", "load", "copy.deepcopy", "sklearn.model_selection.train_test_split", "copy.deepcopy.fit", "copy.deepcopy.predict", "test_jax_regression.sqrt_PEHE", "print", "os.path.isfile", "download", "Y_test.to_numpy", "X_train.to_numpy", "Y_train[].to_numpy", "W_train.to_numpy"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.xnet.XNet.predict", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_regression.sqrt_PEHE"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "not", "medicaldata_exists", ",", "reason", "=", "\"Missing medicaldata package\"", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_name\"", ",", "models", ")", "\n", "def", "test_model_fit_issue_twins_version", "(", "model_name", ":", "str", ")", "->", "None", ":", "\n", "    ", "csv_path", "=", "\"test.csv\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "csv_path", ")", ":", "\n", "        ", "download", "(", "csv_path", ")", "\n", "\n", "", "X", ",", "W", ",", "Y", "=", "load", "(", "csv_path", ")", "\n", "\n", "model", "=", "deepcopy", "(", "ALL_MODELS", "[", "model_name", "]", ")", "\n", "\n", "X_train", ",", "X_test", ",", "W_train", ",", "W_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "W", ",", "Y", ")", "\n", "\n", "model", ".", "fit", "(", "\n", "X", "=", "X_train", ".", "to_numpy", "(", ")", ",", "y", "=", "Y_train", "[", "\"outcome\"", "]", ".", "to_numpy", "(", ")", ",", "w", "=", "W_train", ".", "to_numpy", "(", ")", "\n", ")", "\n", "\n", "cate_pred", "=", "model", ".", "predict", "(", "X_test", ",", "return_po", "=", "False", ")", "\n", "\n", "pehe", "=", "sqrt_PEHE", "(", "Y_test", ".", "to_numpy", "(", ")", ",", "cate_pred", ")", "\n", "print", "(", "f\"PEHE score for model {model_name} on Twins dataset = {pehe}\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_ite.test_model_sanity": [[43, 54], ["pytest.mark.parametrize", "pytest.mark.parametrize", "copy.deepcopy", "catenets.datasets.load", "catenets.experiment_utils.tester.evaluate_treatments_model", "print"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.experiment_utils.tester.evaluate_treatments_model"], ["@", "pytest", ".", "mark", ".", "slow", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset, pehe_threshold\"", ",", "[", "(", "\"twins\"", ",", "0.4", ")", ",", "(", "\"ihdp\"", ",", "3", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"model_name\"", ",", "models", ")", "\n", "def", "test_model_sanity", "(", "dataset", ":", "str", ",", "pehe_threshold", ":", "float", ",", "model_name", ":", "str", ")", "->", "None", ":", "\n", "    ", "model", "=", "deepcopy", "(", "ALL_MODELS", "[", "model_name", "]", ")", "\n", "\n", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "dataset", ")", "\n", "\n", "score", "=", "evaluate_treatments_model", "(", "model", ",", "X_train", ",", "Y_train", ",", "Y_train_full", ",", "W_train", ")", "\n", "print", "(", "f\"Evaluation for model jax.{model_name} on {dataset} = {score['str']}\"", ")", "\n", "assert", "score", "[", "\"raw\"", "]", "[", "\"pehe\"", "]", "[", "0", "]", "<", "pehe_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_ite.test_model_score": [[56, 69], ["catenets.models.jax.OffsetNet", "catenets.datasets.load", "catenets.models.jax.OffsetNet.fit", "catenets.models.jax.OffsetNet.score", "pytest.raises", "catenets.models.jax.OffsetNet.score"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.datasets.dataset_ihdp.load", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.pseudo_outcome_nets.PseudoOutcomeNet.fit", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score", "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.base.BaseCATENet.score"], ["", "def", "test_model_score", "(", ")", "->", "None", ":", "\n", "    ", "model", "=", "OffsetNet", "(", ")", "\n", "\n", "X_train", ",", "W_train", ",", "Y_train", ",", "Y_train_full", ",", "X_test", ",", "Y_test", "=", "load", "(", "\"ihdp\"", ")", "\n", "\n", "model", ".", "fit", "(", "X_train", "[", ":", "10", "]", ",", "Y_train", "[", ":", "10", "]", ",", "W_train", "[", ":", "10", "]", ")", "\n", "\n", "result", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "\n", "assert", "result", ">", "0", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "model", ".", "score", "(", "X_train", ",", "Y_train", ")", "# Y_train has just one outcome", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_model_utils.test_check_shape_1d_data_sanity": [[15, 20], ["pytest.mark.parametrize", "catenets.models.jax.model_utils.check_shape_1d_data", "len", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_shape_1d_data"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"data\"", ",", "[", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "np", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", "]", ")", "\n", "def", "test_check_shape_1d_data_sanity", "(", "data", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "    ", "out", "=", "check_shape_1d_data", "(", "data", ")", "\n", "\n", "assert", "len", "(", "out", ".", "shape", ")", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_model_utils.test_check_X_is_np_sanity": [[22, 27], ["pytest.mark.parametrize", "catenets.models.jax.model_utils.check_X_is_np", "isinstance", "numpy.array", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.check_X_is_np"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"data\"", ",", "[", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "pd", ".", "DataFrame", "(", "[", "1", ",", "2", "]", ")", "]", ")", "\n", "def", "test_check_X_is_np_sanity", "(", "data", ":", "Any", ")", "->", "None", ":", "\n", "    ", "out", "=", "check_X_is_np", "(", "data", ")", "\n", "\n", "assert", "isinstance", "(", "out", ",", "jnp", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.test_jax_model_utils.test_make_val_split_sanity": [[29, 43], ["numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "catenets.models.jax.model_utils.make_val_split"], "function", ["home.repos.pwc.inspect_result.AliciaCurth_CATENets.jax.model_utils.make_val_split"], ["", "def", "test_make_val_split_sanity", "(", ")", "->", "None", ":", "\n", "    ", "X", "=", "np", ".", "random", ".", "rand", "(", "1000", ",", "5", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "1", ",", "size", "=", "1000", ")", "\n", "w", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "1", ",", "size", "=", "1000", ")", "\n", "\n", "X_t", ",", "y_t", ",", "w_t", ",", "X_val", ",", "y_val", ",", "w_val", ",", "VALIDATION_STRING", "=", "make_val_split", "(", "X", ",", "y", ",", "w", ")", "\n", "\n", "assert", "X_t", ".", "shape", "[", "0", "]", "==", "700", "\n", "assert", "y_t", ".", "shape", "[", "0", "]", "==", "700", "\n", "assert", "w_t", ".", "shape", "[", "0", "]", "==", "700", "\n", "assert", "X_val", ".", "shape", "[", "0", "]", "==", "300", "\n", "assert", "y_val", ".", "shape", "[", "0", "]", "==", "300", "\n", "assert", "w_val", ".", "shape", "[", "0", "]", "==", "300", "\n", "assert", "VALIDATION_STRING", "==", "\"validation\"", "\n", "", ""]]}