{"home.repos.pwc.inspect_result.chenfan95_sign-maml.None.main.accuracy": [[17, 20], ["predictions.argmax().view.argmax().view", "targets.size", "predictions.argmax().view.argmax"], "function", ["None"], ["def", "accuracy", "(", "predictions", ",", "targets", ")", ":", "\n", "    ", "predictions", "=", "predictions", ".", "argmax", "(", "dim", "=", "1", ")", ".", "view", "(", "targets", ".", "shape", ")", "\n", "return", "(", "predictions", "==", "targets", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "targets", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.main.fast_adapt": [[22, 44], ["numpy.zeros", "torch.from_numpy", "torch.from_numpy", "range", "learner", "loss", "main.accuracy", "data.to", "labels.to", "data.size", "loss", "learner.adapt", "learner", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.accuracy", "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.adapt"], ["", "def", "fast_adapt", "(", "batch", ",", "learner", ",", "loss", ",", "adaptation_steps", ",", "shots", ",", "ways", ",", "device", ")", ":", "\n", "    ", "data", ",", "labels", "=", "batch", "\n", "data", ",", "labels", "=", "data", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "# Separate data into adaptation/evalutation sets", "\n", "adaptation_indices", "=", "np", ".", "zeros", "(", "data", ".", "size", "(", "0", ")", ",", "dtype", "=", "bool", ")", "\n", "adaptation_indices", "[", "np", ".", "arange", "(", "shots", "*", "ways", ")", "*", "2", "]", "=", "True", "\n", "evaluation_indices", "=", "torch", ".", "from_numpy", "(", "~", "adaptation_indices", ")", "\n", "adaptation_indices", "=", "torch", ".", "from_numpy", "(", "adaptation_indices", ")", "\n", "adaptation_data", ",", "adaptation_labels", "=", "data", "[", "adaptation_indices", "]", ",", "labels", "[", "adaptation_indices", "]", "\n", "evaluation_data", ",", "evaluation_labels", "=", "data", "[", "evaluation_indices", "]", ",", "labels", "[", "evaluation_indices", "]", "\n", "\n", "# Adapt the model", "\n", "for", "step", "in", "range", "(", "adaptation_steps", ")", ":", "\n", "        ", "adaptation_error", "=", "loss", "(", "learner", "(", "adaptation_data", ")", ",", "adaptation_labels", ")", "\n", "learner", ".", "adapt", "(", "adaptation_error", ")", "\n", "\n", "# Evaluate the adapted model", "\n", "", "predictions", "=", "learner", "(", "evaluation_data", ")", "\n", "evaluation_error", "=", "loss", "(", "predictions", ",", "evaluation_labels", ")", "\n", "evaluation_accuracy", "=", "accuracy", "(", "predictions", ",", "evaluation_labels", ")", "\n", "return", "evaluation_error", ",", "evaluation_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.main.main": [[46, 156], ["random.seed", "numpy.random.seed", "torch.manual_seed", "print", "print", "torch.device", "print", "learn2learn.vision.benchmarks.get_tasksets", "learn2learn.vision.models.MiniImagenetCNN", "l2l.vision.models.MiniImagenetCNN.to", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "time.time", "range", "time.time", "print", "pickle.dump", "torch.save", "str", "torch.cuda.device_count", "torch.cuda.manual_seed", "torch.device", "mamlS.MAML", "mamlS.MAML.parameters", "time.time", "optim.Adam.zero_grad", "range", "mamlS.MAML.parameters", "optim.Adam.step", "time.time", "train_loss.append", "train_acc.append", "times.append", "print", "print", "print", "print", "print", "open", "mamlS.MAML.module.state_dict", "mamlS.MAML", "mamlS.MAML.clone", "l2l.vision.benchmarks.get_tasksets.train.sample", "main.fast_adapt", "evaluation_error.backward", "evaluation_error.item", "evaluation_accuracy.item", "p.grad.data.mul_", "str", "mamlS.MAML", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.clone", "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.fast_adapt"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "ways", "=", "args", ".", "ways", "\n", "shots", "=", "args", ".", "shots", "\n", "meta_lr", "=", "args", ".", "meta_lr", "\n", "fast_lr", "=", "args", ".", "fast_lr", "\n", "meta_batch_size", "=", "args", ".", "meta_batch_size", "\n", "adaptation_steps", "=", "args", ".", "steps", "\n", "num_iterations", "=", "args", ".", "num_iterations", "\n", "cuda", "=", "args", ".", "cuda", "\n", "seed", "=", "args", ".", "seed", "\n", "\n", "save_interval", "=", "args", ".", "save_interval", "\n", "results_dir", "=", "args", ".", "results_dir", "\n", "model_name", "=", "\"miniImagenet_\"", "+", "args", ".", "method", "+", "\"_lr_\"", "+", "str", "(", "fast_lr", ")", "+", "\"_ways_\"", "+", "str", "(", "ways", ")", "+", "\"_shots_\"", "+", "str", "(", "shots", ")", "+", "\"_steps_\"", "+", "str", "(", "adaptation_steps", ")", "+", "\"_seed_\"", "+", "str", "(", "seed", ")", "+", "\"_iter_\"", "+", "str", "(", "args", ".", "num_iterations", ")", "\n", "\n", "# set seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "print", "(", "\"seed: \"", ",", "seed", ")", "\n", "print", "(", "\"Number of iterations: \"", ",", "num_iterations", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "if", "cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "", "print", "(", "\"Running on device: \"", ",", "device", ")", "\n", "tasksets", "=", "l2l", ".", "vision", ".", "benchmarks", ".", "get_tasksets", "(", "'mini-imagenet'", ",", "\n", "train_samples", "=", "2", "*", "shots", ",", "\n", "train_ways", "=", "ways", ",", "\n", "test_samples", "=", "2", "*", "shots", ",", "\n", "test_ways", "=", "ways", ",", "\n", "root", "=", "'~/data'", ",", "\n", ")", "\n", "\n", "# Create model", "\n", "model", "=", "l2l", ".", "vision", ".", "models", ".", "MiniImagenetCNN", "(", "ways", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "method", "==", "\"MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "False", ",", "sign", "=", "False", ")", "\n", "", "elif", "args", ".", "method", "==", "\"FO-MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "True", ",", "sign", "=", "False", ")", "\n", "", "elif", "args", ".", "method", "==", "\"SIGN-MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "True", ",", "sign", "=", "True", ")", "\n", "\n", "", "opt", "=", "optim", ".", "Adam", "(", "maml", ".", "parameters", "(", ")", ",", "meta_lr", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "train_acc", "=", "[", "]", "\n", "val_loss", "=", "[", "]", "\n", "val_acc", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "overall_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "1", ",", "num_iterations", "+", "1", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "meta_train_error", "=", "0.0", "\n", "meta_train_accuracy", "=", "0.0", "\n", "for", "task", "in", "range", "(", "meta_batch_size", ")", ":", "\n", "# Compute meta-training loss", "\n", "            ", "learner", "=", "maml", ".", "clone", "(", ")", "\n", "batch", "=", "tasksets", ".", "train", ".", "sample", "(", ")", "\n", "evaluation_error", ",", "evaluation_accuracy", "=", "fast_adapt", "(", "batch", ",", "\n", "learner", ",", "\n", "loss", ",", "\n", "adaptation_steps", ",", "\n", "shots", ",", "\n", "ways", ",", "\n", "device", ")", "\n", "evaluation_error", ".", "backward", "(", ")", "\n", "meta_train_error", "+=", "evaluation_error", ".", "item", "(", ")", "\n", "meta_train_accuracy", "+=", "evaluation_accuracy", ".", "item", "(", ")", "\n", "\n", "# Average the accumulated gradients and optimize", "\n", "", "for", "p", "in", "maml", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "1.0", "/", "meta_batch_size", ")", "\n", "", "opt", ".", "step", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# save results", "\n", "# if iteration % save_interval == 0:", "\n", "#     model_name_temp = model_name + \"_iter_\" + str(iteration)", "\n", "#     torch.save(maml.module.state_dict(), results_dir+model_name_temp+\".pt\")", "\n", "\n", "# Print some metrics", "\n", "train_loss", ".", "append", "(", "meta_train_error", "/", "meta_batch_size", ")", "\n", "train_acc", ".", "append", "(", "meta_train_accuracy", "/", "meta_batch_size", ")", "\n", "times", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'Iteration'", ",", "iteration", ")", "\n", "print", "(", "'Meta Train Error'", ",", "meta_train_error", "/", "meta_batch_size", ")", "\n", "print", "(", "'Meta Train Accuracy'", ",", "meta_train_accuracy", "/", "meta_batch_size", ")", "\n", "print", "(", "\"Time elapsed: \"", ",", "end_time", "-", "start_time", ")", "\n", "\n", "", "overall_finish_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Total time: \"", ",", "overall_finish_time", "-", "overall_start_time", ")", "\n", "\n", "results_summary", "=", "{", "\n", "\"train_acc\"", ":", "train_acc", ",", "\n", "\"train_loss\"", ":", "train_loss", ",", "\n", "\"time\"", ":", "times", "\n", "}", "\n", "pickle", ".", "dump", "(", "results_summary", ",", "open", "(", "results_dir", "+", "model_name", "+", "\".p\"", ",", "\"wb\"", ")", ")", "\n", "torch", ".", "save", "(", "maml", ".", "module", ".", "state_dict", "(", ")", ",", "results_dir", "+", "model_name", "+", "\".pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.__init__": [[94, 111], ["learn2learn.algorithms.base_learner.BaseLearner.__init__"], "methods", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.__init__"], ["def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "lr", ",", "\n", "first_order", "=", "False", ",", "\n", "allow_unused", "=", "None", ",", "\n", "allow_nograd", "=", "False", ",", "\n", "sign", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "MAML", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "model", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "first_order", "=", "first_order", "\n", "self", ".", "allow_nograd", "=", "allow_nograd", "\n", "if", "allow_unused", "is", "None", ":", "\n", "            ", "allow_unused", "=", "allow_nograd", "\n", "", "self", ".", "allow_unused", "=", "allow_unused", "\n", "self", ".", "sign", "=", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.forward": [[112, 114], ["mamlS.MAML.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.adapt": [[115, 176], ["mamlS.maml_update", "torch.autograd.grad", "mamlS.MAML.module.parameters", "torch.autograd.grad.append", "torch.autograd.grad", "mamlS.MAML.module.parameters", "mamlS.MAML.module.parameters", "traceback.print_exc", "print"], "methods", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.maml_update"], ["", "def", "adapt", "(", "self", ",", "\n", "loss", ",", "\n", "first_order", "=", "None", ",", "\n", "allow_unused", "=", "None", ",", "\n", "allow_nograd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        **Description**\n\n        Takes a gradient step on the loss and updates the cloned parameters in place.\n\n        **Arguments**\n\n        * **loss** (Tensor) - Loss to minimize upon update.\n        * **first_order** (bool, *optional*, default=None) - Whether to use first- or\n            second-order updates. Defaults to self.first_order.\n        * **allow_unused** (bool, *optional*, default=None) - Whether to allow differentiation\n            of unused parameters. Defaults to self.allow_unused.\n        * **allow_nograd** (bool, *optional*, default=None) - Whether to allow adaptation with\n            parameters that have `requires_grad = False`. Defaults to self.allow_nograd.\n\n        \"\"\"", "\n", "if", "first_order", "is", "None", ":", "\n", "            ", "first_order", "=", "self", ".", "first_order", "\n", "", "if", "allow_unused", "is", "None", ":", "\n", "            ", "allow_unused", "=", "self", ".", "allow_unused", "\n", "", "if", "allow_nograd", "is", "None", ":", "\n", "            ", "allow_nograd", "=", "self", ".", "allow_nograd", "\n", "", "second_order", "=", "not", "first_order", "\n", "\n", "if", "allow_nograd", ":", "\n", "# Compute relevant gradients", "\n", "            ", "diff_params", "=", "[", "p", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "grad_params", "=", "grad", "(", "loss", ",", "\n", "diff_params", ",", "\n", "retain_graph", "=", "second_order", ",", "\n", "create_graph", "=", "second_order", ",", "\n", "allow_unused", "=", "allow_unused", ")", "\n", "gradients", "=", "[", "]", "\n", "grad_counter", "=", "0", "\n", "\n", "# Handles gradients for non-differentiable parameters", "\n", "for", "param", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "requires_grad", ":", "\n", "                    ", "gradient", "=", "grad_params", "[", "grad_counter", "]", "\n", "grad_counter", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "gradient", "=", "None", "\n", "", "gradients", ".", "append", "(", "gradient", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "gradients", "=", "grad", "(", "loss", ",", "\n", "self", ".", "module", ".", "parameters", "(", ")", ",", "\n", "retain_graph", "=", "second_order", ",", "\n", "create_graph", "=", "second_order", ",", "\n", "allow_unused", "=", "allow_unused", ")", "\n", "", "except", "RuntimeError", ":", "\n", "                ", "traceback", ".", "print_exc", "(", ")", "\n", "print", "(", "'learn2learn: Maybe try with allow_nograd=True and/or allow_unused=True ?'", ")", "\n", "\n", "# Update the module", "\n", "", "", "self", ".", "module", "=", "maml_update", "(", "self", ".", "module", ",", "self", ".", "lr", ",", "gradients", ",", "self", ".", "sign", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.clone": [[177, 212], ["mamlS.MAML", "learn2learn.utils.clone_module"], "methods", ["None"], ["", "def", "clone", "(", "self", ",", "first_order", "=", "None", ",", "allow_unused", "=", "None", ",", "allow_nograd", "=", "None", ",", "sign", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        **Description**\n\n        Returns a `MAML`-wrapped copy of the module whose parameters and buffers\n        are `torch.clone`d from the original module.\n\n        This implies that back-propagating losses on the cloned module will\n        populate the buffers of the original module.\n        For more information, refer to learn2learn.clone_module().\n\n        **Arguments**\n\n        * **first_order** (bool, *optional*, default=None) - Whether the clone uses first-\n            or second-order updates. Defaults to self.first_order.\n        * **allow_unused** (bool, *optional*, default=None) - Whether to allow differentiation\n        of unused parameters. Defaults to self.allow_unused.\n        * **allow_nograd** (bool, *optional*, default=False) - Whether to allow adaptation with\n            parameters that have `requires_grad = False`. Defaults to self.allow_nograd.\n\n        \"\"\"", "\n", "if", "first_order", "is", "None", ":", "\n", "            ", "first_order", "=", "self", ".", "first_order", "\n", "", "if", "allow_unused", "is", "None", ":", "\n", "            ", "allow_unused", "=", "self", ".", "allow_unused", "\n", "", "if", "allow_nograd", "is", "None", ":", "\n", "            ", "allow_nograd", "=", "self", ".", "allow_nograd", "\n", "", "if", "sign", "is", "None", ":", "\n", "            ", "sign", "=", "self", ".", "sign", "\n", "", "return", "MAML", "(", "clone_module", "(", "self", ".", "module", ")", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "first_order", "=", "first_order", ",", "\n", "allow_unused", "=", "allow_unused", ",", "\n", "allow_nograd", "=", "allow_nograd", ",", "\n", "sign", "=", "sign", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.maml_update": [[10, 51], ["learn2learn.utils.update_module", "list", "zip", "model.parameters", "print", "len", "len", "list", "str", "str", "len", "torch.sign", "len"], "function", ["None"], ["def", "maml_update", "(", "model", ",", "lr", ",", "grads", "=", "None", ",", "sign", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    [[Source]](https://github.com/learnables/learn2learn/blob/master/learn2learn/algorithms/maml.py)\n\n    **Description**\n\n    Performs a MAML update on model using grads and lr.\n    The function re-routes the Python object, thus avoiding in-place\n    operations.\n\n    NOTE: The model itself is updated in-place (no deepcopy), but the\n          parameters' tensors are not.\n\n    **Arguments**\n\n    * **model** (Module) - The model to update.\n    * **lr** (float) - The learning rate used to update the model.\n    * **grads** (list, *optional*, default=None) - A list of gradients for each parameter\n        of the model. If None, will use the gradients in .grad attributes.\n\n    **Example**\n    ~~~python\n    maml = l2l.algorithms.MAML(Model(), lr=0.1)\n    model = maml.clone() # The next two lines essentially implement model.adapt(loss)\n    grads = autograd.grad(loss, model.parameters(), create_graph=True)\n    maml_update(model, lr=0.1, grads)\n    ~~~\n    \"\"\"", "\n", "if", "grads", "is", "not", "None", ":", "\n", "        ", "params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "if", "not", "len", "(", "grads", ")", "==", "len", "(", "list", "(", "params", ")", ")", ":", "\n", "            ", "msg", "=", "'WARNING:maml_update(): Parameters and gradients have different length. ('", "\n", "msg", "+=", "str", "(", "len", "(", "params", ")", ")", "+", "' vs '", "+", "str", "(", "len", "(", "grads", ")", ")", "+", "')'", "\n", "print", "(", "msg", ")", "\n", "", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "            ", "if", "g", "is", "not", "None", ":", "\n", "                ", "if", "sign", ":", "\n", "                    ", "p", ".", "update", "=", "-", "lr", "*", "torch", ".", "sign", "(", "g", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "update", "=", "-", "lr", "*", "g", "\n", "", "", "", "", "return", "update_module", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.accuracy": [[12, 15], ["predictions.argmax().view.argmax().view", "targets.size", "predictions.argmax().view.argmax"], "function", ["None"], ["def", "accuracy", "(", "predictions", ",", "targets", ")", ":", "\n", "    ", "predictions", "=", "predictions", ".", "argmax", "(", "dim", "=", "1", ")", ".", "view", "(", "targets", ".", "shape", ")", "\n", "return", "(", "predictions", "==", "targets", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "targets", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.fast_adapt": [[17, 39], ["numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "learner", "loss", "utils.accuracy", "data.to", "labels.to", "data.size", "loss", "learner.adapt", "learner", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.accuracy", "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.adapt"], ["", "def", "fast_adapt", "(", "batch", ",", "learner", ",", "loss", ",", "adaptation_steps", ",", "shots", ",", "ways", ",", "device", ")", ":", "\n", "    ", "data", ",", "labels", "=", "batch", "\n", "data", ",", "labels", "=", "data", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "# Separate data into adaptation/evalutation sets", "\n", "adaptation_indices", "=", "np", ".", "zeros", "(", "data", ".", "size", "(", "0", ")", ",", "dtype", "=", "bool", ")", "\n", "adaptation_indices", "[", "np", ".", "arange", "(", "shots", "*", "ways", ")", "*", "2", "]", "=", "True", "\n", "evaluation_indices", "=", "torch", ".", "from_numpy", "(", "~", "adaptation_indices", ")", "\n", "adaptation_indices", "=", "torch", ".", "from_numpy", "(", "adaptation_indices", ")", "\n", "adaptation_data", ",", "adaptation_labels", "=", "data", "[", "adaptation_indices", "]", ",", "labels", "[", "adaptation_indices", "]", "\n", "evaluation_data", ",", "evaluation_labels", "=", "data", "[", "evaluation_indices", "]", ",", "labels", "[", "evaluation_indices", "]", "\n", "\n", "# Adapt the model", "\n", "for", "step", "in", "range", "(", "adaptation_steps", ")", ":", "\n", "        ", "adaptation_error", "=", "loss", "(", "learner", "(", "adaptation_data", ")", ",", "adaptation_labels", ")", "\n", "learner", ".", "adapt", "(", "adaptation_error", ")", "\n", "\n", "# Evaluate the adapted model", "\n", "", "predictions", "=", "learner", "(", "evaluation_data", ")", "\n", "evaluation_error", "=", "loss", "(", "predictions", ",", "evaluation_labels", ")", "\n", "evaluation_accuracy", "=", "accuracy", "(", "predictions", ",", "evaluation_labels", ")", "\n", "return", "evaluation_error", ",", "evaluation_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.testing": [[40, 114], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print", "torch.device", "torch.device", "torch.device", "learn2learn.vision.benchmarks.get_tasksets", "learn2learn.vision.models.MiniImagenetCNN", "mamlS.MAML().to.module.load_state_dict", "torch.CrossEntropyLoss", "range", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "print", "print", "print", "print", "str", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.device", "torch.device", "torch.device", "mamlS.MAML().to", "torch.load", "torch.load", "torch.load", "mamlS.MAML().to.clone", "l2l.vision.benchmarks.get_tasksets.test.sample", "utils.fast_adapt", "meta_test_error.append", "meta_test_accuracy.append", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "mamlS.MAML().to", "evaluation_error.item", "evaluation_accuracy.item", "str", "mamlS.MAML", "mamlS.MAML().to", "mamlS.MAML", "str", "mamlS.MAML", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.chenfan95_sign-maml.None.mamlS.MAML.clone", "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.fast_adapt"], ["", "def", "testing", "(", "params", ")", ":", "\n", "    ", "ways", "=", "params", "[", "\"ways\"", "]", "\n", "shots", "=", "params", "[", "\"shots\"", "]", "\n", "meta_lr", "=", "params", "[", "\"meta_lr\"", "]", "\n", "fast_lr", "=", "params", "[", "\"fast_lr\"", "]", "\n", "meta_batch_size", "=", "params", "[", "\"meta_batch_size\"", "]", "\n", "adaptation_steps_train", "=", "params", "[", "\"adaptation_steps_train\"", "]", "\n", "adaptation_steps_test", "=", "params", "[", "\"adaptation_steps_test\"", "]", "\n", "num_iterations", "=", "params", "[", "\"num_iterations\"", "]", "\n", "cuda", "=", "params", "[", "\"cuda\"", "]", "\n", "seed", "=", "params", "[", "\"seed\"", "]", "\n", "save_interval", "=", "params", "[", "\"save_interval\"", "]", "\n", "results_dir", "=", "params", "[", "\"results_dir\"", "]", "\n", "method", "=", "params", "[", "\"method\"", "]", "\n", "model_name", "=", "\"miniImagenet_\"", "+", "method", "+", "\"_lr_\"", "+", "str", "(", "fast_lr", ")", "+", "\"_ways_\"", "+", "str", "(", "ways", ")", "+", "\"_shots_\"", "+", "str", "(", "shots", ")", "+", "\"_steps_\"", "+", "str", "(", "adaptation_steps_train", ")", "+", "\"_seed_\"", "+", "str", "(", "seed", ")", "+", "\"_iter_\"", "+", "str", "(", "num_iterations", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "print", "(", "\"seed: \"", ",", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "if", "cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "# Create Tasksets using the benchmark interface", "\n", "", "tasksets", "=", "l2l", ".", "vision", ".", "benchmarks", ".", "get_tasksets", "(", "'mini-imagenet'", ",", "\n", "train_samples", "=", "2", "*", "shots", ",", "\n", "train_ways", "=", "ways", ",", "\n", "test_samples", "=", "2", "*", "shots", ",", "\n", "test_ways", "=", "ways", ",", "\n", "root", "=", "'~/data'", ",", "\n", ")", "\n", "\n", "# Create model", "\n", "model", "=", "l2l", ".", "vision", ".", "models", ".", "MiniImagenetCNN", "(", "ways", ")", "\n", "PATH", "=", "results_dir", "+", "model_name", "+", "\".pt\"", "\n", "if", "method", "==", "\"MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "False", ",", "sign", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "method", "==", "\"FO-MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "True", ",", "sign", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "method", "==", "\"SIGN-MAML\"", ":", "\n", "        ", "maml", "=", "mamlS", ".", "MAML", "(", "model", ",", "lr", "=", "fast_lr", ",", "first_order", "=", "True", ",", "sign", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "", "maml", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", ")", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "meta_test_error", "=", "[", "]", "\n", "meta_test_accuracy", "=", "[", "]", "\n", "for", "task", "in", "range", "(", "1000", ")", ":", "\n", "# Compute meta-testing loss", "\n", "        ", "learner", "=", "maml", ".", "clone", "(", ")", "\n", "batch", "=", "tasksets", ".", "test", ".", "sample", "(", ")", "\n", "#print(batch[0].shape)", "\n", "evaluation_error", ",", "evaluation_accuracy", "=", "fast_adapt", "(", "batch", ",", "\n", "learner", ",", "\n", "loss", ",", "\n", "adaptation_steps_test", ",", "\n", "shots", ",", "\n", "ways", ",", "\n", "device", ")", "\n", "meta_test_error", ".", "append", "(", "evaluation_error", ".", "item", "(", ")", ")", "\n", "meta_test_accuracy", ".", "append", "(", "evaluation_accuracy", ".", "item", "(", ")", ")", "\n", "print", "(", "\"Processed task: \"", ",", "task", ")", "\n", "\n", "", "loss_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "meta_test_error", ")", ")", "\n", "loss_std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "meta_test_error", ")", ")", "\n", "acc_avg", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "meta_test_accuracy", ")", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "meta_test_accuracy", ")", ")", "\n", "print", "(", "'Meta Test Error'", ",", "loss_avg", ")", "\n", "print", "(", "'Meta Test Accuracy'", ",", "acc_avg", ")", "\n", "print", "(", "'Meta Test Error std'", ",", "loss_std", ")", "\n", "print", "(", "'Meta Test Accuracy std'", ",", "acc_std", ")", "\n", "return", "loss_avg", ",", "acc_avg", ",", "loss_std", ",", "acc_std", "\n", "\n"]], "home.repos.pwc.inspect_result.chenfan95_sign-maml.None.utils.init_params": [[115, 129], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "", "", "", "", "", ""]]}