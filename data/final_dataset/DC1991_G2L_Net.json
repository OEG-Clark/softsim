{"home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_corners": [[13, 39], ["int", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_corners", "(", "obj", ",", "temp", ",", "num", "=", "8", ")", ":", "\n", "    ", "obj", "=", "int", "(", "obj", ")", "\n", "minx", "=", "temp", "[", "obj", "]", "[", "'min_x'", "]", "\n", "miny", "=", "temp", "[", "obj", "]", "[", "'min_y'", "]", "\n", "minz", "=", "temp", "[", "obj", "]", "[", "'min_z'", "]", "\n", "sizex", "=", "temp", "[", "obj", "]", "[", "'size_x'", "]", "\n", "sizey", "=", "temp", "[", "obj", "]", "[", "'size_y'", "]", "\n", "sizez", "=", "temp", "[", "obj", "]", "[", "'size_z'", "]", "\n", "\n", "maxx", "=", "minx", "+", "sizex", "\n", "maxy", "=", "miny", "+", "sizey", "\n", "maxz", "=", "minz", "+", "sizez", "\n", "\n", "\n", "corners", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "corners", "[", "3", ",", ":", "]", "=", "np", ".", "array", "(", "[", "minx", ",", "miny", ",", "minz", "]", ")", "\n", "corners", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "[", "minx", ",", "miny", ",", "maxz", "]", ")", "\n", "corners", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "minx", ",", "maxy", ",", "minz", "]", ")", "\n", "corners", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "minx", ",", "maxy", ",", "maxz", "]", ")", "\n", "\n", "corners", "[", "4", ",", ":", "]", "=", "np", ".", "array", "(", "[", "maxx", ",", "miny", ",", "minz", "]", ")", "\n", "corners", "[", "5", ",", ":", "]", "=", "np", ".", "array", "(", "[", "maxx", ",", "miny", ",", "maxz", "]", ")", "\n", "corners", "[", "6", ",", ":", "]", "=", "np", ".", "array", "(", "[", "maxx", ",", "maxy", ",", "minz", "]", ")", "\n", "corners", "[", "7", ",", ":", "]", "=", "np", ".", "array", "(", "[", "maxx", ",", "maxy", ",", "maxz", "]", ")", "\n", "return", "corners", "[", ":", ":", "8", "//", "num", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.define_paras": [[41, 53], ["numpy.array"], "function", ["None"], ["", "def", "define_paras", "(", ")", ":", "\n", "    ", "CFG", "=", "{", "}", "\n", "\n", "\n", "\n", "K", "=", "np", ".", "array", "(", "[", "[", "572.4114", ",", "0", ",", "325.2611", "]", ",", "\n", "[", "0", ",", "573.57043", ",", "242.04899", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "CFG", "[", "'K'", "]", "=", "K", "\n", "\n", "return", "CFG", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.kabsch": [[54, 103], ["numpy.dot", "numpy.linalg.svd", "numpy.diag", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.det", "numpy.linalg.det"], "function", ["None"], ["", "def", "kabsch", "(", "P", ",", "Q", ")", ":", "\n", "    ", "\"\"\"\n    Using the Kabsch algorithm with two sets of paired point P and Q, centered\n    around the centroid. Each vector set is represented as an NxD\n    matrix, where D is the the dimension of the space.\n    The algorithm works in three steps:\n    - a centroid translation of P and Q (assumed done before this function\n      call)\n    - the computation of a covariance matrix C\n    - computation of the optimal rotation matrix U\n    For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm\n    Parameters\n    ----------\n    P : array\n        (N,D) matrix, where N is points and D is dimension.\n    Q : array\n        (N,D) matrix, where N is points and D is dimension.\n    Returns\n    -------\n    U : matrix\n        Rotation matrix (D,D)\n    \"\"\"", "\n", "\n", "# Computation of the covariance matrix", "\n", "C", "=", "np", ".", "dot", "(", "P", ".", "T", ",", "Q", ")", "\n", "\n", "# Computation of the optimal rotation matrix", "\n", "# This can be done using singular value decomposition (SVD)", "\n", "# Getting the sign of the det(V)*(W) to decide", "\n", "# whether we need to correct our rotation matrix to ensure a", "\n", "# right-handed coordinate system.", "\n", "# And finally calculating the optimal rotation matrix U", "\n", "# see http://en.wikipedia.org/wiki/Kabsch_algorithm", "\n", "U", ",", "S", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "C", ")", "\n", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "V", ".", "T", ")", "*", "np", ".", "linalg", ".", "det", "(", "U", ".", "T", ")", ")", "<", "0.0", "\n", "\n", "\n", "\n", "if", "d", ":", "\n", "        ", "S", "[", "-", "1", "]", "=", "-", "S", "[", "-", "1", "]", "\n", "V", "[", ":", ",", "-", "1", "]", "=", "-", "V", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "E", "=", "np", ".", "diag", "(", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "\n", "# Create Rotation matrix U", "\n", "R", "=", "np", ".", "dot", "(", "V", ".", "T", ",", "np", ".", "dot", "(", "E", ",", "U", ".", "T", ")", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.gettrans": [[104, 128], ["kps.reshape.reshape", "range", "utils_funs.kabsch", "numpy.zeros", "numpy.mean", "hss.append", "kps.reshape.T.mean().reshape", "h[].T.mean().reshape", "numpy.dot", "kps.reshape.T.mean", "h[].T.mean"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.kabsch"], ["", "def", "gettrans", "(", "kps", ",", "h", ")", ":", "\n", "\n", "    ", "hss", "=", "[", "]", "\n", "\n", "kps", "=", "kps", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "h", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "\n", "        ", "P", "=", "kps", ".", "T", "-", "kps", ".", "T", ".", "mean", "(", "1", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "\n", "Q", "=", "h", "[", ":", ",", "i", ",", ":", "]", ".", "T", "-", "h", "[", ":", ",", "i", ",", ":", "]", ".", "T", ".", "mean", "(", "1", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "\n", "\n", "R", "=", "kabsch", "(", "P", ".", "T", ",", "Q", ".", "T", ")", "\n", "\n", "T", "=", "h", "[", ":", ",", "i", ",", ":", "]", "-", "np", ".", "dot", "(", "R", ",", "kps", ".", "T", ")", ".", "T", "\n", "\n", "hh", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "hh", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "R", "\n", "hh", "[", "0", ":", "3", ",", "3", "]", "=", "np", ".", "mean", "(", "T", ",", "0", ")", "\n", "\n", "hss", ".", "append", "(", "hh", ")", "\n", "\n", "", "return", "hss", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.draw_cors_lite": [[129, 171], ["T_.reshape.reshape", "numpy.zeros", "numpy.zeros", "numpy.dot", "numpy.transpose", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "numpy.dot", "len", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "def", "draw_cors_lite", "(", "img", ",", "K", ",", "R_", ",", "T_", ",", "color", ",", "OR", ",", "lindwidth", "=", "2", ")", ":", "\n", "    ", "T_", "=", "T_", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "\n", "R", "=", "R_", "\n", "\n", "pcc", "=", "np", ".", "zeros", "(", "(", "4", ",", "len", "(", "OR", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "pcc", "[", "0", ":", "3", ",", ":", "]", "=", "OR", ".", "T", "\n", "pcc", "[", "3", ",", ":", "]", "=", "1", "\n", "\n", "\n", "TT", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ",", "dtype", "=", "'float32'", ")", "\n", "TT", "[", ":", ",", "0", ":", "3", "]", "=", "R", "\n", "TT", "[", ":", ",", "3", "]", "=", "T_", "[", ":", ",", "0", "]", "\n", "\n", "camMat", "=", "K", "\n", "\n", "pc_tt", "=", "np", ".", "dot", "(", "camMat", ",", "np", ".", "dot", "(", "TT", ",", "pcc", ")", ")", "\n", "\n", "pc_t", "=", "np", ".", "transpose", "(", "pc_tt", ")", "\n", "x", "=", "pc_t", "[", ":", ",", "0", "]", "/", "pc_t", "[", ":", ",", "2", "]", "\n", "y", "=", "pc_t", "[", ":", ",", "1", "]", "/", "pc_t", "[", ":", ",", "2", "]", "\n", "\n", "\n", "\n", "\n", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "0", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "0", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "1", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "1", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "1", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "1", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "2", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "2", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "2", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "2", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "3", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "3", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "3", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "3", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "0", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "0", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "0", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "0", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "4", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "4", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "1", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "1", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "5", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "5", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "2", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "2", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "6", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "6", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "3", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "3", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "7", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "7", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "4", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "4", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "5", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "5", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "5", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "5", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "6", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "6", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "6", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "6", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "7", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "7", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "np", ".", "float32", "(", "x", "[", "7", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "7", "]", ")", ")", ",", "(", "np", ".", "float32", "(", "x", "[", "4", "]", ")", ",", "np", ".", "float32", "(", "y", "[", "4", "]", ")", ")", ",", "color", ",", "lindwidth", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_rotation": [[172, 190], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "float", "float", "float", "numpy.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["None"], ["", "def", "get_rotation", "(", "x_", ",", "y_", ",", "z_", ")", ":", "\n", "\n", "\n", "    ", "x", "=", "float", "(", "x_", "/", "180", ")", "*", "math", ".", "pi", "\n", "y", "=", "float", "(", "y_", "/", "180", ")", "*", "math", ".", "pi", "\n", "z", "=", "float", "(", "z_", "/", "180", ")", "*", "math", ".", "pi", "\n", "R_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "x", ")", ",", "-", "math", ".", "sin", "(", "x", ")", "]", ",", "\n", "[", "0", ",", "math", ".", "sin", "(", "x", ")", ",", "math", ".", "cos", "(", "x", ")", "]", "]", ")", "\n", "\n", "R_y", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "y", ")", ",", "0", ",", "math", ".", "sin", "(", "y", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "y", ")", ",", "0", ",", "math", ".", "cos", "(", "y", ")", "]", "]", ")", "\n", "\n", "R_z", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "z", ")", ",", "-", "math", ".", "sin", "(", "z", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "z", ")", ",", "math", ".", "cos", "(", "z", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R_z", ",", "np", ".", "dot", "(", "R_y", ",", "R_x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.onmouse": [[196, 203], ["float", "float"], "function", ["None"], ["def", "onmouse", "(", "*", "args", ")", ":", "\n", "    ", "global", "mousex", ",", "mousey", ",", "changed", "\n", "y", "=", "args", "[", "1", "]", "\n", "x", "=", "args", "[", "2", "]", "\n", "mousex", "=", "x", "/", "float", "(", "showsz", ")", "\n", "mousey", "=", "y", "/", "float", "(", "showsz", ")", "\n", "changed", "=", "True", "\n", "", "def", "showpoints", "(", "xyz", ",", "c_gt", "=", "None", ",", "c_pred", "=", "None", ",", "waittime", "=", "0", ",", "showrot", "=", "False", ",", "magnifyBlue", "=", "0", ",", "freezerot", "=", "False", ",", "background", "=", "(", "0", ",", "0", ",", "0", ")", ",", "normalizecolor", "=", "True", ",", "ballradius", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.showpoints": [[203, 358], ["cv2.namedWindow", "cv2.moveWindow", "cv2.setMouseCallback", "numpy.ctypeslib.load_library", "xyz.copy", "utils_funs.get_rotation", "numpy.require", "numpy.require", "numpy.require", "numpy.zeros", "xyz.mean", "numpy.dot", "numpy.eye", "rotmat.dot.dot", "rotmat.dot.dot", "nxyz.astype", "np.ctypeslib.load_library.render_ball", "cv2.imshow", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "xyz.dot", "ctypes.c_int", "ctypes.c_int", "np.zeros.ctypes.data_as", "ctypes.c_int", "nxyz.astype.ctypes.data_as", "np.require.ctypes.data_as", "np.require.ctypes.data_as", "np.require.ctypes.data_as", "ctypes.c_int", "numpy.maximum", "numpy.maximum", "cv2.putText", "cv2.putText", "cv2.putText", "utils_funs.showpoints.render"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_rotation", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.render"], ["", "def", "showpoints", "(", "xyz", ",", "c_gt", "=", "None", ",", "c_pred", "=", "None", ",", "waittime", "=", "0", ",", "showrot", "=", "False", ",", "magnifyBlue", "=", "0", ",", "freezerot", "=", "False", ",", "background", "=", "(", "0", ",", "0", ",", "0", ")", ",", "normalizecolor", "=", "True", ",", "ballradius", "=", "10", ")", ":", "\n", "\n", "## borrow from https://github.com/fxia22/pointnet.pytorch", "\n", "\n", "    ", "cv2", ".", "namedWindow", "(", "'3D_seg'", ")", "\n", "cv2", ".", "moveWindow", "(", "'3D_seg'", ",", "1000", ",", "500", ")", "\n", "cv2", ".", "setMouseCallback", "(", "'3D_seg'", ",", "onmouse", ")", "\n", "\n", "dll", "=", "np", ".", "ctypeslib", ".", "load_library", "(", "'../utils/render_balls_so'", ",", "'.'", ")", "\n", "\n", "global", "showsz", ",", "mousex", ",", "mousey", ",", "zoom", ",", "changed", "\n", "\n", "xyz", "=", "xyz", "-", "xyz", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "xyz", "[", ":", ",", "2", "]", "=", "-", "xyz", "[", ":", ",", "2", "]", "\n", "xyz0", "=", "xyz", ".", "copy", "(", ")", "\n", "xyz", "[", ":", ",", "1", "]", "=", "xyz0", "[", ":", ",", "0", "]", "\n", "xyz", "[", ":", ",", "0", "]", "=", "xyz0", "[", ":", ",", "1", "]", "\n", "\n", "radius", "=", "(", "(", "xyz", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "**", "0.5", ")", ".", "max", "(", ")", "\n", "\n", "xyz", "/=", "(", "radius", "*", "2.2", ")", "/", "showsz", "\n", "R", "=", "get_rotation", "(", "0", ",", "20", ",", "0", ")", "\n", "xyz", "=", "np", ".", "dot", "(", "R", ",", "xyz", ".", "T", ")", ".", "T", "\n", "if", "c_gt", "is", "None", ":", "\n", "        ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "        ", "c0", "=", "c_gt", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_gt", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_gt", "[", ":", ",", "2", "]", "\n", "\n", "\n", "", "if", "normalizecolor", ":", "\n", "        ", "c0", "/=", "(", "c0", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c1", "/=", "(", "c1", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c2", "/=", "(", "c2", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "\n", "\n", "", "c0", "=", "np", ".", "require", "(", "c0", ",", "'float32'", ",", "'C'", ")", "\n", "c1", "=", "np", ".", "require", "(", "c1", ",", "'float32'", ",", "'C'", ")", "\n", "c2", "=", "np", ".", "require", "(", "c2", ",", "'float32'", ",", "'C'", ")", "\n", "\n", "show", "=", "np", ".", "zeros", "(", "(", "showsz", ",", "showsz", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "def", "render", "(", ")", ":", "\n", "        ", "rotmat", "=", "np", ".", "eye", "(", "3", ")", "\n", "if", "not", "freezerot", ":", "\n", "            ", "xangle", "=", "(", "mousey", "-", "0.5", ")", "*", "np", ".", "pi", "*", "1.2", "\n", "", "else", ":", "\n", "            ", "xangle", "=", "0", "\n", "", "rotmat", "=", "rotmat", ".", "dot", "(", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "np", ".", "cos", "(", "xangle", ")", ",", "-", "np", ".", "sin", "(", "xangle", ")", "]", ",", "\n", "[", "0.0", ",", "np", ".", "sin", "(", "xangle", ")", ",", "np", ".", "cos", "(", "xangle", ")", "]", ",", "\n", "]", ")", ")", "\n", "if", "not", "freezerot", ":", "\n", "            ", "yangle", "=", "(", "mousex", "-", "0.5", ")", "*", "np", ".", "pi", "*", "1.2", "\n", "", "else", ":", "\n", "            ", "yangle", "=", "0", "\n", "", "rotmat", "=", "rotmat", ".", "dot", "(", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "yangle", ")", ",", "0.0", ",", "-", "np", ".", "sin", "(", "yangle", ")", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "np", ".", "sin", "(", "yangle", ")", ",", "0.0", ",", "np", ".", "cos", "(", "yangle", ")", "]", ",", "\n", "]", ")", ")", "\n", "rotmat", "*=", "zoom", "\n", "nxyz", "=", "xyz", ".", "dot", "(", "rotmat", ")", "+", "[", "showsz", "/", "2", ",", "showsz", "/", "2", ",", "0", "]", "\n", "\n", "ixyz", "=", "nxyz", ".", "astype", "(", "'int32'", ")", "\n", "show", "[", ":", "]", "=", "background", "\n", "dll", ".", "render_ball", "(", "\n", "ct", ".", "c_int", "(", "show", ".", "shape", "[", "0", "]", ")", ",", "\n", "ct", ".", "c_int", "(", "show", ".", "shape", "[", "1", "]", ")", ",", "\n", "show", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "ct", ".", "c_int", "(", "ixyz", ".", "shape", "[", "0", "]", ")", ",", "\n", "ixyz", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c0", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c1", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c2", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "ct", ".", "c_int", "(", "ballradius", ")", "\n", ")", "\n", "\n", "if", "magnifyBlue", ">", "0", ":", "\n", "            ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "1", ",", "axis", "=", "0", ")", ")", "\n", "if", "magnifyBlue", ">=", "2", ":", "\n", "                ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "-", "1", ",", "axis", "=", "0", ")", ")", "\n", "", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "1", ",", "axis", "=", "1", ")", ")", "\n", "if", "magnifyBlue", ">=", "2", ":", "\n", "                ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "-", "1", ",", "axis", "=", "1", ")", ")", "\n", "", "", "if", "showrot", ":", "\n", "            ", "cv2", ".", "putText", "(", "show", ",", "'xangle %d'", "%", "(", "int", "(", "xangle", "/", "np", ".", "pi", "*", "180", ")", ")", ",", "(", "30", ",", "showsz", "-", "30", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "cv2", ".", "putText", "(", "show", ",", "'yangle %d'", "%", "(", "int", "(", "yangle", "/", "np", ".", "pi", "*", "180", ")", ")", ",", "(", "30", ",", "showsz", "-", "50", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "cv2", ".", "putText", "(", "show", ",", "'zoom %d%%'", "%", "(", "int", "(", "zoom", "*", "100", ")", ")", ",", "(", "30", ",", "showsz", "-", "70", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "", "", "changed", "=", "True", "\n", "while", "True", ":", "\n", "        ", "if", "changed", ":", "\n", "            ", "render", "(", ")", "\n", "changed", "=", "False", "\n", "", "cv2", ".", "imshow", "(", "'3D_seg'", ",", "show", ")", "\n", "\n", "if", "waittime", "==", "0", ":", "\n", "            ", "cmd", "=", "cv2", ".", "waitKey", "(", "10", ")", "%", "256", "\n", "", "else", ":", "\n", "            ", "cmd", "=", "cv2", ".", "waitKey", "(", "waittime", ")", "%", "256", "\n", "\n", "\n", "", "if", "cmd", "==", "ord", "(", "'q'", ")", ":", "\n", "            ", "break", "\n", "", "elif", "cmd", "==", "ord", "(", "'Q'", ")", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "if", "cmd", "==", "ord", "(", "'t'", ")", "or", "cmd", "==", "ord", "(", "'p'", ")", ":", "\n", "            ", "if", "cmd", "==", "ord", "(", "'t'", ")", ":", "\n", "                ", "if", "c_gt", "is", "None", ":", "\n", "                    ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "                    ", "c0", "=", "c_gt", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_gt", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_gt", "[", ":", ",", "2", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "c_pred", "is", "None", ":", "\n", "                    ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "                    ", "c0", "=", "c_pred", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_pred", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_pred", "[", ":", ",", "2", "]", "\n", "", "", "if", "normalizecolor", ":", "\n", "                ", "c0", "/=", "(", "c0", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c1", "/=", "(", "c1", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c2", "/=", "(", "c2", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "", "c0", "=", "np", ".", "require", "(", "c0", ",", "'float32'", ",", "'C'", ")", "\n", "c1", "=", "np", ".", "require", "(", "c1", ",", "'float32'", ",", "'C'", ")", "\n", "c2", "=", "np", ".", "require", "(", "c2", ",", "'float32'", ",", "'C'", ")", "\n", "changed", "=", "True", "\n", "\n", "\n", "\n", "", "if", "cmd", "==", "ord", "(", "'n'", ")", ":", "\n", "            ", "zoom", "*=", "1.1", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'m'", ")", ":", "\n", "            ", "zoom", "/=", "1.1", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'r'", ")", ":", "\n", "            ", "zoom", "=", "1.0", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'s'", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "'show3d.png'", ",", "show", ")", "\n", "", "if", "waittime", "!=", "0", ":", "\n", "            ", "break", "\n", "", "", "return", "show", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_3D_corner": [[359, 380], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "max", "min", "max", "min", "max", "min"], "function", ["None"], ["", "def", "get_3D_corner", "(", "pc", ")", ":", "\n", "\n", "    ", "x_r", "=", "max", "(", "pc", "[", ":", ",", "0", "]", ")", "-", "min", "(", "pc", "[", ":", ",", "0", "]", ")", "\n", "y_r", "=", "max", "(", "pc", "[", ":", ",", "1", "]", ")", "-", "min", "(", "pc", "[", ":", ",", "1", "]", ")", "\n", "z_r", "=", "max", "(", "pc", "[", ":", ",", "2", "]", ")", "-", "min", "(", "pc", "[", ":", ",", "2", "]", ")", "\n", "\n", "\n", "ext1", "=", "np", ".", "array", "(", "[", "0", ",", "x_r", ",", "y_r", ",", "z_r", "]", ")", "\n", "or1", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or2", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or3", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or4", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "\n", "or5", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or6", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or7", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or8", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "\n", "OR", "=", "np", ".", "array", "(", "[", "or1", ",", "or2", ",", "or3", ",", "or4", ",", "or5", ",", "or6", ",", "or7", ",", "or8", "]", ")", "\n", "\n", "return", "OR", ",", "x_r", ",", "y_r", ",", "z_r", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_change_3D": [[381, 395], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_change_3D", "(", "x_r", ",", "y_r", ",", "z_r", ")", ":", "\n", "    ", "ext1", "=", "np", ".", "array", "(", "[", "0", ",", "x_r", ",", "y_r", ",", "z_r", "]", ")", "\n", "or1", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or2", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or3", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or4", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "\n", "or5", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or6", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "-", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or7", "=", "np", ".", "array", "(", "[", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "or8", "=", "np", ".", "array", "(", "[", "-", "ext1", "[", "1", "]", "/", "2", ",", "ext1", "[", "2", "]", "/", "2", ",", "-", "ext1", "[", "3", "]", "/", "2", "]", ")", "\n", "\n", "OR", "=", "np", ".", "array", "(", "[", "or1", ",", "or2", ",", "or3", ",", "or4", ",", "or5", ",", "or6", ",", "or7", ",", "or8", "]", ")", "\n", "return", "OR", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.depth_2_mesh_bbx": [[397, 410], ["int", "int", "int", "int", "utils_funs.depth_2_pc", "max", "min", "max", "min"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.depth_2_pc"], ["", "def", "depth_2_mesh_bbx", "(", "depth", ",", "bbx", ",", "K", ",", "step", "=", "1", ",", "dr", "=", "0", ",", "dc", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "x1", "=", "int", "(", "max", "(", "bbx", "[", "0", "]", ",", "0", ")", ")", "\n", "x2", "=", "int", "(", "min", "(", "bbx", "[", "1", "]", ",", "depth", ".", "shape", "[", "0", "]", ")", ")", "\n", "y1", "=", "int", "(", "max", "(", "bbx", "[", "2", "]", ",", "0", ")", ")", "\n", "y2", "=", "int", "(", "min", "(", "bbx", "[", "3", "]", ",", "depth", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "\n", "mesh", "=", "depth_2_pc", "(", "depth", ",", "K", ",", "bbx", "=", "[", "x1", ",", "x2", ",", "y1", ",", "y2", "]", ",", "step", "=", "step", ",", "dr", "=", "dr", ",", "dc", "=", "dc", ")", "\n", "\n", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.depth_2_pc": [[411, 454], ["numpy.arange", "numpy.expand_dims", "numpy.tile", "numpy.zeros_like", "numpy.zeros", "range", "np.tile.copy", "np.zeros_like.copy", "len", "range"], "function", ["None"], ["", "def", "depth_2_pc", "(", "depth", ",", "K", ",", "bbx", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "step", "=", "1", ",", "dr", "=", "0", ",", "dc", "=", "0", ")", ":", "\n", "    ", "x1", "=", "bbx", "[", "0", "]", "\n", "x2", "=", "bbx", "[", "1", "]", "\n", "y1", "=", "bbx", "[", "2", "]", "\n", "y2", "=", "bbx", "[", "3", "]", "\n", "\n", "fx", "=", "K", "[", "0", ",", "0", "]", "\n", "ux", "=", "K", "[", "0", ",", "2", "]", "\n", "fy", "=", "K", "[", "1", ",", "1", "]", "\n", "uy", "=", "K", "[", "1", ",", "2", "]", "\n", "W", "=", "y2", "-", "y1", "+", "1", "\n", "H", "=", "x2", "-", "x1", "+", "1", "\n", "\n", "xw0", "=", "np", ".", "arange", "(", "y1", ",", "y2", ",", "step", ")", "\n", "xw0", "=", "np", ".", "expand_dims", "(", "xw0", ",", "axis", "=", "0", ")", "\n", "xw0", "=", "np", ".", "tile", "(", "xw0", ".", "T", ",", "2", ")", "\n", "uu0", "=", "np", ".", "zeros_like", "(", "xw0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "uu0", "[", ":", ",", "0", "]", "=", "ux", "\n", "uu0", "[", ":", ",", "1", "]", "=", "uy", "\n", "\n", "mesh", "=", "np", ".", "zeros", "(", "(", "len", "(", "range", "(", "0", ",", "H", ",", "step", ")", ")", "*", "xw0", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "c", "=", "0", "\n", "for", "i", "in", "range", "(", "x1", ",", "x2", ",", "step", ")", ":", "\n", "        ", "xw", "=", "xw0", ".", "copy", "(", ")", "\n", "uu", "=", "uu0", ".", "copy", "(", ")", "\n", "xw", "[", ":", ",", "0", "]", "=", "i", "\n", "\n", "z", "=", "depth", "[", "xw", "[", ":", ",", "0", "]", ",", "xw", "[", ":", ",", "1", "]", "]", "\n", "\n", "xw", "[", ":", ",", "0", "]", "=", "xw", "[", ":", ",", "0", "]", "*", "z", "\n", "xw", "[", ":", ",", "1", "]", "=", "xw", "[", ":", ",", "1", "]", "*", "z", "\n", "\n", "uu", "[", ":", ",", "0", "]", "=", "uu", "[", ":", ",", "0", "]", "*", "z", "\n", "uu", "[", ":", ",", "1", "]", "=", "uu", "[", ":", ",", "1", "]", "*", "z", "\n", "\n", "X", "=", "(", "xw", "[", ":", ",", "1", "]", "-", "uu", "[", ":", ",", "0", "]", ")", "/", "fx", "\n", "Y", "=", "(", "xw", "[", ":", ",", "0", "]", "-", "uu", "[", ":", ",", "1", "]", ")", "/", "fy", "\n", "mesh", "[", "xw", ".", "shape", "[", "0", "]", "*", "c", ":", "xw", ".", "shape", "[", "0", "]", "*", "(", "c", "+", "1", ")", ",", "0", "]", "=", "X", "\n", "mesh", "[", "xw", ".", "shape", "[", "0", "]", "*", "c", ":", "xw", ".", "shape", "[", "0", "]", "*", "(", "c", "+", "1", ")", ",", "1", "]", "=", "Y", "\n", "mesh", "[", "xw", ".", "shape", "[", "0", "]", "*", "c", ":", "xw", ".", "shape", "[", "0", "]", "*", "(", "c", "+", "1", ")", ",", "2", "]", "=", "z", "\n", "c", "+=", "1", "\n", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.getFiles_ab": [[456, 467], ["os.walk", "L.sort", "L.append", "os.path.splitext", "os.path.join", "int"], "function", ["None"], ["", "def", "getFiles_ab", "(", "file_dir", ",", "suf", ",", "a", ",", "b", ")", ":", "\n", "    ", "L", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "file_dir", ")", ":", "\n", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "if", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "1", "]", "==", "suf", ":", "\n", "\n", "                ", "L", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "L", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "a", ":", "b", "]", ")", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.getFiles_any": [[469, 480], ["os.listdir", "L.append", "os.path.splitext", "os.path.join"], "function", ["None"], ["", "def", "getFiles_any", "(", "file_dir", ",", "suf", ")", ":", "\n", "    ", "L", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "file_dir", ")", ":", "\n", "\n", "        ", "if", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "1", "]", "==", "suf", ":", "\n", "\n", "\n", "            ", "L", ".", "append", "(", "os", ".", "path", ".", "join", "(", "file", ")", ")", "\n", "\n", "\n", "", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.draw_mesh_3D": [[482, 531], ["pc.reshape.reshape", "utils_funs.get_rotation", "numpy.dot", "numpy.zeros", "numpy.zeros", "numpy.dot", "ax.scatter", "ax.set_xlabel", "ax.set_ylabel", "ax.set_zlabel", "cv2.Rodrigues", "len"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_rotation"], ["", "def", "draw_mesh_3D", "(", "ax", ",", "pc", ",", "R_", ",", "T_", ",", "fl", ",", "color", ",", "s2", "=", "10", ",", "alpha", "=", "1", ")", ":", "\n", "\n", "\n", "    ", "'''\n\n    :param ax:\n    :param pc: N*3\n    :param R_:\n    :param T_:\n    :param fl:\n    :param color:\n    :return:\n    '''", "\n", "pc", "=", "pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "if", "fl", "==", "1", ":", "\n", "        ", "RR", "=", "(", "cv2", ".", "Rodrigues", "(", "R_", ")", ")", "\n", "R", "=", "RR", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "R", "=", "R_", "\n", "\n", "\n", "", "R_m", "=", "get_rotation", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "R", "=", "np", ".", "dot", "(", "R", ",", "R_m", ")", "\n", "pc_temp", "=", "pc", "\n", "\n", "pc", "[", ":", ",", "0", "]", "=", "pc_temp", "[", ":", ",", "0", "]", "\n", "pc", "[", ":", ",", "1", "]", "=", "pc_temp", "[", ":", ",", "1", "]", "\n", "pc", "[", ":", ",", "2", "]", "=", "pc_temp", "[", ":", ",", "2", "]", "\n", "\n", "pcc", "=", "np", ".", "zeros", "(", "(", "4", ",", "len", "(", "pc", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "pcc", "[", "0", ":", "3", ",", ":", "]", "=", "pc", ".", "T", "\n", "pcc", "[", "3", ",", ":", "]", "=", "1", "\n", "\n", "\n", "TT", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ",", "dtype", "=", "'float32'", ")", "\n", "TT", "[", ":", ",", "0", ":", "3", "]", "=", "R", "\n", "TT", "[", ":", ",", "3", "]", "=", "T_", "\n", "\n", "\n", "pc_tt", "=", "np", ".", "dot", "(", "TT", ",", "pcc", ")", "\n", "\n", "\n", "ax", ".", "scatter", "(", "pc_tt", "[", "0", ",", ":", "]", ",", "pc_tt", "[", "1", ",", ":", "]", ",", "pc_tt", "[", "2", ",", ":", "]", ",", "c", "=", "color", ",", "s", "=", "s2", ",", "alpha", "=", "alpha", ")", "\n", "\n", "\n", "ax", ".", "set_xlabel", "(", "'X'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.seg2txt": [[533, 559], ["numpy.where", "max", "max", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "min", "c.min", "min", "r.min", "c.min", "r.min", "c.max", "r.max"], "function", ["None"], ["", "def", "seg2txt", "(", "seg", ",", "idx", ",", "rgb_path", ")", ":", "\n", "    ", "H", "=", "seg", ".", "shape", "[", "0", "]", "\n", "W", "=", "seg", ".", "shape", "[", "1", "]", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "seg", ">", "0", ")", "\n", "enl", "=", "0", "\n", "xmin", "=", "max", "(", "c", ".", "min", "(", ")", "-", "enl", ",", "0", ")", "\n", "ymin", "=", "max", "(", "r", ".", "min", "(", ")", "-", "enl", ",", "0", ")", "\n", "wid", "=", "min", "(", "c", ".", "max", "(", ")", "+", "enl", ",", "W", ")", "-", "c", ".", "min", "(", ")", "\n", "hig", "=", "min", "(", "r", ".", "max", "(", ")", "+", "enl", ",", "H", ")", "-", "r", ".", "min", "(", ")", "\n", "\n", "b1", "=", "(", "xmin", "+", "wid", "/", "2", ")", "/", "W", "\n", "b2", "=", "(", "ymin", "+", "hig", "/", "2", ")", "/", "H", "\n", "b3", "=", "wid", "/", "W", "\n", "b4", "=", "hig", "/", "H", "\n", "txt_name", "=", "'%04d.txt'", "%", "(", "idx", ")", "\n", "txtnames", "=", "rgb_path", "+", "txt_name", "\n", "\n", "fid", "=", "open", "(", "txtnames", ",", "'w+'", ")", "\n", "fid", ".", "write", "(", "'%d '", "%", "(", "0", ")", ")", "\n", "fid", ".", "write", "(", "'%f '", "%", "(", "b1", ")", ")", "\n", "fid", ".", "write", "(", "'%f '", "%", "(", "b2", ")", ")", "\n", "fid", ".", "write", "(", "'%f '", "%", "(", "b3", ")", ")", "\n", "fid", ".", "write", "(", "'%f '", "%", "(", "b4", ")", ")", "\n", "fid", ".", "write", "(", "'\\n'", ")", "\n", "\n", "fid", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.trans_3d": [[560, 584], ["numpy.reshape", "numpy.zeros", "numpy.zeros", "numpy.dot"], "function", ["None"], ["", "def", "trans_3d", "(", "pc", ",", "Rt", ",", "Tt", ")", ":", "\n", "\n", "    ", "'''\n\n    :param pc: should be n*3\n    :param Rt: 3*3\n    :param Tt: 3*1\n    :return:\n    '''", "\n", "\n", "Tt", "=", "np", ".", "reshape", "(", "Tt", ",", "(", "3", ",", "1", ")", ")", "\n", "pcc", "=", "np", ".", "zeros", "(", "(", "4", ",", "pc", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pcc", "[", "0", ":", "3", ",", ":", "]", "=", "pc", ".", "T", "\n", "pcc", "[", "3", ",", ":", "]", "=", "1", "\n", "\n", "\n", "TT", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "TT", "[", ":", ",", "0", ":", "3", "]", "=", "Rt", "\n", "TT", "[", ":", ",", "3", "]", "=", "Tt", "[", ":", ",", "0", "]", "\n", "\n", "trans", "=", "np", ".", "dot", "(", "TT", ",", "pcc", ")", "\n", "\n", "\n", "return", "trans", "## 3 N", "\n", "", "def", "get6dpose2_f", "(", "pcc", ",", "Rt", ",", "Tt", ",", "R", ",", "T", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get6dpose2_f": [[584, 594], ["utils_funs.trans_3d", "utils_funs.trans_3d", "numpy.linalg.norm", "sum", "np.linalg.norm.flatten"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.trans_3d", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.trans_3d"], ["", "def", "get6dpose2_f", "(", "pcc", ",", "Rt", ",", "Tt", ",", "R", ",", "T", ")", ":", "\n", "    ", "estPt", "=", "trans_3d", "(", "pcc", ",", "R", ",", "T", ")", "\n", "\n", "gtPt0", "=", "trans_3d", "(", "pcc", ",", "Rt", ",", "Tt", ")", "\n", "delta", "=", "estPt", "-", "gtPt0", "\n", "\n", "ss", "=", "np", ".", "linalg", ".", "norm", "(", "delta", ",", "2", ",", "0", ")", "\n", "dis", "=", "sum", "(", "ss", ".", "flatten", "(", ")", ")", "/", "pcc", ".", "shape", "[", "0", "]", "\n", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.read_RT": [[595, 601], ["numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["", "def", "read_RT", "(", "obj", ")", ":", "\n", "    ", "base_path", "=", "'../models/%d/'", "%", "(", "obj", ")", "\n", "\n", "R", "=", "np", ".", "loadtxt", "(", "base_path", "+", "'R.txt'", ")", "\n", "T", "=", "np", ".", "loadtxt", "(", "base_path", "+", "'T.txt'", ")", "\n", "return", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_vectors": [[602, 632], ["pts.unsqueeze().repeat.view", "kps.unsqueeze().repeat.view", "pts.unsqueeze().repeat.unsqueeze().repeat", "kps.unsqueeze().repeat.unsqueeze().repeat", "pts.unsqueeze().repeat.float", "vecs.norm", "vn.repeat.repeat", "vecs.view", "vecs.view", "pts.unsqueeze().repeat.unsqueeze", "kps.unsqueeze().repeat.unsqueeze"], "function", ["None"], ["", "def", "get_vectors", "(", "pts", ",", "kps", ",", "vn", "=", "1", ")", ":", "\n", "    ", "'''\n\n    :param pts: N*3\n    :param kps: M*3\n    :return:\n    '''", "\n", "\n", "## N M 3", "\n", "pts", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "\n", "kps", "=", "kps", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "N", "=", "pts", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "M", "=", "kps", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "pts", "=", "pts", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "M", ",", "1", ")", "## N M 3", "\n", "kps", "=", "kps", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "## N M 3", "\n", "vecs", "=", "kps", "-", "pts", ".", "float", "(", ")", "## N M 3", "\n", "\n", "if", "vn", "==", "1", ":", "\n", "        ", "vn", "=", "vecs", ".", "norm", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "## N M 1", "\n", "vn", "=", "vn", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "## N M 3", "\n", "vecs", "=", "vecs", "/", "vn", "## N M 3", "\n", "return", "vecs", ".", "view", "(", "pts", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "## N M*3", "\n", "", "else", ":", "\n", "        ", "return", "vecs", ".", "view", "(", "pts", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "## N M*3", "\n", "", "", "def", "data_augment", "(", "points", ",", "Rs", ",", "Ts", ",", "obj_id", ",", "temp", ",", "num_c", ",", "target_seg", ",", "idxs", ",", "ax", "=", "5", ",", "ay", "=", "5", ",", "az", "=", "25", ",", "a", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.data_augment": [[632, 683], ["numpy.zeros", "numpy.zeros", "torch.zeros", "points.copy", "range", "idxs[].item", "numpy.mean", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "utils_funs.get_rotation", "utils_funs.get_corners", "trans_3d().T.flatten", "utils_funs.get_vectors", "numpy.array", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.dot", "numpy.mean", "numpy.array", "obj_id[].numpy", "numpy.dot", "torch.from_numpy", "torch.from_numpy().float", "utils_funs.trans_3d", "torch.from_numpy", "numpy.where", "numpy.dot", "numpy.where", "target_seg.numpy"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_rotation", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_corners", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_vectors", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.trans_3d"], ["", "", "def", "data_augment", "(", "points", ",", "Rs", ",", "Ts", ",", "obj_id", ",", "temp", ",", "num_c", ",", "target_seg", ",", "idxs", ",", "ax", "=", "5", ",", "ay", "=", "5", ",", "az", "=", "25", ",", "a", "=", "10", ")", ":", "\n", "\n", "    ", "centers", "=", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "corners", "=", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "3", "*", "num_c", ")", ")", "\n", "vecs", "=", "torch", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "1", "]", ",", "3", "*", "num_c", ")", "\n", "pts0", "=", "points", ".", "copy", "(", ")", "\n", "for", "ii", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "idx", "=", "idxs", "[", "ii", "]", ".", "item", "(", ")", "\n", "\n", "Rt", "=", "Rs", "[", "idx", "*", "3", ":", "(", "idx", "+", "1", ")", "*", "3", ",", "0", ":", "3", "]", "\n", "Tt", "=", "Ts", "[", "idx", "]", "\n", "\n", "res", "=", "np", ".", "mean", "(", "points", "[", "ii", "]", ",", "0", ")", "\n", "points", "[", "ii", ",", ":", ",", "0", ":", "3", "]", "=", "points", "[", "ii", ",", ":", ",", "0", ":", "3", "]", "-", "np", ".", "array", "(", "[", "res", "[", "0", "]", ",", "res", "[", "1", "]", ",", "res", "[", "2", "]", "]", ")", "\n", "\n", "\n", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "ax", ",", "ax", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "ay", ",", "ay", ")", "\n", "dz", "=", "np", ".", "random", ".", "randint", "(", "-", "az", ",", "az", ")", "\n", "\n", "points", "[", "ii", ",", ":", ",", "0", "]", "=", "points", "[", "ii", ",", ":", ",", "0", "]", "+", "dx", "\n", "points", "[", "ii", ",", ":", ",", "1", "]", "=", "points", "[", "ii", ",", ":", ",", "1", "]", "+", "dy", "\n", "points", "[", "ii", ",", ":", ",", "2", "]", "=", "points", "[", "ii", ",", ":", ",", "2", "]", "+", "dz", "\n", "\n", "\n", "\n", "\n", "Rm", "=", "get_rotation", "(", "np", ".", "random", ".", "uniform", "(", "-", "a", ",", "a", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "a", ",", "a", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "a", ",", "a", ")", ")", "\n", "\n", "points", "[", "ii", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "Rm", ",", "points", "[", "ii", ",", ":", ",", "0", ":", "3", "]", ".", "T", ")", ".", "T", "\n", "\n", "pts_seg", "=", "pts0", "[", "ii", ",", "np", ".", "where", "(", "target_seg", ".", "numpy", "(", ")", "[", "ii", ",", ":", "]", "==", "1", ")", "[", "0", "]", ",", "0", ":", "3", "]", "\n", "centers", "[", "ii", ",", ":", "]", "=", "Tt", ".", "T", "-", "np", ".", "mean", "(", "pts_seg", ",", "0", ")", "\n", "\n", "\n", "Tt_c", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ".", "T", "\n", "corners_", "=", "get_corners", "(", "obj_id", "[", "ii", "]", ".", "numpy", "(", ")", ",", "temp", ",", "num", "=", "num_c", ")", "\n", "\n", "pts_noT", "=", "pts_seg", "-", "Tt", ".", "T", "\n", "\n", "\n", "pts_noT", "=", "np", ".", "dot", "(", "Rm", ",", "pts_noT", ".", "T", ")", ".", "T", "\n", "\n", "\n", "corners", "[", "ii", ",", ":", "]", "=", "(", "trans_3d", "(", "corners_", ",", "np", ".", "dot", "(", "Rm", ",", "Rt", ")", ",", "Tt_c", ")", ".", "T", ")", ".", "flatten", "(", ")", "\n", "vecs", "[", "ii", ",", "np", ".", "where", "(", "target_seg", "[", "ii", ",", ":", "]", "==", "1", ")", "[", "0", "]", "]", "=", "get_vectors", "(", "torch", ".", "from_numpy", "(", "pts_noT", ")", ",", "torch", ".", "from_numpy", "(", "corners", "[", "ii", ",", ":", "]", ")", ".", "float", "(", ")", ")", "\n", "\n", "\n", "", "return", "points", ",", "corners", ",", "centers", ",", "vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_RT_bat": [[686, 748], ["torch.bmm", "torch.ones", "torch.cuda.is_available", "range", "torch.bmm().transpose", "P.mean", "Q.mean", "P1.transpose", "R.cuda.cuda", "torch.svd", "torch.diag", "torch.cuda.is_available", "torch.Tensor", "E.cuda.cuda", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "utils_funs.get_rotation", "torch.Tensor", "torch.cuda.is_available", "torch.mm", "torch.mm", "torch.bmm", "torch.det", "torch.det", "Rm.cuda.cuda", "torch.mm", "torch.mm", "P.transpose", "U.transpose", "torch.mm", "U.transpose", "U.transpose"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_rotation"], ["", "def", "get_RT_bat", "(", "P", ",", "Q", ",", "a", "=", "2", ",", "b", "=", "2", ",", "c", "=", "2", ")", ":", "\n", "\n", "    ", "'''\n\n    :param P: B*N*3\n    :param Q: B*N*3\n    :return:\n    '''", "\n", "\n", "P1", "=", "P", "-", "P", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "Q1", "=", "Q", "-", "Q", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "C", "=", "torch", ".", "bmm", "(", "P1", ".", "transpose", "(", "1", ",", "2", ")", ",", "Q1", ")", "## B*3*3", "\n", "\n", "# Computation of the optimal rotation matrix", "\n", "# This can be done using singular value decomposition (SVD)", "\n", "# Getting the sign of the det(V)*(W) to decide", "\n", "# whether we need to correct our rotation matrix to ensure a", "\n", "# right-handed coordinate system.", "\n", "# And finally calculating the optimal rotation matrix U", "\n", "# see http://en.wikipedia.org/wiki/Kabsch_algorithm", "\n", "\n", "\n", "R", "=", "torch", ".", "ones", "(", "C", ".", "shape", "[", "0", "]", ",", "3", ",", "3", ")", "#.cuda()", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "R", "=", "R", ".", "cuda", "(", ")", "\n", "", "for", "ib", "in", "range", "(", "C", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "\n", "\n", "        ", "U", ",", "S", ",", "V", "=", "torch", ".", "svd", "(", "C", "[", "ib", ",", ":", ",", ":", "]", ")", "\n", "\n", "d", "=", "(", "torch", ".", "det", "(", "V", ")", "*", "torch", ".", "det", "(", "U", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "<", "0.0", "\n", "\n", "\n", "\n", "if", "d", ":", "\n", "            ", "S", "[", "-", "1", "]", "=", "-", "S", "[", "-", "1", "]", "\n", "V", "[", "-", "1", ",", ":", "]", "=", "-", "V", "[", "-", "1", ",", ":", "]", "\n", "\n", "# E = np.diag(np.array([1, 1, 1]))", "\n", "", "E", "=", "torch", ".", "diag", "(", "torch", ".", "Tensor", "(", "[", "1", ",", "1", ",", "1", "]", ")", ")", "#.cuda()", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "E", "=", "E", ".", "cuda", "(", ")", "\n", "", "if", "a", ">", "0", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "randint", "(", "-", "a", ",", "a", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "-", "b", ",", "b", ")", "\n", "z", "=", "np", ".", "random", ".", "randint", "(", "-", "c", ",", "c", ")", "\n", "Rm", "=", "get_rotation", "(", "x", ",", "y", ",", "z", ")", "\n", "Rm", "=", "torch", ".", "Tensor", "(", "Rm", ")", "#'.cuda()", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "Rm", "=", "Rm", ".", "cuda", "(", ")", "\n", "", "R", "[", "ib", ",", ":", ",", ":", "]", "=", "torch", ".", "mm", "(", "Rm", ",", "torch", ".", "mm", "(", "V", ",", "torch", ".", "mm", "(", "E", ",", "U", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "R", "[", "ib", ",", ":", ",", ":", "]", "=", "torch", ".", "mm", "(", "V", ",", "torch", ".", "mm", "(", "E", ",", "U", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "\n", "\n", "\n", "# T=Q-torch.bmm(R,P.transpose(1,2)).transpose(2,1)", "\n", "", "", "cors", "=", "torch", ".", "bmm", "(", "R", ",", "P", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "\n", "return", "cors", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_usage.load_models": [[16, 90], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "G2L_Net.utils.networks_arch.Seg_3D", "G2L_Net.utils.networks_arch.Point_center_res", "G2L_Net.utils.networks_arch.Point_box_v_es", "G2L_Net.utils.networks_arch.Point_box_R_es", "G2L_Net.utils.networks_arch.Rotation_pre", "torch.MSELoss", "torch.MSELoss", "nn.MSELoss.cuda", "nn.MSELoss.cuda", "torch.DataParallel", "classifier.eval.cuda", "classifier.eval.eval", "torch.DataParallel", "classifier_ce.eval.cuda", "classifier_ce.eval.eval", "torch.DataParallel", "classifier_box.eval.cuda", "classifier_box.eval.eval", "torch.DataParallel", "classifier_box_gan.eval.cuda", "classifier_box_gan.eval.eval", "torch.DataParallel", "classifier_box_vec.eval.cuda", "classifier_box_vec.eval.eval", "classifier.eval.load_state_dict", "classifier_ce.eval.load_state_dict", "classifier_box.eval.load_state_dict", "classifier_box_gan.eval.load_state_dict", "classifier_box_vec.eval.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["def", "load_models", "(", "obj", ",", "epoch", "=", "199", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "help", "=", "'number of data loading workers'", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--nepoch'", ",", "type", "=", "int", ",", "default", "=", "epoch", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--outf'", ",", "type", "=", "str", ",", "\n", "default", "=", "'../models/%d'", "%", "(", "obj", ")", ",", "\n", "help", "=", "'output folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'model path'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "opt", ".", "outclass", "=", "2", "\n", "kc", "=", "2", "\n", "classifier_3D", "=", "Seg_3D", "(", "kc", ",", "ic", "=", "3", ")", "\n", "classifier_ce", "=", "Point_center_res", "(", ")", "\n", "\n", "\n", "num_c", "=", "8", "\n", "classifier_box", "=", "Point_box_v_es", "(", "num_c", ",", "inputchannel", "=", "3", ")", "\n", "classifier_box_gan", "=", "Point_box_R_es", "(", "num_c", ")", "\n", "\n", "classifier_box_vec", "=", "Rotation_pre", "(", "F", "=", "2280", ")", "\n", "\n", "\n", "Loss_func_ce", "=", "nn", ".", "MSELoss", "(", ")", "\n", "Loss_func_box", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "Loss_func_ce", ".", "cuda", "(", ")", "\n", "Loss_func_box", ".", "cuda", "(", ")", "\n", "\n", "\n", "classifier", "=", "nn", ".", "DataParallel", "(", "classifier_3D", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "\n", "classifier_ce", "=", "nn", ".", "DataParallel", "(", "classifier_ce", ")", "\n", "classifier_ce", ".", "cuda", "(", ")", "\n", "classifier_ce", "=", "classifier_ce", ".", "eval", "(", ")", "\n", "\n", "classifier_box", "=", "nn", ".", "DataParallel", "(", "classifier_box", ")", "\n", "classifier_box", ".", "cuda", "(", ")", "\n", "classifier_box", "=", "classifier_box", ".", "eval", "(", ")", "\n", "\n", "classifier_box_gan", "=", "nn", ".", "DataParallel", "(", "classifier_box_gan", ")", "\n", "classifier_box_gan", ".", "cuda", "(", ")", "\n", "classifier_box_gan", "=", "classifier_box_gan", ".", "eval", "(", ")", "\n", "\n", "classifier_box_vec", "=", "nn", ".", "DataParallel", "(", "classifier_box_vec", ")", "\n", "classifier_box_vec", ".", "cuda", "(", ")", "\n", "classifier_box_vec", "=", "classifier_box_vec", ".", "eval", "(", ")", "\n", "\n", "objm", "=", "obj", "\n", "\n", "model_class", "=", "'%s/Seg3D_epoch%d_obj%d.pth'", "%", "(", "opt", ".", "outf", ",", "epoch", ",", "objm", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_class", ")", ")", "\n", "\n", "\n", "model_res", "=", "'%s/Tres_epoch%d_obj%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "epoch", ",", "objm", ")", "\n", "classifier_ce", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_res", ")", ")", "\n", "\n", "model_box", "=", "'%s/EVF_epoch%d_obj%d.pth'", "%", "(", "opt", ".", "outf", ",", "epoch", ",", "objm", ")", "\n", "classifier_box", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_box", ")", ")", "\n", "\n", "model_box_RRes", "=", "'%s/R_res_E_epoch%d_obj%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "epoch", ",", "objm", ")", "\n", "classifier_box_gan", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_box_RRes", ")", ")", "\n", "\n", "model_box_R", "=", "'%s/RE_epoch%d_obj%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "epoch", ",", "objm", ")", "\n", "classifier_box_vec", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_box_R", ")", ")", "\n", "\n", "return", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_usage.demo_linemod": [[91, 187], ["torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "pointsf.transpose.clone", "torch.Tensor", "torch.Tensor", "pointsf.transpose.numpy().copy", "numpy.mean", "G2L_Net.utils.utils_funs.get_corners", "torch.autograd.Variable", "pointsf.transpose.cuda", "points[].unsqueeze", "points[].unsqueeze.transpose", "classifier", "matplotlib.cm.get_cmap", "ptsori.cuda.cuda", "numpy.array", "torch.Tensor", "torch.Tensor", "classifier.data.max", "numpy.array", "pred_choice.cpu().numpy", "len", "print", "torch.index_select", "torch.index_select", "pts_[].unsqueeze().float", "pts_s.transpose.cuda", "pts_s.transpose.transpose", "classifier_ce", "box_pt0.transpose().unsqueeze", "box_pt.transpose.transpose", "classifier_box", "corners_.reshape.reshape", "torch.cat", "torch.cat", "feavec.transpose.transpose", "classifier_box_vec", "G2L_Net.utils.utils_funs.gettrans", "corners_.reshape.reshape", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "cors_box.contiguous().view.contiguous().view", "classifier_box_gan", "G2L_Net.utils.utils_funs.gettrans", "torch.Tensor", "torch.Tensor", "pointsf.transpose.numpy", "[].cuda", "feavec.transpose.detach", "corners_.reshape.reshape", "classifier_box_vec.view().detach().cpu().numpy", "numpy.dot", "corners_.reshape.reshape", "classifier_box_gan.view().detach().cpu().numpy", "plt.cm.get_cmap.", "pred_choice.cpu", "p[].nonzero", "pts_[].unsqueeze", "pts_s.transpose.mean", "box_pt0.transpose", "feat.transpose", "torch.from_numpy", "torch.from_numpy", "cors_box.contiguous().view.contiguous", "range", "classifier_ce.unsqueeze", "classifier_box_vec.view().detach().cpu", "classifier_box_gan.view().detach().cpu", "p[].nonzero", "pts_s.transpose.mean", "classifier_box_vec.view().detach", "classifier_box_gan.view().detach", "classifier_box_vec.view", "classifier_box_gan.view", "pts_s.transpose.mean", "classifier_ce.unsqueeze"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_corners", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.gettrans", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.gettrans"], ["", "def", "demo_linemod", "(", "pts", ",", "rgb", ",", "rgb2", ",", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", ",", "pc", ",", "Rt", "=", "0", ",", "Tt", "=", "0", ",", "OR", "=", "0", ",", "temp", "=", "0", ")", ":", "\n", "    ", "numc", "=", "8", "\n", "num_c", "=", "8", "\n", "\n", "\n", "obj", "=", "1", "\n", "\n", "\n", "\n", "\n", "\n", "points", "=", "torch", ".", "Tensor", "(", "pts", ")", ".", "unsqueeze", "(", "0", ")", "\n", "ptsori", "=", "points", ".", "clone", "(", ")", "\n", "\n", "\n", "\n", "obj_id", "=", "torch", ".", "Tensor", "(", "[", "obj", "]", ")", "\n", "\n", "points", "=", "points", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "res", "=", "np", ".", "mean", "(", "points", "[", "0", "]", ",", "0", ")", "\n", "points", "[", "0", ",", ":", ",", "0", ":", "3", "]", "=", "points", "[", "0", ",", ":", ",", "0", ":", "3", "]", "-", "np", ".", "array", "(", "[", "res", "[", "0", "]", ",", "res", "[", "1", "]", ",", "res", "[", "2", "]", "]", ")", "\n", "\n", "corners_", "=", "get_corners", "(", "obj", ",", "temp", ",", "num", "=", "num_c", ")", "\n", "\n", "points", "=", "Variable", "(", "torch", ".", "Tensor", "(", "points", ")", ")", "\n", "\n", "points", "=", "points", ".", "cuda", "(", ")", "\n", "\n", "pointsf", "=", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "points", "=", "pointsf", ".", "transpose", "(", "3", ",", "1", ")", "\n", "\n", "pred_seg", "=", "classifier", "(", "points", ",", "obj_id", ")", "\n", "\n", "pred_choice", "=", "pred_seg", ".", "data", ".", "max", "(", "2", ")", "[", "1", "]", "\n", "\n", "p", "=", "pred_choice", "\n", "cmap", "=", "plt", ".", "cm", ".", "get_cmap", "(", "\"hsv\"", ",", "20", ")", "\n", "cmap", "=", "np", ".", "array", "(", "[", "cmap", "(", "i", ")", "for", "i", "in", "range", "(", "20", ")", "]", ")", "[", ":", ",", ":", "3", "]", "\n", "\n", "pred_choice1", "=", "pred_choice", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "pred_color0", "=", "cmap", "[", "pred_choice1", ",", ":", "]", "\n", "\n", "ptsori", "=", "ptsori", ".", "cuda", "(", ")", "\n", "\n", "if", "len", "(", "p", "[", "0", ",", ":", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", ")", "<", "10", ":", "\n", "        ", "print", "(", "'No object pts'", ")", "\n", "", "else", ":", "\n", "        ", "pts_", "=", "torch", ".", "index_select", "(", "ptsori", "[", "0", ",", ":", ",", "0", ":", "3", "]", ",", "0", ",", "p", "[", "0", ",", ":", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", ".", "cuda", "(", ")", ")", "##Nx3", "\n", "\n", "pts_s", "=", "pts_", "[", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "\n", "pts_s", "=", "pts_s", ".", "cuda", "(", ")", "\n", "\n", "pts_s", "=", "pts_s", ".", "transpose", "(", "2", ",", "1", ")", "\n", "cen_pred", "=", "classifier_ce", "(", "(", "pts_s", "-", "pts_s", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", ",", "obj_id", ")", "\n", "box_pt0", "=", "(", "pts_s", "-", "pts_s", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "-", "cen_pred", ".", "unsqueeze", "(", "2", ")", ")", ".", "detach", "(", ")", "\n", "box_pt", "=", "box_pt0", ".", "transpose", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "box_pt", "=", "box_pt", ".", "transpose", "(", "3", ",", "1", ")", "\n", "box_pred", ",", "feat", "=", "classifier_box", "(", "box_pt", ",", "obj_id", ",", "1", ")", "\n", "\n", "\n", "corners_", "=", "corners_", ".", "reshape", "(", "(", "numc", ",", "1", ",", "3", ")", ")", "\n", "\n", "\n", "feavec", "=", "torch", ".", "cat", "(", "[", "box_pred", ",", "feat", ".", "transpose", "(", "1", ",", "2", ")", "]", ",", "2", ")", "##", "\n", "feavec", "=", "feavec", ".", "transpose", "(", "1", ",", "2", ")", "\n", "kp_m", "=", "classifier_box_vec", "(", "feavec", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "\n", "pose", "=", "gettrans", "(", "corners_", ".", "reshape", "(", "(", "numc", ",", "3", ")", ")", ",", "kp_m", ".", "view", "(", "(", "numc", ",", "1", ",", "3", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "R", "=", "pose", "[", "0", "]", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "\n", "corners_", "=", "corners_", ".", "reshape", "(", "(", "numc", ",", "3", ")", ")", "\n", "cors_box", "=", "np", ".", "dot", "(", "R", ",", "corners_", ".", "T", ")", ".", "T", "\n", "cors_box", "=", "torch", ".", "from_numpy", "(", "cors_box", ")", ".", "cuda", "(", ")", "\n", "#", "\n", "cors_box", "=", "cors_box", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "box_pred_gan", "=", "classifier_box_gan", "(", "feat", ")", "\n", "box_pred_gan", "=", "box_pred_gan", "+", "cors_box", "\n", "\n", "pose_gan", "=", "gettrans", "(", "corners_", ".", "reshape", "(", "(", "numc", ",", "3", ")", ")", ",", "box_pred_gan", ".", "view", "(", "(", "numc", ",", "1", ",", "3", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "T", "=", "(", "pts_s", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "cen_pred", ".", "unsqueeze", "(", "2", ")", ")", ".", "view", "(", "1", ",", "3", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "Rg", "=", "pose_gan", "[", "0", "]", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "\n", "\n", "\n", "return", "Rg", ",", "T", "", "", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view": [[105, 107], ["numpy.dot"], "function", ["None"], ["def", "_compute_model_view", "(", "model", ",", "view", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "model", ",", "view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view_proj": [[109, 111], ["numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "_compute_model_view_proj", "(", "model", ",", "view", ",", "proj", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "np", ".", "dot", "(", "model", ",", "view", ")", ",", "proj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_normal_matrix": [[113, 115], ["numpy.linalg.inv", "numpy.dot"], "function", ["None"], ["", "def", "_compute_normal_matrix", "(", "model", ",", "view", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "model", ",", "view", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_calib_proj": [[121, 157], ["float", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "_compute_calib_proj", "(", "K", ",", "x0", ",", "y0", ",", "w", ",", "h", ",", "nc", ",", "fc", ",", "window_coords", "=", "'y_down'", ")", ":", "\n", "    ", "\"\"\"\n    :param K: Camera matrix.\n    :param x0, y0: The camera image origin (normally (0, 0)).\n    :param w: Image width.\n    :param h: Image height.\n    :param nc: Near clipping plane.\n    :param fc: Far clipping plane.\n    :param window_coords: 'y_up' or 'y_down'.\n    :return: OpenGL projection matrix.\n    \"\"\"", "\n", "depth", "=", "float", "(", "fc", "-", "nc", ")", "\n", "q", "=", "-", "(", "fc", "+", "nc", ")", "/", "depth", "\n", "qn", "=", "-", "2", "*", "(", "fc", "*", "nc", ")", "/", "depth", "\n", "\n", "# Draw our images upside down, so that all the pixel-based coordinate", "\n", "# systems are the same", "\n", "if", "window_coords", "==", "'y_up'", ":", "\n", "        ", "proj", "=", "np", ".", "array", "(", "[", "\n", "[", "2", "*", "K", "[", "0", ",", "0", "]", "/", "w", ",", "-", "2", "*", "K", "[", "0", ",", "1", "]", "/", "w", ",", "(", "-", "2", "*", "K", "[", "0", ",", "2", "]", "+", "w", "+", "2", "*", "x0", ")", "/", "w", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "2", "*", "K", "[", "1", ",", "1", "]", "/", "h", ",", "(", "-", "2", "*", "K", "[", "1", ",", "2", "]", "+", "h", "+", "2", "*", "y0", ")", "/", "h", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "q", ",", "qn", "]", ",", "# This row is standard glPerspective and sets near and far planes", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", "\n", "]", ")", "# This row is also standard glPerspective", "\n", "\n", "# Draw the images right side up and modify the projection matrix so that OpenGL", "\n", "# will generate window coords that compensate for the flipped image coords", "\n", "", "else", ":", "\n", "        ", "assert", "window_coords", "==", "'y_down'", "\n", "proj", "=", "np", ".", "array", "(", "[", "\n", "[", "2", "*", "K", "[", "0", ",", "0", "]", "/", "w", ",", "-", "2", "*", "K", "[", "0", ",", "1", "]", "/", "w", ",", "(", "-", "2", "*", "K", "[", "0", ",", "2", "]", "+", "w", "+", "2", "*", "x0", ")", "/", "w", ",", "0", "]", ",", "\n", "[", "0", ",", "2", "*", "K", "[", "1", ",", "1", "]", "/", "h", ",", "(", "2", "*", "K", "[", "1", ",", "2", "]", "-", "h", "+", "2", "*", "y0", ")", "/", "h", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "q", ",", "qn", "]", ",", "# This row is standard glPerspective and sets near and far planes", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", "\n", "]", ")", "# This row is also standard glPerspective", "\n", "", "return", "proj", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.draw_color": [[159, 197], ["glumpy.gloo.Program", "gloo.Program.bind", "renderer._compute_model_view", "renderer._compute_model_view_proj", "numpy.zeros().view", "numpy.zeros().view", "glumpy.gloo.FrameBuffer", "gloo.FrameBuffer.activate", "glumpy.gl.glEnable", "glumpy.gl.glEnable", "glumpy.gl.glCullFace", "glumpy.gl.glClearColor", "glumpy.gl.glClear", "glumpy.gl.glViewport", "gloo.Program.draw", "numpy.zeros", "glumpy.gl.glReadPixels", "numpy.round().astype", "gloo.FrameBuffer.deactivate", "numpy.zeros", "numpy.zeros", "numpy.round"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view_proj"], ["", "def", "draw_color", "(", "shape", ",", "vertex_buffer", ",", "index_buffer", ",", "mat_model", ",", "mat_view", ",", "mat_proj", ",", "\n", "ambient_weight", ",", "bg_color", ")", ":", "\n", "\n", "    ", "program", "=", "gloo", ".", "Program", "(", "_color_vertex_code", ",", "_color_fragment_code", ")", "\n", "program", ".", "bind", "(", "vertex_buffer", ")", "\n", "program", "[", "'u_light_eye_pos'", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "program", "[", "'u_light_ambient_w'", "]", "=", "ambient_weight", "\n", "program", "[", "'u_mv'", "]", "=", "_compute_model_view", "(", "mat_model", ",", "mat_view", ")", "\n", "# program['u_nm'] = compute_normal_matrix(model, view)", "\n", "program", "[", "'u_mvp'", "]", "=", "_compute_model_view_proj", "(", "mat_model", ",", "mat_view", ",", "mat_proj", ")", "\n", "\n", "# Frame buffer object", "\n", "color_buf", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", ")", ",", "np", ".", "float32", ")", ".", "view", "(", "gloo", ".", "TextureFloat2D", ")", "\n", "depth_buf", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "np", ".", "float32", ")", ".", "view", "(", "gloo", ".", "DepthTexture", ")", "\n", "fbo", "=", "gloo", ".", "FrameBuffer", "(", "color", "=", "color_buf", ",", "depth", "=", "depth_buf", ")", "\n", "fbo", ".", "activate", "(", ")", "\n", "\n", "# OpenGL setup", "\n", "gl", ".", "glEnable", "(", "gl", ".", "GL_DEPTH_TEST", ")", "\n", "gl", ".", "glEnable", "(", "gl", ".", "GL_CULL_FACE", ")", "\n", "gl", ".", "glCullFace", "(", "gl", ".", "GL_BACK", ")", "# Back-facing polygons will be culled", "\n", "gl", ".", "glClearColor", "(", "bg_color", "[", "0", "]", ",", "bg_color", "[", "1", "]", ",", "bg_color", "[", "2", "]", ",", "bg_color", "[", "3", "]", ")", "\n", "gl", ".", "glClear", "(", "gl", ".", "GL_COLOR_BUFFER_BIT", "|", "gl", ".", "GL_DEPTH_BUFFER_BIT", ")", "\n", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ")", "\n", "\n", "# Rendering", "\n", "program", ".", "draw", "(", "gl", ".", "GL_TRIANGLES", ",", "index_buffer", ")", "\n", "\n", "# Retrieve the contents of the FBO texture", "\n", "rgb", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gl", ".", "glReadPixels", "(", "0", ",", "0", ",", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "gl", ".", "GL_RGBA", ",", "gl", ".", "GL_FLOAT", ",", "rgb", ")", "\n", "rgb", ".", "shape", "=", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", "\n", "rgb", "=", "rgb", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "rgb", "=", "np", ".", "round", "(", "rgb", "[", ":", ",", ":", ",", ":", "3", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# Convert to [0, 255]", "\n", "\n", "fbo", ".", "deactivate", "(", ")", "\n", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.draw_depth": [[198, 247], ["glumpy.gloo.Program", "gloo.Program.bind", "renderer._compute_model_view", "renderer._compute_model_view_proj", "numpy.zeros().view", "numpy.zeros().view", "glumpy.gloo.FrameBuffer", "gloo.FrameBuffer.activate", "glumpy.gl.glEnable", "glumpy.gl.glEnable", "glumpy.gl.glCullFace", "glumpy.gl.glClearColor", "glumpy.gl.glClear", "glumpy.gl.glViewport", "gloo.Program.draw", "numpy.zeros", "glumpy.gl.glReadPixels", "gloo.FrameBuffer.deactivate", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_model_view_proj"], ["", "def", "draw_depth", "(", "shape", ",", "vertex_buffer", ",", "index_buffer", ",", "mat_model", ",", "mat_view", ",", "mat_proj", ")", ":", "\n", "\n", "    ", "program", "=", "gloo", ".", "Program", "(", "_depth_vertex_code", ",", "_depth_fragment_code", ")", "\n", "program", ".", "bind", "(", "vertex_buffer", ")", "\n", "program", "[", "'u_mv'", "]", "=", "_compute_model_view", "(", "mat_model", ",", "mat_view", ")", "\n", "program", "[", "'u_mvp'", "]", "=", "_compute_model_view_proj", "(", "mat_model", ",", "mat_view", ",", "mat_proj", ")", "\n", "#quad = gloo.Program(_depth_vertex_code, _depth_fragment_code, count=4)", "\n", "\n", "\n", "# Frame buffer object", "\n", "\n", "color_buf", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", ")", ",", "np", ".", "float32", ")", ".", "view", "(", "gloo", ".", "TextureFloat2D", ")", "\n", "depth_buf", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "np", ".", "float32", ")", ".", "view", "(", "gloo", ".", "DepthTexture", ")", "\n", "#texture = np.zeros((shape[0], shape[1]), np.float32).view(gloo.TextureFloat2D)", "\n", "#print(depth_buf.shape)", "\n", "#plt.imshow(depth_buf[:,:,0])", "\n", "#plt.show()", "\n", "fbo", "=", "gloo", ".", "FrameBuffer", "(", "color", "=", "color_buf", ",", "depth", "=", "depth_buf", ")", "\n", "#fbo = gloo.FrameBuffer(color=texture)", "\n", "fbo", ".", "activate", "(", ")", "\n", "\n", "gl", ".", "glEnable", "(", "gl", ".", "GL_DEPTH_TEST", ")", "\n", "gl", ".", "glEnable", "(", "gl", ".", "GL_CULL_FACE", ")", "\n", "gl", ".", "glCullFace", "(", "gl", ".", "GL_BACK", ")", "# Back-facing polygons will be culled", "\n", "gl", ".", "glClearColor", "(", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "gl", ".", "glClear", "(", "gl", ".", "GL_COLOR_BUFFER_BIT", "|", "gl", ".", "GL_DEPTH_BUFFER_BIT", ")", "\n", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ")", "\n", "\n", "# Rendering", "\n", "program", ".", "draw", "(", "gl", ".", "GL_TRIANGLES", ",", "index_buffer", ")", "\n", "#quad.draw(gl.GL_TRIANGLE_STRIP)", "\n", "# Retrieve the contents of the FBO texture", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gl", ".", "glReadPixels", "(", "0", ",", "0", ",", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "gl", ".", "GL_RGBA", ",", "gl", ".", "GL_FLOAT", ",", "depth", ")", "\n", "#print(gl.GL_FLOAT)", "\n", "\n", "#print()", "\n", "depth", ".", "shape", "=", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "4", "\n", "depth", "=", "depth", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "#plt.imshow(depth )", "\n", "#plt.show()", "\n", "#print(depth.shape)", "\n", "depth", "=", "depth", "[", ":", ",", ":", ",", "0", "]", "# Depth is saved in the first channel", "\n", "#plt.imshow(depth)", "\n", "#plt.show()", "\n", "\n", "fbo", ".", "deactivate", "(", ")", "\n", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.render": [[249, 339], ["numpy.array", "numpy.eye", "numpy.eye", "numpy.eye", "np.eye.dot", "renderer._compute_calib_proj", "np.array.view", "model[].flatten().astype().view", "glumpy.app.Window", "glumpy.app.run", "app.Window.close", "set", "numpy.tile", "list", "t.squeeze", "app.Window.clear", "model.keys", "model.keys", "zip", "model[].flatten().astype", "renderer.draw_color", "renderer.draw_depth", "np.tile.max", "numpy.ones", "list", "print", "exit", "model[].flatten"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer._compute_calib_proj", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.draw_color", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.renderer.draw_depth"], ["", "def", "render", "(", "model", ",", "im_size", ",", "K", ",", "R", ",", "t", ",", "clip_near", "=", "100", ",", "clip_far", "=", "2000", ",", "\n", "surf_color", "=", "None", ",", "bg_color", "=", "(", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ")", ",", "\n", "ambient_weight", "=", "0.1", ",", "mode", "=", "'rgb+depth'", ")", ":", "\n", "\n", "# Process input data", "\n", "#---------------------------------------------------------------------------", "\n", "# Make sure vertices and faces are provided in the model", "\n", "    ", "assert", "(", "{", "'pts'", ",", "'faces'", "}", ".", "issubset", "(", "set", "(", "model", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "# Set color of vertices", "\n", "if", "not", "surf_color", ":", "\n", "        ", "if", "'colors'", "in", "model", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "(", "model", "[", "'pts'", "]", ".", "shape", "[", "0", "]", "==", "model", "[", "'colors'", "]", ".", "shape", "[", "0", "]", ")", "\n", "colors", "=", "model", "[", "'colors'", "]", "\n", "if", "colors", ".", "max", "(", ")", ">", "1.0", ":", "\n", "                ", "colors", "/=", "255.0", "# Color values are expected to be in range [0, 1]", "\n", "", "", "else", ":", "\n", "            ", "colors", "=", "np", ".", "ones", "(", "(", "model", "[", "'pts'", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "*", "0.5", "\n", "", "", "else", ":", "\n", "        ", "colors", "=", "np", ".", "tile", "(", "list", "(", "surf_color", ")", "+", "[", "1.0", "]", ",", "[", "model", "[", "'pts'", "]", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "", "vertices_type", "=", "[", "(", "'a_position'", ",", "np", ".", "float32", ",", "3", ")", ",", "\n", "#('a_normal', np.float32, 3),", "\n", "(", "'a_color'", ",", "np", ".", "float32", ",", "colors", ".", "shape", "[", "1", "]", ")", "]", "\n", "vertices", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "model", "[", "'pts'", "]", ",", "colors", ")", ")", ",", "vertices_type", ")", "\n", "\n", "# Rendering", "\n", "#---------------------------------------------------------------------------", "\n", "render_rgb", "=", "mode", "in", "[", "'rgb'", ",", "'rgb+depth'", "]", "\n", "render_depth", "=", "mode", "in", "[", "'depth'", ",", "'rgb+depth'", "]", "\n", "\n", "# Model matrix", "\n", "mat_model", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "# From object space to world space", "\n", "\n", "# View matrix (transforming also the coordinate system from OpenCV to", "\n", "# OpenGL camera space)", "\n", "mat_view", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "# From world space to eye space", "\n", "mat_view", "[", ":", "3", ",", ":", "3", "]", ",", "mat_view", "[", ":", "3", ",", "3", "]", "=", "R", ",", "t", ".", "squeeze", "(", ")", "\n", "\n", "#print(mat_view)", "\n", "#plt.show()", "\n", "\n", "yz_flip", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "yz_flip", "[", "1", ",", "1", "]", ",", "yz_flip", "[", "2", ",", "2", "]", "=", "-", "1", ",", "-", "1", "\n", "mat_view", "=", "yz_flip", ".", "dot", "(", "mat_view", ")", "# OpenCV to OpenGL camera system", "\n", "mat_view", "=", "mat_view", ".", "T", "# OpenGL expects column-wise matrix format", "\n", "#print(mat_view)", "\n", "# Projection matrix", "\n", "mat_proj", "=", "_compute_calib_proj", "(", "K", ",", "0", ",", "0", ",", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ",", "clip_near", ",", "clip_far", ")", "\n", "#", "\n", "# Create buffers", "\n", "vertex_buffer", "=", "vertices", ".", "view", "(", "gloo", ".", "VertexBuffer", ")", "\n", "index_buffer", "=", "model", "[", "'faces'", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "uint32", ")", ".", "view", "(", "gloo", ".", "IndexBuffer", ")", "\n", "#print(model['faces'])", "\n", "#plt.show() sss", "\n", "window", "=", "app", ".", "Window", "(", "visible", "=", "False", ")", "\n", "#plt.show() fff", "\n", "global", "rgb", ",", "depth", "\n", "rgb", "=", "None", "\n", "depth", "=", "None", "\n", "#plt.show() failed", "\n", "@", "window", ".", "event", "\n", "def", "on_draw", "(", "dt", ")", ":", "\n", "        ", "window", ".", "clear", "(", ")", "\n", "shape", "=", "(", "im_size", "[", "1", "]", ",", "im_size", "[", "0", "]", ")", "\n", "if", "render_rgb", ":", "\n", "# Render color image", "\n", "            ", "global", "rgb", "\n", "rgb", "=", "draw_color", "(", "shape", ",", "vertex_buffer", ",", "index_buffer", ",", "mat_model", ",", "\n", "mat_view", ",", "mat_proj", ",", "ambient_weight", ",", "bg_color", ")", "\n", "", "if", "render_depth", ":", "\n", "# Render depth image", "\n", "            ", "global", "depth", "\n", "depth", "=", "draw_depth", "(", "shape", ",", "vertex_buffer", ",", "index_buffer", ",", "mat_model", ",", "\n", "mat_view", ",", "mat_proj", ")", "\n", "\n", "\n", "", "", "app", ".", "run", "(", "framecount", "=", "0", ")", "# The on_draw function is called framecount+1 times", "\n", "window", ".", "close", "(", ")", "\n", "#plt.show()", "\n", "# Set output", "\n", "#---------------------------------------------------------------------------", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "        ", "return", "rgb", "\n", "", "elif", "mode", "==", "'depth'", ":", "\n", "        ", "return", "depth", "\n", "", "elif", "mode", "==", "'rgb+depth'", ":", "\n", "        ", "return", "rgb", ",", "depth", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Error: Unknown rendering mode.'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.ObjDataset_all.__init__": [[20, 38], ["open", "open.readlines", "open.close", "lists.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "root_dir", ",", "temp", ",", "obj", ")", ":", "\n", "\n", "        ", "self", ".", "root_dirlab", "=", "labels", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "\n", "self", ".", "rad", "=", "temp", "[", "obj", "]", "[", "'diameter'", "]", "\n", "self", ".", "obj", "=", "obj", "\n", "train_list", "=", "'../models/%d/train.lst'", "%", "(", "obj", ")", "\n", "\n", "file_obj", "=", "open", "(", "train_list", ")", "\n", "all_lines", "=", "file_obj", ".", "readlines", "(", ")", "\n", "file_obj", ".", "close", "(", ")", "\n", "lists", "=", "[", "]", "\n", "for", "line", "in", "all_lines", ":", "\n", "            ", "lists", ".", "append", "(", "line", ")", "\n", "\n", "", "self", ".", "indexs", "=", "lists", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.ObjDataset_all.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indexs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.ObjDataset_all.__getitem__": [[42, 73], ["int", "numpy.loadtxt", "label[].reshape", "numpy.loadtxt", "data_loder_linemod.chooselimt", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.chooselimt"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "ref_id", "=", "int", "(", "self", ".", "indexs", "[", "idx", "]", ")", "\n", "\n", "\n", "lab_name", "=", "self", ".", "root_dirlab", "+", "'lab%08d.txt'", "%", "(", "ref_id", ")", "\n", "pts_name", "=", "self", ".", "root_dir", "+", "'pose%08d.txt'", "%", "(", "ref_id", ")", "\n", "\n", "label", "=", "np", ".", "loadtxt", "(", "lab_name", ")", "\n", "\n", "label", "=", "label", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "points", "=", "np", ".", "loadtxt", "(", "pts_name", ")", "\n", "\n", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "points", ",", "label", "=", "chooselimt", "(", "points", ",", "self", ".", "rad", ",", "label", ")", "\n", "\n", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "points", ")", ",", "1500", ",", "replace", "=", "True", ")", "\n", "points", "=", "points", "[", "choice", ",", ":", "]", "\n", "label", "=", "label", "[", "choice", ",", ":", "]", "\n", "\n", "sample", "=", "{", "'points'", ":", "points", ",", "'label'", ":", "label", ",", "'obj'", ":", "self", ".", "obj", ",", "'idx'", ":", "ref_id", "}", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.chooselimt": [[9, 18], ["pts0.copy", "numpy.random.randint", "numpy.where", "numpy.where", "numpy.abs", "numpy.abs", "ptss[].max", "ptss[].max"], "function", ["None"], ["def", "chooselimt", "(", "pts0", ",", "dia", ",", "lab", ")", ":", "\n", "    ", "a", "=", "pts0", "[", "lab", "[", ":", ",", "0", "]", "==", "1", ",", ":", "]", "\n", "pts", "=", "pts0", ".", "copy", "(", ")", "\n", "ptss", "=", "pts", "[", "lab", "[", ":", ",", "0", "]", "==", "1", ",", ":", "]", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "a", ".", "shape", "[", "0", "]", ")", "\n", "ptsn", "=", "pts", "[", "np", ".", "where", "(", "np", ".", "abs", "(", "pts", "[", ":", ",", "2", "]", "-", "ptss", "[", "idx", ",", "2", "]", ".", "max", "(", ")", ")", "<", "dia", ")", "[", "0", "]", ",", ":", "]", "\n", "labs", "=", "lab", "[", "np", ".", "where", "(", "np", ".", "abs", "(", "pts", "[", ":", ",", "2", "]", "-", "ptss", "[", "idx", ",", "2", "]", ".", "max", "(", ")", ")", "<", "dia", ")", "[", "0", "]", ",", ":", "]", "\n", "\n", "return", "ptsn", ",", "labs", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.data_loder_linemod.load_pts_train": [[74, 83], ["data_loder_linemod.ObjDataset_all", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "load_pts_train", "(", "datas_list", ",", "labs_p", ",", "bat", ",", "temp", ",", "obj", ",", "shuf", "=", "True", ",", "drop", "=", "False", ")", ":", "\n", "\n", "    ", "data", "=", "ObjDataset_all", "(", "labs_p", ",", "datas_list", ",", "temp", ",", "obj", ")", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "data", ",", "batch_size", "=", "bat", ",", "shuffle", "=", "shuf", ",", "drop_last", "=", "drop", ")", "\n", "\n", "\n", "return", "dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_seg.__init__": [[13, 28], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ic", "=", "6", ")", ":", "\n", "        ", "super", "(", "Point_seg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_seg.forward": [[30, 46], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_seg.bn5", "x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.size", "networks_arch.Point_seg.bn1", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_seg.bn2", "networks_arch.Point_seg.bn3", "networks_arch.Point_seg.bn4", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_seg.conv5", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_seg.conv1", "networks_arch.Point_seg.conv2", "networks_arch.Point_seg.conv3", "networks_arch.Point_seg.conv4", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x1", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x2", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x2", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "pointfeat2", "=", "x", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "x", ",", "pointfeat2", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Seg_3D.__init__": [[48, 63], ["torch.Module.__init__", "networks_arch.Point_seg", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kc", "=", "2", ",", "ic", "=", "6", ")", ":", "\n", "        ", "super", "(", "Seg_3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kc", "=", "kc", "\n", "self", ".", "feat", "=", "Point_seg", "(", "ic", "=", "ic", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", "+", "1024", "+", "128", "+", "64", "+", "16", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "self", ".", "kc", ",", "1", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Seg_3D.forward": [[64, 102], ["networks_arch.Seg_3D.feat", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "one_hot.cuda.cuda.cuda", "one_hot.cuda.cuda.unsqueeze().repeat", "one_hot.cuda.cuda.unsqueeze().unsqueeze().repeat", "x.transpose().contiguous.transpose().contiguous.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Seg_3D.drop1", "networks_arch.Seg_3D.conv5", "x.transpose().contiguous.transpose().contiguous.squeeze", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x_seg.view.view.view", "x.transpose().contiguous.transpose().contiguous.size", "x.transpose().contiguous.transpose().contiguous.size", "obj.view.view.view().repeat", "obj.view.view.view", "obj.view.view.cpu().long", "networks_arch.Seg_3D.bn1", "networks_arch.Seg_3D.bn2", "networks_arch.Seg_3D.bn3", "networks_arch.Seg_3D.bn4", "x_seg.view.view.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot.cuda.cuda.unsqueeze", "one_hot.cuda.cuda.unsqueeze().unsqueeze", "networks_arch.Seg_3D.conv1", "networks_arch.Seg_3D.conv2", "networks_arch.Seg_3D.conv3", "networks_arch.Seg_3D.conv4", "x.transpose().contiguous.transpose().contiguous.transpose", "obj.view.view.view", "obj.view.view.cpu", "one_hot.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "obj", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "x", "=", "self", ".", "feat", "(", "x", ")", "\n", "\n", "if", "obj", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "obj", "=", "obj", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "obj", "=", "obj", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "one_hot", "=", "torch", ".", "zeros", "(", "batchsize", ",", "16", ")", ".", "scatter_", "(", "1", ",", "obj", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "one_hot2", "=", "one_hot", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "one_hot3", "=", "one_hot", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_pts", ")", "\n", "feas", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "\n", "feas", "=", "torch", ".", "cat", "(", "[", "feas", ",", "one_hot2", "]", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "one_hot3", "]", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "x_seg", "=", "x", "\n", "x_seg", "=", "F", ".", "log_softmax", "(", "x_seg", ".", "view", "(", "-", "1", ",", "self", ".", "kc", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "x_seg", "=", "x_seg", ".", "view", "(", "batchsize", ",", "n_pts", ",", "self", ".", "kc", ")", "\n", "\n", "\n", "return", "x_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_center.__init__": [[106, 120], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Point_center", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "256", ",", "1", ")", "\n", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", "\n", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_center.forward": [[122, 137], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_center.bn3", "obj.view.view.view", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "one_hot.cuda.cuda.cuda", "one_hot.cuda.cuda.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks_arch.Point_center.size", "networks_arch.Point_center.bn1", "networks_arch.Point_center.bn2", "networks_arch.Point_center.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "obj.view.view.cpu().long", "networks_arch.Point_center.conv1", "networks_arch.Point_center.conv2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "obj.view.view.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "obj", ")", ":", "## 5 6 30 1000", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "\n", "x2", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "obj", "=", "obj", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "batchsize", ",", "16", ")", ".", "scatter_", "(", "1", ",", "obj", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "\n", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "one_hot2", "=", "one_hot", ".", "unsqueeze", "(", "2", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x2", ",", "one_hot2", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_center_res.__init__": [[140, 153], ["torch.Module.__init__", "networks_arch.Point_center", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Point_center_res", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat", "=", "Point_center", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", "+", "16", ",", "256", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "3", ",", "1", ")", "\n", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_center_res.forward": [[154, 174], ["networks_arch.Point_center_res.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_center_res.bn2", "networks_arch.Point_center_res.drop1", "networks_arch.Point_center_res.conv3", "x.contiguous.contiguous.squeeze", "x.contiguous.contiguous.contiguous", "x.contiguous.contiguous.size", "x.contiguous.contiguous.size", "networks_arch.Point_center_res.bn1", "networks_arch.Point_center_res.conv2", "networks_arch.Point_center_res.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "obj", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "x", "=", "self", ".", "feat", "(", "x", ",", "obj", ")", "\n", "\n", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_v.__init__": [[178, 195], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputchannel", "=", "6", ")", ":", "\n", "        ", "super", "(", "Point_box_v", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inputchannel", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_v.forward": [[197, 221], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_box_v.bn5", "x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.size", "networks_arch.Point_box_v.bn1", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_box_v.bn2", "networks_arch.Point_box_v.bn3", "networks_arch.Point_box_v.bn4", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_box_v.conv5", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_box_v.conv1", "networks_arch.Point_box_v.conv2", "networks_arch.Point_box_v.conv3", "networks_arch.Point_box_v.conv4", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "obj", ")", ":", "\n", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x1", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x2", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x2", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "pointfeat2", "=", "x", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "x", ",", "pointfeat2", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_v_es.__init__": [[225, 244], ["torch.Module.__init__", "networks_arch.Point_box_v", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num", "=", "8", ",", "inputchannel", "=", "6", ")", ":", "\n", "        ", "super", "(", "Point_box_v_es", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "feat", "=", "Point_box_v", "(", "inputchannel", ")", "\n", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", "+", "1024", "+", "128", "+", "64", "+", "16", ",", "512", ",", "1", ")", "\n", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "3", "*", "num", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "obj", ",", "gan", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_v_es.forward": [[244, 286], ["networks_arch.Point_box_v_es.feat", "x.transpose().contiguous.transpose().contiguous.detach().squeeze", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "one_hot.cuda.cuda.cuda", "one_hot.cuda.cuda.unsqueeze().repeat", "one_hot.cuda.cuda.unsqueeze().unsqueeze().repeat", "x.transpose().contiguous.detach().squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_box_v_es.drop1", "networks_arch.Point_box_v_es.conv5", "x.transpose().contiguous.transpose().contiguous.squeeze", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "x.transpose().contiguous.transpose().contiguous.size", "x.transpose().contiguous.transpose().contiguous.size", "obj.view.view.view().repeat", "obj.view.view.view", "obj.view.view.cpu().long", "networks_arch.Point_box_v_es.bn1", "networks_arch.Point_box_v_es.bn2", "networks_arch.Point_box_v_es.bn3", "networks_arch.Point_box_v_es.bn4", "x.transpose().contiguous.transpose().contiguous.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot.cuda.cuda.unsqueeze", "one_hot.cuda.cuda.unsqueeze().unsqueeze", "networks_arch.Point_box_v_es.conv1", "networks_arch.Point_box_v_es.conv2", "networks_arch.Point_box_v_es.conv3", "networks_arch.Point_box_v_es.conv4", "x.transpose().contiguous.transpose().contiguous.transpose", "obj.view.view.view", "obj.view.view.cpu", "one_hot.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "obj", ",", "gan", "=", "0", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "\n", "if", "obj", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "obj", "=", "obj", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "obj", "=", "obj", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "feat", "(", "x", ",", "obj", ")", "\n", "feat", "=", "x", ".", "detach", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "batchsize", ",", "16", ")", ".", "scatter_", "(", "1", ",", "obj", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "one_hot2", "=", "one_hot", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "one_hot3", "=", "one_hot", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n_pts", ")", "\n", "feas", "=", "feat", ".", "squeeze", "(", "2", ")", "\n", "\n", "feas", "=", "torch", ".", "cat", "(", "[", "feas", ",", "one_hot2", "]", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "one_hot3", "]", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "\n", "if", "gan", "==", "1", ":", "\n", "            ", "return", "x", ",", "feas", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_R_es.__init__": [[289, 300], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num", "=", "8", ")", ":", "\n", "        ", "super", "(", "Point_box_R_es", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "drop0", "=", "nn", ".", "Dropout", "(", "0.3", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "2256", ",", "256", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "3", "*", "num", ",", "1", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Point_box_R_es.forward": [[302, 313], ["networks_arch.Point_box_R_es.drop0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Point_box_R_es.bn2", "networks_arch.Point_box_R_es.conv3", "x.contiguous.contiguous.contiguous", "networks_arch.Point_box_R_es.bn1", "networks_arch.Point_box_R_es.conv2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Point_box_R_es.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "drop0", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "(", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Rotation_pre.__init__": [[316, 335], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "24", ",", "F", "=", "2256", ")", ":", "\n", "        ", "super", "(", "Rotation_pre", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "F", "\n", "self", ".", "k", "=", "k", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "f", ",", "1024", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1024", ",", "512", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "256", ",", "1", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv6", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv7", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_arch.Rotation_pre.forward": [[337, 356], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks_arch.Rotation_pre.drop1", "networks_arch.Rotation_pre.conv7", "x.contiguous.contiguous.squeeze", "x.contiguous.contiguous.contiguous", "networks_arch.Rotation_pre.bn1", "networks_arch.Rotation_pre.bn2", "networks_arch.Rotation_pre.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "networks_arch.Rotation_pre.bn4", "networks_arch.Rotation_pre.bn5", "networks_arch.Rotation_pre.bn6", "networks_arch.Rotation_pre.conv1", "networks_arch.Rotation_pre.conv2", "networks_arch.Rotation_pre.conv3", "networks_arch.Rotation_pre.conv4", "networks_arch.Rotation_pre.conv5", "networks_arch.Rotation_pre.conv6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.load_poses": [[8, 24], ["open", "f.read().splitlines", "f.read", "line.isspace", "line.split", "int", "int", "numpy.array().reshape", "numpy.array().reshape", "poses.append", "len", "float", "numpy.array", "numpy.array", "map", "map"], "function", ["None"], ["def", "load_poses", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "poses", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "not", "line", ".", "isspace", "(", ")", ":", "\n", "                ", "elems", "=", "line", ".", "split", "(", "' '", ")", "\n", "im_id", "=", "int", "(", "elems", "[", "0", "]", ")", "\n", "obj_id", "=", "int", "(", "elems", "[", "1", "]", ")", "\n", "R", "=", "np", ".", "array", "(", "map", "(", "float", ",", "elems", "[", "2", ":", "11", "]", ")", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "t", "=", "np", ".", "array", "(", "map", "(", "float", ",", "elems", "[", "11", ":", "14", "]", ")", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "pose", "=", "{", "'im_id'", ":", "im_id", ",", "'obj_id'", ":", "obj_id", ",", "'R'", ":", "R", ",", "'t'", ":", "t", "}", "\n", "if", "len", "(", "elems", ")", ">", "14", ":", "\n", "                    ", "pose", "[", "'score'", "]", "=", "float", "(", "elems", "[", "14", "]", ")", "\n", "", "poses", ".", "append", "(", "pose", ")", "\n", "", "", "", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.load_gt_pose_dresden": [[25, 59], ["open", "f.read().splitlines", "len", "numpy.eye", "np.eye.dot", "np.eye.dot", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "f.read", "len", "len", "len", "len", "line.split", "numpy.array", "numpy.array", "len", "list", "list", "line.split", "map", "map"], "function", ["None"], ["", "def", "load_gt_pose_dresden", "(", "path", ")", ":", "\n", "    ", "R", "=", "[", "]", "\n", "t", "=", "[", "]", "\n", "rotation_sec", "=", "False", "\n", "center_sec", "=", "False", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ":", "\n", "            ", "if", "'rotation:'", "in", "line", ":", "\n", "                ", "rotation_sec", "=", "True", "\n", "", "elif", "rotation_sec", ":", "\n", "                ", "R", "+=", "line", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "R", ")", "==", "9", ":", "\n", "                    ", "rotation_sec", "=", "False", "\n", "", "", "elif", "'center:'", "in", "line", ":", "\n", "                ", "center_sec", "=", "True", "\n", "", "elif", "center_sec", ":", "\n", "                ", "t", "=", "line", ".", "split", "(", "' '", ")", "\n", "center_sec", "=", "False", "\n", "\n", "", "", "", "assert", "(", "(", "len", "(", "R", ")", "==", "0", "and", "len", "(", "t", ")", "==", "0", ")", "or", "\n", "(", "len", "(", "R", ")", "==", "9", "and", "len", "(", "t", ")", "==", "3", ")", ")", "\n", "\n", "if", "len", "(", "R", ")", "==", "0", ":", "\n", "        ", "pose", "=", "{", "'R'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "'t'", ":", "np", ".", "array", "(", "[", "]", ")", "}", "\n", "", "else", ":", "\n", "        ", "pose", "=", "{", "'R'", ":", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "R", ")", ")", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", ",", "\n", "'t'", ":", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "t", ")", ")", ")", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "}", "\n", "\n", "# Flip Y and Z axis (OpenGL -> OpenCV coordinate system)", "\n", "yz_flip", "=", "np", ".", "eye", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "yz_flip", "[", "0", ",", "0", "]", ",", "yz_flip", "[", "1", ",", "1", "]", ",", "yz_flip", "[", "2", ",", "2", "]", "=", "1", ",", "-", "1", ",", "-", "1", "\n", "pose", "[", "'R'", "]", "=", "yz_flip", ".", "dot", "(", "pose", "[", "'R'", "]", ")", "\n", "pose", "[", "'t'", "]", "=", "yz_flip", ".", "dot", "(", "pose", "[", "'t'", "]", ")", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.load_ply": [[60, 204], ["open", "numpy.zeros", "range", "range", "open.close", "open.readline().rstrip().rstrip", "f.readline().rstrip().rstrip.startswith", "numpy.zeros", "set", "numpy.zeros", "set", "numpy.zeros", "float", "float", "float", "int", "int", "int", "int", "f.readline().rstrip().rstrip.startswith", "open.readline().rstrip().rstrip().split", "enumerate", "float", "float", "float", "float", "float", "float", "open.readline().rstrip().rstrip().split", "enumerate", "open.readline().rstrip", "int", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "struct.unpack", "open.readline().rstrip().rstrip", "struct.unpack", "open.readline().rstrip().rstrip", "open.readline", "f.readline().rstrip().rstrip.split", "f.readline().rstrip().rstrip.startswith", "pt_props.append", "open.read", "open.read", "print", "print", "exit", "int", "print", "print", "exit", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "face_props.append", "range", "open.readline().rstrip", "open.readline().rstrip", "int", "face_props.append", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "text_props.append", "range", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "f.readline().rstrip().rstrip.split", "text_props.append", "f.readline().rstrip().rstrip.startswith", "open.readline", "open.readline", "str", "str"], "function", ["None"], ["", "def", "load_ply", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads a 3D mesh model from a PLY file.\n\n    :param path: A path to a PLY file.\n    :return: The loaded model given by a dictionary with items:\n    'pts' (nx3 ndarray), 'normals' (nx3 ndarray), 'colors' (nx3 ndarray),\n    'faces' (mx3 ndarray) - the latter three are optional.\n    \"\"\"", "\n", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "\n", "n_pts", "=", "0", "\n", "n_faces", "=", "0", "\n", "face_n_corners", "=", "3", "# Only triangular faces are supported", "\n", "pt_props", "=", "[", "]", "\n", "face_props", "=", "[", "]", "\n", "text_props", "=", "[", "]", "\n", "is_binary", "=", "False", "\n", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "False", "\n", "\n", "# Read header", "\n", "while", "True", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "# Strip the newline character(s)", "\n", "if", "line", ".", "startswith", "(", "'element vertex'", ")", ":", "\n", "            ", "n_pts", "=", "int", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "\n", "header_vertex_section", "=", "True", "\n", "header_face_section", "=", "False", "\n", "", "elif", "line", ".", "startswith", "(", "'element face'", ")", ":", "\n", "            ", "n_faces", "=", "int", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "\n", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "True", "\n", "", "elif", "line", ".", "startswith", "(", "'element'", ")", ":", "# Some other element", "\n", "            ", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "False", "\n", "", "elif", "line", ".", "startswith", "(", "'property'", ")", "and", "header_vertex_section", ":", "\n", "# (name of the property, data type)", "\n", "            ", "pt_props", ".", "append", "(", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ",", "line", ".", "split", "(", "' '", ")", "[", "-", "2", "]", ")", ")", "\n", "", "elif", "line", ".", "startswith", "(", "'property list'", ")", "and", "header_face_section", ":", "\n", "            ", "elems", "=", "line", ".", "split", "(", "' '", ")", "\n", "# (name of the property, data type)", "\n", "face_props", ".", "append", "(", "(", "'n_corners'", ",", "elems", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "face_n_corners", ")", ":", "\n", "                ", "face_props", ".", "append", "(", "(", "'ind_'", "+", "str", "(", "i", ")", ",", "elems", "[", "3", "]", ")", ")", "\n", "", "", "elif", "line", ".", "startswith", "(", "'property2 list'", ")", "and", "header_face_section", ":", "\n", "            ", "elems", "=", "line", ".", "split", "(", "' '", ")", "\n", "# (name of the property, data type)", "\n", "text_props", ".", "append", "(", "(", "'n_corners'", ",", "elems", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "text_props", ".", "append", "(", "(", "'ind_'", "+", "str", "(", "i", ")", ",", "elems", "[", "3", "]", ")", ")", "\n", "", "", "elif", "line", ".", "startswith", "(", "'format'", ")", ":", "\n", "            ", "if", "'binary'", "in", "line", ":", "\n", "                ", "is_binary", "=", "True", "\n", "", "", "elif", "line", ".", "startswith", "(", "'end_header'", ")", ":", "\n", "            ", "break", "\n", "\n", "# Prepare data structures", "\n", "", "", "model", "=", "{", "}", "\n", "model", "[", "'pts'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "if", "n_faces", ">", "0", ":", "\n", "        ", "model", "[", "'faces'", "]", "=", "np", ".", "zeros", "(", "(", "n_faces", ",", "face_n_corners", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "pt_props_names", "=", "[", "p", "[", "0", "]", "for", "p", "in", "pt_props", "]", "\n", "is_normal", "=", "False", "\n", "if", "{", "'nx'", ",", "'ny'", ",", "'nz'", "}", ".", "issubset", "(", "set", "(", "pt_props_names", ")", ")", ":", "\n", "        ", "is_normal", "=", "True", "\n", "model", "[", "'normals'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "is_color", "=", "False", "\n", "if", "{", "'red'", ",", "'green'", ",", "'blue'", "}", ".", "issubset", "(", "set", "(", "pt_props_names", ")", ")", ":", "\n", "        ", "is_color", "=", "True", "\n", "model", "[", "'colors'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "formats", "=", "{", "# For binary format", "\n", "'float'", ":", "(", "'f'", ",", "4", ")", ",", "\n", "'double'", ":", "(", "'d'", ",", "8", ")", ",", "\n", "'int'", ":", "(", "'i'", ",", "4", ")", ",", "\n", "'uchar'", ":", "(", "'B'", ",", "1", ")", "\n", "}", "\n", "\n", "# Load vertices", "\n", "for", "pt_id", "in", "range", "(", "n_pts", ")", ":", "\n", "        ", "prop_vals", "=", "{", "}", "\n", "load_props", "=", "[", "'x'", ",", "'y'", ",", "'z'", ",", "'nx'", ",", "'ny'", ",", "'nz'", ",", "'red'", ",", "'green'", ",", "'blue'", "]", "\n", "if", "is_binary", ":", "\n", "            ", "for", "prop", "in", "pt_props", ":", "\n", "                ", "format", "=", "formats", "[", "prop", "[", "1", "]", "]", "\n", "val", "=", "struct", ".", "unpack", "(", "format", "[", "0", "]", ",", "f", ".", "read", "(", "format", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "if", "prop", "[", "0", "]", "in", "load_props", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "            ", "elems", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", ".", "split", "(", "' '", ")", "\n", "for", "prop_id", ",", "prop", "in", "enumerate", "(", "pt_props", ")", ":", "\n", "                ", "if", "prop", "[", "0", "]", "in", "load_props", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "elems", "[", "prop_id", "]", "\n", "\n", "", "", "", "model", "[", "'pts'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'x'", "]", ")", "\n", "model", "[", "'pts'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'y'", "]", ")", "\n", "model", "[", "'pts'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'z'", "]", ")", "\n", "\n", "if", "is_normal", ":", "\n", "            ", "model", "[", "'normals'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'nx'", "]", ")", "\n", "model", "[", "'normals'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'ny'", "]", ")", "\n", "model", "[", "'normals'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'nz'", "]", ")", "\n", "\n", "", "if", "is_color", ":", "\n", "            ", "model", "[", "'colors'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'red'", "]", ")", "\n", "model", "[", "'colors'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'green'", "]", ")", "\n", "model", "[", "'colors'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'blue'", "]", ")", "\n", "\n", "# Load faces", "\n", "", "", "for", "face_id", "in", "range", "(", "n_faces", ")", ":", "\n", "        ", "prop_vals", "=", "{", "}", "\n", "if", "is_binary", ":", "\n", "            ", "for", "prop", "in", "face_props", ":", "\n", "                ", "format", "=", "formats", "[", "prop", "[", "1", "]", "]", "\n", "val", "=", "struct", ".", "unpack", "(", "format", "[", "0", "]", ",", "f", ".", "read", "(", "format", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "if", "prop", "[", "0", "]", "==", "'n_corners'", ":", "\n", "                    ", "if", "val", "!=", "face_n_corners", ":", "\n", "                        ", "print", "(", "'Error: Only triangular faces are supported.'", ")", "\n", "print", "(", "'Number of face corners:'", ",", "val", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "\n", "            ", "elems", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "for", "prop_id", ",", "prop", "in", "enumerate", "(", "face_props", ")", ":", "\n", "                ", "if", "prop", "[", "0", "]", "==", "'n_corners'", ":", "\n", "                    ", "if", "int", "(", "elems", "[", "prop_id", "]", ")", "!=", "face_n_corners", ":", "\n", "                        ", "print", "(", "'Error: Only triangular faces are supported.'", ")", "\n", "print", "(", "'Number of face corners:'", ",", "int", "(", "elems", "[", "prop_id", "]", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "elems", "[", "prop_id", "]", "\n", "#print(prop_vals.keys())", "\n", "", "", "", "model", "[", "'faces'", "]", "[", "face_id", ",", "0", "]", "=", "int", "(", "prop_vals", "[", "'ind_0'", "]", ")", "\n", "model", "[", "'faces'", "]", "[", "face_id", ",", "1", "]", "=", "int", "(", "prop_vals", "[", "'ind_1'", "]", ")", "\n", "model", "[", "'faces'", "]", "[", "face_id", ",", "2", "]", "=", "int", "(", "prop_vals", "[", "'ind_2'", "]", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.load_ply_my": [[205, 384], ["open", "numpy.zeros", "numpy.zeros", "range", "range", "open.close", "open.readline().rstrip().rstrip", "f.readline().rstrip().rstrip.startswith", "numpy.zeros", "set", "numpy.zeros", "set", "numpy.zeros", "float", "float", "float", "int", "int", "int", "int", "f.readline().rstrip().rstrip.startswith", "open.readline().rstrip().rstrip().split", "enumerate", "float", "float", "float", "float", "float", "float", "open.readline().rstrip().rstrip().split", "enumerate", "open.readline().rstrip", "int", "f.readline().rstrip().rstrip.startswith", "len", "enumerate", "inout.coors2color", "f.readline().rstrip().rstrip.split", "f.readline().rstrip().rstrip.startswith", "struct.unpack", "open.readline().rstrip().rstrip", "struct.unpack", "open.readline().rstrip().rstrip", "float", "float", "float", "float", "float", "float", "open.readline", "f.readline().rstrip().rstrip.split", "cv2.imread", "cv2.flip", "open.read", "open.read", "print", "print", "exit", "int", "print", "print", "exit", "f.readline().rstrip().rstrip.startswith", "pt_props.append", "open.readline().rstrip", "open.readline().rstrip", "int", "int", "print", "print", "exit", "int", "int", "int", "int", "int", "int", "int", "int", "int", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "face_props.append", "range", "int", "face_props.append", "f.readline().rstrip().rstrip.startswith", "f.readline().rstrip().rstrip.split", "text_props.append", "range", "f.readline().rstrip().rstrip.startswith", "open.readline", "open.readline", "f.readline().rstrip().rstrip.split", "f.readline().rstrip().rstrip.split", "text_props.append", "f.readline().rstrip().rstrip.startswith", "str", "str"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.coors2color"], ["", "def", "load_ply_my", "(", "path", ",", "bp", ")", ":", "\n", "    ", "\"\"\"\n    Loads a 3D mesh model from a PLY file.\n\n    :param path: A path to a PLY file.\n    :return: The loaded model given by a dictionary with items:\n    'pts' (nx3 ndarray), 'normals' (nx3 ndarray), 'colors' (nx3 ndarray),\n    'faces' (mx3 ndarray) - the latter three are optional.\n    \"\"\"", "\n", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "\n", "n_pts", "=", "0", "\n", "n_faces", "=", "0", "\n", "face_n_corners", "=", "3", "# Only triangular faces are supported", "\n", "pt_props", "=", "[", "]", "\n", "face_props", "=", "[", "]", "\n", "text_props", "=", "[", "]", "\n", "is_binary", "=", "False", "\n", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "False", "\n", "img", "=", "[", "]", "\n", "W", "=", "0", "\n", "H", "=", "0", "\n", "# Read header", "\n", "while", "True", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "# Strip the newline character(s)", "\n", "if", "line", ".", "startswith", "(", "'element vertex'", ")", ":", "\n", "            ", "n_pts", "=", "int", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "\n", "header_vertex_section", "=", "True", "\n", "header_face_section", "=", "False", "\n", "", "elif", "line", ".", "startswith", "(", "'element face'", ")", ":", "\n", "            ", "n_faces", "=", "int", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "\n", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "True", "\n", "", "elif", "line", ".", "startswith", "(", "'element'", ")", ":", "# Some other element", "\n", "            ", "header_vertex_section", "=", "False", "\n", "header_face_section", "=", "False", "\n", "", "elif", "line", ".", "startswith", "(", "'comment TextureFile'", ")", ":", "# Some other element", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "bp", "+", "'texture_map.png'", ")", "\n", "img", "=", "cv2", ".", "flip", "(", "img", ",", "0", ")", "\n", "W", "=", "img", ".", "shape", "[", "1", "]", "\n", "H", "=", "img", ".", "shape", "[", "0", "]", "\n", "", "elif", "line", ".", "startswith", "(", "'property'", ")", "and", "header_vertex_section", ":", "\n", "# (name of the property, data type)", "\n", "            ", "pt_props", ".", "append", "(", "(", "line", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ",", "line", ".", "split", "(", "' '", ")", "[", "-", "2", "]", ")", ")", "\n", "", "elif", "line", ".", "startswith", "(", "'property list'", ")", "and", "header_face_section", ":", "\n", "            ", "elems", "=", "line", ".", "split", "(", "' '", ")", "\n", "# (name of the property, data type)", "\n", "face_props", ".", "append", "(", "(", "'n_corners'", ",", "elems", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "face_n_corners", ")", ":", "\n", "                ", "face_props", ".", "append", "(", "(", "'ind_'", "+", "str", "(", "i", ")", ",", "elems", "[", "3", "]", ")", ")", "\n", "", "", "elif", "line", ".", "startswith", "(", "'property2 list'", ")", "and", "header_face_section", ":", "\n", "            ", "elems", "=", "line", ".", "split", "(", "' '", ")", "\n", "# (name of the property, data type)", "\n", "text_props", ".", "append", "(", "(", "'n_corners'", ",", "elems", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                ", "text_props", ".", "append", "(", "(", "'ind_'", "+", "str", "(", "i", ")", ",", "elems", "[", "3", "]", ")", ")", "\n", "", "", "elif", "line", ".", "startswith", "(", "'format'", ")", ":", "\n", "            ", "if", "'binary'", "in", "line", ":", "\n", "                ", "is_binary", "=", "True", "\n", "", "", "elif", "line", ".", "startswith", "(", "'end_header'", ")", ":", "\n", "            ", "break", "\n", "\n", "# Prepare data structures", "\n", "", "", "model", "=", "{", "}", "\n", "model", "[", "'pts'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "model", "[", "'colors'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "if", "n_faces", ">", "0", ":", "\n", "        ", "model", "[", "'faces'", "]", "=", "np", ".", "zeros", "(", "(", "n_faces", ",", "face_n_corners", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "pt_props_names", "=", "[", "p", "[", "0", "]", "for", "p", "in", "pt_props", "]", "\n", "is_normal", "=", "False", "\n", "if", "{", "'nx'", ",", "'ny'", ",", "'nz'", "}", ".", "issubset", "(", "set", "(", "pt_props_names", ")", ")", ":", "\n", "        ", "is_normal", "=", "True", "\n", "model", "[", "'normals'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "is_color", "=", "False", "\n", "if", "{", "'red'", ",", "'green'", ",", "'blue'", "}", ".", "issubset", "(", "set", "(", "pt_props_names", ")", ")", ":", "\n", "        ", "is_color", "=", "True", "\n", "model", "[", "'colors'", "]", "=", "np", ".", "zeros", "(", "(", "n_pts", ",", "3", ")", ",", "np", ".", "float", ")", "\n", "\n", "", "formats", "=", "{", "# For binary format", "\n", "'float'", ":", "(", "'f'", ",", "4", ")", ",", "\n", "'double'", ":", "(", "'d'", ",", "8", ")", ",", "\n", "'int'", ":", "(", "'i'", ",", "4", ")", ",", "\n", "'uchar'", ":", "(", "'B'", ",", "1", ")", "\n", "}", "\n", "\n", "# Load vertices", "\n", "for", "pt_id", "in", "range", "(", "n_pts", ")", ":", "\n", "        ", "prop_vals", "=", "{", "}", "\n", "load_props", "=", "[", "'x'", ",", "'y'", ",", "'z'", ",", "'nx'", ",", "'ny'", ",", "'nz'", ",", "'red'", ",", "'green'", ",", "'blue'", "]", "\n", "if", "is_binary", ":", "\n", "            ", "for", "prop", "in", "pt_props", ":", "\n", "                ", "format", "=", "formats", "[", "prop", "[", "1", "]", "]", "\n", "val", "=", "struct", ".", "unpack", "(", "format", "[", "0", "]", ",", "f", ".", "read", "(", "format", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "if", "prop", "[", "0", "]", "in", "load_props", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "            ", "elems", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", ".", "split", "(", "' '", ")", "\n", "for", "prop_id", ",", "prop", "in", "enumerate", "(", "pt_props", ")", ":", "\n", "                ", "if", "prop", "[", "0", "]", "in", "load_props", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "elems", "[", "prop_id", "]", "\n", "\n", "", "", "", "model", "[", "'pts'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'x'", "]", ")", "\n", "model", "[", "'pts'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'y'", "]", ")", "\n", "model", "[", "'pts'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'z'", "]", ")", "\n", "\n", "if", "is_normal", ":", "\n", "            ", "model", "[", "'normals'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'nx'", "]", ")", "\n", "model", "[", "'normals'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'ny'", "]", ")", "\n", "model", "[", "'normals'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'nz'", "]", ")", "\n", "\n", "", "if", "is_color", ":", "\n", "            ", "model", "[", "'colors'", "]", "[", "pt_id", ",", "0", "]", "=", "float", "(", "prop_vals", "[", "'red'", "]", ")", "\n", "model", "[", "'colors'", "]", "[", "pt_id", ",", "1", "]", "=", "float", "(", "prop_vals", "[", "'green'", "]", ")", "\n", "model", "[", "'colors'", "]", "[", "pt_id", ",", "2", "]", "=", "float", "(", "prop_vals", "[", "'blue'", "]", ")", "\n", "\n", "# Load faces", "\n", "", "", "for", "face_id", "in", "range", "(", "n_faces", ")", ":", "\n", "        ", "prop_vals", "=", "{", "}", "\n", "test_vals", "=", "{", "}", "\n", "if", "is_binary", ":", "\n", "            ", "for", "prop", "in", "face_props", ":", "\n", "                ", "format", "=", "formats", "[", "prop", "[", "1", "]", "]", "\n", "val", "=", "struct", ".", "unpack", "(", "format", "[", "0", "]", ",", "f", ".", "read", "(", "format", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "if", "prop", "[", "0", "]", "==", "'n_corners'", ":", "\n", "                    ", "if", "val", "!=", "face_n_corners", ":", "\n", "                        ", "print", "(", "'Error: Only triangular faces are supported.'", ")", "\n", "print", "(", "'Number of face corners:'", ",", "val", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "\n", "            ", "elems", "=", "f", ".", "readline", "(", ")", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "for", "prop_id", ",", "prop", "in", "enumerate", "(", "face_props", ")", ":", "\n", "                ", "if", "prop", "[", "0", "]", "==", "'n_corners'", ":", "\n", "                    ", "if", "int", "(", "elems", "[", "prop_id", "]", ")", "!=", "face_n_corners", ":", "\n", "                        ", "print", "(", "'Error: Only triangular faces are supported.'", ")", "\n", "print", "(", "'Number of face corners:'", ",", "int", "(", "elems", "[", "prop_id", "]", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "prop_vals", "[", "prop", "[", "0", "]", "]", "=", "elems", "[", "prop_id", "]", "\n", "", "", "if", "len", "(", "elems", ")", ">", "4", ":", "\n", "                ", "elems2", "=", "elems", "[", "4", ":", "-", "1", "]", "\n", "for", "prop_id", ",", "prop", "in", "enumerate", "(", "text_props", ")", ":", "\n", "                    ", "if", "prop", "[", "0", "]", "==", "'n_corners'", ":", "\n", "                        ", "if", "int", "(", "elems2", "[", "prop_id", "]", ")", "!=", "6", ":", "\n", "                            ", "print", "(", "'Error: Only triangular faces are supported.'", ")", "\n", "print", "(", "'Number of face corners:'", ",", "int", "(", "elems2", "[", "prop_id", "]", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                        ", "test_vals", "[", "prop", "[", "0", "]", "]", "=", "elems2", "[", "prop_id", "]", "\n", "\n", "\n", "", "", "r1", ",", "b1", ",", "g1", ",", "r2", ",", "b2", ",", "g2", ",", "r3", ",", "g3", ",", "b3", "=", "coors2color", "(", "img", ",", "float", "(", "test_vals", "[", "'ind_0'", "]", ")", ",", "float", "(", "test_vals", "[", "'ind_1'", "]", ")", ",", "float", "(", "test_vals", "[", "'ind_2'", "]", ")", ",", "float", "(", "test_vals", "[", "'ind_3'", "]", ")", ",", "float", "(", "test_vals", "[", "'ind_4'", "]", ")", ",", "float", "(", "test_vals", "[", "'ind_5'", "]", ")", ",", "W", ",", "H", ")", "\n", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_0'", "]", ")", ",", "0", "]", "=", "r1", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_0'", "]", ")", ",", "1", "]", "=", "g1", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_0'", "]", ")", ",", "2", "]", "=", "b1", "\n", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_1'", "]", ")", ",", "0", "]", "=", "r2", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_1'", "]", ")", ",", "1", "]", "=", "g2", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_1'", "]", ")", ",", "2", "]", "=", "b2", "\n", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_2'", "]", ")", ",", "0", "]", "=", "r3", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_2'", "]", ")", ",", "1", "]", "=", "g3", "\n", "model", "[", "'colors'", "]", "[", "int", "(", "prop_vals", "[", "'ind_2'", "]", ")", ",", "2", "]", "=", "b3", "\n", "#print(prop_vals.keys())", "\n", "", "", "model", "[", "'faces'", "]", "[", "face_id", ",", "0", "]", "=", "int", "(", "prop_vals", "[", "'ind_0'", "]", ")", "\n", "model", "[", "'faces'", "]", "[", "face_id", ",", "1", "]", "=", "int", "(", "prop_vals", "[", "'ind_1'", "]", ")", "\n", "model", "[", "'faces'", "]", "[", "face_id", ",", "2", "]", "=", "int", "(", "prop_vals", "[", "'ind_2'", "]", ")", "\n", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.coors2color": [[385, 421], ["int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "coors2color", "(", "img", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "W", ",", "H", ")", ":", "\n", "# def coors2color(img, x1, x2, x3, y1, y2, y3, W, H):", "\n", "#     img = cv2.flip(img,0)", "\n", "\n", "    ", "x1", "=", "int", "(", "x1", "*", "W", ")", "\n", "y1", "=", "int", "(", "y1", "*", "H", ")", "\n", "x2", "=", "int", "(", "x2", "*", "W", ")", "\n", "y2", "=", "int", "(", "y2", "*", "H", ")", "\n", "x3", "=", "int", "(", "x3", "*", "W", ")", "\n", "y3", "=", "int", "(", "y3", "*", "H", ")", "\n", "\n", "r1", "=", "img", "[", "y1", ",", "x1", ",", "0", "]", "\n", "r2", "=", "img", "[", "y2", ",", "x2", ",", "0", "]", "\n", "r3", "=", "img", "[", "y3", ",", "x3", ",", "0", "]", "\n", "\n", "g1", "=", "img", "[", "y1", ",", "x1", ",", "1", "]", "\n", "g2", "=", "img", "[", "y2", ",", "x2", ",", "1", "]", "\n", "g3", "=", "img", "[", "y3", ",", "x3", ",", "1", "]", "\n", "\n", "b1", "=", "img", "[", "y1", ",", "x1", ",", "2", "]", "\n", "b2", "=", "img", "[", "y2", ",", "x2", ",", "2", "]", "\n", "b3", "=", "img", "[", "y3", ",", "x3", ",", "2", "]", "\n", "#", "\n", "# r1 = img[x1, y1, 0]", "\n", "# r2 = img[x2, y2, 0]", "\n", "# r3 = img[x3, y3, 0]", "\n", "#", "\n", "# g1 = img[x1, y1, 1]", "\n", "# g2 = img[x2, y2, 1]", "\n", "# g3 = img[x3, y3, 1]", "\n", "#", "\n", "# b1 = img[x1, y1, 2]", "\n", "# b2 = img[x2, y2, 2]", "\n", "# b3 = img[x3, y3, 2]", "\n", "\n", "return", "r1", ",", "b1", ",", "g1", ",", "r2", ",", "b2", ",", "g2", ",", "r3", ",", "g3", ",", "b3", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.save_ply": [[424, 475], ["numpy.array", "numpy.array", "numpy.array", "enumerate", "open", "open.write", "open.write", "enumerate", "open.close", "open.write", "open.write", "open.write", "open.write", "len", "len", "numpy.isnan", "numpy.isnan", "open.write", "open.write", "numpy.sum", "str", "numpy.sum", "open.write", "str", "map", "len", "map", "map", "map", "pt.squeeze().tolist", "map", "list", "list", "pt.squeeze", "len", "face.squeeze"], "function", ["None"], ["", "def", "save_ply", "(", "path", ",", "pts", ",", "pts_colors", "=", "np", ".", "array", "(", "[", "]", ")", ",", "faces", "=", "np", ".", "array", "(", "[", "]", ")", ")", ":", "\n", "    ", "\"\"\"\n    Saves a 3D mesh model to a PLY file.\n\n    :param path: A path to the resulting PLY file.\n    :param pts: nx3 ndarray\n    :param pts_colors;: nx3 ndarray\n    :param faces: mx3 ndarray\n    \"\"\"", "\n", "pts_colors", "=", "np", ".", "array", "(", "pts_colors", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "        ", "assert", "(", "len", "(", "pts", ")", "==", "len", "(", "pts_colors", ")", ")", "\n", "\n", "", "valid_pts_count", "=", "0", "\n", "for", "pt_id", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pt", ")", ")", ":", "\n", "            ", "valid_pts_count", "+=", "1", "\n", "\n", "", "", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\n", "'ply\\n'", "\n", "'format ascii 1.0\\n'", "\n", "#'format binary_little_endian 1.0\\n'", "\n", "'element vertex '", "+", "str", "(", "valid_pts_count", ")", "+", "'\\n'", "\n", "'property float x\\n'", "\n", "'property float y\\n'", "\n", "'property float z\\n'", "\n", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "        ", "f", ".", "write", "(", "\n", "'property uchar red\\n'", "\n", "'property uchar green\\n'", "\n", "'property uchar blue\\n'", "\n", ")", "\n", "", "if", "faces", ".", "size", "!=", "0", ":", "\n", "        ", "f", ".", "write", "(", "\n", "'element face '", "+", "str", "(", "len", "(", "faces", ")", ")", "+", "'\\n'", "\n", "'property list uchar int vertex_indices\\n'", "\n", ")", "\n", "", "f", ".", "write", "(", "'end_header\\n'", ")", "\n", "\n", "for", "pt_id", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pt", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "pt", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "' '", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "                ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "map", "(", "int", ",", "list", "(", "pts_colors", "[", "pt_id", "]", ")", ")", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "for", "face", "in", "faces", ":", "\n", "        ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "map", "(", "int", ",", "[", "len", "(", "face", ")", "]", "+", "list", "(", "face", ".", "squeeze", "(", ")", ")", ")", ")", ")", "+", "' '", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.save_ply_with_color": [[477, 528], ["numpy.array", "numpy.array", "numpy.array", "enumerate", "open", "open.write", "open.write", "enumerate", "open.close", "open.write", "open.write", "open.write", "open.write", "len", "len", "numpy.isnan", "numpy.isnan", "open.write", "open.write", "numpy.sum", "str", "numpy.sum", "open.write", "str", "map", "len", "map", "map", "map", "pt.squeeze().tolist", "map", "list", "list", "pt.squeeze", "len", "face.squeeze"], "function", ["None"], ["", "def", "save_ply_with_color", "(", "path", ",", "pts", ",", "pts_colors", "=", "np", ".", "array", "(", "[", "]", ")", ",", "faces", "=", "np", ".", "array", "(", "[", "]", ")", ")", ":", "\n", "    ", "\"\"\"\n    Saves a 3D mesh model to a PLY file.\n\n    :param path: A path to the resulting PLY file.\n    :param pts: nx3 ndarray\n    :param pts_colors;: nx3 ndarray\n    :param faces: mx3 ndarray\n    \"\"\"", "\n", "pts_colors", "=", "np", ".", "array", "(", "pts_colors", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "        ", "assert", "(", "len", "(", "pts", ")", "==", "len", "(", "pts_colors", ")", ")", "\n", "\n", "", "valid_pts_count", "=", "0", "\n", "for", "pt_id", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pt", ")", ")", ":", "\n", "            ", "valid_pts_count", "+=", "1", "\n", "\n", "", "", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\n", "'ply\\n'", "\n", "'format ascii 1.0\\n'", "\n", "#'format binary_little_endian 1.0\\n'", "\n", "'element vertex '", "+", "str", "(", "valid_pts_count", ")", "+", "'\\n'", "\n", "'property float x\\n'", "\n", "'property float y\\n'", "\n", "'property float z\\n'", "\n", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "        ", "f", ".", "write", "(", "\n", "'property uchar red\\n'", "\n", "'property uchar green\\n'", "\n", "'property uchar blue\\n'", "\n", ")", "\n", "", "if", "faces", ".", "size", "!=", "0", ":", "\n", "        ", "f", ".", "write", "(", "\n", "'element face '", "+", "str", "(", "len", "(", "faces", ")", ")", "+", "'\\n'", "\n", "'property list uchar int vertex_indices\\n'", "\n", ")", "\n", "", "f", ".", "write", "(", "'end_header\\n'", ")", "\n", "\n", "for", "pt_id", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "pt", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "pt", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "' '", ")", "\n", "if", "pts_colors", ".", "size", "!=", "0", ":", "\n", "                ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "map", "(", "int", ",", "list", "(", "pts_colors", "[", "pt_id", "]", ")", ")", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "for", "face", "in", "faces", ":", "\n", "        ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "map", "(", "int", ",", "[", "len", "(", "face", ")", "]", "+", "list", "(", "face", ".", "squeeze", "(", ")", ")", ")", ")", ")", "+", "' '", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.parse_config.parse_model_cfg": [[1, 20], ["open", "open.read().split", "x.rstrip().lstrip", "line.startswith", "open.read", "module_defs.append", "line[].rstrip", "line.split", "value.strip.strip", "value.strip.strip", "x.rstrip", "x.startswith", "key.rstrip"], "function", ["None"], ["def", "parse_model_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "x", "and", "not", "x", ".", "startswith", "(", "'#'", ")", "]", "\n", "lines", "=", "[", "x", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "for", "x", "in", "lines", "]", "# get rid of fringe whitespaces", "\n", "module_defs", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'['", ")", ":", "# This marks the start of a new block", "\n", "            ", "module_defs", ".", "append", "(", "{", "}", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "=", "line", "[", "1", ":", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "if", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "module_defs", "[", "-", "1", "]", "[", "'batch_normalize'", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\"=\"", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "key", ".", "rstrip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "\n", "", "", "return", "module_defs", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.parse_config.parse_data_cfg": [[22, 36], ["dict", "open", "fp.readlines", "line.strip.strip", "line.strip.split", "value.strip", "line.strip.startswith", "key.strip"], "function", ["None"], ["", "def", "parse_data_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the data configuration file\"\"\"", "\n", "options", "=", "dict", "(", ")", "\n", "options", "[", "'gpus'", "]", "=", "'0,1,2,3'", "\n", "options", "[", "'num_workers'", "]", "=", "'10'", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", "or", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "options", "[", "key", ".", "strip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "", "return", "options", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.torch_utils.init_seeds": [[4, 8], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.torch_utils.select_device": [[10, 27], ["print", "torch.device", "torch.cuda.is_available", "torch.device", "torch.cuda.device_count", "torch.device", "print", "torch.cuda.device_count", "torch.cuda.get_device_properties"], "function", ["None"], ["", "def", "select_device", "(", "force_cpu", "=", "False", ")", ":", "\n", "    ", "if", "force_cpu", ":", "\n", "        ", "cuda", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "cuda", "else", "'cpu'", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "cuda", "else", "'cpu'", ")", "\n", "print", "(", "'Found %g GPUs'", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "# print('Multi-GPU Issue: https://github.com/ultralytics/yolov3/issues/21')", "\n", "# torch.cuda.set_device(0)  # OPTIONAL: Set your GPU if multiple available", "\n", "# print('Using ', torch.cuda.device_count(), ' GPUs')", "\n", "\n", "", "", "print", "(", "'Using %s %s\\n'", "%", "(", "device", ".", "type", ",", "torch", ".", "cuda", ".", "get_device_properties", "(", "0", ")", "if", "cuda", "else", "''", ")", ")", "\n", "return", "device", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.float3": [[19, 21], ["float", "format"], "function", ["None"], ["def", "float3", "(", "x", ")", ":", "# format floats to 3 decimals", "\n", "    ", "return", "float", "(", "format", "(", "x", ",", "'.3f'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.init_seeds": [[23, 27], ["random.seed", "numpy.random.seed", "G2L_Net.yolov3.utils.torch_utils.init_seeds"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.init_seeds"], ["", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch_utils", ".", "init_seeds", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.load_classes": [[29, 35], ["open", "open.read().split", "list", "filter", "open.read"], "function", ["None"], ["", "def", "load_classes", "(", "path", ")", ":", "\n", "# print(path)", "\n", "# Loads class labels at 'path'", "\n", "    ", "fp", "=", "open", "(", "path", ",", "'r'", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "return", "list", "(", "filter", "(", "None", ",", "names", ")", ")", "# filter removes empty strings (such as last line)", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.model_info": [[37, 47], ["sum", "sum", "print", "enumerate", "print", "model.named_parameters", "name.replace.replace", "print", "x.numel", "x.numel", "model.parameters", "model.parameters", "p.numel", "list", "p.mean", "p.std"], "function", ["None"], ["", "def", "model_info", "(", "model", ")", ":", "\n", "# Plots a line-by-line description of a PyTorch model", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "print", "(", "'\\n%5s %40s %9s %12s %20s %10s %10s'", "%", "(", "'layer'", ",", "'name'", ",", "'gradient'", ",", "'parameters'", ",", "'shape'", ",", "'mu'", ",", "'sigma'", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %40s %9s %12g %20s %10.3g %10.3g'", "%", "(", "\n", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "", "print", "(", "'Model Summary: %g layers, %g parameters, %g gradients'", "%", "(", "i", "+", "1", ",", "n_p", ",", "n_g", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.coco_class_weights": [[49, 58], ["weights.sum", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "coco_class_weights", "(", ")", ":", "# frequency of each class in coco train2014", "\n", "    ", "weights", "=", "1", "/", "torch", ".", "FloatTensor", "(", "\n", "[", "187437", ",", "4955", ",", "30920", ",", "6033", ",", "3838", ",", "4332", ",", "3160", ",", "7051", ",", "7677", ",", "9167", ",", "1316", ",", "1372", ",", "833", ",", "6757", ",", "7355", ",", "3302", ",", "3776", ",", "4671", ",", "\n", "6769", ",", "5706", ",", "3908", ",", "903", ",", "3686", ",", "3596", ",", "6200", ",", "7920", ",", "8779", ",", "4505", ",", "4272", ",", "1862", ",", "4698", ",", "1962", ",", "4403", ",", "6659", ",", "2402", ",", "2689", ",", "\n", "4012", ",", "4175", ",", "3411", ",", "17048", ",", "5637", ",", "14553", ",", "3923", ",", "5539", ",", "4289", ",", "10084", ",", "7018", ",", "4314", ",", "3099", ",", "4638", ",", "4939", ",", "5543", ",", "2038", ",", "4004", ",", "\n", "5053", ",", "4578", ",", "27292", ",", "4113", ",", "5931", ",", "2905", ",", "11174", ",", "2873", ",", "4036", ",", "3415", ",", "1517", ",", "4122", ",", "1980", ",", "4464", ",", "1190", ",", "2302", ",", "156", ",", "3933", ",", "\n", "1877", ",", "17630", ",", "4337", ",", "4624", ",", "1075", ",", "3468", ",", "135", ",", "1380", "]", ")", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.coco80_to_coco91_class": [[60, 69], ["None"], "function", ["None"], ["", "def", "coco80_to_coco91_class", "(", ")", ":", "# converts 80-index (val2014) to 91-index (paper)", "\n", "# https://tech.amikelive.com/node-718/what-object-categories-labels-are-in-coco-dataset/", "\n", "# a = np.loadtxt('data/coco.names', dtype='str', delimiter='\\n')", "\n", "# b = np.loadtxt('data/coco_paper.names', dtype='str', delimiter='\\n')", "\n", "# x = [list(a[i] == b).index(True) + 1 for i in range(80)]  # darknet to coco", "\n", "    ", "x", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "34", ",", "\n", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "46", ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", ",", "63", ",", "\n", "64", ",", "65", ",", "67", ",", "70", ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "84", ",", "85", ",", "86", ",", "87", ",", "88", ",", "89", ",", "90", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.plot_one_box": [[71, 83], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "round", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "range", "max"], "function", ["None"], ["", "def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "    ", "tl", "=", "line_thickness", "or", "round", "(", "0.002", "*", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", ")", "+", "1", "# line thickness", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.weights_init_normal": [[85, 92], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.03", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.03", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.xyxy2xywh": [[94, 102], ["isinstance", "torch.zeros_like", "torch.zeros_like", "numpy.zeros_like"], "function", ["None"], ["", "", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros_like", "(", "x", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "zeros_like", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.xywh2xyxy": [[104, 112], ["isinstance", "torch.zeros_like", "torch.zeros_like", "numpy.zeros_like"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros_like", "(", "x", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "zeros_like", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.scale_coords": [[114, 124], ["torch.clamp", "torch.clamp", "float", "max"], "function", ["None"], ["", "def", "scale_coords", "(", "img_size", ",", "coords", ",", "img0_shape", ")", ":", "\n", "# Rescale x1, y1, x2, y2 from 416 to image size", "\n", "    ", "gain", "=", "float", "(", "img_size", ")", "/", "max", "(", "img0_shape", ")", "# gain  = old / new", "\n", "pad_x", "=", "(", "img_size", "-", "img0_shape", "[", "1", "]", "*", "gain", ")", "/", "2", "# width padding", "\n", "pad_y", "=", "(", "img_size", "-", "img0_shape", "[", "0", "]", "*", "gain", ")", "/", "2", "# height padding", "\n", "coords", "[", ":", ",", "[", "0", ",", "2", "]", "]", "-=", "pad_x", "\n", "coords", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "pad_y", "\n", "coords", "[", ":", ",", ":", "4", "]", "/=", "gain", "\n", "coords", "[", ":", ",", ":", "4", "]", "=", "torch", ".", "clamp", "(", "coords", "[", ":", ",", ":", "4", "]", ",", "min", "=", "0", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.ap_per_class": [[126, 175], ["numpy.argsort", "numpy.unique", "np.argsort.sum", "numpy.array", "np.unique.astype", "numpy.array", "numpy.array", "ap.append", "r.append", "p.append", "tp[].cumsum", "r.append", "p.append", "ap.append", "utils.compute_ap"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Source: https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:    True positives (list).\n        conf:  Objectness value from 0-1 (list).\n        pred_cls: Predicted object classes (list).\n        target_cls: True object classes (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "target_cls", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "(", "target_cls", "==", "c", ")", ".", "sum", "(", ")", "# Number of ground truth objects", "\n", "n_p", "=", "i", ".", "sum", "(", ")", "# Number of predicted objects", "\n", "\n", "if", "n_p", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "            ", "continue", "\n", "", "elif", "n_p", "==", "0", "or", "n_gt", "==", "0", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "(", "1", "-", "tp", "[", "i", "]", ")", ".", "cumsum", "(", ")", "\n", "tpc", "=", "(", "tp", "[", "i", "]", ")", ".", "cumsum", "(", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "tpc", "[", "-", "1", "]", "+", "fpc", "[", "-", "1", "]", ")", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.compute_ap": [[177, 203], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Source: https://github.com/rbgirshick/py-faster-rcnn.\n    # Arguments\n        recall:    The recall curve (list).\n        precision: The precision curve (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.bbox_iou": [[205, 230], ["box2.t.t", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "# Returns the IoU of box1 to box2. box1 is 4, box2 is nx4", "\n", "    ", "box2", "=", "box2", ".", "t", "(", ")", "\n", "\n", "# Get the coordinates of bounding boxes", "\n", "if", "x1y1x2y2", ":", "\n", "# x1, y1, x2, y2 = box1", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", ",", "box1", "[", "2", "]", ",", "box1", "[", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", ",", "box2", "[", "2", "]", ",", "box2", "[", "3", "]", "\n", "", "else", ":", "\n", "# x, y, w, h = box1", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2", ",", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2", ",", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2", ",", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2", ",", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2", "\n", "\n", "# Intersection area", "\n", "", "inter_area", "=", "(", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "-", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", ")", ".", "clamp", "(", "0", ")", "*", "(", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "-", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# Union Area", "\n", "union_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", "+", "1e-16", ")", "+", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", "-", "inter_area", "\n", "\n", "return", "inter_area", "/", "union_area", "# iou", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.wh_iou": [[232, 247], ["box2.t.t", "torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "def", "wh_iou", "(", "box1", ",", "box2", ")", ":", "\n", "# Returns the IoU of wh1 to wh2. wh1 is 2, wh2 is nx2", "\n", "    ", "box2", "=", "box2", ".", "t", "(", ")", "\n", "\n", "# w, h = box1", "\n", "w1", ",", "h1", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", "\n", "w2", ",", "h2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", "\n", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "min", "(", "w1", ",", "w2", ")", "*", "torch", ".", "min", "(", "h1", ",", "h2", ")", "\n", "\n", "# Union Area", "\n", "union_area", "=", "(", "w1", "*", "h1", "+", "1e-16", ")", "+", "w2", "*", "h2", "-", "inter_area", "\n", "\n", "return", "inter_area", "/", "union_area", "# iou", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.compute_loss": [[249, 285], ["torch.MSELoss", "torch.CrossEntropyLoss", "torch.BCEWithLogitsLoss", "enumerate", "collections.defaultdict", "zip", "FT", "FT", "FT", "FT", "torch.zeros_like", "torch.zeros_like", "loss.item", "lxy.item", "lwh.item", "lconf.item", "lcls.item", "len", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "nn.MSELoss.", "nn.CrossEntropyLoss.", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "compute_loss", "(", "p", ",", "targets", ")", ":", "# predictions, targets", "\n", "    ", "FT", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "p", "[", "0", "]", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "lxy", ",", "lwh", ",", "lcls", ",", "lconf", "=", "FT", "(", "[", "0", "]", ")", ",", "FT", "(", "[", "0", "]", ")", ",", "FT", "(", "[", "0", "]", ")", ",", "FT", "(", "[", "0", "]", ")", "\n", "txy", ",", "twh", ",", "tcls", ",", "indices", "=", "targets", "\n", "MSE", "=", "nn", ".", "MSELoss", "(", ")", "\n", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "BCE", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# Compute losses", "\n", "# gp = [x.numel() for x in tconf]  # grid points", "\n", "for", "i", ",", "pi0", "in", "enumerate", "(", "p", ")", ":", "# layer i predictions, i", "\n", "        ", "b", ",", "a", ",", "gj", ",", "gi", "=", "indices", "[", "i", "]", "# image, anchor, gridx, gridy", "\n", "tconf", "=", "torch", ".", "zeros_like", "(", "pi0", "[", "...", ",", "0", "]", ")", "# conf", "\n", "\n", "# Compute losses", "\n", "k", "=", "1", "# nT / bs", "\n", "if", "len", "(", "b", ")", ">", "0", ":", "\n", "            ", "pi", "=", "pi0", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "# predictions closest to anchors", "\n", "tconf", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "1", "# conf", "\n", "\n", "lxy", "+=", "k", "*", "MSE", "(", "torch", ".", "sigmoid", "(", "pi", "[", "...", ",", "0", ":", "2", "]", ")", ",", "txy", "[", "i", "]", ")", "# xy loss", "\n", "lwh", "+=", "k", "*", "MSE", "(", "pi", "[", "...", ",", "2", ":", "4", "]", ",", "twh", "[", "i", "]", ")", "# wh loss", "\n", "lcls", "+=", "(", "k", "/", "4", ")", "*", "CE", "(", "pi", "[", "...", ",", "5", ":", "]", ",", "tcls", "[", "i", "]", ")", "# class_conf loss", "\n", "\n", "# pos_weight = FT([gp[i] / min(gp) * 4.])", "\n", "# BCE = nn.BCEWithLogitsLoss(pos_weight=pos_weight)", "\n", "", "lconf", "+=", "(", "k", "*", "64", ")", "*", "BCE", "(", "pi0", "[", "...", ",", "4", "]", ",", "tconf", ")", "# obj_conf loss", "\n", "", "loss", "=", "lxy", "+", "lwh", "+", "lconf", "+", "lcls", "\n", "\n", "# Add to dictionary", "\n", "d", "=", "defaultdict", "(", "float", ")", "\n", "losses", "=", "[", "loss", ".", "item", "(", ")", ",", "lxy", ".", "item", "(", ")", ",", "lwh", ".", "item", "(", ")", ",", "lconf", ".", "item", "(", ")", ",", "lcls", ".", "item", "(", ")", "]", "\n", "for", "name", ",", "x", "in", "zip", "(", "[", "'total'", ",", "'xy'", ",", "'wh'", ",", "'conf'", ",", "'cls'", "]", ",", "losses", ")", ":", "\n", "        ", "d", "[", "name", "]", "=", "x", "\n", "\n", "", "return", "loss", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.build_targets": [[287, 338], ["isinstance", "enumerate", "utils.get_yolo_layers", "torch.stack().max", "torch.stack().max", "t[].long().t", "gxy.long().t", "indices.append", "txy.append", "twh.append", "tcls.append", "utils.wh_iou", "torch.log", "torch.log", "torch.stack", "torch.stack", "t[].long", "gxy.long", "gxy.floor"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.get_yolo_layers", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.wh_iou"], ["", "def", "build_targets", "(", "model", ",", "targets", ")", ":", "\n", "# targets = [image, class, x, y, w, h]", "\n", "    ", "if", "isinstance", "(", "model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "txy", ",", "twh", ",", "tcls", ",", "indices", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "get_yolo_layers", "(", "model", ")", ")", ":", "\n", "\n", "        ", "nG", "=", "model", ".", "module_list", "[", "layer", "]", "[", "0", "]", ".", "nG", "# grid size", "\n", "anchor_vec", "=", "model", ".", "module_list", "[", "layer", "]", "[", "0", "]", ".", "anchor_vec", "\n", "# print(anchor_vec)", "\n", "# iou of targets-anchors", "\n", "gwh", "=", "targets", "[", ":", ",", "4", ":", "6", "]", "*", "nG", "\n", "iou", "=", "[", "wh_iou", "(", "x", ",", "gwh", ")", "for", "x", "in", "anchor_vec", "]", "\n", "iou", ",", "a", "=", "torch", ".", "stack", "(", "iou", ",", "0", ")", ".", "max", "(", "0", ")", "# best iou and anchor", "\n", "\n", "# reject below threshold ious (OPTIONAL, increases P, lowers R)", "\n", "reject", "=", "False", "\n", "\n", "# print('===========')", "\n", "# print(targets)", "\n", "# trs", "\n", "if", "reject", ":", "\n", "            ", "j", "=", "iou", ">", "0.01", "\n", "# print(j)", "\n", "# print(targets[j])", "\n", "\n", "t", ",", "a", ",", "gwh", "=", "targets", "[", "j", "]", ",", "a", "[", "j", "]", ",", "gwh", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "t", "=", "targets", "\n", "\n", "# Indices", "\n", "# print('================')", "\n", "# print(t)", "\n", "# sets", "\n", "", "b", ",", "c", "=", "t", "[", ":", ",", ":", "2", "]", ".", "long", "(", ")", ".", "t", "(", ")", "# target image, class", "\n", "gxy", "=", "t", "[", ":", ",", "2", ":", "4", "]", "*", "nG", "\n", "gi", ",", "gj", "=", "gxy", ".", "long", "(", ")", ".", "t", "(", ")", "# grid_i, grid_j", "\n", "indices", ".", "append", "(", "(", "b", ",", "a", ",", "gj", ",", "gi", ")", ")", "\n", "\n", "# XY coordinates", "\n", "txy", ".", "append", "(", "gxy", "-", "gxy", ".", "floor", "(", ")", ")", "\n", "\n", "# Width and height", "\n", "twh", ".", "append", "(", "torch", ".", "log", "(", "gwh", "/", "anchor_vec", "[", "a", "]", ")", ")", "# yolo method", "\n", "# twh.append(torch.sqrt(gwh / anchor_vec[a]) / 2)  # power method", "\n", "\n", "# Class", "\n", "tcls", ".", "append", "(", "c", ")", "\n", "\n", "", "return", "txy", ",", "twh", ",", "tcls", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.non_max_suppression": [[341, 438], ["enumerate", "len", "pred[].max", "class_pred[].unsqueeze().float", "utils.xywh2xyxy", "torch.cat", "torch.cat", "pred[].unique", "len", "len", "torch.cat", "torch.cat", "class_pred[].unsqueeze", "class_conf.unsqueeze", "min", "torch.cat.append", "utils.bbox_iou", "len", "len", "len", "utils.bbox_iou", "len", "bbox_iou.max", "torch.cat.append", "torch.cat.append", "utils.bbox_iou", "weights.sum"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.xywh2xyxy", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.bbox_iou", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.bbox_iou", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.bbox_iou"], ["", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.5", ",", "nms_thres", "=", "0.4", ")", ":", "\n", "    ", "\"\"\"\n    Removes detections with lower object confidence score than 'conf_thres'\n    Non-Maximum Suppression to further filter detections.\n    Returns detections with shape:\n        (x1, y1, x2, y2, object_conf, class_conf, class)\n    \"\"\"", "\n", "\n", "min_wh", "=", "2", "# (pixels) minimum box width and height", "\n", "\n", "output", "=", "[", "None", "]", "*", "len", "(", "prediction", ")", "\n", "for", "image_i", ",", "pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "# Experiment: Prior class size rejection", "\n", "# x, y, w, h = pred[:, 0], pred[:, 1], pred[:, 2], pred[:, 3]", "\n", "# a = w * h  # area", "\n", "# ar = w / (h + 1e-16)  # aspect ratio", "\n", "# n = len(w)", "\n", "# log_w, log_h, log_a, log_ar = torch.log(w), torch.log(h), torch.log(a), torch.log(ar)", "\n", "# shape_likelihood = np.zeros((n, 60), dtype=np.float32)", "\n", "# x = np.concatenate((log_w.reshape(-1, 1), log_h.reshape(-1, 1)), 1)", "\n", "# from scipy.stats import multivariate_normal", "\n", "# for c in range(60):", "\n", "# shape_likelihood[:, c] =", "\n", "#   multivariate_normal.pdf(x, mean=mat['class_mu'][c, :2], cov=mat['class_cov'][c, :2, :2])", "\n", "\n", "# Filter out confidence scores below threshold", "\n", "        ", "class_conf", ",", "class_pred", "=", "pred", "[", ":", ",", "5", ":", "]", ".", "max", "(", "1", ")", "\n", "# pred[:, 4] *= class_conf", "\n", "\n", "i", "=", "(", "pred", "[", ":", ",", "4", "]", ">", "conf_thres", ")", "&", "(", "pred", "[", ":", ",", "2", "]", ">", "min_wh", ")", "&", "(", "pred", "[", ":", ",", "3", "]", ">", "min_wh", ")", "\n", "pred", "=", "pred", "[", "i", "]", "\n", "\n", "# If none are remaining => process next image", "\n", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# Select predicted classes", "\n", "", "class_conf", "=", "class_conf", "[", "i", "]", "\n", "class_pred", "=", "class_pred", "[", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "# Box (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "pred", "[", ":", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "pred", "[", ":", ",", ":", "4", "]", ")", "\n", "pred", "[", ":", ",", "4", "]", "*=", "class_conf", "# improves mAP from 0.549 to 0.551", "\n", "\n", "# Detections ordered as (x1y1x2y2, obj_conf, class_conf, class_pred)", "\n", "pred", "=", "torch", ".", "cat", "(", "(", "pred", "[", ":", ",", ":", "5", "]", ",", "class_conf", ".", "unsqueeze", "(", "1", ")", ",", "class_pred", ")", ",", "1", ")", "\n", "\n", "# Get detections sorted by decreasing confidence scores", "\n", "# pred = pred[(-pred[:, 4]).argsort()]", "\n", "a", ",", "b", "=", "(", "-", "pred", "[", ":", ",", "4", "]", ")", ".", "sort", "(", ")", "\n", "pred", "=", "pred", "[", "b", "]", "\n", "\n", "det_max", "=", "[", "]", "\n", "nms_style", "=", "'MERGE'", "# 'OR' (default), 'AND', 'MERGE' (experimental)", "\n", "for", "c", "in", "pred", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "            ", "dc", "=", "pred", "[", "pred", "[", ":", ",", "-", "1", "]", "==", "c", "]", "# select class c", "\n", "dc", "=", "dc", "[", ":", "min", "(", "len", "(", "dc", ")", ",", "100", ")", "]", "# limit to first 100 boxes: https://github.com/ultralytics/yolov3/issues/117", "\n", "\n", "# Non-maximum suppression", "\n", "if", "nms_style", "==", "'OR'", ":", "# default", "\n", "# METHOD1", "\n", "# ind = list(range(len(dc)))", "\n", "# while len(ind):", "\n", "# j = ind[0]", "\n", "# det_max.append(dc[j:j + 1])  # save highest conf detection", "\n", "# reject = (bbox_iou(dc[j], dc[ind]) > nms_thres).nonzero()", "\n", "# [ind.pop(i) for i in reversed(reject)]", "\n", "\n", "# METHOD2", "\n", "                ", "while", "dc", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "det_max", ".", "append", "(", "dc", "[", ":", "1", "]", ")", "# save highest conf detection", "\n", "if", "len", "(", "dc", ")", "==", "1", ":", "# Stop if we're at the last detection", "\n", "                        ", "break", "\n", "", "iou", "=", "bbox_iou", "(", "dc", "[", "0", "]", ",", "dc", "[", "1", ":", "]", ")", "# iou with other boxes", "\n", "dc", "=", "dc", "[", "1", ":", "]", "[", "iou", "<", "nms_thres", "]", "# remove ious > threshold", "\n", "\n", "", "", "elif", "nms_style", "==", "'AND'", ":", "# requires overlap, single boxes erased", "\n", "                ", "while", "len", "(", "dc", ")", ">", "1", ":", "\n", "                    ", "iou", "=", "bbox_iou", "(", "dc", "[", "0", "]", ",", "dc", "[", "1", ":", "]", ")", "# iou with other boxes", "\n", "if", "iou", ".", "max", "(", ")", ">", "0.5", ":", "\n", "                        ", "det_max", ".", "append", "(", "dc", "[", ":", "1", "]", ")", "\n", "", "dc", "=", "dc", "[", "1", ":", "]", "[", "iou", "<", "nms_thres", "]", "# remove ious > threshold", "\n", "\n", "", "", "elif", "nms_style", "==", "'MERGE'", ":", "# weighted mixture box", "\n", "                ", "while", "len", "(", "dc", ")", ":", "\n", "                    ", "i", "=", "bbox_iou", "(", "dc", "[", "0", "]", ",", "dc", ")", ">", "nms_thres", "# iou with other boxes", "\n", "weights", "=", "dc", "[", "i", ",", "4", ":", "5", "]", "\n", "dc", "[", "0", ",", ":", "4", "]", "=", "(", "weights", "*", "dc", "[", "i", ",", ":", "4", "]", ")", ".", "sum", "(", "0", ")", "/", "weights", ".", "sum", "(", ")", "\n", "det_max", ".", "append", "(", "dc", "[", ":", "1", "]", ")", "\n", "dc", "=", "dc", "[", "i", "==", "0", "]", "\n", "\n", "", "", "", "if", "len", "(", "det_max", ")", ":", "\n", "            ", "det_max", "=", "torch", ".", "cat", "(", "det_max", ")", "# concatenate", "\n", "det1", ",", "det2", "=", "(", "-", "det_max", "[", ":", ",", "4", "]", ")", ".", "sort", "(", ")", "\n", "output", "[", "image_i", "]", "=", "det_max", "[", "det2", "]", "# sort", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.get_yolo_layers": [[440, 443], ["enumerate"], "function", ["None"], ["", "def", "get_yolo_layers", "(", "model", ")", ":", "\n", "    ", "bool_vec", "=", "[", "x", "[", "'type'", "]", "==", "'yolo'", "for", "x", "in", "model", ".", "module_defs", "]", "\n", "return", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "bool_vec", ")", "if", "x", "]", "# [82, 94, 106] for yolov3", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.strip_optimizer_from_checkpoint": [[445, 450], ["torch.load", "torch.load", "torch.save", "torch.save", "filename.replace"], "function", ["None"], ["", "def", "strip_optimizer_from_checkpoint", "(", "filename", "=", "'weights/best.pt'", ")", ":", "\n", "# Strip optimizer from *.pt files for lighter files (reduced by 2/3 size)", "\n", "    ", "a", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "'cpu'", ")", "\n", "a", "[", "'optimizer'", "]", "=", "[", "]", "\n", "torch", ".", "save", "(", "a", ",", "filename", ".", "replace", "(", "'.pt'", ",", "'_lite.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.coco_class_count": [[452, 461], ["numpy.zeros", "sorted", "enumerate", "glob.glob", "numpy.loadtxt().reshape", "numpy.bincount", "print", "labels[].astype", "len", "numpy.loadtxt"], "function", ["None"], ["", "def", "coco_class_count", "(", "path", "=", "'../coco/labels/train2014/'", ")", ":", "\n", "# Histogram of occurrences per class", "\n", "    ", "nC", "=", "80", "# number classes", "\n", "x", "=", "np", ".", "zeros", "(", "nC", ",", "dtype", "=", "'int32'", ")", "\n", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'%s/*.*'", "%", "path", ")", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "labels", "=", "np", ".", "loadtxt", "(", "file", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "x", "+=", "np", ".", "bincount", "(", "labels", "[", ":", ",", "0", "]", ".", "astype", "(", "'int32'", ")", ",", "minlength", "=", "nC", ")", "\n", "print", "(", "i", ",", "len", "(", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.coco_only_people": [[463, 470], ["sorted", "enumerate", "glob.glob", "numpy.loadtxt().reshape", "all", "print", "numpy.loadtxt"], "function", ["None"], ["", "", "def", "coco_only_people", "(", "path", "=", "'../coco/labels/val2014/'", ")", ":", "\n", "# Find images with only people", "\n", "    ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'%s/*.*'", "%", "path", ")", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "labels", "=", "np", ".", "loadtxt", "(", "file", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "if", "all", "(", "labels", "[", ":", ",", "0", "]", "==", "0", ")", ":", "\n", "            ", "print", "(", "labels", ".", "shape", "[", "0", "]", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.plot_wh_methods": [[472, 490], ["numpy.arange", "numpy.exp", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "plt.figure.tight_layout", "plt.figure.savefig", "torch.sigmoid().numpy", "torch.sigmoid().numpy", "torch.sigmoid", "torch.sigmoid", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "", "def", "plot_wh_methods", "(", ")", ":", "# from utils.utils import *; plot_wh_methods()", "\n", "# Compares the two methods for width-height anchor multiplication", "\n", "# https://github.com/ultralytics/yolov3/issues/168", "\n", "    ", "x", "=", "np", ".", "arange", "(", "-", "4.0", ",", "4.0", ",", ".1", ")", "\n", "ya", "=", "np", ".", "exp", "(", "x", ")", "\n", "yb", "=", "(", "torch", ".", "sigmoid", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "numpy", "(", ")", "*", "2", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ",", "dpi", "=", "150", ")", "\n", "plt", ".", "plot", "(", "x", ",", "ya", ",", "'.-'", ",", "label", "=", "'yolo method'", ")", "\n", "plt", ".", "plot", "(", "x", ",", "yb", "**", "2", ",", "'.-'", ",", "label", "=", "'^2 power method'", ")", "\n", "plt", ".", "plot", "(", "x", ",", "yb", "**", "2.5", ",", "'.-'", ",", "label", "=", "'^2.5 power method'", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "-", "4", ",", "right", "=", "4", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "0", ",", "top", "=", "6", ")", "\n", "plt", ".", "xlabel", "(", "'input'", ")", "\n", "plt", ".", "ylabel", "(", "'output'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "'comparison.jpg'", ",", "dpi", "=", "fig", ".", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.plot_results": [[492, 511], ["matplotlib.figure", "sorted", "plt.figure.tight_layout", "plt.figure.savefig", "glob.glob", "range", "range", "numpy.loadtxt", "matplotlib.subplot", "matplotlib.plot", "matplotlib.title", "matplotlib.legend", "matplotlib.plot"], "function", ["None"], ["", "def", "plot_results", "(", "start", "=", "0", ")", ":", "# from utils.utils import *; plot_results()", "\n", "# Plot YOLO training results file 'results.txt'", "\n", "# import os; os.system('wget https://storage.googleapis.com/ultralytics/yolov3/results_v3.txt')", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "7", ")", ")", "\n", "s", "=", "[", "'X + Y'", ",", "'Width + Height'", ",", "'Confidence'", ",", "'Classification'", ",", "'Total Loss'", ",", "'Precision'", ",", "'Recall'", ",", "'mAP'", "]", "\n", "for", "f", "in", "sorted", "(", "glob", ".", "glob", "(", "'results*.txt'", ")", ")", ":", "\n", "        ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "usecols", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "11", ",", "12", "]", ")", ".", "T", "# column 11 is mAP", "\n", "x", "=", "range", "(", "start", ",", "results", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "2", ",", "4", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "x", ",", "results", "[", "i", ",", "x", "]", ",", "marker", "=", "'.'", ",", "label", "=", "f", ")", "\n", "plt", ".", "title", "(", "s", "[", "i", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "plt", ".", "legend", "(", ")", "\n", "", "if", "i", "==", "7", ":", "\n", "                ", "plt", ".", "plot", "(", "x", ",", "results", "[", "i", "+", "1", ",", "x", "]", ",", "marker", "=", "'.'", ",", "label", "=", "f", ")", "\n", "", "", "", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "'results.jpg'", ",", "dpi", "=", "fig", ".", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.get_background": [[513, 528], ["None"], "function", ["None"], ["", "def", "get_background", "(", "img", ",", "seg", ",", "bimg", ")", ":", "\n", "\n", "    ", "seg1", "=", "seg", ">", "0", "\n", "seg2", "=", "seg", "==", "0", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "img", "[", ":", ",", ":", ",", "0", "]", "*", "seg1", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "img", "[", ":", ",", ":", ",", "1", "]", "*", "seg1", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "img", "[", ":", ",", ":", ",", "2", "]", "*", "seg1", "\n", "\n", "\n", "bimg", "[", ":", ",", ":", ",", "0", "]", "=", "seg2", "*", "bimg", "[", ":", ",", ":", ",", "0", "]", "\n", "bimg", "[", ":", ",", ":", ",", "1", "]", "=", "seg2", "*", "bimg", "[", ":", ",", ":", ",", "1", "]", "\n", "bimg", "[", ":", ",", ":", ",", "2", "]", "=", "seg2", "*", "bimg", "[", ":", ",", ":", ",", "2", "]", "\n", "img", "=", "bimg", "+", "img", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.EmptyLayer.__init__": [[83, 85], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.EmptyLayer.forward": [[86, 88], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Upsample.__init__": [[93, 97], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "1", ",", "mode", "=", "'nearest'", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Upsample.forward": [[98, 100], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.YOLOLayer.__init__": [[103, 120], ["torch.Module.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "models.create_grids", "cfg.endswith", "int", "models.create_grids", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__", "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_grids", "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_grids"], ["    ", "def", "__init__", "(", "self", ",", "anchors", ",", "nC", ",", "img_size", ",", "yolo_layer", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "YOLOLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "anchors", "=", "torch", ".", "FloatTensor", "(", "anchors", ")", "\n", "self", ".", "nA", "=", "len", "(", "anchors", ")", "# number of anchors (3)", "\n", "self", ".", "nC", "=", "nC", "# number of classes (80)", "\n", "self", ".", "img_size", "=", "0", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "create_grids", "(", "self", ",", "32", ",", "1", ",", "device", "=", "device", ")", "\n", "\n", "if", "ONNX_EXPORT", ":", "# grids must be computed in __init__", "\n", "            ", "stride", "=", "[", "32", ",", "16", ",", "8", "]", "[", "yolo_layer", "]", "# stride of this layer", "\n", "if", "cfg", ".", "endswith", "(", "'yolov3-tiny.cfg'", ")", ":", "\n", "                ", "stride", "*=", "2", "\n", "\n", "", "nG", "=", "int", "(", "img_size", "/", "stride", ")", "# number grid points", "\n", "create_grids", "(", "self", ",", "img_size", ",", "nG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.YOLOLayer.forward": [[121, 181], ["p.view.view.view().permute().contiguous", "models.create_grids", "p.view.view.view().permute", "models.YOLOLayer.grid_xy.repeat().view", "p.view.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "torch.exp().permute", "p_cls.permute.permute.permute", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.cat().squeeze().t", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.YOLOLayer.anchor_wh.repeat().view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid.permute", "torch.sigmoid.permute", "torch.sigmoid.permute", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "p.view.view.view", "p.view.view.view", "models.YOLOLayer.grid_xy.repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "p_cls.permute.permute.sum().unsqueeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "numpy.where", "r.append", "c.append", "p.view.view.view", "models.YOLOLayer.anchor_wh.repeat", "p_cls.permute.permute.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p[].sum().cpu().numpy", "numpy.max", "p[].sum().cpu().numpy", "p[].sum().cpu", "p[].sum().cpu", "p[].sum", "p[].sum"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_grids"], ["", "", "def", "forward", "(", "self", ",", "p", ",", "img_size", ",", "test", "=", "0", ",", "var", "=", "None", ")", ":", "\n", "        ", "if", "ONNX_EXPORT", ":", "\n", "            ", "bs", ",", "nG", "=", "1", ",", "self", ".", "nG", "# batch size, grid size", "\n", "", "else", ":", "\n", "            ", "bs", ",", "nG", "=", "p", ".", "shape", "[", "0", "]", ",", "p", ".", "shape", "[", "-", "1", "]", "\n", "if", "self", ".", "img_size", "!=", "img_size", ":", "\n", "                ", "create_grids", "(", "self", ",", "img_size", ",", "nG", ",", "p", ".", "device", ")", "\n", "\n", "# p.view(bs, 255, 13, 13) -- > (bs, 3, 13, 13, 85)  # (bs, anchors, grid, grid, classes + xywh)", "\n", "## p(8,18,14,16)", "\n", "", "", "p", "=", "p", ".", "view", "(", "bs", ",", "self", ".", "nA", ",", "self", ".", "nC", "+", "5", ",", "nG", ",", "nG", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "# prediction", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "p", "\n", "\n", "", "elif", "ONNX_EXPORT", ":", "\n", "            ", "grid_xy", "=", "self", ".", "grid_xy", ".", "repeat", "(", "(", "1", ",", "self", ".", "nA", ",", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "(", "1", ",", "-", "1", ",", "2", ")", ")", "\n", "anchor_wh", "=", "self", ".", "anchor_wh", ".", "repeat", "(", "(", "1", ",", "1", ",", "nG", ",", "nG", ",", "1", ")", ")", ".", "view", "(", "(", "1", ",", "-", "1", ",", "2", ")", ")", "/", "nG", "\n", "\n", "# p = p.view(-1, 5 + self.nC)", "\n", "# xy = xy + self.grid_xy[0]  # x, y", "\n", "# wh = torch.exp(wh) * self.anchor_wh[0]  # width, height", "\n", "# p_conf = torch.sigmoid(p[:, 4:5])  # Conf", "\n", "# p_cls = F.softmax(p[:, 5:], 1) * p_conf  # SSD-like conf", "\n", "# return torch.cat((xy / nG, wh, p_conf, p_cls), 1).t()", "\n", "\n", "p", "=", "p", ".", "view", "(", "1", ",", "-", "1", ",", "5", "+", "self", ".", "nC", ")", "\n", "xy", "=", "torch", ".", "sigmoid", "(", "p", "[", "...", ",", "0", ":", "2", "]", ")", "+", "grid_xy", "# x, y", "\n", "wh", "=", "torch", ".", "exp", "(", "p", "[", "...", ",", "2", ":", "4", "]", ")", "*", "anchor_wh", "# width, height", "\n", "p_conf", "=", "torch", ".", "sigmoid", "(", "p", "[", "...", ",", "4", ":", "5", "]", ")", "# Conf", "\n", "p_cls", "=", "p", "[", "...", ",", "5", ":", "]", "\n", "# Broadcasting only supported on first dimension in CoreML. See onnx-coreml/_operators.py", "\n", "# p_cls = F.softmax(p_cls, 2) * p_conf  # SSD-like conf", "\n", "p_cls", "=", "torch", ".", "exp", "(", "p_cls", ")", ".", "permute", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "p_cls", "=", "p_cls", "/", "p_cls", ".", "sum", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "*", "p_conf", ".", "permute", "(", "(", "2", ",", "1", ",", "0", ")", ")", "# F.softmax() equivalent", "\n", "p_cls", "=", "p_cls", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "return", "torch", ".", "cat", "(", "(", "xy", "/", "nG", ",", "wh", ",", "p_conf", ",", "p_cls", ")", ",", "2", ")", ".", "squeeze", "(", ")", ".", "t", "(", ")", "\n", "\n", "", "else", ":", "# inference", "\n", "            ", "p", "[", "...", ",", "0", ":", "2", "]", "=", "torch", ".", "sigmoid", "(", "p", "[", "...", ",", "0", ":", "2", "]", ")", "+", "self", ".", "grid_xy", "# xy", "\n", "p", "[", "...", ",", "2", ":", "4", "]", "=", "torch", ".", "exp", "(", "p", "[", "...", ",", "2", ":", "4", "]", ")", "*", "self", ".", "anchor_wh", "# wh yolo method", "\n", "# p[..., 2:4] = ((torch.sigmoid(p[..., 2:4]) * 2) ** 2) * self.anchor_wh  # wh power method", "\n", "p", "[", "...", ",", "4", "]", "=", "torch", ".", "sigmoid", "(", "p", "[", "...", ",", "4", "]", ")", "# p_conf", "\n", "p", "[", "...", ",", "5", ":", "]", "=", "torch", ".", "sigmoid", "(", "p", "[", "...", ",", "5", ":", "]", ")", "# p_class", "\n", "# p[..., 5:] = F.softmax(p[..., 5:], dim=4)  # p_class", "\n", "p", "[", "...", ",", ":", "4", "]", "*=", "self", ".", "stride", "\n", "\n", "\n", "\n", "# reshape from [1, 3, 13, 13, 85] to [1, 507, 85]", "\n", "if", "test", "==", "1", ":", "\n", "                ", "r", "=", "[", "]", "\n", "c", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "p", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "r0", ",", "c0", "=", "np", ".", "where", "(", "p", "[", "i", ",", ":", ",", ":", ",", ":", ",", "4", "]", ".", "sum", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "np", ".", "max", "(", "p", "[", "i", ",", ":", ",", ":", ",", ":", ",", "4", "]", ".", "sum", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "r", ".", "append", "(", "r0", "[", "0", "]", ")", "\n", "c", ".", "append", "(", "c0", "[", "0", "]", ")", "\n", "", "return", "[", "p", ".", "view", "(", "bs", ",", "-", "1", ",", "5", "+", "self", ".", "nC", ")", ",", "r", ",", "c", "]", "\n", "", "else", ":", "\n", "                ", "return", "p", ".", "view", "(", "bs", ",", "-", "1", ",", "5", "+", "self", ".", "nC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__": [[186, 194], ["torch.Module.__init__", "G2L_Net.yolov3.utils.parse_config.parse_model_cfg", "models.create_modules"], "methods", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.__init__", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.parse_config.parse_model_cfg", "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_modules"], ["def", "__init__", "(", "self", ",", "cfg_path", ",", "img_size", "=", "416", ")", ":", "\n", "        ", "super", "(", "Darknet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "module_defs", "=", "parse_model_cfg", "(", "cfg_path", ")", "\n", "self", ".", "module_defs", "[", "0", "]", "[", "'cfg'", "]", "=", "cfg_path", "\n", "self", ".", "module_defs", "[", "0", "]", "[", "'height'", "]", "=", "img_size", "\n", "# self.module_defs[0]['width'] = 512", "\n", "self", ".", "hyperparams", ",", "self", ".", "module_list", "=", "create_modules", "(", "self", ".", "module_defs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.Darknet.forward": [[195, 229], ["enumerate", "zip", "layer_outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module", "output[].t", "output[].t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "module_def[].split", "torch.cat.append", "torch.cat.append", "torch.cat.append", "cors.append", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "var", "=", "None", ",", "test", "=", "0", ")", ":", "\n", "        ", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "layer_outputs", "=", "[", "]", "\n", "output", "=", "[", "]", "\n", "cors", "=", "[", "]", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", ",", "self", ".", "module_list", ")", ")", ":", "\n", "            ", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "if", "mtype", "in", "[", "'convolutional'", ",", "'upsample'", ",", "'maxpool'", "]", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "", "elif", "mtype", "==", "'route'", ":", "\n", "                ", "layer_i", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "'layers'", "]", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "layer_i", ")", "==", "1", ":", "\n", "                    ", "x", "=", "layer_outputs", "[", "layer_i", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "x", "=", "torch", ".", "cat", "(", "[", "layer_outputs", "[", "i", "]", "for", "i", "in", "layer_i", "]", ",", "1", ")", "\n", "", "", "elif", "mtype", "==", "'shortcut'", ":", "\n", "                ", "layer_i", "=", "int", "(", "module_def", "[", "'from'", "]", ")", "\n", "x", "=", "layer_outputs", "[", "-", "1", "]", "+", "layer_outputs", "[", "layer_i", "]", "\n", "", "elif", "mtype", "==", "'yolo'", ":", "\n", "                ", "if", "test", "==", "1", ":", "\n", "                    ", "x", "=", "module", "[", "0", "]", "(", "x", ",", "img_size", ",", "test", ")", "\n", "output", ".", "append", "(", "x", "[", "0", "]", ")", "\n", "cors", ".", "append", "(", "x", "[", "1", ":", "3", "]", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "x", "=", "module", "[", "0", "]", "(", "x", ",", "img_size", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "", "", "layer_outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "ONNX_EXPORT", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "output", ",", "1", ")", "# merge the 3 layers 85 x (507, 2028, 8112) to 85 x 10647", "\n", "return", "output", "[", "5", ":", "]", ".", "t", "(", ")", ",", "output", "[", ":", "4", "]", ".", "t", "(", ")", "# ONNX scores, boxes", "\n", "", "else", ":", "\n", "            ", "return", "output", "if", "self", ".", "training", "else", "torch", ".", "cat", "(", "output", ",", "1", ")", ",", "cors", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_modules": [[11, 78], ["module_defs.pop", "torch.ModuleList", "enumerate", "int", "torch.Sequential", "nn.ModuleList.append", "output_filters.append", "int", "int", "int", "nn.Sequential.add_module", "int", "torch.Conv2d", "nn.Sequential.add_module", "nn.Sequential.add_module", "int", "int", "torch.MaxPool2d", "nn.Sequential.add_module", "torch.BatchNorm2d", "torch.LeakyReLU", "nn.Sequential.add_module", "models.Upsample", "nn.Sequential.add_module", "int", "torch.ZeroPad2d", "int", "sum", "nn.Sequential.add_module", "int", "int", "models.EmptyLayer", "nn.Sequential.add_module", "module_def[].split", "models.EmptyLayer", "int", "int", "models.YOLOLayer", "nn.Sequential.add_module", "int", "int", "float", "module_def[].split", "module_def[].split", "range", "len"], "function", ["None"], ["def", "create_modules", "(", "module_defs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs module list of layer blocks from module configuration in module_defs\n    \"\"\"", "\n", "hyperparams", "=", "module_defs", ".", "pop", "(", "0", ")", "\n", "output_filters", "=", "[", "int", "(", "hyperparams", "[", "'channels'", "]", ")", "]", "\n", "module_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "yolo_layer_count", "=", "0", "\n", "for", "i", ",", "module_def", "in", "enumerate", "(", "module_defs", ")", ":", "\n", "        ", "modules", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "module_def", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "filters", "=", "int", "(", "module_def", "[", "'filters'", "]", ")", "\n", "kernel_size", "=", "int", "(", "module_def", "[", "'size'", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "if", "int", "(", "module_def", "[", "'pad'", "]", ")", "else", "0", "\n", "modules", ".", "add_module", "(", "'conv_%d'", "%", "i", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "output_filters", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "int", "(", "module_def", "[", "'stride'", "]", ")", ",", "\n", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "bn", ")", ")", "\n", "if", "bn", ":", "\n", "                ", "modules", ".", "add_module", "(", "'batch_norm_%d'", "%", "i", ",", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "", "if", "module_def", "[", "'activation'", "]", "==", "'leaky'", ":", "\n", "                ", "modules", ".", "add_module", "(", "'leaky_%d'", "%", "i", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n", "", "", "elif", "module_def", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "            ", "kernel_size", "=", "int", "(", "module_def", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "module_def", "[", "'stride'", "]", ")", "\n", "if", "kernel_size", "==", "2", "and", "stride", "==", "1", ":", "\n", "                ", "modules", ".", "add_module", "(", "'_debug_padding_%d'", "%", "i", ",", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", ")", "\n", "", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", ")", "\n", "modules", ".", "add_module", "(", "'maxpool_%d'", "%", "i", ",", "maxpool", ")", "\n", "\n", "", "elif", "module_def", "[", "'type'", "]", "==", "'upsample'", ":", "\n", "# upsample = nn.Upsample(scale_factor=int(module_def['stride']), mode='nearest')  # WARNING: deprecated", "\n", "            ", "upsample", "=", "Upsample", "(", "scale_factor", "=", "int", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "modules", ".", "add_module", "(", "'upsample_%d'", "%", "i", ",", "upsample", ")", "\n", "\n", "", "elif", "module_def", "[", "'type'", "]", "==", "'route'", ":", "\n", "            ", "layers", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "'layers'", "]", ".", "split", "(", "','", ")", "]", "\n", "filters", "=", "sum", "(", "[", "output_filters", "[", "i", "+", "1", "if", "i", ">", "0", "else", "i", "]", "for", "i", "in", "layers", "]", ")", "\n", "modules", ".", "add_module", "(", "'route_%d'", "%", "i", ",", "EmptyLayer", "(", ")", ")", "\n", "\n", "", "elif", "module_def", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "            ", "filters", "=", "output_filters", "[", "int", "(", "module_def", "[", "'from'", "]", ")", "]", "\n", "modules", ".", "add_module", "(", "'shortcut_%d'", "%", "i", ",", "EmptyLayer", "(", ")", ")", "\n", "\n", "", "elif", "module_def", "[", "'type'", "]", "==", "'yolo'", ":", "\n", "            ", "anchor_idxs", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "'mask'", "]", ".", "split", "(", "','", ")", "]", "\n", "# Extract anchors", "\n", "anchors", "=", "[", "float", "(", "x", ")", "for", "x", "in", "module_def", "[", "'anchors'", "]", ".", "split", "(", "','", ")", "]", "\n", "anchors", "=", "[", "(", "anchors", "[", "i", "]", ",", "anchors", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "anchors", ")", ",", "2", ")", "]", "\n", "anchors", "=", "[", "anchors", "[", "i", "]", "for", "i", "in", "anchor_idxs", "]", "\n", "nC", "=", "int", "(", "module_def", "[", "'classes'", "]", ")", "# number of classes", "\n", "img_size", "=", "int", "(", "hyperparams", "[", "'height'", "]", ")", "\n", "# Define detection layer", "\n", "yolo_layer", "=", "YOLOLayer", "(", "anchors", ",", "nC", ",", "img_size", ",", "yolo_layer_count", ",", "cfg", "=", "hyperparams", "[", "'cfg'", "]", ")", "\n", "modules", ".", "add_module", "(", "'yolo_%d'", "%", "i", ",", "yolo_layer", ")", "\n", "yolo_layer_count", "+=", "1", "\n", "\n", "# Register module list and number of output filters", "\n", "", "module_list", ".", "append", "(", "modules", ")", "\n", "output_filters", ".", "append", "(", "filters", ")", "\n", "\n", "", "return", "hyperparams", ",", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.get_yolo_layers": [[231, 234], ["enumerate"], "function", ["None"], ["", "", "", "def", "get_yolo_layers", "(", "model", ")", ":", "\n", "    ", "a", "=", "[", "module_def", "[", "'type'", "]", "==", "'yolo'", "for", "module_def", "in", "model", ".", "module_defs", "]", "\n", "return", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "a", ")", "if", "x", "]", "# [82, 94, 106] for yolov3", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.create_grids": [[236, 251], ["torch.arange().repeat().view().float", "torch.arange().repeat().view().float", "torch.arange().repeat().view().float", "torch.arange().repeat().view().float.permute", "torch.stack().to", "torch.stack().to", "torch.stack().to", "models..anchor_vec.view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "models..anchors.to", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.stack", "torch.stack", "torch.stack", "models..anchor_vec.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "create_grids", "(", "self", ",", "img_size", ",", "nG", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "img_size", "/", "nG", "\n", "# self.stridex = img_size[1] / nG[1]", "\n", "# self.stridey = img_size[0] / nG[0]", "\n", "# build xy offsets", "\n", "grid_x", "=", "torch", ".", "arange", "(", "nG", ")", ".", "repeat", "(", "(", "nG", ",", "1", ")", ")", ".", "view", "(", "(", "1", ",", "1", ",", "nG", ",", "nG", ")", ")", ".", "float", "(", ")", "\n", "grid_y", "=", "grid_x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "# grid_y = torch.arange(nG[0]).repeat((nG[0], 1)).view((1, 1, nG[0], nG[0])).float()", "\n", "self", ".", "grid_xy", "=", "torch", ".", "stack", "(", "(", "grid_x", ",", "grid_y", ")", ",", "4", ")", ".", "to", "(", "device", ")", "\n", "\n", "# build wh gains", "\n", "self", ".", "anchor_vec", "=", "self", ".", "anchors", ".", "to", "(", "device", ")", "/", "self", ".", "stride", "\n", "self", ".", "anchor_wh", "=", "self", ".", "anchor_vec", ".", "view", "(", "1", ",", "self", ".", "nA", ",", "1", ",", "1", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "nG", "=", "torch", ".", "FloatTensor", "(", "[", "nG", "]", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.load_darknet_weights": [[253, 319], ["open", "numpy.fromfile", "numpy.fromfile", "open.close", "enumerate", "np.fromfile.split", "os.path.isfile", "zip", "os.system", "conv_layer.weight.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "conv_layer.weight.data.copy_", "print", "bn_layer.bias.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.bias.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.weight.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.running_mean.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.running_var.data.copy_", "conv_layer.bias.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "conv_layer.bias.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_darknet_weights", "(", "self", ",", "weights", ",", "cutoff", "=", "-", "1", ")", ":", "\n", "# Parses and loads the weights stored in 'weights'", "\n", "# cutoff: save layers between 0 and cutoff (if cutoff = -1 all are saved)", "\n", "    ", "weights_file", "=", "weights", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "\n", "# Try to download weights if not available locally", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "weights", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "system", "(", "'wget https://pjreddie.com/media/files/'", "+", "weights_file", "+", "' -O '", "+", "weights", ")", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "weights", "+", "' not found'", ")", "\n", "\n", "# Establish cutoffs", "\n", "", "", "if", "weights_file", "==", "'darknet53.conv.74'", ":", "\n", "        ", "cutoff", "=", "75", "\n", "", "elif", "weights_file", "==", "'yolov3-tiny.conv.15'", ":", "\n", "        ", "cutoff", "=", "15", "\n", "\n", "# Open the weights file", "\n", "", "fp", "=", "open", "(", "weights", ",", "'rb'", ")", "\n", "header", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "5", ")", "# First five are header values", "\n", "\n", "# Needed to write header when saving weights", "\n", "self", ".", "header_info", "=", "header", "\n", "\n", "self", ".", "seen", "=", "header", "[", "3", "]", "# number of images seen during training", "\n", "weights", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "# The rest are weights", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "ptr", "=", "0", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", "[", ":", "cutoff", "]", ",", "self", ".", "module_list", "[", ":", "cutoff", "]", ")", ")", ":", "\n", "        ", "if", "module_def", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "conv_layer", "=", "module", "[", "0", "]", "\n", "if", "module_def", "[", "'batch_normalize'", "]", ":", "\n", "# Load BN bias, weights, running mean and running variance", "\n", "                ", "bn_layer", "=", "module", "[", "1", "]", "\n", "num_b", "=", "bn_layer", ".", "bias", ".", "numel", "(", ")", "# Number of biases", "\n", "# Bias", "\n", "bn_b", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "bias", ")", "\n", "bn_layer", ".", "bias", ".", "data", ".", "copy_", "(", "bn_b", ")", "\n", "ptr", "+=", "num_b", "\n", "# Weight", "\n", "bn_w", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "weight", ")", "\n", "bn_layer", ".", "weight", ".", "data", ".", "copy_", "(", "bn_w", ")", "\n", "ptr", "+=", "num_b", "\n", "# Running Mean", "\n", "bn_rm", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "running_mean", ")", "\n", "bn_layer", ".", "running_mean", ".", "data", ".", "copy_", "(", "bn_rm", ")", "\n", "ptr", "+=", "num_b", "\n", "# Running Var", "\n", "bn_rv", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "running_var", ")", "\n", "bn_layer", ".", "running_var", ".", "data", ".", "copy_", "(", "bn_rv", ")", "\n", "ptr", "+=", "num_b", "\n", "", "else", ":", "\n", "# Load conv. bias", "\n", "                ", "num_b", "=", "conv_layer", ".", "bias", ".", "numel", "(", ")", "\n", "conv_b", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "conv_layer", ".", "bias", ")", "\n", "conv_layer", ".", "bias", ".", "data", ".", "copy_", "(", "conv_b", ")", "\n", "ptr", "+=", "num_b", "\n", "# Load conv. weights", "\n", "", "num_w", "=", "conv_layer", ".", "weight", ".", "numel", "(", ")", "\n", "conv_w", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_w", "]", ")", ".", "view_as", "(", "conv_layer", ".", "weight", ")", "\n", "conv_layer", ".", "weight", ".", "data", ".", "copy_", "(", "conv_w", ")", "\n", "ptr", "+=", "num_w", "\n", "\n", "", "", "return", "cutoff", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.save_weights": [[321, 344], ["open", "models..header_info.tofile", "enumerate", "open.close", "zip", "conv_layer.weight.data.cpu().numpy().tofile", "bn_layer.bias.data.cpu().numpy().tofile", "bn_layer.weight.data.cpu().numpy().tofile", "bn_layer.running_mean.data.cpu().numpy().tofile", "bn_layer.running_var.data.cpu().numpy().tofile", "conv_layer.bias.data.cpu().numpy().tofile", "conv_layer.weight.data.cpu().numpy", "bn_layer.bias.data.cpu().numpy", "bn_layer.weight.data.cpu().numpy", "bn_layer.running_mean.data.cpu().numpy", "bn_layer.running_var.data.cpu().numpy", "conv_layer.bias.data.cpu().numpy", "conv_layer.weight.data.cpu", "bn_layer.bias.data.cpu", "bn_layer.weight.data.cpu", "bn_layer.running_mean.data.cpu", "bn_layer.running_var.data.cpu", "conv_layer.bias.data.cpu"], "function", ["None"], ["", "def", "save_weights", "(", "self", ",", "path", ",", "cutoff", "=", "-", "1", ")", ":", "\n", "    ", "fp", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "self", ".", "header_info", "[", "3", "]", "=", "self", ".", "seen", "# number of images seen during training", "\n", "self", ".", "header_info", ".", "tofile", "(", "fp", ")", "\n", "\n", "# Iterate through layers", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", "[", ":", "cutoff", "]", ",", "self", ".", "module_list", "[", ":", "cutoff", "]", ")", ")", ":", "\n", "        ", "if", "module_def", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "conv_layer", "=", "module", "[", "0", "]", "\n", "# If batch norm, load bn first", "\n", "if", "module_def", "[", "'batch_normalize'", "]", ":", "\n", "                ", "bn_layer", "=", "module", "[", "1", "]", "\n", "bn_layer", ".", "bias", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "running_mean", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "running_var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "# Load conv bias", "\n", "", "else", ":", "\n", "                ", "conv_layer", ".", "bias", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "# Load conv weights", "\n", "", "conv_layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "", "", "fp", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.get4xy": [[26, 33], ["None"], "function", ["None"], ["def", "get4xy", "(", "cxr", ",", "cyr", ",", "wr", ",", "hr", ",", "w", ",", "h", ")", ":", "\n", "# YOLO format: [category number] [object center in X] [object center in Y] [object width in X] [object width in Y]", "\n", "\n", "    ", "x", "=", "cxr", "*", "w", "-", "(", "wr", "*", "w", ")", "/", "2", "\n", "y", "=", "(", "cyr", "-", "hr", "/", "2", ")", "*", "h", "\n", "\n", "return", "[", "x", ",", "y", ",", "x", "+", "wr", "*", "w", ",", "y", ",", "x", "+", "wr", "*", "w", ",", "y", "+", "hr", "*", "h", ",", "x", ",", "y", "+", "hr", "*", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.getxywh": [[35, 48], ["int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "getxywh", "(", "cxr", ",", "cyr", ",", "wr", ",", "hr", ",", "w", ",", "h", ",", "cen", "=", "1", ")", ":", "\n", "    ", "if", "cen", "==", "1", ":", "\n", "        ", "x", "=", "int", "(", "cxr", "*", "w", "-", "(", "wr", "*", "w", ")", "/", "2", ")", "\n", "y", "=", "int", "(", "(", "cyr", "-", "hr", "/", "2", ")", "*", "h", ")", "\n", "W", "=", "int", "(", "wr", "*", "w", ")", "\n", "H", "=", "int", "(", "hr", "*", "h", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "int", "(", "cxr", "*", "w", ")", "\n", "y", "=", "int", "(", "cyr", "*", "h", ")", "\n", "W", "=", "int", "(", "wr", "*", "w", ")", "\n", "H", "=", "int", "(", "hr", "*", "h", ")", "\n", "\n", "", "return", "[", "x", ",", "y", ",", "W", ",", "H", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.getxyxy": [[50, 74], ["int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "getxyxy", "(", "cxr", ",", "cyr", ",", "wr", ",", "hr", ",", "w", ",", "h", ",", "cen", "=", "1", ")", ":", "\n", "# YOLO format: [category number] [object center in X] [object center in Y] [object width in X] [object width in Y]", "\n", "    ", "if", "cen", "==", "1", ":", "\n", "        ", "x", "=", "int", "(", "cxr", "*", "w", "-", "(", "wr", "*", "w", ")", "/", "2", ")", "\n", "y", "=", "int", "(", "(", "cyr", "-", "hr", "/", "2", ")", "*", "h", ")", "\n", "W", "=", "int", "(", "wr", "*", "w", ")", "\n", "H", "=", "int", "(", "hr", "*", "h", ")", "\n", "\n", "# print('tsts', x, y, W, H)", "\n", "\n", "x2", "=", "x", "+", "W", "\n", "y2", "=", "y", "+", "H", "\n", "", "else", ":", "\n", "        ", "x", "=", "int", "(", "cxr", "*", "w", ")", "\n", "y", "=", "int", "(", "cyr", "*", "h", ")", "\n", "W", "=", "int", "(", "wr", "*", "w", ")", "\n", "H", "=", "int", "(", "hr", "*", "h", ")", "\n", "\n", "# print('tsts', x, y, W, H)", "\n", "\n", "x2", "=", "x", "+", "W", "\n", "y2", "=", "y", "+", "H", "\n", "\n", "", "return", "[", "x", ",", "x2", ",", "y", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.letterbox": [[76, 89], ["max", "max", "cv2.resize", "cv2.copyMakeBorder", "max", "max", "round", "round", "round", "round", "round", "round", "max", "max", "max", "max"], "function", ["None"], ["", "def", "letterbox", "(", "img", ",", "height", ",", "color", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", ")", ":", "\n", "# Resize a rectangular image to a padded square", "\n", "    ", "shape", "=", "img", ".", "shape", "[", ":", "2", "]", "# shape = [height, width]", "\n", "ratio", "=", "max", "(", "height", ")", "/", "max", "(", "shape", ")", "# ratio  = old / new", "\n", "new_shape", "=", "(", "round", "(", "shape", "[", "1", "]", "*", "ratio", ")", ",", "round", "(", "shape", "[", "0", "]", "*", "ratio", ")", ")", "\n", "dw", "=", "max", "(", "0", ",", "(", "height", "[", "1", "]", "-", "new_shape", "[", "0", "]", ")", "/", "2", ")", "# width padding", "\n", "dh", "=", "max", "(", "(", "height", "[", "0", "]", "-", "new_shape", "[", "1", "]", ")", "/", "2", ",", "0", ")", "# height padding", "\n", "top", ",", "bottom", "=", "round", "(", "dh", "-", "0.1", ")", ",", "round", "(", "dh", "+", "0.1", ")", "\n", "left", ",", "right", "=", "round", "(", "dw", "-", "0.1", ")", ",", "round", "(", "dw", "+", "0.1", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "new_shape", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "# resized, no border", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "max", "(", "0", ",", "top", ")", ",", "max", "(", "0", ",", "bottom", ")", ",", "max", "(", "0", ",", "left", ")", ",", "max", "(", "0", ",", "right", ")", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "color", ")", "# padded square", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.load_models_yolo": [[91, 138], ["G2L_Net.yolov3.models.Darknet", "G2L_Net.yolov3.models.Darknet.eval", "G2L_Net.yolov3.models.Darknet.cuda", "weights.endswith", "G2L_Net.utils.networks_usage.load_models", "G2L_Net.utils.inout.load_ply", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "G2L_Net.utils.utils_funs.get_3D_corner", "G2L_Net.utils.utils_funs.get_change_3D", "open", "yaml.load", "open.close", "G2L_Net.yolov3.models.Darknet.load_state_dict", "G2L_Net.yolov3.models.load_darknet_weights", "open.read", "torch.load"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.networks_usage.load_models", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.inout.load_ply", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_3D_corner", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.get_change_3D", "home.repos.pwc.inspect_result.DC1991_G2L_Net.yolov3.models.load_darknet_weights"], ["", "def", "load_models_yolo", "(", "obj", "=", "15", ")", ":", "\n", "    ", "cfg", "=", "'../yolov3/cfg/yolov3_test.cfg'", "\n", "\n", "model", "=", "Darknet", "(", "cfg", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "weights", "=", "'../models/%d/best_%d.pt'", "%", "(", "obj", ",", "obj", ")", "## v2", "\n", "\n", "if", "weights", ".", "endswith", "(", "'.pt'", ")", ":", "# pytorch format", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weights", ")", "[", "'model'", "]", ")", "\n", "", "else", ":", "# darknet format", "\n", "        ", "_", "=", "load_darknet_weights", "(", "model", ",", "weights", ")", "\n", "\n", "", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", "=", "load_models", "(", "obj", ",", "199", ")", "\n", "\n", "model_path", "=", "'../models/%d/obj_%02d.ply'", "%", "(", "obj", ",", "obj", ")", "## m", "\n", "model2", "=", "inout", ".", "load_ply", "(", "model_path", ")", "\n", "pc", "=", "model2", "[", "'pts'", "]", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "'test.py'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'size of each image batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-cfg'", ",", "type", "=", "str", ",", "default", "=", "'cfg/obj.data'", ",", "help", "=", "'coco.data file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--iou-thres'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'iou threshold required to qualify as detected'", ")", "\n", "parser", ".", "add_argument", "(", "'--conf-thres'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'object confidence threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms-thres'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'iou threshold for non-maximum suppression'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-json'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save a cocoapi-compatible JSON results file'", ")", "\n", "parser", ".", "add_argument", "(", "'--img-size'", ",", "type", "=", "int", ",", "default", "=", "416", ",", "help", "=", "'size of each image dimension'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "cfg", "=", "cfg", "\n", "\n", "\n", "OR1", ",", "xr", ",", "yr", ",", "zr", "=", "get_3D_corner", "(", "pc", ")", "\n", "\n", "OR", "=", "get_change_3D", "(", "xr", ",", "yr", ",", "zr", ")", "\n", "OR_temp", "=", "OR", "\n", "\n", "OR", "[", ":", ",", "0", "]", "=", "OR_temp", "[", ":", ",", "0", "]", "\n", "OR", "[", ":", ",", "1", "]", "=", "OR_temp", "[", ":", ",", "1", "]", "\n", "OR", "[", ":", ",", "2", "]", "=", "OR_temp", "[", ":", ",", "2", "]", "\n", "\n", "base_path2", "=", "'../models/'", "\n", "\n", "f", "=", "open", "(", "base_path2", "+", "'models_info.yml'", ")", "\n", "temp", "=", "yaml", ".", "load", "(", "f", ".", "read", "(", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "model", ",", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", ",", "pc", ",", "opt", ",", "OR", ",", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.test": [[140, 241], ["torch.no_grad", "G2L_Net.utils.utils_funs.define_paras", "test_linemod.letterbox", "imgs[].transpose", "numpy.ascontiguousarray", "torch.from_numpy().unsqueeze().float", "model", "G2L_Net.yolov3.utils.utils.non_max_suppression", "torch.from_numpy().unsqueeze().float.cuda", "print", "int", "int", "pred[].cpu().numpy", "test_linemod.getxyxy", "rgb[].copy", "cv2.rectangle", "max", "min", "max", "min", "numpy.zeros", "G2L_Net.utils.utils_funs.depth_2_mesh_bbx", "test_linemod.test.chooselimt_test"], "function", ["home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.define_paras", "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.letterbox", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils.non_max_suppression", "home.repos.pwc.inspect_result.DC1991_G2L_Net.demo.test_linemod.getxyxy", "home.repos.pwc.inspect_result.DC1991_G2L_Net.utils.utils_funs.depth_2_mesh_bbx"], ["", "def", "test", "(", "rgb", ",", "depth_", ",", "idx", ",", "model", ",", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", ",", "opt", ",", "pc", ",", "OR", ",", "Rt", "=", "0", ",", "Tt", "=", "0", ",", "step", "=", "1", ",", "imgid", "=", "0", ",", "temp", "=", "1", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "img_size", "=", "opt", ".", "img_size", "\n", "\n", "conf_thres", "=", "opt", ".", "conf_thres", "\n", "nms_thres", "=", "opt", ".", "nms_thres", "\n", "\n", "CFG", "=", "define_paras", "(", ")", "\n", "K", "=", "CFG", "[", "'K'", "]", "\n", "\n", "imgs", "=", "letterbox", "(", "rgb", "[", "0", "]", ",", "[", "416", ",", "416", "]", ",", "color", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", ")", "\n", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "imgs", "=", "np", ".", "ascontiguousarray", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "# uint8 to float32", "\n", "imgs", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "imgs", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "#", "\n", "\n", "output0", ",", "cors", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ",", "test", "=", "1", ")", "\n", "\n", "seen", "=", "0", "\n", "\n", "output", "=", "non_max_suppression", "(", "output0", ",", "conf_thres", "=", "conf_thres", ",", "nms_thres", "=", "nms_thres", ")", "\n", "\n", "\n", "\n", "W", "=", "640", "\n", "H", "=", "480", "\n", "\n", "io", "=", "0", "\n", "depth", "=", "depth_", "[", "io", "]", "\n", "pred", "=", "output", "[", "io", "]", "\n", "seen", "+=", "1", "\n", "if", "pred", "is", "None", "or", "np", ".", "any", "(", "depth", ")", "==", "None", ":", "\n", "\n", "            ", "print", "(", "'no target object, please check'", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "DC", "=", "int", "(", "W", "*", "cors", "[", "2", "]", "[", "1", "]", "[", "io", "]", "/", "52", ")", "\n", "DR", "=", "int", "(", "H", "*", "cors", "[", "2", "]", "[", "0", "]", "[", "io", "]", "/", "52", ")", "\n", "\n", "conf", "=", "pred", "[", ":", ",", "4", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xy42", "=", "pred", "[", "np", ".", "argmax", "(", "conf", ")", "]", "[", "0", ":", "4", "]", "\n", "\n", "xywh", "=", "getxyxy", "(", "(", "xy42", "[", "0", "]", "+", "xy42", "[", "2", "]", ")", "/", "(", "img_size", "*", "2", ")", ",", "(", "xy42", "[", "1", "]", "+", "xy42", "[", "3", "]", ")", "/", "(", "img_size", "*", "2", ")", ",", "\n", "(", "xy42", "[", "2", "]", "-", "xy42", "[", "0", "]", ")", "/", "img_size", ",", "(", "xy42", "[", "3", "]", "-", "xy42", "[", "1", "]", ")", "/", "img_size", ",", "W", ",", "H", ")", "\n", "\n", "\n", "rgb0", "=", "rgb", "[", "io", "]", ".", "copy", "(", ")", "\n", "rgb01", "=", "rgb", "[", "io", "]", "\n", "cv2", ".", "rectangle", "(", "rgb01", ",", "(", "xywh", "[", "0", "]", ",", "xywh", "[", "2", "]", ")", ",", "(", "xywh", "[", "1", "]", ",", "xywh", "[", "3", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "3", ")", "\n", "\n", "xywh2", "=", "[", "xywh", "[", "2", "]", ",", "xywh", "[", "3", "]", ",", "xywh", "[", "0", "]", ",", "xywh", "[", "1", "]", "]", "\n", "\n", "enl", "=", "0", "\n", "xywh2", "[", "0", "]", "=", "max", "(", "xywh2", "[", "0", "]", "-", "enl", ",", "0", ")", "\n", "xywh2", "[", "1", "]", "=", "min", "(", "xywh2", "[", "1", "]", "+", "enl", ",", "H", ")", "\n", "xywh2", "[", "2", "]", "=", "max", "(", "xywh2", "[", "2", "]", "-", "enl", ",", "0", ")", "\n", "xywh2", "[", "3", "]", "=", "min", "(", "xywh2", "[", "3", "]", "+", "enl", ",", "W", ")", "\n", "\n", "cen_depth", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", "\n", "if", "depth", "[", "DR", ",", "DC", "]", "==", "0", ":", "\n", "                ", "while", "depth", "[", "DR", ",", "DC", "]", "==", "0", ":", "\n", "                    ", "DR", "=", "min", "(", "max", "(", "0", ",", "DR", "+", "np", ".", "random", ".", "randint", "(", "-", "10", ",", "10", ")", ")", ",", "424", ")", "\n", "DC", "=", "min", "(", "max", "(", "0", ",", "DC", "+", "np", ".", "random", ".", "randint", "(", "-", "10", ",", "10", ")", ")", ",", "512", ")", "\n", "\n", "", "", "XC", "=", "[", "0", ",", "0", "]", "\n", "XC", "[", "0", "]", "=", "np", ".", "float32", "(", "DC", "-", "K", "[", "0", ",", "2", "]", ")", "*", "np", ".", "float32", "(", "depth", "[", "DR", ",", "DC", "]", "/", "K", "[", "0", ",", "0", "]", ")", "\n", "XC", "[", "1", "]", "=", "np", ".", "float32", "(", "DR", "-", "K", "[", "1", ",", "2", "]", ")", "*", "np", ".", "float32", "(", "depth", "[", "DR", ",", "DC", "]", "/", "K", "[", "1", ",", "1", "]", ")", "\n", "\n", "cen_depth", "[", "0", ",", "0", ":", "3", "]", "=", "[", "XC", "[", "0", "]", ",", "XC", "[", "1", "]", ",", "depth", "[", "DR", ",", "DC", "]", "]", "\n", "dep3d", "=", "depth_2_mesh_bbx", "(", "depth", ",", "xywh2", ",", "K", ")", "\n", "dep3d", "=", "dep3d", "[", "np", ".", "where", "(", "dep3d", "[", ":", ",", "2", "]", ">", "300.0", ")", "]", "\n", "\n", "def", "chooselimt_test", "(", "pts0", ",", "dia", ",", "cen", ")", ":", "\n", "# cen = pts0.copy()", "\n", "                ", "pts", "=", "pts0", ".", "copy", "(", ")", "\n", "pts", "=", "pts", "[", "np", ".", "where", "(", "pts", "[", ":", ",", "2", "]", ">", "20", ")", "[", "0", "]", ",", ":", "]", "\n", "ptsn", "=", "pts", "[", "np", ".", "where", "(", "np", ".", "abs", "(", "pts", "[", ":", ",", "2", "]", "-", "cen", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", "<", "dia", ")", "[", "0", "]", ",", ":", "]", "\n", "if", "ptsn", ".", "shape", "[", "0", "]", "<", "1000", ":", "\n", "                    ", "ptsn", "=", "pts", "[", "np", ".", "where", "(", "np", ".", "abs", "(", "pts", "[", ":", ",", "2", "]", "-", "cen", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", "<", "dia", "*", "2", ")", "[", "0", "]", ",", ":", "]", "\n", "if", "ptsn", ".", "shape", "[", "0", "]", "<", "500", ":", "\n", "                        ", "ptsn", "=", "pts", "[", "np", ".", "where", "(", "np", ".", "abs", "(", "pts", "[", ":", ",", "2", "]", "-", "cen", "[", ":", ",", "2", "]", ".", "min", "(", ")", ")", "<", "dia", "*", "3", ")", "[", "0", "]", ",", ":", "]", "\n", "", "", "return", "ptsn", "\n", "\n", "\n", "\n", "\n", "", "dep3d", "=", "chooselimt_test", "(", "dep3d", ",", "102", ",", "cen_depth", ")", "##3 *N", "\n", "\n", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "T", "=", "0", "\n", "if", "dep3d", ".", "shape", "[", "0", "]", "<", "5", ":", "\n", "                ", "print", "(", "'No enough valid depth points !!!'", ")", "\n", "", "else", ":", "\n", "\n", "                ", "R", ",", "T", "=", "demo_linemod", "(", "dep3d", ",", "rgb0", ",", "rgb01", ",", "classifier", ",", "classifier_ce", ",", "classifier_box", ",", "classifier_box_gan", ",", "classifier_box_vec", ",", "pc", ",", "Rt", ",", "Tt", ",", "OR", "=", "OR", ",", "temp", "=", "temp", ")", "\n", "", "return", "R", ",", "T", "\n", "\n"]]}