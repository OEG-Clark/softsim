{"home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.__init__": [[14, 31], ["isinstance", "probabilistic_model.HeterogeneousDistribution.params_size_list.append", "probabilistic_model.HeterogeneousDistribution.likelihood_name_list.append", "probabilistic_model.HeterogeneousDistribution.dim_list.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "likelihoods", ":", "List", "[", "List", "[", "Any", "]", "]", ",", "\n", "norm_categorical", ":", "bool", ",", "# True, False", "\n", "norm_by_dim", ":", "bool", "# Unsigned Integer", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "likelihoods", ",", "list", ")", "\n", "\n", "self", ".", "norm_categorical", "=", "norm_categorical", "\n", "\n", "self", ".", "likelihoods", "=", "likelihoods", "\n", "self", ".", "params_size_list", "=", "[", "]", "\n", "self", ".", "likelihood_name_list", "=", "[", "]", "\n", "self", ".", "dim_list", "=", "[", "]", "\n", "self", ".", "norm_by_dim", "=", "norm_by_dim", "\n", "for", "lik", "in", "likelihoods", ":", "\n", "            ", "self", ".", "params_size_list", ".", "append", "(", "lik", ".", "params_size", ")", "\n", "self", ".", "likelihood_name_list", ".", "append", "(", "lik", ".", "name", ")", "\n", "self", ".", "dim_list", ".", "append", "(", "lik", ".", "domain_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.set_logits": [[32, 37], ["torch.split", "torch.split", "torch.split", "torch.split", "zip", "probabilistic_model.HeterogeneousDistribution.distributions.append", "lik_i"], "methods", ["None"], ["", "", "def", "set_logits", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "distributions", "=", "[", "]", "\n", "logits_list", "=", "torch", ".", "split", "(", "logits", ",", "split_size_or_sections", "=", "self", ".", "params_size_list", ",", "dim", "=", "1", ")", "\n", "for", "lik_i", ",", "logits_i", "in", "zip", "(", "self", ".", "likelihoods", ",", "logits_list", ")", ":", "\n", "            ", "self", ".", "distributions", ".", "append", "(", "lik_i", "(", "logits_i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.mean": [[38, 47], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "means.append", "means.append"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "means", "=", "[", "]", "\n", "for", "i", ",", "distr", "in", "enumerate", "(", "self", ".", "distributions", ")", ":", "\n", "            ", "if", "self", ".", "likelihood_name_list", "[", "i", "]", "in", "[", "'cat'", ",", "'ber'", ",", "'cb'", "]", ":", "\n", "                ", "means", ".", "append", "(", "distr", ".", "probs", ")", "\n", "", "else", ":", "\n", "                ", "means", ".", "append", "(", "distr", ".", "mean", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "means", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.sample": [[48, 63], ["torch.Size", "torch.Size", "torch.Size", "torch.Size", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "distr.sample", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.zero_", "torch.FloatTensor.zero_", "torch.FloatTensor.scatter_", "torch.FloatTensor.scatter_", "samples.append", "samples.append", "distr.sample.view", "distr.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "samples", "=", "[", "]", "\n", "for", "i", ",", "distr", "in", "enumerate", "(", "self", ".", "distributions", ")", ":", "\n", "            ", "if", "self", ".", "likelihood_name_list", "[", "i", "]", "in", "[", "Cte", ".", "CATEGORICAL", "]", ":", "\n", "                ", "sample_i", "=", "distr", ".", "sample", "(", "sample_shape", ")", "\n", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "distr", ".", "probs", ".", "shape", ")", "\n", "# In your for loop", "\n", "y_onehot", ".", "zero_", "(", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "sample_i", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "sample_i", "=", "y_onehot", "\n", "samples", ".", "append", "(", "sample_i", ")", "\n", "", "else", ":", "\n", "                ", "samples", ".", "append", "(", "distr", ".", "sample", "(", "sample_shape", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "samples", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.rsample": [[64, 66], ["torch.Size", "torch.Size", "torch.Size", "torch.Size", "NotImplementedError"], "methods", ["None"], ["", "def", "rsample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.log_prob": [[67, 94], ["torch.split", "torch.split", "torch.split", "torch.split", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "distr_i.log_prob().view", "log_probs.append", "distr_i.log_prob", "log_probs.append", "distr_i.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "'''\n        [num_graphs, total_dim_nodes]\n        '''", "\n", "value_list", "=", "torch", ".", "split", "(", "value", ",", "split_size_or_sections", "=", "self", ".", "dim_list", ",", "dim", "=", "1", ")", "\n", "\n", "log_probs", "=", "[", "]", "\n", "for", "distr_name", ",", "value_i", ",", "distr_i", "in", "zip", "(", "self", ".", "likelihood_name_list", ",", "value_list", ",", "self", ".", "distributions", ")", ":", "\n", "\n", "            ", "if", "distr_name", "in", "[", "Cte", ".", "CATEGORICAL", "]", ":", "\n", "                ", "num_categories", "=", "value_i", ".", "shape", "[", "1", "]", "\n", "value_i", "=", "torch", ".", "argmax", "(", "value_i", ",", "dim", "=", "-", "1", ")", "\n", "log_prob_i", "=", "distr_i", ".", "log_prob", "(", "value_i", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "norm_categorical", ":", "log_prob_i", "=", "log_prob_i", "/", "num_categories", "\n", "log_probs", ".", "append", "(", "log_prob_i", ")", "\n", "", "else", ":", "\n", "# print(f\"distr: {distr_i}\")", "\n", "# print(f\"max: {value_i.max()}\")", "\n", "# print(f\"min: {value_i.min()}\")", "\n", "                ", "log_prob_i", "=", "distr_i", ".", "log_prob", "(", "value_i", ")", "\n", "if", "self", ".", "norm_by_dim", "==", "1", ":", "# Normalize by dimension", "\n", "                    ", "log_prob_i", "=", "log_prob_i", "/", "log_prob_i", ".", "shape", "[", "1", "]", "\n", "", "elif", "self", ".", "norm_by_dim", ">", "1", ":", "\n", "                    ", "log_prob_i", "=", "log_prob_i", "/", "self", ".", "norm_by_dim", "\n", "", "log_probs", ".", "append", "(", "log_prob_i", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "log_probs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.ProbabilisticModelSCM.__init__": [[97, 156], ["torch.Module.__init__", "len", "sum", "torch.ModuleList", "torch.ModuleList", "sum", "probabilistic_model.HeterogeneousDistribution", "probabilistic_model.ProbabilisticModelSCM.node_dim_list.append", "likelihood_node_params_size_list.append", "probabilistic_model.ProbabilisticModelSCM._decoder_embeddings.append", "dim_node_i.append", "sum", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "flatten", "flatten", "torch.Linear", "torch.Linear", "utils.activations.get_activation", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "likelihoods", ":", "List", "[", "List", "[", "Any", "]", "]", ",", "\n", "embedding_size", ":", "int", ",", "\n", "act_name", ":", "str", ",", "# None", "\n", "drop_rate", ":", "float", ",", "# None", "\n", "norm_categorical", ":", "bool", ",", "# False", "\n", "norm_by_dim", ":", "int", "# False", "\n", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Args:\n            likelihoods:\n            embedding_size:\n            act_name:\n            drop_rate:\n            norm_categorical:\n            norm_by_dim:\n        \"\"\"", "\n", "\n", "'''\n\n\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "flatten", "=", "lambda", "t", ":", "[", "item", "for", "sublist", "in", "t", "for", "item", "in", "sublist", "]", "\n", "\n", "self", ".", "num_nodes", "=", "len", "(", "likelihoods", ")", "\n", "self", ".", "total_x_dim", "=", "sum", "(", "[", "lik", ".", "domain_size", "for", "lik", "in", "flatten", "(", "likelihoods", ")", "]", ")", "\n", "\n", "self", ".", "norm_categorical", "=", "norm_categorical", "\n", "self", ".", "node_dim_list", "=", "[", "]", "\n", "likelihood_node_params_size_list", "=", "[", "]", "# Size = num_nodes", "\n", "for", "lik_i", "in", "likelihoods", ":", "\n", "            ", "likelihood_node_i_params_size", "=", "0", "\n", "dim_node_i", "=", "[", "]", "\n", "for", "lik_ij", "in", "lik_i", ":", "\n", "                ", "likelihood_node_i_params_size", "+=", "lik_ij", ".", "params_size", "\n", "dim_node_i", ".", "append", "(", "lik_ij", ".", "domain_size", ")", "\n", "", "self", ".", "node_dim_list", ".", "append", "(", "sum", "(", "dim_node_i", ")", ")", "\n", "likelihood_node_params_size_list", ".", "append", "(", "likelihood_node_i_params_size", ")", "\n", "\n", "", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "_decoder_embeddings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "likelihood_node_params_size_i", "in", "likelihood_node_params_size_list", ":", "\n", "            ", "if", "likelihood_node_params_size_i", ">", "2", "*", "embedding_size", ":", "\n", "                ", "embed_i", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "embedding_size", ",", "2", "*", "embedding_size", ",", "bias", "=", "True", ")", ",", "\n", "get_activation", "(", "act_name", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "embedding_size", ",", "likelihood_node_params_size_i", ",", "bias", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "embed_i", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "likelihood_node_params_size_i", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "_decoder_embeddings", ".", "append", "(", "embed_i", ")", "\n", "\n", "", "self", ".", "logits_dim", "=", "sum", "(", "likelihood_node_params_size_list", ")", "\n", "\n", "self", ".", "heterogeneous_distr", "=", "HeterogeneousDistribution", "(", "likelihoods", "=", "flatten", "(", "likelihoods", ")", ",", "\n", "norm_by_dim", "=", "norm_by_dim", ",", "\n", "norm_categorical", "=", "norm_categorical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.ProbabilisticModelSCM.forward": [[157, 186], ["torch.cat.view", "torch.cat.view", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p.set_logits", "embed_i", "logits_list.append"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.probabilistic_model.HeterogeneousDistribution.set_logits"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            logits: [num_nodes, max_dim_node]\n            return_mean:\n\n        Returns:\n\n        \"\"\"", "\n", "d", "=", "logits", ".", "shape", "[", "1", "]", "\n", "logits_0", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_nodes", "*", "d", ")", "# Num graphs, max_dim_node*num_nodes", "\n", "\n", "logits_list", "=", "[", "]", "\n", "for", "i", ",", "embed_i", "in", "enumerate", "(", "self", ".", "_decoder_embeddings", ")", ":", "\n", "            ", "logits_0i", "=", "logits_0", "[", ":", ",", "(", "i", "*", "d", ")", ":", "(", "(", "i", "+", "1", ")", "*", "d", ")", "]", "\n", "logits_i", "=", "embed_i", "(", "logits_0i", ")", "\n", "logits_list", ".", "append", "(", "logits_i", ")", "\n", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits_list", ",", "dim", "=", "-", "1", ")", "\n", "assert", "logits", ".", "shape", "[", "1", "]", "==", "self", ".", "logits_dim", "\n", "\n", "p", "=", "self", ".", "heterogeneous_distr", "\n", "p", ".", "set_logits", "(", "logits", ")", "\n", "\n", "if", "return_mean", ":", "\n", "            ", "return", "p", ".", "mean", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.tools.blockPrint": [[6, 8], ["open"], "function", ["None"], ["def", "blockPrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.tools.enablePrint": [[11, 13], ["None"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils._errors.IsHeterogeneousError.__init__": [[7, 10], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "message", "=", "'The SCM is Heterogeneous'", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.maybe_num_nodes": [[8, 11], ["int", "index.max"], "function", ["None"], ["def", "maybe_num_nodes", "(", "index", ":", "torch", ".", "Tensor", ",", "\n", "num_nodes", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "int", ":", "\n", "    ", "return", "int", "(", "index", ".", "max", "(", ")", ")", "+", "1", "if", "num_nodes", "is", "None", "else", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.filter_adj": [[13, 15], ["None"], "function", ["None"], ["", "def", "filter_adj", "(", "row", ",", "col", ",", "edge_attr", ",", "mask", ")", ":", "\n", "    ", "return", "row", "[", "mask", "]", ",", "col", "[", "mask", "]", ",", "None", "if", "edge_attr", "is", "None", "else", "edge_attr", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj": [[17, 68], ["dropout.maybe_num_nodes", "torch.stack.new_full", "torch.bernoulli().to", "dropout.filter_adj", "ValueError", "dropout.filter_adj", "torch.stack", "torch_sparse.coalesce", "torch.stack", "row.size", "torch.bernoulli", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.maybe_num_nodes", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.filter_adj", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.filter_adj"], ["", "def", "dropout_adj", "(", "edge_index", ",", "edge_attr", "=", "None", ",", "p", "=", "0.5", ",", "force_undirected", "=", "False", ",", "\n", "num_nodes", "=", "None", ",", "training", "=", "True", ",", "keep_self_loops", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Randomly drops edges from the adjacency matrix\n    :obj:`(edge_index, edge_attr)` with probability :obj:`p` using samples from\n    a Bernoulli distribution.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n        p (float, optional): Dropout probability. (default: :obj:`0.5`)\n        force_undirected (bool, optional): If set to :obj:`True`, will either\n            drop or keep both edges of an undirected edge.\n            (default: :obj:`False`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n        training (bool, optional): If set to :obj:`False`, this operation is a\n            no-op. (default: :obj:`True`)\n    \"\"\"", "\n", "\n", "if", "p", "<", "0.", "or", "p", ">", "1.", ":", "\n", "        ", "raise", "ValueError", "(", "'Dropout probability has to be between 0 and 1, '", "\n", "'but got {}'", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "if", "not", "training", ":", "\n", "        ", "return", "edge_index", ",", "edge_attr", "\n", "\n", "", "N", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "\n", "if", "force_undirected", ":", "\n", "        ", "row", ",", "col", ",", "edge_attr", "=", "filter_adj", "(", "row", ",", "col", ",", "edge_attr", ",", "row", "<", "col", ")", "\n", "\n", "", "mask", "=", "edge_index", ".", "new_full", "(", "(", "row", ".", "size", "(", "0", ")", ",", ")", ",", "1", "-", "p", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "if", "keep_self_loops", ":", "\n", "        ", "mask", "[", "row", "==", "col", "]", "=", "True", "\n", "\n", "", "row", ",", "col", ",", "edge_attr", "=", "filter_adj", "(", "row", ",", "col", ",", "edge_attr", ",", "mask", ")", "\n", "\n", "if", "force_undirected", ":", "\n", "        ", "edge_index", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "cat", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "cat", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "            ", "edge_attr", "=", "torch", ".", "cat", "(", "[", "edge_attr", ",", "edge_attr", "]", ",", "dim", "=", "0", ")", "\n", "", "edge_index", ",", "edge_attr", "=", "coalesce", "(", "edge_index", ",", "edge_attr", ",", "N", ",", "N", ")", "\n", "", "else", ":", "\n", "        ", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "edge_index", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj_parents": [[70, 137], ["dropout.maybe_num_nodes", "torch.tensor", "torch.stack.new_full", "torch.bernoulli().to", "torch.stack.new_full().to", "dropout.filter_adj", "ValueError", "dropout.filter_adj", "list", "numpy.random.uniform", "torch.stack", "torch_sparse.coalesce", "torch.stack", "range", "torch.bernoulli", "torch.stack.new_full", "torch.cat", "torch.cat", "torch.cat", "row.size"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.maybe_num_nodes", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.filter_adj", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.filter_adj"], ["", "def", "dropout_adj_parents", "(", "edge_index", ",", "edge_attr", "=", "None", ",", "p", "=", "0.5", ",", "prob_keep_self", "=", "0.0", ",", "force_undirected", "=", "False", ",", "training", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Randomly drops edges from the adjacency matrix\n    :obj:`(edge_index, edge_attr)` with probability :obj:`p` using samples from\n    a Bernoulli distribution.\n\n    Args:\n        edge_index (LongTensor): The edge indices.\n        edge_attr (Tensor, optional): Edge weights or multi-dimensional\n            edge features. (default: :obj:`None`)\n        p (float, optional): Dropout probability. (default: :obj:`0.5`)\n        prob_keep_self (float, optional): probability of doing dropout out on the self loops. (default: :obj:`0.0`)\n        force_undirected (bool, optional): If set to :obj:`True`, will either\n            drop or keep both edges of an undirected edge.\n            (default: :obj:`False`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n        training (bool, optional): If set to :obj:`False`, this operation is a\n            no-op. (default: :obj:`True`)\n    \"\"\"", "\n", "\n", "if", "p", "<", "0.", "or", "p", ">", "1.", ":", "\n", "        ", "raise", "ValueError", "(", "'Dropout probability has to be between 0 and 1, '", "\n", "'but got {}'", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "if", "not", "training", ":", "\n", "        ", "return", "edge_index", ",", "edge_attr", "\n", "\n", "", "N", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", "=", "None", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "\n", "if", "force_undirected", ":", "\n", "        ", "row", ",", "col", ",", "edge_attr", "=", "filter_adj", "(", "row", ",", "col", ",", "edge_attr", ",", "row", "<", "col", ")", "\n", "\n", "", "nodes", "=", "torch", ".", "tensor", "(", "list", "(", "range", "(", "N", ")", ")", ")", "\n", "mask_nodes", "=", "edge_index", ".", "new_full", "(", "(", "N", ",", ")", ",", "1", "-", "p", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "mask_nodes", "=", "torch", ".", "bernoulli", "(", "mask_nodes", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "nodes_to_be_dropped", "=", "nodes", "[", "~", "mask_nodes", "]", "\n", "\n", "mask", "=", "edge_index", ".", "new_full", "(", "(", "row", ".", "size", "(", "0", ")", ",", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "prob_keep_self", ":", "# Dropout parents", "\n", "        ", "dst_nodes", "=", "edge_index", "[", "1", ",", ":", "]", "\n", "for", "node_id_to_drop", "in", "nodes_to_be_dropped", ":", "\n", "            ", "mask", "[", "dst_nodes", "==", "node_id_to_drop", "]", "=", "False", "\n", "\n", "", "mask", "[", "row", "==", "col", "]", "=", "True", "\n", "", "else", ":", "# Dropout self loops", "\n", "        ", "src_nodes", "=", "edge_index", "[", "0", ",", ":", "]", "\n", "dst_nodes", "=", "edge_index", "[", "1", ",", ":", "]", "\n", "for", "node_id_to_drop", "in", "nodes_to_be_dropped", ":", "\n", "            ", "cond", "=", "(", "dst_nodes", "==", "node_id_to_drop", ")", "&", "(", "src_nodes", "==", "node_id_to_drop", ")", "\n", "mask", "[", "cond", "]", "=", "False", "\n", "\n", "", "", "row", ",", "col", ",", "edge_attr", "=", "filter_adj", "(", "row", ",", "col", ",", "edge_attr", ",", "mask", ")", "\n", "\n", "if", "force_undirected", ":", "\n", "        ", "edge_index", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "cat", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "cat", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "if", "edge_attr", "is", "not", "None", ":", "\n", "            ", "edge_attr", "=", "torch", ".", "cat", "(", "[", "edge_attr", ",", "edge_attr", "]", ",", "dim", "=", "0", ")", "\n", "", "edge_index", ",", "edge_attr", "=", "coalesce", "(", "edge_index", ",", "edge_attr", ",", "N", ",", "N", ")", "\n", "", "else", ":", "\n", "        ", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "edge_index", ",", "edge_attr", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.StoreDictKeyPair.__call__": [[41, 61], ["values.split", "setattr", "kv.split", "isinstance", "ast.literal_eval", "ast.literal_eval"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "my_dict", "=", "{", "}", "\n", "for", "kv", "in", "values", ".", "split", "(", "\"+\"", ")", ":", "\n", "            ", "k", ",", "v", "=", "kv", ".", "split", "(", "\"=\"", ")", "\n", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "if", "k", "not", "in", "[", "'missing_perc'", ",", "'features_s'", ",", "'features_e'", ",", "'features_l'", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "v", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "try", ":", "\n", "                        ", "vi", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "                        ", "vi", "=", "2", "\n", "pass", "\n", "", "v", "=", "vi", "if", "vi", "<", "1.0", "else", "v", "\n", "\n", "", "", "my_dict", "[", "k", "]", "=", "v", "\n", "", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "my_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.list_intersection": [[9, 15], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["def", "list_intersection", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l1", ")", "&", "set", "(", "l2", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.list_union": [[17, 23], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["", "def", "list_union", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l1", ")", "|", "set", "(", "l2", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.list_substract": [[25, 31], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["", "def", "list_substract", "(", "l", ",", "l_substact", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l", ")", "-", "set", "(", "l_substact", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.to_str": [[33, 38], ["isinstance", "str", "str"], "function", ["None"], ["", "def", "to_str", "(", "elem", ")", ":", "\n", "    ", "if", "isinstance", "(", "elem", ",", "list", ")", ":", "\n", "        ", "return", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "elem", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "elem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir": [[63, 66], ["os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.newest": [[68, 83], ["os.listdir", "max", "os.path.exists", "len", "paths.append", "os.path.join", "paths.append", "os.path.join"], "function", ["None"], ["", "def", "newest", "(", "path", ",", "include_last", "=", "False", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "None", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "paths", "=", "[", "]", "\n", "for", "basename", "in", "files", ":", "\n", "        ", "if", "'last.ckpt'", "not", "in", "basename", ":", "\n", "            ", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "basename", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "include_last", ":", "\n", "                ", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "basename", ")", ")", "\n", "\n", "", "", "", "return", "max", "(", "paths", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.save_yaml": [[85, 91], ["print", "open", "yaml.dump"], "function", ["None"], ["", "def", "save_yaml", "(", "yaml_object", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "yaml_file", ":", "\n", "        ", "yaml", ".", "dump", "(", "yaml_object", ",", "yaml_file", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "", "print", "(", "f'Saving yaml: {file_path}'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.save_obj": [[93, 96], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_obj", "(", "filename_no_extension", ",", "obj", ",", "ext", "=", "'.pkl'", ")", ":", "\n", "    ", "with", "open", "(", "filename_no_extension", "+", "ext", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.load_obj": [[98, 101], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_obj", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.parse_args": [[103, 111], ["open", "yaml.safe_load", "print"], "function", ["None"], ["", "", "def", "parse_args", "(", "yaml_file", ")", ":", "\n", "    ", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "try", ":", "\n", "            ", "cfg", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "            ", "print", "(", "exc", ")", "\n", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.flatten_cfg": [[113, 127], ["cfg.items", "isinstance", "value.items", "isinstance", "value2.items"], "function", ["None"], ["", "def", "flatten_cfg", "(", "cfg", ")", ":", "\n", "    ", "cfg_flat", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "cfg_flat", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "for", "key2", ",", "value2", "in", "value", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "value2", ",", "dict", ")", ":", "\n", "                    ", "cfg_flat", "[", "f'{key}_{key2}'", "]", "=", "value2", "\n", "", "else", ":", "\n", "                    ", "for", "key3", ",", "value3", "in", "value2", ".", "items", "(", ")", ":", "\n", "                        ", "cfg_flat", "[", "f'{key}_{key2}_{key3}'", "]", "=", "value3", "\n", "\n", "", "", "", "", "", "return", "cfg_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.get_experiment_folder": [[129, 142], ["isinstance", "os.path.join", "[].items", "[].items", "[].items", "args_parser.to_str", "args_parser.to_str", "args_parser.to_str", "[].items", "args_parser.to_str"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.to_str", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.to_str", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.to_str", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.to_str"], ["", "def", "get_experiment_folder", "(", "cfg", ")", ":", "\n", "    ", "dataset_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ".", "items", "(", ")", "]", ")", "\n", "\n", "model_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'model'", "]", "[", "'params'", "]", ".", "items", "(", ")", "]", ")", "\n", "optim_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", ".", "items", "(", ")", "]", ")", "\n", "if", "isinstance", "(", "cfg", "[", "'scheduler'", "]", ",", "dict", ")", ":", "\n", "        ", "sched_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'scheduler'", "]", "[", "'params'", "]", ".", "items", "(", ")", "]", ")", "\n", "optim_params", "=", "f\"{optim_params}_{cfg['scheduler']['name']}_{sched_params}\"", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "f\"{cfg['dataset']['name']}_{dataset_params}\"", ",", "\n", "cfg", "[", "'model'", "]", "[", "'name'", "]", ",", "\n", "model_params", ",", "cfg", "[", "'optimizer'", "]", "[", "'name'", "]", ",", "\n", "optim_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.BaseDistribution.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.BaseDistribution.sample": [[12, 14], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.BaseDistribution.pdf": [[15, 17], ["None"], "methods", ["None"], ["", "def", "pdf", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.BaseDistribution.visualize": [[18, 24], ["matplotlib.pyplot.hist", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.title", "matplotlib.pyplot.grid", "matplotlib.pyplot.show", "distributions.BaseDistribution.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "        ", "plt", ".", "hist", "(", "self", ".", "sample", "(", "500", ")", ",", "50", ",", "facecolor", "=", "'green'", ",", "alpha", "=", "0.75", ")", "\n", "plt", ".", "ylabel", "(", "'Count'", ")", "\n", "plt", ".", "title", "(", "fr'Histogram of {self.name}'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Normal.__init__": [[27, 33], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "var", ")", ":", "\n", "        ", "assert", "isinstance", "(", "mean", ",", "int", ")", "or", "isinstance", "(", "mean", ",", "float", ")", ",", "'Expected `mean` to be an int or float.'", "\n", "assert", "isinstance", "(", "var", ",", "int", ")", "or", "isinstance", "(", "var", ",", "float", ")", ",", "'Expected `var` to be an int or float.'", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "var", "=", "var", "\n", "self", ".", "name", "=", "f'Normal\\t mean={self.mean}, var={self.var}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Normal.sample": [[34, 37], ["numpy.random.normal", "numpy.sqrt", "range"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "[", "np", ".", "random", ".", "normal", "(", "self", ".", "mean", ",", "np", ".", "sqrt", "(", "self", ".", "var", ")", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Normal.pdf": [[38, 40], ["scipy.stats.norm().pdf", "scipy.stats.norm"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Laplace.pdf"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "norm", "(", "self", ".", "mean", ",", "self", ".", "var", ")", ".", "pdf", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.MixtureOfGaussians.__init__": [[44, 51], ["sum", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "probs", ",", "means", ",", "vars", ")", ":", "\n", "        ", "assert", "sum", "(", "probs", ")", "==", "1", ",", "'Mixture probabilities must sum to 1.'", "\n", "assert", "len", "(", "probs", ")", "==", "len", "(", "means", ")", "==", "len", "(", "vars", ")", ",", "'Length mismatch.'", "\n", "self", ".", "probs", "=", "probs", "\n", "self", ".", "means", "=", "means", "\n", "self", ".", "vars", "=", "vars", "\n", "self", ".", "name", "=", "f'MoG\\t probs={self.probs}, means={self.means}, vars={self.vars}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.MixtureOfGaussians.sample": [[52, 58], ["numpy.random.normal", "numpy.sqrt", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "[", "\n", "np", ".", "random", ".", "normal", "(", "self", ".", "means", "[", "mixture_idx", "]", ",", "np", ".", "sqrt", "(", "self", ".", "vars", "[", "mixture_idx", "]", ")", ")", "\n", "for", "mixture_idx", "in", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "probs", ")", ",", "size", "=", "size", ",", "p", "=", "self", ".", "probs", ")", "\n", "]", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.MixtureOfGaussians.pdf": [[59, 63], ["numpy.sum", "scipy.stats.norm().pdf", "zip", "scipy.stats.norm"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Laplace.pdf"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "[", "\n", "prob", "*", "norm", "(", "mean", ",", "var", ")", ".", "pdf", "(", "value", ")", "\n", "for", "(", "prob", ",", "mean", ",", "var", ")", "in", "zip", "(", "self", ".", "probs", ",", "self", ".", "means", ",", "self", ".", "vars", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Bernoulli.__init__": [[68, 74], ["isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "assert", "isinstance", "(", "prob", ",", "int", ")", "or", "isinstance", "(", "prob", ",", "float", ")", ",", "'Expected `prob` to be an int or float.'", "\n", "assert", "prob", ">=", "0", "and", "prob", "<=", "1", "\n", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "name", "=", "f'Bernoulli\\t prob={self.prob}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Bernoulli.sample": [[75, 78], ["scipy.stats.bernoulli.rvs", "list"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "bernoulli", ".", "rvs", "(", "self", ".", "prob", ",", "size", "=", "size", ")", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "list", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Bernoulli.pdf": [[79, 81], ["Exception"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'not supported yet; code should not come here.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Poisson.__init__": [[85, 90], ["isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p_lambda", ")", ":", "\n", "        ", "assert", "isinstance", "(", "p_lambda", ",", "int", ")", "or", "isinstance", "(", "p_lambda", ",", "float", ")", ",", "'Expected `p_lambda` to be an int or float.'", "\n", "assert", "p_lambda", ">", "0", "\n", "self", ".", "p_lambda", "=", "p_lambda", "\n", "self", ".", "name", "=", "f'Poisson\\t prob={self.p_lambda}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Poisson.sample": [[91, 94], ["numpy.random.poisson", "list"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "random", ".", "poisson", "(", "self", ".", "p_lambda", ",", "size", ")", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "list", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Poisson.pdf": [[95, 97], ["Exception"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'not supported yet; code should not come here.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Gamma.__init__": [[101, 109], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "scale", ")", ":", "\n", "        ", "assert", "isinstance", "(", "shape", ",", "int", ")", "or", "isinstance", "(", "shape", ",", "float", ")", ",", "'Expected `shape` to be an int or float.'", "\n", "assert", "isinstance", "(", "scale", ",", "int", ")", "or", "isinstance", "(", "scale", ",", "float", ")", ",", "'Expected `scale` to be an int or float.'", "\n", "assert", "shape", ">", "0", "\n", "assert", "scale", ">", "0", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "name", "=", "f'Gamma\\t shape={self.shape}, scale={self.scale}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Gamma.sample": [[110, 113], ["numpy.random.gamma", "list"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "random", ".", "gamma", "(", "self", ".", "shape", ",", "self", ".", "scale", ",", "size", ")", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "list", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Gamma.pdf": [[114, 116], ["Exception"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'not supported yet; code should not come here.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Categorical.__init__": [[120, 127], ["isinstance", "len", "numpy.sum", "numpy.sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "probs", ",", "list", ")", ",", "'Expected `probs` to be a list.'", "\n", "assert", "np", ".", "sum", "(", "probs", ")", "==", "1", "\n", "assert", "np", ".", "sum", "(", "probs", "==", "0", ")", "==", "0", "\n", "self", ".", "probs", "=", "probs", "\n", "self", ".", "num_categories", "=", "len", "(", "probs", ")", "\n", "self", ".", "name", "=", "f'Categorical\\t probs={self.probs}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Categorical.sample": [[128, 131], ["numpy.random.choice", "list"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_categories", ",", "size", "=", "size", ",", "p", "=", "self", ".", "probs", ")", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "list", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Categorical.pdf": [[132, 134], ["Exception"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'not supported yet; code should not come here.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Laplace.__init__": [[138, 146], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loc", ",", "scale", ")", ":", "\n", "        ", "assert", "isinstance", "(", "loc", ",", "int", ")", "or", "isinstance", "(", "loc", ",", "float", ")", ",", "'Expected `shape` to be an int or float.'", "\n", "assert", "isinstance", "(", "scale", ",", "int", ")", "or", "isinstance", "(", "scale", ",", "float", ")", ",", "'Expected `scale` to be an int or float.'", "\n", "assert", "loc", ">=", "0", "\n", "assert", "scale", ">", "0", "\n", "self", ".", "loc", "=", "loc", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "name", "=", "f'Laplace\\t loc={self.loc}, scale={self.scale}'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Laplace.sample": [[147, 150], ["numpy.random.laplace", "list"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", "=", "1", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "random", ".", "laplace", "(", "self", ".", "loc", ",", "self", ".", "scale", ",", "size", ")", "\n", "return", "tmp", "[", "0", "]", "if", "size", "==", "1", "else", "list", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.distributions.Laplace.pdf": [[151, 153], ["Exception"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'not supported yet; code should not come here.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.__init__": [[16, 119], ["os.path.join", "utils.args_parser.mkdir", "results.create_df_results", "df_all.rename.rename.rename", "df_all[].apply", "df_all[].apply", "df_all[].apply", "df_all[].apply", "df_all.rename.rename.rename", "print", "print", "print", "print", "list", "df_all[].replace", "metrics_dict.items", "root_dir.replace", "results.get_elements", "results.get_elements", "results.get_elements", "results.get_elements", "results.get_elements", "results.get_elements", "results.get_elements", "print", "results.print_cols", "df_all[].mean", "c.replace", "len", "df_all[].unique", "df_all[].unique", "df_all[].unique", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.create_df_results", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.print_cols", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "objective_mmd", "=", "False", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "root_dir", ".", "replace", "(", "os", ".", "sep", ",", "'_'", ")", ")", "\n", "mkdir", "(", "self", ".", "save_dir", ")", "\n", "\n", "df_all", "=", "create_df_results", "(", "root_dir", ",", "add_time", "=", "True", ")", "\n", "df_all", "=", "df_all", ".", "rename", "(", "columns", "=", "{", "c", ":", "c", ".", "replace", "(", "os", ".", "sep", ",", "'_'", ")", "for", "c", "in", "df_all", ".", "columns", "}", ")", "\n", "\n", "df_all", "[", "'model_params_num_hidden_dec'", "]", "=", "df_all", "[", "'model_params_h_dim_list_dec'", "]", ".", "apply", "(", "get_number_hidden_layers", ")", "\n", "df_all", "[", "'model_params_num_hidden_enc'", "]", "=", "df_all", "[", "'model_params_h_dim_list_enc'", "]", ".", "apply", "(", "get_number_hidden_layers", ")", "\n", "\n", "df_all", "[", "'model_params_h_dim_list_enc'", "]", "=", "df_all", "[", "'model_params_h_dim_list_enc'", "]", ".", "apply", "(", "process_list_params", ")", "\n", "df_all", "[", "'model_params_h_dim_list_dec'", "]", "=", "df_all", "[", "'model_params_h_dim_list_dec'", "]", ".", "apply", "(", "process_list_params", ")", "\n", "df_all", "[", "'model_params_h_dim_list'", "]", "=", "'dec_'", "+", "df_all", "[", "'model_params_h_dim_list_dec'", "]", "+", "'_enc_'", "+", "df_all", "[", "\n", "'model_params_h_dim_list_enc'", "]", "\n", "\n", "df_all", ".", "rename", "(", "columns", "=", "{", "\"model_name\"", ":", "\"Model\"", ",", "\n", "\"dataset_name\"", ":", "\"Dataset\"", ",", "\n", "\"dataset_params_equations_type\"", ":", "\"SEM\"", "}", ",", "inplace", "=", "True", ")", "\n", "\n", "print", "(", "f\"Number of experiments: {len(df_all)}\"", ")", "\n", "print", "(", "f\"Datasets: {df_all['Dataset'].unique()}\"", ")", "\n", "print", "(", "f\"Models: {df_all['Model'].unique()}\"", ")", "\n", "print", "(", "f\"Architectures: {df_all['model_params_architecture'].unique()}\"", ")", "\n", "\n", "columns_list", "=", "list", "(", "df_all", ".", "columns", ")", "\n", "self", ".", "columns_list", "=", "columns_list", "\n", "\n", "df_all", "[", "'Model'", "]", "=", "df_all", "[", "'Model'", "]", ".", "replace", "(", "{", "'mcvae'", ":", "'MultiCVAE'", ",", "\n", "'vcause_piwae'", ":", "'VACA'", ",", "\n", "'vcause'", ":", "'VACA'", ",", "\n", "'carefl'", ":", "'CAREFL'", "}", "\n", ")", "\n", "\n", "metrics_dict", "=", "{", "'IWAE 100'", ":", "[", "'test_iwae_100'", "]", ",", "\n", "'MMD Obs.'", ":", "[", "'test_observation_mmd1'", "]", ",", "\n", "'MMD Inter.'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'mmd'", ",", "'inter'", ",", "'children'", "]", ",", "[", "'mmd1_lb'", "]", ")", ",", "\n", "'MeanE.'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'mse_mean'", ",", "'_inter_'", ",", "'children'", "]", ")", ",", "\n", "'StdE.'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'mse_std'", ",", "'inter'", ",", "'children'", "]", ")", ",", "\n", "'MSE CF'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'_cf_'", ",", "'x_mse'", ",", "'children'", ",", "'noise'", "]", ",", "\n", "[", "'std'", ",", "'x1'", ",", "'age'", "]", ")", ",", "\n", "'SSE CF'", ":", "get_elements", "(", "columns_list", ",", "\n", "[", "'test'", ",", "'_cf_'", ",", "'x_mse_std'", ",", "'children'", ",", "'noise'", ",", "'x1'", ",", "'age'", "]", ")", ",", "\n", "'MRE CF N'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'_cf_'", ",", "'x_mse'", ",", "'children'", "]", ",", "\n", "[", "'std'", ",", "'noise'", ",", "'x1'", ",", "'age'", "]", ")", ",", "\n", "'SDRE CF N'", ":", "get_elements", "(", "columns_list", ",", "[", "'test'", ",", "'_cf_'", ",", "'x_mse_std'", ",", "'children'", "]", ",", "\n", "[", "'noise'", ",", "'x1'", ",", "'age'", "]", ")", "\n", "}", "\n", "self", ".", "metrics_dict", "=", "metrics_dict", "\n", "\n", "for", "key", ",", "values", "in", "metrics_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "'test_iwae_100'", ",", "'test_observation_mmd1'", "]", ":", "\n", "                ", "assert", "len", "(", "values", ")", "==", "1", "\n", "df_all", "[", "key", "]", "=", "df_all", "[", "values", "[", "0", "]", "]", "\n", "continue", "\n", "", "print", "(", "key", ")", "\n", "print_cols", "(", "values", ")", "\n", "df_all", "[", "key", "]", "=", "df_all", "[", "values", "]", ".", "mean", "(", "1", ")", "\n", "\n", "", "self", ".", "df", "=", "df_all", "\n", "\n", "self", ".", "df_best", "=", "None", "\n", "\n", "# Hyperparameters cross-validated", "\n", "\n", "self", ".", "cv_dict", "=", "{", "'CAREFL'", ":", "[", "'model_params_n_layers'", ",", "\n", "'model_params_n_hidden'", "]", ",", "\n", "'VACA'", ":", "[", "'dataset_params_likelihood_names'", ",", "\n", "'model_params_h_dim_list'", ",", "\n", "'model_params_dropout_adj_pa_rate'", ",", "\n", "'model_params_dropout_adj_pa_prob_keep_self'", ",", "\n", "'model_params_residual'", "\n", "]", ",", "\n", "'MultiCVAE'", ":", "[", "'model_params_z_dim'", ",", "\n", "'dataset_params_lambda_'", ",", "\n", "'model_params_h_dim_list'", ",", "\n", "'model_params_drop_rate'", ",", "\n", "]", "}", "\n", "\n", "# Objective metrics for each model", "\n", "if", "not", "objective_mmd", ":", "\n", "            ", "self", ".", "objective_metric", "=", "{", "'CAREFL'", ":", "'valid_log_px'", ",", "\n", "'VACA'", ":", "'valid_iwae_100'", ",", "\n", "'MultiCVAE'", ":", "'valid_iwae_100'", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "objective_metric", "=", "{", "'CAREFL'", ":", "'MMD Obs.'", ",", "\n", "'VACA'", ":", "'MMD Obs.'", ",", "\n", "'MultiCVAE'", ":", "'MMD Obs.'", "}", "\n", "\n", "# Minimun number of hidden layers in the decoder (model_params_num_hidden_dec) per dataset", "\n", "\n", "", "self", ".", "min_h_layers", "=", "{", "Cte", ".", "TRIANGLE", ":", "1", ",", "\n", "Cte", ".", "CHAIN", ":", "1", ",", "\n", "Cte", ".", "LOAN", ":", "2", ",", "\n", "Cte", ".", "COLLIDER", ":", "0", ",", "\n", "Cte", ".", "MGRAPH", ":", "0", ",", "\n", "Cte", ".", "ADULT", ":", "2", "\n", "}", "\n", "\n", "self", ".", "dataset_name_order", "=", "[", "'collider'", ",", "'mgraph'", ",", "'triangle'", ",", "'chain'", ",", "'loan'", ",", "'adult'", "]", "\n", "self", ".", "sem_name_order", "=", "[", "'linear'", ",", "'non-linear'", ",", "'non-additive'", "]", "\n", "self", ".", "model_name_order", "=", "[", "'MultiCVAE'", ",", "'CAREFL'", ",", "'VACA'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.filter_valid_configurations": [[120, 126], ["results.ResultsManager.min_h_layers.items"], "methods", ["None"], ["", "def", "filter_valid_configurations", "(", "self", ",", "df", ")", ":", "\n", "        ", "cond", "=", "df", "[", "'Model'", "]", "!=", "'VACA'", "\n", "for", "dataset", ",", "min_h_layers", "in", "self", ".", "min_h_layers", ".", "items", "(", ")", ":", "\n", "            ", "cond_i", "=", "(", "df", ".", "model_params_num_hidden_dec", ">=", "min_h_layers", ")", "&", "(", "df", ".", "Dataset", "==", "dataset", ")", "\n", "cond", "=", "cond", "|", "cond_i", "\n", "", "return", "df", "[", "cond", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.load_df_best": [[127, 200], ["print", "list.extend", "list.extend", "list", "list.extend", "list.extend", "list", "results.ResultsManager.filter_valid_configurations", "os.path.join", "results.ResultsManager.groupby", "pandas.concat", "print", "df_best[].unique", "results.get_elements", "results.get_elements", "set", "list", "set", "results.ResultsManager.df.copy", "df_dataset.groupby", "print", "list", "results.ResultsManager.metrics_dict.keys", "print", "df_m.groupby", "results.ResultsManager.objective_metric.values", "print", "df_md.copy", "zip", "print", "print", "results.get_unique_parameteres", "print", "best_models_list.append", "open", "f.write", "df_md.groupby().agg", "df_md_g.sort_values().iterrows", "df_md_g[].idxmax", "print", "open", "f.write", "f.write", "print", "open", "f.write", "len", "df_md.groupby", "df_md_g.sort_values", "len", "df_best_md[].idxmax", "len", "df_best_md[].idxmax"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.filter_valid_configurations", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_unique_parameteres"], ["", "def", "load_df_best", "(", "self", ",", "safe", "=", "0", ",", "dim_z", "=", "4", ")", ":", "\n", "        ", "'''\n        we need dimension z to remove those experiments that we use for the experiments on cross validating dim(z)\n        '''", "\n", "print", "(", "'\\n\\nComputing best configurations for each model and SEM:'", ")", "\n", "cols", "=", "[", "'Model'", ",", "'Dataset'", ",", "'SEM'", ",", "'json_filename'", ",", "'num_parameters'", "]", "\n", "cols", ".", "extend", "(", "get_elements", "(", "self", ".", "columns_list", ",", "[", "'dataset_params'", "]", ")", ")", "\n", "cols", ".", "extend", "(", "get_elements", "(", "self", ".", "columns_list", ",", "[", "'model_params'", "]", ")", ")", "\n", "metrics_cols", "=", "list", "(", "set", "(", "list", "(", "self", ".", "objective_metric", ".", "values", "(", ")", ")", ")", ")", "\n", "cols", ".", "extend", "(", "metrics_cols", ")", "\n", "cols", ".", "extend", "(", "list", "(", "self", ".", "metrics_dict", ".", "keys", "(", ")", ")", ")", "\n", "cols", "=", "list", "(", "set", "(", "cols", ")", ")", "\n", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "[", "cols", "]", "\n", "\n", "df", "=", "self", ".", "filter_valid_configurations", "(", "df", ")", "\n", "\n", "best_models_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'best_models.txt'", ")", "\n", "\n", "best_models_list", "=", "[", "]", "\n", "for", "dataset_name", ",", "df_dataset", "in", "df", ".", "groupby", "(", "'Dataset'", ")", ":", "\n", "            ", "for", "m_name", ",", "df_m", "in", "df_dataset", ".", "groupby", "(", "'Model'", ")", ":", "\n", "                ", "print", "(", "'--------'", ")", "\n", "if", "m_name", "==", "'VACA'", ":", "\n", "                    ", "df_m", "=", "df_m", "[", "df_m", ".", "model_params_z_dim", "==", "dim_z", "]", "\n", "", "for", "d_name", ",", "df_md", "in", "df_m", ".", "groupby", "(", "'SEM'", ")", ":", "\n", "                    ", "print", "(", "f'{dataset_name} : {m_name} : {d_name}'", ")", "\n", "\n", "with", "open", "(", "best_models_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "f'{dataset_name} : {m_name} : {d_name}\\n'", ")", "\n", "", "df_md_g", "=", "df_md", ".", "groupby", "(", "self", ".", "cv_dict", "[", "m_name", "]", ",", "dropna", "=", "False", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'count'", "]", ")", "[", "\n", "self", ".", "objective_metric", "[", "m_name", "]", "]", "\n", "\n", "if", "safe", ">", "0", ":", "\n", "                        ", "for", "best_config", ",", "df_best_config", "in", "df_md_g", ".", "sort_values", "(", "\n", "by", "=", "'mean'", ")", ".", "iterrows", "(", ")", ":", "\n", "                            ", "print", "(", "f\"len: {df_best_config['count']}\"", ")", "\n", "if", "df_best_config", "[", "'count'", "]", ">=", "(", "safe", "-", "1", ")", ":", "\n", "                                ", "break", "\n", "", "", "", "else", ":", "\n", "                        ", "best_config", "=", "df_md_g", "[", "'mean'", "]", ".", "idxmax", "(", ")", "\n", "\n", "", "df_best_md", "=", "df_md", ".", "copy", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "cv_dict", "[", "m_name", "]", ",", "best_config", ")", ":", "\n", "                        ", "with", "open", "(", "best_models_file", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "f'\\t{k}: {v}\\n'", ")", "\n", "", "print", "(", "f'\\t{k}: {v}'", ")", "\n", "df_best_md", "=", "df_best_md", "[", "df_best_md", "[", "k", "]", "==", "v", "]", "\n", "\n", "", "print", "(", "f\"Num of entries: {len(df_best_md)}\"", ")", "\n", "with", "open", "(", "best_models_file", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "best", "=", "df_best_md", ".", "loc", "[", "df_best_md", "[", "self", ".", "objective_metric", "[", "m_name", "]", "]", ".", "idxmax", "(", ")", "]", "\n", "f", ".", "write", "(", "f\"\\t{best['json_filename']}\\n\"", ")", "\n", "f", ".", "write", "(", "f\"\\tnum_parameters: {best['num_parameters']}\\n\"", ")", "\n", "", "print", "(", "df_best_md", ".", "loc", "[", "df_best_md", "[", "self", ".", "objective_metric", "[", "m_name", "]", "]", ".", "idxmax", "(", ")", "]", "[", "'json_filename'", "]", ")", "\n", "get_unique_parameteres", "(", "self", ".", "columns_list", ",", "\n", "df_i", "=", "df_best_md", ",", "\n", "type_list", "=", "[", "'model'", "]", ")", "\n", "\n", "my_mean", ",", "my_std", ",", "_", "=", "df_md_g", ".", "loc", "[", "best_config", "]", "\n", "print", "(", "f\"{self.objective_metric[m_name]}: {my_mean:.3f} +- {my_std:.3f}\\n\"", ")", "\n", "if", "safe", ">", "0", ":", "assert", "len", "(", "df_best_md", ")", ">=", "(", "\n", "safe", "-", "1", ")", ",", "f'Number of elements different from number of seeds {len(df_best_md)}'", "\n", "best_models_list", ".", "append", "(", "df_best_md", ")", "\n", "\n", "", "", "", "df_best", "=", "pd", ".", "concat", "(", "best_models_list", ")", "\n", "\n", "print", "(", "'\\n\\nModels we are comparing:'", ")", "\n", "\n", "for", "m", "in", "df_best", "[", "'Model'", "]", ".", "unique", "(", ")", ":", "\n", "            ", "print", "(", "f\"\\t{m}\"", ")", "\n", "\n", "", "self", ".", "df_best", "=", "df_best", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.generate_latex_table_comparison": [[201, 264], ["list", "enumerate", "results.ResultsManager.df_best.copy", "df_latex[].replace", "df_latex[].replace", "df_latex[].replace", "print", "df_mean.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename().rename().applymap", "df_std.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename().rename().applymap", "os.path.join", "isinstance", "results.ResultsManager.metrics_dict.keys", "list.append", "metrics_to_plot.append", "print", "open", "tf.write", "results.ResultsManager.groupby().mean", "df_mean.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename().rename", "results.ResultsManager.groupby().std", "df_std.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename().rename", "df_comparison.iloc[].to_latex", "len", "results.ResultsManager.groupby", "df_mean.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename", "results.ResultsManager.groupby", "df_std.rename().rename().rename().applymap.rename().rename().rename().applymap.rename().rename", "df_mean.rename().rename().rename().applymap.rename().rename().rename().applymap.rename", "model_dict.items", "df_std.rename().rename().rename().applymap.rename().rename().rename().applymap.rename", "model_dict.items", "sem_dict.items", "sem_dict.items", "dataset_dict.items", "dataset_dict.items"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "generate_latex_table_comparison", "(", "self", ",", "metrics_to_plot", "=", "None", ",", "\n", "include_num_params", "=", "True", ")", ":", "\n", "# Table 2 in the paper", "\n", "        ", "if", "not", "isinstance", "(", "metrics_to_plot", ",", "list", ")", ":", "\n", "            ", "metrics_to_plot", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "7", ",", "8", "]", "\n", "", "cols_metrics", "=", "list", "(", "self", ".", "metrics_dict", ".", "keys", "(", ")", ")", "\n", "if", "include_num_params", ":", "\n", "            ", "cols_metrics", ".", "append", "(", "'Num. parameters'", ")", "\n", "metrics_to_plot", ".", "append", "(", "9", ")", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "cols_metrics", ")", ":", "\n", "            ", "add", "=", "'True'", "if", "i", "in", "metrics_to_plot", "else", "'False'", "\n", "print", "(", "f\"({i}) [{add}] {c}\"", ")", "\n", "\n", "", "df_latex", "=", "self", ".", "df_best", ".", "copy", "(", ")", "\n", "\n", "group_by_columns", "=", "[", "'Dataset'", ",", "'SEM'", ",", "'Model'", "]", "\n", "\n", "dataset_dict", "=", "{", "'collider'", ":", "0", ",", "\n", "'triangle'", ":", "1", ",", "\n", "'loan'", ":", "2", ",", "\n", "'m_graph'", ":", "3", ",", "\n", "'chain'", ":", "4", ",", "\n", "Cte", ".", "ADULT", ":", "5", "}", "\n", "\n", "sem_dict", "=", "{", "'linear'", ":", "0", ",", "\n", "'non-linear'", ":", "1", ",", "\n", "'non-additive'", ":", "2", "\n", "}", "\n", "\n", "model_dict", "=", "{", "'MultiCVAE'", ":", "0", ",", "\n", "'CAREFL'", ":", "1", ",", "\n", "'VACA'", ":", "2", "\n", "}", "\n", "df_latex", "[", "'Dataset'", "]", "=", "df_latex", "[", "'Dataset'", "]", ".", "replace", "(", "dataset_dict", ")", "\n", "df_latex", "[", "'Model'", "]", "=", "df_latex", "[", "'Model'", "]", ".", "replace", "(", "model_dict", ")", "\n", "\n", "df_latex", "[", "'SEM'", "]", "=", "df_latex", "[", "'SEM'", "]", ".", "replace", "(", "sem_dict", ")", "\n", "if", "include_num_params", ":", "\n", "            ", "df_latex", "[", "'Num. parameters'", "]", "=", "df_latex", "[", "'num_parameters'", "]", "\n", "\n", "", "print", "(", "f\"Number of elements to create the table: {len(df_latex)}\"", ")", "\n", "\n", "df_mean", "=", "df_latex", ".", "groupby", "(", "group_by_columns", ")", ".", "mean", "(", ")", "[", "cols_metrics", "]", "*", "100", "\n", "if", "include_num_params", ":", "\n", "            ", "df_mean", "[", "'Num. parameters'", "]", "=", "df_mean", "[", "'Num. parameters'", "]", "/", "100", "\n", "", "df_mean", "=", "df_mean", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "dataset_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "0", ")", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "sem_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "1", ")", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "2", ")", ".", "applymap", "(", "lambda", "x", ":", "'{0:.2f}'", ".", "format", "(", "x", ")", ")", "\n", "df_std", "=", "df_latex", ".", "groupby", "(", "group_by_columns", ")", ".", "std", "(", ")", "[", "cols_metrics", "]", "*", "100", "\n", "if", "include_num_params", ":", "\n", "            ", "df_std", "[", "'Num. parameters'", "]", "=", "df_std", "[", "'Num. parameters'", "]", "/", "100", "\n", "", "df_std", "=", "df_std", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "dataset_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "0", ")", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "sem_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "1", ")", ".", "rename", "(", "index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", "}", ",", "\n", "level", "=", "2", ")", ".", "applymap", "(", "lambda", "x", ":", "'{0:.2f}'", ".", "format", "(", "x", ")", ")", "\n", "\n", "df_comparison", "=", "df_mean", "+", "'$\\pm$'", "+", "df_std", "\n", "table_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'my_table_all.tex'", ")", "\n", "with", "open", "(", "table_file", ",", "'w'", ")", "as", "tf", ":", "\n", "            ", "tf", ".", "write", "(", "df_comparison", ".", "iloc", "[", ":", ",", "metrics_to_plot", "]", ".", "to_latex", "(", "escape", "=", "False", ")", ")", "\n", "\n", "", "return", "df_comparison", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.generate_latex_table_propositions": [[265, 267], ["None"], "methods", ["None"], ["", "def", "generate_latex_table_propositions", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.budget": [[268, 287], ["print", "results.ResultsManager.df.copy", "isinstance", "print", "results.ResultsManager.filter_valid_configurations", "filter_and.items", "df[].isin", "results.ResultsManager.groupby().count", "results.ResultsManager.groupby"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.filter_valid_configurations"], ["", "def", "budget", "(", "self", ",", "only_valid", "=", "True", ",", "filter_and", "=", "None", ")", ":", "\n", "        ", "print", "(", "'\\nComputing budget'", ")", "\n", "\n", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "\n", "if", "only_valid", ":", "\n", "            ", "df", "=", "self", ".", "filter_valid_configurations", "(", "df", ")", "\n", "\n", "", "if", "isinstance", "(", "filter_and", ",", "dict", ")", ":", "\n", "            ", "cond", "=", "df", "[", "'Model'", "]", "==", "'VACA'", "\n", "for", "col", ",", "values", "in", "filter_and", ".", "items", "(", ")", ":", "\n", "                ", "cond_i", "=", "df", "[", "col", "]", ".", "isin", "(", "values", ")", "\n", "cond", "=", "cond", "&", "cond_i", "\n", "\n", "", "cond", "=", "cond", "|", "(", "df", "[", "'Model'", "]", "!=", "'VACA'", ")", "\n", "df", "=", "df", "[", "cond", "]", "\n", "\n", "", "groupby", "=", "[", "'Dataset'", ",", "'SEM'", ",", "'Model'", "]", "\n", "\n", "print", "(", "df", ".", "groupby", "(", "groupby", ")", ".", "count", "(", ")", "[", "'json_filename'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.time_complexity": [[288, 439], ["results.ResultsManager.df.copy", "isinstance", "results.ResultsManager.order_by_model", "results.ResultsManager.rename", "print", "print", "results.ResultsManager.groupby", "print", "matplotlib.close", "seaborn.boxplot", "seaborn.scatterplot.set", "matplotlib.show", "seaborn.scatterplot.get_figure().savefig", "seaborn.catplot", "seaborn.catplot.set_xlabels", "matplotlib.show", "seaborn.catplot.savefig", "print", "results.ResultsManager.rename", "results.ResultsManager.order_by_dataset", "seaborn.catplot", "matplotlib.legend", "seaborn.catplot.set_xlabels", "matplotlib.show", "seaborn.catplot.savefig", "print", "print", "scipy.stats.ttest_ind", "print", "scipy.stats.ttest_ind", "print", "scipy.stats.ttest_ind", "print", "scipy.stats.f_oneway", "print", "print", "results.ResultsManager.groupby", "results.ResultsManager.groupby", "print", "seaborn.scatterplot", "matplotlib.legend", "matplotlib.show", "seaborn.scatterplot.get_figure().savefig", "print", "results.ResultsManager.rename", "print", "os.path.join", "os.path.join", "df_time[].unique", "os.path.join", "[].sample", "[].sample", "[].sample", "list", "list", "list", "seaborn.set", "seaborn.set_style", "print", "scipy.stats.f_oneway", "print", "scipy.stats.ttest_ind", "print", "results.ResultsManager.order_by_model", "seaborn.catplot", "seaborn.catplot.set_xlabels", "seaborn.catplot.fig.suptitle", "matplotlib.show", "seaborn.catplot.savefig", "print", "results.ResultsManager.order_by_model", "seaborn.catplot", "seaborn.catplot.set_xlabels", "seaborn.catplot.fig.suptitle", "matplotlib.show", "seaborn.catplot.savefig", "os.path.join", "results.ResultsManager.groupby().agg", "seaborn.scatterplot.get_figure", "results.ResultsManager.groupby().agg", "list", "list", "list", "list", "list", "os.path.join", "os.path.join", "seaborn.scatterplot.get_figure", "results.ResultsManager.groupby().agg", "[].sample.values.flatten", "[].sample.values.flatten", "[].sample.values.flatten", "[].sample.values.flatten", "[].sample.values.flatten", "results.ResultsManager.groupby", "len", "results.ResultsManager.groupby", "results.ResultsManager.groupby"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_model", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_dataset", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_model", "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_model"], ["", "def", "time_complexity", "(", "self", ",", "n", "=", "None", ",", "\n", "replace", "=", "False", ",", "\n", "time_list", "=", "None", ",", "\n", "max_num_parameters", "=", "None", ",", "\n", "ylim", "=", "None", ",", "\n", "font_scale", "=", "1", ")", ":", "\n", "        ", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "\n", "if", "time_list", "is", "None", ":", "\n", "            ", "train_time_str", "=", "'Total training time (min)'", "\n", "train_col", "=", "'train_time_total'", "\n", "", "else", ":", "\n", "            ", "train_time_str", "=", "time_list", "[", "0", "]", "\n", "train_col", "=", "time_list", "[", "1", "]", "\n", "", "num_params_str", "=", "'Num. parameters'", "\n", "groupby_cols", "=", "[", "'Model'", ",", "'Dataset'", "]", "\n", "metrics_cols", "=", "[", "train_time_str", ",", "num_params_str", ",", "'model_params_num_hidden_dec'", "]", "\n", "cols_time", "=", "[", "*", "groupby_cols", ",", "*", "metrics_cols", ",", "'train_epochs'", "]", "\n", "# cond_1 = (df['model_params_z_dim'] == 4) & (df['Model'] == 'VACA')", "\n", "# cond_2 = df['Model'] == 'MultiCVAE'", "\n", "# cond_3 = df['Model'] == 'CAREFL'", "\n", "# cond = cond_1 | cond_2 | cond_3", "\n", "# df = df[cond]", "\n", "\n", "cond", "=", "(", "df", ".", "model_params_num_hidden_dec", ">", "0", ")", "|", "(", "df", ".", "model_params_num_hidden_dec", "==", "-", "1", ")", "\n", "df_time", "=", "df", "[", "cond", "]", "\n", "if", "isinstance", "(", "max_num_parameters", ",", "int", ")", ":", "\n", "            ", "df_time", "=", "df_time", "[", "df_time", ".", "num_parameters", "<", "max_num_parameters", "]", "\n", "\n", "", "df_time", "=", "self", ".", "order_by_model", "(", "df_time", ")", "\n", "df_time", "=", "df_time", ".", "rename", "(", "columns", "=", "{", "train_col", ":", "train_time_str", "}", ")", "\n", "df_time", "=", "df_time", ".", "rename", "(", "columns", "=", "{", "\"num_parameters\"", ":", "num_params_str", "}", ")", "[", "cols_time", "]", "\n", "df_time", "[", "train_time_str", "]", "=", "df_time", "[", "train_time_str", "]", "/", "60", "\n", "\n", "print", "(", "df_time", ".", "groupby", "(", "groupby_cols", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'max'", "]", ")", "[", "metrics_cols", "]", ")", "\n", "print", "(", "f'\\nHow many experiments have we run for each model and dataset?'", ")", "\n", "\n", "for", "(", "m_name", ",", "d_name", ")", ",", "df_g", "in", "df_time", ".", "groupby", "(", "groupby_cols", ")", ":", "\n", "            ", "print", "(", "f\"{m_name} {d_name}: {len(df_g)}\"", ")", "\n", "\n", "", "print", "(", "'\\nPlotting training time for the three different models'", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "ax", "=", "sns", ".", "boxplot", "(", "x", "=", "\"Model\"", ",", "y", "=", "train_time_str", ",", "data", "=", "df_time", ")", "\n", "ax", ".", "set", "(", "ylim", "=", "ylim", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "ax", ".", "get_figure", "(", ")", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'time_complexity_all.png'", ")", ")", "\n", "\n", "g", "=", "sns", ".", "catplot", "(", "x", "=", "\"Model\"", ",", "y", "=", "train_time_str", ",", "data", "=", "df_time", ",", "showfliers", "=", "False", ",", "\n", "kind", "=", "\"box\"", ",", "legend", "=", "True", ",", "\n", "hue", "=", "'Dataset'", "\n", ")", "\n", "# plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)", "\n", "g", ".", "set_xlabels", "(", "''", ")", "\n", "plt", ".", "show", "(", ")", "\n", "g", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'time_complexity_all_per_dataset.png'", ")", ")", "\n", "\n", "print", "(", "df_time", "[", "'Dataset'", "]", ".", "unique", "(", ")", ")", "\n", "\n", "df_time", "=", "df_time", ".", "rename", "(", "columns", "=", "{", "'train_epochs'", ":", "'Num. Epochs'", "}", ")", "\n", "\n", "df_time", "=", "self", ".", "order_by_dataset", "(", "df_time", ")", "\n", "g", "=", "sns", ".", "catplot", "(", "x", "=", "\"Model\"", ",", "y", "=", "'Num. Epochs'", ",", "data", "=", "df_time", ",", "showfliers", "=", "True", ",", "\n", "kind", "=", "\"box\"", ",", "legend", "=", "False", ",", "\n", "hue", "=", "'Dataset'", "\n", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "g", ".", "set_xlabels", "(", "''", ")", "\n", "# plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)", "\n", "plt", ".", "show", "(", ")", "\n", "g", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'time_complexity_all_epochs_per_dataset.png'", ")", ")", "\n", "\n", "print", "(", "df_time", ".", "groupby", "(", "[", "'Model'", "]", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", "]", ")", "[", "train_time_str", "]", ")", "\n", "print", "(", "f'\\nAre the training times significantly different?'", ")", "\n", "if", "n", "is", "not", "None", ":", "\n", "            ", "time_carefl", "=", "df_time", "[", "df_time", ".", "Model", "==", "'CAREFL'", "]", "[", "train_time_str", "]", ".", "sample", "(", "n", ",", "replace", "=", "replace", ")", "\n", "time_vcause", "=", "df_time", "[", "df_time", ".", "Model", "==", "'VACA'", "]", "[", "train_time_str", "]", ".", "sample", "(", "n", ",", "replace", "=", "replace", ")", "\n", "time_multicvae", "=", "df_time", "[", "df_time", ".", "Model", "==", "'MultiCVAE'", "]", "[", "train_time_str", "]", ".", "sample", "(", "n", ",", "replace", "=", "replace", ")", "\n", "", "else", ":", "\n", "            ", "time_carefl", "=", "df_time", "[", "df_time", ".", "Model", "==", "'CAREFL'", "]", "[", "train_time_str", "]", "\n", "time_vcause", "=", "df_time", "[", "df_time", ".", "Model", "==", "'VACA'", "]", "[", "train_time_str", "]", "\n", "time_multicvae", "=", "df_time", "[", "df_time", ".", "Model", "==", "'MultiCVAE'", "]", "[", "train_time_str", "]", "\n", "\n", "", "statistic", ",", "pvalue", "=", "ttest_ind", "(", "time_vcause", ",", "time_carefl", ")", "\n", "\n", "print", "(", "f'p-value of the T-test for VACA and CAREFL: {pvalue:.4f}'", ")", "\n", "\n", "statistic", ",", "pvalue", "=", "ttest_ind", "(", "time_multicvae", ",", "time_carefl", ")", "\n", "print", "(", "f'p-value of the T-test for CAREFL and MultiCVAE: {pvalue:.4f}'", ")", "\n", "\n", "statistic", ",", "pvalue", "=", "ttest_ind", "(", "time_multicvae", ",", "time_vcause", ")", "\n", "print", "(", "f'p-value of the T-test for VACA and MultiCVAE: {pvalue:.4f}'", ")", "\n", "\n", "statistic", ",", "pvalue", "=", "f_oneway", "(", "list", "(", "time_carefl", ".", "values", ")", ",", "\n", "list", "(", "time_multicvae", ".", "values", ")", ",", "\n", "list", "(", "time_vcause", ".", "values", ")", ")", "\n", "print", "(", "f'p-value of the f_oneway for : {pvalue:.4f}'", ")", "\n", "\n", "print", "(", "f'\\nAre the training times significantly different PER DATASET?'", ")", "\n", "if", "font_scale", "!=", "1", ":", "\n", "            ", "sns", ".", "set", "(", "font_scale", "=", "font_scale", ")", "\n", "sns", ".", "set_style", "(", "\"white\"", ")", "\n", "", "for", "d_name", ",", "df_data", "in", "df_time", ".", "groupby", "(", "[", "'Dataset'", "]", ")", ":", "\n", "            ", "print", "(", "f'\\nDataset: {d_name}'", ")", "\n", "time_carefl", "=", "df_data", "[", "df_data", ".", "Model", "==", "'CAREFL'", "]", "[", "train_time_str", "]", "\n", "time_vcause", "=", "df_data", "[", "df_data", ".", "Model", "==", "'VACA'", "]", "[", "train_time_str", "]", "\n", "time_multicvae", "=", "df_data", "[", "df_data", ".", "Model", "==", "'MultiCVAE'", "]", "[", "train_time_str", "]", "\n", "statistic", ",", "pvalue", "=", "f_oneway", "(", "list", "(", "time_carefl", ".", "values", ".", "flatten", "(", ")", ")", ",", "\n", "list", "(", "time_multicvae", ".", "values", ".", "flatten", "(", ")", ")", ",", "\n", "list", "(", "time_vcause", ".", "values", ".", "flatten", "(", ")", ")", ")", "\n", "print", "(", "f'p-value of the f_oneway for : {pvalue:.4f}'", ")", "\n", "\n", "statistic", ",", "pvalue", "=", "ttest_ind", "(", "list", "(", "time_carefl", ".", "values", ".", "flatten", "(", ")", ")", ",", "list", "(", "time_vcause", ".", "values", ".", "flatten", "(", ")", ")", ")", "\n", "print", "(", "f'p-value of the T-test for VACA and CAREFL: {pvalue:.4f}'", ")", "\n", "\n", "df_data", "=", "self", ".", "order_by_model", "(", "df_data", ")", "\n", "g", "=", "sns", ".", "catplot", "(", "x", "=", "\"Model\"", ",", "y", "=", "train_time_str", ",", "data", "=", "df_data", ",", "showfliers", "=", "False", ",", "\n", "kind", "=", "\"box\"", ",", "legend", "=", "False", ",", "\n", ")", "\n", "g", ".", "set_xlabels", "(", "''", ")", "\n", "\n", "g", ".", "fig", ".", "suptitle", "(", "f'{d_name}'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "g", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'time_complexity_all_{d_name}.png'", ")", ")", "\n", "\n", "# Number of parameters", "\n", "", "for", "d_name", ",", "df_data", "in", "df_time", ".", "groupby", "(", "[", "'Dataset'", "]", ")", ":", "\n", "            ", "print", "(", "f'\\nDataset: {d_name}'", ")", "\n", "\n", "df_data", "=", "self", ".", "order_by_model", "(", "df_data", ")", "\n", "g", "=", "sns", ".", "catplot", "(", "x", "=", "\"Model\"", ",", "y", "=", "num_params_str", ",", "data", "=", "df_data", ",", "showfliers", "=", "False", ",", "\n", "kind", "=", "\"box\"", ",", "legend", "=", "False", ",", "\n", ")", "\n", "g", ".", "set_xlabels", "(", "''", ")", "\n", "\n", "g", ".", "fig", ".", "suptitle", "(", "f'{d_name}'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "g", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'num_params_per_model_{d_name}.png'", ")", ")", "\n", "\n", "", "print", "(", "'\\nPlotting training time versus number of parameters of the three models'", ")", "\n", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "data", "=", "df_time", ",", "x", "=", "num_params_str", ",", "y", "=", "train_time_str", ",", "hue", "=", "\"Model\"", ")", "\n", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "ax", ".", "get_figure", "(", ")", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'time_complexity_num_params.png'", ")", ")", "\n", "\n", "# Compare time mean and std across datatasets and model", "\n", "\n", "print", "(", "df_time", ".", "groupby", "(", "[", "'Dataset'", ",", "'Model'", "]", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", "]", ")", "[", "train_time_str", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.time_complexity_VACA": [[440, 452], ["results.ResultsManager.df.copy", "print", "results.ResultsManager.rename", "results.ResultsManager.groupby().agg", "results.ResultsManager.groupby"], "methods", ["None"], ["", "def", "time_complexity_VACA", "(", "self", ")", ":", "\n", "\n", "        ", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "\n", "train_time_str", "=", "'Total training time (min)'", "\n", "groupby_cols", "=", "[", "'Model'", ",", "'Dataset'", "]", "\n", "metrics_cols", "=", "[", "train_time_str", ",", "'model_params_num_hidden_dec'", "]", "\n", "cols", "=", "[", "*", "groupby_cols", ",", "*", "metrics_cols", "]", "\n", "df", "=", "df", "[", "df", "[", "'Model'", "]", "==", "'VACA'", "]", "\n", "\n", "df", "=", "df", ".", "rename", "(", "columns", "=", "{", "\"train_time_total\"", ":", "train_time_str", "}", ")", "[", "cols", "]", "\n", "\n", "print", "(", "df", ".", "groupby", "(", "groupby_cols", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'median'", "]", ")", "[", "train_time_str", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.VACA_decoder_layers": [[453, 488], ["results.ResultsManager.df.copy", "results.ResultsManager.rename", "results.ResultsManager.order_by_dataset", "print", "filter_.items", "print", "print", "print", "results.ResultsManager.groupby().agg", "len", "df[].isin", "df_data[].mean", "df_data[].std", "results.ResultsManager.groupby"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_dataset", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "VACA_decoder_layers", "(", "self", ",", "sem", ",", "\n", "filter_", "=", "None", ")", ":", "\n", "\n", "        ", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "\n", "df", "=", "df", "[", "df", "[", "'Model'", "]", "==", "'VACA'", "]", "\n", "df", "=", "df", "[", "df", "[", "'SEM'", "]", "==", "sem", "]", "\n", "if", "filter_", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "values", "in", "filter_", ".", "items", "(", ")", ":", "\n", "                ", "df", "=", "df", "[", "df", "[", "key", "]", ".", "isin", "(", "values", ")", "]", "\n", "\n", "", "", "df", ".", "rename", "(", "columns", "=", "{", "\"model_params_num_hidden_dec\"", ":", "r'$N_h$'", "}", ",", "inplace", "=", "True", ")", "\n", "groupby_cols", "=", "[", "'Dataset'", ",", "r'$N_h$'", "]", "\n", "metrics_cols", "=", "[", "'MMD Obs.'", ",", "'MMD Inter.'", "]", "\n", "cols", "=", "[", "*", "groupby_cols", ",", "*", "metrics_cols", "]", "\n", "df", "=", "self", ".", "order_by_dataset", "(", "df", ")", "\n", "df", "=", "df", "[", "cols", "]", "\n", "\n", "print", "(", "df", ".", "groupby", "(", "groupby_cols", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'count'", "]", ")", "[", "metrics_cols", "]", "*", "100", ")", "\n", "\n", "for", "nlayers", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "print", "(", "f'nlayers: {nlayers}'", ")", "\n", "df_n", "=", "df", "[", "df", "[", "r'$N_h$'", "]", "==", "nlayers", "]", "\n", "my_str", "=", "''", "\n", "data_str", "=", "''", "\n", "for", "d_name", "in", "self", ".", "dataset_name_order", ":", "\n", "                ", "df_data", "=", "df_n", "[", "df_n", ".", "Dataset", "==", "d_name", "]", "\n", "if", "len", "(", "df_data", ")", "==", "0", ":", "continue", "\n", "for", "met", "in", "metrics_cols", ":", "\n", "                    ", "mean", "=", "df_data", "[", "met", "]", ".", "mean", "(", ")", "*", "100", "\n", "std", "=", "df_data", "[", "met", "]", ".", "std", "(", ")", "*", "100", "\n", "my_str", "+=", "' & '", "+", "f\"{mean:.2f}\"", "+", "' $\\pm$ '", "+", "f\"{std:.2f}\"", "\n", "", "data_str", "+=", "f\" {d_name}\"", "\n", "\n", "", "print", "(", "f'nlayers: {nlayers} dataset: {data_str}'", ")", "\n", "print", "(", "f\"{my_str} \\\\\\\\\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_dataset": [[489, 494], ["results.ResultsManager._order_df"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager._order_df"], ["", "", "def", "order_by_dataset", "(", "self", ",", "df", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_order_df", "(", "df", ",", "\n", "col_name", "=", "'Dataset'", ",", "\n", "col_values_list", "=", "self", ".", "dataset_name_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_model": [[495, 500], ["results.ResultsManager._order_df"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager._order_df"], ["", "def", "order_by_model", "(", "self", ",", "df", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_order_df", "(", "df", ",", "\n", "col_name", "=", "'Model'", ",", "\n", "col_values_list", "=", "self", ".", "model_name_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager._order_df": [[501, 510], ["df.copy", "df_out[].replace", "df_out.sort_values.sort_values.sort_values", "df_out[].replace", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "_order_df", "(", "self", ",", "df", ",", "col_name", ",", "col_values_list", ")", ":", "\n", "        ", "df_out", "=", "df", ".", "copy", "(", ")", "\n", "col_dict", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "enumerate", "(", "col_values_list", ")", "}", "\n", "\n", "df_out", "[", "col_name", "]", "=", "df_out", "[", "col_name", "]", ".", "replace", "(", "col_dict", ")", "\n", "df_out", "=", "df_out", ".", "sort_values", "(", "by", "=", "[", "col_name", "]", ")", "\n", "col_dict", "=", "{", "i", ":", "name", "for", "i", ",", "name", "in", "enumerate", "(", "col_values_list", ")", "}", "\n", "df_out", "[", "col_name", "]", "=", "df_out", "[", "col_name", "]", ".", "replace", "(", "col_dict", ")", "\n", "return", "df_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.VACA_dimension_z": [[511, 550], ["results.ResultsManager.df[].copy", "results.ResultsManager.rename", "results.ResultsManager.rename", "results.ResultsManager.order_by_dataset", "results.ResultsManager.groupby", "print", "print", "filter_.items", "print", "print", "print", "results.ResultsManager.groupby().agg", "len", "len", "results.ResultsManager.groupby", "len", "df_sem[].mean"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_dataset", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "VACA_dimension_z", "(", "self", ",", "limit_dim_z", "=", "None", ",", "\n", "filter_", "=", "None", ")", ":", "\n", "\n", "        ", "df_z", "=", "self", ".", "df", "[", "self", ".", "df", ".", "Model", "==", "'VACA'", "]", ".", "copy", "(", ")", "\n", "\n", "if", "filter_", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "filter_", ".", "items", "(", ")", ":", "\n", "                ", "df_z", "=", "df_z", "[", "df_z", "[", "key", "]", "==", "value", "]", "\n", "\n", "", "", "df_z", ".", "rename", "(", "columns", "=", "{", "\"model_params_z_dim\"", ":", "\"dim(z)\"", "}", ",", "inplace", "=", "True", ")", "\n", "df_z", ".", "rename", "(", "columns", "=", "{", "\"num_parameters\"", ":", "\"Num. parameters\"", "}", ",", "inplace", "=", "True", ")", "\n", "df_z", "=", "self", ".", "order_by_dataset", "(", "df_z", ")", "\n", "for", "dim_z", ",", "df_dim", "in", "df_z", ".", "groupby", "(", "'dim(z)'", ")", ":", "\n", "            ", "print", "(", "f'dim_z: {dim_z}'", ")", "\n", "my_str", "=", "''", "\n", "data_str", "=", "''", "\n", "for", "d_name", "in", "self", ".", "dataset_name_order", ":", "\n", "                ", "df_data", "=", "df_dim", "[", "df_dim", ".", "Dataset", "==", "d_name", "]", "\n", "if", "len", "(", "df_data", ")", "==", "0", ":", "continue", "\n", "data_str", "+=", "f\" {d_name}\"", "\n", "\n", "for", "s_name", "in", "self", ".", "sem_name_order", ":", "\n", "                    ", "df_sem", "=", "df_data", "[", "df_data", ".", "SEM", "==", "s_name", "]", "\n", "if", "len", "(", "df_sem", ")", "==", "0", ":", "continue", "\n", "data_str", "+=", "f\" {s_name}\"", "\n", "my_str", "+=", "' & '", "+", "f\"{df_sem['Num. parameters'].mean():.0f}\"", "\n", "\n", "", "", "print", "(", "f'dim_z: {dim_z} dataset: {data_str}'", ")", "\n", "print", "(", "f\"{my_str} \\\\\\\\\"", ")", "\n", "\n", "", "if", "limit_dim_z", ":", "df_z", "=", "df_z", "[", "df_z", "[", "'dim(z)'", "]", "<=", "limit_dim_z", "]", "\n", "\n", "print", "(", "f\"Number of experiments: {len(df_z)}\"", ")", "\n", "metrics", "=", "[", "'MMD Obs.'", ",", "'MMD Inter.'", ",", "'MSE CF'", "]", "\n", "df_g", "=", "df_z", ".", "groupby", "(", "[", "'Dataset'", ",", "'SEM'", ",", "'dim(z)'", "]", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'count'", "]", ")", "[", "metrics", "]", "\n", "\n", "print", "(", "df_g", ")", "\n", "\n", "return", "df_g", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.VACA_dimension_z_sem": [[551, 624], ["list", "results.ResultsManager.df[].copy", "results.ResultsManager.rename", "results.ResultsManager.order_by_dataset", "results.ResultsManager.rename", "print", "print", "enumerate", "matplotlib.subplots", "seaborn.lineplot", "fig.subplots_adjust", "fig.suptitle", "matplotlib.show", "fig.savefig", "results.ResultsManager.metrics_dict.keys", "filter_.items", "seaborn.set", "seaborn.set_style", "seaborn.catplot", "isinstance", "seaborn.catplot.fig.subplots_adjust", "seaborn.catplot.fig.suptitle", "matplotlib.show", "seaborn.catplot.savefig", "os.path.join", "results.ResultsManager.groupby().agg", "seaborn.catplot.set", "os.path.join", "len", "filter", "results.ResultsManager.groupby", "filter"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.order_by_dataset"], ["", "def", "VACA_dimension_z_sem", "(", "self", ",", "limit_dim_z", "=", "None", ",", "\n", "sem", "=", "'non-linear'", ",", "\n", "filter_", "=", "None", ",", "\n", "y_lim", "=", "None", ",", "\n", "font_scale", "=", "1", ")", ":", "\n", "\n", "        ", "cols_metrics", "=", "list", "(", "self", ".", "metrics_dict", ".", "keys", "(", ")", ")", "\n", "groupby_z", "=", "[", "'model_params_z_dim'", ",", "'Dataset'", ",", "'SEM'", "]", "\n", "metrics_z", "=", "cols_metrics", "\n", "cols_z", "=", "[", "*", "groupby_z", ",", "*", "metrics_z", "]", "\n", "df_z", "=", "self", ".", "df", "[", "self", ".", "df", ".", "Model", "==", "'VACA'", "]", ".", "copy", "(", ")", "\n", "df_z", "=", "df_z", "[", "df_z", ".", "SEM", "==", "sem", "]", "\n", "\n", "if", "filter_", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "filter_", ".", "items", "(", ")", ":", "\n", "                ", "df_z", "=", "df_z", "[", "df_z", "[", "key", "]", "==", "value", "]", "\n", "\n", "", "", "df_z", ".", "rename", "(", "columns", "=", "{", "\"model_params_z_dim\"", ":", "\"dim(z)\"", "}", ",", "inplace", "=", "True", ")", "\n", "if", "limit_dim_z", ":", "df_z", "=", "df_z", "[", "df_z", "[", "'dim(z)'", "]", "<=", "limit_dim_z", "]", "\n", "\n", "df_z", "=", "self", ".", "order_by_dataset", "(", "df_z", ")", "\n", "df_z", ".", "rename", "(", "columns", "=", "{", "\"num_parameters\"", ":", "\"Num. parameters\"", "}", ",", "inplace", "=", "True", ")", "\n", "\n", "print", "(", "f\"Number of experiments: {len(df_z)}\"", ")", "\n", "metrics", "=", "[", "'MMD Obs.'", ",", "'MMD Inter.'", ",", "'MSE CF'", "]", "\n", "# df_g = df_z.groupby(['dim(z)']).agg(['mean', 'std'])[metrics]", "\n", "\n", "print", "(", "df_z", ".", "groupby", "(", "[", "'dim(z)'", "]", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", ",", "'count'", "]", ")", "[", "metrics", "]", ")", "\n", "# x = 'dim(z)'", "\n", "# hue = 'Dataset'", "\n", "hue", "=", "'dim(z)'", "\n", "x", "=", "'Dataset'", "\n", "\n", "if", "font_scale", "!=", "1", ":", "\n", "            ", "sns", ".", "set", "(", "font_scale", "=", "font_scale", ")", "\n", "sns", ".", "set_style", "(", "\"white\"", ")", "\n", "", "for", "i", ",", "met", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "g", "=", "sns", ".", "catplot", "(", "x", "=", "x", ",", "y", "=", "met", ",", "data", "=", "df_z", ",", "showfliers", "=", "False", ",", "\n", "kind", "=", "\"box\"", ",", "legend", "=", "False", ",", "hue", "=", "hue", "\n", ")", "\n", "# plt.legend(loc='best')", "\n", "\n", "if", "isinstance", "(", "y_lim", ",", "list", ")", ":", "\n", "                ", "g", ".", "set", "(", "ylim", "=", "y_lim", "[", "i", "]", ")", "\n", "", "g", ".", "fig", ".", "subplots_adjust", "(", "top", "=", "0.9", ")", "# adjust the Figure in rp", "\n", "g", ".", "fig", ".", "suptitle", "(", "f'SEM: {sem}'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "my_str", "=", "''", ".", "join", "(", "filter", "(", "str", ".", "isalnum", ",", "met", ")", ")", ".", "lower", "(", ")", "\n", "\n", "g", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'dimension_z_{my_str}_{sem}.png'", ")", ")", "\n", "\n", "# Plot number of parameters", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "_", "=", "sns", ".", "lineplot", "(", "x", "=", "'dim(z)'", ",", "\n", "y", "=", "'Num. parameters'", ",", "\n", "data", "=", "df_z", ",", "\n", "legend", "=", "True", ",", "\n", "hue", "=", "'Dataset'", ",", "\n", "ax", "=", "ax", ")", "\n", "\n", "fig", ".", "subplots_adjust", "(", "top", "=", "0.9", ")", "# adjust the Figure in rp", "\n", "\n", "fig", ".", "suptitle", "(", "f'SEM: {sem}'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "my_str", "=", "''", ".", "join", "(", "filter", "(", "str", ".", "isalnum", ",", "met", ")", ")", ".", "lower", "(", ")", "\n", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'dimension_z_{sem}_num_params.png'", ")", ")", "\n", "\n", "# print(df_z.groupby(['Dataset', 'dim(z)']).mean()[['Num. parameters']])", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.cross_validate_nn": [[625, 677], ["print", "list", "enumerate", "results.ResultsManager.df.copy", "[].applymap", "print", "[].applymap", "print", "os.path.join", "print", "os.path.join", "results.ResultsManager.metrics_dict.keys", "print", "results.ResultsManager.filter_valid_configurations().copy", "df[].apply", "df[].apply", "df[].apply", "groupby.append", "open", "tf.write", "results.ResultsManager.groupby().count", "open", "tf.write", "metrics_list.append", "groupby.append", "df_comparison.to_latex", "df_count.to_latex", "results.ResultsManager.filter_valid_configurations", "results.ResultsManager.groupby().mean", "results.ResultsManager.groupby().std", "results.ResultsManager.groupby", "x.split", "x.split", "x.split", "results.ResultsManager.groupby", "results.ResultsManager.groupby"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.ResultsManager.filter_valid_configurations", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "cross_validate_nn", "(", "self", ",", "only_valid", "=", "True", ",", "model_name", "=", "'VACA'", ",", "metrics_to_use", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "7", ",", "8", "]", ",", "debug", "=", "True", ")", ":", "\n", "        ", "print", "(", "'\\nCross validating nn'", ")", "\n", "cols_metrics", "=", "list", "(", "self", ".", "metrics_dict", ".", "keys", "(", ")", ")", "\n", "metrics_list", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cols_metrics", ")", ":", "\n", "            ", "if", "i", "in", "metrics_to_use", ":", "\n", "                ", "metrics_list", ".", "append", "(", "c", ")", "\n", "add", "=", "'True'", "\n", "", "else", ":", "\n", "                ", "add", "=", "'False'", "\n", "", "print", "(", "f\"({i}) [{add}] {c}\"", ")", "\n", "\n", "", "df", "=", "self", ".", "df", ".", "copy", "(", ")", "\n", "if", "only_valid", ":", "\n", "            ", "df", "=", "self", ".", "filter_valid_configurations", "(", "df", ")", ".", "copy", "(", ")", "\n", "\n", "", "groupby", "=", "[", "'Dataset'", ",", "'SEM'", "]", "\n", "if", "model_name", "==", "'VACA'", ":", "\n", "            ", "df", "=", "df", "[", "df", ".", "Model", "==", "'VACA'", "]", "\n", "df", "[", "'model_params_h_dim_list_enc'", "]", "=", "df", "[", "'model_params_h_dim_list_enc'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df", "[", "'model_params_h_dim_list_dec'", "]", "=", "df", "[", "'model_params_h_dim_list_dec'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df", "=", "df", "[", "df", ".", "model_params_h_dim_list_dec", "==", "df", ".", "model_params_h_dim_list_enc", "]", "\n", "df", "[", "'model_params_h_dim_list'", "]", "=", "df", "[", "'model_params_h_dim_list'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "\n", "groupby", ".", "append", "(", "'model_params_h_dim_list'", ")", "\n", "", "elif", "model_name", "==", "'CAREFL'", ":", "\n", "            ", "df", "=", "df", "[", "df", ".", "Model", "==", "'CAREFL'", "]", "\n", "groupby", ".", "append", "(", "'model_params_n_hidden'", ")", "\n", "", "all_cols", "=", "[", "*", "groupby", ",", "*", "metrics_list", "]", "\n", "if", "debug", ":", "\n", "            ", "return", "all_cols", ",", "df", "\n", "\n", "", "df", "=", "df", "[", "all_cols", "]", "\n", "df", "[", "metrics_list", "]", "=", "df", "[", "metrics_list", "]", "*", "100", "\n", "df_mean", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "mean", "(", ")", "[", "metrics_list", "]", ".", "applymap", "(", "lambda", "x", ":", "'{0:.2f}'", ".", "format", "(", "x", ")", ")", "\n", "print", "(", "df_mean", ")", "\n", "df_std", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "std", "(", ")", "[", "metrics_list", "]", ".", "applymap", "(", "lambda", "x", ":", "'{0:.2f}'", ".", "format", "(", "x", ")", ")", "\n", "print", "(", "df_std", ")", "\n", "\n", "df_comparison", "=", "df_mean", "+", "'$\\pm$'", "+", "df_std", "\n", "table_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'my_table_nn_{model_name}.tex'", ")", "\n", "with", "open", "(", "table_file", ",", "'w'", ")", "as", "tf", ":", "\n", "            ", "tf", ".", "write", "(", "df_comparison", ".", "to_latex", "(", "escape", "=", "False", ")", ")", "\n", "\n", "", "df_count", "=", "df", ".", "groupby", "(", "groupby", ")", ".", "count", "(", ")", "[", "metrics_list", "]", "\n", "print", "(", "df_count", ")", "\n", "\n", "table_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "f'my_table_nn_count_{model_name}.tex'", ")", "\n", "with", "open", "(", "table_file", ",", "'w'", ")", "as", "tf", ":", "\n", "            ", "tf", ".", "write", "(", "df_count", ".", "to_latex", "(", "escape", "=", "False", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.print_cols": [[679, 683], ["print", "print"], "function", ["None"], ["", "", "def", "print_cols", "(", "my_cols", ")", ":", "\n", "    ", "for", "c", "in", "my_cols", ":", "\n", "        ", "print", "(", "c", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.create_df_results": [[685, 706], ["glob.glob", "pandas.DataFrame.from_dict", "os.path.join", "experiment_results.append", "open", "json.load", "os.path.join", "os.path.exists", "os.path.dirname", "open", "json.load"], "function", ["None"], ["", "def", "create_df_results", "(", "root_dir", ",", "add_time", "=", "False", ")", ":", "\n", "    ", "experiment_results", "=", "[", "]", "\n", "\n", "for", "json_file_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'**'", ",", "'output.json'", ")", ",", "recursive", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "json_file_name", ")", "as", "json_file", ":", "\n", "            ", "json_exper", "=", "json", ".", "load", "(", "json_file", ")", "\n", "json_exper", "[", "'json_filename'", "]", "=", "json_file_name", "\n", "\n", "", "if", "add_time", ":", "\n", "\n", "            ", "json_file_name_time", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "json_file_name", ")", ",", "'time.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file_name_time", ")", ":", "\n", "                ", "with", "open", "(", "json_file_name_time", ")", "as", "json_file", ":", "\n", "                    ", "json_exper_time", "=", "json", ".", "load", "(", "json_file", ")", "\n", "json_exper", "[", "'train_time_total'", "]", "=", "json_exper_time", "[", "'train_time_total'", "]", "\n", "json_exper", "[", "'train_time_avg_per_epoch'", "]", "=", "json_exper_time", "[", "'train_time_avg_per_epoch'", "]", "\n", "json_exper", "[", "'train_epochs'", "]", "=", "json_exper", "[", "'train_time_total'", "]", "/", "json_exper", "[", "'train_time_avg_per_epoch'", "]", "\n", "\n", "", "", "", "experiment_results", ".", "append", "(", "json_exper", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", ".", "from_dict", "(", "experiment_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.create_legend": [[708, 710], ["None"], "function", ["None"], ["", "def", "create_legend", "(", "label_list", ",", "color_list", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.process_list_params": [[712, 717], ["isinstance", "len", "str"], "function", ["None"], ["", "def", "process_list_params", "(", "list_params", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_params", ",", "list", ")", "and", "len", "(", "list_params", ")", ">", "0", ":", "\n", "        ", "return", "'_'", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "list_params", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "'0'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_number_hidden_layers": [[719, 724], ["isinstance", "len"], "function", ["None"], ["", "", "def", "get_number_hidden_layers", "(", "list_params", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_params", ",", "list", ")", ":", "\n", "        ", "return", "len", "(", "list_params", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "# does not apply", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements": [[726, 744], ["output.append"], "function", ["None"], ["", "", "def", "get_elements", "(", "my_list", ",", "my_and_filter", ",", "my_not_filter", "=", "[", "]", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "\n", "for", "e", "in", "my_list", ":", "\n", "        ", "add", "=", "True", "\n", "for", "AND_F", "in", "my_and_filter", ":", "\n", "            ", "if", "AND_F", "not", "in", "e", ":", "\n", "                ", "add", "=", "False", "\n", "break", "\n", "\n", "", "", "for", "NOT_F", "in", "my_not_filter", ":", "\n", "            ", "if", "NOT_F", "in", "e", ":", "\n", "                ", "add", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "add", ":", "output", ".", "append", "(", "e", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_unique_parameteres": [[746, 752], ["results.get_elements", "print", "enumerate", "len", "df_i[].unique", "print", "df_i[].unique"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.results.get_elements"], ["", "def", "get_unique_parameteres", "(", "columns_list", ",", "df_i", ",", "type_list", "=", "[", "'model'", "]", ")", ":", "\n", "    ", "for", "c", "in", "get_elements", "(", "columns_list", ",", "type_list", ")", ":", "\n", "        ", "if", "len", "(", "df_i", "[", "c", "]", ".", "unique", "(", ")", ")", "==", "1", ":", "continue", "\n", "print", "(", "f\"{c}\"", ")", "\n", "for", "i", ",", "u", "in", "enumerate", "(", "df_i", "[", "c", "]", ".", "unique", "(", ")", ")", ":", "\n", "            ", "print", "(", "f\"\\t[{i}] {u}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation": [[6, 31], ["torch.Tanh", "torch.ReLU", "torch.ReLU6", "torch.Softplus", "torch.RReLU", "torch.LeakyReLU", "torch.ELU", "torch.SELU", "torch.GLU", "torch.Sigmoid", "torch.Identity"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "Cte", ".", "TAHN", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RELU", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RELU6", ":", "\n", "        ", "return", "nn", ".", "ReLU6", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SOFTPLUS", ":", "\n", "        ", "return", "nn", ".", "Softplus", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RRELU", ":", "\n", "        ", "return", "nn", ".", "RReLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "LRELU", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.05", ")", "\n", "", "elif", "name", "==", "Cte", ".", "ELU", ":", "\n", "        ", "return", "nn", ".", "ELU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SELU", ":", "\n", "        ", "return", "nn", ".", "SELU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "GLU", ":", "\n", "        ", "return", "nn", ".", "GLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SIGMOID", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "IDENTITY", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.__init__": [[32, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "domain_size", ":", "int", ",", "\n", "normalize", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Base class to define the likelihoods\n        Args:\n            domain_size:\n            normalize:\n            String identifying the type of normalization. It can take three possible values\n                all: normalize all dimensions equally\n                dim: normalize per dimension\n                otherwise: do not normalize\n        \"\"\"", "\n", "super", "(", "BaseLikelihood", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_domain_size", "=", "domain_size", "\n", "self", ".", "_scalar_params", "=", "None", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.name": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.domain_size": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.params_size": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.fit": [[62, 64], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.fit_normalize_data": [[65, 68], ["likelihoods.BaseLikelihood.fit", "likelihoods.BaseLikelihood.normalize_data"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.normalize_data"], ["", "def", "fit_normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "fit", "(", "x", ")", "\n", "return", "self", ".", "normalize_data", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.normalize_data": [[69, 71], ["None"], "methods", ["None"], ["", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.denormalize_data": [[72, 74], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.denormalize_params": [[75, 77], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BaseLikelihood.has_fit": [[78, 80], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BetaLikelihood.__init__": [[83, 85], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BetaLikelihood.params_size": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BetaLikelihood.forward": [[90, 99], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.Beta", "torch.Beta", "torch.Beta", "torch.Beta", "torch.softplus.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "logits", "=", "F", ".", "softplus", "(", "logits", ")", "\n", "latent_dim", "=", "logits", ".", "size", "(", "1", ")", "//", "2", "\n", "c0", ",", "c1", "=", "torch", ".", "split", "(", "logits", ",", "split_size_or_sections", "=", "latent_dim", ",", "dim", "=", "1", ")", "\n", "p", "=", "td", ".", "Beta", "(", "c0", ",", "c1", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "p", ".", "mean", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.__init__": [[102, 104], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ",", "normalize", "=", "'all'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ",", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.name": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Cte", ".", "BERNOULLI", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.params_size": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.forward": [[113, 119], ["torch.Bernoulli", "torch.Bernoulli", "torch.Bernoulli", "torch.Bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "p", "=", "td", ".", "Bernoulli", "(", "logits", "=", "logits", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "p", ".", "mean", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.fit": [[120, 122], ["None"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.normalize_data": [[123, 125], ["None"], "methods", ["None"], ["", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.fit_normalize_data": [[126, 129], ["likelihoods.BernoulliLikelihood.fit", "likelihoods.BernoulliLikelihood.normalize_data"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.normalize_data"], ["", "def", "fit_normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "fit", "(", "x", ")", "\n", "return", "self", ".", "normalize_data", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.denormalize_data": [[130, 132], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.denormalize_params": [[133, 135], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "p", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.BernoulliLikelihood.has_fit": [[136, 141], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "if", "include_size", ":", "\n", "            ", "return", "[", "False", ",", "]", "*", "self", ".", "domain_size", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.__init__": [[144, 146], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ",", "normalize", "=", "'all'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ",", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.name": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Cte", ".", "CATEGORICAL", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.params_size": [[151, 154], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.forward": [[155, 161], ["torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "p", "=", "td", ".", "Categorical", "(", "logits", "=", "logits", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "logits", ")", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.fit": [[162, 164], ["None"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.normalize_data": [[165, 167], ["None"], "methods", ["None"], ["", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.fit_normalize_data": [[168, 171], ["likelihoods.CategoricalLikelihood.fit", "likelihoods.CategoricalLikelihood.normalize_data"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.normalize_data"], ["", "def", "fit_normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "fit", "(", "x", ")", "\n", "return", "self", ".", "normalize_data", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.denormalize_data": [[172, 174], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.denormalize_params": [[175, 177], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "p", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.CategoricalLikelihood.has_fit": [[178, 183], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "if", "include_size", ":", "\n", "            ", "return", "[", "False", ",", "]", "*", "self", ".", "domain_size", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.__init__": [[186, 188], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ",", "normalize", "=", "'all'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ",", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.name": [[189, 192], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Cte", ".", "CONTINOUS_BERN", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.params_size": [[193, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.forward": [[197, 204], ["torch.ContinuousBernoulli", "torch.ContinuousBernoulli", "torch.ContinuousBernoulli", "torch.ContinuousBernoulli", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "p", "=", "td", ".", "ContinuousBernoulli", "(", "logits", "=", "logits", ")", "\n", "\n", "if", "return_mean", ":", "\n", "            ", "return", "F", ".", "sigmoid", "(", "logits", ")", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.fit": [[205, 217], ["x.max", "x.min", "x.max", "x.min"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "_domain_size", "\n", "self", ".", "_scalar_params", "=", "{", "}", "\n", "if", "self", ".", "normalize", "==", "'all'", ":", "\n", "            ", "self", ".", "_scalar_params", "[", "'max'", "]", "=", "x", ".", "max", "(", ")", "\n", "self", ".", "_scalar_params", "[", "'min'", "]", "=", "x", ".", "min", "(", ")", "\n", "", "elif", "self", ".", "normalize", "==", "'dim'", ":", "\n", "            ", "self", ".", "_scalar_params", "[", "'max'", "]", "=", "x", ".", "max", "(", "0", ")", "\n", "self", ".", "_scalar_params", "[", "'min'", "]", "=", "x", ".", "min", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_scalar_params", "[", "'max'", "]", "=", "1.", "\n", "self", ".", "_scalar_params", "[", "'min'", "]", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.normalize_data": [[218, 223], ["None"], "methods", ["None"], ["", "", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "max_", "=", "self", ".", "_scalar_params", "[", "'max'", "]", "\n", "min_", "=", "self", ".", "_scalar_params", "[", "'min'", "]", "\n", "x_norm", "=", "(", "x", "-", "min_", ")", "/", "(", "max_", "-", "min_", ")", "\n", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.denormalize_data": [[224, 229], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "max_", "=", "self", ".", "_scalar_params", "[", "'max'", "]", "\n", "min_", "=", "self", ".", "_scalar_params", "[", "'min'", "]", "\n", "x", "=", "x_norm", "*", "(", "max_", "-", "min_", ")", "+", "min_", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.denormalize_params": [[230, 232], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "p", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.ContinousBernoulliLikelihood.has_fit": [[233, 238], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "if", "include_size", ":", "\n", "            ", "return", "[", "True", ",", "]", "*", "self", ".", "domain_size", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.__init__": [[241, 245], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ",", "normalize", "=", "'dim'", ",", "lambda_", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ",", "normalize", ")", "\n", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.name": [[246, 249], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Cte", ".", "DELTA", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.params_size": [[250, 253], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.set_lambda": [[254, 256], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "lambda_", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.forward": [[257, 264], ["likelihoods.Delta"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "# logits = torch.sigmoid(logits)", "\n", "        ", "p", "=", "Delta", "(", "logits", ",", "lambda_", "=", "self", ".", "lambda_", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "p", ".", "mean", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.fit": [[265, 280], ["x.mean", "x.std", "x.std", "x.mean"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "_domain_size", "\n", "self", ".", "_scalar_params", "=", "{", "}", "\n", "if", "self", ".", "normalize", "==", "'all'", ":", "\n", "\n", "            ", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "x", ".", "mean", "(", ")", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "x", ".", "std", "(", ")", "\n", "", "elif", "self", ".", "normalize", "==", "'dim'", ":", "\n", "            ", "std", "=", "x", ".", "std", "(", "0", ")", "\n", "std", "[", "std", "==", "0", "]", "=", "1.", "\n", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "x", ".", "mean", "(", "0", ")", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "std", "\n", "", "else", ":", "\n", "            ", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "0.", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.normalize_data": [[281, 286], ["None"], "methods", ["None"], ["", "", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "x_norm", "=", "(", "x", "-", "mu", ")", "/", "std", "\n", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.denormalize_data": [[287, 292], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "x", "=", "x_norm", "*", "std", "+", "mu", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.denormalize_params": [[293, 299], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "p", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "\n", "p", ".", "loc", "=", "p", ".", "loc", "*", "std", "+", "mu", "\n", "p", ".", "scale", "=", "p", ".", "scale", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.DeltaLikelihood.has_fit": [[300, 305], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "if", "include_size", ":", "\n", "            ", "return", "[", "True", ",", "]", "*", "self", ".", "domain_size", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.__init__": [[308, 312], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ",", "normalize", "=", "'dim'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ",", "normalize", ")", "\n", "self", ".", "clip_std", "=", "0.0", "\n", "self", ".", "fix_std", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.name": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Cte", ".", "GAUSSIAN", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.set_fix_std": [[317, 319], ["None"], "methods", ["None"], ["", "def", "set_fix_std", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "fix_std", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.params_size": [[320, 323], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.forward": [[324, 338], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "isinstance", "torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal", "logits.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.clip", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "        ", "latent_dim", "=", "logits", ".", "size", "(", "1", ")", "//", "2", "\n", "mu", ",", "log_var", "=", "torch", ".", "split", "(", "logits", ",", "split_size_or_sections", "=", "latent_dim", ",", "dim", "=", "1", ")", "\n", "std", "=", "torch", ".", "exp", "(", "log_var", "/", "2", ")", "+", "0.0001", "\n", "if", "self", ".", "clip_std", ">", "0", ":", "\n", "            ", "std", "=", "torch", ".", "clip", "(", "std", ",", "max", "=", "self", ".", "clip_std", ")", "\n", "", "if", "isinstance", "(", "self", ".", "fix_std", ",", "float", ")", ":", "\n", "            ", "std", "=", "torch", ".", "ones_like", "(", "std", ",", "requires_grad", "=", "False", ")", "*", "self", ".", "fix_std", "\n", "# std = 0.001*torch.sigmoid(log_var)", "\n", "", "p", "=", "td", ".", "Normal", "(", "mu", ",", "std", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "mu", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.fit": [[339, 354], ["x.mean", "x.std", "x.std", "x.mean"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "_domain_size", "\n", "self", ".", "_scalar_params", "=", "{", "}", "\n", "if", "self", ".", "normalize", "==", "'all'", ":", "\n", "\n", "            ", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "x", ".", "mean", "(", ")", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "x", ".", "std", "(", ")", "\n", "", "elif", "self", ".", "normalize", "==", "'dim'", ":", "\n", "            ", "std", "=", "x", ".", "std", "(", "0", ")", "\n", "std", "[", "std", "==", "0", "]", "=", "1.", "\n", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "x", ".", "mean", "(", "0", ")", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "std", "\n", "", "else", ":", "\n", "            ", "self", ".", "_scalar_params", "[", "'mu'", "]", "=", "0.", "\n", "self", ".", "_scalar_params", "[", "'std'", "]", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.normalize_data": [[355, 360], ["None"], "methods", ["None"], ["", "", "def", "normalize_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "x_norm", "=", "(", "x", "-", "mu", ")", "/", "std", "\n", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.denormalize_data": [[361, 366], ["None"], "methods", ["None"], ["", "def", "denormalize_data", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "x", "=", "x_norm", "*", "std", "+", "mu", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.denormalize_params": [[367, 373], ["None"], "methods", ["None"], ["", "def", "denormalize_params", "(", "self", ",", "p", ")", ":", "\n", "        ", "mu", "=", "self", ".", "_scalar_params", "[", "'mu'", "]", "\n", "std", "=", "self", ".", "_scalar_params", "[", "'std'", "]", "\n", "\n", "p", ".", "loc", "=", "p", ".", "loc", "*", "std", "+", "mu", "\n", "p", ".", "scale", "=", "p", ".", "scale", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.has_fit": [[374, 379], ["None"], "methods", ["None"], ["", "def", "has_fit", "(", "self", ",", "include_size", "=", "False", ")", ":", "\n", "        ", "if", "include_size", ":", "\n", "            ", "return", "[", "True", ",", "]", "*", "self", ".", "domain_size", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihoodFixStd.__init__": [[382, 386], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain_size", ")", "\n", "\n", "self", ".", "fix_std", "=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihoodFixStd.params_size": [[387, 390], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihoodFixStd.forward": [[391, 401], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "return_mean", "=", "False", ")", ":", "\n", "\n", "        ", "std", "=", "torch", ".", "ones_like", "(", "logits", ",", "requires_grad", "=", "False", ")", "*", "self", ".", "fix_std", "\n", "# std = 0.001*torch.sigmoid(log_var)", "\n", "\n", "p", "=", "td", ".", "Normal", "(", "logits", ",", "std", ")", "\n", "if", "return_mean", ":", "\n", "            ", "return", "logits", ",", "p", "\n", "", "else", ":", "\n", "            ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.__init__": [[406, 414], ["likelihoods.Delta._param.size", "torch.Distribution.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "center", "=", "None", ",", "lambda_", "=", "1.0", ",", "validate_args", "=", "None", ")", ":", "\n", "        ", "if", "center", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"`center` must be specified.\"", ")", "\n", "", "self", ".", "center", "=", "center", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "_param", "=", "self", ".", "center", "\n", "batch_shape", "=", "self", ".", "_param", ".", "size", "(", ")", "\n", "super", "(", "Delta", ",", "self", ")", ".", "__init__", "(", "batch_shape", ",", "validate_args", "=", "validate_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean": [[415, 418], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.sample": [[419, 421], ["torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample": [[422, 424], ["torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "NotImplementedError"], "methods", ["None"], ["", "def", "rsample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob": [[425, 430], ["likelihoods.Delta._validate_sample"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_validate_args", ":", "\n", "            ", "self", ".", "_validate_sample", "(", "value", ")", "\n", "\n", "", "return", "-", "(", "1", "/", "self", ".", "lambda_", ")", "*", "(", "value", "-", "self", ".", "center", ")", "**", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.get_likelihood": [[9, 29], ["lik_cls", "NotImplementedError"], "function", ["None"], ["def", "get_likelihood", "(", "name", ",", "domain_size", ")", ":", "\n", "    ", "lik_cls", "=", "None", "\n", "if", "name", "==", "Cte", ".", "BETA", ":", "# Beta", "\n", "        ", "lik_cls", "=", "BetaLikelihood", "\n", "", "elif", "name", "==", "Cte", ".", "BERNOULLI", ":", "# Bernoulli", "\n", "        ", "lik_cls", "=", "BernoulliLikelihood", "\n", "", "elif", "name", "==", "Cte", ".", "CATEGORICAL", ":", "# Categorical", "\n", "        ", "lik_cls", "=", "CategoricalLikelihood", "\n", "", "elif", "name", "==", "Cte", ".", "CONTINOUS_BERN", ":", "# Continuous Bernoulli", "\n", "        ", "lik_cls", "=", "ContinousBernoulliLikelihood", "\n", "", "elif", "name", "==", "Cte", ".", "DELTA", ":", "# Delta", "\n", "        ", "lik_cls", "=", "DeltaLikelihood", "\n", "", "elif", "name", "==", "Cte", ".", "GAUSSIAN", ":", "\n", "        ", "lik_cls", "=", "NormalLikelihood", "\n", "", "elif", "name", "==", "'normal_fix'", ":", "\n", "        ", "lik_cls", "=", "NormalLikelihoodFixStd", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "lik_cls", "(", "domain_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer": [[6, 19], ["None"], "function", ["None"], ["def", "get_optimizer", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "Cte", ".", "ADAM", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "\n", "", "elif", "name", "==", "Cte", ".", "ADAGRAD", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "\n", "", "elif", "name", "==", "Cte", ".", "ADADELTA", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adadelta", "\n", "", "elif", "name", "==", "Cte", ".", "RMS", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "RMSprop", "\n", "", "elif", "name", "==", "Cte", ".", "ASGD", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "ASGD", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler": [[21, 28], ["None"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "Cte", ".", "STEP_LR", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "\n", "", "elif", "name", "==", "Cte", ".", "EXP_LR", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.metrics.accuracy": [[5, 10], ["preds.argmax.argmax", "len"], "function", ["None"], ["def", "accuracy", "(", "preds", ",", "targets", ",", "one_hot_preds", "=", "True", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "one_hot_preds", ":", "\n", "        ", "preds", "=", "preds", ".", "argmax", "(", "dim", "=", "dim", ")", "\n", "\n", "", "return", "(", "preds", "==", "targets", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "len", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.metrics.kl_divergence_normal": [[12, 20], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.kl_divergence", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.exp"], "function", ["None"], ["", "def", "kl_divergence_normal", "(", "mu1", ",", "log_std1", ",", "mu2", "=", "None", ",", "log_std2", "=", "None", ")", ":", "\n", "    ", "q", "=", "Normal", "(", "mu1", ",", "torch", ".", "exp", "(", "log_std1", ")", ")", "\n", "if", "mu2", "==", "None", "or", "log_std2", "==", "None", ":", "\n", "        ", "mu2", "=", "torch", ".", "zeros_like", "(", "mu1", ")", "\n", "log_std2", "=", "torch", ".", "zeros_like", "(", "log_std1", ")", "\n", "", "p", "=", "Normal", "(", "mu2", ",", "torch", ".", "exp", "(", "log_std2", ")", ")", "\n", "\n", "return", "torch", ".", "distributions", ".", "kl_divergence", "(", "q", ",", "p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "timer_dict", "=", "{", "}", "\n", "self", ".", "stop_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic": [[10, 12], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "timer_dict", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc": [[13, 18], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "name", "in", "self", ".", "timer_dict", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "timer_dict", "[", "name", "]", "\n", "del", "self", ".", "timer_dict", "[", "name", "]", "\n", "return", "elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.stop": [[19, 21], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "stop_dict", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.resume": [[22, 29], ["time.time"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "timer_dict", ":", "\n", "            ", "del", "self", ".", "stop_dict", "[", "name", "]", "\n", "return", "\n", "", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "stop_dict", "[", "name", "]", "\n", "self", ".", "timer_dict", "[", "name", "]", "=", "self", ".", "timer_dict", "[", "name", "]", "+", "elapsed", "\n", "del", "self", ".", "stop_dict", "[", "name", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.mmd.MMDLoss.__init__": [[26, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "num_samples", "=", "None", ")", ":", "\n", "        ", "super", "(", "MMDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_num", "=", "kernel_num", "\n", "self", ".", "kernel_mul", "=", "kernel_mul", "\n", "self", ".", "fix_sigma", "=", "None", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.mmd.MMDLoss.forward": [[34, 54], ["int", "mmd.guassian_kernel", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "source.view.view.view", "len", "target.view.view.view", "source.view.view.size", "random.choices", "int", "source.view.view.size", "target.view.view.size", "list", "range", "source.view.view.size"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.mmd.guassian_kernel", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "forward", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "if", "self", ".", "num_samples", "is", "not", "None", ":", "\n", "            ", "if", "batch_size", ">", "self", ".", "num_samples", ":", "\n", "                ", "idx", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "batch_size", ")", ")", ",", "k", "=", "self", ".", "num_samples", ")", "\n", "source", "=", "source", "[", "idx", "]", "\n", "target", "=", "target", "[", "idx", "]", "\n", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "", "", "if", "len", "(", "source", ".", "size", "(", ")", ")", ">", "2", ":", "\n", "            ", "source", "=", "source", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "len", "(", "target", ".", "size", "(", ")", ")", ">", "2", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "self", ".", "kernel_mul", ",", "kernel_num", "=", "self", ".", "kernel_num", ",", "\n", "fix_sigma", "=", "self", ".", "fix_sigma", ")", "\n", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", "+", "YY", "-", "XY", "-", "YX", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.metrics.mmd.guassian_kernel": [[7, 23], ["torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], ["def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "#", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "return", "sum", "(", "kernel_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.transforms.ToTensor.__call__": [[7, 9], ["torch.tensor"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.transforms.ToTensor.__repr__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.transforms.ToOneHot.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_dims", "=", "10", ")", ":", "\n", "        ", "self", ".", "n_dims", "=", "n_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.transforms.ToOneHot.__call__": [[19, 24], ["torch.FloatTensor", "torch.FloatTensor.zero_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "self", ".", "n_dims", ")", "\n", "y_onehot", ".", "zero_", "(", ")", "\n", "y_onehot", "[", "target", "]", "=", "1", "\n", "return", "y_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.transforms.ToOneHot.__repr__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.collider.ColliderSCM.__init__": [[8, 72], ["datasets.toy.ToySCM.__init__", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal", "np.sign"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_cb'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "0.05", "*", "x1", "+", "0.25", "*", "x2", "+", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONLINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "0.05", "*", "x1", "+", "0.25", "*", "x2", "**", "2", "+", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "0.1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONADDITIVE", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "-", "1", "+", "0.1", "*", "np", ".", "sign", "(", "u3", ")", "*", "(", "x1", "**", "2", "+", "x2", "**", "2", ")", "*", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2.5", ",", "2.5", "]", ",", "vars", "=", "[", "1", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "0.25", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "0.25", "**", "2", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "COLLIDER", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "'x1'", ",", "'x2'", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "{", "'x1'", ":", "[", "'x3'", "]", ",", "\n", "'x2'", ":", "[", "'x3'", "]", ",", "\n", "'x3'", ":", "[", "]", "}", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.mgraph.MGraphSCM.__init__": [[8, 96], ["datasets.toy.ToySCM.__init__", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal", "Normal"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_d_d_d'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_dir: path to data directory\n            train: whether to load the training subset (``True``, ``'train-*'`` files) or the test\n                subset (``False``, ``'t10k-*'`` files)\n            columns: list of morphometrics to load; by default (``None``) loads the image index and\n                all available metrics: area, length, thickness, slant, width, and height\n        \"\"\"", "\n", "\n", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ":", "x1", "+", "u3", ",", "\n", "'x4'", ":", "lambda", "u4", ",", "x1", ",", "x2", ":", "-", "x2", "+", "0.5", "*", "x1", "+", "u4", ",", "\n", "'x5'", ":", "lambda", "u5", ",", "x2", ":", "-", "1.5", "*", "x2", "+", "u5", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x4'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x5'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONLINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ":", "x1", "+", "0.5", "*", "x1", "**", "2", "+", "u3", ",", "\n", "'x4'", ":", "lambda", "u4", ",", "x1", ",", "x2", ":", "-", "x2", "+", "0.5", "*", "x1", "**", "2", "+", "u4", ",", "\n", "'x5'", ":", "lambda", "u5", ",", "x2", ":", "-", "1.5", "*", "x2", "**", "2", "+", "u5", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x4'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x5'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONADDITIVE", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ":", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ":", "(", "x1", ")", "*", "u3", ",", "\n", "'x4'", ":", "lambda", "u4", ",", "x1", ",", "x2", ":", "(", "-", "x2", "+", "0.5", "*", "x1", "**", "2", ")", "*", "u4", ",", "\n", "'x5'", ":", "lambda", "u5", ",", "x2", ":", "(", "-", "1.5", "*", "x2", "**", "2", ")", "*", "u5", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "Normal", "(", "0", ",", "1", ")", ",", "# MixtureOfGaussians(probs=[0.5, 0.5], means=[-2.5, 2.5], vars=[1, 1]),", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x4'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x5'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "MGRAPH", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "'x1'", ",", "'x2'", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "{", "'x1'", ":", "[", "'x3'", ",", "'x4'", "]", ",", "\n", "'x2'", ":", "[", "'x4'", ",", "'x5'", "]", ",", "\n", "'x3'", ":", "[", "]", ",", "\n", "'x4'", ":", "[", "]", ",", "\n", "'x5'", ":", "[", "]", "}", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.ToySCM.__init__": [[13, 56], ["len", "likelihood_names.split.split.split", "zip", "datasets._heterogeneous.HeterogeneousSCM.__init__", "len", "len", "len", "len", "structural_eq.keys", "noises_distr.keys", "range"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "name", ":", "str", "=", "'chain'", ",", "\n", "eq_type", ":", "str", "=", "Cte", ".", "LINEAR", ",", "\n", "nodes_to_intervene", ":", "list", "=", "None", ",", "\n", "structural_eq", ":", "dict", "=", "None", ",", "\n", "noises_distr", ":", "dict", "=", "None", ",", "\n", "adj_edges", ":", "dict", "=", "None", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_cb'", ",", "\n", "lambda_", ":", "float", "=", "0.05", ",", "\n", "transform", "=", "None", ",", "\n", "nodes_list", "=", "None", ",", "\n", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "_num_samples", "=", "num_samples", "\n", "self", ".", "eq_type", "=", "eq_type", "\n", "num_nodes", "=", "len", "(", "structural_eq", ")", "\n", "\n", "likelihood_names", "=", "likelihood_names", ".", "split", "(", "'_'", ")", "\n", "if", "len", "(", "likelihood_names", ")", "==", "1", ":", "\n", "            ", "likelihood_names", "=", "[", "likelihood_names", "[", "0", "]", ",", "]", "*", "num_nodes", "\n", "", "self", ".", "likelihood_names", "=", "likelihood_names", "\n", "assert", "num_nodes", "==", "len", "(", "noises_distr", ")", "\n", "assert", "num_nodes", "==", "len", "(", "adj_edges", ")", "\n", "assert", "num_nodes", "==", "len", "(", "self", ".", "likelihood_names", ")", "\n", "\n", "if", "nodes_list", "is", "None", ":", "\n", "            ", "nodes_list", "=", "[", "f'x{i + 1}'", "for", "i", "in", "range", "(", "num_nodes", ")", "]", "\n", "\n", "", "for", "key_eq", ",", "key_n", "in", "zip", "(", "structural_eq", ".", "keys", "(", ")", ",", "noises_distr", ".", "keys", "(", ")", ")", ":", "\n", "            ", "assert", "key_eq", "==", "key_n", ",", "'Keys for the SE and Noise distribution should be the same'", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "transform", "=", "transform", ",", "\n", "nodes_to_intervene", "=", "nodes_to_intervene", ",", "\n", "nodes_list", "=", "nodes_list", ",", "\n", "adj_edges", "=", "adj_edges", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "lambda_", "=", "lambda_", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.ToySCM.likelihoods": [[58, 68], ["enumerate", "likelihoods_tmp.append", "toy.ToySCM._get_lik"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik"], ["", "@", "property", "\n", "def", "likelihoods", "(", "self", ")", ":", "\n", "        ", "likelihoods_tmp", "=", "[", "]", "\n", "\n", "for", "i", ",", "lik_name", "in", "enumerate", "(", "self", ".", "likelihood_names", ")", ":", "\n", "            ", "likelihoods_tmp", ".", "append", "(", "[", "self", ".", "_get_lik", "(", "lik_name", ",", "\n", "dim", "=", "1", ",", "\n", "normalize", "=", "'dim'", ")", "]", ")", "\n", "\n", "", "return", "likelihoods_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.ToySCM.std_list": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "std_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "-", "1", ",", "0.5", ",", "0.1", ",", "0.1", ",", "0.5", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.ToySCM._create_data": [[73, 96], ["np.zeros", "np.zeros", "utils.args_parser.mkdir", "os.path.join", "os.path.join", "np.load.astype", "np.load.astype", "os.path.join", "os.path.exists", "os.path.exists", "np.load", "np.load", "range", "np.save", "np.save", "toy.ToySCM.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "def", "_create_data", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "[", "self", ".", "_num_samples", ",", "self", ".", "num_dimensions", "]", ")", "\n", "U", "=", "np", ".", "zeros", "(", "[", "self", ".", "_num_samples", ",", "self", ".", "num_nodes", "]", ")", "\n", "\n", "folder", "=", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "f'{self.name}_{self.eq_type}'", ")", ")", "\n", "\n", "X_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{self.split}_{self._num_samples}_X.npy'", ")", "\n", "U_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{self.split}_{self._num_samples}_U.npy'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "X_file", ")", "and", "os", ".", "path", ".", "exists", "(", "U_file", ")", ":", "\n", "            ", "X", "=", "np", ".", "load", "(", "X_file", ")", "\n", "U", "=", "np", ".", "load", "(", "U_file", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "_num_samples", ")", ":", "\n", "                ", "x", ",", "u", "=", "self", ".", "sample", "(", ")", "\n", "X", "[", "i", ",", ":", "]", "=", "x", "\n", "U", "[", "i", ",", ":", "]", "=", "u", "\n", "\n", "", "np", ".", "save", "(", "X_file", ",", "X", ")", "\n", "np", ".", "save", "(", "U_file", ",", "U", ")", "\n", "\n", "", "self", ".", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "U", "=", "U", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.ToySCM.node_is_image": [[97, 99], ["None"], "methods", ["None"], ["", "def", "node_is_image", "(", "self", ")", ":", "\n", "        ", "return", "[", "False", "for", "_", "in", "self", ".", "num_nodes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.toy.create_toy_dataset": [[101, 126], ["toy.ToySCM"], "function", ["None"], ["", "", "def", "create_toy_dataset", "(", "root_dir", ",", "\n", "name", ":", "str", "=", "'chain'", ",", "\n", "eq_type", ":", "str", "=", "Cte", ".", "LINEAR", ",", "\n", "nodes_to_intervene", ":", "list", "=", "None", ",", "\n", "structural_eq", ":", "dict", "=", "None", ",", "\n", "noises_distr", ":", "dict", "=", "None", ",", "\n", "adj_edges", ":", "dict", "=", "None", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_cb'", ",", "\n", "lambda_", ":", "float", "=", "0.05", ",", "\n", "transform", "=", "None", ")", ":", "\n", "\n", "    ", "return", "ToySCM", "(", "root_dir", ",", "\n", "name", ",", "\n", "eq_type", ",", "\n", "nodes_to_intervene", ",", "\n", "structural_eq", ",", "\n", "noises_distr", ",", "\n", "adj_edges", ",", "\n", "split", ",", "\n", "num_samples", ",", "\n", "likelihood_names", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "transform", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.loan.LoanSCM.__init__": [[8, 105], ["datasets.toy.ToySCM.__init__", "Bernoulli", "Gamma", "Normal", "Normal", "Normal", "Normal", "Normal", "np.exp", "np.exp"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_cb'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_dir: path to data directory\n            train: whether to load the training subset (``True``, ``'train-*'`` files) or the test\n                subset (``False``, ``'t10k-*'`` files)\n            columns: list of morphometrics to load; by default (``None``) loads the image index and\n                all available metrics: area, length, thickness, slant, width, and height\n        \"\"\"", "\n", "\n", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "            ", "e_0", "=", "-", "1", "\n", "e_G", "=", "0.5", "\n", "e_A", "=", "1", "\n", "\n", "l_0", "=", "1", "\n", "l_A", "=", ".01", "\n", "l_G", "=", "1", "\n", "\n", "d_0", "=", "-", "1", "\n", "d_A", "=", ".1", "\n", "d_G", "=", "2", "\n", "d_L", "=", "1", "\n", "\n", "i_0", "=", "-", "4", "\n", "i_A", "=", ".1", "\n", "i_G", "=", "2", "\n", "# i_E = 10", "\n", "i_GE", "=", "1", "\n", "\n", "s_0", "=", "-", "4", "\n", "s_I", "=", "1.5", "\n", "\n", "structural_eq", "=", "{", "\n", "# Gender", "\n", "'x1'", ":", "lambda", "u1", ",", ":", "u1", ",", "\n", "# Age", "\n", "'x2'", ":", "lambda", "u2", ",", ":", "-", "35", "+", "u2", ",", "\n", "# Education", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "-", "0.5", "+", "(", "\n", "1", "+", "np", ".", "exp", "(", "-", "(", "e_0", "+", "e_G", "*", "x1", "+", "e_A", "*", "(", "1", "+", "np", ".", "exp", "(", "-", ".1", "*", "(", "x2", ")", ")", ")", "**", "(", "-", "1", ")", "+", "u3", ")", ")", ")", "**", "(", "-", "1", ")", ",", "\n", "# Loan amount", "\n", "'x4'", ":", "lambda", "u4", ",", "x1", ",", "x2", ":", "l_0", "+", "l_A", "*", "(", "x2", "-", "5", ")", "*", "(", "5", "-", "x2", ")", "+", "l_G", "*", "x1", "+", "u4", ",", "\n", "# Loan duration", "\n", "'x5'", ":", "lambda", "u5", ",", "x1", ",", "x2", ",", "x4", ":", "d_0", "+", "d_A", "*", "x2", "+", "d_G", "*", "x1", "+", "d_L", "*", "x4", "+", "u5", ",", "\n", "# Income", "\n", "'x6'", ":", "lambda", "u6", ",", "x1", ",", "x2", ",", "x3", ":", "i_0", "+", "i_A", "*", "(", "x2", "+", "35", ")", "+", "i_G", "*", "x1", "+", "i_GE", "*", "x1", "*", "x3", "+", "u6", ",", "\n", "# Savings", "\n", "'x7'", ":", "lambda", "u7", ",", "x6", ":", "s_0", "+", "s_I", "*", "(", "x6", ">", "0", ")", "*", "x6", "+", "u7", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "# Gender", "\n", "'x1'", ":", "Bernoulli", "(", "0.5", ")", ",", "\n", "# Age", "\n", "'x2'", ":", "Gamma", "(", "10", ",", "3.5", ")", ",", "\n", "# Education", "\n", "'x3'", ":", "Normal", "(", "0", ",", "0.5", "**", "2", ")", ",", "\n", "# Loan amount", "\n", "'x4'", ":", "Normal", "(", "0", ",", "2", "**", "2", ")", ",", "\n", "# Loan duration", "\n", "'x5'", ":", "Normal", "(", "0", ",", "3", "**", "2", ")", ",", "\n", "# Income", "\n", "'x6'", ":", "Normal", "(", "0", ",", "2", "**", "2", ")", ",", "\n", "# Savings", "\n", "'x7'", ":", "Normal", "(", "0", ",", "5", "**", "2", ")", ",", "\n", "}", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "LOAN", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "'x1'", ",", "'x2'", ",", "'x4'", ",", "'x6'", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "{", "'x1'", ":", "[", "'x3'", ",", "'x4'", ",", "'x5'", ",", "'x6'", "]", ",", "\n", "'x2'", ":", "[", "'x3'", ",", "'x4'", ",", "'x5'", ",", "'x6'", "]", ",", "\n", "'x3'", ":", "[", "'x6'", "]", ",", "\n", "'x4'", ":", "[", "'x5'", "]", ",", "\n", "'x5'", ":", "[", "]", ",", "\n", "'x6'", ":", "[", "'x7'", "]", ",", "\n", "'x7'", ":", "[", "]", "}", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM.__init__": [[9, 36], ["np.load", "np.load", "datasets._heterogeneous.HeterogeneousSCM.__init__", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples_tr", ":", "int", "=", "800", ",", "\n", "lambda_", ":", "float", "=", "0.05", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "\n", "\n", "self", ".", "name", "=", "'german'", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_samples_tr", "=", "num_samples_tr", "\n", "self", ".", "X_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'german_data'", ",", "'train_1_X.npy'", ")", ")", "\n", "self", ".", "X_valid", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'german_data'", ",", "'test_valid_1_X.npy'", ")", ")", "\n", "\n", "self", ".", "Y", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "transform", "=", "transform", ",", "\n", "nodes_to_intervene", "=", "[", "'age'", "]", ",", "\n", "structural_eq", "=", "None", ",", "\n", "noises_distr", "=", "None", ",", "\n", "nodes_list", "=", "[", "'sex'", ",", "'age'", ",", "'R'", ",", "'S'", "]", ",", "\n", "adj_edges", "=", "{", "'sex'", ":", "[", "'R'", ",", "'S'", "]", ",", "# A#excluding 16", "\n", "'age'", ":", "[", "'R'", ",", "'S'", "]", ",", "# Age", "\n", "'R'", ":", "[", "]", ",", "\n", "'S'", ":", "[", "]", ",", "\n", "}", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM.likelihoods": [[38, 58], ["likelihoods_tmp.append", "likelihoods_tmp.append", "likelihoods_tmp.append", "likelihoods_tmp.append", "german.GermanSCM._get_lik", "german.GermanSCM._get_lik", "german.GermanSCM._get_lik", "german.GermanSCM._get_lik", "german.GermanSCM._get_lik", "german.GermanSCM._get_lik"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik"], ["", "@", "property", "\n", "def", "likelihoods", "(", "self", ")", ":", "\n", "        ", "likelihoods_tmp", "=", "[", "]", "\n", "# lik_node_sex = [self._get_lik('b',dim=1,normalize='dim')]", "\n", "# likelihoods_tmp.append(lik_node_sex)", "\n", "lik_node_sex", "=", "[", "self", ".", "_get_lik", "(", "'d'", ",", "dim", "=", "1", ",", "normalize", "=", "None", ")", "]", "\n", "likelihoods_tmp", ".", "append", "(", "lik_node_sex", ")", "\n", "\n", "lik_node_age", "=", "[", "self", ".", "_get_lik", "(", "'d'", ",", "dim", "=", "1", ",", "normalize", "=", "'dim'", ")", "]", "\n", "likelihoods_tmp", ".", "append", "(", "lik_node_age", ")", "\n", "\n", "lik_node_R", "=", "[", "self", ".", "_get_lik", "(", "'d'", ",", "dim", "=", "2", ",", "normalize", "=", "'dim'", ")", "]", "\n", "likelihoods_tmp", ".", "append", "(", "lik_node_R", ")", "\n", "\n", "lik_node_S", "=", "[", "self", ".", "_get_lik", "(", "'c'", ",", "dim", "=", "3", ",", "normalize", "=", "'dim'", ")", ",", "\n", "self", ".", "_get_lik", "(", "'c'", ",", "dim", "=", "5", ",", "normalize", "=", "'dim'", ")", ",", "\n", "self", ".", "_get_lik", "(", "'c'", ",", "dim", "=", "4", ",", "normalize", "=", "'dim'", ")", "]", "\n", "likelihoods_tmp", ".", "append", "(", "lik_node_S", ")", "\n", "\n", "return", "likelihoods_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM._create_data": [[59, 72], ["np.concatenate", "german.GermanSCM.X[].copy", "np.zeros"], "methods", ["None"], ["", "def", "_create_data", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "concatenate", "(", "[", "self", ".", "X_train", ",", "self", ".", "X_valid", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "X", "=", "X", "[", ":", "self", ".", "num_samples_tr", "]", "\n", "", "elif", "self", ".", "split", "==", "'valid'", ":", "\n", "            ", "num_samples", "=", "(", "X", ".", "shape", "[", "0", "]", "-", "self", ".", "num_samples_tr", ")", "//", "2", "\n", "self", ".", "X", "=", "X", "[", "self", ".", "num_samples_tr", ":", "(", "self", ".", "num_samples_tr", "+", "num_samples", ")", "]", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "num_samples", "=", "(", "X", ".", "shape", "[", "0", "]", "-", "self", ".", "num_samples_tr", ")", "//", "2", "\n", "self", ".", "X", "=", "X", "[", "-", "num_samples", ":", "]", "\n", "", "self", ".", "Y", "=", "self", ".", "X", "[", ":", ",", "-", "1", "]", ".", "copy", "(", ")", "\n", "self", ".", "X", "=", "self", ".", "X", "[", ":", ",", ":", "-", "1", "]", "\n", "self", ".", "U", "=", "np", ".", "zeros", "(", "[", "self", ".", "X", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM.node_is_image": [[73, 75], ["None"], "methods", ["None"], ["", "def", "node_is_image", "(", "self", ")", ":", "\n", "        ", "return", "[", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM.get_attributes_dict": [[76, 84], ["list", "range"], "methods", ["None"], ["", "def", "get_attributes_dict", "(", "self", ")", ":", "\n", "# TODO:  Makes this more general", "\n", "        ", "unfair_attributes", "=", "list", "(", "range", "(", "2", ",", "16", ")", ")", "# R, S", "\n", "fair_attributes", "=", "[", "1", "]", "# Age", "\n", "sensitive_attributes", "=", "[", "0", "]", "# Sex", "\n", "return", "{", "'unfair_attributes'", ":", "unfair_attributes", ",", "\n", "'fair_attributes'", ":", "fair_attributes", ",", "\n", "'sens_attributes'", ":", "sensitive_attributes", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.__init__": [[23, 84], ["len", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ":", "str", ",", "\n", "transform", ":", "Any", ",", "\n", "nodes_to_intervene", ":", "List", "[", "str", "]", ",", "\n", "nodes_list", ":", "List", "[", "str", "]", ",", "\n", "adj_edges", ":", "Dict", "[", "str", ",", "list", "]", ",", "\n", "structural_eq", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "noises_distr", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "lambda_", ":", "float", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Base class for the SCM based datasets.\n        Args:\n            root_dir:\n            transform:\n            nodes_to_intervene:\n                The list of strings with the identifier of the nodes in which we would like to intervene. E.g., ['a', 'b']\n            nodes_list:\n                The list of strings with the identifier for each node. E.g., ['a', 'b']\n            adj_edges:\n                Dictionary of edges. Keys are the parents and values are list of children. E.g., {'a': ['b'], 'b': []}.\n            structural_eq:\n                Dictionary of functions. Keys are nodes and values are the function representing the strcutural equation.\n                If true SCM is unknown this parameter should be None\n            noises_distr:\n                Dictionary of noise distributions. Keys are nodes and values are the function representing the noise distributions.\n                If true SCM is unknown this parameter should be None\n            lambda_:\n                The parameter for the DeltaLikelihood.\n        \"\"\"", "\n", "\n", "assert", "lambda_", ">", "0.0", ",", "'Lambda should be a positive real number!'", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "nodes_list", "=", "nodes_list", "# List of nodes. E.g., ['a', 'b']", "\n", "self", ".", "adj_edges", "=", "adj_edges", "# Dictionary of edges. E.g., {'a': ['b'], 'b': []}", "\n", "self", ".", "structural_eq", "=", "structural_eq", "\n", "self", ".", "noises_distr", "=", "noises_distr", "\n", "\n", "self", ".", "num_nodes", "=", "len", "(", "nodes_list", ")", "\n", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "\n", "self", ".", "has_ground_truth", "=", "isinstance", "(", "structural_eq", ",", "dict", ")", "and", "isinstance", "(", "noises_distr", ",", "dict", ")", "\n", "\n", "# X represent the featues without the zeros", "\n", "self", ".", "X", "=", "None", "\n", "self", ".", "U", "=", "None", "# The exogenous variables are only available when has_ground_truth=True", "\n", "\n", "# X0 represents the features with filling with zeros", "\n", "self", ".", "X0", ",", "self", ".", "mask_X0", "=", "None", ",", "None", "\n", "self", ".", "dim_of_x_in_x0", "=", "None", "\n", "self", ".", "total_num_dim_x0", "=", "None", "\n", "\n", "# Intervention variables", "\n", "self", ".", "x_I", "=", "None", "# Set variables intervened", "\n", "self", ".", "I_noise", "=", "False", "\n", "\n", "self", ".", "adj_object", "=", "None", "\n", "self", ".", "nodes_to_intervene", "=", "nodes_to_intervene", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.node_dim": [[85, 99], ["_heterogeneous.HeterogeneousSCM.get_node_dimensions", "list", "set", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "@", "property", "\n", "def", "node_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This should raise an error whenever nodes have different dimensions\n        Returns: integer with the number of dimensions of each node\n\n        \"\"\"", "\n", "node_dim_list", "=", "self", ".", "get_node_dimensions", "(", ")", "\n", "node_dim_list", "=", "list", "(", "set", "(", "node_dim_list", ")", ")", "\n", "\n", "if", "len", "(", "node_dim_list", ")", ">", "1", ":", "\n", "            ", "raise", "IsHeterogeneousError", "\n", "", "else", ":", "\n", "            ", "return", "node_dim_list", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.node_per_dimension_list": [[100, 114], ["_heterogeneous.HeterogeneousSCM.get_node_dimensions", "enumerate", "output.extend"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "", "@", "property", "\n", "def", "node_per_dimension_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is a List of intergers. Element i contains the node_id of the i-th column in self.X\n        Returns:\n            List of ints.\n        \"\"\"", "\n", "\n", "node_dim_list", "=", "self", ".", "get_node_dimensions", "(", ")", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "node_dim_list", ")", ":", "\n", "            ", "output", ".", "extend", "(", "[", "self", ".", "nodes_list", "[", "i", "]", ",", "]", "*", "dim", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.likelihoods": [[115, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "likelihoods", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        List of lists.\n            i-th element of the outer list contains a List of likelihood for the i-th node\n            j-th element of the inner list contains the likelihood for the j-th (group of) dimension(s) of the node.\n        Returns:\n            List of lists with Likelihood objects\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.std_list": [[126, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "std_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Values (proportional to the standard deviation) to be intervened-on.\n        E.g.,  X_intervened = X_mean + std_list[0]\n        Returns:\n            List of ints\n        \"\"\"", "\n", "return", "[", "-", "1", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.var_to_idx": [[136, 144], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "var_to_idx", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Mapping from node_name to index\n        Returns:\n            Dict[str, int]\n        \"\"\"", "\n", "return", "{", "node", ":", "i", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "nodes_list", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.is_heterogeneous": [[145, 169], ["_heterogeneous.HeterogeneousSCM.get_node_dimensions", "list", "flatten", "list", "set", "len", "list.append", "set", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "@", "property", "\n", "def", "is_heterogeneous", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Flag to check if the SCM heterogeneous. An SCM is heterogeneous if\n            - Nodes have different dimensions\n            - Nodes have different likelihoods\n        Returns:\n\n        \"\"\"", "\n", "node_dim_list", "=", "self", ".", "get_node_dimensions", "(", ")", "\n", "node_dim_list", "=", "list", "(", "set", "(", "node_dim_list", ")", ")", "\n", "\n", "if", "len", "(", "node_dim_list", ")", ">", "1", ":", "\n", "            ", "return", "True", "\n", "\n", "", "likelihood_names", "=", "[", "]", "\n", "for", "lik", "in", "flatten", "(", "self", ".", "likelihoods", ")", ":", "\n", "            ", "likelihood_names", ".", "append", "(", "lik", ".", "name", ")", "\n", "", "likelihood_names", "=", "list", "(", "set", "(", "likelihood_names", ")", ")", "\n", "\n", "if", "len", "(", "likelihood_names", ")", ">", "1", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.likelihood_list": [[170, 185], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "likelihood_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        if the SCM is heterogeneous return likelihoods\n        if the SCM is not heterogeneous return the likelihood object (which is shared by all the nodes)\n        Returns:\n            List[List[Likelihoods]]\n            or\n            Likelihood\n        \"\"\"", "\n", "if", "self", ".", "is_heterogeneous", ":", "\n", "\n", "            ", "return", "self", ".", "likelihoods", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "likelihoods", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.largest_node_dim": [[186, 194], ["max", "_heterogeneous.HeterogeneousSCM.get_node_dimensions"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "", "@", "property", "\n", "def", "largest_node_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The largest dimension among the dimensions of the nodes in the SCM.\n        Returns:\n\n        \"\"\"", "\n", "return", "max", "(", "self", ".", "get_node_dimensions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.num_edges": [[195, 198], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_edges", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "adj_object", ".", "num_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.num_samples": [[199, 202], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.num_dimensions": [[203, 211], ["sum", "_heterogeneous.HeterogeneousSCM.get_node_dimensions"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "@", "property", "\n", "def", "num_dimensions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Total number of dimensions in the SCM. E.g., this variable is num_nodes if the SCM is homogeneous with unidimensional nodes.\n        Returns:\n            int\n        \"\"\"", "\n", "return", "sum", "(", "self", ".", "get_node_dimensions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.num_parameters": [[212, 221], ["flatten", "sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The total number of likelihood parameters in the SCM.\n        Returns:\n\n        \"\"\"", "\n", "likelihoods", "=", "flatten", "(", "self", ".", "likelihoods", ")", "\n", "return", "sum", "(", "[", "lik", ".", "params_size", "for", "lik", "in", "likelihoods", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik": [[224, 246], ["utils.DeltaLikelihood", "utils.ContinousBernoulliLikelihood", "utils.BernoulliLikelihood", "utils.CategoricalLikelihood"], "methods", ["None"], ["", "def", "_get_lik", "(", "self", ",", "lik_str", ":", "str", ",", "\n", "dim", ":", "int", ",", "\n", "normalize", ")", ":", "\n", "        ", "\"\"\"\n        Likelihood object according given a name and dimensions. Also, we can specify if we want to normalize this likelihood\n        Args:\n            lik_str: Name (abbreviated) of the distribution.\n            dim: dimension of the distribution\n            normalize: normalization mode\n        Returns:\n            BaseLikelihood object\n        \"\"\"", "\n", "if", "lik_str", "==", "'d'", ":", "\n", "            ", "return", "ul", ".", "DeltaLikelihood", "(", "dim", ",", "lambda_", "=", "self", ".", "lambda_", ",", "normalize", "=", "normalize", ")", "\n", "", "elif", "lik_str", "==", "'cb'", ":", "\n", "            ", "return", "ul", ".", "ContinousBernoulliLikelihood", "(", "dim", ",", "normalize", "=", "normalize", ")", "\n", "", "elif", "lik_str", "==", "'b'", ":", "\n", "            ", "return", "ul", ".", "BernoulliLikelihood", "(", "dim", ",", "normalize", "=", "normalize", ")", "\n", "", "elif", "lik_str", "==", "'c'", ":", "\n", "            ", "return", "ul", ".", "CategoricalLikelihood", "(", "dim", ",", "normalize", "=", "normalize", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_G": [[247, 258], ["_heterogeneous.HeterogeneousSCM.dag.copy", "np.fill_diagonal", "networkx.convert_matrix.from_numpy_array"], "methods", ["None"], ["", "", "def", "_get_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the adjacency matrix into a networkx Directed graph\n        Returns:\n\n        \"\"\"", "\n", "adj", "=", "self", ".", "dag", ".", "copy", "(", ")", "\n", "\n", "np", ".", "fill_diagonal", "(", "adj", ",", "0.0", ")", "\n", "G", "=", "nx", ".", "convert_matrix", ".", "from_numpy_array", "(", "adj", ",", "create_using", "=", "nx", ".", "DiGraph", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x_from_x0": [[259, 269], ["flatten"], "methods", ["None"], ["", "def", "_get_x_from_x0", "(", "self", ",", "x0", ")", ":", "\n", "        ", "\"\"\"\n        Convert the extended samples matrix x0 into the samples matrix x. In other words, remove the redundant columns containing 0s.\n        Args:\n            x0:\n\n        Returns:\n\n        \"\"\"", "\n", "return", "x0", "[", ":", ",", "flatten", "(", "self", ".", "dim_of_x_in_x0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa": [[270, 289], ["_heterogeneous.HeterogeneousSCM._get_G", "list", "range", "range", "topological_parents.append", "list", "_heterogeneous.HeterogeneousSCM.predecessors"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_G"], ["", "def", "get_topological_nodes_pa", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns topological_nodes, topological_parents\n\n        len(topological_nodes) == num_node is a list the ids of the nodes in topological order\n\n        topological_parents = [pa_1, ..., pa_num_nodes] each pa_i is a list that contains the ids\n        of the parents according to the ordering in topological_nodes\n        '''", "\n", "\n", "G", "=", "self", ".", "_get_G", "(", ")", "\n", "topological_nodes", "=", "list", "(", "range", "(", "self", ".", "num_nodes", ")", ")", "\n", "\n", "topological_parents", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "topological_parents", ".", "append", "(", "list", "(", "G", ".", "predecessors", "(", "i", ")", ")", ")", "\n", "\n", "", "return", "topological_nodes", ",", "topological_parents", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample": [[290, 309], ["_heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "zip", "np.concatenate", "np.concatenate", "len", "_heterogeneous.HeterogeneousSCM.sample_obs", "_heterogeneous.HeterogeneousSCM.sample_obs"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs"], ["", "def", "sample", "(", "self", ",", "n_samples", "=", "1", ")", ":", "\n", "\n", "        ", "nodes_list", ",", "parents_list", "=", "self", ".", "get_topological_nodes_pa", "(", ")", "\n", "\n", "x", "=", "{", "}", "\n", "u", "=", "{", "}", "\n", "\n", "for", "obs_i", ",", "pa_i", "in", "zip", "(", "nodes_list", ",", "parents_list", ")", ":", "\n", "            ", "if", "len", "(", "pa_i", ")", "==", "0", ":", "\n", "                ", "xi", ",", "ui", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "                ", "parents_dict", "=", "{", "self", ".", "nodes_list", "[", "pa_ij", "]", ":", "x", "[", "self", ".", "nodes_list", "[", "pa_ij", "]", "]", "for", "pa_ij", "in", "pa_i", "}", "\n", "xi", ",", "ui", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "parents_dict", "=", "parents_dict", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "x", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "=", "xi", "\n", "u", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "=", "ui", "\n", "", "x", "=", "np", ".", "concatenate", "(", "[", "x", "[", "k", "]", "for", "k", "in", "self", ".", "nodes_list", "]", ",", "axis", "=", "1", ")", "\n", "u", "=", "np", ".", "concatenate", "(", "[", "u", "[", "k", "]", "for", "k", "in", "self", ".", "nodes_list", "]", ",", "axis", "=", "1", ")", "\n", "return", "x", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._sample_noise": [[310, 317], ["np.array", "_heterogeneous.HeterogeneousSCM.noises_distr[].sample", "len", "np.array().astype", "len", "u.reshape().astype.reshape().astype.reshape().astype", "np.array", "u.reshape().astype.reshape().astype.reshape"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "def", "_sample_noise", "(", "self", ",", "node_name", ",", "n_samples", ")", ":", "\n", "        ", "u", "=", "np", ".", "array", "(", "self", ".", "noises_distr", "[", "node_name", "]", ".", "sample", "(", "n_samples", ")", ")", "\n", "if", "len", "(", "u", ".", "shape", ")", "==", "0", ":", "\n", "            ", "u", "=", "np", ".", "array", "(", "[", "[", "u", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "len", "(", "u", ".", "shape", ")", "==", "1", ":", "\n", "            ", "u", "=", "u", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_obs": [[318, 349], ["np.zeros.copy.astype", "len", "flatten", "_heterogeneous.HeterogeneousSCM._sample_noise", "isinstance", "f", "f", "np.zeros", "range", "np.zeros.copy", "print"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._sample_noise"], ["", "def", "sample_obs", "(", "self", ",", "obs_id", ",", "parents_dict", "=", "None", ",", "n_samples", "=", "1", ",", "u", "=", "None", ")", ":", "\n", "        ", "'''\n        Only possible if the true Structural Eauations are known\n        f = self.structural_eq[f'x{obs_id}']\n        if u is None:\n            u = np.array(self.noises_distr[f'u{obs_id}'].sample(n_samples))\n\n        if not isinstance(parents_dict, dict):\n            return f(u), u\n        else:\n            return f(u, **parents_dict), u\n        '''", "\n", "assert", "obs_id", "<", "len", "(", "self", ".", "nodes_list", ")", "\n", "node_name", "=", "self", ".", "nodes_list", "[", "obs_id", "]", "\n", "lik", "=", "flatten", "(", "self", ".", "likelihoods", ")", "[", "obs_id", "]", "\n", "f", "=", "self", ".", "structural_eq", "[", "node_name", "]", "\n", "u_is_none", "=", "u", "is", "None", "\n", "if", "u_is_none", ":", "\n", "            ", "u", "=", "self", ".", "_sample_noise", "(", "node_name", ",", "n_samples", ")", "\n", "", "x", "=", "f", "(", "u", ",", "**", "parents_dict", ")", "if", "isinstance", "(", "parents_dict", ",", "dict", ")", "else", "f", "(", "u", ")", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "lik", ".", "name", "in", "[", "Cte", ".", "CATEGORICAL", "]", ":", "\n", "            ", "x_out", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "lik", ".", "domain_size", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "x_out", "[", "i", ",", "x", "[", "i", ",", "0", "]", "]", "=", "1.", "\n", "\n", "", "x", "=", "x_out", ".", "copy", "(", ")", "\n", "print", "(", "x", ")", "\n", "assert", "False", "\n", "\n", "", "return", "x", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_set_nodes": [[350, 377], ["_heterogeneous.HeterogeneousSCM._get_G", "_heterogeneous.HeterogeneousSCM.nodes_list.index", "networkx.algorithms.dag.ancestors", "utils.args_parser.list_substract", "parent_nodes.extend", "networkx.algorithms.dag.descendants", "utils.args_parser.list_substract", "children_nodes.extend", "list", "list", "list", "x_I.keys", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_G", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.list_substract", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.list_substract"], ["", "def", "_get_set_nodes", "(", "self", ",", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x_I: Dictionary of intervened nodes and intervened values\n\n        Returns:\n            List of parent nodes\n            List of intervened-on nodes\n            List of children nodes\n\n        \"\"\"", "\n", "parent_nodes", "=", "[", "]", "\n", "children_nodes", "=", "[", "]", "\n", "intervened_nodes", "=", "[", "self", ".", "nodes_list", ".", "index", "(", "i", ")", "for", "i", "in", "x_I", ".", "keys", "(", ")", "]", "\n", "\n", "G", "=", "self", ".", "_get_G", "(", ")", "\n", "for", "id_", "in", "intervened_nodes", ":", "\n", "            ", "ancestors", "=", "nx", ".", "algorithms", ".", "dag", ".", "ancestors", "(", "G", ",", "id_", ")", "\n", "ancestors", "=", "list_substract", "(", "ancestors", ",", "intervened_nodes", ")", "\n", "parent_nodes", ".", "extend", "(", "ancestors", ")", "\n", "\n", "descendants", "=", "nx", ".", "algorithms", ".", "dag", ".", "descendants", "(", "G", ",", "id_", ")", "\n", "descendants", "=", "list_substract", "(", "descendants", ",", "intervened_nodes", ")", "\n", "children_nodes", ".", "extend", "(", "descendants", ")", "\n", "\n", "", "return", "list", "(", "set", "(", "parent_nodes", ")", ")", ",", "list", "(", "set", "(", "intervened_nodes", ")", ")", ",", "list", "(", "set", "(", "children_nodes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_intervention": [[378, 432], ["_heterogeneous.HeterogeneousSCM._get_set_nodes", "_heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "_heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "zip", "np.concatenate", "np.array", "len", "len", "_heterogeneous.HeterogeneousSCM.sample_obs", "_heterogeneous.HeterogeneousSCM.sample_obs"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_set_nodes", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs"], ["", "def", "sample_intervention", "(", "self", ",", "\n", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ",", "\n", "n_samples", ":", "int", "=", "1", ",", "\n", "return_set_nodes", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\"\n        This method samples samples of all the nodes after intervening on x_I.\n        The implementation only works for unidimensional nodes\n        Args:\n            x_I:\n            n_samples:\n            return_set_nodes:\n\n        Returns:\n        if return_set_nodes:\n            return x_intervention, set_nodes\n        else:\n            return x_intervention\n        \"\"\"", "\n", "parent_nodes", ",", "intervened_nodes", ",", "children_nodes", "=", "self", ".", "_get_set_nodes", "(", "x_I", ")", "\n", "\n", "nodes_list_all", ",", "parents_list_all", "=", "self", ".", "get_topological_nodes_pa", "(", ")", "\n", "\n", "if", "self", ".", "has_ground_truth", ":", "\n", "            ", "x", "=", "{", "}", "\n", "node_dims", "=", "self", ".", "get_node_columns_in_X", "(", ")", "\n", "for", "obs_i", ",", "pa_i", "in", "zip", "(", "nodes_list_all", ",", "parents_list_all", ")", ":", "\n", "                ", "if", "obs_i", "in", "intervened_nodes", ":", "\n", "                    ", "obs_id_dim", "=", "node_dims", "[", "obs_i", "]", "\n", "assert", "len", "(", "obs_id_dim", ")", "==", "1", ",", "'Interventions only implemented in unidimensional nodes'", "\n", "xi_I", "=", "x_I", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "\n", "\n", "xi", "=", "np", ".", "array", "(", "[", "[", "xi_I", "]", "]", "*", "n_samples", ")", "\n", "", "else", ":", "\n", "                    ", "if", "len", "(", "pa_i", ")", "==", "0", ":", "\n", "                        ", "xi", ",", "_", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "                        ", "parents_dict", "=", "{", "self", ".", "nodes_list", "[", "pa_ij", "]", ":", "x", "[", "self", ".", "nodes_list", "[", "pa_ij", "]", "]", "for", "pa_ij", "in", "pa_i", "}", "\n", "xi", ",", "_", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "parents_dict", "=", "parents_dict", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "", "x", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "=", "xi", "\n", "\n", "", "x_intervention", "=", "np", ".", "concatenate", "(", "[", "x", "[", "k", "]", "for", "k", "in", "self", ".", "nodes_list", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_intervention", "=", "None", "\n", "\n", "", "if", "return_set_nodes", ":", "\n", "            ", "set_nodes", "=", "{", "'parents'", ":", "parent_nodes", ",", "\n", "'intervened'", ":", "intervened_nodes", ",", "\n", "'children'", ":", "children_nodes", "}", "\n", "\n", "return", "x_intervention", ",", "set_nodes", "\n", "", "else", ":", "\n", "            ", "return", "x_intervention", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_counterfactual": [[433, 503], ["isinstance", "_heterogeneous.HeterogeneousSCM._get_set_nodes", "_heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "u_factual.clone().numpy.clone().numpy.clone().numpy", "_heterogeneous.HeterogeneousSCM.clone().numpy", "_heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "zip", "np.concatenate", "isinstance", "u_factual.clone().numpy.clone().numpy.clone", "_heterogeneous.HeterogeneousSCM.clone", "_heterogeneous.HeterogeneousSCM._get_x_from_x0().clone", "_heterogeneous.HeterogeneousSCM._get_x_from_x0().copy", "len", "np.array", "len", "_heterogeneous.HeterogeneousSCM.sample_obs", "_heterogeneous.HeterogeneousSCM.sample_obs", "_heterogeneous.HeterogeneousSCM._get_x_from_x0", "_heterogeneous.HeterogeneousSCM._get_x_from_x0"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_set_nodes", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x_from_x0", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x_from_x0"], ["", "", "def", "get_counterfactual", "(", "self", ",", "\n", "x_factual", ":", "np", ".", "ndarray", ",", "\n", "u_factual", ":", "np", ".", "ndarray", ",", "\n", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ",", "\n", "is_noise", ":", "bool", "=", "False", ",", "\n", "return_set_nodes", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        This method gets the counterfactual of x_factual when we intervine on x_I.\n        The implementation only works for unidimensional nodes\n        Args:\n            x_factual: Matrix with the factual samples [num_samples, num_dimensions]\n            u_factual:   Matrix with the noise valules generating x_factual [num_samples, num_nodes]\n            x_I:\n            is_noise:\n            return_set_nodes:\n\n        Returns:\n        if return_set_nodes:\n            return x_cf, set_nodes\n        else:\n            return x_cf\n        \"\"\"", "\n", "is_tensor", "=", "isinstance", "(", "u_factual", ",", "torch", ".", "Tensor", ")", "\n", "if", "is_tensor", ":", "\n", "            ", "u_factual", "=", "u_factual", ".", "clone", "(", ")", ".", "numpy", "(", ")", "\n", "x_factual", "=", "x_factual", ".", "clone", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "n_samples", "=", "u_factual", ".", "shape", "[", "0", "]", "\n", "\n", "_", ",", "intervened_nodes", ",", "children_nodes", "=", "self", ".", "_get_set_nodes", "(", "x_I", ")", "\n", "\n", "nodes_list_all", ",", "parents_list_all", "=", "self", ".", "get_topological_nodes_pa", "(", ")", "\n", "\n", "if", "self", ".", "has_ground_truth", ":", "\n", "            ", "x", "=", "{", "}", "\n", "if", "x_factual", ".", "shape", "[", "1", "]", "==", "self", ".", "total_num_dim_x0", ":", "\n", "                ", "if", "isinstance", "(", "x_factual", ",", "torch", ".", "TensorType", ")", ":", "\n", "                    ", "x_factual", "=", "self", ".", "_get_x_from_x0", "(", "x_factual", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                    ", "x_factual", "=", "self", ".", "_get_x_from_x0", "(", "x_factual", ")", ".", "copy", "(", ")", "\n", "\n", "", "", "node_dims", "=", "self", ".", "get_node_columns_in_X", "(", ")", "\n", "\n", "for", "obs_i", ",", "pa_i", "in", "zip", "(", "nodes_list_all", ",", "parents_list_all", ")", ":", "\n", "                ", "if", "obs_i", "in", "intervened_nodes", ":", "\n", "                    ", "obs_id_dim", "=", "node_dims", "[", "obs_i", "]", "\n", "assert", "len", "(", "obs_id_dim", ")", "==", "1", ",", "'Interventions only implemented in unidimensional nodes'", "\n", "xi_I", "=", "x_I", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "\n", "\n", "xi", "=", "(", "x_factual", "[", ":", ",", "[", "obs_i", "]", "]", "+", "xi_I", ")", "if", "is_noise", "else", "np", ".", "array", "(", "[", "[", "xi_I", "]", "]", "*", "n_samples", ")", "\n", "", "else", ":", "\n", "                    ", "if", "len", "(", "pa_i", ")", "==", "0", ":", "\n", "                        ", "xi", ",", "_", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "u", "=", "u_factual", "[", ":", ",", "[", "obs_i", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "parents_dict", "=", "{", "self", ".", "nodes_list", "[", "pa_ij", "]", ":", "x", "[", "self", ".", "nodes_list", "[", "pa_ij", "]", "]", "for", "pa_ij", "in", "pa_i", "}", "\n", "xi", ",", "_", "=", "self", ".", "sample_obs", "(", "obs_id", "=", "obs_i", ",", "parents_dict", "=", "parents_dict", ",", "u", "=", "u_factual", "[", ":", ",", "[", "obs_i", "]", "]", ")", "\n", "\n", "", "", "x", "[", "self", ".", "nodes_list", "[", "obs_i", "]", "]", "=", "xi", "\n", "\n", "", "x_cf", "=", "np", ".", "concatenate", "(", "[", "x", "[", "k", "]", "for", "k", "in", "self", ".", "nodes_list", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_cf", "=", "None", "\n", "\n", "", "if", "return_set_nodes", ":", "\n", "            ", "set_nodes", "=", "{", "'intervened'", ":", "intervened_nodes", ",", "\n", "'children'", ":", "children_nodes", "}", "\n", "\n", "return", "x_cf", ",", "set_nodes", "\n", "", "else", ":", "\n", "            ", "return", "x_cf", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._create_data": [[504, 511], ["None"], "methods", ["None"], ["", "", "def", "_create_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This method sets the value for self.X and self.U\n        Returns: None\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions": [[512, 524], ["node_dims.append", "sum"], "methods", ["None"], ["", "def", "get_node_dimensions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        Returns: list with num_nodes elements. Each element contains the number of dimensions of each node\n            node_dims: List[int]\n            len(node_dims) == num_nodes\n        \"\"\"", "\n", "node_dims", "=", "[", "]", "\n", "for", "lik_node_i", "in", "self", ".", "likelihoods", ":", "\n", "            ", "node_dims", ".", "append", "(", "sum", "(", "[", "lik_ij", ".", "domain_size", "for", "lik_ij", "in", "lik_node_i", "]", ")", ")", "\n", "\n", "", "return", "node_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_dim_to_scale": [[525, 537], ["list", "np.where", "dims.extend", "lik_node_ij.has_fit"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.has_fit"], ["", "def", "get_dim_to_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get column indexes of X that need scaling\n        Returns:\n\n        \"\"\"", "\n", "dims", "=", "[", "]", "\n", "for", "lik_node_i", "in", "self", ".", "likelihoods", ":", "\n", "            ", "for", "lik_node_ij", "in", "lik_node_i", ":", "\n", "                ", "dims", ".", "extend", "(", "lik_node_ij", ".", "has_fit", "(", "True", ")", ")", "\n", "\n", "", "", "return", "list", "(", "np", ".", "where", "(", "dims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_dim_to_scale_x0": [[538, 554], ["list", "dims.extend", "dims_i.extend", "len", "np.where", "lik_node_ij.has_fit"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.has_fit"], ["", "def", "get_dim_to_scale_x0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get column indexes of X0 that need scaling\n        Returns:\n\n        \"\"\"", "\n", "dims", "=", "[", "]", "\n", "for", "lik_node_i", "in", "self", ".", "likelihoods", ":", "\n", "            ", "dims_i", "=", "[", "]", "\n", "for", "lik_node_ij", "in", "lik_node_i", ":", "\n", "                ", "dims_i", ".", "extend", "(", "lik_node_ij", ".", "has_fit", "(", "True", ")", ")", "\n", "\n", "", "remaining", "=", "self", ".", "largest_node_dim", "-", "len", "(", "dims_i", ")", "\n", "dims", ".", "extend", "(", "[", "*", "dims_i", ",", "*", "[", "False", ",", "]", "*", "remaining", "]", ")", "\n", "\n", "", "return", "list", "(", "np", ".", "where", "(", "dims", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_columns_in_X": [[555, 571], ["_heterogeneous.HeterogeneousSCM.get_node_dimensions", "zip", "node_columns.append", "np.cumsum", "list", "range", "_heterogeneous.HeterogeneousSCM.nodes_list.index"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "def", "get_node_columns_in_X", "(", "self", ",", "node_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get column indexes of X  for each node. It returns a lists of lists. I.e., the list i represent the column\n        indexes of X that represent the node i.\n        Returns:\n            List[List[int]]\n        \"\"\"", "\n", "node_dims_list", "=", "self", ".", "get_node_dimensions", "(", ")", "\n", "cumsum", "=", "[", "0", ",", "*", "np", ".", "cumsum", "(", "node_dims_list", ")", "]", "\n", "node_columns", "=", "[", "]", "\n", "for", "size_i", ",", "cumsum_i", "in", "zip", "(", "node_dims_list", ",", "cumsum", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "node_columns", ".", "append", "(", "list", "(", "range", "(", "cumsum_i", ",", "cumsum_i", "+", "size_i", ")", ")", ")", "\n", "", "if", "node_name", "is", "None", ":", "\n", "            ", "return", "node_columns", "\n", "", "else", ":", "\n", "            ", "return", "node_columns", "[", "self", ".", "nodes_list", ".", "index", "(", "node_name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.fill_up_with_zeros": [[572, 596], ["_heterogeneous.HeterogeneousSCM.get_node_dimensions", "_heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "np.zeros", "np.zeros", "enumerate", "range", "dim_of_x_in_x0.append", "torch.tensor().type", "list", "range", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_columns_in_X"], ["", "", "def", "fill_up_with_zeros", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            X: matrix with samples from the SCM\n\n        Returns:\n            X0: extended samples matrix\n            mask_X0: mask for the columns of X in X0\n            dim_of_x_in_x0: List[List[int]]. element i contains a List[int] with the column indexes in X0\n            that correspond to the column indexses of X\n        \"\"\"", "\n", "node_dim_list", "=", "self", ".", "get_node_dimensions", "(", ")", "\n", "node_cols", "=", "self", ".", "get_node_columns_in_X", "(", ")", "\n", "dim_of_x_in_x0", "=", "[", "]", "\n", "\n", "X0", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "num_nodes", "*", "self", ".", "largest_node_dim", "]", ")", "\n", "mask_X0", "=", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_nodes", "*", "self", ".", "largest_node_dim", "]", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "range", "(", "self", ".", "num_nodes", ")", ")", ":", "\n", "            ", "X0", "[", ":", ",", "i", "*", "self", ".", "largest_node_dim", ":", "(", "i", "*", "self", ".", "largest_node_dim", "+", "node_dim_list", "[", "i", "]", ")", "]", "=", "X", "[", ":", ",", "node_cols", "[", "i", "]", "]", "\n", "mask_X0", "[", ":", ",", "i", "*", "self", ".", "largest_node_dim", ":", "(", "i", "*", "self", ".", "largest_node_dim", "+", "node_dim_list", "[", "i", "]", ")", "]", "=", "1.", "\n", "dim_of_x_in_x0", ".", "append", "(", "list", "(", "range", "(", "i", "*", "self", ".", "largest_node_dim", ",", "i", "*", "self", ".", "largest_node_dim", "+", "node_dim_list", "[", "i", "]", ")", ")", ")", "\n", "# in topological order (A, C, R, S)", "\n", "", "return", "X0", ",", "torch", ".", "tensor", "(", "mask_X0", ")", ".", "type", "(", "torch", ".", "bool", ")", ",", "dim_of_x_in_x0", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_intervention_list": [[597, 617], ["_heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "x.std", "x.mean", "len", "list_inter.append", "float", "np.round"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_columns_in_X", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "get_intervention_list", "(", "self", ")", ":", "\n", "        ", "'''\n        nodes_to_intervene refer to the id in nodes_list\n        '''", "\n", "\n", "# std_list = [-1, -0.5, -0.1, 0, 0.1, 0.5, 1]", "\n", "\n", "list_inter", "=", "[", "]", "\n", "\n", "for", "node_name", "in", "self", ".", "nodes_to_intervene", ":", "\n", "            ", "cols", "=", "self", ".", "get_node_columns_in_X", "(", "node_name", ")", "\n", "assert", "len", "(", "cols", ")", "==", "1", ",", "'Interventions implemented only for unidimensional variables'", "\n", "x", "=", "self", ".", "X", "[", ":", ",", "cols", "]", "\n", "std", "=", "x", ".", "std", "(", ")", "\n", "mean", "=", "x", ".", "mean", "(", ")", "\n", "\n", "for", "i", "in", "self", ".", "std_list", ":", "\n", "                ", "list_inter", ".", "append", "(", "\n", "(", "{", "node_name", ":", "float", "(", "np", ".", "round", "(", "mean", "+", "i", "*", "std", ",", "decimals", "=", "2", ")", ")", "}", ",", "f'{i}_sigma'", ")", ")", "\n", "", "", "return", "list_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_intervention": [[618, 639], ["x_I.items", "_heterogeneous.HeterogeneousSCM.adj_object.set_intervention", "node_id_list.append"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention"], ["", "def", "set_intervention", "(", "self", ",", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ",", "\n", "is_noise", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Set an intervention given by x_I.\n        Args:\n            x_I: Dictionary of node names and values to be intervene-on.\n            is_noise: x_intervened =  x_original + value  if true else   x_intervened = value\n\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "x_I", "=", "{", "}", "\n", "self", ".", "I_noise", "=", "is_noise", "\n", "\n", "node_id_list", "=", "[", "]", "\n", "\n", "for", "var", ",", "value", "in", "x_I", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "x_I", "[", "var", "]", "=", "value", "\n", "node_id_list", ".", "append", "(", "self", ".", "var_to_idx", "[", "var", "]", ")", "\n", "\n", "", "self", ".", "adj_object", ".", "set_intervention", "(", "node_id_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.diagonal_SCM": [[640, 649], ["_heterogeneous.HeterogeneousSCM.adj_object.set_diagonal"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_diagonal"], ["", "def", "diagonal_SCM", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Remove all parent-children edges from the SCM\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "x_I", "=", "{", "}", "\n", "\n", "self", ".", "adj_object", ".", "set_diagonal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.clean_intervention": [[650, 659], ["_heterogeneous.HeterogeneousSCM.adj_object.clean_intervention"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention"], ["", "def", "clean_intervention", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets the intervention\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "x_I", "=", "None", "\n", "self", ".", "I_noise", "=", "False", "\n", "self", ".", "adj_object", ".", "clean_intervention", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_transform": [[660, 662], ["None"], "methods", ["None"], ["", "def", "set_transform", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.prepare_adj": [[663, 682], ["_heterogeneous.HeterogeneousSCM.adj_edges.items", "datasets._adjacency.Adjacency", "np.eye", "np.zeros", "_heterogeneous.HeterogeneousSCM.nodes_list.index", "print", "print", "_heterogeneous.HeterogeneousSCM.nodes_list.index"], "methods", ["None"], ["", "def", "prepare_adj", "(", "self", ",", "normalize_A", "=", "None", ",", "add_self_loop", "=", "True", ")", ":", "\n", "        ", "assert", "normalize_A", "is", "None", ",", "'Normalization on A is not implemented'", "\n", "self", ".", "normalize_A", "=", "normalize_A", "\n", "self", ".", "add_self_loop", "=", "add_self_loop", "\n", "\n", "if", "add_self_loop", ":", "\n", "            ", "SCM_adj", "=", "np", ".", "eye", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", "\n", "", "else", ":", "\n", "            ", "SCM_adj", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", "]", ")", "\n", "\n", "", "for", "node_i", ",", "children_i", "in", "self", ".", "adj_edges", ".", "items", "(", ")", ":", "\n", "            ", "row_idx", "=", "self", ".", "nodes_list", ".", "index", "(", "node_i", ")", "\n", "print", "(", "'\\nnode_i'", ",", "node_i", ")", "\n", "for", "child_j", "in", "children_i", ":", "\n", "                ", "print", "(", "'\\tchild_j'", ",", "child_j", ")", "\n", "SCM_adj", "[", "row_idx", ",", "self", ".", "nodes_list", ".", "index", "(", "child_j", ")", "]", "=", "1", "\n", "# Create Adjacency Object", "\n", "", "", "self", ".", "dag", "=", "SCM_adj", "\n", "self", ".", "adj_object", "=", "Adjacency", "(", "SCM_adj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.prepare_data": [[683, 689], ["_heterogeneous.HeterogeneousSCM.prepare_adj", "_heterogeneous.HeterogeneousSCM._create_data", "_heterogeneous.HeterogeneousSCM.fill_up_with_zeros"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.prepare_adj", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._create_data", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.fill_up_with_zeros"], ["", "def", "prepare_data", "(", "self", ",", "normalize_A", "=", "None", ",", "add_self_loop", "=", "True", ")", ":", "\n", "        ", "self", ".", "prepare_adj", "(", "normalize_A", ",", "add_self_loop", ")", "\n", "self", ".", "_create_data", "(", ")", "# This should create X, and U", "\n", "self", ".", "X0", ",", "self", ".", "mask_X0", ",", "self", ".", "dim_of_x_in_x0", "=", "self", ".", "fill_up_with_zeros", "(", "self", ".", "X", ")", "# [800 x 48]", "\n", "\n", "self", ".", "total_num_dim_x0", "=", "self", ".", "X0", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name": [[690, 702], ["_heterogeneous.HeterogeneousSCM.nodes_list.index"], "methods", ["None"], ["", "def", "_get_x0_dim_of_node_name", "(", "self", ",", "node_name", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            node_name: String name of the node for which we want to extract the column indexes in X0\n\n        Returns:\n            List[int]\n\n        \"\"\"", "\n", "node_idx", "=", "self", ".", "nodes_list", ".", "index", "(", "node_name", ")", "\n", "return", "self", ".", "dim_of_x_in_x0", "[", "node_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.__getitem__": [[703, 755], ["_heterogeneous.HeterogeneousSCM.X0[].copy().astype", "torch.tensor().reshape", "torch_geometric.data.data.Data", "_heterogeneous.HeterogeneousSCM.copy", "_heterogeneous.HeterogeneousSCM.transform().view", "_heterogeneous.HeterogeneousSCM.X0[].copy", "torch.tensor", "_heterogeneous.HeterogeneousSCM.x_I.items", "_heterogeneous.HeterogeneousSCM.transform().view", "_heterogeneous.HeterogeneousSCM.mask_X0.view", "torch.eye", "_heterogeneous.HeterogeneousSCM.U[].copy", "len", "_heterogeneous.HeterogeneousSCM.x_I.items", "_heterogeneous.HeterogeneousSCM.x_I.items", "_heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "_heterogeneous.HeterogeneousSCM.transform", "_heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "_heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "_heterogeneous.HeterogeneousSCM.transform", "datasets.transforms.ToTensor", "datasets.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "X0", "[", "index", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "u", "=", "torch", ".", "tensor", "(", "self", ".", "U", "[", "index", "]", ".", "copy", "(", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "edge_index", "=", "self", ".", "adj_object", ".", "edge_index", "\n", "edge_attr", "=", "self", ".", "adj_object", ".", "edge_attr", "\n", "\n", "x_i", ",", "edge_index_i", ",", "edge_attr_i", "=", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "x_I", "is", "not", "None", ":", "# Habemum intervention!", "\n", "            ", "x_i", "=", "x", ".", "copy", "(", ")", "\n", "if", "self", ".", "I_noise", "==", "False", ":", "# x_intervention = intervention_value", "\n", "                ", "if", "len", "(", "self", ".", "x_I", ")", "==", "0", ":", "\n", "                    ", "for", "node_name", ",", "value", "in", "self", ".", "x_I", ".", "items", "(", ")", ":", "\n", "                        ", "dims_int", "=", "self", ".", "_get_x0_dim_of_node_name", "(", "node_name", ")", "\n", "x_i", "[", "dims_int", "]", "=", "value", "\n", "\n", "", "edge_index", "=", "self", ".", "adj_object", ".", "edge_index_i", "\n", "edge_attr", "=", "self", ".", "adj_object", ".", "edge_attr_i", "\n", "", "else", ":", "\n", "                    ", "for", "node_name", ",", "value", "in", "self", ".", "x_I", ".", "items", "(", ")", ":", "\n", "                        ", "dims_int", "=", "self", ".", "_get_x0_dim_of_node_name", "(", "node_name", ")", "\n", "x_i", "[", "dims_int", "]", "=", "value", "\n", "\n", "", "edge_index_i", "=", "self", ".", "adj_object", ".", "edge_index_i", "\n", "edge_attr_i", "=", "self", ".", "adj_object", ".", "edge_attr_i", "\n", "", "", "else", ":", "# x_intervention = x_original + intervention_value", "\n", "                ", "for", "node_name", ",", "value", "in", "self", ".", "x_I", ".", "items", "(", ")", ":", "\n", "                    ", "dims_int", "=", "self", ".", "_get_x0_dim_of_node_name", "(", "node_name", ")", "\n", "x_i", "[", "dims_int", "]", "=", "x_i", "[", "dims_int", "]", "+", "value", "\n", "\n", "", "edge_index_i", "=", "self", ".", "adj_object", ".", "edge_index_i", "\n", "edge_attr_i", "=", "self", ".", "adj_object", ".", "edge_attr_i", "\n", "\n", "", "", "if", "self", ".", "transform", ":", "\n", "            ", "x", "=", "self", ".", "transform", "(", "x", ")", ".", "view", "(", "self", ".", "num_nodes", ",", "-", "1", ")", "\n", "if", "x_i", "is", "not", "None", ":", "x_i", "=", "self", ".", "transform", "(", "x_i", ")", ".", "view", "(", "self", ".", "num_nodes", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "ToTensor", "(", ")", "(", "x", ")", ".", "view", "(", "self", ".", "num_nodes", ",", "-", "1", ")", "\n", "if", "x_i", "is", "not", "None", ":", "x_i", "=", "ToTensor", "(", ")", "(", "x_i", ")", ".", "view", "(", "self", ".", "num_nodes", ",", "-", "1", ")", "\n", "\n", "", "data", "=", "Data", "(", "x", "=", "x", ",", "\n", "u", "=", "u", ",", "\n", "mask", "=", "self", ".", "mask_X0", ".", "view", "(", "self", ".", "num_nodes", ",", "-", "1", ")", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "node_ids", "=", "torch", ".", "eye", "(", "self", ".", "num_nodes", ")", ",", "\n", "x_i", "=", "x_i", ",", "\n", "edge_index_i", "=", "edge_index_i", ",", "\n", "edge_attr_i", "=", "edge_attr_i", ",", "\n", "num_nodes", "=", "self", ".", "num_nodes", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.__len__": [[756, 758], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.print_summary_X": [[759, 777], ["list", "print", "isinstance", "print", "range", "_heterogeneous.HeterogeneousSCM.X[].numpy", "len", "_heterogeneous.HeterogeneousSCM.min", "_heterogeneous.HeterogeneousSCM.max", "_heterogeneous.HeterogeneousSCM.mean", "_heterogeneous.HeterogeneousSCM.std", "np.unique", "np.unique"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "print_summary_X", "(", "self", ",", "columns", "=", "None", ")", ":", "\n", "        ", "if", "columns", "is", "None", ":", "\n", "            ", "columns", "=", "list", "(", "range", "(", "self", ".", "num_dimensions", ")", ")", "\n", "\n", "", "for", "c", "in", "columns", ":", "\n", "            ", "print", "(", "f'\\n Dimension {c} | {self.node_per_dimension_list[c]}'", ")", "\n", "if", "isinstance", "(", "self", ".", "X", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "x", "=", "self", ".", "X", "[", ":", ",", "c", "]", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "X", "[", ":", ",", "c", "]", "\n", "\n", "", "my_str", "=", "f\"min: {x.min():.3f} max: {x.max():.3f} mean: {x.mean():.3f} std: {x.std():.3f}\"", "\n", "\n", "if", "len", "(", "np", ".", "unique", "(", "x", ")", ")", "<", "10", ":", "\n", "                ", "uni", "=", "' '", ".", "join", "(", "[", "f\"{a:.2f}\"", "for", "a", "in", "np", ".", "unique", "(", "x", ")", "]", ")", "\n", "my_str", "+=", "f\" unique: {uni}\"", "\n", "\n", "", "print", "(", "my_str", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.chain.ChainSCM.__init__": [[8, 67], ["datasets.toy.ToySCM.__init__", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_cb'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "-", "x1", "+", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x2", ":", "0.25", "*", "x2", "+", "u3", ",", "\n", "}", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONLINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "-", "x1", "+", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x2", ":", "0.25", "*", "x2", "+", "u3", ",", "\n", "}", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONADDITIVE", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "-", "x1", "+", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x2", ":", "0.25", "*", "x2", "+", "u3", ",", "\n", "}", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "CHAIN", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "'x1'", ",", "'x2'", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "{", "'x1'", ":", "[", "'x2'", "]", ",", "\n", "'x2'", ":", "[", "'x3'", "]", ",", "\n", "'x3'", ":", "[", "]", "}", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.__init__": [[30, 301], ["list", "datasets.toy.ToySCM.__init__", "adj_edges.keys", "u.copy", "u.copy", "u.copy", "adult.sigmoid", "adult.sigmoid", "race.copy().argmax().reshape", "numpy.concatenate", "race.copy().argmax().reshape().astype", "adult.sigmoid", "work_class.copy().argmax().reshape", "adult.sigmoid", "race.copy().argmax().reshape().astype.copy", "maritial.copy().argmax().reshape().astype", "u.copy", "race.copy().argmax().reshape().astype", "native_country.copy().argmax().reshape().astype", "relationship.copy().argmax().reshape().astype", "Categorical", "Gamma", "Categorical", "Bernoulli", "Gamma", "Normal", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Gamma", "numpy.abs", "numpy.exp", "numpy.abs", "sigmoid().astype", "scipy.stats.mode", "numpy.exp", "maritial.copy().argmax().reshape", "numpy.exp", "numpy.tanh", "numpy.tanh", "race.copy().argmax", "race.copy().argmax().reshape", "work_class.copy().argmax", "maritial.copy().argmax().reshape", "race.copy().argmax().reshape", "native_country.copy().argmax().reshape", "relationship.copy().argmax().reshape", "adult.sigmoid", "maritial.copy().argmax", "race.copy", "race.copy().argmax", "work_class.copy", "maritial.copy().argmax", "race.copy().argmax", "native_country.copy().argmax", "relationship.copy().argmax", "maritial.copy", "race.copy", "maritial.copy", "race.copy", "native_country.copy", "relationship.copy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid", "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'c_d_c_b_d_d_c_c_c_c_d'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_dir: path to data directory\n            train: whether to load the training subset (``True``, ``'train-*'`` files) or the test\n                subset (``False``, ``'t10k-*'`` files)\n            columns: list of morphometrics to load; by default (``None``) loads the image index and\n                all available metrics: area, length, thickness, slant, width, and height\n        \"\"\"", "\n", "\n", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "\n", "            ", "def", "eq_race", "(", "u", ")", ":", "\n", "                ", "'''\n                Three categories\n                '''", "\n", "return", "u", ".", "copy", "(", ")", "\n", "\n", "", "def", "eq_age", "(", "u", ")", ":", "\n", "                ", "return", "u", "+", "17", "\n", "\n", "", "def", "eq_native_country", "(", "u", ")", ":", "\n", "                ", "return", "u", ".", "copy", "(", ")", "\n", "\n", "", "def", "eq_gender", "(", "u", ")", ":", "\n", "                ", "return", "u", ".", "copy", "(", ")", "\n", "\n", "", "def", "eq_edu", "(", "u", ",", "race", ",", "age", ",", "native_country", ",", "gender", ")", ":", "\n", "                ", "'''\n                race: [N, 3]\n                age: [N, 1]\n                native_country: [N, 4]\n                gender: [N, 1]\n                '''", "\n", "r", "=", "2", "*", "race", "[", ":", ",", "[", "0", "]", "]", "+", "1", "*", "race", "[", ":", ",", "[", "1", "]", "]", "+", "0", "*", "race", "[", ":", ",", "[", "2", "]", "]", "\n", "a", "=", "sigmoid", "(", "age", "-", "30", ")", "\n", "n", "=", "0", "*", "native_country", "[", ":", ",", "[", "0", "]", "]", "+", "2", "*", "native_country", "[", ":", ",", "[", "1", "]", "]", "+", "5", "*", "native_country", "[", ":", ",", "\n", "[", "2", "]", "]", "+", "1", "*", "native_country", "[", ":", ",", "[", "3", "]", "]", "\n", "g", "=", "0.5", "*", "(", "gender", "==", "0", ")", "+", "1.0", "*", "(", "gender", "==", "1", ")", "\n", "\n", "return", "np", ".", "exp", "(", "r", "+", "a", ")", "+", "g", "*", "n", "+", "u", "\n", "\n", "", "def", "eq_hour", "(", "u", ",", "race", ",", "edu", ",", "age", ",", "native_country", ",", "gender", ")", ":", "\n", "                ", "'''\n                race: [N, 3]\n                edu: [N, 1]\n                age: [N, 1]\n                native_country: [N, 4]\n                gender: [N, 1]\n                '''", "\n", "r", "=", "0.5", "*", "race", "[", ":", ",", "[", "0", "]", "]", "+", "1", "*", "race", "[", ":", ",", "[", "1", "]", "]", "+", "1.3", "*", "race", "[", ":", ",", "[", "2", "]", "]", "\n", "e", "=", "5", "*", "np", ".", "abs", "(", "np", ".", "tanh", "(", "edu", "-", "2", ")", ")", "#", "\n", "a", "=", "2", "*", "np", ".", "exp", "(", "-", "(", "age", "-", "30", ")", "**", "2", ")", "\n", "n", "=", "40", "*", "native_country", "[", ":", ",", "[", "0", "]", "]", "+", "36", "*", "native_country", "[", ":", ",", "[", "1", "]", "]", "+", "50", "*", "native_country", "[", ":", ",", "\n", "[", "2", "]", "]", "+", "30", "*", "native_country", "[", ":", ",", "[", "3", "]", "]", "\n", "g", "=", "2", "*", "(", "gender", "==", "0", ")", "+", "0", "*", "(", "gender", "==", "1", ")", "\n", "out", "=", "n", "*", "r", "+", "a", "+", "e", "+", "g", "\n", "\n", "return", "(", "out", "+", "u", ")", "*", "(", "age", "<", "70", ")", "\n", "\n", "", "def", "eq_work_class", "(", "u", ",", "age", ",", "edu", ",", "native_country", ",", "hour", ")", ":", "\n", "                ", "'''\n                edu: [N, 1]\n                age: [N, 1]\n                native_country: [N, 4]\n                hour: [N, 1]\n                '''", "\n", "a", "=", "age", "+", "1.5", "*", "u", "\n", "e", "=", "5", "*", "np", ".", "abs", "(", "np", ".", "tanh", "(", "edu", "-", "2", ")", ")", "#", "\n", "h", "=", "sigmoid", "(", "hour", "-", "30", "+", "u", ")", "\n", "n", "=", "-", "1", "*", "native_country", "[", ":", ",", "[", "0", "]", "]", "+", "0", "*", "native_country", "[", ":", ",", "[", "1", "]", "]", "+", "1", "*", "native_country", "[", ":", ",", "\n", "[", "2", "]", "]", "+", "2", "*", "native_country", "[", ":", ",", "[", "3", "]", "]", "\n", "\n", "out", "=", "0", "*", "(", "a", "<", "17", ")", "+", "1", "*", "(", "(", "e", "+", "h", ")", ">", "0.3", ")", "+", "1", "*", "(", "h", ">", "0.3", ")", "*", "(", "a", ">", "50", ")", "+", "n", "\n", "out", "[", "out", ">", "3", "]", "=", "3.", "\n", "return", "out", "*", "(", "out", ">=", "0", ")", "\n", "\n", "", "def", "eq_maritial", "(", "u", ",", "race", ",", "age", ",", "work_class", ",", "hour", ",", "native_country", ",", "gender", ")", ":", "\n", "                ", "'''\n                Threee categories\n                  race: [N, 3]\n                  age: [N, 1]\n                  work_class: [N, 4]\n                  hour: [N, 1]\n                  native_country: [N, 4]\n                  gender: [N, 1]\n                  '''", "\n", "r", "=", "race", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "r", "=", "(", "r", "+", "u", "*", "0.2", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "r", "[", "r", "<", "0", "]", "=", "0", "\n", "r", "[", "r", ">", "2", "]", "=", "2", "\n", "r", "=", "0", "*", "(", "r", "==", "0", ")", "+", "2", "*", "(", "r", "==", "1", ")", "+", "1", "*", "(", "r", "==", "2", ")", "\n", "\n", "a", "=", "age", "+", "u", "*", "2", "\n", "a", "=", "0", "*", "(", "a", "<", "20", ")", "+", "2", "*", "(", "a", ">=", "20", ")", "&", "(", "a", "<", "40", ")", "+", "1", "*", "(", "a", ">=", "40", ")", "&", "(", "a", "<", "50", ")", "+", "2", "*", "(", "a", ">=", "50", ")", "\n", "\n", "w", "=", "1", "*", "work_class", "[", ":", ",", "[", "0", "]", "]", "+", "1", "*", "work_class", "[", ":", ",", "[", "1", "]", "]", "+", "0", "*", "work_class", "[", ":", ",", "[", "2", "]", "]", "+", "2", "*", "work_class", "[", ":", ",", "[", "3", "]", "]", "\n", "h", "=", "3", "*", "(", "sigmoid", "(", "hour", "-", "30", ")", ")", ".", "astype", "(", "int", ")", "\n", "h", "[", "h", ">", "2", "]", "=", "2", "\n", "\n", "n", "=", "0", "*", "native_country", "[", ":", ",", "[", "0", "]", "]", "+", "1", "*", "native_country", "[", ":", ",", "[", "1", "]", "]", "+", "1", "*", "native_country", "[", ":", ",", "\n", "[", "2", "]", "]", "+", "2", "*", "native_country", "[", ":", ",", "[", "3", "]", "]", "\n", "\n", "g", "=", "(", "gender", "+", "u", "*", "0.5", ")", ".", "astype", "(", "int", ")", "\n", "\n", "g", "[", "g", "<", "0", "]", "=", "0", "\n", "g", "[", "g", ">", "1", "]", "=", "1", "\n", "g", "=", "1", "*", "(", "g", "==", "0", ")", "+", "2", "*", "(", "g", "==", "1", ")", "\n", "\n", "out", "=", "np", ".", "concatenate", "(", "[", "r", ",", "a", ",", "w", ",", "h", ",", "n", ",", "g", "]", ",", "axis", "=", "1", ")", "\n", "out", "=", "stats", ".", "mode", "(", "out", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "\n", "return", "out", "\n", "\n", "", "def", "eq_occupation", "(", "u", ",", "race", ",", "age", ",", "edu", ",", "work_class", ",", "maritial", ",", "gender", ")", ":", "\n", "                ", "'''Three categories\n                   race: [N, 3]\n                   age: [N, 1]\n                   edu: [N, 1]\n                   work_class: [N, 4]\n                   maritial: [N, 3]\n                   gender: [N, 1]\n                '''", "\n", "comb", "=", "race", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "comb", "+=", "2", "*", "np", ".", "exp", "(", "-", "(", "age", "+", "u", "-", "20", ")", "**", "2", ")", "\n", "comb", "-=", "sigmoid", "(", "edu", "*", "u", "-", "30", ")", "\n", "comb", "+=", "work_class", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "comb", "+=", "3", "*", "maritial", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "comb", "+=", "4", "*", "gender", "\n", "\n", "out", "=", "0", "*", "(", "comb", "<", "1", ")", "\n", "\n", "out", "+=", "1", "*", "(", "comb", ">=", "1", ")", "&", "(", "comb", "<=", "4", ")", "\n", "\n", "out", "+=", "2", "*", "(", "comb", ">", "4", ")", "\n", "\n", "# out = 0*(comb<1) + 1*(comb>=1)&(comb<=4) + 2*(comb>4)", "\n", "\n", "return", "out", "\n", "\n", "", "def", "eq_relationship", "(", "u", ",", "maritial", ",", "edu", ",", "age", ",", "native_country", ",", "gender", ")", ":", "\n", "                ", "'''Three categories: wife(0), husband(1), not-in-family(2)\n                   maritial: [N, 3]\n                   age: [N, 1]\n                   edu: [N, 1]\n                   native_country: [N, 4]\n                   gender: [N, 1]\n                '''", "\n", "\n", "comb", "=", "u", "*", "native_country", "[", ":", ",", "[", "0", "]", "]", "-", "u", "*", "native_country", "[", ":", ",", "[", "1", "]", "]", "+", "2", "*", "u", "*", "native_country", "[", ":", ",", "\n", "[", "2", "]", "]", "+", "2", "*", "native_country", "[", ":", ",", "\n", "[", "3", "]", "]", "\n", "\n", "comb", "+=", "sigmoid", "(", "edu", "-", "30", ")", "\n", "comb", "+=", "2", "*", "(", "age", "<", "20", ")", "\n", "\n", "comb", "+=", "-", "2", "*", "(", "gender", "==", "0", ")", "\n", "\n", "out", "=", "comb", ".", "copy", "(", ")", "\n", "m", "=", "maritial", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "[", "(", "m", "==", "1", ")", "&", "(", "comb", "<", "-", "1", ")", "]", "=", "0", "\n", "out", "[", "(", "m", "==", "1", ")", "&", "(", "comb", ">=", "-", "1", ")", "]", "=", "1", "\n", "out", "[", "(", "m", "!=", "1", ")", "&", "(", "comb", ">=", "-", "1", ")", "]", "=", "2", "\n", "out", "[", "(", "m", "!=", "1", ")", "&", "(", "comb", "<", "-", "1", ")", "]", "=", "1", "\n", "return", "out", "\n", "\n", "", "def", "eq_income", "(", "u", ",", "race", ",", "age", ",", "edu", ",", "\n", "occupation", ",", "work_class", ",", "maritial", ",", "\n", "hour", ",", "native_country", ",", "gender", ",", "relationship", ")", ":", "\n", "                ", "'''\n                race: [N, 3]\n                age: [N, 1]\n                edu: [N, 1]\n                occupation: [N, 1]\n                work_class: [N, 1]\n                maritial: [N, 1]\n                hour: [N, 1]\n                native_country: [N, 1]\n                gender: [N, 1]\n                relationship: [N, 1]\n                '''", "\n", "output", "=", "u", ".", "copy", "(", ")", "\n", "r", "=", "race", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "output", "+=", "10000", "*", "(", "r", ">", "1.6", ")", "+", "20000", "*", "(", "r", "<=", "1.6", ")", "\n", "\n", "output", "+=", "3000", "*", "(", "age", ">=", "21", ")", "&", "(", "age", "<", "30", ")", "+", "8000", "*", "(", "age", ">=", "30", ")", "\n", "output", "+=", "5000", "*", "(", "edu", "<", "2", ")", "+", "10000", "*", "(", "edu", ">=", "2", ")", "&", "(", "edu", "<", "10", ")", "+", "30000", "*", "(", "edu", ">=", "10", ")", "\n", "\n", "output", "+=", "5000", "*", "occupation", "[", ":", ",", "[", "1", "]", "]", "+", "15000", "*", "occupation", "[", ":", ",", "[", "2", "]", "]", "\n", "output", "+=", "5000", "*", "work_class", "[", ":", ",", "[", "0", "]", "]", "+", "7000", "*", "work_class", "[", ":", ",", "[", "1", "]", "]", "\n", "output", "+=", "1000", "*", "maritial", "[", ":", ",", "[", "0", "]", "]", "+", "4000", "*", "maritial", "[", ":", ",", "[", "1", "]", "]", "-", "2000", "*", "maritial", "[", ":", ",", "[", "2", "]", "]", "\n", "output", "+=", "15000", "*", "(", "hour", ">", "45", ")", "\n", "\n", "n", "=", "native_country", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "output", "+=", "10000", "*", "(", "n", ">", "2", ")", "\n", "output", "+=", "4000", "*", "(", "gender", "==", "1", ")", "\n", "rel", "=", "relationship", ".", "copy", "(", ")", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "output", "+=", "3000", "*", "(", "rel", "<", "2", ")", "\n", "\n", "return", "output", "\n", "\n", "", "structural_eq", "=", "{", "\n", "RACE", ":", "eq_race", ",", "\n", "AGE", ":", "eq_age", ",", "\n", "NATIVE_COUNTRY", ":", "eq_native_country", ",", "\n", "GENDER", ":", "eq_gender", ",", "\n", "EDU", ":", "eq_edu", ",", "\n", "HOUR", ":", "eq_hour", ",", "\n", "WORK_CLASS", ":", "eq_work_class", ",", "\n", "MARITIAL", ":", "eq_maritial", ",", "\n", "OCCUPATION", ":", "eq_occupation", ",", "\n", "RELATIONSHIP", ":", "eq_relationship", ",", "\n", "INCOME", ":", "eq_income", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "RACE", ":", "Categorical", "(", "[", "0.85", ",", "0.1", ",", "0.05", "]", ")", ",", "# Discrete, 3 categories", "\n", "AGE", ":", "Gamma", "(", "3", ",", "10", ")", ",", "# Continuous, positive", "\n", "NATIVE_COUNTRY", ":", "Categorical", "(", "[", "0.3", ",", "0.5", ",", "0.1", ",", "0.1", "]", ")", ",", "# Discrete, 4 categories", "\n", "GENDER", ":", "Bernoulli", "(", "0.67", ")", ",", "# Discrete, 2 categories", "\n", "EDU", ":", "Gamma", "(", "1", ",", "1", ")", ",", "# Continuous, positive", "\n", "HOUR", ":", "Normal", "(", "0", ",", "1", ")", ",", "# Continuous, positive", "\n", "WORK_CLASS", ":", "Normal", "(", "0", ",", "1", ")", ",", "# Discrete, 4 categories", "\n", "MARITIAL", ":", "Normal", "(", "0", ",", "1", ")", ",", "# Discrete, 3 categories", "\n", "OCCUPATION", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2.5", ",", "2.5", "]", ",", "vars", "=", "[", "1", ",", "1", "]", ")", ",", "\n", "# Discrete, 3 categories", "\n", "RELATIONSHIP", ":", "Normal", "(", "0", ",", "1", ")", ",", "# Discrete, 3 categories", "\n", "INCOME", ":", "Gamma", "(", "1", ",", "1", ")", ",", "# Continuous, positive", "\n", "}", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "adj_edges", "=", "{", "RACE", ":", "[", "EDU", ",", "HOUR", ",", "MARITIAL", ",", "OCCUPATION", ",", "INCOME", "]", ",", "\n", "AGE", ":", "[", "INCOME", ",", "OCCUPATION", ",", "MARITIAL", ",", "WORK_CLASS", ",", "EDU", ",", "HOUR", ",", "RELATIONSHIP", "]", ",", "\n", "NATIVE_COUNTRY", ":", "[", "EDU", ",", "HOUR", ",", "MARITIAL", ",", "RELATIONSHIP", ",", "INCOME", ",", "WORK_CLASS", "]", ",", "\n", "GENDER", ":", "[", "EDU", ",", "HOUR", ",", "MARITIAL", ",", "OCCUPATION", ",", "RELATIONSHIP", ",", "INCOME", "]", ",", "\n", "EDU", ":", "[", "INCOME", ",", "OCCUPATION", ",", "WORK_CLASS", ",", "HOUR", ",", "RELATIONSHIP", "]", ",", "\n", "HOUR", ":", "[", "WORK_CLASS", ",", "MARITIAL", ",", "INCOME", "]", ",", "\n", "WORK_CLASS", ":", "[", "OCCUPATION", ",", "INCOME", ",", "MARITIAL", "]", ",", "\n", "MARITIAL", ":", "[", "OCCUPATION", ",", "INCOME", ",", "RELATIONSHIP", "]", ",", "\n", "OCCUPATION", ":", "[", "INCOME", "]", ",", "\n", "RELATIONSHIP", ":", "[", "INCOME", "]", ",", "\n", "INCOME", ":", "[", "]", "}", "\n", "\n", "nodes_list", "=", "list", "(", "adj_edges", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "categorical_nodes", "=", "[", "RACE", ",", "MARITIAL", ",", "RELATIONSHIP", ",", "NATIVE_COUNTRY", ",", "WORK_CLASS", ",", "OCCUPATION", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "ADULT", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "AGE", ",", "EDU", ",", "HOUR", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "adj_edges", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "nodes_list", "=", "nodes_list", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.likelihoods": [[303, 319], ["enumerate", "likelihoods_tmp.append", "adult.AdultSCM._get_lik"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_lik"], ["", "@", "property", "\n", "def", "likelihoods", "(", "self", ")", ":", "\n", "        ", "likelihoods_tmp", "=", "[", "]", "\n", "\n", "for", "i", ",", "lik_name", "in", "enumerate", "(", "self", ".", "likelihood_names", ")", ":", "# Iterate over nodes", "\n", "            ", "if", "self", ".", "nodes_list", "[", "i", "]", "in", "[", "RACE", ",", "MARITIAL", ",", "RELATIONSHIP", ",", "OCCUPATION", "]", ":", "\n", "                ", "dim", "=", "3", "\n", "", "elif", "self", ".", "nodes_list", "[", "i", "]", "in", "[", "NATIVE_COUNTRY", ",", "WORK_CLASS", "]", ":", "\n", "                ", "dim", "=", "4", "\n", "", "else", ":", "\n", "                ", "dim", "=", "1", "\n", "", "likelihoods_tmp", ".", "append", "(", "[", "self", ".", "_get_lik", "(", "lik_name", ",", "\n", "dim", "=", "dim", ",", "\n", "normalize", "=", "'dim'", ")", "]", ")", "\n", "\n", "", "return", "likelihoods_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.AdultSCM.sample_obs": [[320, 350], ["np.zeros.copy().astype.astype", "len", "adult.AdultSCM._sample_noise", "isinstance", "f", "f", "numpy.zeros", "np.zeros.copy().astype.astype", "range", "numpy.zeros.copy().astype", "numpy.zeros.copy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._sample_noise"], ["", "def", "sample_obs", "(", "self", ",", "obs_id", ",", "parents_dict", "=", "None", ",", "n_samples", "=", "1", ",", "u", "=", "None", ")", ":", "\n", "        ", "'''\n        Only possible if the true Structural Eauations are known\n        f = self.structural_eq[f'x{obs_id}']\n        if u is None:\n            u = np.array(self.noises_distr[f'u{obs_id}'].sample(n_samples))\n\n        if not isinstance(parents_dict, dict):\n            return f(u), u\n        else:\n            return f(u, **parents_dict), u\n        '''", "\n", "assert", "obs_id", "<", "len", "(", "self", ".", "nodes_list", ")", "\n", "node_name", "=", "self", ".", "nodes_list", "[", "obs_id", "]", "\n", "lik", "=", "self", ".", "likelihoods", "[", "obs_id", "]", "[", "0", "]", "\n", "f", "=", "self", ".", "structural_eq", "[", "node_name", "]", "\n", "u_is_none", "=", "u", "is", "None", "\n", "if", "u_is_none", ":", "\n", "            ", "u", "=", "self", ".", "_sample_noise", "(", "node_name", ",", "n_samples", ")", "\n", "", "x", "=", "f", "(", "u", ",", "**", "parents_dict", ")", "if", "isinstance", "(", "parents_dict", ",", "dict", ")", "else", "f", "(", "u", ")", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "node_name", "in", "self", ".", "categorical_nodes", ":", "\n", "            ", "x_out", "=", "np", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "lik", ".", "domain_size", "]", ")", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "x_out", "[", "i", ",", "x", "[", "i", ",", "0", "]", "]", "=", "1", "\n", "\n", "", "x", "=", "x_out", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "return", "x", ",", "u", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.adult.sigmoid": [[9, 11], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.triangle.TriangleSCM.__init__": [[8, 74], ["datasets.toy.ToySCM.__init__", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal", "MixtureOfGaussians", "Normal", "Normal", "np.exp", "np.sign", "np.sign"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "\n", "split", ":", "str", "=", "'train'", ",", "\n", "num_samples", ":", "int", "=", "5000", ",", "\n", "equations_type", "=", "Cte", ".", "LINEAR", ",", "\n", "likelihood_names", ":", "str", "=", "'d_d_d'", ",", "\n", "transform", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "if", "equations_type", "==", "Cte", ".", "LINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "-", "x1", "+", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "x1", "+", "0.25", "*", "x2", "+", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONLINEAR", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "-", "1", "+", "3", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "2", "*", "x1", ")", ")", "+", "u2", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "x1", "+", "0.25", "*", "x2", "**", "2", "+", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2", ",", "1.5", "]", ",", "vars", "=", "[", "1.5", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "0.1", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "1", ")", ",", "\n", "}", "\n", "\n", "", "elif", "equations_type", "==", "Cte", ".", "NONADDITIVE", ":", "\n", "            ", "structural_eq", "=", "{", "\n", "'x1'", ":", "lambda", "u1", ":", "u1", ",", "\n", "'x2'", ":", "lambda", "u2", ",", "x1", ":", "0.25", "*", "np", ".", "sign", "(", "u2", ")", "*", "x1", "**", "2", "*", "(", "1", "+", "u2", "**", "2", ")", ",", "\n", "'x3'", ":", "lambda", "u3", ",", "x1", ",", "x2", ":", "-", "1", "+", "0.1", "*", "np", ".", "sign", "(", "u3", ")", "*", "(", "x1", "**", "2", "+", "x2", "**", "2", ")", "+", "u3", ",", "\n", "}", "\n", "\n", "noises_distr", "=", "{", "\n", "'x1'", ":", "MixtureOfGaussians", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ",", "means", "=", "[", "-", "2.5", ",", "2.5", "]", ",", "vars", "=", "[", "1", ",", "1", "]", ")", ",", "\n", "'x2'", ":", "Normal", "(", "0", ",", "0.25", ")", ",", "\n", "'x3'", ":", "Normal", "(", "0", ",", "0.25", "**", "2", ")", ",", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "root_dir", "=", "root_dir", ",", "\n", "name", "=", "Cte", ".", "TRIANGLE", ",", "\n", "eq_type", "=", "equations_type", ",", "\n", "nodes_to_intervene", "=", "[", "'x1'", ",", "'x2'", "]", ",", "\n", "structural_eq", "=", "structural_eq", ",", "\n", "noises_distr", "=", "noises_distr", ",", "\n", "adj_edges", "=", "{", "'x1'", ":", "[", "'x2'", ",", "'x3'", "]", ",", "\n", "'x2'", ":", "[", "'x3'", "]", ",", "\n", "'x3'", ":", "[", "]", "}", ",", "\n", "split", "=", "split", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "transform", "=", "transform", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.utils.normalize_adj": [[8, 27], ["adj.sum", "numpy.diag", "numpy.sqrt", "adj.sum", "numpy.diag", "adj.sum", "numpy.diag", "float", "float", "float"], "function", ["None"], ["def", "normalize_adj", "(", "adj", ",", "how", "=", "'sym'", ")", ":", "\n", "    ", "if", "how", "==", "'sym'", ":", "\n", "        ", "deg", "=", "adj", ".", "sum", "(", "1", ")", "\n", "deg_inv", "=", "1", "/", "np", ".", "sqrt", "(", "deg", ")", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "D_inv", "=", "np", ".", "diag", "(", "deg_inv", ")", "\n", "return", "D_inv", "@", "adj", "@", "D_inv", "\n", "", "elif", "how", "==", "'row'", ":", "# Normalize by children", "\n", "        ", "deg", "=", "adj", ".", "sum", "(", "1", ")", "\n", "deg_inv", "=", "1", "/", "deg", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "D_inv", "=", "np", ".", "diag", "(", "deg_inv", ")", "\n", "return", "D_inv", "@", "adj", "\n", "", "elif", "how", "==", "'col'", ":", "# Normalize by parents", "\n", "        ", "deg", "=", "adj", ".", "sum", "(", "0", ")", "\n", "deg_inv", "=", "1", "/", "deg", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "D_inv", "=", "np", ".", "diag", "(", "deg_inv", ")", "\n", "return", "adj", "@", "D_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.utils.convert_nodes_to_df": [[29, 36], ["G.nodes", "pandas.DataFrame", "my_dict.update", "data.append"], "function", ["None"], ["", "", "def", "convert_nodes_to_df", "(", "G", ",", "node_id_col", "=", "'node_id'", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "node_id", ",", "attr_dict", "in", "G", ".", "nodes", "(", "True", ")", ":", "\n", "        ", "my_dict", "=", "{", "node_id_col", ":", "node_id", "}", "\n", "my_dict", ".", "update", "(", "attr_dict", ")", "\n", "data", ".", "append", "(", "my_dict", ")", "\n", "", "return", "pd", ".", "DataFrame", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.utils.convert_edges_to_df": [[38, 45], ["pandas.DataFrame", "my_dict.update", "data.append"], "function", ["None"], ["", "def", "convert_edges_to_df", "(", "G", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "node_src", ",", "node_dst", "in", "G", ".", "edges", ":", "\n", "        ", "my_dict", "=", "{", "'node_src'", ":", "node_src", ",", "'node_dst'", ":", "node_dst", "}", "\n", "my_dict", ".", "update", "(", "G", ".", "edges", "[", "(", "node_src", ",", "node_dst", ")", "]", ")", "\n", "data", ".", "append", "(", "my_dict", ")", "\n", "", "return", "pd", ".", "DataFrame", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets.utils.from_networkx": [[47, 76], ["networkx.convert_node_labels_to_integers", "torch.tensor().t().contiguous", "enumerate", "torch_geometric.data.Data.from_dict.items", "torch.tensor().t().contiguous.view", "torch_geometric.data.Data.from_dict", "nx.convert_node_labels_to_integers.number_of_nodes", "nx.convert_node_labels_to_integers.to_directed", "nx.convert_node_labels_to_integers.nodes", "feat_dict.items", "networkx.is_directed", "torch.tensor().t", "torch.tensor", "torch.tensor", "str", "list", "str"], "function", ["None"], ["", "def", "from_networkx", "(", "G", ")", ":", "\n", "    ", "r\"\"\"Converts a :obj:`networkx.Graph` or :obj:`networkx.DiGraph` to a\n    :class:`torch_geometric.data.Data` instance.\n\n    Args:\n        G (networkx.Graph or networkx.DiGraph): A networkx graph.\n    \"\"\"", "\n", "\n", "G", "=", "nx", ".", "convert_node_labels_to_integers", "(", "G", ")", "\n", "G", "=", "G", ".", "to_directed", "(", ")", "if", "not", "nx", ".", "is_directed", "(", "G", ")", "else", "G", "\n", "edge_index", "=", "torch", ".", "tensor", "(", "list", "(", "G", ".", "edges", ")", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "for", "i", ",", "(", "_", ",", "feat_dict", ")", "in", "enumerate", "(", "G", ".", "nodes", "(", "data", "=", "True", ")", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "feat_dict", ".", "items", "(", ")", ":", "\n", "            ", "data", "[", "str", "(", "key", ")", "]", "=", "[", "value", "]", "if", "i", "==", "0", "else", "data", "[", "str", "(", "key", ")", "]", "+", "[", "value", "]", "\n", "\n", "", "", "for", "key", ",", "item", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "[", "key", "]", "=", "torch", ".", "tensor", "(", "item", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "data", "[", "'edge_index'", "]", "=", "edge_index", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "data", "=", "torch_geometric", ".", "data", ".", "Data", ".", "from_dict", "(", "data", ")", "\n", "data", ".", "num_nodes", "=", "G", ".", "number_of_nodes", "(", ")", "\n", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.__init__": [[7, 25], ["int", "torch_geometric.utils.dense_to_sparse", "torch.eye", "adj.sum", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "adj", ")", ":", "\n", "\n", "        ", "self", ".", "adj_matrix", "=", "adj", "\n", "\n", "self", ".", "num_nodes", "=", "adj", ".", "shape", "[", "0", "]", "\n", "self", ".", "num_edges", "=", "int", "(", "adj", ".", "sum", "(", ")", ")", "\n", "\n", "self", ".", "edge_index", ",", "_", "=", "dense_to_sparse", "(", "torch", ".", "tensor", "(", "self", ".", "adj_matrix", ")", ")", "\n", "self", ".", "edge_attr", "=", "torch", ".", "eye", "(", "self", ".", "num_edges", ",", "self", ".", "num_edges", ")", "\n", "\n", "\n", "#  Adjacency intervention", "\n", "self", ".", "adj_matrix_i", "=", "None", "\n", "self", ".", "edge_attr_i", "=", "None", "\n", "self", ".", "edge_index_i", "=", "None", "\n", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_diagonal": [[28, 43], ["torch.eye", "torch_geometric.utils.dense_to_sparse", "range", "torch.stack", "torch.tensor", "range", "all", "edge_attr_i.append"], "methods", ["None"], ["", "def", "set_diagonal", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "adj_matrix_i", "=", "torch", ".", "eye", "(", "self", ".", "num_nodes", ")", "\n", "\n", "self", ".", "edge_index_i", ",", "_", "=", "dense_to_sparse", "(", "torch", ".", "tensor", "(", "self", ".", "adj_matrix_i", ")", ")", "\n", "\n", "edge_attr_i", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "edge_index_i", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_edges", ")", ":", "\n", "                ", "if", "all", "(", "self", ".", "edge_index_i", "[", ":", ",", "i", "]", "==", "self", ".", "edge_index", "[", ":", ",", "j", "]", ")", ":", "\n", "                    ", "edge_attr_i", ".", "append", "(", "self", ".", "edge_attr", "[", "j", "]", ")", "\n", "break", "\n", "\n", "\n", "", "", "", "self", ".", "edge_attr_i", "=", "torch", ".", "stack", "(", "edge_attr_i", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention": [[48, 64], ["_adjacency.Adjacency.adj_matrix.copy", "torch_geometric.utils.dense_to_sparse", "range", "torch.stack", "torch.tensor", "range", "all", "edge_attr_i.append"], "methods", ["None"], ["", "def", "set_intervention", "(", "self", ",", "node_id_list", ",", "add_self_loop", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "adj_matrix_i", "=", "self", ".", "adj_matrix", ".", "copy", "(", ")", "\n", "for", "node_id", "in", "node_id_list", ":", "\n", "            ", "self", ".", "adj_matrix_i", "[", ":", ",", "node_id", "]", "=", "0.0", "\n", "if", "add_self_loop", ":", "self", ".", "adj_matrix_i", "[", "node_id", ",", "node_id", "]", "=", "1.0", "\n", "\n", "", "self", ".", "edge_index_i", ",", "_", "=", "dense_to_sparse", "(", "torch", ".", "tensor", "(", "self", ".", "adj_matrix_i", ")", ")", "\n", "edge_attr_i", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "edge_index_i", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_edges", ")", ":", "\n", "                ", "if", "all", "(", "self", ".", "edge_index_i", "[", ":", ",", "i", "]", "==", "self", ".", "edge_index", "[", ":", ",", "j", "]", ")", ":", "\n", "                    ", "edge_attr_i", ".", "append", "(", "self", ".", "edge_attr", "[", "j", "]", ")", "\n", "break", "\n", "\n", "", "", "", "self", ".", "edge_attr_i", "=", "torch", ".", "stack", "(", "edge_attr_i", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention": [[65, 70], ["None"], "methods", ["None"], ["", "def", "clean_intervention", "(", "self", ")", ":", "\n", "#  Adjacency intervention", "\n", "        ", "self", ".", "adj_matrix_i", "=", "None", "\n", "self", ".", "edge_attr_i", "=", "None", "\n", "self", ".", "edge_index_i", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.__init__": [[19, 125], ["pytorch_lightning.LightningDataModule.__init__", "os.path.join", "dataset_fn", "dataset_fn", "dataset_fn", "int", "int", "os.path.join", "GermanSCM", "GermanSCM", "GermanSCM"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", "=", "\"./\"", ",", "\n", "dataset_name", ":", "str", "=", "Cte", ".", "CHAIN", ",", "\n", "num_samples_tr", ":", "int", "=", "10000", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "\n", "normalize", ":", "str", "=", "None", ",", "\n", "normalize_A", ":", "str", "=", "None", ",", "\n", "likelihood_names", ":", "str", "=", "None", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "lambda_", ":", "float", "=", "0.05", ",", "\n", "equations_type", ":", "str", "=", "'linear'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "\n", "self", ".", "equations_type", "=", "equations_type", "\n", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "normalize_A", "=", "normalize_A", "\n", "self", ".", "scaler", "=", "None", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "\n", "self", ".", "_shuffle_train", "=", "True", "\n", "\n", "if", "dataset_name", "==", "Cte", ".", "TRIANGLE", ":", "\n", "            ", "from", "datasets", ".", "triangle", "import", "TriangleSCM", "\n", "\n", "dataset_fn", "=", "TriangleSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "CHAIN", ":", "\n", "            ", "from", "datasets", ".", "chain", "import", "ChainSCM", "\n", "\n", "dataset_fn", "=", "ChainSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "COLLIDER", ":", "\n", "            ", "from", "datasets", ".", "collider", "import", "ColliderSCM", "\n", "\n", "dataset_fn", "=", "ColliderSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "MGRAPH", ":", "\n", "            ", "from", "datasets", ".", "mgraph", "import", "MGraphSCM", "\n", "\n", "dataset_fn", "=", "MGraphSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "LOAN", ":", "\n", "            ", "from", "datasets", ".", "loan", "import", "LoanSCM", "\n", "\n", "dataset_fn", "=", "LoanSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "ADULT", ":", "\n", "            ", "from", "datasets", ".", "adult", "import", "AdultSCM", "\n", "\n", "dataset_fn", "=", "AdultSCM", "\n", "", "elif", "dataset_name", "==", "Cte", ".", "GERMAN", ":", "\n", "            ", "root_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'VACA'", ")", "\n", "from", "datasets", ".", "german", "import", "GermanSCM", "\n", "\n", "self", ".", "train_dataset", "=", "GermanSCM", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'train'", ",", "\n", "num_samples_tr", "=", "num_samples_tr", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", "\n", ")", "\n", "self", ".", "valid_dataset", "=", "GermanSCM", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'valid'", ",", "\n", "num_samples_tr", "=", "num_samples_tr", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", "\n", ")", "\n", "self", ".", "test_dataset", "=", "GermanSCM", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'test'", ",", "\n", "num_samples_tr", "=", "num_samples_tr", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "dataset_name", "in", "[", "Cte", ".", "CHAIN", ",", "Cte", ".", "COLLIDER", ",", "Cte", ".", "TRIANGLE", ",", "Cte", ".", "MGRAPH", ",", "Cte", ".", "LOAN", ",", "Cte", ".", "ADULT", "]", ":", "\n", "            ", "root_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'VACA'", ")", "\n", "\n", "self", ".", "train_dataset", "=", "dataset_fn", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'train'", ",", "\n", "num_samples", "=", "num_samples_tr", ",", "\n", "equations_type", "=", "equations_type", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", ")", "\n", "\n", "self", ".", "valid_dataset", "=", "dataset_fn", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'valid'", ",", "\n", "num_samples", "=", "int", "(", "0.5", "*", "num_samples_tr", ")", ",", "\n", "equations_type", "=", "equations_type", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", ")", "\n", "\n", "self", ".", "test_dataset", "=", "dataset_fn", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "'test'", ",", "\n", "num_samples", "=", "int", "(", "0.5", "*", "num_samples_tr", ")", ",", "\n", "equations_type", "=", "equations_type", ",", "\n", "likelihood_names", "=", "likelihood_names", ",", "\n", "lambda_", "=", "lambda_", ",", "\n", "transform", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.likelihood_list": [[126, 129], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "likelihood_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "likelihood_list", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.topological_nodes": [[130, 134], ["het_scm.HeterogeneousSCMDataModule.train_dataset.get_topological_nodes_pa"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa"], ["", "@", "property", "\n", "def", "topological_nodes", "(", "self", ")", ":", "\n", "        ", "topological_nodes", ",", "_", "=", "self", ".", "train_dataset", ".", "get_topological_nodes_pa", "(", ")", "\n", "return", "topological_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.topological_parents": [[135, 139], ["het_scm.HeterogeneousSCMDataModule.train_dataset.get_topological_nodes_pa"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_topological_nodes_pa"], ["", "@", "property", "\n", "def", "topological_parents", "(", "self", ")", ":", "\n", "        ", "_", ",", "topological_pa", "=", "self", ".", "train_dataset", ".", "get_topological_nodes_pa", "(", ")", "\n", "return", "topological_pa", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.node_dim": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "node_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "node_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.num_nodes": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_nodes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.edge_dimension": [[148, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "edge_dimension", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "num_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.is_heterogeneous": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_heterogeneous", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "is_heterogeneous", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.set_shuffle_train": [[156, 158], ["None"], "methods", ["None"], ["", "def", "set_shuffle_train", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_shuffle_train", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_node_dim_image": [[159, 168], ["het_scm.HeterogeneousSCMDataModule.train_dataset.node_is_image", "het_scm.HeterogeneousSCMDataModule.train_dataset.get_node_dimensions", "enumerate"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets.german.GermanSCM.node_is_image", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_node_dimensions"], ["", "def", "get_node_dim_image", "(", "self", ")", ":", "\n", "        ", "keys", "=", "self", ".", "train_dataset", ".", "nodes_list", "\n", "is_image", "=", "self", ".", "train_dataset", ".", "node_is_image", "(", ")", "\n", "node_dims", "=", "self", ".", "train_dataset", ".", "get_node_dimensions", "(", ")", "\n", "node_dim_image", "=", "{", "}", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "keys", ")", ":", "\n", "            ", "node_dim_image", "[", "key", "]", "=", "(", "node_dims", "[", "i", "]", ",", "is_image", "[", "i", "]", ")", "\n", "\n", "", "return", "node_dim_image", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_random_train_sampler": [[169, 177], ["het_scm.HeterogeneousSCMDataModule.train_dataset.set_transform", "het_scm.HeterogeneousSCMDataModule._default_transforms", "torch_geometric.data.DataLoader", "next", "iter"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule._default_transforms"], ["", "def", "get_random_train_sampler", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", ".", "set_transform", "(", "self", ".", "_default_transforms", "(", ")", ")", "\n", "\n", "def", "tmp_fn", "(", "num_samples", ")", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "num_samples", ",", "shuffle", "=", "True", ")", "\n", "return", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "\n", "", "return", "tmp_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_deg": [[178, 192], ["torch.cat", "torch.bincount.float", "torch_geometric.utils.degree", "d_list.append", "torch.bincount", "torch_geometric.utils.degree.numel"], "methods", ["None"], ["", "def", "get_deg", "(", "self", ",", "indegree", "=", "True", ",", "bincount", "=", "False", ")", ":", "\n", "        ", "d_list", "=", "[", "]", "\n", "idx", "=", "1", "if", "indegree", "else", "0", "\n", "for", "data", "in", "self", ".", "train_dataset", ":", "\n", "            ", "d", "=", "degree", "(", "data", ".", "edge_index", "[", "idx", "]", ",", "num_nodes", "=", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "d_list", ".", "append", "(", "d", ")", "\n", "\n", "", "d", "=", "torch", ".", "cat", "(", "d_list", ")", "\n", "if", "bincount", ":", "\n", "            ", "deg", "=", "torch", ".", "bincount", "(", "d", ",", "minlength", "=", "d", ".", "numel", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "deg", "=", "d", "\n", "\n", "", "return", "deg", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.prepare_data": [[193, 210], ["het_scm.HeterogeneousSCMDataModule.train_dataset.prepare_data", "het_scm.HeterogeneousSCMDataModule.valid_dataset.prepare_data", "het_scm.HeterogeneousSCMDataModule.test_dataset.prepare_data", "data_modules._scalers.MaskedTensorStandardScaler", "het_scm.HeterogeneousSCMDataModule.scaler.fit", "data_modules._scalers.MaskedTensorLikelihoodScaler", "het_scm.HeterogeneousSCMDataModule.scaler.fit", "sklearn.preprocessing.FunctionTransformer", "het_scm.HeterogeneousSCMDataModule.train_dataset.get_dim_to_scale_x0", "het_scm.HeterogeneousSCMDataModule.train_dataset.get_dim_to_scale"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.prepare_data", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.prepare_data", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.prepare_data", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_dim_to_scale_x0", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_dim_to_scale"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "train_dataset", ".", "prepare_data", "(", "normalize_A", "=", "self", ".", "normalize_A", ",", "add_self_loop", "=", "True", ")", "\n", "self", ".", "valid_dataset", ".", "prepare_data", "(", "normalize_A", "=", "self", ".", "normalize_A", ",", "add_self_loop", "=", "True", ")", "\n", "self", ".", "test_dataset", ".", "prepare_data", "(", "normalize_A", "=", "self", ".", "normalize_A", ",", "add_self_loop", "=", "True", ")", "\n", "if", "self", ".", "normalize", "==", "'std'", ":", "\n", "            ", "self", ".", "scaler", "=", "MaskedTensorStandardScaler", "(", "list_dim_to_scale_x0", "=", "self", ".", "train_dataset", ".", "get_dim_to_scale_x0", "(", ")", ",", "\n", "list_dim_to_scale", "=", "self", ".", "train_dataset", ".", "get_dim_to_scale", "(", ")", ",", "\n", "total_num_dimensions", "=", "self", ".", "train_dataset", ".", "num_dimensions", ")", "\n", "self", ".", "scaler", ".", "fit", "(", "self", ".", "train_dataset", ".", "X0", ")", "\n", "", "elif", "self", ".", "normalize", "==", "'lik'", ":", "\n", "            ", "self", ".", "scaler", "=", "MaskedTensorLikelihoodScaler", "(", "likelihoods", "=", "self", ".", "train_dataset", ".", "likelihoods", ",", "\n", "mask_x0", "=", "self", ".", "train_dataset", ".", "mask_X0", "[", "0", ",", ":", "]", ")", "\n", "self", ".", "scaler", ".", "fit", "(", "self", ".", "train_dataset", ".", "X0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "preprocessing", ".", "FunctionTransformer", "(", "func", "=", "lambda", "x", ":", "x", ",", "\n", "inverse_func", "=", "lambda", "x", ":", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.train_dataloader": [[211, 222], ["het_scm.HeterogeneousSCMDataModule.train_dataset.set_transform", "torch_geometric.data.DataLoader", "het_scm.HeterogeneousSCMDataModule._default_transforms"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule._default_transforms"], ["", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", ".", "set_transform", "(", "self", ".", "_default_transforms", "(", ")", ")", "\n", "loader", "=", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "_shuffle_train", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.val_dataloader": [[223, 235], ["het_scm.HeterogeneousSCMDataModule.valid_dataset.set_transform", "torch_geometric.data.DataLoader", "het_scm.HeterogeneousSCMDataModule._default_transforms"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule._default_transforms"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "self", ".", "valid_dataset", ".", "set_transform", "(", "self", ".", "_default_transforms", "(", ")", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "\n", "self", ".", "valid_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader": [[236, 244], ["het_scm.HeterogeneousSCMDataModule.test_dataset.set_transform", "torch_geometric.data.DataLoader", "het_scm.HeterogeneousSCMDataModule._default_transforms"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.set_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule._default_transforms"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_dataset", ".", "set_transform", "(", "self", ".", "_default_transforms", "(", ")", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "num_workers", ",", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule._default_transforms": [[245, 252], ["torchvision.transforms.Compose", "datasets.transforms.ToTensor", "datasets.transforms.ToTensor", "het_scm.HeterogeneousSCMDataModule.scaler.transform", "x.reshape"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "def", "_default_transforms", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scaler", "is", "not", "None", ":", "\n", "            ", "return", "transform_lib", ".", "Compose", "(", "\n", "[", "lambda", "x", ":", "self", ".", "scaler", ".", "transform", "(", "x", ".", "reshape", "(", "1", ",", "self", ".", "train_dataset", ".", "total_num_dim_x0", ")", ")", ",", "ToTensor", "(", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_attributes_dict": [[253, 255], ["het_scm.HeterogeneousSCMDataModule.train_dataset.get_attributes_dict"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_attributes_dict"], ["", "", "def", "get_attributes_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_dataset", ".", "get_attributes_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X": [[256, 265], ["het_scm.HeterogeneousSCMDataModule.scaler.transform", "het_scm.HeterogeneousSCMDataModule.train_dataset.X.copy", "het_scm.HeterogeneousSCMDataModule.scaler.transform", "het_scm.HeterogeneousSCMDataModule.test_dataset.X.copy", "het_scm.HeterogeneousSCMDataModule.scaler.transform", "het_scm.HeterogeneousSCMDataModule.valid_dataset.X.copy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "def", "get_normalized_X", "(", "self", ",", "mode", "=", "'test'", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "scaler", ".", "transform", "(", "self", ".", "train_dataset", ".", "X", ".", "copy", "(", ")", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "scaler", ".", "transform", "(", "self", ".", "test_dataset", ".", "X", ".", "copy", "(", ")", ")", "\n", "", "elif", "mode", "==", "'valid'", ":", "\n", "            ", "return", "self", ".", "scaler", ".", "transform", "(", "self", ".", "valid_dataset", ".", "X", ".", "copy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorStandardScaler.__init__": [[8, 13], ["sklearn.preprocessing.StandardScaler"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_dim_to_scale_x0", ",", "list_dim_to_scale", ",", "total_num_dimensions", ")", ":", "\n", "        ", "self", ".", "list_dim_to_scale_x0", "=", "list_dim_to_scale_x0", "# [0, 1, 4, 5 ,7 ,8]", "\n", "self", ".", "list_dim_to_scale", "=", "list_dim_to_scale", "# [0, 1, 4, 5 ,7 ,8]", "\n", "self", ".", "total_num_dimensions", "=", "total_num_dimensions", "\n", "self", ".", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorStandardScaler.fit": [[14, 19], ["_scalers.MaskedTensorStandardScaler.scaler.fit", "_scalers.MaskedTensorStandardScaler.scaler.fit"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit"], ["", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "1", "]", "!=", "self", ".", "total_num_dimensions", ":", "\n", "            ", "self", ".", "scaler", ".", "fit", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale_x0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", ".", "fit", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorStandardScaler.transform": [[20, 28], ["torch.tensor", "_scalers.MaskedTensorStandardScaler.scaler.transform", "_scalers.MaskedTensorStandardScaler.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "1", "]", "!=", "self", ".", "total_num_dimensions", ":", "\n", "            ", "x_scaled", "=", "self", ".", "scaler", ".", "transform", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale_x0", "]", ")", "\n", "x", "[", ":", ",", "self", ".", "list_dim_to_scale_x0", "]", "=", "x_scaled", "\n", "", "else", ":", "\n", "            ", "x_scaled", "=", "self", ".", "scaler", ".", "transform", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale", "]", ")", "\n", "x", "[", ":", ",", "self", ".", "list_dim_to_scale", "]", "=", "x_scaled", "\n", "", "return", "torch", ".", "tensor", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorStandardScaler.inverse_transform": [[29, 37], ["_scalers.MaskedTensorStandardScaler.scaler.inverse_transform", "torch.tensor", "_scalers.MaskedTensorStandardScaler.scaler.inverse_transform", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "1", "]", "!=", "self", ".", "total_num_dimensions", ":", "\n", "            ", "x_unscaled", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale_x0", "]", ")", "\n", "x", "[", ":", ",", "self", ".", "list_dim_to_scale_x0", "]", "=", "torch", ".", "tensor", "(", "x_unscaled", ")", "\n", "", "else", ":", "\n", "            ", "x_unscaled", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "x", "[", ":", ",", "self", ".", "list_dim_to_scale", "]", ")", "\n", "x", "[", ":", ",", "self", ".", "list_dim_to_scale", "]", "=", "torch", ".", "tensor", "(", "x_unscaled", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.__init__": [[40, 49], ["flatten", "len", "_scalers.MaskedTensorLikelihoodScaler.dim_list.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "likelihoods", ",", "mask_x0", ")", ":", "\n", "        ", "self", ".", "likelihoods", "=", "flatten", "(", "likelihoods", ")", "\n", "self", ".", "mask_x0", "=", "mask_x0", "\n", "\n", "self", ".", "total_num_dim_x0", "=", "len", "(", "mask_x0", ")", "\n", "\n", "self", ".", "dim_list", "=", "[", "]", "\n", "for", "lik", "in", "self", ".", "likelihoods", ":", "\n", "            ", "self", ".", "dim_list", ".", "append", "(", "lik", ".", "domain_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit": [[50, 57], ["torch.tensor().type", "torch.split", "zip", "lik_i.fit", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "x", "=", "x", "[", ":", ",", "self", ".", "mask_x0", "]", "if", "self", ".", "total_num_dim_x0", "==", "x", ".", "shape", "[", "1", "]", "else", "x", "\n", "x_list", "=", "torch", ".", "split", "(", "x", ",", "split_size_or_sections", "=", "self", ".", "dim_list", ",", "dim", "=", "1", ")", "\n", "\n", "for", "lik_i", ",", "x_i", "in", "zip", "(", "self", ".", "likelihoods", ",", "x_list", ")", ":", "\n", "            ", "lik_i", ".", "fit", "(", "x_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.transform": [[58, 76], ["torch.tensor().type", "torch.split", "zip", "torch.cat", "torch.cat.append", "torch.tensor", "lik_i.normalize_data"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.normalize_data"], ["", "", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "if", "self", ".", "total_num_dim_x0", "==", "x", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x_tmp", "=", "x", "[", ":", ",", "self", ".", "mask_x0", "]", "\n", "", "else", ":", "\n", "            ", "x_tmp", "=", "x", "\n", "", "x_list", "=", "torch", ".", "split", "(", "x_tmp", ",", "split_size_or_sections", "=", "self", ".", "dim_list", ",", "dim", "=", "1", ")", "\n", "x_norm", "=", "[", "]", "\n", "for", "lik_i", ",", "x_i", "in", "zip", "(", "self", ".", "likelihoods", ",", "x_list", ")", ":", "\n", "            ", "x_norm", ".", "append", "(", "lik_i", ".", "normalize_data", "(", "x_i", ")", ")", "\n", "", "x_norm", "=", "torch", ".", "cat", "(", "x_norm", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "total_num_dim_x0", "==", "x", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x", "[", ":", ",", "self", ".", "mask_x0", "]", "=", "x_norm", "\n", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit_transform": [[77, 80], ["_scalers.MaskedTensorLikelihoodScaler.fit", "_scalers.MaskedTensorLikelihoodScaler.transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "", "def", "fit_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "fit", "(", "x", ")", "\n", "return", "self", ".", "transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.inverse_transform": [[81, 99], ["torch.tensor", "torch.split", "zip", "torch.cat", "torch.cat.append", "lik_i.denormalize_data"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.NormalLikelihood.denormalize_data"], ["", "def", "inverse_transform", "(", "self", ",", "x_norm", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "tensor", "(", "x_norm", ")", "\n", "\n", "if", "self", ".", "total_num_dim_x0", "==", "x_norm", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x_tmp", "=", "x_norm", "[", ":", ",", "self", ".", "mask_x0", "]", "\n", "", "else", ":", "\n", "            ", "x_tmp", "=", "x_norm", "\n", "\n", "", "x_list", "=", "torch", ".", "split", "(", "x_tmp", ",", "split_size_or_sections", "=", "self", ".", "dim_list", ",", "dim", "=", "1", ")", "\n", "x", "=", "[", "]", "\n", "for", "lik_i", ",", "x_i", "in", "zip", "(", "self", ".", "likelihoods", ",", "x_list", ")", ":", "\n", "            ", "x", ".", "append", "(", "lik_i", ".", "denormalize_data", "(", "x_i", ")", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "total_num_dim_x0", "==", "x", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x_norm", "[", ":", ",", "self", ".", "mask_x0", "]", "=", "x", "\n", "return", "x_norm", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.__init__": [[102, 104], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scaler", ")", ":", "\n", "        ", "self", ".", "scaler", "=", "scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform": [[105, 107], ["torch.tensor", "_scalers.TensorScaler.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "self", ".", "scaler", ".", "transform", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform": [[108, 110], ["torch.tensor", "_scalers.TensorScaler.scaler.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.disjoint_pna.DisjointPNA.__init__": [[21, 76], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "modules.blocks.pna.disjoint_pna.DisjointPNAConv", "disjoint_pna.DisjointPNA.convs.append", "utils.activations.get_activation", "disjoint_pna.DisjointPNA.activs.append", "torch.Dropout", "disjoint_pna.DisjointPNA.dropouts.append", "len", "modules.blocks.disjoint_dense.DisjointDense", "disjoint_pna.DisjointPNA.residuals.append", "len", "m_channels.copy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["def", "__init__", "(", "self", ",", "c_list", ":", "List", "[", "int", "]", ",", "# [1,2,2]", "\n", "m_layers", ":", "int", ",", "# Number of layers per message", "\n", "edge_dim", ":", "int", ",", "\n", "deg", ":", "Tensor", ",", "\n", "num_nodes", ":", "int", "=", "None", ",", "\n", "aggregators", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "scalers", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "drop_rate", ":", "float", "=", "0.1", ",", "\n", "residual", ":", "int", "=", "0", ",", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "len", "(", "c_list", ")", "-", "1", ")", "%", "m_layers", "==", "0", "\n", "\n", "if", "aggregators", "is", "None", ":", "\n", "            ", "aggregators", "=", "[", "'sum'", ",", "'min'", ",", "'max'", ",", "'std'", "]", "\n", "", "if", "scalers", "is", "None", ":", "\n", "            ", "scalers", "=", "[", "'identity'", "]", "\n", "\n", "#", "\n", "", "self", ".", "residual", "=", "residual", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "residual", ":", "\n", "            ", "assert", "num_nodes", "is", "not", "None", "\n", "self", ".", "residuals", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residuals", "=", "None", "\n", "", "self", ".", "num_steps_mp", "=", "(", "len", "(", "c_list", ")", "-", "1", ")", "//", "m_layers", "# Number of steps of message passing", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_steps_mp", ")", ":", "\n", "            ", "m_channels", "=", "c_list", "[", "(", "m_layers", "*", "i", ")", ":", "(", "m_layers", "*", "(", "i", "+", "1", ")", "+", "1", ")", "]", "\n", "net", "=", "DisjointPNAConv", "(", "m_channels", "=", "m_channels", ".", "copy", "(", ")", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "aggregators", ",", "\n", "scalers", "=", "scalers", ",", "\n", "deg", "=", "deg", ",", "\n", "act_name", "=", "act_name", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "net", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "0.0", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "fc", "=", "DisjointDense", "(", "in_dimension", "=", "m_channels", "[", "0", "]", ",", "out_dimension", "=", "m_channels", "[", "-", "1", "]", ",", "num_disjoint", "=", "num_nodes", ")", "\n", "self", ".", "residuals", ".", "append", "(", "fc", ")", "\n", "", "", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "self", ".", "act_name", "=", "act_name", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.disjoint_pna.DisjointPNA.forward": [[77, 100], ["enumerate", "zip", "act", "conv", "dout", "dout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x: Input features per node\n            edge_index:  List of vertex index pairs representing the edges in the graph (PyTorch geometric notation)\n            edge_attr:\n            **kwargs:\n\n        Returns:\n\n        \"\"\"", "\n", "node_ids", "=", "kwargs", "[", "'node_ids'", "]", "\n", "for", "i", ",", "(", "conv", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "convs", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "conv", "(", "x", ",", "edge_index", ",", "edge_attr", ",", "node_ids", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\n", "                ", "x", "=", "h", "+", "self", ".", "residuals", "[", "i", "]", "(", "x", ",", "node_ids", ")", "\n", "x", "=", "dout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "dout", "(", "h", ")", "\n", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.pna.PNAModule.__init__": [[19, 72], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.ModuleList", "zip", "modules.blocks.pna.PNAConv", "pna.PNAModule.convs.append", "utils.activations.get_activation", "pna.PNAModule.activs.append", "torch.Dropout", "pna.PNAModule.dropouts.append", "torch.Linear", "pna.PNAModule.residuals.append", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["def", "__init__", "(", "self", ",", "c_list", ",", "deg", ",", "\n", "edge_dim", "=", "None", ",", "\n", "drop_rate", "=", "0.1", ",", "\n", "act_name", "=", "Cte", ".", "RELU", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            c_list:\n            deg: In-degree histogram over training data\n            edge_dim:\n            drop_rate:\n            act_name:\n            aggregators:\n            scalers:\n            residual:\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "aggregators", "is", "None", ":", "\n", "            ", "aggregators", "=", "[", "'sum'", ",", "'min'", ",", "'max'", ",", "'std'", "]", "\n", "", "if", "scalers", "is", "None", ":", "\n", "            ", "scalers", "=", "[", "'identity'", ",", "'amplification'", ",", "'attenuation'", "]", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "residual", ":", "\n", "            ", "self", ".", "residuals", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residuals", "=", "None", "\n", "\n", "", "self", ".", "residual", "=", "residual", "\n", "\n", "for", "i", ",", "(", "in_ch", ",", "out_ch", ")", "in", "enumerate", "(", "zip", "(", "c_list", "[", ":", "-", "1", "]", ",", "c_list", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "conv", "=", "PNAConv", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "out_ch", ",", "aggregators", "=", "aggregators", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "scalers", "=", "scalers", ",", "deg", "=", "deg", ",", "post_layers", "=", "1", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "conv", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "len", "(", "c_list", "[", ":", "-", "1", "]", ")", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_ch", ",", "out_features", "=", "out_ch", ")", "\n", "self", ".", "residuals", ".", "append", "(", "fc", ")", "\n", "\n", "", "", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "act_name", "=", "act_name", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.pna.PNAModule.forward": [[73, 94], ["enumerate", "zip", "act", "conv", "dout", "dout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x: Input features per node\n            edge_index: List of vertex index pairs representing the edges in the graph (PyTorch geometric notation)\n            edge_attr:\n            **kwargs:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "for", "i", ",", "(", "conv", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "convs", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "conv", "(", "x", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "x", "=", "h", "+", "self", ".", "residuals", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "dout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "dout", "(", "h", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.disjoint_gnn.DisjointGNN.__init__": [[16, 61], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "modules.blocks.disjoint_graph_conv.DisjointGConv", "disjoint_gnn.DisjointGNN.convs.append", "utils.activations.get_activation", "disjoint_gnn.DisjointGNN.activs.append", "torch.Dropout", "disjoint_gnn.DisjointGNN.dropouts.append", "len", "modules.blocks.disjoint_dense.DisjointDense", "disjoint_gnn.DisjointGNN.residuals.append", "len", "m_channels.copy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["def", "__init__", "(", "self", ",", "c_list", ":", "List", "[", "int", "]", ",", "# [1,2,2]", "\n", "m_layers", ":", "int", ",", "# Number of layers per message", "\n", "edge_dim", ":", "int", ",", "\n", "num_nodes", ":", "int", "=", "None", ",", "\n", "drop_rate", ":", "float", "=", "0.1", ",", "\n", "residual", ":", "int", "=", "0", ",", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", "use_i_in_message_ij", ":", "bool", "=", "True", ",", "\n", "aggr", ":", "str", "=", "'add'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "len", "(", "c_list", ")", "-", "1", ")", "%", "m_layers", "==", "0", "\n", "#", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "residual", ":", "\n", "            ", "assert", "num_nodes", "is", "not", "None", "\n", "self", ".", "residuals", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residuals", "=", "None", "\n", "", "self", ".", "num_steps_mp", "=", "(", "len", "(", "c_list", ")", "-", "1", ")", "//", "m_layers", "# Number of steps of message passing", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_steps_mp", ")", ":", "\n", "            ", "m_channels", "=", "c_list", "[", "(", "m_layers", "*", "i", ")", ":", "(", "m_layers", "*", "(", "i", "+", "1", ")", "+", "1", ")", "]", "\n", "net", "=", "DisjointGConv", "(", "m_channels", "=", "m_channels", ".", "copy", "(", ")", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "aggr", "=", "aggr", ",", "\n", "act_name", "=", "act_name", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "use_i_in_message_ij", "=", "use_i_in_message_ij", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "net", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "0.0", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "fc", "=", "DisjointDense", "(", "in_dimension", "=", "m_channels", "[", "0", "]", ",", "out_dimension", "=", "m_channels", "[", "-", "1", "]", ",", "num_disjoint", "=", "num_nodes", ")", "\n", "self", ".", "residuals", ".", "append", "(", "fc", ")", "\n", "", "", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "self", ".", "act_name", "=", "act_name", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.disjoint_gnn.DisjointGNN.forward": [[62, 79], ["enumerate", "zip", "act", "conv", "dout", "dout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            x - Input features per node\n            edge_index - List of vertex index pairs representing the edges in the graph (PyTorch geometric notation)\n        \"\"\"", "\n", "node_ids", "=", "kwargs", "[", "'node_ids'", "]", "\n", "for", "i", ",", "(", "conv", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "convs", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "conv", "(", "x", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\n", "                ", "x", "=", "h", "+", "self", ".", "residuals", "[", "i", "]", "(", "x", ",", "node_ids", ")", "\n", "x", "=", "dout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "dout", "(", "h", ")", "\n", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.dense.MLPModule.__init__": [[11, 31], ["torch.Module.__init__", "isinstance", "enumerate", "torch.Sequential", "len", "len", "zip", "layers.append", "layers.append", "blocks.dense.basic_dense_block", "blocks.dense.basic_dense_block"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.blocks.dense.basic_dense_block", "home.repos.pwc.inspect_result.psanch21_VACA.blocks.dense.basic_dense_block"], ["    ", "def", "__init__", "(", "self", ",", "h_dim_list", ":", "List", "[", "int", "]", ",", "\n", "activ_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "drop_rate", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MLPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "h_dim_list", ",", "list", ")", "\n", "assert", "len", "(", "h_dim_list", ")", ">", "1", "\n", "n_layers", "=", "len", "(", "h_dim_list", ")", "-", "1", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "(", "h_in", ",", "h_out", ")", "in", "enumerate", "(", "zip", "(", "h_dim_list", "[", ":", "-", "1", "]", ",", "h_dim_list", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "if", "(", "i", "+", "1", ")", "<", "n_layers", ":", "\n", "                ", "layers", ".", "append", "(", "basic_dense_block", "(", "h_in", ",", "h_out", ",", "activ_name", ",", "drop_rate", "=", "drop_rate", ",", "bn", "=", "bn", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "basic_dense_block", "(", "h_in", ",", "h_out", ",", "activation_name", "=", "Cte", ".", "IDENTITY", ",", "\n", "drop_rate", "=", "drop_rate", ",", "bn", "=", "bn", ")", ")", "\n", "\n", "", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "dims", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.dense.MLPModule.set_output_dims": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_output_dims", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.modules.dense.MLPModule.forward": [[35, 43], ["x.view.view.size", "x.view.view.view", "dense.MLPModule.mlp", "logits.view.view.view", "logits.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "mlp", "(", "x", ")", "\n", "if", "self", ".", "dims", "is", "not", "None", ":", "\n", "            ", "logits", "=", "logits", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "*", "self", ".", "dims", ")", "\n", "\n", "", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_dense.DisjointDense.__init__": [[7, 18], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dimension", ":", "int", ",", "\n", "out_dimension", ":", "int", ",", "\n", "num_disjoint", ":", "int", ")", ":", "\n", "        ", "super", "(", "DisjointDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weights", "=", "nn", ".", "Linear", "(", "num_disjoint", ",", "in_dimension", "*", "out_dimension", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Linear", "(", "num_disjoint", ",", "out_dimension", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "in_dimension", "=", "in_dimension", "\n", "self", ".", "out_dimension", "=", "out_dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_dense.DisjointDense.reset_parameters": [[19, 22], ["disjoint_dense.DisjointDense.weights.reset_parameters", "disjoint_dense.DisjointDense.bias.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "weights", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bias", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_dense.DisjointDense.forward": [[23, 30], ["disjoint_dense.DisjointDense.weights().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "disjoint_dense.DisjointDense.bias", "disjoint_dense.DisjointDense.weights"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "one_hot_selector", ")", ":", "\n", "        ", "w", "=", "self", ".", "weights", "(", "one_hot_selector", ")", ".", "view", "(", "-", "1", ",", "self", ".", "in_dimension", ",", "self", ".", "out_dimension", ")", "# [N, in, out]", "\n", "h", "=", "torch", ".", "einsum", "(", "'bij,bi->bj'", ",", "w", ",", "x", ")", "# [N, out]", "\n", "\n", "bias", "=", "self", ".", "bias", "(", "one_hot_selector", ")", "\n", "\n", "return", "h", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.dense.basic_dense_block": [[6, 12], ["utils.activations.get_activation", "torch.Linear", "torch.Sequential", "torch.Dropout", "torch.Identity", "torch.BatchNorm1d", "torch.Identity"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["from", ".", "blocks", ".", "dense", "import", "basic_dense_block", "\n", "\n", "\n", "class", "MLPModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "h_dim_list", ":", "List", "[", "int", "]", ",", "\n", "activ_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_graph_conv.DisjointGConv.__init__": [[19, 63], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "disjoint_graph_conv.DisjointGConv.reset_parameters", "len", "len", "zip", "modules.blocks.disjoint_dense.DisjointDense", "disjoint_graph_conv.DisjointGConv.m_net_list.append", "utils.activations.get_activation", "disjoint_graph_conv.DisjointGConv.activs.append", "torch.Dropout", "torch.Dropout", "disjoint_graph_conv.DisjointGConv.dropouts.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["def", "__init__", "(", "self", ",", "m_channels", ":", "list", ",", "\n", "edge_dim", ":", "int", ",", "\n", "aggr", ":", "Optional", "[", "str", "]", "=", "'add'", ",", "\n", "act_name", ":", "Optional", "[", "str", "]", "=", "'relu'", ",", "\n", "drop_rate", ":", "Optional", "[", "float", "]", "=", "0.0", ",", "\n", "use_i_in_message_ij", ":", "Optional", "[", "bool", "]", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            m_channels:\n            edge_dim:\n                one hot encoding of the index of the edge in the graph.\n                I.e., edge_dim = # edges in our graph including self loops.\n            aggr:\n            act_name:\n            drop_rate:\n            use_i_in_message_ij:\n            **kwargs:\n        \"\"\"", "\n", "\n", "super", "(", "DisjointGConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ",", "\n", "node_dim", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "assert", "len", "(", "m_channels", ")", ">=", "2", "\n", "self", ".", "m_net_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "use_i_in_message_ij", "=", "use_i_in_message_ij", "\n", "self", ".", "m_layers", "=", "len", "(", "m_channels", ")", "-", "1", "\n", "if", "self", ".", "use_i_in_message_ij", ":", "m_channels", "[", "0", "]", "=", "m_channels", "[", "0", "]", "*", "2", "\n", "\n", "for", "i", ",", "(", "in_ch", ",", "out_ch", ")", "in", "enumerate", "(", "zip", "(", "m_channels", "[", ":", "-", "1", "]", ",", "m_channels", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "m_net", "=", "DisjointDense", "(", "in_dimension", "=", "in_ch", ",", "out_dimension", "=", "out_ch", ",", "num_disjoint", "=", "edge_dim", ")", "\n", "self", ".", "m_net_list", ".", "append", "(", "m_net", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "len", "(", "m_channels", "[", ":", "-", "1", "]", ")", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", "if", "(", "i", "+", "1", ")", "<", "len", "(", "m_channels", "[", ":", "-", "1", "]", ")", "else", "0.0", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "\n", "", "self", ".", "edge_dim", "=", "edge_dim", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_graph_conv.DisjointGConv.reset_parameters": [[64, 67], ["m_net.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m_net", "in", "self", ".", "m_net_list", ":", "\n", "            ", "m_net", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_graph_conv.DisjointGConv.forward": [[68, 87], ["disjoint_graph_conv.DisjointGConv.propagate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "\n", "edge_index", ":", "Adj", ",", "\n", "edge_attr", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x:\n            edge_index:\n                edge_index = []\n                edge_index.append([0,1])\n                edge_index.append([2,2])\n            edge_attr:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ",", "size", "=", "None", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.blocks.disjoint_graph_conv.DisjointGConv.message": [[88, 114], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "act", "dout", "m_net"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_i", ":", "Tensor", ",", "\n", "x_j", ":", "Tensor", ",", "\n", "edge_attr", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x_i:\n                are N nodes being updated\n            x_j:\n                is a neighbor of node x_i, could be itself if we have self-loops\n            edge_attr:\n                dimension self.edge_dim. In our case one-hot encoding\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "if", "self", ".", "use_i_in_message_ij", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x_j", "\n", "\n", "", "for", "i", ",", "(", "m_net", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "m_net_list", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "m_net", "(", "x", ",", "one_hot_selector", "=", "edge_attr", ")", ")", "\n", "x", "=", "dout", "(", "h", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.disjoint_pna.DisjointPNAConv.__init__": [[17, 68], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "modules.blocks.disjoint_dense.DisjointDense", "disjoint_pna.DisjointPNAConv.reset_parameters", "len", "len", "deg.mean().item", "deg.exp().mean().item", "zip", "modules.blocks.disjoint_dense.DisjointDense", "disjoint_pna.DisjointPNAConv.m_net_list.append", "utils.activations.get_activation", "disjoint_pna.DisjointPNAConv.activs.append", "torch.Dropout", "torch.Dropout", "disjoint_pna.DisjointPNAConv.dropouts.append", "deg.mean", "deg.exp().mean", "len", "len", "deg.exp"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["    ", "\"\"\"\n    Disjoint parameters for each edge connection\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "c_list", ":", "List", "[", "int", "]", ",", "# [1,2,2]", "\n", "m_layers", ":", "int", ",", "# Number of layers per message", "\n", "edge_dim", ":", "int", ",", "\n", "deg", ":", "Tensor", ",", "\n", "num_nodes", ":", "int", "=", "None", ",", "\n", "aggregators", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "scalers", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "drop_rate", ":", "float", "=", "0.1", ",", "\n", "residual", ":", "int", "=", "0", ",", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "len", "(", "c_list", ")", "-", "1", ")", "%", "m_layers", "==", "0", "\n", "\n", "if", "aggregators", "is", "None", ":", "\n", "            ", "aggregators", "=", "[", "'sum'", ",", "'min'", ",", "'max'", ",", "'std'", "]", "\n", "", "if", "scalers", "is", "None", ":", "\n", "            ", "scalers", "=", "[", "'identity'", "]", "\n", "\n", "#", "\n", "", "self", ".", "residual", "=", "residual", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "residual", ":", "\n", "            ", "assert", "num_nodes", "is", "not", "None", "\n", "self", ".", "residuals", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residuals", "=", "None", "\n", "", "self", ".", "num_steps_mp", "=", "(", "len", "(", "c_list", ")", "-", "1", ")", "//", "m_layers", "# Number of steps of message passing", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_steps_mp", ")", ":", "\n", "            ", "m_channels", "=", "c_list", "[", "(", "m_layers", "*", "i", ")", ":", "(", "m_layers", "*", "(", "i", "+", "1", ")", "+", "1", ")", "]", "\n", "net", "=", "DisjointPNAConv", "(", "m_channels", "=", "m_channels", ".", "copy", "(", ")", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "aggregators", ",", "\n", "scalers", "=", "scalers", ",", "\n", "deg", "=", "deg", ",", "\n", "act_name", "=", "act_name", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "net", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", "if", "(", "i", "+", "1", ")", "<", "self", ".", "num_steps_mp", "else", "0.0", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.disjoint_pna.DisjointPNAConv.reset_parameters": [[69, 74], ["disjoint_pna.DisjointPNAConv.update_net.reset_parameters", "m_net.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters"], ["self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "fc", "=", "DisjointDense", "(", "in_dimension", "=", "m_channels", "[", "0", "]", ",", "out_dimension", "=", "m_channels", "[", "-", "1", "]", ",", "num_disjoint", "=", "num_nodes", ")", "\n", "self", ".", "residuals", ".", "append", "(", "fc", ")", "\n", "", "", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.disjoint_pna.DisjointPNAConv.forward": [[75, 87], ["disjoint_pna.DisjointPNAConv.propagate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "disjoint_pna.DisjointPNAConv.update_net"], "methods", ["None"], ["self", ".", "act_name", "=", "act_name", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.disjoint_pna.DisjointPNAConv.message": [[88, 101], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "zip", "act", "dout", "m_net"], "methods", ["None"], ["\n", "node_ids", "=", "kwargs", "[", "'node_ids'", "]", "\n", "for", "i", ",", "(", "conv", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "convs", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "conv", "(", "x", ",", "edge_index", ",", "edge_attr", ",", "node_ids", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\n", "                ", "x", "=", "h", "+", "self", ".", "residuals", "[", "i", "]", "(", "x", ",", "node_ids", ")", "\n", "x", "=", "dout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "dout", "(", "h", ")", "\n", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.disjoint_pna.DisjointPNAConv.aggregate": [[102, 112], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.utils.degree().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggr", "scaler", "torch_geometric.utils.degree"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.__init__": [[58, 116], ["torch_geometric.nn.conv.MessagePassing.__init__", "deg.to.to.to", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Linear", "pna.PNAConv.reset_parameters", "deg.to.to.mean().item", "deg.to.to.exp().mean().item", "torch.nn.Linear", "range", "pna.PNAConv.pre_nns.append", "range", "pna.PNAConv.post_nns.append", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Sequential", "deg.to.to.mean", "deg.to.to.exp().mean", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "len", "len", "deg.to.to.exp"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["scalers", "=", "scalers", ",", "deg", "=", "deg", ",", "post_layers", "=", "1", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "conv", ")", "\n", "act", "=", "get_activation", "(", "act_name", "if", "(", "i", "+", "1", ")", "<", "len", "(", "c_list", "[", ":", "-", "1", "]", ")", "else", "Cte", ".", "IDENTITY", ")", "\n", "self", ".", "activs", ".", "append", "(", "act", ")", "\n", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_ch", ",", "out_features", "=", "out_ch", ")", "\n", "self", ".", "residuals", ".", "append", "(", "fc", ")", "\n", "\n", "", "", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "act_name", "=", "act_name", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x: Input features per node\n            edge_index: List of vertex index pairs representing the edges in the graph (PyTorch geometric notation)\n            edge_attr:\n            **kwargs:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "for", "i", ",", "(", "conv", ",", "act", ",", "dout", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "convs", ",", "self", ".", "activs", ",", "self", ".", "dropouts", ")", ")", ":", "\n", "            ", "h", "=", "act", "(", "conv", "(", "x", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                ", "x", "=", "h", "+", "self", ".", "residuals", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "dout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "dout", "(", "h", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.reset_parameters": [[117, 125], ["pna.PNAConv.lin.reset_parameters", "pna.PNAConv.edge_encoder.reset_parameters", "torch_geometric.nn.inits.reset", "torch_geometric.nn.inits.reset"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.forward": [[126, 145], ["pna.PNAConv.propagate", "torch.cat", "torch.cat", "pna.PNAConv.lin", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.view().repeat", "nn", "enumerate", "x.view().repeat.view().repeat.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.message": [[146, 168], ["torch.stack", "pna.PNAConv.edge_encoder", "edge_attr.repeat.repeat.view", "edge_attr.repeat.repeat.repeat", "torch.cat", "torch.cat", "nn", "enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.aggregate": [[169, 177], ["torch.cat", "torch_geometric.utils.degree().view", "torch.cat", "aggr", "scaler", "torch_geometric.utils.degree"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConv.__repr__": [[178, 182], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.__init__": [[216, 244], ["torch_geometric.nn.conv.MessagePassing.__init__", "deg.to.to.to", "range", "torch.nn.Sequential", "pna.PNAConvSimple.reset_parameters", "deg.to.to.mean().item", "deg.to.to.exp().mean().item", "torch.nn.Linear", "len", "len", "torch.nn.ReLU", "torch.nn.Linear", "deg.to.to.mean", "deg.to.to.exp().mean", "deg.to.to.exp"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.reset_parameters": [[245, 247], ["torch_geometric.nn.inits.reset"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.forward": [[248, 252], ["pna.PNAConvSimple.propagate", "pna.PNAConvSimple.post_nn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.message": [[253, 255], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.aggregate": [[256, 264], ["torch.cat", "torch_geometric.utils.degree().view", "torch.cat", "aggr", "scaler", "torch_geometric.utils.degree"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.pna.PNAConvSimple.__repr__": [[265, 269], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.psanch21_VACA.pna.scalers.scale_identity": [[10, 12], ["None"], "function", ["None"], ["def", "scale_identity", "(", "src", ":", "Tensor", ",", "deg", ":", "Tensor", ",", "avg_deg", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "    ", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.scalers.scale_amplification": [[14, 16], ["torch.log"], "function", ["None"], ["", "def", "scale_amplification", "(", "src", ":", "Tensor", ",", "deg", ":", "Tensor", ",", "avg_deg", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "    ", "return", "src", "*", "(", "torch", ".", "log", "(", "deg", "+", "1", ")", "/", "avg_deg", "[", "'log'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.scalers.scale_attenuation": [[18, 22], ["torch.log"], "function", ["None"], ["", "def", "scale_attenuation", "(", "src", ":", "Tensor", ",", "deg", ":", "Tensor", ",", "avg_deg", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "    ", "scale", "=", "avg_deg", "[", "'log'", "]", "/", "torch", ".", "log", "(", "deg", "+", "1", ")", "\n", "scale", "[", "deg", "==", "0", "]", "=", "1", "\n", "return", "src", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.scalers.scale_linear": [[24, 26], ["None"], "function", ["None"], ["", "def", "scale_linear", "(", "src", ":", "Tensor", ",", "deg", ":", "Tensor", ",", "avg_deg", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "    ", "return", "src", "*", "(", "deg", "/", "avg_deg", "[", "'lin'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.scalers.scale_inverse_linear": [[28, 32], ["None"], "function", ["None"], ["", "def", "scale_inverse_linear", "(", "src", ":", "Tensor", ",", "deg", ":", "Tensor", ",", "avg_deg", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "    ", "scale", "=", "avg_deg", "[", "'lin'", "]", "/", "deg", "\n", "scale", "[", "deg", "==", "0", "]", "=", "1", "\n", "return", "src", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_sum": [[11, 13], ["torch_scatter.scatter"], "function", ["None"], ["def", "aggregate_sum", "(", "src", ":", "Tensor", ",", "index", ":", "Tensor", ",", "dim_size", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "return", "scatter", "(", "src", ",", "index", ",", "0", ",", "None", ",", "dim_size", ",", "reduce", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_mean": [[15, 17], ["torch_scatter.scatter"], "function", ["None"], ["", "def", "aggregate_mean", "(", "src", ":", "Tensor", ",", "index", ":", "Tensor", ",", "dim_size", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "return", "scatter", "(", "src", ",", "index", ",", "0", ",", "None", ",", "dim_size", ",", "reduce", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_mul": [[19, 21], ["torch_scatter.scatter"], "function", ["None"], ["", "def", "aggregate_mul", "(", "src", ":", "Tensor", ",", "index", ":", "Tensor", ",", "dim_size", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "return", "scatter", "(", "src", ",", "index", ",", "0", ",", "None", ",", "dim_size", ",", "reduce", "=", "'mul'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_min": [[23, 25], ["torch_scatter.scatter"], "function", ["None"], ["", "def", "aggregate_min", "(", "src", ":", "Tensor", ",", "index", ":", "Tensor", ",", "dim_size", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "return", "scatter", "(", "src", ",", "index", ",", "0", ",", "None", ",", "dim_size", ",", "reduce", "=", "'min'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_max": [[27, 29], ["torch_scatter.scatter"], "function", ["None"], ["", "def", "aggregate_max", "(", "src", ":", "Tensor", ",", "index", ":", "Tensor", ",", "dim_size", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "return", "scatter", "(", "src", ",", "index", ",", "0", ",", "None", ",", "dim_size", ",", "reduce", "=", "'max'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_var": [[31, 35], ["aggregators.aggregate_mean", "aggregators.aggregate_mean"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_mean", "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_mean"], ["", "def", "aggregate_var", "(", "src", ",", "index", ",", "dim_size", ")", ":", "\n", "    ", "mean", "=", "aggregate_mean", "(", "src", ",", "index", ",", "dim_size", ")", "\n", "mean_squares", "=", "aggregate_mean", "(", "src", "*", "src", ",", "index", ",", "dim_size", ")", "\n", "return", "mean_squares", "-", "mean", "*", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_std": [[37, 39], ["torch.sqrt", "torch.relu", "aggregators.aggregate_var"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.pna.aggregators.aggregate_var"], ["", "def", "aggregate_std", "(", "src", ",", "index", ",", "dim_size", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "torch", ".", "relu", "(", "aggregate_var", "(", "src", ",", "index", ",", "dim_size", ")", ")", "+", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._utils.init_weights_orthogonal": [[4, 9], ["print", "type", "torch.init.orthogonal_", "torch.init.zeros_"], "function", ["None"], ["def", "init_weights_orthogonal", "(", "m", ")", ":", "\n", "    ", "print", "(", "m", ")", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._utils.init_weights_kaiming_normal": [[11, 27], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "init_weights_kaiming_normal", "(", "m", ")", ":", "\n", "# weight initialization", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._utils.init_weights_xavier": [[29, 44], ["isinstance", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "torch.init.xavier_uniform_"], "function", ["None"], ["", "", "def", "init_weights_xavier", "(", "m", ")", ":", "\n", "# weight initialization", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "bias", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.ELBO": [[5, 7], ["torch.mean"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["def", "ELBO", "(", "log_w", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "log_w", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE": [[9, 21], ["torch.exp().detach().clone", "[].view", "torch.mul().sum", "torch.exp().detach", "torch.logsumexp", "numpy.log", "torch.mul", "torch.max", "torch.exp", "torch.logsumexp"], "function", ["None"], ["", "def", "IWAE", "(", "log_w", ",", "trick", "=", "False", ")", ":", "\n", "    ", "if", "not", "trick", ":", "\n", "        ", "return", "torch", ".", "logsumexp", "(", "log_w", ",", "dim", "=", "-", "1", ")", "-", "np", ".", "log", "(", "log_w", ".", "shape", "[", "-", "1", "]", ")", ",", "{", "}", "\n", "# notice that using the trick is required for computing the gradient wrt the IWAE measure, but doesn't return a", "\n", "# lower bound of the log evidence. Therefore use only for computing the gradient. For the estimate,", "\n", "# use trick=False", "\n", "\n", "", "log_w_max", "=", "log_w", "-", "torch", ".", "max", "(", "log_w", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "# w_k/max(w)", "\n", "# normalized_w_k = w_k/(sum_k w_k)", "\n", "normalized_w", "=", "torch", ".", "exp", "(", "log_w_max", "-", "torch", ".", "logsumexp", "(", "log_w_max", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "info", "=", "{", "}", "# {'normalized_w': normalized_w}", "\n", "return", "torch", ".", "mul", "(", "normalized_w", ",", "log_w", ")", ".", "sum", "(", "-", "1", ")", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE_dreg": [[23, 32], ["torch.no_grad", "torch.exp", "torch.mul().sum", "zs.register_hook", "torch.logsumexp", "torch.mul", "torch.exp.unsqueeze"], "function", ["None"], ["", "def", "IWAE_dreg", "(", "log_w", ",", "zs", ")", ":", "\n", "# print('IWAE_dreg!')", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "normalized_w", "=", "torch", ".", "exp", "(", "log_w", "-", "torch", ".", "logsumexp", "(", "log_w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "zs", ".", "requires_grad", ":", "\n", "# print('requires grad!')", "\n", "            ", "zs", ".", "register_hook", "(", "lambda", "grad", ":", "normalized_w", ".", "unsqueeze", "(", "-", "1", ")", "*", "grad", ")", "\n", "", "", "info", "=", "{", "}", "# {'normalized_w': normalized_w}", "\n", "return", "torch", ".", "mul", "(", "normalized_w", ",", "log_w", ")", ".", "sum", "(", "-", "1", ")", ",", "info", "\n", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.__init__": [[19, 33], ["utils.metrics.mmd.MMDLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "\n", "intervention_list", ",", "\n", "scaler", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "None", "\n", "self", ".", "mmd1", "=", "MMDLoss", "(", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "num_samples", "=", "1000", ")", "\n", "self", ".", "save_dir", "=", "None", "\n", "self", ".", "intervention_list", "=", "intervention_list", "\n", "self", ".", "current_epoch", "=", "None", "\n", "self", ".", "scaler", "=", "scaler", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_model": [[34, 36], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger": [[37, 39], ["None"], "methods", ["None"], ["", "def", "set_logger", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir": [[40, 42], ["utils.args_parser.mkdir"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir"], ["", "def", "set_save_dir", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "mkdir", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch": [[43, 45], ["None"], "methods", ["None"], ["", "def", "set_current_epoch", "(", "self", ",", "current_epoch", ")", ":", "\n", "        ", "self", ".", "current_epoch", "=", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation": [[46, 92], ["len", "_evaluator.MyEvaluator.mmd1", "_evaluator.MyEvaluator.mmd1", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "mse_samples.mean", "mse_samples.std", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "torch.sqrt", "range", "x_obs.std", "x_obs_gener.std", "_evaluator.MyEvaluator.item", "_evaluator.MyEvaluator.item", "torch.norm", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "x_obs.max", "x_obs.mean", "x_obs_gener.mean", "x_obs.std", "x_obs_gener.std"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "logs_observation", "(", "self", ",", "x_obs", ",", "x_obs_gener", ",", "mode", "=", "'train'", ",", "name", "=", "'observation'", ",", "return_dict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "if", "return_dict", "else", "None", "\n", "\n", "if", "len", "(", "x_obs", ")", ">", "0", ":", "\n", "            ", "no_obs", "=", "True", "\n", "", "else", ":", "\n", "            ", "no_obs", "=", "False", "\n", "\n", "", "if", "no_obs", ":", "\n", "            ", "if", "not", "self", ".", "normalize", ":", "# Data is not normalized", "\n", "                ", "max_", "=", "x_obs", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "max_", "[", "max_", "==", "0", "]", "=", "1.", "\n", "x_obs", "=", "x_obs", "/", "max_", "\n", "x_obs_gener", "=", "x_obs_gener", "/", "max_", "\n", "\n", "", "mse_mean", "=", "(", "x_obs", ".", "mean", "(", "0", ")", "-", "x_obs_gener", ".", "mean", "(", "0", ")", ")", "**", "2", "\n", "mse_std", "=", "(", "x_obs", ".", "std", "(", "0", ")", "-", "x_obs_gener", ".", "std", "(", "0", ")", ")", "**", "2", "\n", "diff_std", "=", "x_obs", ".", "std", "(", "0", ")", "-", "x_obs_gener", ".", "std", "(", "0", ")", "\n", "\n", "mmd1", "=", "self", ".", "mmd1", "(", "x_obs", ",", "x_obs_gener", ")", "\n", "num_samples_2", "=", "x_obs", ".", "shape", "[", "0", "]", "//", "2", "\n", "mmd1_lb", "=", "self", ".", "mmd1", "(", "x_obs", "[", ":", "num_samples_2", "]", ",", "x_obs", "[", "num_samples_2", ":", "]", ")", "# LB", "\n", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/mmd1'", ",", "mmd1", ".", "item", "(", ")", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/mmd1_lb'", ",", "mmd1_lb", ".", "item", "(", ")", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "mse_samples", "=", "torch", ".", "norm", "(", "x_obs_gener", "-", "x_obs", ",", "p", "=", "'fro'", ",", "dim", "=", "-", "1", ")", "/", "x_obs_gener", ".", "shape", "[", "1", "]", "\n", "mse", "=", "mse_samples", ".", "mean", "(", ")", "\n", "\n", "mse_samples_std", "=", "mse_samples", ".", "std", "(", ")", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x_mse'", ",", "mse", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x_mse_std'", ",", "mse_samples_std", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "\n", "mse", "=", "torch", ".", "sqrt", "(", "(", "(", "x_obs_gener", "-", "x_obs", ")", "**", "2", ")", ".", "mean", "(", "0", ")", ")", "\n", "num_nodes", "=", "x_obs", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "num_nodes", ")", ":", "\n", "                ", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x{i + 1}_mse_mean'", ",", "mse_mean", "[", "i", "]", ",", "self", ".", "current_epoch", ",", "\n", "output", "=", "output", ")", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x{i + 1}_mse_std'", ",", "mse_std", "[", "i", "]", ",", "self", ".", "current_epoch", ",", "\n", "output", "=", "output", ")", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x{i + 1}_diff_std'", ",", "diff_std", "[", "i", "]", ",", "self", ".", "current_epoch", ",", "\n", "output", "=", "output", ")", "\n", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x{i + 1}_mse'", ",", "mse", "[", "i", "]", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "\n", "", "", "if", "return_dict", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation_reduced": [[93, 105], ["_evaluator.MyEvaluator.mmd1", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.log_experiment_scalar", "_evaluator.MyEvaluator.item", "torch.norm().mean", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "", "def", "logs_observation_reduced", "(", "self", ",", "x_obs", ",", "x_obs_gener", ",", "mode", "=", "'train'", ",", "name", "=", "'observation'", ",", "return_dict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "if", "return_dict", "else", "None", "\n", "\n", "mmd1", "=", "self", ".", "mmd1", "(", "x_obs", ",", "x_obs_gener", ")", "\n", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/mmd1'", ",", "mmd1", ".", "item", "(", ")", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "\n", "mse", "=", "torch", ".", "norm", "(", "x_obs_gener", "-", "x_obs", ",", "p", "=", "'fro'", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "/", "x_obs_gener", ".", "shape", "[", "1", "]", "\n", "self", ".", "log_experiment_scalar", "(", "f'{mode}_{name}/x_mse'", ",", "mse", ",", "self", ".", "current_epoch", ",", "output", "=", "output", ")", "\n", "\n", "if", "return_dict", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.log_experiment_scalar": [[106, 111], ["isinstance", "float", "_evaluator.MyEvaluator.logger.experiment.add_scalar"], "methods", ["None"], ["", "", "def", "log_experiment_scalar", "(", "self", ",", "name", ",", "value", ",", "epoch", ",", "output", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "output", ",", "dict", ")", ":", "\n", "            ", "output", "[", "name", "]", "=", "float", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "name", ",", "value", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs": [[112, 167], ["torch.no_grad", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.mmd1", "_evaluator.MyEvaluator.logger.experiment.add_scalar", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.logs_observation_reduced", "_evaluator.MyEvaluator.model.get_reconstruction_distr", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.item", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.model.get_interventional_distr", "X_gener_dict.items", "_evaluator.MyEvaluator.model.get_counterfactual_distr", "X_gener_dict.items", "_evaluator.MyEvaluator.model.get_counterfactual_distr", "X_gener_dict.items", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.logs_observation", "x_I.items", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation_reduced", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_reconstruction_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_interventional_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "complete_logs", "(", "self", ",", "data_loader", ",", "name", ",", "plots", "=", "False", ")", ":", "\n", "# IID observations", "\n", "        ", "_", ",", "x_diag", ",", "_", "=", "self", ".", "model", ".", "get_observational_distr", "(", "data_loader", ",", "use_links", "=", "False", ")", "\n", "\n", "z_hat", ",", "x_hat", ",", "x_real", "=", "self", ".", "model", ".", "get_observational_distr", "(", "data_loader", ")", "\n", "\n", "mmd1", "=", "self", ".", "mmd1", "(", "x_real", ",", "x_diag", ")", "\n", "\n", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "f'{name}_observation/mmd1_ub'", ",", "mmd1", ".", "item", "(", ")", ",", "self", ".", "current_epoch", ")", "\n", "\n", "self", ".", "logs_observation", "(", "x_obs", "=", "x_real", ",", "x_obs_gener", "=", "x_hat", ",", "mode", "=", "name", ",", "name", "=", "'observation'", ")", "\n", "if", "plots", ":", "self", ".", "plot_obs", "(", "x_hat", ",", "x_real", "=", "x_real", ",", "label", "=", "'x_obs_gener/'", ",", "iter", "=", "self", ".", "current_epoch", ")", "\n", "\n", "z_hat", ",", "x_hat", ",", "x_real", "=", "self", ".", "model", ".", "get_observational_distr", "(", "data_loader", ",", "use_aggregated_posterior", "=", "True", ")", "\n", "self", ".", "logs_observation_reduced", "(", "x_obs", "=", "x_real", ",", "x_obs_gener", "=", "x_hat", ",", "mode", "=", "name", ",", "name", "=", "'observation_aggr'", ")", "\n", "\n", "z", ",", "x_recons", ",", "x_r_real", "=", "self", ".", "model", ".", "get_reconstruction_distr", "(", "data_loader", ")", "\n", "self", ".", "logs_observation", "(", "x_obs", "=", "x_r_real", ",", "x_obs_gener", "=", "x_recons", ",", "mode", "=", "name", ",", "name", "=", "'recons'", ")", "\n", "\n", "if", "plots", ":", "self", ".", "plot_obs", "(", "x_recons", ",", "x_real", "=", "x_r_real", ",", "label", "=", "'x_obs_recons/'", ",", "iter", "=", "self", ".", "current_epoch", ")", "\n", "\n", "for", "x_I", ",", "i_label", "in", "self", ".", "intervention_list", ":", "\n", "            ", "X_gener_dict", ",", "X_real_dict", "=", "self", ".", "model", ".", "get_interventional_distr", "(", "data_loader", ",", "x_I", "=", "x_I", ")", "\n", "\n", "label", "=", "'_'", ".", "join", "(", "[", "f'{k}_{i_label}'", "for", "k", ",", "v", "in", "x_I", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "in", "X_real_dict", ":", "\n", "                    ", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'inter_{label}_{key}'", ")", "\n", "", "else", ":", "# no ground truth", "\n", "                    ", "pass", "\n", "# self.logs_observation(x_obs=X_real_dict, x_obs_gener=value, mode=name,", "\n", "#                       name=f'inter_{label}_{key}')", "\n", "\n", "", "", "X_gener_dict", ",", "X_real_dict", ",", "_", "=", "self", ".", "model", ".", "get_counterfactual_distr", "(", "data_loader", ",", "x_I", "=", "x_I", ",", "is_noise", "=", "True", ")", "\n", "\n", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "in", "X_real_dict", ":", "\n", "                    ", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "'test'", ",", "\n", "name", "=", "f'cf_{label}_{key}_noise'", ")", "\n", "\n", "if", "plots", ":", "self", ".", "plot_obs", "(", "value", ",", "x_real", "=", "X_real_dict", "[", "key", "]", ",", "label", "=", "f'cf_{label}_noise_gener/'", ",", "\n", "iter", "=", "self", ".", "current_epoch", ")", "\n", "\n", "", "", "X_gener_dict", ",", "X_real_dict", ",", "_", "=", "self", ".", "model", ".", "get_counterfactual_distr", "(", "data_loader", ",", "x_I", "=", "x_I", ",", "is_noise", "=", "False", ")", "\n", "\n", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "in", "X_real_dict", ":", "\n", "                    ", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "'test'", ",", "\n", "name", "=", "f'cf_{label}_{key}'", ")", "\n", "\n", "if", "plots", ":", "self", ".", "plot_obs", "(", "value", ",", "x_real", "=", "X_real_dict", "[", "key", "]", ",", "label", "=", "f'cf_{label}_gener/'", ",", "\n", "iter", "=", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.evaluate": [[168, 291], ["torch.no_grad", "_evaluator.MyEvaluator.model.get_objective_metrics", "output.update", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.logs_observation", "output.update", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.mmd1", "_evaluator.MyEvaluator.item", "_evaluator.MyEvaluator.logs_observation", "output.update", "_evaluator.MyEvaluator.model.get_observational_distr", "_evaluator.MyEvaluator.logs_observation_reduced", "output.update", "_evaluator.MyEvaluator.model.get_reconstruction_distr", "_evaluator.MyEvaluator.logs_observation", "output.update", "output.items", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.model.get_interventional_distr", "X_gener_dict.items", "_evaluator.MyEvaluator.model.get_counterfactual_distr", "X_gener_dict.items", "print", "_evaluator.MyEvaluator.model.get_data_is_toy", "output.update", "X_gener_dict.items", "output.update", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.logs_observation", "output.update", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.plot_obs", "_evaluator.MyEvaluator.logs_observation", "_evaluator.MyEvaluator.logs_observation", "x_I.items"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_objective_metrics", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation_reduced", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_reconstruction_distr", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_interventional_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_data_is_toy", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.logs_observation"], ["", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "dataloader", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", ":", "\n", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "o", "=", "self", ".", "model", ".", "get_objective_metrics", "(", "dataloader", ",", "name", ")", "\n", "\n", "output", ".", "update", "(", "o", ")", "\n", "\n", "# IID observations", "\n", "_", ",", "x_diag", ",", "x_real", "=", "self", ".", "model", ".", "get_observational_distr", "(", "dataloader", ",", "\n", "use_links", "=", "False", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "x_real", ",", "\n", "x_obs_gener", "=", "x_diag", ",", "\n", "mode", "=", "name", ",", "\n", "name", "=", "'observation_independent'", ",", "\n", "return_dict", "=", "True", ")", "\n", "\n", "if", "plots", ":", "\n", "            ", "self", ".", "plot_obs", "(", "x_diag", ",", "x_real", "=", "x_real", ",", "\n", "label", "=", "f'{name}_observation_independent/'", ",", "iter", "=", "100000", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "\n", "# SCM observations", "\n", "z_hat", ",", "x_hat", ",", "x_real", "=", "self", ".", "model", ".", "get_observational_distr", "(", "dataloader", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "mmd1", "=", "self", ".", "mmd1", "(", "x_real", ",", "x_diag", ")", "\n", "output", "[", "f'{name}_observation/mmd1_ub'", "]", "=", "mmd1", ".", "item", "(", ")", "\n", "\n", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "x_real", ",", "x_obs_gener", "=", "x_hat", ",", "mode", "=", "name", ",", "name", "=", "'observation'", ",", "\n", "return_dict", "=", "True", ")", "\n", "if", "plots", ":", "\n", "            ", "self", ".", "plot_obs", "(", "x_hat", ",", "x_real", "=", "x_real", ",", "\n", "label", "=", "f'{name}_observation/'", ",", "iter", "=", "100000", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "\n", "# Obs with aggregated posterior", "\n", "z_hat", ",", "x_hat", ",", "x_real", "=", "self", ".", "model", ".", "get_observational_distr", "(", "dataloader", ",", "\n", "use_aggregated_posterior", "=", "True", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "o", "=", "self", ".", "logs_observation_reduced", "(", "x_obs", "=", "x_real", ",", "x_obs_gener", "=", "x_hat", ",", "mode", "=", "name", ",", "name", "=", "'observation_aggr'", ",", "\n", "return_dict", "=", "True", ")", "\n", "if", "plots", ":", "\n", "            ", "self", ".", "plot_obs", "(", "x_hat", ",", "x_real", "=", "x_real", ",", "\n", "label", "=", "f'{name}_observation_aggr/'", ",", "iter", "=", "100000", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "# Reconstruction", "\n", "z", ",", "x_recons", ",", "x_r_real", "=", "self", ".", "model", ".", "get_reconstruction_distr", "(", "dataloader", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "x_r_real", ",", "x_obs_gener", "=", "x_recons", ",", "mode", "=", "name", ",", "name", "=", "'recons'", ",", "\n", "return_dict", "=", "True", ")", "\n", "if", "plots", ":", "\n", "            ", "self", ".", "plot_obs", "(", "x_recons", ",", "x_real", "=", "x_r_real", ",", "\n", "label", "=", "f'{name}_reconstruction/'", ",", "iter", "=", "100000", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "\n", "# Interventions and CFs", "\n", "for", "x_I", ",", "i_label", "in", "self", ".", "intervention_list", ":", "\n", "            ", "X_gener_dict", ",", "X_real_dict", "=", "self", ".", "model", ".", "get_interventional_distr", "(", "dataloader", ",", "\n", "x_I", "=", "x_I", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "\n", "label", "=", "'_'", ".", "join", "(", "[", "f'{k}_{i_label}'", "for", "k", ",", "v", "in", "x_I", ".", "items", "(", ")", "]", ")", "\n", "\n", "if", "plots", ":", "\n", "                ", "if", "self", ".", "model", ".", "get_data_is_toy", "(", ")", ":", "\n", "                    ", "self", ".", "plot_obs", "(", "X_gener_dict", "[", "'all'", "]", ",", "x_real", "=", "X_real_dict", "[", "'all'", "]", ",", "\n", "label", "=", "f'{name}_intervention_{label}_gener/'", ",", "iter", "=", "100000", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "plot_obs", "(", "X_gener_dict", "[", "'all'", "]", ",", "label", "=", "f'{name}_intervention_{label}_gener/'", ",", "iter", "=", "100000", ")", "\n", "\n", "", "", "data_is_toy", "=", "False", "\n", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "in", "X_real_dict", ":", "\n", "                    ", "data_is_toy", "=", "True", "\n", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'inter_{label}_{key}'", ",", "\n", "return_dict", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'inter_{label}_{key}'", ",", "\n", "return_dict", "=", "True", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "\n", "", "X_gener_dict", ",", "X_real_dict", ",", "X_factual", "=", "self", ".", "model", ".", "get_counterfactual_distr", "(", "dataloader", ",", "\n", "x_I", "=", "x_I", ",", "\n", "is_noise", "=", "True", ",", "\n", "normalize", "=", "self", ".", "normalize", ")", "\n", "if", "data_is_toy", ":", "\n", "\n", "                ", "if", "plots", ":", "\n", "                    ", "self", ".", "plot_obs", "(", "X_gener_dict", "[", "'all'", "]", ",", "x_real", "=", "X_real_dict", "[", "'all'", "]", ",", "\n", "label", "=", "f'{name}_cf_gener/'", ",", "iter", "=", "100000", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                    ", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'cf_{label}_{key}_noise'", ",", "\n", "return_dict", "=", "True", ")", "\n", "\n", "output", ".", "update", "(", "o", ")", "\n", "\n", "", "", "if", "plots", ":", "\n", "                ", "if", "data_is_toy", ":", "\n", "                    ", "self", ".", "plot_obs", "(", "X_gener_dict", "[", "'all'", "]", ",", "x_real", "=", "X_real_dict", "[", "'all'", "]", ",", "\n", "label", "=", "f'{name}_cf_gener/'", ",", "iter", "=", "100000", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "plot_obs", "(", "X_gener_dict", "[", "'all'", "]", ",", "label", "=", "f'{name}_cf_gener/'", ",", "iter", "=", "100000", ")", "\n", "\n", "", "", "for", "key", ",", "value", "in", "X_gener_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "data_is_toy", ":", "\n", "                    ", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", "[", "key", "]", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'cf_{label}_{key}'", ",", "\n", "return_dict", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "o", "=", "self", ".", "logs_observation", "(", "x_obs", "=", "X_real_dict", ",", "x_obs_gener", "=", "value", ",", "mode", "=", "name", ",", "\n", "name", "=", "f'cf_{label}_{key}'", ",", "\n", "return_dict", "=", "True", ")", "\n", "", "output", ".", "update", "(", "o", ")", "\n", "\n", "", "", "for", "key", ",", "value", "in", "output", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"{key}: {value}\"", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.evaluate_cf_fairness": [[292, 448], ["data_module.get_attributes_dict", "_evaluator.MyEvaluator.model.get_counterfactual_distr", "_evaluator.MyEvaluator.model.get_counterfactual_distr", "x_cf_1.clone", "z_cf_1.clone", "data_module.get_normalized_X", "data_module.train_dataset.Y.ravel", "data_module.get_normalized_X", "data_module.test_dataset.Y.ravel", "data_module.train_dataset.Y.ravel", "data_module.test_dataset.Y.ravel", "data_module.set_shuffle_train", "_evaluator.MyEvaluator.model.get_reconstruction_distr", "_evaluator.MyEvaluator.model.get_reconstruction_distr", "data_module.train_dataset.Y.ravel", "data_module.test_dataset.Y.ravel", "dict_datasets.items", "len", "data_module.get_normalized_X", "data_module.get_normalized_X", "data_module.train_dataset.Y.ravel", "data_module.test_dataset.Y.ravel", "data_module.train_dataloader", "data_module.test_dataloader", "range", "dict_clf_generator.items", "data_module.test_dataloader", "data_module.test_dataloader", "data_module.get_normalized_X", "data_module.get_normalized_X", "dict_clf_generator.items", "print", "print", "round", "round", "print", "round", "round", "sklearn.linear_model.LogisticRegression", "sklearn.svm.SVC", "clf_generator", "clf_generator.fit", "clf_generator.predict", "sklearn.metrics.f1_score", "clf_generator.predict_proba", "clf_generator.predict_proba", "abs().mean", "score_lr.copy", "unfairness_lr.copy", "score_svm.copy", "unfairness_svm.copy", "score_lr.append", "score_svm.append", "unfairness_lr.append", "unfairness_svm.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "abs", "round", "round", "round", "round", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_attributes_dict", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.set_shuffle_train", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_reconstruction_distr", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_reconstruction_distr", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.train_dataloader", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.get_normalized_X", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.MaskedTensorLikelihoodScaler.fit", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "evaluate_cf_fairness", "(", "self", ",", "data_module", ")", ":", "\n", "# Mask", "\n", "        ", "attributes_dict", "=", "data_module", ".", "get_attributes_dict", "(", ")", "\n", "\n", "mask_unaware", "=", "attributes_dict", "[", "'fair_attributes'", "]", "+", "attributes_dict", "[", "'unfair_attributes'", "]", "\n", "\n", "mask_fair", "=", "attributes_dict", "[", "'fair_attributes'", "]", "\n", "\n", "if", "len", "(", "mask_fair", ")", ">", "0", ":", "\n", "            ", "fair_available", "=", "True", "\n", "", "else", ":", "\n", "            ", "fair_available", "=", "False", "\n", "\n", "", "x_cf_0_dict", ",", "z_cf_0_dict", ",", "x_f_dict", ",", "z_f_dict", "=", "self", ".", "model", ".", "get_counterfactual_distr", "(", "\n", "data_loader", "=", "data_module", ".", "test_dataloader", "(", ")", ",", "\n", "x_I", "=", "{", "Cte", ".", "SENS", ":", "0", "}", ",", "\n", "is_noise", "=", "False", ",", "return_z", "=", "True", ")", "\n", "x_cf_1_dict", ",", "z_cf_1_dict", ",", "_", ",", "_", "=", "self", ".", "model", ".", "get_counterfactual_distr", "(", "data_loader", "=", "data_module", ".", "test_dataloader", "(", ")", ",", "\n", "x_I", "=", "{", "Cte", ".", "SENS", ":", "1", "}", ",", "\n", "is_noise", "=", "False", ",", "return_z", "=", "True", ")", "\n", "# xf0 = x_f_dict_0['all']", "\n", "# xf1 = x_f_dict_1['all']", "\n", "#", "\n", "# zf0 = z_f_dict_0['all']", "\n", "# zf1 = z_f_dict_1['all']", "\n", "#", "\n", "# print('x', mean_squared_error(xf0, xf1))", "\n", "# print('z', mean_squared_error(zf0, zf1))", "\n", "\n", "# normalized data gen", "\n", "x_cf_0", "=", "x_cf_0_dict", "[", "'all'", "]", "\n", "x_cf_1", "=", "x_cf_1_dict", "[", "'all'", "]", "\n", "x_f", "=", "x_f_dict", "[", "'all'", "]", "\n", "\n", "z_cf_0", "=", "z_cf_0_dict", "[", "'all'", "]", "\n", "z_cf_1", "=", "z_cf_1_dict", "[", "'all'", "]", "\n", "z_f", "=", "z_f_dict", "[", "'all'", "]", "\n", "#", "\n", "mask_0", "=", "[", "x", "[", "0", "]", "for", "x", "in", "(", "x_f", "[", ":", ",", "0", "]", "!=", "1", ")", ".", "nonzero", "(", ")", ".", "tolist", "(", ")", "]", "\n", "mask_1", "=", "[", "x", "[", "0", "]", "for", "x", "in", "(", "x_f", "[", ":", ",", "0", "]", "==", "1", ")", ".", "nonzero", "(", ")", ".", "tolist", "(", ")", "]", "\n", "\n", "# x_cf_0: do(a=0) should be for all a=1", "\n", "x_cf_1", "[", "mask_1", ",", ":", "]", "=", "x_cf_0", "[", "mask_1", ",", ":", "]", "\n", "x_cf", "=", "x_cf_1", ".", "clone", "(", ")", "\n", "\n", "z_cf_1", "[", "mask_1", ",", ":", "]", "=", "z_cf_0", "[", "mask_1", ",", ":", "]", "\n", "z_cf", "=", "z_cf_1", ".", "clone", "(", ")", "\n", "\n", "dict_datasets", "=", "{", "}", "\n", "dict_datasets", "[", "'full'", "]", "=", "{", "}", "\n", "dict_datasets", "[", "'full'", "]", "[", "'X_train'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'train'", ")", "\n", "dict_datasets", "[", "'full'", "]", "[", "'Y_train'", "]", "=", "data_module", ".", "train_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'full'", "]", "[", "'X_test'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'test'", ")", "\n", "dict_datasets", "[", "'full'", "]", "[", "'Y_test'", "]", "=", "data_module", ".", "test_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'full'", "]", "[", "'X_cf'", "]", "=", "x_cf", "\n", "dict_datasets", "[", "'full'", "]", "[", "'X_f'", "]", "=", "x_f", "\n", "\n", "dict_datasets", "[", "'unaware'", "]", "=", "{", "}", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'X_train'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'train'", ")", "[", ":", ",", "mask_unaware", "]", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'Y_train'", "]", "=", "data_module", ".", "train_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'X_test'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'test'", ")", "[", ":", ",", "mask_unaware", "]", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'Y_test'", "]", "=", "data_module", ".", "test_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'X_cf'", "]", "=", "x_cf", "[", ":", ",", "mask_unaware", "]", "\n", "dict_datasets", "[", "'unaware'", "]", "[", "'X_f'", "]", "=", "x_f", "[", ":", ",", "mask_unaware", "]", "\n", "\n", "if", "fair_available", ":", "\n", "            ", "dict_datasets", "[", "'fair'", "]", "=", "{", "}", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'X_train'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'train'", ")", "[", ":", ",", "mask_fair", "]", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'Y_train'", "]", "=", "data_module", ".", "train_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'X_test'", "]", "=", "data_module", ".", "get_normalized_X", "(", "mode", "=", "'test'", ")", "[", ":", ",", "mask_fair", "]", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'Y_test'", "]", "=", "data_module", ".", "test_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'X_cf'", "]", "=", "x_cf", "[", ":", ",", "mask_fair", "]", "\n", "dict_datasets", "[", "'fair'", "]", "[", "'X_f'", "]", "=", "x_f", "[", ":", ",", "mask_fair", "]", "\n", "\n", "# get Z_train", "\n", "", "data_module", ".", "set_shuffle_train", "(", "False", ")", "\n", "z_train", ",", "_", ",", "_", "=", "self", ".", "model", ".", "get_reconstruction_distr", "(", "data_module", ".", "train_dataloader", "(", ")", ")", "\n", "z_test", ",", "_", ",", "_", "=", "self", ".", "model", ".", "get_reconstruction_distr", "(", "data_module", ".", "test_dataloader", "(", ")", ")", "\n", "\n", "dict_datasets", "[", "'VACA'", "]", "=", "{", "}", "# note: X here is is Z", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'X_train'", "]", "=", "z_train", "[", ":", ",", "self", ".", "model", ".", "z_dim", ":", "]", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'Y_train'", "]", "=", "data_module", ".", "train_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'X_test'", "]", "=", "z_test", "[", ":", ",", "self", ".", "model", ".", "z_dim", ":", "]", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'Y_test'", "]", "=", "data_module", ".", "test_dataset", ".", "Y", ".", "ravel", "(", ")", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'X_cf'", "]", "=", "z_cf", "[", ":", ",", "self", ".", "model", ".", "z_dim", ":", "]", "\n", "dict_datasets", "[", "'VACA'", "]", "[", "'X_f'", "]", "=", "z_f", "[", ":", ",", "self", ".", "model", ".", "z_dim", ":", "]", "\n", "\n", "output", "=", "{", "}", "\n", "\n", "for", "dataset_name", ",", "XY_dict", "in", "dict_datasets", ".", "items", "(", ")", ":", "\n", "            ", "score_lr", "=", "[", "]", "\n", "score_svm", "=", "[", "]", "\n", "unfairness_lr", "=", "[", "]", "\n", "unfairness_svm", "=", "[", "]", "\n", "for", "seed", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "                ", "def", "get_logistic_regression", "(", ")", ":", "\n", "                    ", "return", "LogisticRegression", "(", "class_weight", "=", "'balanced'", ",", "random_state", "=", "seed", ")", "\n", "\n", "", "def", "get_support_vector_machine", "(", ")", ":", "\n", "                    ", "return", "SVC", "(", "class_weight", "=", "'balanced'", ",", "probability", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "\n", "# def get_decision_tree():", "\n", "#     return DecisionTreeClassifier(class_weight='balanced', random_state=seed, criterion='entropy',", "\n", "#                                   max_depth=2)", "\n", "\n", "", "dict_clf_generator", "=", "{", "'lr'", ":", "get_logistic_regression", ",", "\n", "'svm'", ":", "get_support_vector_machine", "}", "\n", "# 'dt': get_decision_tree}", "\n", "\n", "for", "clf_name", ",", "clf_generator", "in", "dict_clf_generator", ".", "items", "(", ")", ":", "\n", "                    ", "clf", "=", "clf_generator", "(", ")", "\n", "\n", "clf", ".", "fit", "(", "XY_dict", "[", "'X_train'", "]", ",", "XY_dict", "[", "'Y_train'", "]", ")", "\n", "\n", "y_pred_f", "=", "clf", ".", "predict", "(", "XY_dict", "[", "'X_test'", "]", ")", "\n", "\n", "# score_a = accuracy_score(XY_dict['Y_test'], y_pred_f)", "\n", "score_f1", "=", "f1_score", "(", "XY_dict", "[", "'Y_test'", "]", ",", "y_pred_f", ")", "\n", "\n", "if", "clf_name", "==", "'lr'", ":", "\n", "                        ", "score_lr", ".", "append", "(", "score_f1", ")", "\n", "# print('clf_name', clf_name, 'seed', seed, 'score_f1', score_f1)", "\n", "", "else", ":", "\n", "                        ", "score_svm", ".", "append", "(", "score_f1", ")", "\n", "\n", "", "p_pred_f", "=", "clf", ".", "predict_proba", "(", "XY_dict", "[", "'X_test'", "]", ")", "\n", "p_pred_cf", "=", "clf", ".", "predict_proba", "(", "XY_dict", "[", "'X_cf'", "]", ")", "\n", "\n", "unfairness_p", "=", "(", "(", "abs", "(", "p_pred_f", "[", ":", ",", "1", "]", "-", "p_pred_cf", "[", ":", ",", "1", "]", ")", ")", ")", ".", "mean", "(", ")", "\n", "if", "clf_name", "==", "'lr'", ":", "\n", "                        ", "unfairness_lr", ".", "append", "(", "unfairness_p", ")", "\n", "", "else", ":", "\n", "                        ", "unfairness_svm", ".", "append", "(", "unfairness_p", ")", "\n", "\n", "# 1: male 700/1000 samples are male", "\n", "# 0: female 300/1000 samples are female", "\n", "\n", "", "", "", "for", "clf_name", ",", "clf_generator", "in", "dict_clf_generator", ".", "items", "(", ")", ":", "\n", "                ", "if", "clf_name", "==", "'lr'", ":", "\n", "                    ", "score", "=", "score_lr", ".", "copy", "(", ")", "\n", "unfairness", "=", "unfairness_lr", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "score", "=", "score_svm", ".", "copy", "(", ")", "\n", "unfairness", "=", "unfairness_svm", ".", "copy", "(", ")", "\n", "", "print", "(", "f'{dataset_name} : {clf_name}'", ")", "\n", "print", "(", "f'\\t f1: {round(np.mean(score) * 100, 2)}, +- {round(np.std(score) * 100, 2)}'", ")", "\n", "output", "[", "f'{dataset_name}_{clf_name}_f1_mean'", "]", "=", "round", "(", "np", ".", "mean", "(", "score", ")", "*", "100", ",", "2", ")", "\n", "output", "[", "f'{dataset_name}_{clf_name}_f1_std'", "]", "=", "round", "(", "np", ".", "std", "(", "score", ")", "*", "100", ",", "2", ")", "\n", "# print(f'\\t acc: {score_a * 100}, std')", "\n", "print", "(", "\n", "f'\\t unfairness prob all: {round(np.mean(unfairness) * 100, 2)}, +- {round(np.std(unfairness) * 100, 2)}'", ")", "\n", "output", "[", "f'{dataset_name}_{clf_name}_unfairness_mean'", "]", "=", "round", "(", "np", ".", "mean", "(", "unfairness", ")", "*", "100", ",", "2", ")", "\n", "output", "[", "f'{dataset_name}_{clf_name}_unfairness_std'", "]", "=", "round", "(", "np", ".", "std", "(", "unfairness", ")", "*", "100", ",", "2", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_densities": [[449, 455], ["matplotlib.subplots", "matplotlib.subplots", "seaborn.distplot", "seaborn.distplot", "_evaluator.MyEvaluator.save_fig", "matplotlib.pyplot.close", "matplotlib.pyplot.close", "matplotlib.pyplot.close", "matplotlib.pyplot.close"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.save_fig"], ["", "def", "plot_densities", "(", "self", ",", "y0", ",", "y1", ",", "name", ",", "inter", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "sns", ".", "distplot", "(", "y0", ",", "ax", "=", "ax", ",", "kde", "=", "True", ",", "color", "=", "'blue'", ")", "\n", "sns", ".", "distplot", "(", "y1", ",", "ax", "=", "ax", ",", "kde", "=", "True", ",", "color", "=", "'orange'", ")", "\n", "self", ".", "save_fig", "(", "f\"{name}_{inter}\"", ",", "fig", ",", "global_step", "=", "0", ")", "\n", "matplotlib", ".", "pyplot", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.plot_obs": [[456, 480], ["label.replace.replace.replace", "isinstance", "_evaluator.MyEvaluator.save_fig", "matplotlib.pyplot.close", "matplotlib.pyplot.close", "matplotlib.pyplot.close", "matplotlib.pyplot.close", "x.numpy.numpy.numpy", "pandas.DataFrame", "seaborn.pairplot", "isinstance", "numpy.concatenate", "pandas.DataFrame", "seaborn.pairplot", "range", "x_real.numpy.numpy.numpy"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.save_fig"], ["", "def", "plot_obs", "(", "self", ",", "x", ",", "x_real", "=", "None", ",", "label", "=", "'x_obs/'", ",", "iter", "=", "0", ")", ":", "\n", "\n", "        ", "label", "=", "label", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "\n", "columns", "=", "[", "f\"dim_{i + 1}\"", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", "]", "\n", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "x", "=", "x", ".", "numpy", "(", ")", "\n", "if", "x_real", "is", "None", ":", "\n", "            ", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "x", ",", "columns", "=", "columns", ")", "\n", "fig", "=", "sns", ".", "pairplot", "(", "df", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "x_real", ",", "torch", ".", "Tensor", ")", ":", "x_real", "=", "x_real", ".", "numpy", "(", ")", "\n", "num1", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_total", "=", "np", ".", "concatenate", "(", "[", "x", ",", "x_real", "]", ",", "0", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "x_total", ",", "columns", "=", "columns", ")", "\n", "df", "[", "'Distribution'", "]", "=", "'Real'", "\n", "df", "[", "'Distribution'", "]", ".", "iloc", "[", ":", "num1", "]", "=", "'Gener'", "\n", "fig", "=", "sns", ".", "pairplot", "(", "df", ",", "hue", "=", "'Distribution'", ",", "\n", "plot_kws", "=", "{", "'alpha'", ":", "0.3", "}", ",", "hue_order", "=", "[", "'Real'", ",", "'Gener'", "]", ",", "\n", "diag_kind", "=", "\"hist\"", ")", "\n", "\n", "", "self", ".", "save_fig", "(", "label", ",", "fig", ",", "iter", ")", "\n", "matplotlib", ".", "pyplot", ".", "close", "(", "'all'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.save_fig": [[481, 486], ["os.path.join", "fig.savefig", "os.path.join"], "methods", ["None"], ["", "def", "save_fig", "(", "self", ",", "name", ",", "fig", ",", "global_step", ")", ":", "\n", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'images'", ")", "\n", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "f'{name}_{global_step}.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.save_grid": [[487, 492], ["os.path.join", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "os.path.join", "grid.transpose().cpu().numpy", "grid.transpose().cpu", "grid.transpose"], "methods", ["None"], ["", "def", "save_grid", "(", "self", ",", "name", ",", "grid", ",", "global_step", ")", ":", "\n", "        ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'images'", ")", "\n", "\n", "matplotlib", ".", "image", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "f'{name}_{global_step}.png'", ")", ",", "\n", "grid", ".", "transpose", "(", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.__init__": [[19, 166], ["torch.Module.__init__", "utils.likelihoods.get_likelihood", "len", "utils.probabilistic_model.ProbabilisticModelSCM", "torch.ModuleList", "torch.ModuleList", "c_list.extend", "c_list.append", "c_list.extend", "len", "max", "numpy.sum", "hvaca_module.HVACAModule._encoder_embeddings.append", "PNAModule", "PNAModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DisjointGNN", "DisjointGNN", "torch.Linear", "torch.Linear", "utils.activations.get_activation", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "utils.activations.get_activation", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "utils.activations.get_activation", "torch.Dropout", "torch.Dropout", "DisjointPNA", "DisjointPNA", "len", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.get_likelihood", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation", "home.repos.pwc.inspect_result.psanch21_VACA.utils.activations.get_activation"], ["def", "__init__", "(", "self", ",", "likelihoods_x", ":", "List", "[", "List", "[", "Any", "]", "]", ",", "\n", "h_dim_list_dec", ":", "List", "[", "int", "]", ",", "\n", "h_dim_list_enc", ":", "List", "[", "int", "]", ",", "\n", "z_dim", ":", "int", ",", "\n", "m_layers", ":", "int", ",", "# Number of layers for the message MLP of the decoder", "\n", "deg", ":", "List", "[", "float", "]", "=", "None", ",", "\n", "edge_dim", ":", "int", "=", "None", ",", "\n", "residual", ":", "int", "=", "0", ",", "# Use resitual network in message passing", "\n", "drop_rate", ":", "float", "=", "0.0", ",", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", "distr_z", ":", "str", "=", "'normal'", ",", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "norm_categorical", ":", "bool", "=", "False", ",", "\n", "norm_by_dim", ":", "int", "=", "0", ",", "\n", "K", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", "HVACAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "\n", "likelihood_z", "=", "get_likelihood", "(", "distr_z", ",", "z_dim", ")", "\n", "num_nodes", "=", "len", "(", "likelihoods_x", ")", "\n", "\n", "prob_model_x", "=", "ProbabilisticModelSCM", "(", "likelihoods", "=", "likelihoods_x", ",", "\n", "embedding_size", "=", "h_dim_list_dec", "[", "-", "1", "]", ",", "\n", "act_name", "=", "act_name", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "norm_categorical", "=", "norm_categorical", ",", "\n", "norm_by_dim", "=", "norm_by_dim", ")", "\n", "\n", "# Instantiate Encoder embedding", "\n", "\n", "dim_input_encoder", "=", "h_dim_list_enc", "[", "0", "]", "\n", "\n", "self", ".", "_encoder_embeddings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "lik_i", "in", "likelihoods_x", ":", "\n", "            ", "x_dim_i", "=", "np", ".", "sum", "(", "[", "lik_ij", ".", "domain_size", "for", "lik_ij", "in", "lik_i", "]", ")", "\n", "if", "x_dim_i", ">", "2", "*", "dim_input_encoder", ":", "\n", "                ", "embed_i", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_dim_i", ",", "2", "*", "dim_input_encoder", ",", "bias", "=", "True", ")", ",", "\n", "get_activation", "(", "act_name", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "dim_input_encoder", ",", "dim_input_encoder", ",", "bias", "=", "True", ")", ",", "\n", "get_activation", "(", "act_name", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_rate", ")", ")", "\n", "", "else", ":", "\n", "                ", "embed_i", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_dim_i", ",", "dim_input_encoder", ",", "bias", "=", "True", ")", ",", "\n", "get_activation", "(", "act_name", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_rate", ")", ")", "\n", "", "self", ".", "_encoder_embeddings", ".", "append", "(", "embed_i", ")", "\n", "\n", "", "self", ".", "dim_input_enc", "=", "h_dim_list_enc", "[", "0", "]", "\n", "c_list", "=", "[", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_enc", ")", "\n", "c_list", ".", "append", "(", "likelihood_z", ".", "params_size", ")", "\n", "# Instantiate Encoder module", "\n", "if", "architecture", "==", "'pna'", ":", "\n", "            ", "from", "modules", ".", "pna", "import", "PNAModule", "\n", "\n", "self", ".", "encoder_module", "=", "PNAModule", "(", "c_list", "=", "c_list", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "residual", "=", "residual", ")", "\n", "", "elif", "architecture", "==", "'dgnn'", ":", "# Disjoint GNN", "\n", "            ", "from", "modules", ".", "disjoint_gnn", "import", "DisjointGNN", "\n", "self", ".", "encoder_module", "=", "DisjointGNN", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "len", "(", "c_list", ")", "-", "1", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "residual", "=", "residual", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggr", "=", "'add'", ")", "\n", "\n", "", "elif", "architecture", "==", "'dpna'", ":", "# Disjoint PNA", "\n", "            ", "from", "modules", ".", "disjoint_pna", "import", "DisjointPNA", "\n", "self", ".", "encoder_module", "=", "DisjointPNA", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "len", "(", "c_list", ")", "-", "1", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "deg", "=", "deg", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "residual", "=", "residual", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "c_list", "=", "[", "z_dim", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_dec", ")", "\n", "# Instantiate Decoder module", "\n", "if", "architecture", "==", "'pna'", ":", "\n", "            ", "from", "modules", ".", "pna", "import", "PNAModule", "\n", "self", ".", "decoder_module", "=", "PNAModule", "(", "c_list", "=", "c_list", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "residual", "=", "residual", ")", "\n", "", "elif", "architecture", "==", "'dgnn'", ":", "\n", "            ", "from", "modules", ".", "disjoint_gnn", "import", "DisjointGNN", "\n", "\n", "self", ".", "decoder_module", "=", "DisjointGNN", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "m_layers", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "residual", "=", "residual", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggr", "=", "'add'", ")", "\n", "\n", "", "elif", "architecture", "==", "'dpna'", ":", "\n", "            ", "from", "modules", ".", "disjoint_pna", "import", "DisjointPNA", "\n", "self", ".", "decoder_module", "=", "DisjointPNA", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "m_layers", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "deg", "=", "deg", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "residual", "=", "residual", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Instantiate Decoder embedding", "\n", "\n", "", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "num_nodes", "=", "len", "(", "likelihoods_x", ")", "\n", "\n", "node_dim_max", "=", "max", "(", "prob_model_x", ".", "node_dim_list", ")", "\n", "\n", "self", ".", "x0_size", "=", "self", ".", "num_nodes", "*", "node_dim_max", "\n", "\n", "self", ".", "node_dim_max", "=", "node_dim_max", "\n", "\n", "self", ".", "likelihood_z", "=", "likelihood_z", "\n", "self", ".", "prob_model_x", "=", "prob_model_x", "\n", "\n", "self", ".", "distr_z", "=", "distr_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.encoder_params": [[167, 170], ["list", "list", "hvaca_module.HVACAModule.encoder_module.parameters", "hvaca_module.HVACAModule._encoder_embeddings.parameters"], "methods", ["None"], ["", "def", "encoder_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "encoder_module", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "_encoder_embeddings", ".", "parameters", "(", ")", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.decoder_params": [[171, 174], ["list", "list", "hvaca_module.HVACAModule.decoder_module.parameters", "hvaca_module.HVACAModule.prob_model_x.parameters"], "methods", ["None"], ["", "def", "decoder_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "decoder_module", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "prob_model_x", ".", "parameters", "(", ")", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.set_z_prior_distr": [[175, 191], ["torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "set_z_prior_distr", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "distr_z", "==", "Cte", ".", "CONTINOUS_BERN", ":", "# Continous Bernoulli", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "ContinuousBernoulli", "(", "\n", "probs", "=", "0.5", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "EXPONENTIAL", ":", "# Exponential", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Exponential", "(", "\n", "rate", "=", "0.2", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "BETA", ":", "# Beta", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Beta", "(", "\n", "concentration0", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "concentration1", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "GAUSSIAN", ":", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "ones", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.encoder_embeddings": [[192, 203], ["X.view", "enumerate", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "embed_i", "embeddings.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "encoder_embeddings", "(", "self", ",", "X", ")", ":", "\n", "\n", "        ", "X_0", "=", "X", ".", "view", "(", "-", "1", ",", "self", ".", "x0_size", ")", "\n", "\n", "embeddings", "=", "[", "]", "\n", "for", "i", ",", "embed_i", "in", "enumerate", "(", "self", ".", "_encoder_embeddings", ")", ":", "\n", "            ", "X_0_i", "=", "X_0", "[", ":", ",", "(", "i", "*", "self", ".", "node_dim_max", ")", ":", "(", "(", "i", "+", "1", ")", "*", "self", ".", "node_dim_max", ")", "]", "\n", "H_i", "=", "embed_i", "(", "X_0_i", "[", ":", ",", ":", "self", ".", "prob_model_x", ".", "node_dim_list", "[", "i", "]", "]", ")", "\n", "embeddings", ".", "append", "(", "H_i", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "embeddings", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dim_input_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.encoder": [[204, 214], ["hvaca_module.HVACAModule.encoder_module", "hvaca_module.HVACAModule.encoder_embeddings", "hvaca_module.HVACAModule.likelihood_z", "hvaca_module.HVACAModule.likelihood_z"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.encoder_embeddings"], ["", "def", "encoder", "(", "self", ",", "X", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "return_mean", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", "=", "self", ".", "encoder_module", "(", "self", ".", "encoder_embeddings", "(", "X", ")", ",", "\n", "edge_index", ",", "\n", "edge_attr", "=", "edge_attr", ",", "**", "kwargs", ")", "\n", "if", "return_mean", ":", "\n", "            ", "mean", ",", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "qz_x", "\n", "", "else", ":", "\n", "            ", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ")", "\n", "return", "qz_x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.decoder": [[215, 227], ["hvaca_module.HVACAModule.decoder_module", "hvaca_module.HVACAModule.prob_model_x", "hvaca_module.HVACAModule.prob_model_x", "hvaca_module.HVACAModule.prob_model_x", "hvaca_module.HVACAModule.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "", "def", "decoder", "(", "self", ",", "Z", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "return_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", "=", "self", ".", "decoder_module", "(", "Z", ",", "edge_index", ",", "edge_attr", ",", "**", "kwargs", ")", "\n", "\n", "if", "return_type", "==", "'mean'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "prob_model_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "px_z", "\n", "", "elif", "return_type", "==", "'sample'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "prob_model_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "px_z", ".", "sample", "(", ")", ",", "px_z", "\n", "", "else", ":", "\n", "            ", "px_z", "=", "self", ".", "prob_model_x", "(", "logits", ")", "\n", "return", "px_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.compute_log_w": [[228, 265], ["data.x.clone", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "hvaca_module.HVACAModule.encoder", "hvaca_module.HVACAModule.rsample", "hvaca_module.HVACAModule.decoder", "hvaca_module.HVACAModule.log_prob().view().sum", "hvaca_module.HVACAModule.z_prior_distr.log_prob().view().sum", "hvaca_module.HVACAModule.log_prob().sum", "torch.stack.append", "torch.stack.append", "hvaca_module.HVACAModule.log_prob().view", "hvaca_module.HVACAModule.z_prior_distr.log_prob().view", "hvaca_module.HVACAModule.log_prob", "hvaca_module.HVACAModule.get_x_graph", "hvaca_module.HVACAModule.log_prob", "hvaca_module.HVACAModule.z_prior_distr.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "", "def", "compute_log_w", "(", "self", ",", "data", ",", "K", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        IWAE:  log(1\\K \\sum_k w_k) w_k = p(x, z_i)/ q(z_i | x)\n            log_wi = log  p(x, z_i) - log q(z_i | x)\n        Args:\n            data:\n            K:\n            mask:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "x", "=", "data", ".", "x", ".", "clone", "(", ")", "\n", "\n", "assert", "mask", "is", "None", "\n", "\n", "log_w", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "x", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z_k", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "log_prob_qz_x", "=", "qz_x", ".", "log_prob", "(", "z", ")", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "# Summing over dim(z)*num_nodes", "\n", "log_prob_pz", "=", "self", ".", "z_prior_distr", ".", "log_prob", "(", "z", ")", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_prob_px_z", "=", "px_z_k", ".", "log_prob", "(", "self", ".", "get_x_graph", "(", "data", ",", "'x'", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_w_k", "=", "log_prob_px_z", "+", "log_prob_pz", "-", "log_prob_qz_x", "\n", "\n", "log_w", ".", "append", "(", "log_w_k", ")", "\n", "\n", "", "log_w", "=", "torch", ".", "stack", "(", "log_w", ",", "dim", "=", "0", ")", "\n", "\n", "# [K, N]", "\n", "return", "log_w", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.get_x_graph": [[266, 270], ["getattr", "data.mask.view", "getattr.view"], "methods", ["None"], ["", "def", "get_x_graph", "(", "self", ",", "data", ",", "attr", ")", ":", "\n", "        ", "x", "=", "getattr", "(", "data", ",", "attr", ")", "\n", "mask", "=", "data", ".", "mask", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", "[", "0", "]", "\n", "return", "x", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", "[", ":", ",", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.forward": [[271, 309], ["data.x.clone", "hvaca_module.HVACAModule.encoder", "hvaca_module.HVACAModule.rsample", "hvaca_module.HVACAModule.decoder", "hvaca_module.HVACAModule.log_prob().sum().mean", "torch.distributions.kl.kl_divergence().view().sum().mean", "torch.distributions.kl.kl_divergence().view().sum().mean", "torch.distributions.kl.kl_divergence().view().sum().mean", "torch.distributions.kl.kl_divergence().view().sum().mean", "hvaca_module.HVACAModule.compute_log_w", "models.IWAE", "hvaca_module.HVACAModule.log_prob().sum", "torch.distributions.kl.kl_divergence().view().sum", "torch.distributions.kl.kl_divergence().view().sum", "torch.distributions.kl.kl_divergence().view().sum", "torch.distributions.kl.kl_divergence().view().sum", "objective.mean", "hvaca_module.HVACAModule.compute_log_w_dreg", "models.IWAE_dreg", "objective.mean", "hvaca_module.HVACAModule.log_prob", "torch.distributions.kl.kl_divergence().view", "torch.distributions.kl.kl_divergence().view", "torch.distributions.kl.kl_divergence().view", "torch.distributions.kl.kl_divergence().view", "hvaca_module.HVACAModule.get_x_graph", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_log_w_dreg", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE_dreg", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "def", "forward", "(", "self", ",", "data", ",", "estimator", ",", "beta", "=", "1.0", ")", ":", "\n", "\n", "        ", "x", "=", "data", ".", "x", ".", "clone", "(", ")", "\n", "\n", "mask", "=", "None", "\n", "\n", "if", "estimator", "==", "'elbo'", ":", "\n", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "x", ",", "\n", "data", ".", "edge_index", ",", "\n", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "log_prob_x", "=", "px_z", ".", "log_prob", "(", "self", ".", "get_x_graph", "(", "data", ",", "'x'", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "kl_z", "=", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "qz_x", ",", "self", ".", "z_prior_distr", ")", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", ".", "sum", "(", "\n", "1", ")", ".", "mean", "(", ")", "\n", "\n", "elbo", "=", "log_prob_x", "-", "beta", "*", "kl_z", "\n", "\n", "data", "=", "{", "'log_prob_x'", ":", "log_prob_x", ",", "\n", "'kl_z'", ":", "kl_z", "}", "\n", "\n", "return", "elbo", ",", "data", "\n", "", "elif", "estimator", "==", "'iwae'", ":", "\n", "            ", "log_w", "=", "self", ".", "compute_log_w", "(", "data", "=", "data", ",", "K", "=", "self", ".", "K", ",", "mask", "=", "mask", ")", "\n", "objective", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", ",", "trick", "=", "True", ")", "\n", "return", "objective", ".", "mean", "(", ")", ",", "{", "}", "\n", "\n", "", "elif", "estimator", "==", "'iwaedreg'", ":", "\n", "            ", "log_w", ",", "zs", "=", "self", ".", "compute_log_w_dreg", "(", "data", "=", "data", ",", "K", "=", "self", ".", "K", ")", "\n", "objective", ",", "_", "=", "estims", ".", "IWAE_dreg", "(", "log_w", ",", "zs", ")", "\n", "return", "objective", ".", "mean", "(", ")", ",", "{", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.hvaca_module.HVACAModule.reconstruct": [[310, 321], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hvaca_module.HVACAModule.encoder", "hvaca_module.HVACAModule.decoder", "qz_x.rsample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "self", ",", "data", ",", "use_mean_encoder", "=", "True", ")", ":", "\n", "        ", "z_mean", ",", "qz_x", "=", "self", ".", "encoder", "(", "data", ".", "x", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "z", "=", "z_mean", "if", "use_mean_encoder", "else", "qz_x", ".", "rsample", "(", ")", "\n", "x_hat", ",", "_", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "return_type", "=", "'mean'", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "# Shape of x_hat: [num_graphs, total_dim_nodes]", "\n", "return", "z_mean", ",", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_piwae.VACA_PIWAE.__init__": [[13, 21], ["models.vaca.vaca.VACA.__init__", "vaca_piwae.VACA_PIWAE.save_hyperparameters", "vaca_piwae.VACA_PIWAE.estimator.split", "vaca_piwae.VACA_PIWAE.estimator.split", "vaca_piwae.VACA_PIWAE.estimator.split"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VACA_PIWAE", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "estimator_inference", "=", "self", ".", "estimator", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "self", ".", "estimator_gener", "=", "self", ".", "estimator", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "\n", "self", ".", "estimator", "=", "self", ".", "estimator", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_piwae.VACA_PIWAE.set_optim_params": [[22, 25], ["None"], "methods", ["None"], ["", "def", "set_optim_params", "(", "self", ",", "optim_params", ",", "sched_params", ")", ":", "\n", "        ", "self", ".", "optim_params", "=", "optim_params", "\n", "self", ".", "sched_params", "=", "sched_params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_piwae.VACA_PIWAE.configure_optimizers": [[26, 43], ["vaca_piwae.VACA_PIWAE.optim_params[].copy", "isinstance", "utils.optimizers.get_optimizer", "vaca_piwae.VACA_PIWAE.model.encoder_params", "utils.optimizers.get_optimizer", "vaca_piwae.VACA_PIWAE.model.decoder_params", "utils.optimizers.get_scheduler", "utils.optimizers.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder_params", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder_params", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "tmp_params", "=", "self", ".", "optim_params", "[", "'params'", "]", ".", "copy", "(", ")", "\n", "# tmp_params['lr'] = tmp_params['lr'] * 0.5", "\n", "\n", "optim_infer", "=", "get_optimizer", "(", "self", ".", "optim_params", "[", "'name'", "]", ")", "(", "self", ".", "model", ".", "encoder_params", "(", ")", ",", "\n", "**", "self", ".", "optim_params", "[", "'params'", "]", ")", "\n", "\n", "optim_gener", "=", "get_optimizer", "(", "self", ".", "optim_params", "[", "'name'", "]", ")", "(", "self", ".", "model", ".", "decoder_params", "(", ")", ",", "\n", "**", "tmp_params", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "sched_params", ",", "dict", ")", ":", "\n", "            ", "sched_infer", "=", "get_scheduler", "(", "self", ".", "sched_params", "[", "'name'", "]", ")", "(", "optim_infer", ",", "**", "self", ".", "sched_params", "[", "'params'", "]", ")", "\n", "sched_gener", "=", "get_scheduler", "(", "self", ".", "sched_params", "[", "'name'", "]", ")", "(", "optim_gener", ",", "**", "self", ".", "sched_params", "[", "'params'", "]", ")", "\n", "sched", "=", "[", "sched_infer", ",", "sched_gener", "]", "\n", "", "else", ":", "\n", "            ", "sched", "=", "[", "]", "\n", "", "return", "[", "optim_infer", ",", "optim_gener", "]", ",", "sched", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_piwae.VACA_PIWAE.training_step": [[46, 76], ["batch.clone.clone.clone", "utils.dropout.dropout_adj", "batch.clone.clone.clone", "utils.dropout.dropout_adj_parents", "vaca_piwae.VACA_PIWAE.model", "vaca_piwae.VACA_PIWAE.log", "data.items", "vaca_piwae.VACA_PIWAE.model", "vaca_piwae.VACA_PIWAE.log", "data.items", "objective.item", "vaca_piwae.VACA_PIWAE.log", "objective.item", "vaca_piwae.VACA_PIWAE.log", "value.item", "value.item", "vaca_piwae.VACA_PIWAE.get_beta_annealing_factor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj_parents", "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_beta_annealing_factor"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "optimizer_idx", ")", ":", "\n", "\n", "        ", "if", "self", ".", "dropout_adj", ">", "0.0", "and", "self", ".", "current_epoch", ">=", "self", ".", "dropout_adj_T", ":", "\n", "            ", "batch", "=", "batch", ".", "clone", "(", ")", "\n", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", "=", "dropout_adj", "(", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", ",", "\n", "p", "=", "self", ".", "dropout_adj", ",", "keep_self_loops", "=", "self", ".", "keep_self_loops", ")", "\n", "\n", "\n", "", "if", "self", ".", "dropout_adj_pa", ">", "0.0", "and", "self", ".", "current_epoch", ">=", "self", ".", "dropout_adj_T", ":", "\n", "            ", "batch", "=", "batch", ".", "clone", "(", ")", "\n", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", "=", "dropout_adj_parents", "(", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", ",", "\n", "p", "=", "self", ".", "dropout_adj_pa", ",", "prob_keep_self", "=", "self", ".", "dropout_adj_pa_prob_keep_self", ")", "\n", "\n", "\n", "", "if", "optimizer_idx", "==", "0", ":", "# Inference", "\n", "            ", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "\n", "estimator", "=", "self", ".", "estimator_inference", ",", "\n", "beta", "=", "self", ".", "beta", "*", "self", ".", "get_beta_annealing_factor", "(", "self", ".", "current_epoch", ")", ")", "\n", "\n", "self", ".", "log", "(", "'train_objective_inference'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "log", "(", "f'train_{key}_inference'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "", "", "else", ":", "# Generator", "\n", "            ", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "estimator", "=", "self", ".", "estimator_gener", ")", "\n", "\n", "self", ".", "log", "(", "'train_objective_generator'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "log", "(", "f'train_{key}_generator'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "", "return", "-", "objective", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.__init__": [[16, 126], ["torch.Module.__init__", "isinstance", "utils.likelihoods.get_likelihood", "c_list.extend", "c_list.append", "c_list.extend", "c_list.append", "PNAModule", "PNAModule", "DisjointGNN", "DisjointGNN", "DisjointPNA", "DisjointPNA", "len", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.get_likelihood"], ["def", "__init__", "(", "self", ",", "x_dim", ":", "int", ",", "\n", "h_dim_list_dec", ":", "List", "[", "int", "]", ",", "\n", "h_dim_list_enc", ":", "List", "[", "int", "]", ",", "\n", "z_dim", ":", "int", ",", "\n", "m_layers", ":", "int", ",", "# Number of layers for the message MLP of the decode", "\n", "deg", ":", "List", "[", "float", "]", "=", "None", ",", "\n", "edge_dim", ":", "int", "=", "None", ",", "\n", "num_nodes", ":", "int", "=", "None", ",", "\n", "residual", ":", "int", "=", "0", ",", "# Use resitual network in message passing", "\n", "drop_rate", ":", "float", "=", "0.0", ",", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", "likelihood_x", ":", "Any", "=", "None", ",", "\n", "distr_z", ":", "str", "=", "'normal'", ",", "\n", "architecture", ":", "str", "=", "None", ",", "\n", "K", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", "VACAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "x_dim", ",", "int", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "\n", "likelihood_z", "=", "get_likelihood", "(", "distr_z", ",", "z_dim", ")", "\n", "\n", "c_list", "=", "[", "x_dim", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_enc", ")", "\n", "c_list", ".", "append", "(", "likelihood_z", ".", "params_size", ")", "\n", "\n", "# Instantiate Encoder module", "\n", "if", "architecture", "==", "'pna'", ":", "\n", "            ", "from", "modules", ".", "pna", "import", "PNAModule", "\n", "self", ".", "encoder_module", "=", "PNAModule", "(", "c_list", "=", "c_list", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "residual", "=", "residual", ")", "\n", "", "elif", "architecture", "==", "'dgnn'", ":", "# Disjoint GNN", "\n", "            ", "from", "modules", ".", "disjoint_gnn", "import", "DisjointGNN", "\n", "self", ".", "encoder_module", "=", "DisjointGNN", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "len", "(", "c_list", ")", "-", "1", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "residual", "=", "residual", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggr", "=", "'add'", ")", "\n", "", "elif", "architecture", "==", "'dpna'", ":", "# Disjoint PNA", "\n", "            ", "from", "modules", ".", "disjoint_pna", "import", "DisjointPNA", "\n", "self", ".", "encoder_module", "=", "DisjointPNA", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "len", "(", "c_list", ")", "-", "1", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "deg", "=", "deg", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "residual", "=", "residual", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "c_list", "=", "[", "z_dim", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_dec", ")", "\n", "c_list", ".", "append", "(", "likelihood_x", ".", "params_size", ")", "\n", "# Instantiate Decoder module", "\n", "if", "architecture", "==", "'pna'", ":", "\n", "            ", "from", "modules", ".", "pna", "import", "PNAModule", "\n", "self", ".", "decoder_module", "=", "PNAModule", "(", "c_list", "=", "c_list", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "residual", "=", "residual", ")", "\n", "", "elif", "architecture", "==", "'dgnn'", ":", "\n", "            ", "from", "modules", ".", "disjoint_gnn", "import", "DisjointGNN", "\n", "\n", "self", ".", "decoder_module", "=", "DisjointGNN", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "m_layers", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "residual", "=", "residual", ",", "\n", "act_name", "=", "act_name", ",", "\n", "aggr", "=", "'add'", ")", "\n", "\n", "", "elif", "architecture", "==", "'dpna'", ":", "\n", "            ", "from", "modules", ".", "disjoint_pna", "import", "DisjointPNA", "\n", "self", ".", "decoder_module", "=", "DisjointPNA", "(", "c_list", "=", "c_list", ",", "\n", "m_layers", "=", "m_layers", ",", "# We can only have 1 message passing step", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "deg", "=", "deg", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "aggregators", "=", "None", ",", "\n", "scalers", "=", "None", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "residual", "=", "residual", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "likelihood_z", "=", "likelihood_z", "\n", "self", ".", "likelihood_x", "=", "likelihood_x", "\n", "\n", "self", ".", "distr_z", "=", "distr_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.encoder_params": [[127, 129], ["vaca_module.VACAModule.encoder_module.parameters"], "methods", ["None"], ["", "def", "encoder_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder_module", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.decoder_params": [[130, 132], ["vaca_module.VACAModule.decoder_module.parameters"], "methods", ["None"], ["", "def", "decoder_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "decoder_module", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.set_z_prior_distr": [[133, 149], ["torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "set_z_prior_distr", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "distr_z", "==", "Cte", ".", "CONTINOUS_BERN", ":", "# Continous Bernoulli", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "ContinuousBernoulli", "(", "\n", "probs", "=", "0.5", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "EXPONENTIAL", ":", "# Exponential", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Exponential", "(", "\n", "rate", "=", "0.2", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "BETA", ":", "# Beta", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Beta", "(", "\n", "concentration0", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "concentration1", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "GAUSSIAN", ":", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "ones", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.get_x_graph": [[150, 153], ["getattr", "getattr.view"], "methods", ["None"], ["", "", "def", "get_x_graph", "(", "self", ",", "data", ",", "attr", ")", ":", "\n", "        ", "x", "=", "getattr", "(", "data", ",", "attr", ")", "\n", "return", "x", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.encoder": [[154, 162], ["vaca_module.VACAModule.encoder_module", "vaca_module.VACAModule.likelihood_z", "vaca_module.VACAModule.likelihood_z"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "X", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "return_mean", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", "=", "self", ".", "encoder_module", "(", "X", ",", "edge_index", ",", "edge_attr", "=", "edge_attr", ",", "**", "kwargs", ")", "\n", "if", "return_mean", ":", "\n", "            ", "mean", ",", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "qz_x", "\n", "", "else", ":", "\n", "            ", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ")", "\n", "return", "qz_x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.sample_encoder": [[163, 167], ["vaca_module.VACAModule.encoder", "vaca_module.VACAModule.rsample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample"], ["", "", "def", "sample_encoder", "(", "self", ",", "X", ",", "edge_index", ",", "edge_attr", "=", "None", ")", ":", "\n", "        ", "qz_x", "=", "self", ".", "encoder", "(", "X", ",", "edge_index", ",", "edge_attr", "=", "edge_attr", ")", "\n", "sampled_z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "return", "sampled_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.decoder": [[168, 179], ["vaca_module.VACAModule.decoder_module", "vaca_module.VACAModule.likelihood_x", "vaca_module.VACAModule.likelihood_x", "vaca_module.VACAModule.likelihood_x", "vaca_module.VACAModule.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "def", "decoder", "(", "self", ",", "Z", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "return_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "logits", "=", "self", ".", "decoder_module", "(", "Z", ",", "edge_index", ",", "edge_attr", ",", "**", "kwargs", ")", "\n", "if", "return_type", "==", "'mean'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "px_z", "\n", "", "elif", "return_type", "==", "'sample'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "px_z", ".", "sample", "(", ")", ",", "px_z", "\n", "", "else", ":", "\n", "            ", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ")", "\n", "return", "px_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.sample_decoder": [[180, 184], ["vaca_module.VACAModule.decoder", "vaca_module.VACAModule.rsample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample"], ["", "", "def", "sample_decoder", "(", "self", ",", "Z", ",", "adj", ")", ":", "\n", "        ", "px_z", "=", "self", ".", "decoder", "(", "Z", ",", "adj", ")", "\n", "x_hat", "=", "px_z", ".", "rsample", "(", ")", "\n", "return", "x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.compute_log_w": [[185, 226], ["data.x.clone", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vaca_module.VACAModule.encoder", "vaca_module.VACAModule.rsample", "vaca_module.VACAModule.decoder", "vaca_module.VACAModule.log_prob().sum", "vaca_module.VACAModule.z_prior_distr.log_prob().sum", "vaca_module.VACAModule.log_prob().sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "vaca_module.VACAModule.log_prob", "vaca_module.VACAModule.z_prior_distr.log_prob", "vaca_module.VACAModule.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "compute_log_w", "(", "self", ",", "data", ",", "\n", "K", ",", "\n", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        IWAE:  log(1\\K \\sum_k w_k) w_k = p(x, z_i)/ q(z_i | x)\n            log_wi = log  p(x, z_i) - log q(z_i | x)\n        Args:\n            data:\n            K:\n            mask:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "x_input", "=", "data", ".", "x", ".", "clone", "(", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "x_input", "[", "~", "mask", "]", "=", "0.0", "\n", "\n", "", "log_w", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "x_input", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z_k", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "log_prob_qz_x", "=", "qz_x", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "# Summing over dim(z)", "\n", "log_prob_pz", "=", "self", ".", "z_prior_distr", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "\n", "log_prob_px_z", "=", "px_z_k", ".", "log_prob", "(", "data", ".", "x", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_w_k", "=", "log_prob_px_z", "+", "log_prob_pz", "-", "log_prob_qz_x", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "log_w", ".", "append", "(", "log_w_k", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "                ", "log_w", ".", "append", "(", "log_w_k", ")", "\n", "\n", "", "", "log_w", "=", "torch", ".", "stack", "(", "log_w", ",", "dim", "=", "0", ")", "\n", "\n", "# [K, N]", "\n", "return", "log_w", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.compute_log_w_dreg": [[227, 260], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "vaca_module.VACAModule.encoder", "vaca_module.VACAModule.rsample", "vaca_module.VACAModule.decoder", "vaca_module.VACAModule.__class__", "vaca_module.VACAModule.__class__.log_prob().sum", "vaca_module.VACAModule.z_prior_distr.log_prob().sum", "vaca_module.VACAModule.log_prob().sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "vaca_module.VACAModule.loc.detach", "vaca_module.VACAModule.scale.detach", "vaca_module.VACAModule.__class__.log_prob", "vaca_module.VACAModule.z_prior_distr.log_prob", "vaca_module.VACAModule.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "compute_log_w_dreg", "(", "self", ",", "data", ",", "K", ")", ":", "\n", "        ", "\"\"\"\n        IWAE dreg:  log(1\\K \\sum_k w_k) w_k = p(x, z_i)/ q(z_i | x)\n            log_wi = log  p(x, z_i) - log q(z_i | x)\n        Args:\n            data:\n            K:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "log_w", "=", "[", "]", "\n", "zs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "data", ".", "x", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z_k", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "qz_x_", "=", "qz_x", ".", "__class__", "(", "qz_x", ".", "loc", ".", "detach", "(", ")", ",", "qz_x", ".", "scale", ".", "detach", "(", ")", ")", "# only difference to compute_log_w", "\n", "log_prob_qz_x", "=", "qz_x_", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "\n", "log_prob_pz", "=", "self", ".", "z_prior_distr", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "\n", "log_prob_px_z", "=", "px_z_k", ".", "log_prob", "(", "data", ".", "x", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_w_k", "=", "log_prob_px_z", "+", "log_prob_pz", "-", "log_prob_qz_x", "\n", "log_w", ".", "append", "(", "log_w_k", ")", "\n", "zs", ".", "append", "(", "z", ")", "\n", "\n", "", "log_w", "=", "torch", ".", "stack", "(", "log_w", ",", "dim", "=", "0", ")", "\n", "zs", "=", "torch", ".", "stack", "(", "zs", ",", "dim", "=", "0", ")", "\n", "# [K, N]", "\n", "return", "log_w", ".", "T", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.sample": [[261, 273], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vaca_module.VACAModule.decoder", "vaca_module.VACAModule.rsample", "ValueError", "vaca_module.VACAModule.z_prior_distr.sample", "isinstance"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "adj", ",", "Z", "=", "None", ",", "n_samples", "=", "None", ")", ":", "\n", "        ", "if", "(", "Z", "is", "None", ")", "==", "(", "n_samples", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Either `Z` or `n_samples` must be specified, but not both.\"", ")", "\n", "\n", "", "if", "Z", "is", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "n_samples", ",", "list", ")", ":", "n_samples", "=", "[", "n_samples", "]", "\n", "Z", "=", "self", ".", "z_prior_distr", ".", "sample", "(", "n_samples", ")", "\n", "\n", "", "px_z", "=", "self", ".", "decoder", "(", "Z", ",", "adj", ")", "\n", "x_hat", "=", "px_z", ".", "rsample", "(", ")", "\n", "return", "x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.forward": [[274, 309], ["data.x.clone", "vaca_module.VACAModule.encoder", "vaca_module.VACAModule.rsample", "vaca_module.VACAModule.decoder", "vaca_module.VACAModule.log_prob().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "vaca_module.VACAModule.compute_log_w", "models.IWAE", "vaca_module.VACAModule.log_prob().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "objective.mean", "vaca_module.VACAModule.compute_log_w_dreg", "models.IWAE_dreg", "objective.mean", "vaca_module.VACAModule.log_prob().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "vaca_module.VACAModule.log_prob", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_log_w_dreg", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE_dreg", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "forward", "(", "self", ",", "data", ",", "estimator", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "x_input", "=", "data", ".", "x", ".", "clone", "(", ")", "\n", "mask", "=", "None", "\n", "\n", "if", "estimator", "==", "'elbo'", ":", "\n", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "x_input", ",", "\n", "data", ".", "edge_index", ",", "\n", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "log_prob_x", "=", "px_z", ".", "log_prob", "(", "data", ".", "x", ")", ".", "flatten", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "kl_z", "=", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "qz_x", ",", "self", ".", "z_prior_distr", ")", ".", "flatten", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "elbo", "=", "log_prob_x", "-", "beta", "*", "kl_z", "\n", "\n", "data", "=", "{", "'log_prob_x'", ":", "log_prob_x", ",", "\n", "'kl_z'", ":", "kl_z", "}", "\n", "\n", "return", "elbo", ",", "data", "\n", "", "elif", "estimator", "==", "'iwae'", ":", "\n", "            ", "log_w", "=", "self", ".", "compute_log_w", "(", "data", "=", "data", ",", "K", "=", "self", ".", "K", ",", "mask", "=", "mask", ")", "\n", "objective", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", ",", "trick", "=", "True", ")", "\n", "return", "objective", ".", "mean", "(", ")", ",", "{", "}", "\n", "\n", "", "elif", "estimator", "==", "'iwaedreg'", ":", "\n", "            ", "log_w", ",", "zs", "=", "self", ".", "compute_log_w_dreg", "(", "data", "=", "data", ",", "K", "=", "self", ".", "K", ")", "\n", "objective", ",", "_", "=", "estims", ".", "IWAE_dreg", "(", "log_w", ",", "zs", ")", "\n", "return", "objective", ".", "mean", "(", ")", ",", "{", "}", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca_module.VACAModule.reconstruct": [[310, 322], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vaca_module.VACAModule.encoder", "vaca_module.VACAModule.decoder", "qz_x.rsample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "self", ",", "data", ",", "\n", "use_mean_encoder", "=", "True", ",", "\n", "return_type", "=", "'mean'", ")", ":", "\n", "        ", "z_mean", ",", "qz_x", "=", "self", ".", "encoder", "(", "data", ".", "x", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "z", "=", "z_mean", "if", "use_mean_encoder", "else", "qz_x", ".", "rsample", "(", ")", "\n", "x_hat", ",", "_", "=", "self", ".", "decoder", "(", "z", ",", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "return_type", "=", "return_type", ",", "node_ids", "=", "data", ".", "node_ids", ")", "\n", "\n", "return", "z_mean", ",", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.__init__": [[23, 126], ["pytorch_lightning.LightningModule.__init__", "vaca.VACA.save_hyperparameters", "vaca.VACA.model.set_z_prior_distr", "utils.metrics.time.Timer", "sklearn.preprocessing.FunctionTransformer", "HVACAModule", "VACAModule"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.set_z_prior_distr"], ["def", "__init__", "(", "self", ",", "\n", "h_dim_list_dec", ":", "List", "[", "int", "]", ",", "\n", "h_dim_list_enc", ":", "List", "[", "int", "]", ",", "\n", "z_dim", ":", "int", ",", "\n", "m_layers", ":", "int", "=", "1", ",", "\n", "deg", ":", "List", "[", "float", "]", "=", "None", ",", "# Only PNA architecture", "\n", "edge_dim", ":", "int", "=", "None", ",", "\n", "num_nodes", ":", "int", "=", "None", ",", "\n", "beta", ":", "float", "=", "1.0", ",", "\n", "annealing_beta", ":", "bool", "=", "False", ",", "\n", "residual", ":", "int", "=", "0", ",", "# Only PNA architecture", "\n", "drop_rate", ":", "float", "=", "0.0", ",", "\n", "dropout_adj_rate", ":", "float", "=", "0.0", ",", "\n", "dropout_adj_pa_rate", ":", "float", "=", "0.0", ",", "\n", "dropout_adj_pa_prob_keep_self", ":", "float", "=", "0.0", ",", "\n", "keep_self_loops", ":", "bool", "=", "True", ",", "\n", "dropout_adj_T", ":", "int", "=", "0", ",", "# Epoch to start the dropout_adj_T", "\n", "act_name", ":", "str", "=", "Cte", ".", "RELU", ",", "\n", "likelihood_x", ":", "Any", "=", "None", ",", "# Heterogneous: List[List[BaseLikelihood]] || Simple: BaseLikelihood", "\n", "distr_z", ":", "str", "=", "'normal'", ",", "\n", "architecture", ":", "str", "=", "None", ",", "# PNA, DGNN, DPNA", "\n", "estimator", ":", "str", "=", "'iwaedreg'", ",", "\n", "K", "=", "1", ",", "# Only for IWAE estimator", "\n", "scaler", ":", "Any", "=", "None", ",", "\n", "init", ":", "str", "=", "None", ",", "\n", "is_heterogeneous", ":", "bool", "=", "False", ",", "\n", "norm_categorical", ":", "bool", "=", "False", ",", "\n", "norm_by_dim", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VACA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "init", "is", "None", ",", "'Only default init is implemented'", "\n", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "estimator", "=", "estimator", "\n", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "keep_self_loops", "=", "keep_self_loops", "\n", "\n", "self", ".", "random_train_sampler", "=", "None", "\n", "\n", "if", "scaler", "is", "None", ":", "\n", "            ", "self", ".", "scaler", "=", "FunctionTransformer", "(", "func", "=", "lambda", "x", ":", "x", ",", "\n", "inverse_func", "=", "lambda", "x", ":", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "scaler", "\n", "\n", "", "self", ".", "beta", "=", "beta", "\n", "self", ".", "annealing_beta", "=", "annealing_beta", "\n", "\n", "if", "is_heterogeneous", ":", "\n", "            ", "from", "models", ".", "vaca", ".", "hvaca_module", "import", "HVACAModule", "\n", "\n", "self", ".", "model", "=", "HVACAModule", "(", "likelihoods_x", "=", "likelihood_x", ",", "\n", "h_dim_list_dec", "=", "h_dim_list_dec", ",", "# Hidden layers in the generative network", "\n", "h_dim_list_enc", "=", "h_dim_list_enc", ",", "# Hidden layers in the inference network", "\n", "z_dim", "=", "z_dim", ",", "\n", "m_layers", "=", "m_layers", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "residual", "=", "residual", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "distr_z", "=", "distr_z", ",", "\n", "architecture", "=", "architecture", ",", "\n", "norm_categorical", "=", "norm_categorical", ",", "\n", "norm_by_dim", "=", "norm_by_dim", ",", "\n", "K", "=", "K", "\n", ")", "\n", "", "else", ":", "\n", "            ", "from", "models", ".", "vaca", ".", "vaca_module", "import", "VACAModule", "\n", "x_dim", "=", "likelihood_x", ".", "domain_size", "\n", "\n", "self", ".", "model", "=", "VACAModule", "(", "x_dim", "=", "x_dim", ",", "\n", "h_dim_list_dec", "=", "h_dim_list_dec", ",", "# Hidden layers in the generative network", "\n", "h_dim_list_enc", "=", "h_dim_list_enc", ",", "# Hidden layers in the inference network", "\n", "z_dim", "=", "z_dim", ",", "\n", "m_layers", "=", "m_layers", ",", "\n", "deg", "=", "deg", ",", "\n", "edge_dim", "=", "edge_dim", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "residual", "=", "residual", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "act_name", "=", "act_name", ",", "\n", "likelihood_x", "=", "likelihood_x", ",", "\n", "distr_z", "=", "distr_z", ",", "\n", "architecture", "=", "architecture", ",", "\n", "K", "=", "K", "\n", ")", "\n", "\n", "", "self", ".", "is_heterogeneous", "=", "is_heterogeneous", "\n", "\n", "self", ".", "model", ".", "set_z_prior_distr", "(", "self", ".", "device", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n", "self", ".", "dropout_adj", "=", "dropout_adj_rate", "\n", "self", ".", "dropout_adj_pa_prob_keep_self", "=", "dropout_adj_pa_prob_keep_self", "\n", "self", ".", "dropout_adj_pa", "=", "dropout_adj_pa_rate", "\n", "self", ".", "dropout_adj_T", "=", "dropout_adj_T", "\n", "\n", "self", ".", "save_dir", "=", "None", "\n", "\n", "self", ".", "my_evaluator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.set_my_evaluator": [[127, 129], ["None"], "methods", ["None"], ["", "def", "set_my_evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "my_evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.monitor": [[130, 132], ["None"], "methods", ["None"], ["", "def", "monitor", "(", "self", ")", ":", "\n", "        ", "return", "'valid_iwae_100'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.monitor_mode": [[133, 135], ["None"], "methods", ["None"], ["", "def", "monitor_mode", "(", "self", ")", ":", "\n", "        ", "return", "'max'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.set_random_train_sampler": [[136, 138], ["None"], "methods", ["None"], ["", "def", "set_random_train_sampler", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "random_train_sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.samples_aggregated_posterior": [[139, 145], ["torch.no_grad", "vaca.VACA.random_train_sampler", "vaca.VACA.model.encoder", "vaca.VACA.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "samples_aggregated_posterior", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "batch", "=", "self", ".", "random_train_sampler", "(", "num_samples", ")", "\n", "q_z_x", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "edge_attr", "=", "batch", ".", "edge_attr", ",", "\n", "return_mean", "=", "False", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "return", "q_z_x", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_x_graph": [[146, 148], ["vaca.VACA.model.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "def", "get_x_graph", "(", "self", ",", "data", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "get_x_graph", "(", "data", ",", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.set_optim_params": [[149, 152], ["None"], "methods", ["None"], ["", "def", "set_optim_params", "(", "self", ",", "optim_params", ",", "sched_params", ")", ":", "\n", "        ", "self", ".", "optim_params", "=", "optim_params", "\n", "self", ".", "sched_params", "=", "sched_params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.configure_optimizers": [[153, 160], ["isinstance", "utils.optimizers.get_optimizer", "vaca.VACA.parameters", "utils.optimizers.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "get_optimizer", "(", "self", ".", "optim_params", "[", "'name'", "]", ")", "(", "self", ".", "parameters", "(", ")", ",", "**", "self", ".", "optim_params", "[", "'params'", "]", ")", "\n", "if", "isinstance", "(", "self", ".", "sched_params", ",", "dict", ")", ":", "\n", "            ", "sched", "=", "get_scheduler", "(", "self", ".", "sched_params", "[", "'name'", "]", ")", "(", "optim", ",", "**", "self", ".", "sched_params", "[", "'params'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sched", "=", "[", "]", "\n", "", "return", "[", "optim", "]", ",", "sched", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.forward": [[161, 163], ["vaca.VACA.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "data", ",", "estimator", "=", "self", ".", "estimator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_beta_annealing_factor": [[164, 169], ["max", "min"], "methods", ["None"], ["", "def", "get_beta_annealing_factor", "(", "self", ",", "current_epoch", ")", ":", "\n", "        ", "if", "self", ".", "annealing_beta", ">", "0", ":", "# Do annealing", "\n", "            ", "return", "max", "(", "min", "(", "(", "current_epoch", "-", "10", ")", "/", "self", ".", "annealing_beta", ",", "1.0", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.training_step": [[170, 191], ["batch.clone.clone.to", "vaca.VACA.model", "vaca.VACA.log", "data.items", "batch.clone.clone.clone", "utils.dropout.dropout_adj", "batch.clone.clone.clone", "utils.dropout.dropout_adj_parents", "objective.item", "vaca.VACA.log", "value.item", "vaca.VACA.get_beta_annealing_factor"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj", "home.repos.pwc.inspect_result.psanch21_VACA.utils.dropout.dropout_adj_parents", "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_beta_annealing_factor"], ["", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "dropout_adj", ">", "0.0", "and", "self", ".", "current_epoch", ">=", "self", ".", "dropout_adj_T", ":", "\n", "            ", "batch", "=", "batch", ".", "clone", "(", ")", "\n", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", "=", "dropout_adj", "(", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", ",", "\n", "p", "=", "self", ".", "dropout_adj", ",", "keep_self_loops", "=", "self", ".", "keep_self_loops", ")", "\n", "\n", "", "if", "self", ".", "dropout_adj_pa", ">", "0.0", "and", "self", ".", "current_epoch", ">=", "self", ".", "dropout_adj_T", ":", "\n", "            ", "batch", "=", "batch", ".", "clone", "(", ")", "\n", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", "=", "dropout_adj_parents", "(", "batch", ".", "edge_index", ",", "batch", ".", "edge_attr", ",", "\n", "p", "=", "self", ".", "dropout_adj_pa", ",", "\n", "prob_keep_self", "=", "self", ".", "dropout_adj_pa_prob_keep_self", ")", "\n", "\n", "", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "\n", "estimator", "=", "self", ".", "estimator", ",", "\n", "beta", "=", "self", ".", "beta", "*", "self", ".", "get_beta_annealing_factor", "(", "self", ".", "current_epoch", ")", ")", "\n", "self", ".", "log", "(", "'train_objective'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f'train_{key}'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "", "return", "-", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_train_epoch_start": [[192, 194], ["vaca.VACA.timer.tic"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic"], ["", "def", "on_train_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "tic", "(", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_train_epoch_end": [[195, 198], ["vaca.VACA.timer.toc", "vaca.VACA.logger.experiment.add_scalar"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc"], ["", "def", "on_train_epoch_end", "(", "self", ",", "outputs", ")", "->", "None", ":", "\n", "        ", "time", "=", "self", ".", "timer", ".", "toc", "(", "'train'", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "'train_time'", ",", "time", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.validation_step": [[199, 213], ["batch.to.to.to", "vaca.VACA.model", "vaca.VACA.log", "data.items", "vaca.VACA.compute_log_w", "models.IWAE", "iwae.mean.mean.mean", "vaca.VACA.log", "objective.item", "vaca.VACA.log", "iwae.mean.mean.item", "iwae.mean.mean.item", "value.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "estimator", "=", "'elbo'", ",", "beta", "=", "1.0", ")", "\n", "self", ".", "log", "(", "'valid_elbo'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f'valid_{key}'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "K", "=", "100", "\n", "log_w", "=", "self", ".", "compute_log_w", "(", "batch", ",", "K", "=", "K", ")", "\n", "iwae", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", "[", ":", ",", ":", "K", "]", ",", "trick", "=", "False", ")", "\n", "iwae", "=", "iwae", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "f'valid_iwae_{K}'", ",", "iwae", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "return", "{", "f'valid_iwae_{K}'", ":", "iwae", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_validation_epoch_start": [[214, 216], ["vaca.VACA.timer.stop"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.stop"], ["", "def", "on_validation_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "stop", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_validation_epoch_end": [[217, 219], ["vaca.VACA.timer.resume"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.resume"], ["", "def", "on_validation_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "resume", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_test_epoch_start": [[220, 224], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "x_test", "=", "[", "]", "\n", "self", ".", "x_hat", "=", "[", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.test_step": [[225, 237], ["batch.to.to.to", "vaca.VACA.model", "vaca.VACA.log", "data.items", "vaca.VACA.compute_log_w", "models.IWAE", "iwae.mean.mean.mean", "vaca.VACA.log", "objective.item", "vaca.VACA.log", "iwae.mean.mean.item", "value.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "estimator", "=", "'elbo'", ",", "beta", "=", "1.0", ")", "\n", "self", ".", "log", "(", "'test_elbo'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f'test_{key}'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "K", "=", "20", "\n", "log_w", "=", "self", ".", "compute_log_w", "(", "batch", ",", "K", "=", "K", ")", "\n", "iwae", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", ",", "trick", "=", "False", ")", "\n", "iwae", "=", "iwae", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "f'test_iwae_{K}'", ",", "iwae", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_test_epoch_end": [[238, 240], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_epoch_end": [[241, 253], ["vaca.VACA.eval", "vaca.VACA.train", "vaca.VACA.my_evaluator.set_save_dir", "vaca.VACA.my_evaluator.set_logger", "vaca.VACA.my_evaluator.set_current_epoch", "vaca.VACA.my_evaluator.complete_logs", "vaca.VACA.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "# log sampled images", "\n", "\n", "if", "self", ".", "current_epoch", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "# IMPORTANT: Set back to train mode!", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_fit_end": [[254, 267], ["vaca.VACA.my_evaluator.set_save_dir", "vaca.VACA.my_evaluator.set_logger", "vaca.VACA.my_evaluator.set_current_epoch", "vaca.VACA.my_evaluator.complete_logs", "open", "vaca.VACA.timer.toc", "json.dump", "os.path.join", "vaca.VACA.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_fit_end", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'time.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toc", "=", "self", ".", "timer", ".", "toc", "(", "'train_total'", ")", "\n", "ouput", "=", "{", "'train_time_total'", ":", "toc", ",", "\n", "'train_epochs'", ":", "self", ".", "current_epoch", ",", "\n", "'train_time_avg_per_epoch'", ":", "toc", "/", "self", ".", "current_epoch", "}", "\n", "json", ".", "dump", "(", "ouput", ",", "f", ")", "\n", "", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.on_fit_start": [[268, 274], ["vaca.VACA.eval", "vaca.VACA.timer.tic", "utils.args_parser.mkdir", "vaca.VACA.model.set_z_prior_distr", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.set_z_prior_distr"], ["", "def", "on_fit_start", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "self", ".", "timer", ".", "tic", "(", "'train_total'", ")", "\n", "\n", "img_folder", "=", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'images'", ")", ")", "\n", "self", ".", "model", ".", "set_z_prior_distr", "(", "self", ".", "device", ")", "# Just to move the prior to GPU if needed", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_objective_metrics": [[275, 295], ["torch.no_grad", "enumerate", "metrics.items", "iter", "vaca.VACA.model", "metrics[].append", "vaca.VACA.compute_log_w", "models.IWAE", "metrics[].append", "numpy.mean", "objective.item", "iwae_10.mean().item", "iwae_10.mean"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_objective_metrics", "(", "self", ",", "\n", "data_loader", ",", "\n", "name", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "K", "=", "100", "\n", "\n", "metrics", "=", "{", "'elbo'", ":", "[", "]", ",", "f'iwae_{K}'", ":", "[", "]", "}", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iter", "(", "data_loader", ")", ")", ":", "\n", "            ", "objective", ",", "data", "=", "self", ".", "model", "(", "batch", ",", "estimator", "=", "'elbo'", ",", "beta", "=", "1", ")", "\n", "metrics", "[", "'elbo'", "]", ".", "append", "(", "objective", ".", "item", "(", ")", ")", "\n", "log_w", "=", "self", ".", "compute_log_w", "(", "batch", ",", "K", "=", "K", ")", "\n", "iwae_10", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", ",", "trick", "=", "False", ")", "\n", "metrics", "[", "f'iwae_{K}'", "]", ".", "append", "(", "iwae_10", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "output", "[", "f'{name}_{key}'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.evaluate": [[296, 308], ["torch.no_grad", "vaca.VACA.my_evaluator.set_save_dir", "vaca.VACA.my_evaluator.set_logger", "vaca.VACA.my_evaluator.set_current_epoch", "vaca.VACA.my_evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "\n", "dataloader", ",", "\n", "name", "=", "'test'", ",", "\n", "save_dir", "=", "None", ",", "\n", "plots", "=", "False", ")", ":", "\n", "        ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "save_dir", "if", "save_dir", "is", "not", "None", "else", "self", ".", "logger", ".", "save_dir", ",", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "100000", ")", "\n", "\n", "output", "=", "self", ".", "my_evaluator", ".", "evaluate", "(", "dataloader", ",", "name", "=", "name", ",", "plots", "=", "plots", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.my_cf_fairness": [[309, 319], ["vaca.VACA.my_evaluator.set_save_dir", "vaca.VACA.my_evaluator.set_logger", "vaca.VACA.my_evaluator.set_current_epoch", "vaca.VACA.my_evaluator.evaluate_cf_fairness", "print"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.evaluate_cf_fairness"], ["", "def", "my_cf_fairness", "(", "self", ",", "\n", "data_module", ",", "\n", "save_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "save_dir", "if", "save_dir", "is", "not", "None", "else", "self", ".", "logger", ".", "save_dir", ",", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "100000", ")", "\n", "\n", "output", "=", "self", ".", "my_evaluator", ".", "evaluate_cf_fairness", "(", "data_module", ")", "\n", "print", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_log_w": [[320, 322], ["vaca.VACA.model.compute_log_w"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w"], ["", "def", "compute_log_w", "(", "self", ",", "data", ",", "K", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "compute_log_w", "(", "data", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_log_w_dreg": [[323, 325], ["vaca.VACA.model.compute_log_w_dreg"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_log_w_dreg"], ["", "def", "compute_log_w_dreg", "(", "self", ",", "data", ",", "K", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "compute_log_w_dreg", "(", "data", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_observational_distr": [[326, 382], ["torch.no_grad", "iter", "vaca.VACA.eval", "enumerate", "data_loader.dataset.clean_intervention", "data_loader.dataset.diagonal_SCM", "batch.to.to.to", "vaca.VACA.model.decoder", "z_list.append", "torch.cat", "torch.cat", "torch.cat", "isinstance", "vaca.VACA.samples_aggregated_posterior().to", "vaca.VACA.model.z_prior_distr.sample().to", "x_real.append", "x.append", "x_real.append", "x.append", "vaca.VACA.view", "vaca.VACA.get_x_graph", "x_hat.view", "vaca.VACA.scaler.inverse_transform", "vaca.VACA.scaler.inverse_transform", "vaca.VACA.samples_aggregated_posterior", "vaca.VACA.model.z_prior_distr.sample", "vaca.VACA.get_x_graph", "x_hat.view"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.diagonal_SCM", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.samples_aggregated_posterior", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_observational_distr", "(", "self", ",", "data_loader", ",", "\n", "use_links", ":", "bool", "=", "True", ",", "\n", "use_aggregated_posterior", ":", "bool", "=", "False", ",", "\n", "num_batches", ":", "bool", "=", "None", ",", "\n", "normalize", ":", "bool", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Get x generated distribution  w/o intervention or with diagonal adjacency.\n        Parameters\n        Args:\n            data_loader:\n            use_links:\n                If false, then uses an diagonal adjacency matrix to compute the distribution\n            use_aggregated_posterior:\n            num_batches:\n            normalize:\n\n        Returns:\n            z_list: torch.Tensor\n                Latent code of the generated distribution\n            x: torch.Tensor\n                Generated distribution\n            x_real: torch.Tensor\n                distribution of the dataset (real data)\n        \"\"\"", "\n", "\n", "if", "use_links", "is", "False", ":", "\n", "            ", "data_loader", ".", "dataset", ".", "diagonal_SCM", "(", ")", "\n", "", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", ",", "z_list", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "num_batches", ",", "int", ")", "and", "idx", ">", "num_batches", ":", "break", "\n", "if", "use_aggregated_posterior", ":", "\n", "                ", "z", "=", "self", ".", "samples_aggregated_posterior", "(", "num_samples", "=", "batch", ".", "num_graphs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "model", ".", "z_prior_distr", ".", "sample", "(", "[", "batch", ".", "num_nodes", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "x_hat", ",", "_", "=", "self", ".", "model", ".", "decoder", "(", "z", ",", "batch", ".", "edge_index", ",", "edge_attr", "=", "batch", ".", "edge_attr", ",", "\n", "return_type", "=", "'sample'", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "if", "normalize", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "x", ".", "append", "(", "x_hat", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "x", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "z_list", ".", "append", "(", "z", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "z_list", ")", ",", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_interventional_distr": [[383, 474], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "iter", "vaca.VACA.eval", "enumerate", "x_gener_dict.items", "data_loader.dataset.clean_intervention", "vaca.VACA.view", "vaca.VACA.model.encoder", "z_mean.reshape.reshape.reshape", "data_loader.dataset.x_I.items", "vaca.VACA.view", "vaca.VACA.model.decoder", "vaca.VACA.reshape", "data_loader.dataset.sample_intervention", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "torch.cat", "isinstance", "vaca.VACA.samples_aggregated_posterior().to", "vaca.VACA.model.z_prior_distr.sample().to", "data_loader.dataset.nodes_list.index", "vaca.VACA.scaler.inverse_transform", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "len", "torch.cat", "torch.tensor", "torch.Tensor", "vaca.VACA.samples_aggregated_posterior", "vaca.VACA.model.z_prior_distr.sample", "vaca.VACA.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.samples_aggregated_posterior", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_interventional_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ",", "\n", "use_aggregated_posterior", ":", "bool", "=", "False", ",", "\n", "num_batches", ":", "int", "=", "None", ",", "\n", "normalize", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Get x generated distribution  w/o intervention or with diagonal adjacency.\n        Parameters\n        Args:\n            data_loader:\n            x_I:\n                If x_I is None compute the distribution of the original SCM, if x_I is a dict\n                then compute the interventional distribution. E.g. x_I = {'x1': 0} computes the\n                interventional distribution with do(x1=0)\n            use_aggregated_posterior:\n            num_batches:\n            normalize:\n\n        Returns:\n            x_gener_dict_out: dict of torch.Tensor\n                Generated distribution\n            x_real_dict_out: dict of torch.Tensor\n                distribution of the dataset (real data)\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ")", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "if", "isinstance", "(", "num_batches", ",", "int", ")", "and", "idx", ">", "num_batches", ":", "break", "\n", "if", "use_aggregated_posterior", ":", "\n", "                ", "z", "=", "self", ".", "samples_aggregated_posterior", "(", "num_samples", "=", "batch", ".", "num_graphs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "model", ".", "z_prior_distr", ".", "sample", "(", "[", "batch", ".", "num_nodes", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "z", "=", "z", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n", "z_mean", ",", "_", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x_i", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "z_mean", "=", "z_mean", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "for", "node_name", ",", "_", "in", "data_loader", ".", "dataset", ".", "x_I", ".", "items", "(", ")", ":", "\n", "                ", "i", "=", "data_loader", ".", "dataset", ".", "nodes_list", ".", "index", "(", "node_name", ")", "\n", "z", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "=", "z_mean", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "\n", "\n", "", "z", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "\n", "x_hat", ",", "_", "=", "self", ".", "model", ".", "decoder", "(", "z", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_type", "=", "'sample'", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "x_hat", "=", "x_hat", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "if", "not", "normalize", ":", "\n", "                ", "x_hat", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ")", "\n", "\n", "", "x_inter", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "sample_intervention", "(", "x_I", "=", "x_I", ",", "\n", "n_samples", "=", "batch", ".", "num_graphs", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "\n", "if", "x_inter", "is", "not", "None", ":", "\n", "                ", "if", "normalize", ":", "\n", "                    ", "x_inter", "=", "torch", ".", "tensor", "(", "self", ".", "scaler", ".", "transform", "(", "x_inter", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_inter", "=", "torch", ".", "Tensor", "(", "x_inter", ")", "\n", "# x_real_dict['parents'].append(x_inter[:, set_nodes['parents']])", "\n", "", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_inter", ")", "\n", "\n", "# x_gener_dict['parents'].append(x_hat[:, set_nodes['parents']])", "\n", "", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "x_hat", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "x_hat", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "x_hat", ")", "\n", "\n", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "if", "len", "(", "x_real_dict", "[", "key", "]", ")", ">", "0", ":", "\n", "                ", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "\n", "", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "x_gener_dict_out", ",", "x_real_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.compute_counterfactual": [[475, 500], ["torch.no_grad", "vaca.VACA.model.encoder", "vaca.VACA.model.encoder", "z_factual.reshape.reshape.reshape", "z_cf_I.reshape.reshape.reshape", "x_I.items", "z_I.items", "z_factual.reshape.reshape.reshape", "vaca.VACA.model.decoder", "x_CF.view", "z_factual.reshape.reshape.reshape", "z_cf_I.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_counterfactual", "(", "self", ",", "batch", ",", "x_I", ",", "z_I", ")", ":", "\n", "        ", "z_factual", ",", "_", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "edge_attr", "=", "batch", ".", "edge_attr", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "# Encoder pass 2 CounterFactual", "\n", "z_cf_I", ",", "_", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x_i", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "z_factual", "=", "z_factual", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "z_cf_I", "=", "z_cf_I", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n", "# Replace z_cf of the intervened variables with z_cf_I", "\n", "for", "i", ",", "_", "in", "x_I", ".", "items", "(", ")", ":", "\n", "            ", "z_factual", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "=", "z_cf_I", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "\n", "", "for", "k", ",", "v", "in", "z_I", ".", "items", "(", ")", ":", "\n", "            ", "z_factual", "[", ":", ",", "self", ".", "z_dim", "*", "k", ":", "self", ".", "z_dim", "*", "(", "k", "+", "1", ")", "]", "=", "v", "\n", "\n", "", "z_factual", "=", "z_factual", ".", "reshape", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "\n", "x_CF", ",", "_", "=", "self", ".", "model", ".", "decoder", "(", "z_factual", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_type", "=", "'sample'", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "return", "x_CF", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "z_factual", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "z_cf_I", ".", "reshape", "(", "\n", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_counterfactual_distr": [[501, 606], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "iter", "vaca.VACA.eval", "enumerate", "x_gener_dict.items", "x_factual_dict.items", "data_loader.dataset.clean_intervention", "vaca.VACA.model.encoder", "z_factual.reshape.reshape.reshape", "z_factual_dict[].append", "vaca.VACA.model.encoder", "z_cf_I.reshape.reshape.reshape", "z_counterfactual_dict[].append", "data_loader.dataset.x_I.items", "z_factual.reshape.reshape.reshape", "vaca.VACA.model.decoder", "batch.u.view", "data_loader.dataset.get_counterfactual", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "z_factual.reshape.reshape.clone", "z_cf_I.reshape.reshape.clone", "data_loader.dataset.nodes_list.index", "vaca.VACA.view", "vaca.VACA.scaler.inverse_transform", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_factual_dict[].append", "x_factual_dict[].append", "len", "torch.cat", "vaca.VACA.view", "vaca.VACA.scaler.inverse_transform", "vaca.VACA.scaler.transform", "torch.Tensor", "vaca.VACA.get_x_graph", "vaca.VACA.scaler.inverse_transform", "vaca.VACA.get_x_graph", "vaca.VACA.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_counterfactual", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_counterfactual_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", "=", "None", ",", "\n", "is_noise", "=", "False", ",", "\n", "return_z", "=", "False", ",", "\n", "num_batches", "=", "None", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ",", "is_noise", "=", "is_noise", ")", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_factual_dict", "=", "{", "'all'", ":", "[", "]", "}", "\n", "z_factual_dict", "=", "{", "'all'", ":", "[", "]", "}", "\n", "z_counterfactual_dict", "=", "{", "'all'", ":", "[", "]", "}", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "if", "isinstance", "(", "num_batches", ",", "int", ")", "and", "idx", ">", "num_batches", ":", "break", "\n", "# Encoder pass 1 with Factual", "\n", "z_factual", ",", "_", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x", ",", "batch", ".", "edge_index", ",", "edge_attr", "=", "batch", ".", "edge_attr", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "z_factual", "=", "z_factual", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "z_factual_dict", "[", "'all'", "]", ".", "append", "(", "z_factual", ".", "clone", "(", ")", ")", "\n", "\n", "# Encoder pass 2 CounterFactual", "\n", "z_cf_I", ",", "_", "=", "self", ".", "model", ".", "encoder", "(", "batch", ".", "x_i", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_mean", "=", "True", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "z_cf_I", "=", "z_cf_I", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "z_counterfactual_dict", "[", "'all'", "]", ".", "append", "(", "z_cf_I", ".", "clone", "(", ")", ")", "\n", "\n", "# Replace z_cf of the intervened variables with z_cf_I", "\n", "\n", "for", "node_name", ",", "_", "in", "data_loader", ".", "dataset", ".", "x_I", ".", "items", "(", ")", ":", "\n", "                ", "i", "=", "data_loader", ".", "dataset", ".", "nodes_list", ".", "index", "(", "node_name", ")", "\n", "\n", "z_factual", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "=", "z_cf_I", "[", ":", ",", "self", ".", "z_dim", "*", "i", ":", "self", ".", "z_dim", "*", "(", "i", "+", "1", ")", "]", "\n", "\n", "", "z_factual", "=", "z_factual", ".", "reshape", "(", "-", "1", ",", "self", ".", "z_dim", ")", "# [512, 1] [3000, 1]", "\n", "\n", "x_CF", ",", "_", "=", "self", ".", "model", ".", "decoder", "(", "z_factual", ",", "batch", ".", "edge_index_i", ",", "edge_attr", "=", "batch", ".", "edge_attr_i", ",", "\n", "return_type", "=", "'sample'", ",", "node_ids", "=", "batch", ".", "node_ids", ")", "\n", "\n", "# Not normalized", "\n", "if", "normalize", ":", "\n", "                ", "x_CF", "=", "x_CF", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "x_CF", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "x_CF", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "u_factual", "=", "batch", ".", "u", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n", "x_cf_real", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "get_counterfactual", "(", "\n", "x_factual", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ",", "\n", "u_factual", "=", "u_factual", ",", "\n", "x_I", "=", "x_I", ",", "\n", "is_noise", "=", "is_noise", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "if", "x_cf_real", "is", "not", "None", ":", "\n", "                ", "if", "normalize", ":", "\n", "                    ", "x_cf_real", "=", "self", ".", "scaler", ".", "transform", "(", "x_cf_real", ")", "\n", "", "else", ":", "\n", "                    ", "x_cf_real", "=", "torch", ".", "Tensor", "(", "x_cf_real", ")", "\n", "\n", "", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_cf_real", ")", "\n", "\n", "# Cf.shape [512,1] // CF.shape [1000, 3]", "\n", "", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "x_CF", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "x_CF", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "x_CF", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "\n", "", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "x_factual_dict_out", "=", "{", "}", "\n", "z_factual_dict_out", "=", "{", "}", "\n", "z_counterfactual_dict_out", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "if", "len", "(", "x_real_dict", "[", "key", "]", ")", ">", "0", ":", "\n", "                ", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "\n", "", "", "for", "key", ",", "values", "in", "x_factual_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_factual_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "z_factual_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "z_factual_dict", "[", "key", "]", ")", "\n", "z_counterfactual_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "z_counterfactual_dict", "[", "key", "]", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "if", "return_z", ":", "\n", "            ", "return", "x_gener_dict_out", ",", "z_counterfactual_dict_out", ",", "x_factual_dict_out", ",", "z_factual_dict_out", "\n", "", "else", ":", "\n", "            ", "return", "x_gener_dict_out", ",", "x_real_dict_out", ",", "x_factual_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_x": [[607, 615], ["torch.no_grad", "iter", "vaca.VACA.eval", "enumerate", "torch.cat", "x.append", "vaca.VACA.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_x", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "x", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_reconstruction_distr": [[616, 656], ["torch.no_grad", "iter", "vaca.VACA.eval", "enumerate", "vaca.VACA.model.reconstruct", "z.append", "torch.cat", "torch.cat", "torch.cat", "isinstance", "x.append", "x_real.append", "x.append", "x_real.append", "z_hat.reshape", "x_hat.view", "vaca.VACA.get_x_graph", "vaca.VACA.scaler.inverse_transform", "vaca.VACA.scaler.inverse_transform", "x_hat.view", "vaca.VACA.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.reconstruct", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_reconstruction_distr", "(", "self", ",", "data_loader", ",", "\n", "num_batches", "=", "None", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Reconstruct all the features of all the  graphs in data loader, i.e.,\n        Z \\sim q(Z|X, A) and X_hat p(X | Z, A)\n        Args:\n            data_loader:\n            num_batches:\n            normalize:\n\n        Returns:\n            z_list: torch.Tensor\n                Latent code of the reconstructed distribution, i.e. q(z|x)\n            x: torch.Tensor\n                reconstructed samples\n            x_real: torch.Tensor\n                original  samples (real data)\n        \"\"\"", "\n", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", ",", "z", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "if", "isinstance", "(", "num_batches", ",", "int", ")", "and", "idx", ">", "num_batches", ":", "break", "\n", "z_hat", ",", "x_hat", "=", "self", ".", "model", ".", "reconstruct", "(", "batch", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "x", ".", "append", "(", "x_hat", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "x_real", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "x", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", ")", "\n", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "\n", "", "z", ".", "append", "(", "z_hat", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "z", ")", ",", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.vaca.vaca.VACA.get_obs_distribution": [[657, 666], ["torch.no_grad", "iter", "vaca.VACA.eval", "enumerate", "torch.cat", "x.append", "batch.x.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_obs_distribution", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "x", ".", "append", "(", "batch", ".", "x", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.__init__": [[15, 53], ["torch.Module.__init__", "utils.likelihoods.get_likelihood", "c_list.extend", "c_list.append", "modules.dense.MLPModule", "c_list.extend", "c_list.append", "modules.dense.MLPModule"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.get_likelihood"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "\n", "h_dim_list_dec", ",", "\n", "h_dim_list_enc", ",", "\n", "z_dim", ",", "\n", "cond_dim", "=", "0", ",", "\n", "act_name", "=", "Cte", ".", "RELU", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "likelihood_x", "=", "None", ",", "\n", "distr_z", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "CVAEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "likelihood_z", "=", "get_likelihood", "(", "distr_z", ",", "z_dim", ")", "\n", "\n", "c_list", "=", "[", "x_dim", "+", "cond_dim", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_enc", ")", "\n", "c_list", ".", "append", "(", "likelihood_z", ".", "params_size", ")", "\n", "\n", "self", ".", "encoder_module", "=", "MLPModule", "(", "h_dim_list", "=", "c_list", ",", "\n", "activ_name", "=", "act_name", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "\n", "c_list", "=", "[", "z_dim", "+", "cond_dim", "]", "\n", "c_list", ".", "extend", "(", "h_dim_list_dec", ")", "\n", "c_list", ".", "append", "(", "likelihood_x", ".", "params_size", ")", "\n", "# Instantiate Decoder module", "\n", "\n", "self", ".", "decoder_module", "=", "MLPModule", "(", "h_dim_list", "=", "c_list", ",", "\n", "activ_name", "=", "act_name", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "likelihood_z", "=", "likelihood_z", "\n", "self", ".", "likelihood_x", "=", "likelihood_x", "\n", "\n", "self", ".", "distr_z", "=", "distr_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder_params": [[54, 56], ["cvae_module.CVAEModule.encoder_module.parameters"], "methods", ["None"], ["", "def", "encoder_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder_module", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder_params": [[57, 59], ["cvae_module.CVAEModule.decoder_module.parameters"], "methods", ["None"], ["", "def", "decoder_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "decoder_module", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.set_z_prior_distr": [[60, 76], ["torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Exponential", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "set_z_prior_distr", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "distr_z", "==", "Cte", ".", "CONTINOUS_BERN", ":", "# Continous Bernoulli", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "ContinuousBernoulli", "(", "\n", "probs", "=", "0.5", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "EXPONENTIAL", ":", "# Exponential", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Exponential", "(", "\n", "rate", "=", "0.2", "*", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "BETA", ":", "# Beta", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Beta", "(", "\n", "concentration0", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "concentration1", "=", "torch", ".", "ones", "(", "self", ".", "hparams", ".", "latent_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "self", ".", "distr_z", "==", "Cte", ".", "GAUSSIAN", ":", "\n", "            ", "self", ".", "z_prior_distr", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "ones", "(", "self", ".", "z_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder": [[77, 87], ["cvae_module.CVAEModule.encoder_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cvae_module.CVAEModule.likelihood_z", "cvae_module.CVAEModule.likelihood_z"], "methods", ["None"], ["", "", "def", "encoder", "(", "self", ",", "X", ",", "cond_data", "=", "None", ",", "return_mean", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "cond_data", "is", "not", "None", ":", "\n", "            ", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "cond_data", "]", ",", "dim", "=", "1", ")", "\n", "", "logits", "=", "self", ".", "encoder_module", "(", "X", ")", "\n", "if", "return_mean", ":", "\n", "            ", "mean", ",", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "qz_x", "\n", "", "else", ":", "\n", "            ", "qz_x", "=", "self", ".", "likelihood_z", "(", "logits", ")", "\n", "return", "qz_x", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder": [[88, 101], ["cvae_module.CVAEModule.decoder_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cvae_module.CVAEModule.likelihood_x", "cvae_module.CVAEModule.likelihood_x", "cvae_module.CVAEModule.likelihood_x", "cvae_module.CVAEModule.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "", "def", "decoder", "(", "self", ",", "Z", ",", "cond_data", "=", "None", ",", "return_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "cond_data", "is", "not", "None", ":", "\n", "            ", "Z", "=", "torch", ".", "cat", "(", "[", "Z", ",", "cond_data", "]", ",", "dim", "=", "1", ")", "\n", "", "logits", "=", "self", ".", "decoder_module", "(", "Z", ",", "**", "kwargs", ")", "\n", "if", "return_type", "==", "'mean'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "mean", ",", "px_z", "\n", "", "elif", "return_type", "==", "'sample'", ":", "\n", "            ", "mean", ",", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ",", "return_mean", "=", "True", ")", "\n", "return", "px_z", ".", "sample", "(", ")", ",", "px_z", "\n", "", "else", ":", "\n", "            ", "px_z", "=", "self", ".", "likelihood_x", "(", "logits", ")", "\n", "return", "px_z", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w": [[102, 142], ["X.clone", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "cvae_module.CVAEModule.encoder", "cvae_module.CVAEModule.rsample", "cvae_module.CVAEModule.decoder", "cvae_module.CVAEModule.log_prob().sum", "cvae_module.CVAEModule.z_prior_distr.log_prob().sum", "cvae_module.CVAEModule.log_prob().sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "cvae_module.CVAEModule.log_prob", "cvae_module.CVAEModule.z_prior_distr.log_prob", "cvae_module.CVAEModule.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "", "def", "compute_log_w", "(", "self", ",", "X", ",", "K", ",", "cond_data", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        IWAE log(1\\K \\sum_k w_k) w_k = p(x, z_i)/ q(z_i | x)\n            log_wi = log  p(x, z_i) - log q(z_i | x)\n        Args:\n            X:\n            K:\n            cond_data:\n            mask:\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "x_input", "=", "X", ".", "clone", "(", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "x_input", "[", "~", "mask", "]", "=", "0.0", "\n", "\n", "", "log_w", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "x_input", ",", "cond_data", "=", "cond_data", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "px_z_k", "=", "self", ".", "decoder", "(", "z", ",", "cond_data", "=", "cond_data", ")", "\n", "\n", "log_prob_qz_x", "=", "qz_x", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "# Summing over dim(z)", "\n", "log_prob_pz", "=", "self", ".", "z_prior_distr", ".", "log_prob", "(", "z", ")", ".", "sum", "(", "-", "1", ")", "\n", "log_prob_px_z", "=", "px_z_k", ".", "log_prob", "(", "X", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_w_k", "=", "log_prob_px_z", "+", "log_prob_pz", "-", "log_prob_qz_x", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "log_w", ".", "append", "(", "log_w_k", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "                ", "log_w", ".", "append", "(", "log_w_k", ")", "\n", "\n", "", "", "log_w", "=", "torch", ".", "stack", "(", "log_w", ",", "dim", "=", "0", ")", "\n", "\n", "# [K, N]", "\n", "return", "log_w", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.forward": [[143, 162], ["cvae_module.CVAEModule.encoder", "cvae_module.CVAEModule.rsample", "cvae_module.CVAEModule.decoder", "cvae_module.CVAEModule.log_prob().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "torch.distributions.kl.kl_divergence().flatten().sum().mean", "cvae_module.CVAEModule.log_prob().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "torch.distributions.kl.kl_divergence().flatten().sum", "cvae_module.CVAEModule.log_prob().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "torch.distributions.kl.kl_divergence().flatten", "cvae_module.CVAEModule.log_prob", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.rsample", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "forward", "(", "self", ",", "X", ",", "estimator", ",", "cond_data", "=", "None", ",", "beta", "=", "1.0", ")", ":", "\n", "\n", "        ", "if", "estimator", "==", "'elbo'", ":", "\n", "\n", "            ", "qz_x", "=", "self", ".", "encoder", "(", "X", ",", "cond_data", "=", "cond_data", ")", "\n", "z", "=", "qz_x", ".", "rsample", "(", ")", "\n", "\n", "px_z", "=", "self", ".", "decoder", "(", "z", ",", "cond_data", "=", "cond_data", ")", "\n", "log_prob_x", "=", "px_z", ".", "log_prob", "(", "X", ")", ".", "flatten", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "kl_z", "=", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "qz_x", ",", "self", ".", "z_prior_distr", ")", ".", "flatten", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "elbo", "=", "log_prob_x", "-", "beta", "*", "kl_z", "\n", "\n", "data", "=", "{", "'log_prob_x'", ":", "log_prob_x", ",", "\n", "'kl_z'", ":", "kl_z", "}", "\n", "\n", "return", "elbo", ",", "data", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.reconstruct": [[163, 170], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cvae_module.CVAEModule.encoder", "cvae_module.CVAEModule.decoder"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "self", ",", "X", ",", "cond_data", "=", "None", ")", ":", "\n", "        ", "z_mean", ",", "qz_x", "=", "self", ".", "encoder", "(", "X", ",", "cond_data", "=", "cond_data", ",", "return_mean", "=", "True", ")", "\n", "\n", "x_hat", ",", "_", "=", "self", ".", "decoder", "(", "z_mean", ",", "cond_data", "=", "cond_data", ",", "return_type", "=", "'mean'", ")", "\n", "\n", "return", "z_mean", ",", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.__init__": [[26, 89], ["pytorch_lightning.LightningModule.__init__", "multicvae.MCVAE.save_hyperparameters", "len", "torch.nn.ModuleList", "enumerate", "utils.metrics.time.Timer", "sklearn.preprocessing.FunctionTransformer", "isinstance", "multicvae.MCVAE.likelihoods_list.append", "models.multicvae.cvae_module.CVAEModule", "models.multicvae.cvae_module.CVAEModule.set_z_prior_distr", "multicvae.MCVAE.cvae_list.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.set_z_prior_distr"], ["def", "__init__", "(", "self", ",", "\n", "h_dim_list_dec", ",", "\n", "h_dim_list_enc", ",", "\n", "z_dim", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "act_name", "=", "Cte", ".", "RELU", ",", "\n", "likelihood_x", "=", "None", ",", "\n", "distr_z", "=", "'normal'", ",", "\n", "num_epochs_per_nodes", "=", "50", ",", "\n", "topological_node_dims", "=", "[", "]", ",", "# Lists of dimensions are ordered by topology", "\n", "topological_parents", "=", "[", "]", ",", "\n", "scaler", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "MCVAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "num_nodes", "=", "len", "(", "topological_node_dims", ")", "\n", "\n", "self", ".", "random_train_sampler", "=", "None", "\n", "\n", "# added", "\n", "if", "scaler", "is", "None", ":", "\n", "            ", "self", ".", "scaler", "=", "FunctionTransformer", "(", "func", "=", "lambda", "x", ":", "x", ",", "\n", "inverse_func", "=", "lambda", "x", ":", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "scaler", "\n", "\n", "", "self", ".", "num_epochs_per_nodes", "=", "num_epochs_per_nodes", "\n", "\n", "self", ".", "topological_node_dims", "=", "topological_node_dims", "\n", "self", ".", "topological_parents", "=", "topological_parents", "\n", "self", ".", "cvae_list", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "likelihoods_list", "=", "[", "]", "\n", "for", "idx", ",", "node_dims", "in", "enumerate", "(", "self", ".", "topological_node_dims", ")", ":", "\n", "            ", "if", "isinstance", "(", "likelihood_x", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "likelihood_x", "[", "idx", "]", ")", "==", "1", ",", "'Node with more than one likelihood not ipmlemented'", "\n", "lik_x", "=", "likelihood_x", "[", "idx", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "lik_x", "=", "likelihood_x", "\n", "\n", "", "self", ".", "likelihoods_list", ".", "append", "(", "lik_x", ")", "\n", "cvae", "=", "CVAEModule", "(", "\n", "x_dim", "=", "lik_x", ".", "domain_size", ",", "\n", "h_dim_list_dec", "=", "h_dim_list_dec", ",", "\n", "h_dim_list_enc", "=", "h_dim_list_enc", ",", "\n", "z_dim", "=", "z_dim", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "cond_dim", "=", "len", "(", "self", ".", "topological_parents", "[", "idx", "]", ")", ",", "\n", "act_name", "=", "act_name", ",", "\n", "likelihood_x", "=", "lik_x", ",", "\n", "distr_z", "=", "distr_z", "\n", ")", "\n", "cvae", ".", "set_z_prior_distr", "(", "self", ".", "device", ")", "\n", "self", ".", "cvae_list", ".", "append", "(", "cvae", ")", "\n", "\n", "", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n", "self", ".", "save_dir", "=", "None", "\n", "\n", "self", ".", "my_evaluator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.set_my_evaluator": [[90, 92], ["None"], "methods", ["None"], ["", "def", "set_my_evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "my_evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_x_graph": [[106, 111], ["getattr", "getattr.view"], "methods", ["None"], ["", "def", "get_x_graph", "(", "self", ",", "data", ",", "attr", ")", ":", "\n", "        ", "x", "=", "getattr", "(", "data", ",", "attr", ")", "\n", "if", "attr", "in", "[", "'x'", ",", "'x_i'", "]", ":", "\n", "            ", "x", "=", "x", "[", "data", ".", "mask", "]", "\n", "", "return", "x", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.monitor": [[97, 99], ["None"], "methods", ["None"], ["", "def", "monitor", "(", "self", ")", ":", "\n", "        ", "return", "'valid_iwae_100'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.monitor_mode": [[100, 102], ["None"], "methods", ["None"], ["", "def", "monitor_mode", "(", "self", ")", ":", "\n", "        ", "return", "'max'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.set_random_train_sampler": [[103, 105], ["None"], "methods", ["None"], ["", "def", "set_random_train_sampler", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "random_train_sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.samples_aggregated_posterior": [[112, 126], ["torch.no_grad", "multicvae.MCVAE.random_train_sampler", "multicvae.MCVAE.get_x_graph", "multicvae.MCVAE.cvae_list[].encoder", "multicvae.MCVAE.sample", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "samples_aggregated_posterior", "(", "self", ",", "num_samples", ",", "idx", ")", ":", "\n", "        ", "batch", "=", "self", ".", "random_train_sampler", "(", "num_samples", ")", "\n", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "\n", "x", "=", "X", "[", ":", ",", "self", ".", "topological_node_dims", "[", "idx", "]", "]", "# shape [1000, 1]", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "idx", "]", ")", "==", "0", ":", "# Root node", "\n", "            ", "pa", "=", "None", "\n", "", "else", ":", "\n", "            ", "pa", "=", "X", "[", ":", ",", "self", ".", "topological_parents", "[", "idx", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "q_z_x", "=", "self", ".", "cvae_list", "[", "idx", "]", ".", "encoder", "(", "x", ",", "cond_data", "=", "pa", ",", "return_mean", "=", "False", ")", "\n", "\n", "return", "q_z_x", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.set_optim_params": [[127, 130], ["None"], "methods", ["None"], ["", "def", "set_optim_params", "(", "self", ",", "optim_params", ",", "sched_params", ")", ":", "\n", "        ", "self", ".", "optim_params", "=", "optim_params", "\n", "self", ".", "sched_params", "=", "sched_params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.configure_optimizers": [[131, 145], ["enumerate", "optimizer_list.append", "isinstance", "utils.optimizers.get_optimizer", "multicvae.MCVAE.cvae_list[].parameters", "scheduler_list.append", "utils.optimizers.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "scheduler_list", "=", "[", "]", "\n", "optimizer_list", "=", "[", "]", "\n", "for", "idx", ",", "node_dims", "in", "enumerate", "(", "self", ".", "topological_node_dims", ")", ":", "\n", "\n", "            ", "optimizer", "=", "get_optimizer", "(", "self", ".", "optim_params", "[", "'name'", "]", ")", "(", "self", ".", "cvae_list", "[", "idx", "]", ".", "parameters", "(", ")", ",", "\n", "**", "self", ".", "optim_params", "[", "'params'", "]", ")", "\n", "optimizer_list", ".", "append", "(", "optimizer", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "sched_params", ",", "dict", ")", ":", "\n", "                ", "scheduler", "=", "get_scheduler", "(", "self", ".", "sched_params", "[", "'name'", "]", ")", "(", "optimizer", ",", "**", "self", ".", "sched_params", "[", "'params'", "]", ")", "\n", "scheduler_list", ".", "append", "(", "scheduler", ")", "\n", "", "idx", "+=", "1", "\n", "", "return", "optimizer_list", ",", "scheduler_list", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.is_training_node_i": [[146, 152], ["None"], "methods", ["None"], ["", "def", "is_training_node_i", "(", "self", ",", "node_id", ",", "current_epoch", ")", ":", "\n", "        ", "if", "(", "(", "current_epoch", ">=", "self", ".", "num_epochs_per_nodes", "*", "(", "node_id", ")", ")", "and", "(", "\n", "current_epoch", "<", "self", ".", "num_epochs_per_nodes", "*", "(", "node_id", "+", "1", ")", ")", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.forward": [[153, 155], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.training_step": [[156, 174], ["multicvae.MCVAE.get_x_graph", "range", "multicvae.MCVAE.is_training_node_i", "multicvae.MCVAE.log", "data.items", "len", "objective.item", "multicvae.MCVAE.log", "value.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.is_training_node_i"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "optimizer_idx", ")", ":", "\n", "        ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "# shape [1000, 3] # works because 1 Dim X", "\n", "# note, only learning cvae for non-root nodes", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "optimizer_idx", "==", "i", "and", "self", ".", "is_training_node_i", "(", "i", ",", "self", ".", "current_epoch", ")", ":", "# train node 0", "\n", "                ", "x", "=", "X", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                    ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                    ", "pa", "=", "X", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "objective", ",", "data", "=", "self", ".", "cvae_list", "[", "i", "]", "(", "x", ",", "estimator", "=", "'elbo'", ",", "cond_data", "=", "pa", ")", "\n", "self", ".", "log", "(", "f'train_objective_{optimizer_idx}'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "log", "(", "f'train_{key}_{i}'", ",", "value", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "return", "-", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_train_epoch_start": [[175, 177], ["multicvae.MCVAE.timer.tic"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic"], ["", "", "", "def", "on_train_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "tic", "(", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_train_epoch_end": [[178, 181], ["multicvae.MCVAE.timer.toc", "multicvae.MCVAE.logger.experiment.add_scalar"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc"], ["", "def", "on_train_epoch_end", "(", "self", ",", "outputs", ")", "->", "None", ":", "\n", "        ", "time", "=", "self", ".", "timer", ".", "toc", "(", "'train'", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "'train_time'", ",", "time", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.validation_step": [[182, 193], ["multicvae.MCVAE.get_objective_metrics_batch", "multicvae.MCVAE.items", "multicvae.MCVAE.log"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_objective_metrics_batch"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "K", "=", "100", "\n", "metrics", "=", "self", ".", "get_objective_metrics_batch", "(", "batch", ",", "K", "=", "K", ")", "\n", "\n", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "output", "[", "f'valid_{key}'", "]", "=", "value", "[", "0", "]", "\n", "self", ".", "log", "(", "f'valid_{key}'", ",", "value", "[", "0", "]", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "return", "output", "[", "f'valid_iwae_{K}'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_validation_epoch_start": [[194, 196], ["multicvae.MCVAE.timer.stop"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.stop"], ["", "def", "on_validation_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "stop", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_validation_epoch_end": [[197, 199], ["multicvae.MCVAE.timer.resume"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.resume"], ["", "def", "on_validation_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "resume", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_test_epoch_start": [[200, 204], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "x_test", "=", "[", "]", "\n", "self", ".", "x_hat", "=", "[", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.test_step": [[205, 213], ["multicvae.MCVAE.get_objective_metrics_batch", "multicvae.MCVAE.items", "multicvae.MCVAE.log"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_objective_metrics_batch"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "metrics", "=", "self", ".", "get_objective_metrics_batch", "(", "batch", ",", "K", "=", "20", ")", "\n", "\n", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "output", "[", "f'test_{key}'", "]", "=", "value", "\n", "\n", "", "self", ".", "log", "(", "output", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_test_epoch_end": [[214, 216], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_epoch_end": [[217, 229], ["multicvae.MCVAE.eval", "multicvae.MCVAE.train", "multicvae.MCVAE.my_evaluator.set_save_dir", "multicvae.MCVAE.my_evaluator.set_logger", "multicvae.MCVAE.my_evaluator.set_current_epoch", "multicvae.MCVAE.my_evaluator.complete_logs", "multicvae.MCVAE.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "# log sampled images", "\n", "\n", "if", "self", ".", "current_epoch", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "# IMPORTANT: Set back to train mode!", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_fit_end": [[230, 244], ["multicvae.MCVAE.my_evaluator.set_save_dir", "multicvae.MCVAE.my_evaluator.set_logger", "multicvae.MCVAE.my_evaluator.set_current_epoch", "multicvae.MCVAE.my_evaluator.complete_logs", "open", "multicvae.MCVAE.timer.toc", "json.dump", "os.path.join", "multicvae.MCVAE.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_fit_end", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'time.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toc", "=", "self", ".", "timer", ".", "toc", "(", "'train_total'", ")", "\n", "ouput", "=", "{", "'train_time_total'", ":", "toc", ",", "\n", "'train_epochs'", ":", "self", ".", "current_epoch", ",", "\n", "'train_time_avg_per_epoch'", ":", "toc", "/", "self", ".", "current_epoch", "}", "\n", "json", ".", "dump", "(", "ouput", ",", "f", ")", "\n", "\n", "", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.on_fit_start": [[245, 251], ["multicvae.MCVAE.eval", "multicvae.MCVAE.timer.tic", "utils.args_parser.mkdir", "range", "os.path.join", "multicvae.MCVAE.cvae_list[].set_z_prior_distr"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.set_z_prior_distr"], ["", "def", "on_fit_start", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "self", ".", "timer", ".", "tic", "(", "'train_total'", ")", "\n", "img_folder", "=", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'images'", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "self", ".", "cvae_list", "[", "i", "]", ".", "set_z_prior_distr", "(", "self", ".", "device", ")", "# Just to move the prior to GPU if needed", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_objective_metrics": [[252, 263], ["torch.no_grad", "enumerate", "multicvae.MCVAE.items", "iter", "multicvae.MCVAE.get_objective_metrics_batch", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_objective_metrics_batch", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_objective_metrics", "(", "self", ",", "data_loader", ",", "name", ",", "K", "=", "100", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iter", "(", "data_loader", ")", ")", ":", "\n", "            ", "metrics", "=", "self", ".", "get_objective_metrics_batch", "(", "batch", ",", "K", "=", "K", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "output", "[", "f'{name}_{key}'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_objective_metrics_batch": [[264, 297], ["torch.no_grad", "multicvae.MCVAE.get_x_graph", "range", "torch.mean", "metrics[].append", "torch.mean", "metrics[].append", "objective.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "multicvae.MCVAE.cvae_list[].compute_log_w", "models.IWAE", "iwae_10.mean().unsqueeze().unsqueeze", "torch.mean.squeeze().squeeze().item", "torch.mean.squeeze().squeeze().item", "len", "torch.cat", "torch.cat", "objective.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "iwae_10.mean().unsqueeze", "torch.mean.squeeze().squeeze", "torch.mean.squeeze().squeeze", "iwae_10.mean", "torch.mean.squeeze", "torch.mean.squeeze"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.compute_log_w", "home.repos.pwc.inspect_result.psanch21_VACA.models._density_estimators.IWAE", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_objective_metrics_batch", "(", "self", ",", "batch", ",", "K", "=", "100", ")", ":", "\n", "        ", "metrics", "=", "{", "'elbo'", ":", "[", "]", ",", "f'iwae_{K}'", ":", "[", "]", "}", "\n", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "x", "=", "X", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                ", "pa", "=", "X", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "objective", ",", "data", "=", "self", ".", "cvae_list", "[", "i", "]", "(", "x", ",", "cond_data", "=", "pa", ",", "estimator", "=", "'elbo'", ",", "beta", "=", "1", ")", "\n", "objective", "=", "objective", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "log_w", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "compute_log_w", "(", "x", ",", "cond_data", "=", "pa", ",", "K", "=", "K", ")", "\n", "iwae_10", ",", "_", "=", "estims", ".", "IWAE", "(", "log_w", ",", "trick", "=", "False", ")", "\n", "iwae_objective", "=", "iwae_10", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "Objective", "=", "objective", "\n", "IWAE10", "=", "iwae_objective", "\n", "", "else", ":", "\n", "                ", "Objective", "=", "torch", ".", "cat", "(", "(", "Objective", ",", "objective", ")", ",", "dim", "=", "-", "1", ")", "\n", "IWAE10", "=", "torch", ".", "cat", "(", "(", "IWAE10", ",", "iwae_objective", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# mean across all cvae", "\n", "", "", "av_objective", "=", "torch", ".", "mean", "(", "Objective", ")", "# mean of each row", "\n", "metrics", "[", "'elbo'", "]", ".", "append", "(", "av_objective", ".", "squeeze", "(", ")", ".", "squeeze", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "# mean across all cvae", "\n", "av_iwae_10", "=", "torch", ".", "mean", "(", "IWAE10", ")", "# mean of each row", "\n", "metrics", "[", "f'iwae_{K}'", "]", ".", "append", "(", "av_iwae_10", ".", "squeeze", "(", ")", ".", "squeeze", "(", ")", ".", "item", "(", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.evaluate": [[298, 307], ["torch.no_grad", "multicvae.MCVAE.my_evaluator.set_save_dir", "multicvae.MCVAE.my_evaluator.set_logger", "multicvae.MCVAE.my_evaluator.set_current_epoch", "multicvae.MCVAE.my_evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "dataloader", ",", "name", "=", "'test'", ",", "save_dir", "=", "None", ",", "plots", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "save_dir", "if", "save_dir", "is", "not", "None", "else", "self", ".", "logger", ".", "save_dir", ",", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "100000", ")", "\n", "\n", "output", "=", "self", ".", "my_evaluator", ".", "evaluate", "(", "dataloader", ",", "name", "=", "name", ",", "plots", "=", "plots", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_intervention_node_idx": [[308, 311], ["node_names_list.index", "list", "x_I.keys"], "methods", ["None"], ["", "def", "get_intervention_node_idx", "(", "self", ",", "x_I", ",", "node_names_list", ")", ":", "\n", "        ", "node_name", "=", "list", "(", "x_I", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "return", "node_names_list", ".", "index", "(", "node_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_interventional_distr": [[312, 407], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "iter", "multicvae.MCVAE.eval", "multicvae.MCVAE.get_intervention_node_idx", "enumerate", "x_gener_dict.items", "data_loader.dataset.clean_intervention", "multicvae.MCVAE.get_x_graph", "range", "data_loader.dataset.sample_intervention", "torch.tensor", "multicvae.MCVAE.scaler.inverse_transform", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "torch.cat", "torch.cat", "len", "multicvae.MCVAE.cvae_list[].decoder", "torch.cat", "multicvae.MCVAE.samples_aggregated_posterior().to", "multicvae.MCVAE.cvae_list[].z_prior_distr.sample().to", "torch.cat", "multicvae.MCVAE.samples_aggregated_posterior", "multicvae.MCVAE.cvae_list[].z_prior_distr.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_intervention_node_idx", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.samples_aggregated_posterior", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_interventional_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", ":", "Dict", "[", "str", ",", "float", "]", ",", "\n", "use_aggregated_posterior", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Get x generated distribution  w/o intervention or with diagonal adjacency.\n        Args:\n            data_loader:\n            x_I:\n                If x_I is None compute the distribution of the original SCM, if x_I is a dict\n                then compute the interventional distribution. E.g. x_I = {'x1': 0} computes the\n                interventional distribution with do(x1=0)\n            use_aggregated_posterior:\n            normalize:\n\n        Returns:\n            x_gener_dict_out: dict of torch.Tensor\n                Generated distribution\n            x_real_dict_out: dict of torch.Tensor\n                distribution of the dataset (real data)\n        \"\"\"", "\n", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ")", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'parents'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'parents'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "\n", "inter_idx", "=", "self", ".", "get_intervention_node_idx", "(", "x_I", ",", "data_loader", ".", "dataset", ".", "nodes_list", ")", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X_i", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "X_int_pa", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "x_i", "=", "X_i", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                    ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                    ", "pa", "=", "X_int_pa", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "if", "i", "==", "inter_idx", ":", "# Intervened node", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "X_int_pa", "=", "x_i", "\n", "", "else", ":", "\n", "                        ", "X_int_pa", "=", "torch", ".", "cat", "(", "(", "X_int_pa", ",", "x_i", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "if", "use_aggregated_posterior", ":", "\n", "                        ", "z", "=", "self", ".", "samples_aggregated_posterior", "(", "num_samples", "=", "batch", ".", "num_graphs", ",", "idx", "=", "i", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                        ", "z", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "z_prior_distr", ".", "sample", "(", "[", "batch", ".", "num_graphs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "# dim [1000, 4]", "\n", "\n", "", "x_rec", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "decoder", "(", "z", ",", "cond_data", "=", "pa", ",", "return_type", "=", "'sample'", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "X_int_pa", "=", "x_rec", "\n", "", "else", ":", "\n", "                        ", "X_int_pa", "=", "torch", ".", "cat", "(", "(", "X_int_pa", ",", "x_rec", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Not normalized", "\n", "", "", "", "x_inter", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "sample_intervention", "(", "x_I", "=", "x_I", ",", "\n", "n_samples", "=", "batch", ".", "num_graphs", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "# normalized", "\n", "# x_inter = torch.tensor(self.scaler.transform(x_inter))", "\n", "x_inter", "=", "torch", ".", "tensor", "(", "x_inter", ")", "\n", "X_int_pa", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "X_int_pa", ")", "\n", "x_gener_dict", "[", "'parents'", "]", ".", "append", "(", "X_int_pa", "[", ":", ",", "set_nodes", "[", "'parents'", "]", "]", ")", "\n", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "X_int_pa", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "X_int_pa", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "X_int_pa", ")", "\n", "\n", "x_real_dict", "[", "'parents'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'parents'", "]", "]", ")", "\n", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_inter", ")", "\n", "\n", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "x_gener_dict_out", ",", "x_real_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_observational_distr": [[408, 473], ["torch.no_grad", "iter", "multicvae.MCVAE.eval", "enumerate", "data_loader.dataset.clean_intervention", "range", "z_list.append", "torch.cat", "torch.cat", "torch.cat", "multicvae.MCVAE.cvae_list[].decoder", "x_real.append", "x.append", "x_real.append", "x.append", "torch.cat.view", "multicvae.MCVAE.samples_aggregated_posterior().to", "multicvae.MCVAE.cvae_list[].z_prior_distr.sample().to", "len", "torch.cat", "torch.cat", "multicvae.MCVAE.get_x_graph", "torch.cat.view", "multicvae.MCVAE.scaler.inverse_transform", "multicvae.MCVAE.scaler.inverse_transform", "multicvae.MCVAE.get_x_graph", "torch.cat.view", "multicvae.MCVAE.samples_aggregated_posterior", "multicvae.MCVAE.cvae_list[].z_prior_distr.sample"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.samples_aggregated_posterior", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_observational_distr", "(", "self", ",", "data_loader", ",", "\n", "use_links", "=", "True", ",", "\n", "use_aggregated_posterior", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Get x generated (observational) distribution  w/o intervention or with diagonal adjacency.\n        Args:\n            data_loader:\n            use_links:\n                If false, then uses an diagonal adjacency matrix to compute the distribution\n            use_aggregated_posterior:\n            normalize:\n\n        Returns:\n            z_list: torch.Tensor\n                Latent code of the generated distribution\n            x: torch.Tensor\n                Generated distribution\n            x_real: torch.Tensor\n                distribution of the dataset (real data)\n        \"\"\"", "\n", "# if use_links is False:", "\n", "#     data_loader.dataset.diagonal_SCM()", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", ",", "z_list", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "\n", "# sample", "\n", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "use_aggregated_posterior", ":", "\n", "                    ", "z", "=", "self", ".", "samples_aggregated_posterior", "(", "num_samples", "=", "batch", ".", "num_graphs", ",", "idx", "=", "i", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "z", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "z_prior_distr", ".", "sample", "(", "[", "batch", ".", "num_graphs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "# dim [1000, 4]", "\n", "\n", "", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                    ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                    ", "pa", "=", "X_hat_all", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "x_hat", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "decoder", "(", "z", ",", "cond_data", "=", "pa", ",", "return_type", "=", "'sample'", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "X_hat_all", "=", "x_hat", "\n", "Z_all", "=", "z", "\n", "", "else", ":", "\n", "                    ", "X_hat_all", "=", "torch", ".", "cat", "(", "(", "X_hat_all", ",", "x_hat", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_all", "=", "torch", ".", "cat", "(", "(", "Z_all", ",", "z", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "if", "normalize", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "x", ".", "append", "(", "X_hat_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "x", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "X_hat_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "z_list", ".", "append", "(", "Z_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "z_list", ")", ",", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.compute_counterfactual": [[477, 514], ["torch.no_grad", "batch.x_i.view", "range", "multicvae.MCVAE.cvae_list[].encoder", "multicvae.MCVAE.cvae_list[].decoder", "multicvae.MCVAE.get_int_nodes", "torch.cat.view", "torch.cat.reshape", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_counterfactual", "(", "self", ",", "batch", ",", "x_I", ")", ":", "\n", "\n", "        ", "X_i", "=", "batch", ".", "x_i", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "x_i", "=", "X_i", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                ", "pa", "=", "X_cf_pa", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "z_cf", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "encoder", "(", "x_i", ",", "cond_data", "=", "pa", ",", "return_mean", "=", "True", ")", "\n", "x_CF", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "decoder", "(", "z_cf", ",", "cond_data", "=", "pa", ",", "return_type", "=", "'sample'", ")", "\n", "\n", "int_nodes", "=", "self", ".", "get_int_nodes", "(", "x_I", ")", "\n", "if", "i", "in", "int_nodes", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "X_cf_pa", "=", "x_i", "\n", "X_cf_all", "=", "x_CF", "\n", "Z_cf", "=", "z_cf", "\n", "", "else", ":", "\n", "                    ", "X_cf_pa", "=", "torch", ".", "cat", "(", "(", "X_cf_pa", ",", "x_i", ")", ",", "dim", "=", "-", "1", ")", "\n", "X_cf_all", "=", "torch", ".", "cat", "(", "(", "X_cf_all", ",", "x_CF", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_cf", "=", "torch", ".", "cat", "(", "(", "Z_cf", ",", "z_cf", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "X_cf_pa", "=", "x_CF", "\n", "X_cf_all", "=", "x_CF", "\n", "Z_cf", "=", "z_cf", "\n", "", "else", ":", "\n", "                    ", "X_cf_pa", "=", "torch", ".", "cat", "(", "(", "X_cf_pa", ",", "x_CF", ")", ",", "dim", "=", "-", "1", ")", "\n", "X_cf_all", "=", "torch", ".", "cat", "(", "(", "X_cf_all", ",", "x_CF", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_cf", "=", "torch", ".", "cat", "(", "(", "Z_cf", ",", "z_cf", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "", "return", "X_cf_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "None", ",", "Z_cf", ".", "reshape", "(", "\n", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_counterfactual_distr": [[515, 605], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "iter", "multicvae.MCVAE.eval", "multicvae.MCVAE.get_intervention_node_idx", "enumerate", "x_gener_dict.items", "x_factual_dict.items", "data_loader.dataset.clean_intervention", "batch.x_i.view", "batch.x.view", "range", "data_loader.dataset.get_counterfactual", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "torch.cat", "torch.cat", "torch.cat", "multicvae.MCVAE.scaler.transform", "torch.tensor", "multicvae.MCVAE.scaler.inverse_transform", "x_factual_dict[].append", "x_factual_dict[].append", "len", "multicvae.MCVAE.cvae_list[].encoder", "multicvae.MCVAE.cvae_list[].decoder", "multicvae.MCVAE.scaler.inverse_transform", "batch.u.view", "multicvae.MCVAE.get_x_graph", "multicvae.MCVAE.scaler.inverse_transform", "torch.cat", "torch.cat", "multicvae.MCVAE.get_x_graph", "multicvae.MCVAE.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_intervention_node_idx", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_counterfactual", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.encoder", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.decoder", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_counterfactual_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", "=", "None", ",", "\n", "is_noise", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ",", "is_noise", "=", "is_noise", ")", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "\n", "x_factual_dict", "=", "{", "'all'", ":", "[", "]", "}", "\n", "inter_idx", "=", "self", ".", "get_intervention_node_idx", "(", "x_I", ",", "data_loader", ".", "dataset", ".", "nodes_list", ")", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X_i", "=", "batch", ".", "x_i", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "X", "=", "batch", ".", "x", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "X_cf_pa", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "x_i", "=", "X_i", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                    ", "pa_cf", "=", "None", "\n", "pa_f", "=", "None", "\n", "", "else", ":", "\n", "                    ", "pa_cf", "=", "X_cf_pa", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "pa_f", "=", "X", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "\n", "\n", "", "if", "i", "==", "inter_idx", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "X_cf_pa", "=", "x_i", "\n", "", "else", ":", "\n", "                        ", "X_cf_pa", "=", "torch", ".", "cat", "(", "(", "X_cf_pa", ",", "x_i", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "z_cf", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "encoder", "(", "x_i", ",", "cond_data", "=", "pa_f", ",", "return_mean", "=", "True", ")", "\n", "x_CF", ",", "_", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "decoder", "(", "z_cf", ",", "cond_data", "=", "pa_cf", ",", "return_type", "=", "'sample'", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "X_cf_pa", "=", "x_CF", "\n", "", "else", ":", "\n", "                        ", "X_cf_pa", "=", "torch", ".", "cat", "(", "(", "X_cf_pa", ",", "x_CF", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Not normalized", "\n", "", "", "", "x_cf_real", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "get_counterfactual", "(", "\n", "x_factual", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ",", "\n", "u_factual", "=", "batch", ".", "u", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "\n", "x_I", "=", "x_I", ",", "\n", "is_noise", "=", "is_noise", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "\n", "# x_cf_real = self.scaler.transform(x_cf_real)", "\n", "if", "normalize", ":", "\n", "                ", "x_cf_real", "=", "self", ".", "scaler", ".", "transform", "(", "x_cf_real", ")", "\n", "", "else", ":", "\n", "                ", "x_cf_real", "=", "torch", ".", "tensor", "(", "x_cf_real", ")", "\n", "X_cf_pa", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "X_cf_pa", ")", "\n", "\n", "", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "X_cf_pa", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "X_cf_pa", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "X_cf_pa", ")", "\n", "\n", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_cf_real", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "\n", "", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "x_factual_dict_out", "=", "{", "}", "\n", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "", "for", "key", ",", "values", "in", "x_factual_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_factual_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "x_gener_dict_out", ",", "x_real_dict_out", ",", "x_factual_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_x": [[606, 614], ["torch.no_grad", "iter", "multicvae.MCVAE.eval", "enumerate", "torch.cat", "x.append", "batch.x.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_x", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "x", ".", "append", "(", "batch", ".", "x", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_reconstruction_distr": [[615, 667], ["torch.no_grad", "iter", "multicvae.MCVAE.eval", "enumerate", "multicvae.MCVAE.get_x_graph", "range", "z_list.append", "torch.cat", "torch.cat", "torch.cat", "multicvae.MCVAE.cvae_list[].reconstruct", "x_rec_list.append", "x_real.append", "x_rec_list.append", "x_real.append", "torch.cat.reshape", "len", "torch.cat", "torch.cat", "torch.cat.view", "multicvae.MCVAE.scaler.inverse_transform", "multicvae.MCVAE.scaler.inverse_transform", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.cvae_module.CVAEModule.reconstruct", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_reconstruction_distr", "(", "self", ",", "data_loader", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Reconstruct all the feates of all the  graphs in data loader, i.e.,\n        Z \\sim q(Z|X, A) and X_hat p(X | Z, A)\n        Args:\n            data_loader:\n            normalize:\n\n        Returns:\n            z_list: torch.Tensor\n                Latent code of the reconstructed distribution, i.e. q(z|x)\n            x: torch.Tensor\n                reconstructed samples\n            x_real: torch.Tensor\n                original  samples (real data)\n        \"\"\"", "\n", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x_rec_list", ",", "z_list", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "x", "=", "X", "[", ":", ",", "self", ".", "topological_node_dims", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "if", "len", "(", "self", ".", "topological_parents", "[", "i", "]", ")", "==", "0", ":", "# Root node", "\n", "                    ", "pa", "=", "None", "\n", "", "else", ":", "\n", "                    ", "pa", "=", "X", "[", ":", ",", "self", ".", "topological_parents", "[", "i", "]", "]", "# shape [1000, 1]", "\n", "\n", "", "z_hat", ",", "x_rec", "=", "self", ".", "cvae_list", "[", "i", "]", ".", "reconstruct", "(", "x", ",", "cond_data", "=", "pa", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "X_rec_all", "=", "x_rec", "\n", "Z_all", "=", "z_hat", "\n", "", "else", ":", "\n", "                    ", "X_rec_all", "=", "torch", ".", "cat", "(", "(", "X_rec_all", ",", "x_rec", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_all", "=", "torch", ".", "cat", "(", "(", "Z_all", ",", "z_hat", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "if", "normalize", ":", "\n", "                ", "x_rec_list", ".", "append", "(", "X_rec_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "x_real", ".", "append", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "x_rec_list", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "X_rec_all", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", ")", "\n", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "X", ")", ")", "\n", "\n", "", "z_list", ".", "append", "(", "Z_all", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "z_list", ")", ",", "torch", ".", "cat", "(", "x_rec_list", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.multicvae.multicvae.MCVAE.get_obs_distribution": [[668, 677], ["torch.no_grad", "iter", "multicvae.MCVAE.eval", "enumerate", "torch.cat", "x.append", "batch.x.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_obs_distribution", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "x", ".", "append", "(", "batch", ".", "x", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.__init__": [[21, 89], ["pytorch_lightning.LightningModule.__init__", "carefl.CAREFL.save_hyperparameters", "len", "numpy.array", "nflib.NormalizingFlowModel().to", "utils.metrics.time.Timer", "torch.distributions.Laplace", "torch.distributions.TransformedDistribution", "carefl.CAREFL.__init__.ar_flow"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "node_per_dimension_list", ",", "\n", "distr_z", "=", "'laplace'", ",", "\n", "flow_net_class", "=", "'mlp'", ",", "\n", "flow_architecture", "=", "'spline'", ",", "\n", "n_layers", "=", "1", ",", "\n", "n_hidden", "=", "1", ",", "\n", "parity", "=", "False", ",", "\n", "scaler", "=", "None", ",", "\n", "init", "=", "None", ")", ":", "\n", "        ", "super", "(", "CAREFL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "total_dim", "=", "len", "(", "node_per_dimension_list", ")", "\n", "\n", "self", ".", "node_per_dimension", "=", "np", ".", "array", "(", "node_per_dimension_list", ")", "\n", "\n", "# prior", "\n", "if", "distr_z", "==", "'laplace'", ":", "\n", "            ", "prior", "=", "Laplace", "(", "torch", ".", "zeros", "(", "self", ".", "total_dim", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "ones", "(", "self", ".", "total_dim", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "prior", "=", "TransformedDistribution", "(", "\n", "Uniform", "(", "torch", ".", "zeros", "(", "self", ".", "total_dim", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "ones", "(", "self", ".", "total_dim", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "\n", "SigmoidTransform", "(", ")", ".", "inv", ")", "\n", "# net type for flow parameters", "\n", "", "if", "flow_net_class", "==", "'mlp'", ":", "\n", "            ", "net_class", "=", "MLP1layer", "\n", "", "elif", "flow_net_class", "==", "'mlp4'", ":", "\n", "            ", "net_class", "=", "MLP4", "\n", "", "elif", "flow_net_class", "==", "'armlp'", ":", "\n", "            ", "net_class", "=", "ARMLP", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'net_class {} not understood.'", ".", "format", "(", "self", ".", "config", ".", "flow", ".", "net_class", ")", ")", "\n", "\n", "# flow type", "\n", "", "def", "ar_flow", "(", "hidden_dim", ")", ":", "\n", "            ", "if", "flow_architecture", "in", "[", "'cl'", ",", "'realnvp'", "]", ":", "\n", "                ", "return", "AffineCL", "(", "dim", "=", "self", ".", "total_dim", ",", "nh", "=", "hidden_dim", ",", "scale_base", "=", "self", ".", "config", ".", "flow", ".", "scale_base", ",", "\n", "shift_base", "=", "self", ".", "config", ".", "flow", ".", "shift_base", ",", "net_class", "=", "net_class", ",", "parity", "=", "parity", ",", "\n", "scale", "=", "self", ".", "config", ".", "flow", ".", "scale", ")", "\n", "", "elif", "flow_architecture", "==", "'maf'", ":", "\n", "                ", "return", "MAF", "(", "dim", "=", "self", ".", "total_dim", ",", "nh", "=", "hidden_dim", ",", "net_class", "=", "net_class", ",", "parity", "=", "parity", ")", "\n", "", "elif", "flow_architecture", "==", "'spline'", ":", "\n", "                ", "return", "NSF_AR", "(", "dim", "=", "self", ".", "total_dim", ",", "hidden_dim", "=", "hidden_dim", ",", "base_network", "=", "net_class", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Architecture {} not understood.'", ".", "format", "(", "self", ".", "config", ".", "flow", ".", "architecture", ")", ")", "\n", "\n", "", "", "flow_list", "=", "[", "ar_flow", "(", "n_hidden", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", "\n", "\n", "self", ".", "flow_model", "=", "NormalizingFlowModel", "(", "prior", ",", "flow_list", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "scaler", "is", "None", ":", "\n", "            ", "self", ".", "scaler", "=", "FunctionTransformer", "(", "func", "=", "lambda", "x", ":", "x", ",", "\n", "inverse_func", "=", "lambda", "x", ":", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "scaler", "\n", "\n", "", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n", "if", "init", "==", "'ortho'", ":", "\n", "            ", "self", ".", "apply", "(", "init", ".", "init_weights_orthogonal", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "save_dir", "=", "None", "\n", "\n", "self", ".", "my_evaluator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph": [[90, 95], ["getattr", "getattr.view"], "methods", ["None"], ["", "def", "get_x_graph", "(", "self", ",", "data", ",", "attr", ")", ":", "\n", "        ", "x", "=", "getattr", "(", "data", ",", "attr", ")", "\n", "if", "attr", "in", "[", "'x'", ",", "'x_i'", "]", ":", "\n", "            ", "x", "=", "x", "[", "data", ".", "mask", "]", "\n", "", "return", "x", ".", "view", "(", "data", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.set_my_evaluator": [[96, 98], ["None"], "methods", ["None"], ["", "def", "set_my_evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "my_evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.monitor": [[99, 101], ["None"], "methods", ["None"], ["", "def", "monitor", "(", "self", ")", ":", "\n", "        ", "return", "'valid_objective'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.monitor_mode": [[102, 104], ["None"], "methods", ["None"], ["", "def", "monitor_mode", "(", "self", ")", ":", "\n", "        ", "return", "'max'", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.set_optim_params": [[105, 108], ["None"], "methods", ["None"], ["", "def", "set_optim_params", "(", "self", ",", "optim_params", ",", "sched_params", ")", ":", "\n", "        ", "self", ".", "optim_params", "=", "optim_params", "\n", "self", ".", "sched_params", "=", "sched_params", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.configure_optimizers": [[109, 116], ["isinstance", "utils.optimizers.get_optimizer", "carefl.CAREFL.parameters", "utils.optimizers.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_optimizer", "home.repos.pwc.inspect_result.psanch21_VACA.utils.optimizers.get_scheduler"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "get_optimizer", "(", "self", ".", "optim_params", "[", "'name'", "]", ")", "(", "self", ".", "parameters", "(", ")", ",", "**", "self", ".", "optim_params", "[", "'params'", "]", ")", "\n", "if", "isinstance", "(", "self", ".", "sched_params", ",", "dict", ")", ":", "\n", "            ", "sched", "=", "get_scheduler", "(", "self", ".", "sched_params", "[", "'name'", "]", ")", "(", "optim", ",", "**", "self", ".", "sched_params", "[", "'params'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sched", "=", "[", "]", "\n", "", "return", "[", "optim", "]", ",", "sched", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.forward": [[117, 119], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.training_step": [[120, 129], ["carefl.CAREFL.get_x_graph", "carefl.CAREFL.flow_model", "torch.mean", "carefl.CAREFL.log", "torch.mean.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "\n", "# compute loss", "\n", "_", ",", "prior_logprob", ",", "log_det", "=", "self", ".", "flow_model", "(", "X", ")", "\n", "objective", "=", "torch", ".", "mean", "(", "prior_logprob", "+", "log_det", ")", "\n", "\n", "self", ".", "log", "(", "'train_objective'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "return", "-", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_train_epoch_start": [[130, 132], ["carefl.CAREFL.timer.tic"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic"], ["", "def", "on_train_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "tic", "(", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_train_epoch_end": [[133, 136], ["carefl.CAREFL.timer.toc", "carefl.CAREFL.logger.experiment.add_scalar"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc"], ["", "def", "on_train_epoch_end", "(", "self", ",", "outputs", ")", "->", "None", ":", "\n", "        ", "time", "=", "self", ".", "timer", ".", "toc", "(", "'train'", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "'train_time'", ",", "time", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.validation_step": [[137, 147], ["carefl.CAREFL.get_x_graph", "carefl.CAREFL.flow_model", "torch.mean", "carefl.CAREFL.log", "torch.mean.item", "torch.mean.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "# shape [1000, 3] # works because 1 Dim X", "\n", "# compute loss", "\n", "\n", "_", ",", "prior_logprob", ",", "log_det", "=", "self", ".", "flow_model", "(", "X", ")", "\n", "objective", "=", "torch", ".", "mean", "(", "prior_logprob", "+", "log_det", ")", "\n", "\n", "self", ".", "log", "(", "'valid_objective'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "return", "{", "f'valid_objective'", ":", "objective", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_validation_epoch_start": [[148, 150], ["carefl.CAREFL.timer.stop"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.stop"], ["", "def", "on_validation_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "stop", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_validation_epoch_end": [[151, 153], ["carefl.CAREFL.timer.resume"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.resume"], ["", "def", "on_validation_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "timer", ".", "resume", "(", "'train_total'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_test_epoch_start": [[154, 158], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "x_test", "=", "[", "]", "\n", "self", ".", "x_hat", "=", "[", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.test_step": [[159, 166], ["carefl.CAREFL.get_x_graph", "carefl.CAREFL.flow_model", "torch.mean", "carefl.CAREFL.log", "torch.mean.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "# shape [1000, 3] # works because 1 Dim X", "\n", "# compute loss", "\n", "_", ",", "prior_logprob", ",", "log_det", "=", "self", ".", "flow_model", "(", "X", ")", "\n", "objective", "=", "torch", ".", "mean", "(", "prior_logprob", "+", "log_det", ")", "\n", "\n", "self", ".", "log", "(", "'test_objective'", ",", "objective", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_test_epoch_end": [[167, 169], ["None"], "methods", ["None"], ["", "def", "on_test_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_epoch_end": [[170, 182], ["carefl.CAREFL.eval", "carefl.CAREFL.train", "carefl.CAREFL.my_evaluator.set_save_dir", "carefl.CAREFL.my_evaluator.set_logger", "carefl.CAREFL.my_evaluator.set_current_epoch", "carefl.CAREFL.my_evaluator.complete_logs", "carefl.CAREFL.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "# log sampled images", "\n", "\n", "if", "self", ".", "current_epoch", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "# IMPORTANT: Set back to train mode!", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_fit_end": [[183, 197], ["carefl.CAREFL.my_evaluator.set_save_dir", "carefl.CAREFL.my_evaluator.set_logger", "carefl.CAREFL.my_evaluator.set_current_epoch", "carefl.CAREFL.my_evaluator.complete_logs", "open", "carefl.CAREFL.timer.toc", "json.dump", "os.path.join", "carefl.CAREFL.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.complete_logs", "home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.toc", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.test_dataloader"], ["", "def", "on_fit_end", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'time.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toc", "=", "self", ".", "timer", ".", "toc", "(", "'train_total'", ")", "\n", "ouput", "=", "{", "'train_time_total'", ":", "toc", ",", "\n", "'train_epochs'", ":", "self", ".", "current_epoch", ",", "\n", "'train_time_avg_per_epoch'", ":", "toc", "/", "self", ".", "current_epoch", "}", "\n", "json", ".", "dump", "(", "ouput", ",", "f", ")", "\n", "\n", "", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "self", ".", "logger", ".", "save_dir", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "self", ".", "current_epoch", ")", "\n", "self", ".", "my_evaluator", ".", "complete_logs", "(", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", ",", "name", "=", "'test'", ",", "plots", "=", "False", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.on_fit_start": [[198, 203], ["carefl.CAREFL.eval", "carefl.CAREFL.timer.tic", "utils.args_parser.mkdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.metrics.time.Timer.tic", "home.repos.pwc.inspect_result.psanch21_VACA.utils.args_parser.mkdir"], ["", "def", "on_fit_start", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "self", ".", "timer", ".", "tic", "(", "'train_total'", ")", "\n", "\n", "img_folder", "=", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "save_dir", ",", "'images'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow": [[204, 207], ["[].detach", "carefl.CAREFL.flow_model.forward", "data.to"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward"], ["", "def", "_forward_flow", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "return", "self", ".", "flow_model", ".", "forward", "(", "data", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", "[", "-", "1", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow": [[208, 211], ["[].detach", "carefl.CAREFL.flow_model.backward", "latent.to"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.backward"], ["", "def", "_backward_flow", "(", "self", ",", "latent", ")", ":", "\n", "\n", "        ", "return", "self", ".", "flow_model", ".", "backward", "(", "latent", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", "[", "-", "1", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.evaluate": [[212, 220], ["torch.no_grad", "carefl.CAREFL.my_evaluator.set_save_dir", "carefl.CAREFL.my_evaluator.set_logger", "carefl.CAREFL.my_evaluator.set_current_epoch", "carefl.CAREFL.my_evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_save_dir", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_logger", "home.repos.pwc.inspect_result.psanch21_VACA.models._evaluator.MyEvaluator.set_current_epoch", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "dataloader", ",", "name", "=", "'test'", ",", "save_dir", "=", "None", ",", "plots", "=", "False", ")", ":", "\n", "        ", "self", ".", "my_evaluator", ".", "set_save_dir", "(", "save_dir", "if", "save_dir", "is", "not", "None", "else", "self", ".", "logger", ".", "save_dir", ",", ")", "\n", "self", ".", "my_evaluator", ".", "set_logger", "(", "self", ".", "logger", ")", "\n", "self", ".", "my_evaluator", ".", "set_current_epoch", "(", "100000", ")", "\n", "\n", "output", "=", "self", ".", "my_evaluator", ".", "evaluate", "(", "dataloader", ",", "name", "=", "name", ",", "plots", "=", "plots", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_observational_distr": [[221, 264], ["torch.no_grad", "iter", "carefl.CAREFL.eval", "enumerate", "data_loader.dataset.clean_intervention", "carefl.CAREFL.flow_model.prior.sample", "carefl.CAREFL._backward_flow", "z_list.append", "torch.cat", "torch.cat", "torch.cat", "x_real.append", "x.append", "x_real.append", "x.append", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.scaler.inverse_transform", "carefl.CAREFL.scaler.inverse_transform", "carefl.CAREFL.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_observational_distr", "(", "self", ",", "data_loader", ",", "\n", "use_links", "=", "True", ",", "\n", "use_aggregated_posterior", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "'''\n        Get x generated distribution  w/o intervention or with diagonal adjacency.\n        Parameters\n        ----------\n        use_links : bool\n            If false, then uses an diagonal adjacency matrix to compute the distribution\n\n        Returns\n        -------\n        z_list: torch.Tensor\n            Latent code of the generated distribution\n        x: torch.Tensor\n            Generated distribution\n        x_real: torch.Tensor\n            distribution of the dataset (real data)\n        '''", "\n", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", ",", "z_list", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "z", "=", "self", ".", "flow_model", ".", "prior", ".", "sample", "(", "(", "batch", ".", "num_graphs", ",", ")", ")", "\n", "x_hat", "=", "self", ".", "_backward_flow", "(", "z", ")", "\n", "# x_real.append(self.scaler.inverse_transform(batch.x.view(batch.num_graphs, -1)))", "\n", "if", "normalize", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "x", ".", "append", "(", "x_hat", ")", "\n", "", "else", ":", "\n", "                ", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "x", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ")", ")", "\n", "\n", "", "z_list", ".", "append", "(", "z", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "z_list", ")", ",", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_objective_metrics": [[265, 280], ["torch.no_grad", "enumerate", "metrics.items", "iter", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.flow_model", "torch.mean", "metrics[].append", "numpy.mean", "torch.mean.item"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_objective_metrics", "(", "self", ",", "data_loader", ",", "name", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "metrics", "=", "{", "'log_px'", ":", "[", "]", "}", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iter", "(", "data_loader", ")", ")", ":", "\n", "            ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "# shape [1000, 3] # works because 1 Dim X", "\n", "_", ",", "prior_logprob", ",", "log_det", "=", "self", ".", "flow_model", "(", "X", ")", "\n", "objective", "=", "torch", ".", "mean", "(", "prior_logprob", "+", "log_det", ")", "\n", "metrics", "[", "'log_px'", "]", ".", "append", "(", "objective", ".", "item", "(", ")", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "output", "[", "f'{name}_{key}'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_interventional_distr": [[281, 364], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "data_loader.dataset.x_I.items", "iter", "carefl.CAREFL.eval", "enumerate", "x_gener_dict.items", "data_loader.dataset.clean_intervention", "len", "len", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.get_x_graph", "torch.zeros", "carefl.CAREFL.flow_model.prior.sample", "torch.zeros", "carefl.CAREFL._backward_flow", "data_loader.dataset.sample_intervention", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "torch.cat", "torch.cat", "numpy.where", "carefl.CAREFL._forward_flow", "carefl.CAREFL.scaler.inverse_transform", "carefl.CAREFL.scaler.transform", "torch.tensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_interventional_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", ",", "\n", "use_aggregated_posterior", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "'''\n        Get x generated distribution  w/o intervention or with diagonal adjacency.\n        Parameters\n        ----------\n        x_I : dict\n             If x_I is None compute the distribution of the original SCM, if x_I is a dict\n             then compute the interventional distribution. E.g. x_I = {'x1': 0} computes the\n             interventional distribution with do(x1=0)\n        Returns\n        -------\n        x_gener_dict_out: dict of torch.Tensor\n            Generated distribution\n        x_real_dict_out: dict of torch.Tensor\n            distribution of the dataset (real data)\n        '''", "\n", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "assert", "len", "(", "x_I", ")", "==", "1", "\n", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ")", "\n", "dims_int", "=", "None", "\n", "assert", "len", "(", "data_loader", ".", "dataset", ".", "x_I", ")", "==", "1", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "dataset", ".", "x_I", ".", "items", "(", ")", ":", "\n", "            ", "dims_int", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "node_per_dimension", ")", "==", "key", ")", "[", "0", "]", "\n", "", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "X_i", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x_i'", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "x_int", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "total_dim", ")", ")", "\n", "x_int", "[", "0", ",", "dims_int", "]", "=", "X_i", "[", "0", ",", "dims_int", "]", "# Get the intervened normalized value", "\n", "\n", "z_int", "=", "self", ".", "_forward_flow", "(", "x_int", ")", "[", "0", ",", "dims_int", "]", "\n", "# sample from prior and ensure z_intervention_index = z_int", "\n", "z", "=", "self", ".", "flow_model", ".", "prior", ".", "sample", "(", "(", "n_samples", ",", ")", ")", "\n", "z_est", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "total_dim", ")", ")", "\n", "z", "[", ":", ",", "dims_int", "]", "=", "z_est", "[", ":", ",", "dims_int", "]", "=", "z_int", "\n", "\n", "# propagate the latent sample through flow", "\n", "x_hat", "=", "self", ".", "_backward_flow", "(", "z", ")", "\n", "\n", "if", "not", "normalize", ":", "\n", "                ", "x_hat", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ")", "\n", "\n", "# Not normalized", "\n", "", "x_inter", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "sample_intervention", "(", "x_I", "=", "x_I", ",", "\n", "n_samples", "=", "batch", ".", "num_graphs", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "if", "normalize", ":", "\n", "                ", "x_inter", "=", "self", ".", "scaler", ".", "transform", "(", "x_inter", ")", "\n", "", "else", ":", "\n", "                ", "x_inter", "=", "torch", ".", "tensor", "(", "x_inter", ")", "\n", "\n", "", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "x_hat", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "x_hat", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "x_hat", ")", "\n", "\n", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_inter", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_inter", ")", "\n", "\n", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "x_gener_dict_out", ",", "x_real_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.compute_counterfactual": [[365, 381], ["torch.no_grad", "x_I.items", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.get_x_graph", "carefl.CAREFL._forward_flow", "carefl.CAREFL._backward_flow", "carefl.CAREFL._forward_flow", "carefl.CAREFL.view", "carefl.CAREFL.reshape", "z_cf_val.reshape"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_counterfactual", "(", "self", ",", "batch", ",", "x_I", ",", "z_I", ")", ":", "\n", "\n", "        ", "for", "key", ",", "value", "in", "x_I", ".", "items", "(", ")", ":", "\n", "            ", "x_id", "=", "key", "\n", "", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "X_i", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x_i'", ")", "\n", "# abduction:", "\n", "z_obs", "=", "self", ".", "_forward_flow", "(", "X", ")", "\n", "z_cf_val", "=", "self", ".", "_forward_flow", "(", "X_i", ")", "[", ":", ",", "x_id", "]", "\n", "z_obs", "[", ":", ",", "x_id", "]", "=", "z_cf_val", "\n", "# prediction (pass through the flow):", "\n", "x_CF", "=", "self", ".", "_backward_flow", "(", "z_obs", ")", "\n", "\n", "return", "x_CF", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "z_obs", ".", "reshape", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "z_cf_val", ".", "reshape", "(", "\n", "batch", ".", "num_graphs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_counterfactual_distr": [[382, 457], ["torch.no_grad", "isinstance", "data_loader.dataset.set_intervention", "data_loader.dataset.x_I.items", "iter", "carefl.CAREFL.eval", "enumerate", "x_gener_dict.items", "x_factual_dict.items", "data_loader.dataset.clean_intervention", "len", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.get_x_graph", "carefl.CAREFL._forward_flow", "data_loader.dataset.get_counterfactual", "x_gener_dict[].append", "x_gener_dict[].append", "x_gener_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "x_real_dict[].append", "torch.cat", "torch.cat", "torch.cat", "numpy.where", "carefl.CAREFL._forward_flow", "carefl.CAREFL._backward_flow", "carefl.CAREFL.scaler.inverse_transform", "carefl.CAREFL.scaler.transform", "torch.tensor", "x_factual_dict[].append", "x_factual_dict[].append", "carefl.CAREFL._backward_flow", "carefl.CAREFL.scaler.inverse_transform", "batch.u.view", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.scaler.inverse_transform", "numpy.array", "carefl.CAREFL.get_x_graph", "carefl.CAREFL.get_x_graph"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.clean_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_counterfactual", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_counterfactual_distr", "(", "self", ",", "data_loader", ",", "\n", "x_I", "=", "None", ",", "\n", "is_noise", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x_I", ",", "dict", ")", "\n", "assert", "len", "(", "x_I", ")", "==", "1", "\n", "data_loader", ".", "dataset", ".", "set_intervention", "(", "x_I", ",", "is_noise", "=", "is_noise", ")", "\n", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "dataset", ".", "x_I", ".", "items", "(", ")", ":", "\n", "            ", "dims_int", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "node_per_dimension", ")", "==", "key", ")", "[", "0", "]", "\n", "\n", "", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "x_gener_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_real_dict", "=", "{", "'intervened'", ":", "[", "]", ",", "\n", "'children'", ":", "[", "]", ",", "\n", "'all'", ":", "[", "]", "}", "\n", "x_factual_dict", "=", "{", "'all'", ":", "[", "]", "}", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "X_i", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x_i'", ")", "\n", "# abduction:", "\n", "z_obs", "=", "self", ".", "_forward_flow", "(", "X", ")", "\n", "z_cf_val", "=", "self", ".", "_forward_flow", "(", "X_i", ")", "[", ":", ",", "dims_int", "]", "\n", "z_obs", "[", ":", ",", "dims_int", "]", "=", "z_cf_val", "\n", "# prediction (pass through the flow):", "\n", "if", "normalize", ":", "\n", "                ", "x_CF", "=", "self", ".", "_backward_flow", "(", "z_obs", ")", "\n", "", "else", ":", "\n", "                ", "x_CF", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "_backward_flow", "(", "z_obs", ")", ")", "\n", "\n", "# Not normalized", "\n", "", "x_cf_real", ",", "set_nodes", "=", "data_loader", ".", "dataset", ".", "get_counterfactual", "(", "\n", "x_factual", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ",", "\n", "u_factual", "=", "batch", ".", "u", ".", "view", "(", "batch", ".", "num_graphs", ",", "-", "1", ")", ",", "\n", "x_I", "=", "x_I", ",", "\n", "is_noise", "=", "is_noise", ",", "\n", "return_set_nodes", "=", "True", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "x_cf_real", "=", "self", ".", "scaler", ".", "transform", "(", "x_cf_real", ")", "\n", "", "else", ":", "\n", "                ", "x_cf_real", "=", "torch", ".", "tensor", "(", "x_cf_real", ")", "\n", "# x_cf_real = self.scaler.transform(torch.tensor(x_cf_real))", "\n", "", "x_gener_dict", "[", "'intervened'", "]", ".", "append", "(", "x_CF", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_gener_dict", "[", "'children'", "]", ".", "append", "(", "x_CF", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_gener_dict", "[", "'all'", "]", ".", "append", "(", "x_CF", ")", "\n", "\n", "x_real_dict", "[", "'intervened'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'intervened'", "]", "]", ")", "\n", "x_real_dict", "[", "'children'", "]", ".", "append", "(", "x_cf_real", "[", ":", ",", "set_nodes", "[", "'children'", "]", "]", ")", "\n", "x_real_dict", "[", "'all'", "]", ".", "append", "(", "x_cf_real", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_factual_dict", "[", "'all'", "]", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", ")", ")", "\n", "\n", "", "", "x_gener_dict_out", "=", "{", "}", "\n", "x_real_dict_out", "=", "{", "}", "\n", "x_factual_dict_out", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "x_gener_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_gener_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "x_real_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "x_real_dict", "[", "key", "]", ")", "\n", "\n", "", "for", "key", ",", "values", "in", "x_factual_dict", ".", "items", "(", ")", ":", "\n", "            ", "x_factual_dict_out", "[", "key", "]", "=", "torch", ".", "cat", "(", "values", ")", "\n", "\n", "", "data_loader", ".", "dataset", ".", "clean_intervention", "(", ")", "\n", "\n", "return", "x_gener_dict_out", ",", "x_real_dict_out", ",", "x_factual_dict_out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_data_is_toy": [[458, 460], ["None"], "methods", ["None"], ["", "def", "get_data_is_toy", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_reconstruction_distr": [[461, 500], ["torch.no_grad", "iter", "carefl.CAREFL.eval", "enumerate", "carefl.CAREFL.get_x_graph", "carefl.CAREFL._forward_flow", "carefl.CAREFL._backward_flow", "z.append", "torch.cat", "torch.cat", "torch.cat", "x.append", "x_real.append", "x.append", "x_real.append", "carefl.CAREFL.scaler.inverse_transform", "carefl.CAREFL.scaler.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL.get_x_graph", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._forward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.carefl.carefl.CAREFL._backward_flow", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform", "home.repos.pwc.inspect_result.psanch21_VACA.data_modules._scalers.TensorScaler.inverse_transform"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_reconstruction_distr", "(", "self", ",", "data_loader", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Reconstruct all the feates of all the  graphs in data loader, i.e.,\n        Z \\sim q(Z|X, A) and X_hat p(X | Z, A)\n        Args:\n            data_loader:\n            normalize:\n\n        Returns:\n            z_list: torch.Tensor\n                Latent code of the reconstructed distribution, i.e. q(z|x)\n            x: torch.Tensor\n                reconstructed samples\n            x_real: torch.Tensor\n                original  samples (real data)\n        \"\"\"", "\n", "iterator", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "eval", "(", ")", "\n", "x", ",", "z", "=", "[", "]", ",", "[", "]", "\n", "x_real", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "            ", "X", "=", "self", ".", "get_x_graph", "(", "batch", ",", "'x'", ")", "\n", "\n", "z_hat", "=", "self", ".", "_forward_flow", "(", "X", ")", "\n", "# sample from prior and ensure z_intervention_index = z_int", "\n", "x_hat", "=", "self", ".", "_backward_flow", "(", "z_hat", ")", "\n", "if", "normalize", ":", "\n", "                ", "x", ".", "append", "(", "x_hat", ")", "\n", "x_real", ".", "append", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "x", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "x_hat", ")", ")", "\n", "x_real", ".", "append", "(", "self", ".", "scaler", ".", "inverse_transform", "(", "X", ")", ")", "\n", "\n", "", "z", ".", "append", "(", "z_hat", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "z", ")", ",", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "x_real", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.LeafParam.__init__": [[11, 14], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.LeafParam.forward": [[15, 17], ["nets.LeafParam.p.expand", "x.size", "nets.LeafParam.p.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "p", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "p", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.PositionalEncoder.__init__": [[26, 29], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "freqs", "=", "(", ".5", ",", "1", ",", "2", ",", "4", ",", "8", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "freqs", "=", "freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.PositionalEncoder.forward": [[30, 35], ["torch.cat", "torch.sin", "torch.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sines", "=", "[", "torch", ".", "sin", "(", "x", "*", "f", ")", "for", "f", "in", "self", ".", "freqs", "]", "\n", "coses", "=", "[", "torch", ".", "cos", "(", "x", "*", "f", ")", "for", "f", "in", "self", ".", "freqs", "]", "\n", "out", "=", "torch", ".", "cat", "(", "sines", "+", "coses", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.MLP1layer.__init__": [[40, 46], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "nh", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nin", ",", "nh", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "nh", ",", "nout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.MLP1layer.forward": [[48, 50], ["nets.MLP1layer.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.MLP4.__init__": [[55, 65], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "nh", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nin", ",", "nh", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "nh", ",", "nh", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "nh", ",", "nh", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "nh", ",", "nout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.MLP4.forward": [[67, 69], ["nets.MLP4.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.PosEncMLP.__init__": [[78, 83], ["torch.nn.Module.__init__", "torch.nn.Sequential", "nets.PositionalEncoder", "nets.MLP4", "len"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "nh", ",", "freqs", "=", "(", ".5", ",", "1", ",", "2", ",", "4", ",", "8", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "PositionalEncoder", "(", "freqs", ")", ",", "\n", "MLP4", "(", "nin", "*", "len", "(", "freqs", ")", "*", "2", ",", "nout", ",", "nh", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.nets.PosEncMLP.forward": [[85, 87], ["nets.PosEncMLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.__init__": [[158, 168], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "spline_flows.NSF_AR.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_network"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters"], ["def", "__init__", "(", "self", ",", "dim", ",", "K", "=", "5", ",", "B", "=", "3", ",", "hidden_dim", "=", "8", ",", "base_network", "=", "MLP4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "init_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "K", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "dim", ")", ":", "\n", "            ", "self", ".", "layers", "+=", "[", "base_network", "(", "i", ",", "3", "*", "K", "-", "1", ",", "hidden_dim", ")", "]", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.reset_parameters": [[169, 171], ["torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "uniform_", "(", "self", ".", "init_param", ",", "-", "1", "/", "2", ",", "1", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.forward": [[172, 188], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "spline_flows.NSF_AR.init_param.expand", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "log_det", "=", "torch", ".", "zeros", "(", "z", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "init_param", "=", "self", ".", "init_param", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "init_param", ",", "self", ".", "K", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "layers", "[", "i", "-", "1", "]", "(", "x", "[", ":", ",", ":", "i", "]", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "1", ")", "\n", "", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "1", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "1", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "z", "[", ":", ",", "i", "]", ",", "ld", "=", "unconstrained_RQS", "(", "x", "[", ":", ",", "i", "]", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "False", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "ld", "\n", "", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_AR.backward": [[189, 205], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "spline_flows.NSF_AR.init_param.expand", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "x", "=", "torch", ".", "zeros_like", "(", "z", ")", ".", "to", "(", "z", ".", "device", ")", "\n", "log_det", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "z", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "init_param", "=", "self", ".", "init_param", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "init_param", ",", "self", ".", "K", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "layers", "[", "i", "-", "1", "]", "(", "x", "[", ":", ",", ":", "i", "]", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "1", ")", "\n", "", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "1", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "1", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "x", "[", ":", ",", "i", "]", ",", "ld", "=", "unconstrained_RQS", "(", "z", "[", ":", ",", "i", "]", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "True", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "ld", "\n", "", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_CL.__init__": [[210, 217], ["torch.Module.__init__", "base_network", "base_network"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "K", "=", "5", ",", "B", "=", "3", ",", "hidden_dim", "=", "8", ",", "base_network", "=", "MLP4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "f1", "=", "base_network", "(", "dim", "//", "2", ",", "(", "3", "*", "K", "-", "1", ")", "*", "dim", "//", "2", ",", "hidden_dim", ")", "\n", "self", ".", "f2", "=", "base_network", "(", "dim", "//", "2", ",", "(", "3", "*", "K", "-", "1", ")", "*", "dim", "//", "2", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_CL.forward": [[218, 236], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "spline_flows.NSF_CL.f1().reshape", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "spline_flows.NSF_CL.f2().reshape", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "spline_flows.NSF_CL.f1", "spline_flows.NSF_CL.f2"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "log_det", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "lower", ",", "upper", "=", "x", "[", ":", ",", ":", "self", ".", "dim", "//", "2", "]", ",", "x", "[", ":", ",", "self", ".", "dim", "//", "2", ":", "]", "\n", "out", "=", "self", ".", "f1", "(", "lower", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", "//", "2", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "2", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "upper", ",", "ld", "=", "unconstrained_RQS", "(", "upper", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "False", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "torch", ".", "sum", "(", "ld", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "f2", "(", "upper", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", "//", "2", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "2", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "lower", ",", "ld", "=", "unconstrained_RQS", "(", "lower", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "False", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "torch", ".", "sum", "(", "ld", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "lower", ",", "upper", "]", ",", "dim", "=", "1", ")", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.NSF_CL.backward": [[237, 255], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "spline_flows.NSF_CL.f2().reshape", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "spline_flows.NSF_CL.f1().reshape", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "spline_flows.unconstrained_RQS", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "spline_flows.NSF_CL.f2", "spline_flows.NSF_CL.f1"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "log_det", "=", "torch", ".", "zeros", "(", "z", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "z", ".", "device", ")", "\n", "lower", ",", "upper", "=", "z", "[", ":", ",", ":", "self", ".", "dim", "//", "2", "]", ",", "z", "[", ":", ",", "self", ".", "dim", "//", "2", ":", "]", "\n", "out", "=", "self", ".", "f2", "(", "upper", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", "//", "2", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "2", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "lower", ",", "ld", "=", "unconstrained_RQS", "(", "lower", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "True", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "torch", ".", "sum", "(", "ld", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "f1", "(", "lower", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", "//", "2", ",", "3", "*", "self", ".", "K", "-", "1", ")", "\n", "W", ",", "H", ",", "D", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "K", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "torch", ".", "softmax", "(", "W", ",", "dim", "=", "2", ")", ",", "torch", ".", "softmax", "(", "H", ",", "dim", "=", "2", ")", "\n", "W", ",", "H", "=", "2", "*", "self", ".", "B", "*", "W", ",", "2", "*", "self", ".", "B", "*", "H", "\n", "D", "=", "F", ".", "softplus", "(", "D", ")", "\n", "upper", ",", "ld", "=", "unconstrained_RQS", "(", "upper", ",", "W", ",", "H", ",", "D", ",", "inverse", "=", "True", ",", "tail_bound", "=", "self", ".", "B", ")", "\n", "log_det", "+=", "torch", ".", "sum", "(", "ld", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "lower", ",", "upper", "]", ",", "dim", "=", "1", ")", ",", "log_det", "", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.searchsorted": [[20, 26], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "searchsorted", "(", "bin_locations", ",", "inputs", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "bin_locations", "[", "...", ",", "-", "1", "]", "+=", "eps", "\n", "return", "torch", ".", "sum", "(", "\n", "inputs", "[", "...", ",", "None", "]", ">=", "bin_locations", ",", "\n", "dim", "=", "-", "1", "\n", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.unconstrained_RQS": [[27, 58], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.pad", "numpy.log", "spline_flows.RQS", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.RQS"], ["", "def", "unconstrained_RQS", "(", "inputs", ",", "unnormalized_widths", ",", "unnormalized_heights", ",", "\n", "unnormalized_derivatives", ",", "inverse", "=", "False", ",", "\n", "tail_bound", "=", "1.", ",", "min_bin_width", "=", "DEFAULT_MIN_BIN_WIDTH", ",", "\n", "min_bin_height", "=", "DEFAULT_MIN_BIN_HEIGHT", ",", "\n", "min_derivative", "=", "DEFAULT_MIN_DERIVATIVE", ")", ":", "\n", "    ", "inside_intvl_mask", "=", "(", "inputs", ">=", "-", "tail_bound", ")", "&", "(", "inputs", "<=", "tail_bound", ")", "\n", "outside_interval_mask", "=", "~", "inside_intvl_mask", "\n", "\n", "outputs", "=", "torch", ".", "zeros_like", "(", "inputs", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "logabsdet", "=", "torch", ".", "zeros_like", "(", "inputs", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "\n", "unnormalized_derivatives", "=", "F", ".", "pad", "(", "unnormalized_derivatives", ",", "pad", "=", "(", "1", ",", "1", ")", ")", "\n", "constant", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "1", "-", "min_derivative", ")", "-", "1", ")", "\n", "unnormalized_derivatives", "[", "...", ",", "0", "]", "=", "constant", "\n", "unnormalized_derivatives", "[", "...", ",", "-", "1", "]", "=", "constant", "\n", "\n", "outputs", "[", "outside_interval_mask", "]", "=", "inputs", "[", "outside_interval_mask", "]", "\n", "logabsdet", "[", "outside_interval_mask", "]", "=", "0", "\n", "\n", "outputs", "[", "inside_intvl_mask", "]", ",", "logabsdet", "[", "inside_intvl_mask", "]", "=", "RQS", "(", "\n", "inputs", "=", "inputs", "[", "inside_intvl_mask", "]", ",", "\n", "unnormalized_widths", "=", "unnormalized_widths", "[", "inside_intvl_mask", ",", ":", "]", ",", "\n", "unnormalized_heights", "=", "unnormalized_heights", "[", "inside_intvl_mask", ",", ":", "]", ",", "\n", "unnormalized_derivatives", "=", "unnormalized_derivatives", "[", "inside_intvl_mask", ",", ":", "]", ",", "\n", "inverse", "=", "inverse", ",", "\n", "left", "=", "-", "tail_bound", ",", "right", "=", "tail_bound", ",", "bottom", "=", "-", "tail_bound", ",", "top", "=", "tail_bound", ",", "\n", "min_bin_width", "=", "min_bin_width", ",", "\n", "min_bin_height", "=", "min_bin_height", ",", "\n", "min_derivative", "=", "min_derivative", "\n", ")", "\n", "return", "outputs", ",", "logabsdet", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.RQS": [[59, 154], ["torch.softmax", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.pad", "torch.softmax", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.pad", "derivatives[].gather", "ValueError", "ValueError", "ValueError", "torch.softplus", "F.pad.gather", "F.softmax.gather", "F.pad.gather", "delta.gather", "derivatives.gather", "F.softmax.gather", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "spline_flows.searchsorted", "spline_flows.searchsorted", "b.pow", "input_delta.pow", "torch.log", "torch.log", "torch.log", "torch.log", "input_delta.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "theta.pow", "root.pow", "theta.pow"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.searchsorted", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.spline_flows.searchsorted"], ["", "def", "RQS", "(", "inputs", ",", "unnormalized_widths", ",", "unnormalized_heights", ",", "\n", "unnormalized_derivatives", ",", "inverse", "=", "False", ",", "left", "=", "0.", ",", "right", "=", "1.", ",", "\n", "bottom", "=", "0.", ",", "top", "=", "1.", ",", "min_bin_width", "=", "DEFAULT_MIN_BIN_WIDTH", ",", "\n", "min_bin_height", "=", "DEFAULT_MIN_BIN_HEIGHT", ",", "\n", "min_derivative", "=", "DEFAULT_MIN_DERIVATIVE", ")", ":", "\n", "    ", "if", "torch", ".", "min", "(", "inputs", ")", "<", "left", "or", "torch", ".", "max", "(", "inputs", ")", ">", "right", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input outside domain\"", ")", "\n", "\n", "", "num_bins", "=", "unnormalized_widths", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "min_bin_width", "*", "num_bins", ">", "1.0", ":", "\n", "        ", "raise", "ValueError", "(", "'Minimal bin width too large for the number of bins'", ")", "\n", "", "if", "min_bin_height", "*", "num_bins", ">", "1.0", ":", "\n", "        ", "raise", "ValueError", "(", "'Minimal bin height too large for the number of bins'", ")", "\n", "\n", "", "widths", "=", "F", ".", "softmax", "(", "unnormalized_widths", ",", "dim", "=", "-", "1", ")", "\n", "widths", "=", "min_bin_width", "+", "(", "1", "-", "min_bin_width", "*", "num_bins", ")", "*", "widths", "\n", "cumwidths", "=", "torch", ".", "cumsum", "(", "widths", ",", "dim", "=", "-", "1", ")", "\n", "cumwidths", "=", "F", ".", "pad", "(", "cumwidths", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0.0", ")", "\n", "cumwidths", "=", "(", "right", "-", "left", ")", "*", "cumwidths", "+", "left", "\n", "cumwidths", "[", "...", ",", "0", "]", "=", "left", "\n", "cumwidths", "[", "...", ",", "-", "1", "]", "=", "right", "\n", "widths", "=", "cumwidths", "[", "...", ",", "1", ":", "]", "-", "cumwidths", "[", "...", ",", ":", "-", "1", "]", "\n", "\n", "derivatives", "=", "min_derivative", "+", "F", ".", "softplus", "(", "unnormalized_derivatives", ")", "\n", "\n", "heights", "=", "F", ".", "softmax", "(", "unnormalized_heights", ",", "dim", "=", "-", "1", ")", "\n", "heights", "=", "min_bin_height", "+", "(", "1", "-", "min_bin_height", "*", "num_bins", ")", "*", "heights", "\n", "cumheights", "=", "torch", ".", "cumsum", "(", "heights", ",", "dim", "=", "-", "1", ")", "\n", "cumheights", "=", "F", ".", "pad", "(", "cumheights", ",", "pad", "=", "(", "1", ",", "0", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0.0", ")", "\n", "cumheights", "=", "(", "top", "-", "bottom", ")", "*", "cumheights", "+", "bottom", "\n", "cumheights", "[", "...", ",", "0", "]", "=", "bottom", "\n", "cumheights", "[", "...", ",", "-", "1", "]", "=", "top", "\n", "heights", "=", "cumheights", "[", "...", ",", "1", ":", "]", "-", "cumheights", "[", "...", ",", ":", "-", "1", "]", "\n", "\n", "if", "inverse", ":", "\n", "        ", "bin_idx", "=", "searchsorted", "(", "cumheights", ",", "inputs", ")", "[", "...", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "bin_idx", "=", "searchsorted", "(", "cumwidths", ",", "inputs", ")", "[", "...", ",", "None", "]", "\n", "\n", "", "input_cumwidths", "=", "cumwidths", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "input_bin_widths", "=", "widths", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "\n", "input_cumheights", "=", "cumheights", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "delta", "=", "heights", "/", "widths", "\n", "input_delta", "=", "delta", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "\n", "input_derivatives", "=", "derivatives", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "input_derivatives_plus_one", "=", "derivatives", "[", "...", ",", "1", ":", "]", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "\n", "input_derivatives_plus_one", "=", "input_derivatives_plus_one", "[", "...", ",", "0", "]", "\n", "\n", "input_heights", "=", "heights", ".", "gather", "(", "-", "1", ",", "bin_idx", ")", "[", "...", ",", "0", "]", "\n", "\n", "if", "inverse", ":", "\n", "        ", "a", "=", "(", "(", "(", "inputs", "-", "input_cumheights", ")", "*", "(", "input_derivatives", "+", "input_derivatives_plus_one", "-", "2", "*", "input_delta", ")", "+", "input_heights", "*", "(", "input_delta", "-", "input_derivatives", ")", ")", ")", "\n", "b", "=", "(", "input_heights", "*", "input_derivatives", "-", "(", "inputs", "-", "input_cumheights", ")", "*", "(", "input_derivatives", "+", "input_derivatives_plus_one", "-", "2", "*", "input_delta", ")", ")", "\n", "c", "=", "-", "input_delta", "*", "(", "inputs", "-", "input_cumheights", ")", "\n", "\n", "discriminant", "=", "b", ".", "pow", "(", "2", ")", "-", "4", "*", "a", "*", "c", "\n", "assert", "(", "discriminant", ">=", "0", ")", ".", "all", "(", ")", "\n", "\n", "root", "=", "(", "2", "*", "c", ")", "/", "(", "-", "b", "-", "torch", ".", "sqrt", "(", "discriminant", ")", ")", "\n", "outputs", "=", "root", "*", "input_bin_widths", "+", "input_cumwidths", "\n", "\n", "theta_one_minus_theta", "=", "root", "*", "(", "1", "-", "root", ")", "\n", "denominator", "=", "input_delta", "+", "(", "(", "input_derivatives", "+", "input_derivatives_plus_one", "-", "2", "*", "input_delta", ")", "*", "theta_one_minus_theta", ")", "\n", "derivative_numerator", "=", "input_delta", ".", "pow", "(", "2", ")", "*", "(", "input_derivatives_plus_one", "*", "root", ".", "pow", "(", "2", ")", "+", "2", "*", "input_delta", "*", "theta_one_minus_theta", "+", "input_derivatives", "*", "(", "1", "-", "root", ")", ".", "pow", "(", "2", ")", ")", "\n", "logabsdet", "=", "torch", ".", "log", "(", "derivative_numerator", ")", "-", "2", "*", "torch", ".", "log", "(", "denominator", ")", "\n", "return", "outputs", ",", "-", "logabsdet", "\n", "", "else", ":", "\n", "        ", "theta", "=", "(", "inputs", "-", "input_cumwidths", ")", "/", "input_bin_widths", "\n", "theta_one_minus_theta", "=", "theta", "*", "(", "1", "-", "theta", ")", "\n", "\n", "numerator", "=", "input_heights", "*", "(", "input_delta", "*", "theta", ".", "pow", "(", "2", ")", "+", "input_derivatives", "*", "theta_one_minus_theta", ")", "\n", "denominator", "=", "input_delta", "+", "(", "(", "input_derivatives", "+", "input_derivatives_plus_one", "-", "2", "*", "input_delta", ")", "*", "theta_one_minus_theta", ")", "\n", "outputs", "=", "input_cumheights", "+", "numerator", "/", "denominator", "\n", "\n", "derivative_numerator", "=", "input_delta", ".", "pow", "(", "2", ")", "*", "(", "input_derivatives_plus_one", "*", "theta", ".", "pow", "(", "2", ")", "+", "2", "*", "input_delta", "*", "theta_one_minus_theta", "+", "input_derivatives", "*", "(", "1", "-", "theta", ")", ".", "pow", "(", "2", ")", ")", "\n", "logabsdet", "=", "torch", ".", "log", "(", "derivative_numerator", ")", "-", "2", "*", "torch", ".", "log", "(", "denominator", ")", "\n", "return", "outputs", ",", "logabsdet", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineConstantFlow.__init__": [[52, 56], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "scale", "=", "True", ",", "shift", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "dim", ",", "requires_grad", "=", "True", ")", ")", "if", "scale", "else", "None", "\n", "self", ".", "t", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "dim", ",", "requires_grad", "=", "True", ")", ")", "if", "shift", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineConstantFlow.forward": [[57, 63], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.new_zeros", "x.new_zeros", "x.size", "x.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "self", ".", "s", "if", "self", ".", "s", "is", "not", "None", "else", "x", ".", "new_zeros", "(", "x", ".", "size", "(", ")", ")", "\n", "t", "=", "self", ".", "t", "if", "self", ".", "t", "is", "not", "None", "else", "x", ".", "new_zeros", "(", "x", ".", "size", "(", ")", ")", "\n", "z", "=", "x", "*", "torch", ".", "exp", "(", "s", ")", "+", "t", "\n", "log_det", "=", "torch", ".", "sum", "(", "s", ",", "dim", "=", "1", ")", "\n", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineConstantFlow.backward": [[64, 70], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "z.new_zeros", "z.new_zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "z.size", "z.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "s", "=", "self", ".", "s", "if", "self", ".", "s", "is", "not", "None", "else", "z", ".", "new_zeros", "(", "z", ".", "size", "(", ")", ")", "\n", "t", "=", "self", ".", "t", "if", "self", ".", "t", "is", "not", "None", "else", "z", ".", "new_zeros", "(", "z", ".", "size", "(", ")", ")", "\n", "x", "=", "(", "z", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "\n", "log_det", "=", "torch", ".", "sum", "(", "-", "s", ",", "dim", "=", "1", ")", "\n", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.ActNorm.__init__": [[79, 82], ["flows.AffineConstantFlow.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "data_dep_init_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.ActNorm.forward": [[83, 91], ["flows.AffineConstantFlow.forward", "torch.log", "torch.log", "torch.log", "torch.log", "x.std", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# first batch is used for init", "\n", "        ", "if", "not", "self", ".", "data_dep_init_done", ":", "\n", "            ", "assert", "self", ".", "s", "is", "not", "None", "and", "self", ".", "t", "is", "not", "None", "# for now", "\n", "self", ".", "s", ".", "data", "=", "(", "-", "torch", ".", "log", "(", "x", ".", "std", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", ")", ".", "detach", "(", ")", "\n", "self", ".", "t", ".", "data", "=", "(", "-", "(", "x", "*", "torch", ".", "exp", "(", "self", ".", "s", ")", ")", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", ".", "detach", "(", ")", "\n", "self", ".", "data_dep_init_done", "=", "True", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineCL.__init__": [[103, 117], ["torch.nn.Module.__init__", "x.new_zeros", "x.new_zeros", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "net_class", "net_class", "x.size", "x.size", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "parity", "=", "False", ",", "net_class", "=", "MLP4", ",", "nh", "=", "24", ",", "scale", "=", "True", ",", "shift", "=", "True", ",", "\n", "scale_base", "=", "False", ",", "shift_base", "=", "False", ",", "checkerboard", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "parity", "=", "parity", "\n", "self", ".", "checkerboard", "=", "checkerboard", "\n", "self", ".", "s_cond", "=", "lambda", "x", ":", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "dim", "//", "2", ")", "\n", "self", ".", "t_cond", "=", "lambda", "x", ":", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "dim", "//", "2", ")", "\n", "self", ".", "s_base", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "dim", "//", "2", ")", ",", "requires_grad", "=", "True", ")", "if", "scale_base", "else", "None", "\n", "self", ".", "t_base", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "dim", "//", "2", ")", ",", "requires_grad", "=", "True", ")", "if", "shift_base", "else", "None", "\n", "if", "scale", ":", "\n", "            ", "self", ".", "s_cond", "=", "net_class", "(", "self", ".", "dim", "//", "2", ",", "self", ".", "dim", "//", "2", ",", "nh", ")", "\n", "", "if", "shift", ":", "\n", "            ", "self", ".", "t_cond", "=", "net_class", "(", "self", ".", "dim", "//", "2", ",", "self", ".", "dim", "//", "2", ",", "nh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineCL.forward": [[118, 138], ["flows.AffineCL.s_cond", "flows.AffineCL.t_cond", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "checkerboard", ":", "\n", "            ", "x0", ",", "x1", "=", "x", "[", ":", ",", ":", ":", "2", "]", ",", "x", "[", ":", ",", "1", ":", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "x0", ",", "x1", "=", "x", "[", ":", ",", ":", "self", ".", "dim", "//", "2", "]", ",", "x", "[", ":", ",", "self", ".", "dim", "//", "2", ":", "]", "\n", "", "if", "self", ".", "parity", ":", "\n", "            ", "x0", ",", "x1", "=", "x1", ",", "x0", "\n", "", "s", "=", "self", ".", "s_cond", "(", "x0", ")", "\n", "t", "=", "self", ".", "t_cond", "(", "x0", ")", "\n", "s0", "=", "self", ".", "s_base", "if", "self", ".", "s_base", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "x0", ")", "\n", "t0", "=", "self", ".", "s_base", "if", "self", ".", "t_base", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "x0", ")", "\n", "# first apply shift and scaling to base part x0", "\n", "z0", "=", "torch", ".", "exp", "(", "s0", ")", "*", "x0", "+", "t0", "\n", "# then apply transformation to x1", "\n", "z1", "=", "torch", ".", "exp", "(", "s", ")", "*", "x1", "+", "t", "# transform this half as a function of the other", "\n", "if", "self", ".", "parity", ":", "\n", "            ", "z0", ",", "z1", "=", "z1", ",", "z0", "\n", "", "z", "=", "torch", ".", "cat", "(", "[", "z0", ",", "z1", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "sum", "(", "s", ",", "dim", "=", "1", ")", "+", "torch", ".", "sum", "(", "s0", ",", "dim", "=", "1", ")", "\n", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.AffineCL.backward": [[139, 158], ["flows.AffineCL.s_cond", "flows.AffineCL.t_cond", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "checkerboard", ":", "\n", "            ", "z0", ",", "z1", "=", "z", "[", ":", ",", ":", ":", "2", "]", ",", "z", "[", ":", ",", "1", ":", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "z0", ",", "z1", "=", "z", "[", ":", ",", ":", "self", ".", "dim", "//", "2", "]", ",", "z", "[", ":", ",", "self", ".", "dim", "//", "2", ":", "]", "\n", "", "if", "self", ".", "parity", ":", "\n", "            ", "z0", ",", "z1", "=", "z1", ",", "z0", "\n", "", "s0", "=", "self", ".", "s_base", "if", "self", ".", "s_base", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "z0", ")", "\n", "t0", "=", "self", ".", "s_base", "if", "self", ".", "t_base", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "z0", ")", "\n", "x0", "=", "(", "z0", "-", "t0", ")", "*", "torch", ".", "exp", "(", "-", "s0", ")", "\n", "s", "=", "self", ".", "s_cond", "(", "x0", ")", "\n", "t", "=", "self", ".", "t_cond", "(", "x0", ")", "\n", "# x0 = z0 # this was the same", "\n", "x1", "=", "(", "z1", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "# reverse the transform on this half", "\n", "if", "self", ".", "parity", ":", "\n", "            ", "x0", ",", "x1", "=", "x1", ",", "x0", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "log_det", "=", "torch", ".", "sum", "(", "-", "s", ",", "dim", "=", "1", ")", "+", "torch", ".", "sum", "(", "-", "s0", ",", "dim", "=", "1", ")", "\n", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MaskedLinear.__init__": [[163, 166], ["torch.nn.Linear.__init__", "flows.MaskedLinear.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "torch", ".", "ones", "(", "out_features", ",", "in_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MaskedLinear.set_mask": [[167, 169], ["flows.MaskedLinear.mask.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.astype"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "self", ".", "mask", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ".", "T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MaskedLinear.forward": [[170, 172], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "mask", "*", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MADE.__init__": [[175, 212], ["torch.nn.Module.__init__", "zip", "flows.MADE.net.pop", "torch.nn.Sequential", "torch.nn.Sequential", "flows.MADE.update_masks", "flows.MADE.net.extend", "flows.MaskedLinear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MADE.update_masks"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "hidden_sizes", ",", "nout", ",", "num_masks", "=", "1", ",", "natural_ordering", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        nin: integer; number of inputs\n        hidden sizes: a list of integers; number of units in hidden layers\n        nout: integer; number of outputs, which usually collectively parameterize some kind of 1D distribution\n              note: if nout is e.g. 2x larger than nin (perhaps the mean and std), then the first nin\n              will be all the means and the second nin will be stds. i.e. output dimensions depend on the\n              same input dimensions in \"chunks\" and should be carefully decoded downstream appropriately.\n              the output of running the tests for this file makes this a bit more clear with examples.\n        num_masks: can be used to train ensemble over orderings/connections\n        natural_ordering: force natural ordering of dimensions, don't use random permutations\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nin", "=", "nin", "\n", "self", ".", "nout", "=", "nout", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "assert", "self", ".", "nout", "%", "self", ".", "nin", "==", "0", ",", "\"nout must be integer multiple of nin\"", "\n", "\n", "# define a simple MLP neural net", "\n", "self", ".", "net", "=", "[", "]", "\n", "hs", "=", "[", "nin", "]", "+", "hidden_sizes", "+", "[", "nout", "]", "\n", "for", "h0", ",", "h1", "in", "zip", "(", "hs", ",", "hs", "[", "1", ":", "]", ")", ":", "\n", "            ", "self", ".", "net", ".", "extend", "(", "[", "\n", "MaskedLinear", "(", "h0", ",", "h1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "]", ")", "\n", "", "self", ".", "net", ".", "pop", "(", ")", "# pop the last ReLU for the output layer", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n", "# seeds for orders/connectivities of the model ensemble", "\n", "self", ".", "natural_ordering", "=", "natural_ordering", "\n", "self", ".", "num_masks", "=", "num_masks", "\n", "self", ".", "seed", "=", "0", "# for cycling through num_masks orderings", "\n", "\n", "self", ".", "m", "=", "{", "}", "\n", "self", ".", "update_masks", "(", ")", "# builds the initial self.m connectivity", "\n", "# note, we could also precompute the masks and cache them, but this", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MADE.update_masks": [[215, 243], ["len", "numpy.random.RandomState", "range", "masks.append", "zip", "numpy.arange", "numpy.random.RandomState.permutation", "numpy.random.RandomState.randint", "int", "numpy.concatenate", "l.set_mask", "flows.MADE.m[].min", "range", "flows.MADE.net.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MaskedLinear.set_mask"], ["", "def", "update_masks", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "m", "and", "self", ".", "num_masks", "==", "1", ":", "return", "# only a single seed, skip for efficiency", "\n", "# bool(self.m) == False if m == {} else True", "\n", "L", "=", "len", "(", "self", ".", "hidden_sizes", ")", "\n", "\n", "# fetch the next seed and construct a random stream", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "self", ".", "seed", "=", "(", "self", ".", "seed", "+", "1", ")", "%", "self", ".", "num_masks", "\n", "\n", "# sample the order of the inputs and the connectivity of all neurons", "\n", "self", ".", "m", "[", "-", "1", "]", "=", "np", ".", "arange", "(", "self", ".", "nin", ")", "if", "self", ".", "natural_ordering", "else", "rng", ".", "permutation", "(", "self", ".", "nin", ")", "\n", "for", "l", "in", "range", "(", "L", ")", ":", "\n", "            ", "self", ".", "m", "[", "l", "]", "=", "rng", ".", "randint", "(", "self", ".", "m", "[", "l", "-", "1", "]", ".", "min", "(", ")", ",", "self", ".", "nin", "-", "1", ",", "size", "=", "self", ".", "hidden_sizes", "[", "l", "]", ")", "\n", "\n", "# construct the mask matrices", "\n", "", "masks", "=", "[", "self", ".", "m", "[", "l", "-", "1", "]", "[", ":", ",", "None", "]", "<=", "self", ".", "m", "[", "l", "]", "[", "None", ",", ":", "]", "for", "l", "in", "range", "(", "L", ")", "]", "\n", "masks", ".", "append", "(", "self", ".", "m", "[", "L", "-", "1", "]", "[", ":", ",", "None", "]", "<", "self", ".", "m", "[", "-", "1", "]", "[", "None", ",", ":", "]", ")", "\n", "\n", "# handle the case where nout = nin * k, for integer k > 1", "\n", "if", "self", ".", "nout", ">", "self", ".", "nin", ":", "\n", "            ", "k", "=", "int", "(", "self", ".", "nout", "/", "self", ".", "nin", ")", "\n", "# replicate the mask across the other outputs", "\n", "masks", "[", "-", "1", "]", "=", "np", ".", "concatenate", "(", "[", "masks", "[", "-", "1", "]", "]", "*", "k", ",", "axis", "=", "1", ")", "\n", "\n", "# set the masks in all MaskedLinear layers", "\n", "", "layers", "=", "[", "l", "for", "l", "in", "self", ".", "net", ".", "modules", "(", ")", "if", "isinstance", "(", "l", ",", "MaskedLinear", ")", "]", "\n", "for", "l", ",", "m", "in", "zip", "(", "layers", ",", "masks", ")", ":", "\n", "            ", "l", ".", "set_mask", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MADE.forward": [[244, 246], ["flows.MADE.net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.ARMLP.__init__": [[251, 254], ["torch.nn.Module.__init__", "flows.MADE"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "nh", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MADE", "(", "nin", ",", "[", "nh", ",", "nh", ",", "nh", "]", ",", "nout", ",", "num_masks", "=", "1", ",", "natural_ordering", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.ARMLP.forward": [[255, 257], ["flows.ARMLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.SlowMAF.__init__": [[264, 272], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "nets.LeafParam", "range", "net_class", "list", "str", "range", "list", "str", "range"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "parity", ",", "net_class", "=", "MLP4", ",", "nh", "=", "24", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "layers", "[", "str", "(", "0", ")", "]", "=", "LeafParam", "(", "2", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "dim", ")", ":", "\n", "            ", "self", ".", "layers", "[", "str", "(", "i", ")", "]", "=", "net_class", "(", "i", ",", "2", ",", "nh", ")", "\n", "", "self", ".", "order", "=", "list", "(", "range", "(", "dim", ")", ")", "if", "parity", "else", "list", "(", "range", "(", "dim", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.SlowMAF.forward": [[273, 282], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "x.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "log_det", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "st", "=", "self", ".", "layers", "[", "str", "(", "i", ")", "]", "(", "x", "[", ":", ",", ":", "i", "]", ")", "\n", "s", ",", "t", "=", "st", "[", ":", ",", "0", "]", ",", "st", "[", ":", ",", "1", "]", "\n", "z", "[", ":", ",", "self", ".", "order", "[", "i", "]", "]", "=", "x", "[", ":", ",", "i", "]", "*", "torch", ".", "exp", "(", "s", ")", "+", "t", "\n", "log_det", "+=", "s", "\n", "", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.SlowMAF.backward": [[283, 292], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "z.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "str"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "x", "=", "torch", ".", "zeros_like", "(", "z", ")", "\n", "log_det", "=", "torch", ".", "zeros", "(", "z", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "st", "=", "self", ".", "layers", "[", "str", "(", "i", ")", "]", "(", "x", "[", ":", ",", ":", "i", "]", ")", "\n", "s", ",", "t", "=", "st", "[", ":", ",", "0", "]", ",", "st", "[", ":", ",", "1", "]", "\n", "x", "[", ":", ",", "i", "]", "=", "(", "z", "[", ":", ",", "self", ".", "order", "[", "i", "]", "]", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "\n", "log_det", "+=", "-", "s", "\n", "", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MAF.__init__": [[297, 302], ["torch.nn.Module.__init__", "net_class"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "parity", ",", "net_class", "=", "ARMLP", ",", "nh", "=", "24", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "net", "=", "net_class", "(", "dim", ",", "dim", "*", "2", ",", "nh", ")", "\n", "self", ".", "parity", "=", "parity", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MAF.forward": [[303, 312], ["flows.MAF.net", "flows.MAF.split", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "z.flip", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# here we see that we are evaluating all of z in parallel, so density estimation will be fast", "\n", "        ", "st", "=", "self", ".", "net", "(", "x", ")", "\n", "s", ",", "t", "=", "st", ".", "split", "(", "self", ".", "dim", ",", "dim", "=", "1", ")", "\n", "z", "=", "x", "*", "torch", ".", "exp", "(", "s", ")", "+", "t", "\n", "# reverse order, so if we stack MAFs correct things happen", "\n", "z", "=", "z", ".", "flip", "(", "dims", "=", "(", "1", ",", ")", ")", "if", "self", ".", "parity", "else", "z", "\n", "log_det", "=", "torch", ".", "sum", "(", "s", ",", "dim", "=", "1", ")", "\n", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.MAF.backward": [[313, 324], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "z.size", "z.flip", "flows.MAF.net", "flows.MAF.split", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "# we have to decode the x one at a time, sequentially", "\n", "        ", "x", "=", "torch", ".", "zeros_like", "(", "z", ")", "\n", "log_det", "=", "torch", ".", "zeros", "(", "z", ".", "size", "(", "0", ")", ")", "\n", "z", "=", "z", ".", "flip", "(", "dims", "=", "(", "1", ",", ")", ")", "if", "self", ".", "parity", "else", "z", "\n", "for", "i", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "st", "=", "self", ".", "net", "(", "x", ".", "clone", "(", ")", ")", "# clone to avoid in-place op errors if using IAF", "\n", "s", ",", "t", "=", "st", ".", "split", "(", "self", ".", "dim", ",", "dim", "=", "1", ")", "\n", "x", "[", ":", ",", "i", "]", "=", "(", "z", "[", ":", ",", "i", "]", "-", "t", "[", ":", ",", "i", "]", ")", "*", "torch", ".", "exp", "(", "-", "s", "[", ":", ",", "i", "]", ")", "\n", "log_det", "+=", "-", "s", "[", ":", ",", "i", "]", "\n", "", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.IAF.__init__": [[327, 334], ["flows.MAF.__init__"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\"\"\"\n        reverse the flow, giving an Inverse Autoregressive Flow (IAF) instead,\n        where sampling will be fast but density estimation slow\n        \"\"\"", "\n", "self", ".", "forward", ",", "self", ".", "backward", "=", "self", ".", "backward", ",", "self", ".", "forward", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv.__init__": [[341, 350], ["torch.nn.Module.__init__", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.lu_unpack", "torch.lu_unpack", "torch.lu_unpack", "torch.lu_unpack", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "U.diag", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.nn.init.orthogonal_.lu", "torch.nn.init.orthogonal_.lu"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "Q", "=", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "torch", ".", "randn", "(", "dim", ",", "dim", ")", ")", "\n", "P", ",", "L", ",", "U", "=", "torch", ".", "lu_unpack", "(", "*", "Q", ".", "lu", "(", ")", ")", "\n", "self", ".", "P", "=", "P", "# remains fixed during optimization", "\n", "self", ".", "L", "=", "nn", ".", "Parameter", "(", "L", ")", "# lower triangular portion", "\n", "self", ".", "S", "=", "nn", ".", "Parameter", "(", "U", ".", "diag", "(", ")", ")", "# \"crop out\" the diagonal to its own parameter", "\n", "self", ".", "U", "=", "nn", ".", "Parameter", "(", "torch", ".", "triu", "(", "U", ",", "diagonal", "=", "1", ")", ")", "# \"crop out\" diagonal, stored in S", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv._assemble_W": [[351, 357], ["torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], ["", "def", "_assemble_W", "(", "self", ")", ":", "\n", "        ", "\"\"\" assemble W from its pieces (P, L, U, S) \"\"\"", "\n", "L", "=", "torch", ".", "tril", "(", "self", ".", "L", ",", "diagonal", "=", "-", "1", ")", "+", "torch", ".", "diag", "(", "torch", ".", "ones", "(", "self", ".", "dim", ")", ")", "\n", "U", "=", "torch", ".", "triu", "(", "self", ".", "U", ",", "diagonal", "=", "1", ")", "\n", "W", "=", "self", ".", "P", "@", "L", "@", "(", "U", "+", "torch", ".", "diag", "(", "self", ".", "S", ")", ")", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv.forward": [[358, 363], ["flows.Invertible1x1Conv._assemble_W", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv._assemble_W"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "W", "=", "self", ".", "_assemble_W", "(", ")", "\n", "z", "=", "x", "@", "W", "\n", "log_det", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "self", ".", "S", ")", ")", ")", "\n", "return", "z", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv.backward": [[364, 370], ["flows.Invertible1x1Conv._assemble_W", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.Invertible1x1Conv._assemble_W"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "W", "=", "self", ".", "_assemble_W", "(", ")", "\n", "W_inv", "=", "torch", ".", "inverse", "(", "W", ")", "\n", "x", "=", "z", "@", "W_inv", "\n", "log_det", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "self", ".", "S", ")", ")", ")", "\n", "return", "x", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlow.__init__": [[377, 380], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "flows", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flows", "=", "nn", ".", "ModuleList", "(", "flows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlow.forward": [[381, 390], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "flow.forward", "zs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", ",", "_", "=", "x", ".", "shape", "\n", "log_det", "=", "torch", ".", "zeros", "(", "m", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "zs", "=", "[", "x", "]", "\n", "for", "flow", "in", "self", ".", "flows", ":", "\n", "            ", "x", ",", "ld", "=", "flow", ".", "forward", "(", "x", ")", "\n", "log_det", "+=", "ld", "\n", "zs", ".", "append", "(", "x", ")", "\n", "", "return", "zs", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlow.backward": [[391, 400], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "flow.backward", "xs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.backward"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "m", ",", "_", "=", "z", ".", "shape", "\n", "log_det", "=", "torch", ".", "zeros", "(", "m", ")", ".", "to", "(", "z", ".", "device", ")", "\n", "xs", "=", "[", "z", "]", "\n", "for", "flow", "in", "self", ".", "flows", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "z", ",", "ld", "=", "flow", ".", "backward", "(", "z", ")", "\n", "log_det", "+=", "ld", "\n", "xs", ".", "append", "(", "z", ")", "\n", "", "return", "xs", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__": [[405, 409], ["torch.nn.Module.__init__", "flows.NormalizingFlow"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.__init__"], ["def", "__init__", "(", "self", ",", "prior", ",", "flows", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "flow", "=", "NormalizingFlow", "(", "flows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward": [[410, 414], ["flows.NormalizingFlowModel.flow.forward", "flows.NormalizingFlowModel.prior.log_prob().view().sum", "flows.NormalizingFlowModel.prior.log_prob().view", "x.size", "flows.NormalizingFlowModel.prior.log_prob"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward", "home.repos.pwc.inspect_result.psanch21_VACA.utils.likelihoods.Delta.log_prob"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "zs", ",", "log_det", "=", "self", ".", "flow", ".", "forward", "(", "x", ")", "\n", "prior_logprob", "=", "self", ".", "prior", ".", "log_prob", "(", "zs", "[", "-", "1", "]", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "return", "zs", ",", "prior_logprob", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.backward": [[415, 418], ["flows.NormalizingFlowModel.flow.backward"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.backward"], ["", "def", "backward", "(", "self", ",", "z", ")", ":", "\n", "        ", "xs", ",", "log_det", "=", "self", ".", "flow", ".", "backward", "(", "z", ")", "\n", "return", "xs", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample": [[419, 423], ["flows.NormalizingFlowModel.prior.sample", "flows.NormalizingFlowModel.flow.backward"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.sample", "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.backward"], ["", "def", "sample", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "z", "=", "self", ".", "prior", ".", "sample", "(", "(", "num_samples", ",", ")", ")", "\n", "xs", ",", "_", "=", "self", ".", "flow", ".", "backward", "(", "z", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.log_likelihood": [[424, 429], ["flows.NormalizingFlowModel.forward", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.astype", "torch.tensor.astype"], "methods", ["home.repos.pwc.inspect_result.psanch21_VACA.nflib.flows.NormalizingFlowModel.forward"], ["", "def", "log_likelihood", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "type", "(", "x", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "x", "=", "torch", ".", "tensor", "(", "x", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "_", ",", "prior_logprob", ",", "log_det", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "(", "prior_logprob", "+", "log_det", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.psanch21_VACA.tests.test_datasets.print_dataset_details": [[5, 60], ["print", "print", "dataset.prepare_data", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "dataset.set_intervention", "dataset.__getitem__", "dataset.__getitem__.x.reshape", "print", "dataset.__getitem__.x_i.reshape", "print", "dataset.sample_intervention", "print", "dataset._get_x0_dim_of_node_name", "print", "print", "dataset.__getitem__", "numpy.concatenate", "numpy.concatenate", "dataset.get_counterfactual", "print", "numpy.printoptions", "print", "numpy.printoptions", "range", "dataset.__getitem__.x.reshape", "dataset.__getitem__.x.reshape", "dataset.__getitem__.u.reshape", "dataset.__getitem__.u.reshape", "print", "print"], "function", ["home.repos.pwc.inspect_result.psanch21_VACA.data_modules.het_scm.HeterogeneousSCMDataModule.prepare_data", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._adjacency.Adjacency.set_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.__getitem__", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.sample_intervention", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM._get_x0_dim_of_node_name", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.__getitem__", "home.repos.pwc.inspect_result.psanch21_VACA.datasets._heterogeneous.HeterogeneousSCM.get_counterfactual"], ["def", "print_dataset_details", "(", "dataset", ")", ":", "\n", "    ", "print", "(", "''", ")", "\n", "print", "(", "f\"DATASET {dataset.name}\"", ")", "\n", "dataset", ".", "prepare_data", "(", ")", "\n", "print", "(", "f\"\\ndataset.num_nodes\"", ")", "\n", "print", "(", "dataset", ".", "num_nodes", ")", "\n", "print", "(", "f\"\\ndataset.node_dim\"", ")", "\n", "try", ":", "\n", "        ", "print", "(", "dataset", ".", "node_dim", ")", "\n", "", "except", "IsHeterogeneousError", ":", "\n", "        ", "print", "(", "'Dataset is heterogeneous! You will get an error if you use dataset.node_dim'", ")", "\n", "\n", "", "print", "(", "f\"\\ndataset.num_parameters\"", ")", "\n", "print", "(", "dataset", ".", "num_parameters", ")", "\n", "\n", "print", "(", "f\"\\ndataset.dim_of_x_in_x0\"", ")", "\n", "print", "(", "dataset", ".", "dim_of_x_in_x0", ")", "\n", "\n", "print", "(", "f\"\\ndataset._get_x0_dim_of_node_name({dataset.nodes_list[0]})\"", ")", "\n", "\n", "print", "(", "dataset", ".", "_get_x0_dim_of_node_name", "(", "dataset", ".", "nodes_list", "[", "0", "]", ")", ")", "\n", "\n", "\n", "node0_name", "=", "dataset", ".", "nodes_list", "[", "0", "]", "\n", "\n", "print", "(", "f\"\\nIntervention {node0_name}=0\"", ")", "\n", "x_I", "=", "{", "node0_name", ":", "0", "}", "\n", "dataset", ".", "set_intervention", "(", "x_I", "=", "x_I", ")", "\n", "batch", "=", "dataset", ".", "__getitem__", "(", "0", ")", "\n", "x", "=", "batch", ".", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "print", "(", "f\"data.x[0]={x[0]}\"", ")", "\n", "x_i", "=", "batch", ".", "x_i", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "print", "(", "f\"data.x_i[0]={x_i[0]}\"", ")", "\n", "\n", "x_sample_intervention", "=", "dataset", ".", "sample_intervention", "(", "x_I", "=", "x_I", ",", "\n", "n_samples", "=", "2", ")", "\n", "\n", "if", "dataset", ".", "has_ground_truth", ":", "\n", "        ", "print", "(", "f\"\\nGenerating 2 interventional samples {node0_name}=0\"", ")", "\n", "with", "np", ".", "printoptions", "(", "precision", "=", "2", ",", "suppress", "=", "True", ")", ":", "\n", "            ", "print", "(", "f\"x_sample_intervention=\\n{x_sample_intervention}\"", ")", "\n", "\n", "", "print", "(", "f\"\\nGetting 2 counterfactual samples {node0_name}=0\"", ")", "\n", "batch_1", "=", "dataset", ".", "__getitem__", "(", "1", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "batch", ".", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "batch_1", ".", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", "]", ")", "\n", "u", "=", "np", ".", "concatenate", "(", "[", "batch", ".", "u", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "batch_1", ".", "u", ".", "reshape", "(", "1", ",", "-", "1", ")", "]", ")", "\n", "x_cf", "=", "dataset", ".", "get_counterfactual", "(", "x_factual", "=", "x", ",", "\n", "u_factual", "=", "u", ",", "\n", "x_I", "=", "x_I", ")", "\n", "with", "np", ".", "printoptions", "(", "precision", "=", "2", ",", "suppress", "=", "True", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "print", "(", "f\"x[{i}]={x[i]}\"", ")", "\n", "print", "(", "f\"x_cf[{i}]={x_cf[i]}\"", ")", "\n", "\n"]]}