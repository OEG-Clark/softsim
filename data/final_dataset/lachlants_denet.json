{"home.repos.pwc.inspect_result.lachlants_denet.layer.pool.PoolLayer.__init__": [[13, 44], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "denet.verbose", "int", "int", "theano.dnn_available", "theano.dnn_available", "theano.dnn_available", "theano.dnn_pool", "theano.dnn_pool", "theano.dnn_pool", "theano.signal.pool.pool_2d", "theano.signal.pool.pool_2d", "theano.signal.pool.pool_2d", "len", "int", "int", "math.ceil", "math.ceil", "theano.version", "theano.version", "theano.version", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "None", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "mode", "=", "\"max\"", ",", "ignore_border", "=", "True", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "size", "=", "json_param", ".", "get", "(", "\"size\"", ",", "size", ")", "\n", "self", ".", "pad", "=", "json_param", ".", "get", "(", "\"pad\"", ",", "pad", ")", "\n", "self", ".", "ignore_border", "=", "json_param", ".", "get", "(", "\"ignoreBorder\"", ",", "ignore_border", ")", "\n", "self", ".", "mode", "=", "json_param", ".", "get", "(", "\"mode\"", ",", "mode", ")", "\n", "self", ".", "stride", "=", "json_param", ".", "get", "(", "\"stride\"", ",", "stride", ")", "\n", "if", "self", ".", "stride", "is", "None", ":", "\n", "            ", "self", ".", "stride", "=", "self", ".", "size", "\n", "\n", "#output dim", "\n", "", "if", "self", ".", "ignore_border", ":", "\n", "            ", "h", "=", "int", "(", "math", ".", "floor", "(", "(", "self", ".", "input_shape", "[", "2", "]", "+", "2", "*", "self", ".", "pad", "[", "0", "]", "-", "self", ".", "size", "[", "0", "]", ")", "/", "self", ".", "stride", "[", "0", "]", ")", ")", "+", "1", "\n", "w", "=", "int", "(", "math", ".", "floor", "(", "(", "self", ".", "input_shape", "[", "3", "]", "+", "2", "*", "self", ".", "pad", "[", "1", "]", "-", "self", ".", "size", "[", "1", "]", ")", "/", "self", ".", "stride", "[", "1", "]", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "h", "=", "int", "(", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "2", "]", "+", "2", "*", "self", ".", "pad", "[", "0", "]", ")", "/", "self", ".", "stride", "[", "0", "]", ")", ")", "\n", "w", "=", "int", "(", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "3", "]", "+", "2", "*", "self", ".", "pad", "[", "1", "]", ")", "/", "self", ".", "stride", "[", "1", "]", ")", ")", "\n", "\n", "#theano optimizer is sometimes failing to use cudnn pooling!", "\n", "", "use_cudnn", "=", "(", "dnn", ".", "dnn_available", "(", ")", "and", "dnn", ".", "version", "(", ")", ">=", "(", "4000", ",", "4000", ")", "and", "self", ".", "ignore_border", ")", "\n", "if", "use_cudnn", ":", "\n", "            ", "self", ".", "output", "=", "dnn", ".", "dnn_pool", "(", "self", ".", "input", ",", "ws", "=", "self", ".", "size", ",", "pad", "=", "self", ".", "pad", ",", "stride", "=", "self", ".", "stride", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "tensor", ".", "signal", ".", "pool", ".", "pool_2d", "(", "self", ".", "input", ",", "ds", "=", "self", ".", "size", ",", "padding", "=", "self", ".", "pad", ",", "ignore_border", "=", "self", ".", "ignore_border", ",", "st", "=", "self", ".", "stride", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "", "self", ".", "output_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "h", ",", "w", ")", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool.PoolLayer.parse_desc": [[48, 59], ["bool", "layers.append", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "pool.PoolLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"P\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "size", "=", "(", "params", ".", "get", "(", "0", ")", ",", "params", ".", "get", "(", "0", ")", ")", "\n", "stride", "=", "(", "params", ".", "get", "(", "1", ",", "size", "[", "0", "]", ")", ",", "params", ".", "get", "(", "1", ",", "size", "[", "0", "]", ")", ")", "\n", "pad", "=", "(", "params", ".", "get", "(", "2", ",", "0", ")", ",", "params", ".", "get", "(", "2", ",", "0", ")", ")", "\n", "mode", "=", "\"average_inc_pad\"", "if", "\"A\"", "in", "tags", "else", "\"max\"", "\n", "ignore_border", "=", "bool", "(", "not", "\"B\"", "in", "tags", ")", "\n", "layers", ".", "append", "(", "PoolLayer", "(", "layers", ",", "size", ",", "stride", ",", "pad", ",", "ignore_border", "=", "ignore_border", ",", "mode", "=", "mode", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool.PoolLayer.export_json": [[60, 68], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"mode\"", ":", "self", ".", "mode", ",", "\n", "\"size\"", ":", "self", ".", "size", ",", "\n", "\"stride\"", ":", "self", ".", "stride", ",", "\n", "\"pad\"", ":", "self", ".", "pad", ",", "\n", "\"ignoreBorder\"", ":", "self", ".", "ignore_border", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.crop_mirror.CropMirrorLayer.__init__": [[13, 58], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "theano.zeros", "theano.zeros", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "denet.verbose", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.gt", "theano.gt", "theano.switch", "theano.switch", "theano.switch", "theano.switch", "theano.gt", "theano.gt", "theano.switch", "theano.switch", "theano.switch", "theano.switch", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "denet.layer.get_rng().random_integers", "denet.layer.get_rng().random_integers", "len", "denet.layer.get_rng().uniform", "denet.layer.get_train", "denet.layer.get_rng().uniform", "denet.layer.get_train", "numpy.full", "numpy.full", "theano.switch", "theano.switch", "theano.switch", "theano.switch", "denet.layer.get_rng", "denet.layer.get_rng", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_rng", "denet.layer.get_rng"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng"], ["def", "__init__", "(", "self", ",", "layers", ",", "crop_size", "=", "None", ",", "mirror_pr", "=", "0.0", ",", "flip_pr", "=", "0.0", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "crop_size", "=", "json_param", ".", "get", "(", "\"crop\"", ",", "crop_size", ")", "\n", "self", ".", "mirror_pr", "=", "json_param", ".", "get", "(", "\"mirror\"", ",", "mirror_pr", ")", "\n", "self", ".", "flip_pr", "=", "json_param", ".", "get", "(", "\"flip\"", ",", "flip_pr", ")", "\n", "self", ".", "output_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "self", ".", "output", "=", "[", "]", "\n", "\n", "zero", "=", "tensor", ".", "zeros", "(", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "numpy", ".", "int8", ")", "\n", "index_b", "=", "tensor", ".", "arange", "(", "self", ".", "input_shape", "[", "0", "]", ")", "\n", "index_c", "=", "tensor", ".", "arange", "(", "self", ".", "input_shape", "[", "1", "]", ")", "\n", "index_x", "=", "tensor", ".", "arange", "(", "self", ".", "crop_size", "[", "0", "]", ")", "[", "None", ",", ":", "]", "\n", "index_y", "=", "tensor", ".", "arange", "(", "self", ".", "crop_size", "[", "1", "]", ")", "[", "None", ",", ":", "]", "\n", "\n", "#randomly mirror (y-axis) data", "\n", "if", "self", ".", "mirror_pr", ">", "0.0", ":", "\n", "            ", "mirror", "=", "tensor", ".", "gt", "(", "get_rng", "(", ")", ".", "uniform", "(", "size", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ")", ",", "1.0", "-", "self", ".", "mirror_pr", ")", "\n", "mirror", "=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "mirror", ",", "zero", ")", "\n", "index_y", "=", "tensor", ".", "switch", "(", "mirror", "[", ":", ",", "None", "]", ",", "-", "index_y", "+", "self", ".", "crop_size", "[", "1", "]", "-", "1", ",", "index_y", ")", "\n", "\n", "#randomly flip (x-axis) data", "\n", "", "if", "self", ".", "flip_pr", ">", "0.0", ":", "\n", "            ", "flip", "=", "tensor", ".", "gt", "(", "get_rng", "(", ")", ".", "uniform", "(", "size", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ")", ",", "1.0", "-", "self", ".", "flip_pr", ")", "\n", "flip", "=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "flip", ",", "zero", ")", "\n", "index_x", "=", "tensor", ".", "switch", "(", "flip", "[", ":", ",", "None", "]", ",", "-", "index_x", "+", "self", ".", "crop_size", "[", "0", "]", "-", "1", ",", "index_x", ")", "\n", "\n", "#randomly offset crop", "\n", "", "dx", "=", "self", ".", "input_shape", "[", "2", "]", "-", "self", ".", "crop_size", "[", "0", "]", "\n", "dy", "=", "self", ".", "input_shape", "[", "3", "]", "-", "self", ".", "crop_size", "[", "1", "]", "\n", "if", "self", ".", "crop_size", "[", "0", "]", "!=", "self", ".", "input_shape", "[", "2", "]", "or", "self", ".", "crop_size", "[", "1", "]", "!=", "self", ".", "input_shape", "[", "3", "]", ":", "\n", "            ", "center_x", "=", "theano", ".", "shared", "(", "numpy", ".", "full", "(", "shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ",", "fill_value", "=", "dx", "//", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", ",", "borrow", "=", "False", ")", "\n", "center_y", "=", "theano", ".", "shared", "(", "numpy", ".", "full", "(", "shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ",", "fill_value", "=", "dy", "//", "2", ",", "dtype", "=", "numpy", ".", "int32", ")", ",", "borrow", "=", "False", ")", "\n", "offset_x", "=", "get_rng", "(", ")", ".", "random_integers", "(", "size", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ",", "low", "=", "0", ",", "high", "=", "dx", ")", "\n", "offset_y", "=", "get_rng", "(", ")", ".", "random_integers", "(", "size", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", ")", ",", "low", "=", "0", ",", "high", "=", "dy", ")", "\n", "index_x", "+=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "offset_x", ",", "center_x", ")", "[", ":", ",", "None", "]", "\n", "index_y", "+=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "offset_y", ",", "center_y", ")", "[", ":", ",", "None", "]", "\n", "\n", "#perform advanced indexing", "\n", "", "self", ".", "output", "=", "self", ".", "input", "[", "index_b", "[", ":", ",", "None", ",", "None", ",", "None", "]", ",", "index_c", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "index_x", "[", ":", ",", "None", ",", ":", ",", "None", "]", ",", "index_y", "[", ":", ",", "None", ",", "None", ",", ":", "]", "]", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.crop_mirror.CropMirrorLayer.parse_desc": [[62, 71], ["params.get", "params.get", "layers.append", "params.get", "params.get", "crop_mirror.CropMirrorLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"CM\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "crop_size", "=", "(", "params", ".", "get", "(", "0", ")", ",", "params", ".", "get", "(", "0", ")", ")", "\n", "mirror_pr", "=", "params", ".", "get", "(", "1", ",", "0.0", ")", "\n", "flip_pr", "=", "params", ".", "get", "(", "2", ",", "0.0", ")", "\n", "layers", ".", "append", "(", "CropMirrorLayer", "(", "layers", ",", "crop_size", ",", "mirror_pr", ",", "flip_pr", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.crop_mirror.CropMirrorLayer.export_json": [[72, 76], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"crop\"", ":", "self", ".", "crop_size", ",", "\"mirror\"", ":", "self", ".", "mirror_pr", ",", "\"flip\"", ":", "self", ".", "flip_pr", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.__init__": [[14, 71], ["denet.layer.AbstractLayer.__init__", "json_param.get", "tuple", "tuple", "json_param.get", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.tensor.nnet.abstract_conv.conv2d_grad_wrt_inputs", "theano.tensor.nnet.abstract_conv.conv2d_grad_wrt_inputs", "denet.verbose", "json_param.get", "json_param.get", "type", "float", "numpy.zeros", "numpy.asarray", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "Exception", "deconvolution.DeconvLayer.omega.dimshuffle", "len", "math.sqrt", "numpy.random.uniform", "numpy.random.normal", "math.sqrt", "numpy.zeros", "str", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], ["def", "__init__", "(", "self", ",", "layers", ",", "filter_shape", "=", "None", ",", "filter_stride", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "True", ",", "border_mode", "=", "\"valid\"", ",", "wb", "=", "\"he-backward\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "border_mode", "=", "json_param", ".", "get", "(", "\"border\"", ",", "border_mode", ")", "\n", "self", ".", "filter_shape", "=", "tuple", "(", "json_param", ".", "get", "(", "\"shape\"", ",", "filter_shape", ")", ")", "\n", "self", ".", "stride", "=", "tuple", "(", "json_param", ".", "get", "(", "\"stride\"", ",", "filter_stride", ")", ")", "\n", "self", ".", "use_bias", "=", "json_param", ".", "get", "(", "\"useBias\"", ",", "use_bias", ")", "\n", "self", ".", "size", "=", "(", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", "\n", "\n", "#use initialization", "\n", "if", "type", "(", "wb", ")", "is", "float", ":", "\n", "            ", "self", ".", "w_bound", "=", "float", "(", "wb", ")", "\n", "", "elif", "\"he-forward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "1", "]", ")", ")", "\n", "", "elif", "\"he-backward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "0", "]", ")", ")", "\n", "", "elif", "\"xavier-forward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "1", "]", ")", ")", "\n", "", "elif", "\"xavier-backward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "0", "]", ")", ")", "\n", "\n", "#initialize weights", "\n", "", "if", "self", ".", "w_bound", ">", "0", ":", "\n", "            ", "if", "\"uniform\"", "in", "wb", ":", "\n", "                ", "w", "=", "numpy", ".", "random", ".", "uniform", "(", "-", "self", ".", "w_bound", ",", "self", ".", "w_bound", ",", "size", "=", "self", ".", "filter_shape", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "numpy", ".", "random", ".", "normal", "(", "0.0", ",", "self", ".", "w_bound", ",", "size", "=", "self", ".", "filter_shape", ")", "\n", "", "", "else", ":", "\n", "            ", "w", "=", "numpy", ".", "zeros", "(", "shape", "=", "self", ".", "filter_shape", ")", "\n", "", "self", ".", "omega", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "w", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"deconv omega\"", ")", "\n", "\n", "#initialize bias", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "beta", "=", "theano", ".", "shared", "(", "value", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "filter_shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"deconv beta\"", ")", "\n", "\n", "#calculate output shape", "\n", "", "if", "self", ".", "border_mode", "==", "\"half\"", ":", "\n", "            ", "fh", "=", "self", ".", "filter_shape", "[", "2", "]", "//", "2", "\n", "fw", "=", "self", ".", "filter_shape", "[", "3", "]", "//", "2", "\n", "h", "=", "self", ".", "input_shape", "[", "2", "]", "*", "self", ".", "stride", "[", "0", "]", "-", "2", "*", "fh", "+", "self", ".", "filter_shape", "[", "2", "]", "-", "1", "\n", "w", "=", "self", ".", "input_shape", "[", "3", "]", "*", "self", ".", "stride", "[", "1", "]", "-", "2", "*", "fw", "+", "self", ".", "filter_shape", "[", "3", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown border mode: \"", "+", "str", "(", "self", ".", "border_mode", ")", ")", "\n", "\n", "", "self", ".", "output_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "filter_shape", "[", "0", "]", ",", "h", ",", "w", ")", "\n", "self", ".", "output", "=", "conv2d_grad_wrt_inputs", "(", "self", ".", "input", ",", "self", ".", "omega", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ",", "self", ".", "output_shape", ",", "\n", "(", "self", ".", "filter_shape", "[", "1", "]", ",", "self", ".", "filter_shape", "[", "0", "]", ",", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", ",", "\n", "self", ".", "border_mode", ",", "self", ".", "stride", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "output", "+=", "self", ".", "beta", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.parse_desc": [[75, 89], ["bool", "bool", "layers.append", "deconvolution.DeconvLayer", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"DC\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "use_bias", "=", "bool", "(", "not", "\"B\"", "in", "tags", ")", "\n", "if", "bool", "(", "\"X\"", "in", "tags", ")", ":", "\n", "            ", "filter_shape", "=", "(", "params", ".", "get", "(", "0", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "1", ")", ",", "params", ".", "get", "(", "2", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "3", ",", "1", ")", ",", "params", ".", "get", "(", "4", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "filter_shape", "=", "(", "params", ".", "get", "(", "0", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "1", ",", "1", ")", ",", "params", ".", "get", "(", "1", ",", "1", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "2", ",", "1", ")", ",", "params", ".", "get", "(", "2", ",", "1", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "DeconvLayer", "(", "layers", ",", "filter_shape", ",", "filter_stride", ",", "use_bias", ",", "params", "[", "\"borderMode\"", "]", ",", "params", "[", "\"wb\"", "]", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.parameters": [[90, 92], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", ",", "self", ".", "beta", "]", "if", "self", ".", "use_bias", "else", "[", "self", ".", "omega", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.weights": [[93, 95], ["None"], "methods", ["None"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.biases": [[96, 98], ["None"], "methods", ["None"], ["", "def", "biases", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "beta", "]", "if", "self", ".", "use_bias", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.import_json": [[99, 104], ["super().import_json", "deconvolution.DeconvLayer.omega.set_value", "deconvolution.DeconvLayer.beta.set_value", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "        ", "super", "(", ")", ".", "import_json", "(", "json_param", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "beta", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"bias\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "", "self", ".", "omega", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"weight\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.deconvolution.DeconvLayer.export_json": [[105, 115], ["super().export_json", "super().export_json.update", "deconvolution.DeconvLayer.omega.get_value", "deconvolution.DeconvLayer.beta.get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"shape\"", ":", "self", ".", "filter_shape", ",", "\n", "\"stride\"", ":", "self", ".", "stride", ",", "\n", "\"border\"", ":", "self", ".", "border_mode", ",", "\n", "\"useBias\"", ":", "self", ".", "use_bias", ",", "\n", "\"bias\"", ":", "self", ".", "beta", ".", "get_value", "(", ")", "if", "self", ".", "use_bias", "else", "None", ",", "\n", "\"weight\"", ":", "self", ".", "omega", ".", "get_value", "(", ")", "}", ")", "\n", "\n", "return", "json", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grid_size", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.__eq__": [[12, 14], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "grid_size", "==", "other", ".", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.__hash__": [[15, 17], ["hash", "type"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "type", "(", "self", ")", ",", "self", ".", "grid_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.__str__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.make_node": [[21, 28], ["theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.Apply", "theano.Apply", "theano.Apply", "theano.Apply", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type"], "methods", ["None"], ["", "def", "make_node", "(", "self", ",", "fmap", ",", "bbox", ")", ":", "\n", "        ", "fmap", "=", "as_cuda_ndarray_variable", "(", "fmap", ")", "\n", "bbox", "=", "as_cuda_ndarray_variable", "(", "bbox", ")", "\n", "\n", "assert", "fmap", ".", "ndim", "==", "4", "\n", "assert", "bbox", ".", "ndim", "==", "4", "\n", "return", "theano", ".", "Apply", "(", "self", ",", "[", "fmap", ",", "bbox", "]", ",", "[", "fmap", ".", "type", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.infer_shape": [[29, 33], ["None"], "methods", ["None"], ["", "def", "infer_shape", "(", "self", ",", "node", ",", "in_shapes", ")", ":", "\n", "        ", "b", ",", "f", ",", "_", ",", "_", "=", "in_shapes", "[", "0", "]", "\n", "_", ",", "j", ",", "i", ",", "_", "=", "in_shapes", "[", "1", "]", "\n", "return", "[", "(", "b", ",", "f", "*", "self", ".", "grid_size", "*", "self", ".", "grid_size", "+", "2", ",", "j", ",", "i", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.grad": [[35, 39], ["theano.gradient.grad_undefined", "theano.gradient.grad_undefined", "theano.gradient.grad_undefined", "theano.gradient.grad_undefined", "denet_sparse_op.DeNetSparseGradOp"], "methods", ["None"], ["", "def", "grad", "(", "self", ",", "inputs", ",", "output_grads", ")", ":", "\n", "        ", "fmap", ",", "bbox", "=", "inputs", "\n", "dy", ",", "=", "output_grads", "\n", "return", "[", "DeNetSparseGradOp", "(", "self", ".", "grid_size", ")", "(", "fmap", ",", "bbox", ",", "dy", ")", ",", "theano", ".", "gradient", ".", "grad_undefined", "(", "self", ",", "1", ",", "inputs", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.c_support_code": [[40, 87], ["None"], "methods", ["None"], ["", "def", "c_support_code", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\n        static __global__ void k_sparse_sample%i(float* fmap, size_t fs0, size_t fs1, size_t fs2, size_t fs3, \n                                                float* bbox, size_t bs0, size_t bs1, size_t bs2, size_t bs3,\n                                                float* r, size_t rs0, size_t rs1, size_t rs2, size_t rs3,\n                                                size_t fn, size_t h, size_t w, size_t sn, size_t bs){\n\n            size_t index = blockIdx.x*blockDim.x + threadIdx.x;\n            if (index >= (bs*sn*sn))\n                return;\n\n            int b,j,i;\n            b = index / (sn*sn);\n            index -= b*sn*sn;\n            j = index / sn;\n            index -= j*sn;\n            i = index;\n            //printf(\"b=%%i,j=%%i,i=%%i,bs=%%i\\\\n\",b,j,i,bs);\n        \n            const size_t gs = %i;\n            size_t bbox_offset = b*bs0 + j*bs1 + i*bs2;\n            float bbox_x0 = bbox[bbox_offset + 0*bs3];\n            float bbox_y0 = bbox[bbox_offset + 1*bs3];\n            float bbox_x1 = bbox[bbox_offset + 2*bs3];\n            float bbox_y1 = bbox[bbox_offset + 3*bs3];\n            float bbox_h = bbox_y1 - bbox_y0;\n            float bbox_w = bbox_x1 - bbox_x0;\n            float k = 1.0f / (gs-1);\n            \n            size_t ff = 0;\n            for(size_t yi = 0; yi < gs; yi++){\n                float y = bbox_y0 + yi*bbox_h*k;\n                size_t ys = lroundf(max(0.0f, min(h - 1.0f, y*h)));\n                for(size_t xi = 0; xi < gs; xi++){\n                    float x = bbox_x0 + xi*bbox_w*k;\n                    size_t xs = lroundf(max(0.0f, min(w - 1.0f, x*w)));\n                    //printf(\"%%f,%%f = %%z,%%z\\\\n\", x, y, xs, ys);\n                    for(size_t f=0; f < fn; f++){\n                        r[b*rs0 + ff*rs1 + j*rs2 + i*rs3] = fmap[b*fs0 + f*fs1 + ys*fs2 + xs*fs3];\n                        ff++;\n                    }\n                }\n            }\n            r[b*rs0 + ff*rs1 + j*rs2 + i*rs3] = bbox_h;\n            r[b*rs0 + (ff+1)*rs1 + j*rs2 + i*rs3] = bbox_w;\n        };\n        \"\"\"", "%", "(", "self", ".", "grid_size", ",", "self", ".", "grid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.c_code": [[88, 144], ["locals"], "methods", ["None"], ["", "def", "c_code", "(", "self", ",", "node", ",", "name", ",", "inputs", ",", "output", ",", "sub", ")", ":", "\n", "        ", "fmap", ",", "bbox", "=", "inputs", "\n", "result", ",", "=", "output", "\n", "fail", "=", "sub", "[", "'fail'", "]", "\n", "grid_size", "=", "self", ".", "grid_size", "\n", "return", "\"\"\"\n        size_t batch_size = CudaNdarray_HOST_DIMS(%(fmap)s)[0];        \n        size_t feature_num = CudaNdarray_HOST_DIMS(%(fmap)s)[1];        \n        size_t height = CudaNdarray_HOST_DIMS(%(fmap)s)[2];        \n        size_t width = CudaNdarray_HOST_DIMS(%(fmap)s)[3];        \n        size_t sample_num = CudaNdarray_HOST_DIMS(%(bbox)s)[1]; \n\n        //choose grid / block dim\n        size_t total_threads = batch_size*sample_num*sample_num;\n        size_t threads_per_block = 1024;\n        size_t grid_num = std::ceil((double)total_threads / threads_per_block);\n        dim3 grid_dim(grid_num, 1, 1);\n        dim3 block_dim(threads_per_block, 1, 1); \n        cudaError_t err;\n        \n        size_t grid_size = %(grid_size)i;\n        int dims[] = {batch_size, feature_num*grid_size*grid_size + 2, sample_num, sample_num};\n        if (CudaNdarray_prep_output(&%(result)s, 4, dims) != 0){\n            PyErr_Format(PyExc_RuntimeError, \"Failed to allocate output array\");\n            %(fail)s\n        }\n\n        //printf(\"result shape =(%%i,%%i,%%i,%%i)\", CudaNdarray_HOST_DIMS(%(result)s)[0], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[1], CudaNdarray_HOST_DIMS(%(result)s)[2], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[3]);\n        //printf(\"batch_size %%i, feature_num=%%i, grid_size=%%i, sample_num=%%i\\\\n\", batch_size, feature_num, grid_size, sample_num);\n        k_sparse_sample%(grid_size)i<<<grid_dim, block_dim>>>(\n            CudaNdarray_DEV_DATA(%(fmap)s), \n            CudaNdarray_HOST_STRIDES(%(fmap)s)[0],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[1],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[2],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[3],\n            CudaNdarray_DEV_DATA(%(bbox)s), \n            CudaNdarray_HOST_STRIDES(%(bbox)s)[0],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[1],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[2],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[3],\n            CudaNdarray_DEV_DATA(%(result)s), \n            CudaNdarray_HOST_STRIDES(%(result)s)[0],\n            CudaNdarray_HOST_STRIDES(%(result)s)[1],\n            CudaNdarray_HOST_STRIDES(%(result)s)[2],\n            CudaNdarray_HOST_STRIDES(%(result)s)[3],\n            feature_num, height, width, sample_num, batch_size);\n        \n        CNDA_THREAD_SYNC;             \n        err = cudaGetLastError();\n        if (err != cudaSuccess){\n            PyErr_Format(PyExc_RuntimeError, \"Cuda error: %%s:\\\\n\", cudaGetErrorString(err));\n            %(fail)s\n        }\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseOp.c_code_cache_version": [[145, 147], ["None"], "methods", ["None"], ["", "def", "c_code_cache_version", "(", "self", ")", ":", "\n", "        ", "return", "(", "200", ",", "103", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.__init__": [[149, 151], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grid_size", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.__eq__": [[152, 154], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "grid_size", "==", "other", ".", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.__hash__": [[155, 157], ["hash", "type"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "type", "(", "self", ")", ",", "self", ".", "grid_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.__str__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.make_node": [[161, 168], ["theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.Apply", "theano.Apply", "theano.Apply", "theano.Apply", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type"], "methods", ["None"], ["", "def", "make_node", "(", "self", ",", "fmap", ",", "bbox", ",", "dy", ")", ":", "\n", "        ", "fmap", "=", "as_cuda_ndarray_variable", "(", "fmap", ")", "\n", "bbox", "=", "as_cuda_ndarray_variable", "(", "bbox", ")", "\n", "dy", "=", "as_cuda_ndarray_variable", "(", "dy", ")", "\n", "\n", "assert", "bbox", ".", "ndim", "==", "4", "and", "dy", ".", "ndim", "==", "4", "\n", "return", "theano", ".", "Apply", "(", "self", ",", "[", "fmap", ",", "bbox", ",", "dy", "]", ",", "[", "fmap", ".", "type", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.c_support_code": [[169, 214], ["None"], "methods", ["None"], ["", "def", "c_support_code", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\n        static __global__ void k_sparse_sample_grad%i(float* df, size_t fs0, size_t fs1, size_t fs2, size_t fs3, \n                                                      float* bbox, size_t bs0, size_t bs1, size_t bs2, size_t bs3,\n                                                      float* r, size_t rs0, size_t rs1, size_t rs2, size_t rs3,\n                                                      size_t fn, size_t h, size_t w, size_t sn, size_t bs){\n\n            size_t index = blockIdx.x*blockDim.x + threadIdx.x;\n            if (index >= (bs*sn*sn))\n                return;\n\n            int b,j,i;\n            b = index / (sn*sn);\n            index -= b*sn*sn;\n            j = index / sn;\n            index -= j*sn;\n            i = index;\n            //printf(\"b=%%i,j=%%i,i=%%i,bs=%%i\\\\n\",b,j,i,bs);\n        \n            const size_t gs = %i;\n            size_t bbox_offset = b*bs0 + j*bs1 + i*bs2;\n            float bbox_x0 = bbox[bbox_offset + 0*bs3];\n            float bbox_y0 = bbox[bbox_offset + 1*bs3];\n            float bbox_x1 = bbox[bbox_offset + 2*bs3];\n            float bbox_y1 = bbox[bbox_offset + 3*bs3];\n            float bbox_h = bbox_y1 - bbox_y0;\n            float bbox_w = bbox_x1 - bbox_x0;\n            float k = 1.0f / (gs-1);\n            \n            size_t ff = 0;\n            for(size_t yi = 0; yi < gs; yi++){\n                float y = bbox_y0 + yi*bbox_h*k;\n                size_t ys = lroundf(max(0.0f, min(h - 1.0f, y*h)));\n                for(size_t xi = 0; xi < gs; xi++){\n                    float x = bbox_x0 + xi*bbox_w*k;\n                    size_t xs = lroundf(max(0.0f, min(w - 1.0f, x*w)));\n                    //printf(\"%%f,%%f = %%z,%%z\\\\n\", x, y, xs, ys);\n                    for(size_t f=0; f < fn; f++){\n                        atomicAdd(r + b*rs0 + f*rs1 + ys*rs2 + xs*rs3, df[b*fs0 + ff*fs1 + j*fs2 + i*fs3]);\n                        ff++;\n                    }\n                }\n            }\n        };\n        \"\"\"", "%", "(", "self", ".", "grid_size", ",", "self", ".", "grid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.c_code": [[215, 276], ["locals"], "methods", ["None"], ["", "def", "c_code", "(", "self", ",", "node", ",", "name", ",", "inputs", ",", "output", ",", "sub", ")", ":", "\n", "        ", "fmap", ",", "bbox", ",", "dy", "=", "inputs", "\n", "result", ",", "=", "output", "\n", "fail", "=", "sub", "[", "'fail'", "]", "\n", "grid_size", "=", "self", ".", "grid_size", "\n", "return", "\"\"\"\n        size_t batch_size = CudaNdarray_HOST_DIMS(%(fmap)s)[0];        \n        size_t feature_num = CudaNdarray_HOST_DIMS(%(fmap)s)[1];        \n        size_t height = CudaNdarray_HOST_DIMS(%(fmap)s)[2];        \n        size_t width = CudaNdarray_HOST_DIMS(%(fmap)s)[3];        \n        size_t sample_num = CudaNdarray_HOST_DIMS(%(bbox)s)[1]; \n\n        //choose grid / block dim\n        size_t total_threads = batch_size*sample_num*sample_num;\n        size_t threads_per_block = 1024;\n        size_t grid_num = std::ceil((double)total_threads / threads_per_block);\n        dim3 grid_dim(grid_num, 1, 1);\n        dim3 block_dim(threads_per_block, 1, 1); \n        cudaError_t err;\n        \n        size_t grid_size = %(grid_size)i;\n        int dims[] = {batch_size, feature_num, height, width};\n        if (CudaNdarray_prep_output(&%(result)s, 4, dims) != 0){\n            PyErr_Format(PyExc_RuntimeError, \"Failed to allocate output array\");\n            %(fail)s\n        }\n\n        if (cudaMemset(%(result)s->devdata, 0, 4*batch_size*feature_num*height*width) != cudaSuccess){\n            PyErr_Format(PyExc_RuntimeError, \"Failed to zero output array\");\n            %(fail)s\n        }\n\n        //printf(\"result shape =(%%i,%%i,%%i,%%i)\", CudaNdarray_HOST_DIMS(%(result)s)[0], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[1], CudaNdarray_HOST_DIMS(%(result)s)[2], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[3]);\n        //printf(\"batch_size %%i, feature_num=%%i, grid_size=%%i, sample_num=%%i\\\\n\", batch_size, feature_num, grid_size, sample_num);\n        k_sparse_sample_grad%(grid_size)i<<<grid_dim, block_dim>>>(\n            CudaNdarray_DEV_DATA(%(dy)s), \n            CudaNdarray_HOST_STRIDES(%(dy)s)[0],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[1],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[2],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[3],\n            CudaNdarray_DEV_DATA(%(bbox)s), \n            CudaNdarray_HOST_STRIDES(%(bbox)s)[0],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[1],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[2],\n            CudaNdarray_HOST_STRIDES(%(bbox)s)[3],\n            CudaNdarray_DEV_DATA(%(result)s), \n            CudaNdarray_HOST_STRIDES(%(result)s)[0],\n            CudaNdarray_HOST_STRIDES(%(result)s)[1],\n            CudaNdarray_HOST_STRIDES(%(result)s)[2],\n            CudaNdarray_HOST_STRIDES(%(result)s)[3],\n            feature_num, height, width, sample_num, batch_size);\n        \n        CNDA_THREAD_SYNC;             \n        err = cudaGetLastError();\n        if (err != cudaSuccess){\n            PyErr_Format(PyExc_RuntimeError, \"Cuda error: %%s:\\\\n\", cudaGetErrorString(err));\n            %(fail)s\n        }\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse_op.DeNetSparseGradOp.c_code_cache_version": [[277, 279], ["None"], "methods", ["None"], ["", "def", "c_code_cache_version", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.__init__": [[11, 23], ["denet.layer.AbstractLayer.__init__", "json_param.get", "activation.ActivationLayer.apply", "denet.verbose", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.apply", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "activation", "=", "\"relu\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "self", ".", "activation", "=", "json_param", ".", "get", "(", "\"activation\"", ",", "activation", ")", "\n", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "self", ".", "output", "=", "ActivationLayer", ".", "apply", "(", "self", ".", "input", ",", "self", ".", "activation", ")", "\n", "\n", "#apply activation", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "# logging.verbose(\"Adding\", self, \"layer - input:\", self.input_shape, \" activation:\", self.activation)", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.apply": [[25, 45], ["theano.nnet.sigmoid", "theano.nnet.sigmoid", "theano.maximum", "theano.maximum", "theano.nnet.relu", "theano.nnet.relu", "theano.nnet.elu", "theano.nnet.elu", "theano.tanh", "theano.tanh", "theano.nnet.softmax", "theano.nnet.softmax", "theano.nnet.softplus", "theano.nnet.softplus", "Exception"], "methods", ["None"], ["", "def", "apply", "(", "x", ",", "activation", ")", ":", "\n", "        ", "if", "activation", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "elif", "activation", "==", "\"sigmoid\"", ":", "\n", "            ", "return", "tensor", ".", "nnet", ".", "sigmoid", "(", "x", ")", "\n", "", "elif", "activation", "==", "\"relu-safe\"", ":", "\n", "            ", "return", "tensor", ".", "maximum", "(", "x", ",", "0.0", ")", "\n", "", "elif", "activation", "==", "\"relu\"", ":", "\n", "#Note: tensor.nnet.relu sometimes give small negative numbers!", "\n", "            ", "return", "tensor", ".", "nnet", ".", "relu", "(", "x", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "return", "tensor", ".", "nnet", ".", "elu", "(", "x", ")", "\n", "", "elif", "activation", "==", "\"tanh\"", ":", "\n", "            ", "return", "tensor", ".", "tanh", "(", "x", ")", "\n", "", "elif", "activation", "==", "\"softmax\"", ":", "\n", "            ", "return", "tensor", ".", "nnet", ".", "softmax", "(", "x", ")", "\n", "", "elif", "activation", "==", "\"softplus\"", ":", "\n", "            ", "return", "tensor", ".", "nnet", ".", "softplus", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown activation type:\"", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.parse_desc": [[46, 52], ["layers.append", "activation.ActivationLayer"], "methods", ["None"], ["", "", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"A\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "layers", ".", "append", "(", "ActivationLayer", "(", "layers", ",", "params", "[", "\"activation\"", "]", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.export_json": [[53, 57], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"activation\"", ":", "self", ".", "activation", "}", ")", "\n", "return", "json", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.__eq__": [[12, 14], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "size", "==", "other", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.__hash__": [[15, 17], ["hash", "type"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "type", "(", "self", ")", ",", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.__str__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.make_node": [[21, 25], ["theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.Apply", "theano.Apply", "theano.Apply", "theano.Apply", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type"], "methods", ["None"], ["", "def", "make_node", "(", "self", ",", "fmap", ")", ":", "\n", "        ", "fmap", "=", "as_cuda_ndarray_variable", "(", "fmap", ")", "\n", "assert", "fmap", ".", "ndim", "==", "4", "\n", "return", "theano", ".", "Apply", "(", "self", ",", "[", "fmap", "]", ",", "[", "fmap", ".", "type", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.infer_shape": [[26, 29], ["None"], "methods", ["None"], ["", "def", "infer_shape", "(", "self", ",", "node", ",", "in_shapes", ")", ":", "\n", "        ", "b", ",", "f", ",", "h", ",", "w", "=", "in_shapes", "[", "0", "]", "\n", "return", "[", "(", "b", ",", "f", ",", "h", "*", "self", ".", "size", "[", "1", "]", ",", "w", "*", "self", ".", "size", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.grad": [[30, 33], ["pool_inv_op.PoolInvGradOp"], "methods", ["None"], ["", "def", "grad", "(", "self", ",", "inputs", ",", "output_grads", ")", ":", "\n", "        ", "dy", ",", "=", "output_grads", "\n", "return", "[", "PoolInvGradOp", "(", "self", ".", "size", ")", "(", "dy", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.c_support_code": [[34, 65], ["locals"], "methods", ["None"], ["", "def", "c_support_code", "(", "self", ")", ":", "\n", "        ", "size_w", "=", "self", ".", "size", "[", "0", "]", "\n", "size_h", "=", "self", ".", "size", "[", "1", "]", "\n", "return", "\"\"\"\n        static __global__ void k_pool_inv_%(size_w)ix%(size_h)i(float* fmap, size_t fs0, size_t fs1, size_t fs2, size_t fs3, \n                                                                float* r, size_t rs0, size_t rs1, size_t rs2, size_t rs3, \n                                                                size_t bs, size_t fn, size_t h, size_t w){\n\n            size_t index = blockIdx.x*blockDim.x + threadIdx.x;\n            if (index >= (bs*h*w))\n                return;\n\n            int b,y,x;\n            b = index / (h*w);\n            index -= b*(h*w);\n            y = index / w;\n            index -= y*w;\n            x = index;\n            //printf(\"b=%%i,y=%%i,x=%%i\\\\n\",b,y,x);\n\n            const size_t size_w = %(size_w)i;\n            const size_t size_h = %(size_h)i;\n            for(size_t f=0; f < fn; f++){\n                for(size_t ry = y*size_h; ry < (y*size_h + size_h); ry++){\n                    for(size_t rx = x*size_w; rx < (x*size_w + size_w); rx++){\n                        r[b*rs0 + f*rs1 + ry*rs2 + rx*rs3] = fmap[b*fs0 + f*fs1 + y*fs2 + x*fs3];\n                    }\n                }\n            }\n        };\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.c_code": [[66, 118], ["locals"], "methods", ["None"], ["", "def", "c_code", "(", "self", ",", "node", ",", "name", ",", "inputs", ",", "output", ",", "sub", ")", ":", "\n", "        ", "fmap", ",", "=", "inputs", "\n", "result", ",", "=", "output", "\n", "fail", "=", "sub", "[", "'fail'", "]", "\n", "size_w", "=", "self", ".", "size", "[", "0", "]", "\n", "size_h", "=", "self", ".", "size", "[", "1", "]", "\n", "return", "\"\"\"\n        size_t batch_size = CudaNdarray_HOST_DIMS(%(fmap)s)[0];        \n        size_t feature_num = CudaNdarray_HOST_DIMS(%(fmap)s)[1];        \n        size_t height = CudaNdarray_HOST_DIMS(%(fmap)s)[2];        \n        size_t width = CudaNdarray_HOST_DIMS(%(fmap)s)[3];        \n\n        //choose grid / block dim\n        size_t total_threads = batch_size*height*width;\n        size_t threads_per_block = 1024;\n        size_t grid_num = std::ceil((double)total_threads / threads_per_block);\n        dim3 grid_dim(grid_num, 1, 1);\n        dim3 block_dim(threads_per_block, 1, 1); \n        cudaError_t err;\n        \n        const size_t size_w = %(size_w)i;\n        const size_t size_h = %(size_h)i;\n        int dims[] = {batch_size, feature_num, height*size_h, width*size_w};\n        if (CudaNdarray_prep_output(&%(result)s, 4, dims) != 0){\n            PyErr_Format(PyExc_RuntimeError, \"Failed to allocate output array\");\n            %(fail)s\n        }\n\n        //printf(\"result shape =(%%i,%%i,%%i,%%i)\", CudaNdarray_HOST_DIMS(%(result)s)[0], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[1], CudaNdarray_HOST_DIMS(%(result)s)[2], \n        //    CudaNdarray_HOST_DIMS(%(result)s)[3]);\n        //printf(\"batch_size %%i, feature_num=%%i, grid_size=%%i, sample_num=%%i\\\\n\", batch_size, feature_num, grid_size, sample_num);\n        k_pool_inv_%(size_w)ix%(size_h)i<<<grid_dim, block_dim>>>(\n            CudaNdarray_DEV_DATA(%(fmap)s), \n            CudaNdarray_HOST_STRIDES(%(fmap)s)[0],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[1],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[2],\n            CudaNdarray_HOST_STRIDES(%(fmap)s)[3],\n            CudaNdarray_DEV_DATA(%(result)s), \n            CudaNdarray_HOST_STRIDES(%(result)s)[0],\n            CudaNdarray_HOST_STRIDES(%(result)s)[1],\n            CudaNdarray_HOST_STRIDES(%(result)s)[2],\n            CudaNdarray_HOST_STRIDES(%(result)s)[3], \n            batch_size, feature_num, height, width);\n        \n        CNDA_THREAD_SYNC;             \n        err = cudaGetLastError();\n        if (err != cudaSuccess){\n            PyErr_Format(PyExc_RuntimeError, \"Cuda error: %%s:\\\\n\", cudaGetErrorString(err));\n            %(fail)s\n        }\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvOp.c_code_cache_version": [[119, 121], ["None"], "methods", ["None"], ["", "def", "c_code_cache_version", "(", "self", ")", ":", "\n", "        ", "return", "(", "0", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.__init__": [[123, 125], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.__eq__": [[126, 128], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "size", "==", "other", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.__hash__": [[129, 131], ["hash", "type"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "type", "(", "self", ")", ",", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.__str__": [[132, 134], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.make_node": [[135, 139], ["theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable", "theano.Apply", "theano.Apply", "theano.Apply", "theano.Apply", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type", "theano.sandbox.cuda.basic_ops.as_cuda_ndarray_variable.type"], "methods", ["None"], ["", "def", "make_node", "(", "self", ",", "dy", ")", ":", "\n", "        ", "dy", "=", "as_cuda_ndarray_variable", "(", "dy", ")", "\n", "assert", "dy", ".", "ndim", "==", "4", "\n", "return", "theano", ".", "Apply", "(", "self", ",", "[", "dy", "]", ",", "[", "dy", ".", "type", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.c_support_code": [[140, 171], ["locals"], "methods", ["None"], ["", "def", "c_support_code", "(", "self", ")", ":", "\n", "        ", "size_w", "=", "self", ".", "size", "[", "0", "]", "\n", "size_h", "=", "self", ".", "size", "[", "1", "]", "\n", "return", "\"\"\"\n        static __global__ void k_pool_inv_grad_%(size_w)ix%(size_h)i(float* fmap, size_t fs0, size_t fs1, size_t fs2, size_t fs3, \n                                                                     float* r, size_t rs0, size_t rs1, size_t rs2, size_t rs3, \n                                                                     size_t bs, size_t fn, size_t h, size_t w){\n\n            size_t index = blockIdx.x*blockDim.x + threadIdx.x;\n            if (index >= (bs*h*w))\n                return;\n\n            int b,y,x;\n            b = index / (h*w);\n            index -= b*(h*w);\n            y = index / w;\n            index -= y*w;\n            x = index;\n\n            const size_t size_w = %(size_w)i;\n            const size_t size_h = %(size_h)i;\n            for(size_t f=0; f < fn; f++){\n                r[b*rs0 + f*rs1 + y*rs2 + x*rs3] = 0.0;\n                for(size_t ry = y*size_h; ry < (y*size_h + size_h); ry++){\n                    for(size_t rx = x*size_w; rx < (x*size_w + size_w); rx++){\n                        r[b*rs0 + f*rs1 + y*rs2 + x*rs3] += fmap[b*fs0 + f*fs1 + ry*fs2 + rx*fs3];\n                    }\n                }\n            }\n        };\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.c_code": [[172, 218], ["locals"], "methods", ["None"], ["", "def", "c_code", "(", "self", ",", "node", ",", "name", ",", "inputs", ",", "output", ",", "sub", ")", ":", "\n", "        ", "dy", ",", "=", "inputs", "\n", "result", ",", "=", "output", "\n", "fail", "=", "sub", "[", "'fail'", "]", "\n", "size_w", "=", "self", ".", "size", "[", "0", "]", "\n", "size_h", "=", "self", ".", "size", "[", "1", "]", "\n", "return", "\"\"\"\n        size_t batch_size = CudaNdarray_HOST_DIMS(%(dy)s)[0];        \n        size_t feature_num = CudaNdarray_HOST_DIMS(%(dy)s)[1];        \n        size_t height = CudaNdarray_HOST_DIMS(%(dy)s)[2] / %(size_h)i;        \n        size_t width = CudaNdarray_HOST_DIMS(%(dy)s)[3] / %(size_w)i;        \n\n        //choose grid / block dim\n        size_t total_threads = batch_size*height*width;\n        size_t threads_per_block = 1024;\n        size_t grid_num = std::ceil((double)total_threads / threads_per_block);\n        dim3 grid_dim(grid_num, 1, 1);\n        dim3 block_dim(threads_per_block, 1, 1); \n        cudaError_t err;\n        \n        int dims[] = {batch_size, feature_num, height, width};\n        if (CudaNdarray_prep_output(&%(result)s, 4, dims) != 0){\n            PyErr_Format(PyExc_RuntimeError, \"Failed to allocate output array\");\n            %(fail)s\n        }\n\n        k_pool_inv_grad_%(size_w)ix%(size_h)i<<<grid_dim, block_dim>>>(\n            CudaNdarray_DEV_DATA(%(dy)s), \n            CudaNdarray_HOST_STRIDES(%(dy)s)[0],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[1],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[2],\n            CudaNdarray_HOST_STRIDES(%(dy)s)[3],\n            CudaNdarray_DEV_DATA(%(result)s), \n            CudaNdarray_HOST_STRIDES(%(result)s)[0],\n            CudaNdarray_HOST_STRIDES(%(result)s)[1],\n            CudaNdarray_HOST_STRIDES(%(result)s)[2],\n            CudaNdarray_HOST_STRIDES(%(result)s)[3], \n            batch_size, feature_num, height, width);\n        \n        CNDA_THREAD_SYNC;             \n        err = cudaGetLastError();\n        if (err != cudaSuccess){\n            PyErr_Format(PyExc_RuntimeError, \"Cuda error: %%s:\\\\n\", cudaGetErrorString(err));\n            %(fail)s\n        }\n        \"\"\"", "%", "locals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv_op.PoolInvGradOp.c_code_cache_version": [[219, 221], ["None"], "methods", ["None"], ["", "def", "c_code_cache_version", "(", "self", ")", ":", "\n", "        ", "return", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.__init__": [[14, 52], ["denet.layer.AbstractLayer.__init__", "json_param.get", "regression.RegressionLayer.log_softmax", "denet.verbose", "len", "theano.zeros", "theano.zeros", "enumerate", "len", "theano.exp().mean", "theano.exp().mean", "theano.exp", "theano.exp", "len", "len", "theano.set_subtensor", "theano.set_subtensor", "theano.exp", "theano.exp", "range", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "use_center", "=", "True", ",", "valid", "=", "[", "]", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#used for determining multiview map", "\n", "self", ".", "multiview_layers", "=", "layers", "\n", "\n", "if", "use_center", ":", "\n", "            ", "yc", "=", "self", ".", "input_shape", "[", "-", "2", "]", "//", "2", "\n", "xc", "=", "self", ".", "input_shape", "[", "-", "1", "]", "//", "2", "\n", "valid", "=", "[", "(", "0", ",", "yc", ",", "xc", ")", "]", "\n", "\n", "", "self", ".", "valid", "=", "json_param", ".", "get", "(", "\"valid\"", ",", "valid", ")", "\n", "\n", "#could be done faster with advanced indexing", "\n", "if", "len", "(", "self", ".", "valid", ")", ">", "0", ":", "\n", "            ", "x_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "len", "(", "self", ".", "valid", ")", ")", "\n", "x", "=", "tensor", ".", "zeros", "(", "x_shape", ")", "\n", "for", "i", ",", "offset", "in", "enumerate", "(", "self", ".", "valid", ")", ":", "\n", "                ", "x", "=", "tensor", ".", "set_subtensor", "(", "x", "[", ":", ",", ":", ",", "i", "]", ",", "self", ".", "input", "[", ":", ",", ":", ",", "offset", "[", "1", "]", ",", "offset", "[", "2", "]", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "input", "\n", "x_shape", "=", "self", ".", "input_shape", "\n", "\n", "", "self", ".", "log_likelihood", "=", "x", "\n", "self", ".", "log_pr", "=", "self", ".", "log_softmax", "(", "x", ",", "axis", "=", "1", ")", "\n", "self", ".", "log_pr_shape", "=", "x_shape", "\n", "\n", "#return probabilities as output", "\n", "self", ".", "output_shape", "=", "(", "self", ".", "log_pr_shape", "[", "0", "]", ",", "self", ".", "log_pr_shape", "[", "1", "]", ")", "\n", "if", "len", "(", "self", ".", "log_pr_shape", ")", ">", "2", ":", "\n", "            ", "self", ".", "output", "=", "tensor", ".", "exp", "(", "self", ".", "log_pr", ")", ".", "mean", "(", "axis", "=", "range", "(", "2", ",", "len", "(", "self", ".", "log_pr_shape", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "tensor", ".", "exp", "(", "self", ".", "log_pr", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ",", "\"layer - input:\"", ",", "self", ".", "input_shape", ",", "\"valid:\"", ",", "self", ".", "valid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.parse_desc": [[53, 64], ["bool", "bool", "layers.append", "layers.append", "params.get", "params.get", "denet.layer.convolution.ConvLayer", "regression.RegressionLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"R\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "use_bias", "=", "bool", "(", "\"B\"", "in", "tags", ")", "\n", "use_center", "=", "bool", "(", "\"C\"", "in", "tags", ")", "\n", "wb", "=", "\"uniform,xavier-forward\"", "if", "\"T\"", "in", "tags", "else", "0.0", "\n", "filter_shape", "=", "(", "params", "[", "\"classNum\"", "]", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "0", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "2", "]", ")", ",", "params", ".", "get", "(", "0", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "3", "]", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "layers", ",", "filter_shape", ",", "(", "1", ",", "1", ")", ",", "use_bias", ",", "\"valid\"", ",", "params", "[", "\"wb\"", "]", ")", ")", "\n", "layers", ".", "append", "(", "RegressionLayer", "(", "layers", ",", "use_center", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.log_softmax": [[66, 69], ["x.max", "theano.log", "theano.log", "theano.sum", "theano.sum", "theano.exp", "theano.exp"], "methods", ["None"], ["", "def", "log_softmax", "(", "self", ",", "x", ",", "axis", ")", ":", "\n", "        ", "xdev", "=", "x", "-", "x", ".", "max", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "return", "xdev", "-", "tensor", ".", "log", "(", "tensor", ".", "sum", "(", "tensor", ".", "exp", "(", "xdev", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.export_json": [[70, 74], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"valid\"", ":", "self", ".", "valid", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.get_target": [[76, 95], ["len", "range", "numpy.array", "numpy.array", "len", "yt_index.append", "len", "range", "range", "numpy.ravel_multi_index", "len", "range", "len", "range", "len", "yt_index.append", "range", "numpy.ravel_multi_index", "yt_index.append", "numpy.ravel_multi_index"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "model", ",", "samples", ",", "metas", ")", ":", "\n", "\n", "        ", "yt_index", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "output_shape", ")", "==", "2", ":", "\n", "            ", "for", "b", "in", "range", "(", "len", "(", "metas", ")", ")", ":", "\n", "                ", "yt_index", ".", "append", "(", "numpy", ".", "ravel_multi_index", "(", "(", "b", ",", "metas", "[", "b", "]", "[", "\"image_class\"", "]", ")", ",", "self", ".", "output_shape", ")", ")", "\n", "\n", "", "", "elif", "len", "(", "self", ".", "valid", ")", ">", "0", ":", "\n", "            ", "for", "b", "in", "range", "(", "len", "(", "metas", ")", ")", ":", "\n", "                ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "valid", ")", ")", ":", "\n", "                    ", "yt_index", ".", "append", "(", "numpy", ".", "ravel_multi_index", "(", "(", "b", ",", "metas", "[", "b", "]", "[", "\"image_class\"", "]", ",", "v", ")", ",", "self", ".", "output_shape", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "b", "in", "range", "(", "len", "(", "metas", ")", ")", ":", "\n", "                ", "cls", "=", "metas", "[", "b", "]", "[", "\"image_class\"", "]", "\n", "for", "y", "in", "range", "(", "self", ".", "output_shape", "[", "2", "]", ")", ":", "\n", "                    ", "for", "x", "in", "range", "(", "self", ".", "output_shape", "[", "3", "]", ")", ":", "\n", "                        ", "yt_index", ".", "append", "(", "numpy", ".", "ravel_multi_index", "(", "(", "b", ",", "metas", "[", "b", "]", "[", "\"image_class\"", "]", ",", "y", ",", "x", ")", ",", "self", ".", "output_shape", ")", ")", "\n", "\n", "", "", "", "", "return", "numpy", ".", "array", "(", "yt_index", ",", "dtype", "=", "numpy", ".", "int64", ")", ",", "numpy", ".", "array", "(", "[", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.regression.RegressionLayer.cost": [[97, 99], ["[].mean", "regression.RegressionLayer.log_pr.flatten"], "methods", ["None"], ["", "def", "cost", "(", "self", ",", "yt_index", ",", "yt_value", ")", ":", "\n", "        ", "return", "-", "(", "self", ".", "log_pr", ".", "flatten", "(", ")", "[", "yt_index", "]", ")", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.__init__": [[10, 24], ["denet.layer.AbstractLayer.__init__", "json_param.get", "denet.verbose", "theano.shared", "len", "numpy.zeros().astype", "str", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "enabled", "=", "json_param", ".", "get", "(", "\"enabled\"", ",", "True", ")", "\n", "self", ".", "has_split", "=", "self", ".", "enabled", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "output", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "output_shape", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ",", "str", "(", "self", ")", "+", "\" - output\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "self", ".", "input", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ",", "\"layer - input:\"", ",", "self", ".", "input_shape", ",", "\"enabled:\"", ",", "self", ".", "enabled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.split_forward": [[26, 28], ["None"], "methods", ["None"], ["", "def", "split_forward", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "self", ".", "output", ",", "self", ".", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.split_backward": [[30, 32], ["theano.tensor.grad"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad"], ["", "def", "split_backward", "(", "self", ",", "cost", ",", "known_grads", ")", ":", "\n", "        ", "return", "[", "(", "self", ".", "output", ",", "theano", ".", "tensor", ".", "grad", "(", "cost", ",", "self", ".", "output", ",", "known_grads", "=", "known_grads", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.split_known_grads": [[34, 36], ["None"], "methods", ["None"], ["", "def", "split_known_grads", "(", "self", ")", ":", "\n", "        ", "return", "{", "self", ".", "input", ":", "self", ".", "output", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.export_json": [[37, 41], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"enabled\"", ":", "self", ".", "enabled", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.split.SplitLayer.parse_desc": [[42, 47], ["layers.append", "split.SplitLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"SPLIT\"", ":", "\n", "            ", "return", "False", "\n", "", "layers", ".", "append", "(", "SplitLayer", "(", "layers", ")", ")", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.border.BorderLayer.__init__": [[12, 36], ["denet.layer.AbstractLayer.__init__", "json_param.get", "list", "tuple", "theano.zeros", "theano.zeros", "theano.set_subtensor", "theano.set_subtensor", "denet.verbose", "type", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "border", "=", "0", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#border = (Left, Right, Top, Bottom)", "\n", "if", "type", "(", "border", ")", "is", "int", ":", "\n", "            ", "border", "=", "(", "border", ",", "border", ",", "border", ",", "border", ")", "\n", "", "elif", "len", "(", "border", ")", "==", "1", ":", "\n", "            ", "border", "=", "(", "border", "[", "0", "]", ",", "border", "[", "0", "]", ",", "border", "[", "0", "]", ",", "border", "[", "0", "]", ")", "\n", "\n", "", "assert", "len", "(", "border", ")", "==", "4", "\n", "self", ".", "border", "=", "json_param", ".", "get", "(", "\"border\"", ",", "border", ")", "\n", "\n", "self", ".", "output_shape", "=", "list", "(", "self", ".", "input_shape", ")", "\n", "self", ".", "output_shape", "[", "-", "1", "]", "+=", "self", ".", "border", "[", "0", "]", "+", "self", ".", "border", "[", "1", "]", "\n", "self", ".", "output_shape", "[", "-", "2", "]", "+=", "self", ".", "border", "[", "2", "]", "+", "self", ".", "border", "[", "3", "]", "\n", "self", ".", "output_shape", "=", "tuple", "(", "self", ".", "output_shape", ")", "\n", "\n", "self", ".", "output", "=", "tensor", ".", "zeros", "(", "self", ".", "output_shape", ")", "\n", "self", ".", "output", "=", "tensor", ".", "set_subtensor", "(", "self", ".", "output", "[", ":", ",", ":", ",", "self", ".", "border", "[", "2", "]", ":", "(", "self", ".", "input_shape", "[", "-", "2", "]", "+", "self", ".", "border", "[", "2", "]", ")", ",", "self", ".", "border", "[", "0", "]", ":", "(", "self", ".", "input_shape", "[", "-", "1", "]", "+", "self", ".", "border", "[", "0", "]", ")", "]", ",", "self", ".", "input", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.border.BorderLayer.parse_desc": [[37, 42], ["layers.append", "border.BorderLayer", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"B\"", ":", "\n", "            ", "return", "False", "\n", "", "layers", ".", "append", "(", "BorderLayer", "(", "layers", ",", "params", ".", "get", "(", "0", ",", "0", ")", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.border.BorderLayer.export_json": [[43, 47], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"border\"", ":", "self", ".", "border", "}", ")", "\n", "return", "json", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_corner.DeNetCornerLayer.__init__": [[20, 61], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "denet_corner.DeNetCornerLayer.layers.append", "denet_corner.DeNetCornerLayer.layers[].omega.get_value", "denet_corner.DeNetCornerLayer.layers[].omega.set_value", "denet_corner.DeNetCornerLayer.layers[].beta.get_value", "denet_corner.DeNetCornerLayer.layers[].beta.set_value", "theano.concatenate", "theano.concatenate", "denet.log_softmax", "denet.log_softmax", "denet.log_softmax", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "denet.verbose", "denet.verbose", "denet.verbose", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "denet.layer.convolution.ConvLayer", "denet.layer.convolution.ConvLayer", "denet.layer.convolution.ConvLayer", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "sample_feat", "=", "512", ",", "cost_factor", "=", "1", ",", "dropout", "=", "0.0", ",", "use_center", "=", "False", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "#pass though layer", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "self", ".", "output", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "output_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "batch_size", ",", "self", ".", "features", ",", "self", ".", "height", ",", "self", ".", "width", "=", "self", ".", "input_shape", "\n", "\n", "#get param", "\n", "self", ".", "sample_feat", "=", "json_param", ".", "get", "(", "\"sampleFeat\"", ",", "sample_feat", ")", "\n", "self", ".", "cost_factor", "=", "json_param", ".", "get", "(", "\"costFactor\"", ",", "cost_factor", ")", "\n", "self", ".", "use_center", "=", "json_param", ".", "get", "(", "\"useCenter\"", ",", "use_center", ")", "\n", "self", ".", "dropout", "=", "json_param", ".", "get", "(", "\"dropout\"", ",", "dropout", ")", "\n", "\n", "self", ".", "corner_num", "=", "5", "if", "self", ".", "use_center", "else", "4", "\n", "self", ".", "layers", "=", "[", "InitialLayer", "(", "self", ".", "input", ",", "self", ".", "input_shape", ")", "]", "\n", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "self", ".", "layers", ",", "(", "self", ".", "corner_num", "+", "self", ".", "sample_feat", ",", "self", ".", "features", ",", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "True", ",", "False", ")", ")", "\n", "\n", "#initialize corner_pr weights / biases", "\n", "omega", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "omega", ".", "get_value", "(", ")", "\n", "omega", "[", ":", "self", ".", "corner_num", ",", ":", ",", ":", ",", ":", "]", "=", "0.0", "\n", "self", ".", "layers", "[", "-", "1", "]", ".", "omega", ".", "set_value", "(", "omega", ")", "\n", "beta", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "beta", ".", "get_value", "(", ")", "\n", "beta", "[", ":", "self", ".", "corner_num", "]", "=", "5.0", "\n", "self", ".", "layers", "[", "-", "1", "]", ".", "beta", ".", "set_value", "(", "beta", ")", "\n", "\n", "#extract corner probabilities", "\n", "self", ".", "corner_shape", "=", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "corner_num", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "self", ".", "corner_lh", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", ":", "self", ".", "corner_num", ",", ":", ",", ":", "]", "\n", "self", ".", "corner_lh", "=", "tensor", ".", "concatenate", "(", "[", "self", ".", "corner_lh", "[", ":", ",", "None", ",", "...", "]", ",", "-", "self", ".", "corner_lh", "[", ":", ",", "None", ",", "...", "]", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "corner_pr", "=", "theano_util", ".", "log_softmax", "(", "self", ".", "corner_lh", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "#extract sample", "\n", "self", ".", "sample_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "sample_feat", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "self", ".", "sample_shared", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "sample_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", ",", "\"shared sample\"", ")", "\n", "self", ".", "sample", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", "self", ".", "corner_num", ":", ",", ":", ",", ":", "]", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_corner.DeNetCornerLayer.parse_desc": [[62, 72], ["params.get", "params.get", "params.get", "layers.append", "denet_corner.DeNetCornerLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"DNC\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "sample_feat", "=", "params", ".", "get", "(", "0", ",", "512", ")", "\n", "cost_factor", "=", "params", ".", "get", "(", "1", ",", "1.0", ")", "\n", "dropout", "=", "params", ".", "get", "(", "2", ",", "0.0", ")", "\n", "use_center", "=", "\"C\"", "in", "tags", "\n", "layers", ".", "append", "(", "DeNetCornerLayer", "(", "layers", ",", "sample_feat", ",", "cost_factor", ",", "dropout", ",", "use_center", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_corner.DeNetCornerLayer.export_json": [[73, 80], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"sampleFeat\"", ":", "self", ".", "sample_feat", ",", "\n", "\"useCenter\"", ":", "self", ".", "use_center", ",", "\n", "\"costFactor\"", ":", "self", ".", "cost_factor", ",", "\n", "\"dropout\"", ":", "self", ".", "dropout", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_corner.DeNetCornerLayer.get_target": [[81, 124], ["numpy.zeros", "enumerate", "numpy.random.binomial().astype", "numpy.array", "numpy.zeros.flatten", "int", "int", "max", "max", "round", "round", "int", "int", "numpy.random.binomial", "int", "int", "round", "round", "round", "round"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "model", ",", "samples", ",", "metas", ")", ":", "\n", "\n", "        ", "corner_pr", "=", "numpy", ".", "zeros", "(", "self", ".", "corner_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "#find all onscreen corners", "\n", "for", "b", ",", "meta", "in", "enumerate", "(", "metas", ")", ":", "\n", "            ", "for", "bbox", "in", "meta", "[", "\"bbox\"", "]", ":", "\n", "\n", "                ", "x0", "=", "int", "(", "round", "(", "bbox", "[", "0", "]", "*", "self", ".", "width", ")", ")", "\n", "y0", "=", "int", "(", "round", "(", "bbox", "[", "1", "]", "*", "self", ".", "height", ")", ")", "\n", "x1", "=", "max", "(", "x0", ",", "int", "(", "round", "(", "bbox", "[", "2", "]", "*", "self", ".", "width", ")", ")", "-", "1", ")", "\n", "y1", "=", "max", "(", "y0", ",", "int", "(", "round", "(", "bbox", "[", "3", "]", "*", "self", ".", "height", ")", ")", "-", "1", ")", "\n", "x0_valid", "=", "(", "x0", ">=", "0", "and", "x0", "<", "self", ".", "width", ")", "\n", "y0_valid", "=", "(", "y0", ">=", "0", "and", "y0", "<", "self", ".", "height", ")", "\n", "x1_valid", "=", "(", "x1", ">=", "0", "and", "x1", "<", "self", ".", "width", ")", "\n", "y1_valid", "=", "(", "y1", ">=", "0", "and", "y1", "<", "self", ".", "height", ")", "\n", "if", "x0_valid", "and", "y0_valid", ":", "\n", "                    ", "corner_pr", "[", "b", ",", "1", ",", "0", ",", "y0", ",", "x0", "]", "=", "1.0", "\n", "", "if", "x1_valid", "and", "y0_valid", ":", "\n", "                    ", "corner_pr", "[", "b", ",", "1", ",", "1", ",", "y0", ",", "x1", "]", "=", "1.0", "\n", "", "if", "x0_valid", "and", "y1_valid", ":", "\n", "                    ", "corner_pr", "[", "b", ",", "1", ",", "2", ",", "y1", ",", "x0", "]", "=", "1.0", "\n", "", "if", "x1_valid", "and", "y1_valid", ":", "\n", "                    ", "corner_pr", "[", "b", ",", "1", ",", "3", ",", "y1", ",", "x1", "]", "=", "1.0", "\n", "\n", "#add center point", "\n", "", "if", "self", ".", "use_center", ":", "\n", "                    ", "cx", "=", "int", "(", "round", "(", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "*", "0.5", "*", "self", ".", "width", ")", ")", "\n", "cy", "=", "int", "(", "round", "(", "(", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "*", "0.5", "*", "self", ".", "height", ")", ")", "\n", "if", "cx", ">=", "0", "and", "cx", "<", "self", ".", "width", "and", "cy", ">=", "0", "and", "cy", "<", "self", ".", "height", ":", "\n", "                        ", "corner_pr", "[", "b", ",", "1", ",", "4", ",", "cy", ",", "cx", "]", "=", "1.0", "\n", "\n", "\n", "", "", "", "", "corner_pr", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "1.0", "-", "corner_pr", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "corner_pr", "/=", "self", ".", "width", "*", "self", ".", "height", "*", "self", ".", "corner_num", "\n", "\n", "#apply dropout", "\n", "if", "self", ".", "dropout", ">", "0.0", ":", "\n", "            ", "mask", "=", "numpy", ".", "random", ".", "binomial", "(", "1", ",", "1.0", "-", "self", ".", "dropout", ",", "(", "self", ".", "corner_shape", "[", "0", "]", ",", "self", ".", "corner_shape", "[", "2", "]", ",", "self", ".", "corner_shape", "[", "3", "]", ",", "self", ".", "corner_shape", "[", "4", "]", ")", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "corner_pr", "*=", "mask", "[", ":", ",", "None", ",", ":", ",", ":", ",", ":", "]", "/", "(", "1.0", "-", "self", ".", "dropout", ")", "\n", "\n", "#pack indices / values", "\n", "", "return", "numpy", ".", "array", "(", "[", "]", ",", "dtype", "=", "numpy", ".", "int64", ")", ",", "corner_pr", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_corner.DeNetCornerLayer.cost": [[126, 135], ["yt_value.reshape", "math.log", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.sum().mean", "theano.sum().mean", "theano.sum", "theano.sum"], "methods", ["None"], ["", "def", "cost", "(", "self", ",", "yt_index", ",", "yt_value", ")", ":", "\n", "\n", "#unpack indexs and values", "\n", "        ", "corner_pr", "=", "yt_value", ".", "reshape", "(", "self", ".", "corner_shape", ")", "\n", "corner_cost", "=", "-", "tensor", ".", "sum", "(", "corner_pr", "*", "self", ".", "corner_pr", ",", "axis", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ".", "mean", "(", ")", "/", "math", ".", "log", "(", "2", ")", "\n", "\n", "#debug print costs", "\n", "corner_cost", "=", "theano", ".", "printing", ".", "Print", "(", "'Corner Cost:'", ")", "(", "self", ".", "cost_factor", "*", "corner_cost", ")", "\n", "return", "corner_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.__init__": [[13, 95], ["denet.layer.AbstractLayer.__init__", "json_param.get", "tuple", "tuple", "json_param.get", "json_param.get", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "denet.verbose", "json_param.get", "json_param.get", "type", "float", "numpy.zeros", "numpy.asarray", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "math.ceil", "math.ceil", "theano.nnet.conv2d", "theano.nnet.conv2d", "len", "math.sqrt", "numpy.random.uniform", "numpy.random.normal", "math.ceil", "math.ceil", "theano.nnet.conv2d", "theano.nnet.conv2d", "math.sqrt", "numpy.zeros", "math.ceil", "math.ceil", "math.sqrt", "isinstance", "math.sqrt", "math.ceil", "math.ceil", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "filter_shape", "=", "None", ",", "filter_stride", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "border_mode", "=", "\"half\"", ",", "wb", "=", "\"he-backward\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "border_mode", "=", "json_param", ".", "get", "(", "\"border\"", ",", "border_mode", ")", "\n", "self", ".", "filter_shape", "=", "tuple", "(", "json_param", ".", "get", "(", "\"shape\"", ",", "filter_shape", ")", ")", "\n", "self", ".", "stride", "=", "tuple", "(", "json_param", ".", "get", "(", "\"stride\"", ",", "filter_stride", ")", ")", "\n", "self", ".", "use_bias", "=", "json_param", ".", "get", "(", "\"useBias\"", ",", "use_bias", ")", "\n", "self", ".", "size", "=", "(", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", "\n", "self", ".", "enabled", "=", "json_param", ".", "get", "(", "\"enabled\"", ",", "True", ")", "\n", "\n", "#use initialization", "\n", "if", "type", "(", "wb", ")", "is", "float", ":", "\n", "            ", "self", ".", "w_bound", "=", "float", "(", "wb", ")", "\n", "", "elif", "\"he-forward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "1", "]", ")", ")", "\n", "", "elif", "\"he-backward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "0", "]", ")", ")", "\n", "", "elif", "\"xavier-forward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "1", "]", ")", ")", "\n", "", "elif", "\"xavier-backward\"", "in", "wb", ":", "\n", "            ", "self", ".", "w_bound", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "self", ".", "filter_shape", "[", "3", "]", "*", "self", ".", "filter_shape", "[", "0", "]", ")", ")", "\n", "\n", "#initialize weights", "\n", "", "if", "self", ".", "w_bound", ">", "0", ":", "\n", "            ", "if", "\"uniform\"", "in", "wb", ":", "\n", "                ", "w", "=", "numpy", ".", "random", ".", "uniform", "(", "-", "self", ".", "w_bound", ",", "self", ".", "w_bound", ",", "size", "=", "self", ".", "filter_shape", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "numpy", ".", "random", ".", "normal", "(", "0.0", ",", "self", ".", "w_bound", ",", "size", "=", "self", ".", "filter_shape", ")", "\n", "", "", "else", ":", "\n", "            ", "w", "=", "numpy", ".", "zeros", "(", "shape", "=", "self", ".", "filter_shape", ")", "\n", "\n", "", "self", ".", "omega", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "w", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"conv omega\"", ")", "\n", "\n", "#initialize bias", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "beta", "=", "theano", ".", "shared", "(", "value", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "filter_shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"conv beta\"", ")", "\n", "\n", "#calculate output shape", "\n", "", "if", "self", ".", "border_mode", "==", "'valid'", ":", "\n", "            ", "w", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "2", "]", "-", "self", ".", "filter_shape", "[", "2", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "0", "]", ")", "\n", "h", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "1", "]", "-", "self", ".", "filter_shape", "[", "3", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "border_mode", "==", "\"full\"", ":", "\n", "            ", "w", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "2", "]", "+", "self", ".", "filter_shape", "[", "2", "]", "-", "1", ")", "/", "self", ".", "stride", "[", "0", "]", ")", "\n", "h", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "1", "]", "+", "self", ".", "filter_shape", "[", "3", "]", "-", "1", ")", "/", "self", ".", "stride", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "border_mode", "==", "\"half\"", ":", "\n", "            ", "fh", "=", "self", ".", "filter_shape", "[", "2", "]", "//", "2", "\n", "fw", "=", "self", ".", "filter_shape", "[", "3", "]", "//", "2", "\n", "w", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "2", "]", "+", "2", "*", "fh", "-", "self", ".", "filter_shape", "[", "2", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "0", "]", ")", "\n", "h", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "1", "]", "+", "2", "*", "fw", "-", "self", ".", "filter_shape", "[", "3", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "border_mode", "==", "\"same\"", ":", "\n", "            ", "assert", "self", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "w", "=", "self", ".", "input_shape", "[", "-", "2", "]", "\n", "h", "=", "self", ".", "input_shape", "[", "-", "1", "]", "\n", "", "elif", "isinstance", "(", "self", ".", "border_mode", ",", "int", ")", ":", "\n", "            ", "w", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "2", "]", "+", "2", "*", "self", ".", "border_mode", "-", "self", ".", "filter_shape", "[", "2", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "0", "]", ")", "\n", "h", "=", "math", ".", "ceil", "(", "(", "self", ".", "input_shape", "[", "-", "1", "]", "+", "2", "*", "self", ".", "border_mode", "-", "self", ".", "filter_shape", "[", "3", "]", "+", "1", ")", "/", "self", ".", "stride", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown border mode: \"", "+", "str", "(", "self", ".", "border_mode", ")", ")", "\n", "\n", "#handle \"same\" mode specially", "\n", "", "if", "self", ".", "border_mode", "==", "\"same\"", ":", "\n", "            ", "y0", "=", "(", "self", ".", "filter_shape", "[", "2", "]", "-", "1", ")", "//", "2", "\n", "x0", "=", "(", "self", ".", "filter_shape", "[", "3", "]", "-", "1", ")", "//", "2", "\n", "y", "=", "tensor", ".", "nnet", ".", "conv2d", "(", "input", "=", "self", ".", "input", ",", "filters", "=", "self", ".", "omega", ",", "filter_shape", "=", "self", ".", "filter_shape", ",", "subsample", "=", "self", ".", "stride", ",", "input_shape", "=", "self", ".", "input_shape", ",", "border_mode", "=", "\"full\"", ")", "[", ":", ",", ":", ",", "y0", ":", "(", "y0", "+", "h", ")", ",", "x0", ":", "(", "x0", "+", "w", ")", "]", "\n", "", "else", ":", "\n", "# y = tensor.nnet.conv2d(input=self.input, filters=self.omega, filter_shape=self.filter_shape, subsample=self.stride, input_shape=self.input_shape, border_mode=self.border_mode)", "\n", "            ", "y", "=", "tensor", ".", "nnet", ".", "conv2d", "(", "input", "=", "self", ".", "input", ",", "filters", "=", "self", ".", "omega", ",", "filter_shape", "=", "self", ".", "filter_shape", ",", "subsample", "=", "self", ".", "stride", ",", "border_mode", "=", "self", ".", "border_mode", ")", "\n", "\n", "", "y_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "filter_shape", "[", "0", "]", ",", "w", ",", "h", ")", "\n", "\n", "self", ".", "output_unbiased", "=", "y", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "y", "+=", "self", ".", "beta", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "self", ".", "output_shape", "=", "y_shape", "\n", "self", ".", "output", "=", "y", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.parse_desc": [[99, 113], ["bool", "bool", "layers.append", "convolution.ConvLayer", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"C\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "use_bias", "=", "bool", "(", "\"B\"", "in", "tags", ")", "\n", "if", "bool", "(", "\"X\"", "in", "tags", ")", ":", "\n", "            ", "filter_shape", "=", "(", "params", ".", "get", "(", "0", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "1", ")", ",", "params", ".", "get", "(", "2", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "3", ",", "1", ")", ",", "params", ".", "get", "(", "4", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "filter_shape", "=", "(", "params", ".", "get", "(", "0", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "1", ",", "1", ")", ",", "params", ".", "get", "(", "1", ",", "1", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "2", ",", "1", ")", ",", "params", ".", "get", "(", "2", ",", "1", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "ConvLayer", "(", "layers", ",", "filter_shape", ",", "filter_stride", ",", "use_bias", ",", "params", "[", "\"borderMode\"", "]", ",", "params", "[", "\"wb\"", "]", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.weights": [[114, 116], ["super().weights"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "weights", "(", ")", "+", "(", "[", "self", ".", "omega", "]", "if", "self", ".", "enabled", "else", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.biases": [[117, 119], ["super().biases"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases"], ["", "def", "biases", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "biases", "(", ")", "+", "(", "[", "self", ".", "beta", "]", "if", "self", ".", "use_bias", "and", "self", ".", "enabled", "else", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.import_json": [[120, 125], ["super().import_json", "convolution.ConvLayer.omega.set_value", "convolution.ConvLayer.beta.set_value", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "        ", "super", "(", ")", ".", "import_json", "(", "json_param", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "beta", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"bias\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "", "self", ".", "omega", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"weight\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.convolution.ConvLayer.export_json": [[126, 137], ["super().export_json", "super().export_json.update", "convolution.ConvLayer.omega.get_value", "convolution.ConvLayer.beta.get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"shape\"", ":", "self", ".", "filter_shape", ",", "\n", "\"stride\"", ":", "self", ".", "stride", ",", "\n", "\"border\"", ":", "self", ".", "border_mode", ",", "\n", "\"enabled\"", ":", "self", ".", "enabled", ",", "\n", "\"useBias\"", ":", "self", ".", "use_bias", ",", "\n", "\"bias\"", ":", "self", ".", "beta", ".", "get_value", "(", ")", "if", "self", ".", "use_bias", "else", "None", ",", "\n", "\"weight\"", ":", "self", ".", "omega", ".", "get_value", "(", ")", "}", ")", "\n", "\n", "return", "json", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.__init__": [[17, 114], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "denet.verbose", "denet.verbose", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "denet.verbose", "denet.layer.InitialLayer", "denet.layer.convolution.ConvLayer", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "denet.layer.convolution.ConvLayer", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "denet.verbose", "resnet.ResnetLayer.layers.append", "denet.layer.activation.ActivationLayer.apply", "len", "json_param.get", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "denet.layer.batch_norm_relu.BatchNormReluLayer", "denet.layer.batch_norm.BatchNormLayer", "denet.layer.activation.ActivationLayer", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "resnet.ResnetLayer.layers.append", "denet.layer.convolution.ConvLayer", "denet.layer.batch_norm.BatchNormLayer", "denet.layer.convolution.ConvLayer", "resnet.ResnetLayer.layers.append", "denet.layer.batch_norm_relu.BatchNormReluLayer", "denet.layer.batch_norm.BatchNormLayer", "denet.layer.activation.ActivationLayer", "denet.layer.batch_norm_relu.BatchNormReluLayer", "denet.layer.batch_norm.BatchNormLayer", "denet.layer.activation.ActivationLayer", "denet.layer.InitialLayer", "denet.layer.batch_norm.BatchNormLayer"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.activation.ActivationLayer.apply"], ["def", "__init__", "(", "self", ",", "layers", ",", "filter_shape", "=", "None", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bottleneck", "=", "0", ",", "activation", "=", "\"relu\"", ",", "version", "=", "\"original\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "filter_shape", "=", "json_param", ".", "get", "(", "\"shape\"", ",", "filter_shape", ")", "\n", "self", ".", "stride", "=", "json_param", ".", "get", "(", "\"stride\"", ",", "stride", ")", "\n", "self", ".", "bottleneck", "=", "json_param", ".", "get", "(", "\"bottleneck\"", ",", "bottleneck", ")", "\n", "self", ".", "version", "=", "json_param", ".", "get", "(", "\"version\"", ",", "version", ")", "\n", "self", ".", "activation", "=", "json_param", ".", "get", "(", "\"activation\"", ",", "activation", ")", "\n", "self", ".", "bn_json_param", "=", "json_param", ".", "get", "(", "\"bnParam\"", ",", "{", "\n", "\"enabled\"", ":", "json_param", ".", "get", "(", "\"enableBatchNorm\"", ",", "True", ")", ",", "\n", "}", ")", "\n", "\n", "#determing convolution shapes", "\n", "if", "self", ".", "bottleneck", ">", "0", ":", "\n", "            ", "self", ".", "size", "=", "(", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", "\n", "shape0", "=", "(", "self", ".", "bottleneck", ",", "self", ".", "filter_shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "shape1", "=", "(", "self", ".", "bottleneck", ",", "self", ".", "bottleneck", ",", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", "\n", "shape2", "=", "(", "self", ".", "filter_shape", "[", "0", "]", ",", "self", ".", "bottleneck", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "(", "self", ".", "filter_shape", "[", "2", "]", "*", "2", "-", "1", ",", "self", ".", "filter_shape", "[", "3", "]", "*", "2", "-", "1", ")", "\n", "shape0", "=", "self", ".", "filter_shape", "\n", "shape1", "=", "(", "self", ".", "filter_shape", "[", "0", "]", ",", "self", ".", "filter_shape", "[", "0", "]", ",", "self", ".", "filter_shape", "[", "2", "]", ",", "self", ".", "filter_shape", "[", "3", "]", ")", "\n", "shape2", "=", "None", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n", "# logging.verbose(\"Adding\", self, \"layer - input:\", self.input_shape, \"shape:\", self.filter_shape, \"stride:\", self.stride, \"bottleneck:\", self.bottleneck,", "\n", "#                 \"activation:\", self.activation, \"version:\", self.version, \"bn param:\", self.bn_json_param)", "\n", "\n", "logging", ".", "verbose", "(", "\"--------RESNET BLOCK----------\"", ")", "\n", "\n", "self", ".", "layers", "=", "[", "InitialLayer", "(", "self", ".", "input", ",", "self", ".", "input_shape", ")", "]", "\n", "if", "\"pre-activation\"", "in", "self", ".", "version", ":", "\n", "            ", "if", "\"bnrelu\"", "in", "self", ".", "version", "and", "self", ".", "activation", "==", "\"relu\"", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "BatchNormReluLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "ActivationLayer", "(", "self", ".", "layers", ",", "self", ".", "activation", ")", ")", "\n", "\n", "", "", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "self", ".", "layers", ",", "filter_shape", "=", "shape0", ",", "filter_stride", "=", "self", ".", "stride", ",", "border_mode", "=", "\"half\"", ",", "use_bias", "=", "False", ")", ")", "\n", "\n", "if", "\"bnrelu\"", "in", "self", ".", "version", "and", "self", ".", "activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "BatchNormReluLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "ActivationLayer", "(", "self", ".", "layers", ",", "self", ".", "activation", ")", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "self", ".", "layers", ",", "filter_shape", "=", "shape1", ",", "border_mode", "=", "\"half\"", ",", "use_bias", "=", "False", ")", ")", "\n", "\n", "#for bottleneck design add additional conv", "\n", "if", "self", ".", "bottleneck", ">", "0", ":", "\n", "            ", "if", "\"bnrelu\"", "in", "self", ".", "version", "and", "self", ".", "activation", "==", "\"relu\"", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "BatchNormReluLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "ActivationLayer", "(", "self", ".", "layers", ",", "self", ".", "activation", ")", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "self", ".", "layers", ",", "filter_shape", "=", "shape2", ",", "border_mode", "=", "\"half\"", ",", "use_bias", "=", "False", ")", ")", "\n", "\n", "", "if", "not", "\"pre-activation\"", "in", "self", ".", "version", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "\n", "", "y", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "y_shape", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#project input shape to output shape dimensions", "\n", "if", "self", ".", "input_shape", "!=", "y_shape", ":", "\n", "\n", "            ", "logging", ".", "verbose", "(", "\"---------SHORTCUT----------\"", ")", "\n", "\n", "#handle resnet models with batchnorm in shortcut route", "\n", "if", "\"pre-activation\"", "in", "self", ".", "version", ":", "\n", "                ", "input_layers", "=", "self", ".", "layers", "[", "0", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "input_layers", "=", "[", "InitialLayer", "(", "self", ".", "input", ",", "self", ".", "input_shape", ")", "]", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "input_layers", ",", "filter_shape", "=", "(", "y_shape", "[", "1", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "filter_stride", "=", "self", ".", "stride", ",", "use_bias", "=", "False", ",", "border_mode", "=", "\"half\"", ")", ")", "\n", "\n", "#original model has batch norm after shortcut", "\n", "if", "\"original\"", "in", "self", ".", "version", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "self", ".", "layers", ",", "json_param", "=", "self", ".", "bn_json_param", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "input", "\n", "\n", "", "logging", ".", "verbose", "(", "\"------------------------------\"", ")", "\n", "\n", "#add residual", "\n", "self", ".", "output_shape", "=", "y_shape", "\n", "if", "\"pre-activation\"", "in", "self", ".", "version", ":", "\n", "            ", "self", ".", "output", "=", "x", "+", "y", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "ActivationLayer", ".", "apply", "(", "x", "+", "y", ",", "self", ".", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.parse_desc": [[115, 134], ["params.get", "layers.append", "params.get", "params.get", "params.get", "params.get", "params.get", "resnet.ResnetLayer", "params.get", "range", "params.get", "layers.append", "params.get", "params.get", "params.get", "resnet.ResnetLayer", "params.get", "params.get"], "methods", ["None"], ["", "", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "==", "\"RSN\"", ":", "\n", "            ", "version", "=", "\"original\"", "if", "\"O\"", "in", "tags", "else", "\"pre-activation\"", "\n", "filter_shape", "=", "(", "params", ".", "get", "(", "0", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "1", ")", ",", "params", ".", "get", "(", "1", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "2", ",", "1", ")", ",", "params", ".", "get", "(", "2", ",", "1", ")", ")", "\n", "bottleneck", "=", "params", ".", "get", "(", "3", ",", "0", ")", "\n", "layers", ".", "append", "(", "ResnetLayer", "(", "layers", ",", "filter_shape", ",", "filter_stride", ",", "bottleneck", ",", "params", "[", "\"activation\"", "]", ",", "version", ")", ")", "\n", "return", "True", "\n", "\n", "", "elif", "name", "==", "\"nRSN\"", ":", "\n", "            ", "version", "=", "\"original\"", "if", "\"O\"", "in", "tags", "else", "\"pre-activation\"", "\n", "bottleneck", "=", "params", ".", "get", "(", "4", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "params", ".", "get", "(", "0", ")", ")", ":", "\n", "                ", "filter_shape", "=", "(", "params", ".", "get", "(", "1", ")", ",", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "1", "]", ",", "params", ".", "get", "(", "2", ")", ",", "params", ".", "get", "(", "2", ")", ")", "\n", "filter_stride", "=", "(", "params", ".", "get", "(", "3", ",", "1", ")", ",", "params", ".", "get", "(", "3", ",", "1", ")", ")", "if", "i", "==", "0", "else", "(", "1", ",", "1", ")", "\n", "layers", ".", "append", "(", "ResnetLayer", "(", "layers", ",", "filter_shape", ",", "filter_stride", ",", "bottleneck", ",", "params", "[", "\"activation\"", "]", ",", "version", ")", ")", "\n", "", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.updates": [[135, 137], ["sum", "layer.updates"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.updates"], ["", "def", "updates", "(", "self", ",", "cost", ")", ":", "\n", "        ", "return", "sum", "(", "[", "layer", ".", "updates", "(", "cost", ")", "for", "layer", "in", "self", ".", "layers", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.weights": [[138, 140], ["sum", "layer.weights"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "layer", ".", "weights", "(", ")", "for", "layer", "in", "self", ".", "layers", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.biases": [[141, 143], ["sum", "layer.biases"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases"], ["", "def", "biases", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "layer", ".", "biases", "(", ")", "for", "layer", "in", "self", ".", "layers", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.import_json": [[144, 156], ["resnet.ResnetLayer.layers[].import_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "\n", "        ", "n", "=", "0", "\n", "for", "json_layer", "in", "json_param", "[", "\"layers\"", "]", ":", "\n", "\n", "#ignore identity layers introduced in old versions", "\n", "            ", "if", "json_layer", "[", "\"type\"", "]", "==", "\"identity\"", ":", "\n", "                ", "continue", "\n", "\n", "", "assert", "json_layer", "[", "\"type\"", "]", "==", "self", ".", "layers", "[", "n", "]", ".", "type_name", ",", "(", "json_layer", "[", "\"type\"", "]", ",", "self", ".", "layers", "[", "n", "]", ".", "type_name", ")", "\n", "self", ".", "layers", "[", "n", "]", ".", "import_json", "(", "json_layer", ")", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.resnet.ResnetLayer.export_json": [[157, 168], ["super().export_json", "super().export_json.update", "super().export_json.update", "json_layers.append", "layer.export_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json"], ["", "", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"shape\"", ":", "self", ".", "filter_shape", ",", "\"stride\"", ":", "self", ".", "stride", ",", "\"bottleneck\"", ":", "self", ".", "bottleneck", ",", "\"bnParam\"", ":", "self", ".", "bn_json_param", ",", "\n", "\"activation\"", ":", "self", ".", "activation", ",", "\"version\"", ":", "self", ".", "version", "}", ")", "\n", "\n", "json_layers", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "json_layers", ".", "append", "(", "layer", ".", "export_json", "(", ")", ")", "\n", "\n", "", "json", ".", "update", "(", "{", "\"layers\"", ":", "json_layers", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.__init__": [[17, 29], ["os.path.join", "theano.gof.COp.__init__", "theano.gof.COp.__init__", "theano.sandbox.cuda.dnn_version", "theano.sandbox.cuda.dnn_version", "RuntimeError", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'per-activation'", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "\n", "        ", "if", "dnn_version", "(", ")", "<", "(", "5000", ",", "5000", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"cuDNN Batch Normalization requires cuDNN v5\"", ")", "\n", "\n", "", "assert", "(", "mode", "in", "(", "'per-activation'", ",", "'spatial'", ")", ")", "\n", "assert", "(", "epsilon", ">=", "1e-5", ")", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", ".", "__file__", ")", ",", "\"dnn_base.c\"", ")", "\n", "COp", ".", "__init__", "(", "self", ",", "fname", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.c_support_code": [[31, 40], ["super().c_support_code"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.c_support_code"], ["", "def", "c_support_code", "(", "self", ")", ":", "\n", "        ", "result", "=", "super", "(", "BatchNormReluOp", ",", "self", ")", ".", "c_support_code", "(", ")", "\n", "return", "result", "+", "\"\"\"\n        static __global__ void k_relu(float* x, size_t x_num){\n            size_t i = blockIdx.x*blockDim.x + threadIdx.x;\n            if (i < x_num){    \n                x[i] = (x[i] + fabsf(x[i]))/2;\n            }\n        };\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.c_code": [[41, 49], ["super().c_code"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.c_code"], ["", "def", "c_code", "(", "self", ",", "node", ",", "name", ",", "inputs", ",", "outputs", ",", "sub", ")", ":", "\n", "        ", "result", "=", "super", "(", "BatchNormReluOp", ",", "self", ")", ".", "c_code", "(", "node", ",", "name", ",", "inputs", ",", "outputs", ",", "sub", ")", "\n", "return", "result", "+", "\"\"\"{\n        size_t num = CudaNdarray_SIZE(%s);\n        size_t threads_per_block = 1024;\n        size_t grid_num = std::ceil((double)num / threads_per_block);\n        k_relu<<<grid_num, threads_per_block>>>(CudaNdarray_DEV_DATA(%s), num);\n        };\"\"\"", "%", "(", "outputs", "[", "0", "]", ",", "outputs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad": [[50, 55], ["batch_norm_relu.BatchNormReluOp.", "theano.switch", "theano.switch", "theano.sandbox.cuda.dnn.GpuDnnBatchNormGrad", "theano.sandbox.cuda.dnn.GpuDnnBatchNormGrad"], "methods", ["None"], ["", "def", "grad", "(", "self", ",", "inputs", ",", "grads", ")", ":", "\n", "        ", "x", ",", "scale", ",", "bias", "=", "inputs", "\n", "xn", ",", "x_mean", ",", "x_invstd", "=", "self", "(", "x", ",", "scale", ",", "bias", ")", "\n", "dy_relu", "=", "tensor", ".", "switch", "(", "xn", ">", "0.0", ",", "grads", "[", "0", "]", ",", "0.0", ")", "\n", "return", "GpuDnnBatchNormGrad", "(", "self", ".", "mode", ",", "self", ".", "epsilon", ")", "(", "x", ",", "dy_relu", ",", "scale", ",", "x_mean", ",", "x_invstd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.c_code_cache_version": [[56, 58], ["None"], "methods", ["None"], ["", "def", "c_code_cache_version", "(", "self", ")", ":", "\n", "        ", "return", "(", "2", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.__init__": [[88, 134], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.switch", "theano.switch", "denet.verbose", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sqr", "theano.sqr", "batch_norm_relu.dnn_bnrelu_train", "batch_norm_relu.dnn_bnrelu_test", "x.dimshuffle().flatten", "theano.cast", "theano.cast", "theano.sqrt", "theano.sqrt", "denet.layer.get_train", "theano.as_tensor_variable", "theano.as_tensor_variable", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "len", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.ones", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "batch_norm_relu.BatchNormReluLayer.omega.dimshuffle", "batch_norm_relu.BatchNormReluLayer.beta.dimshuffle", "batch_norm_relu.BatchNormReluLayer.omega.dimshuffle", "batch_norm_relu.BatchNormReluLayer.beta.dimshuffle", "batch_norm_relu.BatchNormReluLayer.mean.dimshuffle", "theano.sqr.dimshuffle", "theano.sum", "theano.sum", "batch_norm_relu.BatchNormReluLayer.beta.dimshuffle", "batch_norm_relu.BatchNormReluLayer.beta.dimshuffle", "x.dimshuffle", "theano.mean", "theano.mean", "batch_norm_relu.BatchNormReluLayer.mean.dimshuffle", "theano.cast.dimshuffle", "theano.cast.squeeze", "x_stdinv.squeeze"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.dnn_bnrelu_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.dnn_bnrelu_test", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], ["def", "__init__", "(", "self", ",", "layers", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-5", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "enabled", "=", "json_param", ".", "get", "(", "\"enabled\"", ",", "True", ")", "\n", "self", ".", "momentum", "=", "json_param", ".", "get", "(", "\"momentum\"", ",", "momentum", ")", "\n", "self", ".", "eps", "=", "json_param", ".", "get", "(", "\"eps\"", ",", "eps", ")", "\n", "\n", "#initialize param", "\n", "param_shape", "=", "(", "self", ".", "input_shape", "[", "1", "]", ",", ")", "\n", "self", ".", "omega", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "ones", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn omega\"", ")", "\n", "self", ".", "beta", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "zeros", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn beta\"", ")", "\n", "self", ".", "mean", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "zeros", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn mean\"", ")", "\n", "self", ".", "stdinv", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "ones", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn std inv\"", ")", "\n", "\n", "x_shape", "=", "self", ".", "input_shape", "\n", "x", "=", "self", ".", "input", "\n", "dim", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "use_cudnn", "=", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", ".", "dnn_available", "(", ")", "and", "(", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", ".", "version", "(", ")", ">=", "(", "5000", ",", "5000", ")", ")", "\n", "# use_cudnn = theano.gpuarray.dnn.dnn_available(None) and (theano.gpuarray.dnn.version() >= 5000)", "\n", "if", "use_cudnn", ":", "\n", "            ", "var", "=", "tensor", ".", "sqr", "(", "1.0", "/", "self", ".", "stdinv", ")", "\n", "x_n_train", ",", "x_mean", ",", "x_stdinv", "=", "dnn_bnrelu_train", "(", "x", ",", "self", ".", "omega", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", ",", "'spatial'", ",", "self", ".", "eps", ")", "\n", "x_n_test", "=", "dnn_bnrelu_test", "(", "x", ",", "self", ".", "omega", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "mean", ".", "dimshuffle", "(", "dim", ")", ",", "var", ".", "dimshuffle", "(", "dim", ")", ",", "'spatial'", ",", "self", ".", "eps", ")", "\n", "x_std", "=", "1.0", "/", "x_stdinv", "\n", "", "else", ":", "\n", "\n", "#WARNING: BROKEN!", "\n", "            ", "xt", "=", "x", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "flatten", "(", "2", ")", "\n", "x_mean", "=", "tensor", ".", "sum", "(", "xt", ",", "axis", "=", "1", ")", "/", "(", "self", ".", "input_shape", "[", "0", "]", "*", "self", ".", "input_shape", "[", "2", "]", "*", "self", ".", "input_shape", "[", "3", "]", ")", "\n", "x_mean", "=", "tensor", ".", "cast", "(", "x_mean", ",", "\"float32\"", ")", "\n", "x_std", "=", "tensor", ".", "sqrt", "(", "tensor", ".", "mean", "(", "x", "*", "x", ",", "axis", "=", "[", "0", ",", "2", ",", "3", "]", ")", "-", "x_mean", "*", "x_mean", "+", "self", ".", "eps", ")", "\n", "x_stdinv", "=", "1.0", "/", "x_std", "\n", "x_n_test", "=", "(", "x", "-", "self", ".", "mean", ".", "dimshuffle", "(", "dim", ")", ")", "*", "(", "self", ".", "omega", "*", "self", ".", "stdinv", ")", ".", "dimshuffle", "(", "dim", ")", "+", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", "\n", "x_n_train", "=", "(", "x", "-", "x_mean", ".", "dimshuffle", "(", "dim", ")", ")", "*", "(", "self", ".", "omega", "*", "x_stdinv", ")", ".", "dimshuffle", "(", "dim", ")", "+", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", "\n", "\n", "", "self", ".", "local_updates", "=", "[", "(", "self", ".", "mean", ",", "self", ".", "momentum", "*", "self", ".", "mean", "+", "(", "1.0", "-", "self", ".", "momentum", ")", "*", "x_mean", ".", "squeeze", "(", ")", ")", ",", "\n", "(", "self", ".", "stdinv", ",", "self", ".", "momentum", "*", "self", ".", "stdinv", "+", "(", "1.0", "-", "self", ".", "momentum", ")", "*", "x_stdinv", ".", "squeeze", "(", ")", ")", "]", "\n", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "self", ".", "output", "=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "tensor", ".", "as_tensor_variable", "(", "x_n_train", ")", ",", "theano", ".", "gradient", ".", "disconnected_grad", "(", "x_n_test", ")", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "# logging.verbose(\"Adding\", self, \"layer - input: \", self.input_shape, \"momentum:\", self.momentum, \"eps:\", self.eps, \"use cudnn:\", use_cudnn)", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.parse_desc": [[136, 142], ["layers.append", "batch_norm_relu.BatchNormReluLayer", "params.get", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"BNA\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "layers", ".", "append", "(", "BatchNormReluLayer", "(", "layers", ",", "params", ".", "get", "(", "0", ",", "0.9", ")", ",", "params", ".", "get", "(", "1", ",", "1e-5", ")", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.params": [[144, 146], ["None"], "methods", ["None"], ["", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", ",", "self", ".", "beta", ",", "self", ".", "mean", ",", "self", ".", "stdinv", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.updates": [[147, 149], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ",", "cost", ")", ":", "\n", "        ", "return", "self", ".", "local_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.biases": [[150, 152], ["None"], "methods", ["None"], ["", "def", "biases", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", ",", "self", ".", "beta", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.export_json": [[153, 162], ["super().export_json", "super().export_json.update", "batch_norm_relu.BatchNormReluLayer.mean.get_value", "batch_norm_relu.BatchNormReluLayer.stdinv.get_value", "batch_norm_relu.BatchNormReluLayer.omega.get_value", "batch_norm_relu.BatchNormReluLayer.beta.get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"momentum\"", ":", "self", ".", "momentum", ",", "\n", "\"eps\"", ":", "self", ".", "eps", ",", "\n", "\"mean\"", ":", "self", ".", "mean", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"std\"", ":", "self", ".", "stdinv", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"gamma\"", ":", "self", ".", "omega", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"bias\"", ":", "self", ".", "beta", ".", "get_value", "(", "borrow", "=", "True", ")", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluLayer.import_json": [[163, 168], ["batch_norm_relu.BatchNormReluLayer.omega.set_value", "batch_norm_relu.BatchNormReluLayer.beta.set_value", "batch_norm_relu.BatchNormReluLayer.mean.set_value", "batch_norm_relu.BatchNormReluLayer.stdinv.set_value", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "        ", "self", ".", "omega", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"gamma\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "beta", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"bias\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "mean", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"mean\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "stdinv", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"std\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.dnn_bnrelu_train": [[59, 81], ["batch_norm_relu.BatchNormReluOp", "tuple", "ValueError", "ValueError", "ValueError", "theano.tensor.shape_padright", "theano.tensor.shape_padright", "theano.tensor.shape_padright", "theano.tensor.shape_padright", "theano.tensor.shape_padright", "theano.tensor.shape_padright", "BatchNormReluOp.", "tuple", "theano.sandbox.cuda.basic_ops.gpu_contiguous", "theano.sandbox.cuda.basic_ops.gpu_contiguous", "theano.sandbox.cuda.basic_ops.gpu_contiguous", "theano.tensor.flatten", "theano.tensor.flatten"], "function", ["None"], ["", "", "def", "dnn_bnrelu_train", "(", "inputs", ",", "gamma", ",", "beta", ",", "mode", "=", "'per-activation'", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "    ", "ndim", "=", "inputs", ".", "ndim", "\n", "if", "ndim", ">", "5", ":", "\n", "        ", "raise", "ValueError", "(", "\"dnn_batch_normalization_train currently supports \"", "\n", "\"up to 5-dimensional tensors only, got %d\"", "%", "ndim", ")", "\n", "", "if", "gamma", ".", "ndim", "!=", "ndim", "or", "beta", ".", "ndim", "!=", "ndim", ":", "\n", "        ", "raise", "ValueError", "(", "\"gamma and beta must be of the same dimensionality \"", "\n", "\"as inputs; got %d and %d instead of %d\"", "%", "\n", "(", "gamma", ".", "ndim", ",", "beta", ".", "ndim", ",", "ndim", ")", ")", "\n", "", "if", "epsilon", "<", "1e-5", ":", "\n", "        ", "raise", "ValueError", "(", "\"epsilon must be at least 1e-5, got %f\"", "%", "epsilon", ")", "\n", "\n", "", "if", "ndim", "<", "4", ":", "\n", "        ", "inputs", "=", "theano", ".", "tensor", ".", "shape_padright", "(", "inputs", ",", "4", "-", "ndim", ")", "\n", "gamma", "=", "theano", ".", "tensor", ".", "shape_padright", "(", "gamma", ",", "4", "-", "ndim", ")", "\n", "beta", "=", "theano", ".", "tensor", ".", "shape_padright", "(", "beta", ",", "4", "-", "ndim", ")", "\n", "\n", "", "batchnorm_op", "=", "BatchNormReluOp", "(", "mode", "=", "mode", ",", "epsilon", "=", "epsilon", ")", "\n", "result", "=", "tuple", "(", "batchnorm_op", "(", "gpu_contiguous", "(", "inputs", ")", ",", "gpu_contiguous", "(", "gamma", ")", ",", "gpu_contiguous", "(", "beta", ")", ")", ")", "\n", "if", "ndim", "<", "4", ":", "\n", "        ", "result", "=", "tuple", "(", "theano", ".", "tensor", ".", "flatten", "(", "r", ",", "ndim", ")", "for", "r", "in", "result", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.dnn_bnrelu_test": [[82, 84], ["theano.nnet.relu", "theano.sandbox.cuda.dnn.dnn_batch_normalization_test"], "function", ["None"], ["", "def", "dnn_bnrelu_test", "(", "inputs", ",", "gamma", ",", "beta", ",", "mean", ",", "var", ",", "mode", "=", "'per-activation'", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "    ", "return", "tensor", ".", "nnet", ".", "relu", "(", "dnn_batch_normalization_test", "(", "inputs", ",", "gamma", ",", "beta", ",", "mean", ",", "var", ",", "mode", ",", "epsilon", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv.PoolInvLayer.__init__": [[13, 29], ["denet.layer.AbstractLayer.__init__", "json_param.get", "denet.verbose", "theano.repeat", "theano.repeat", "len", "denet.layer.pool_inv_op.PoolInvOp", "theano.repeat", "theano.repeat"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "size", "=", "(", "2", ",", "2", ")", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "size", "=", "json_param", ".", "get", "(", "\"size\"", ",", "size", ")", "\n", "\n", "#output dim", "\n", "self", ".", "output_shape", "=", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "self", ".", "size", "[", "1", "]", "*", "self", ".", "input_shape", "[", "2", "]", ",", "self", ".", "size", "[", "0", "]", "*", "self", ".", "input_shape", "[", "3", "]", ")", "\n", "self", ".", "use_optimized", "=", "theano", ".", "sandbox", ".", "cuda", ".", "cuda_enabled", "\n", "if", "self", ".", "use_optimized", ":", "\n", "            ", "self", ".", "output", "=", "PoolInvOp", "(", "self", ".", "size", ")", "(", "self", ".", "input", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "tensor", ".", "repeat", "(", "tensor", ".", "repeat", "(", "self", ".", "input", ",", "self", ".", "size", "[", "1", "]", ",", "axis", "=", "2", ")", ",", "self", ".", "size", "[", "0", "]", ",", "axis", "=", "3", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv.PoolInvLayer.parse_desc": [[30, 37], ["layers.append", "params.get", "params.get", "pool_inv.PoolInvLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"PI\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "size", "=", "(", "params", ".", "get", "(", "0", ")", ",", "params", ".", "get", "(", "0", ")", ")", "\n", "layers", ".", "append", "(", "PoolInvLayer", "(", "layers", ",", "size", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.pool_inv.PoolInvLayer.export_json": [[38, 42], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"size\"", ":", "self", ".", "size", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.__init__": [[15, 85], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "logging.verbose", "denet.verbose", "denet.verbose", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.switch", "theano.switch", "theano.switch", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sandbox.cuda.dnn.dnn_available", "theano.sqr", "theano.sqr", "theano.sqr", "dnn_batch_normalization_train", "dnn_batch_normalization_test", "x.dimshuffle().flatten", "theano.cast", "theano.cast", "theano.cast", "theano.sqrt", "theano.sqrt", "theano.sqrt", "denet.layer.get_train", "theano.as_tensor_variable", "theano.as_tensor_variable", "theano.as_tensor_variable", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "theano.gradient.disconnected_grad", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.ones", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "theano.sandbox.cuda.dnn.version", "batch_norm.BatchNormLayer.omega.dimshuffle", "batch_norm.BatchNormLayer.beta.dimshuffle", "batch_norm.BatchNormLayer.omega.dimshuffle", "batch_norm.BatchNormLayer.beta.dimshuffle", "batch_norm.BatchNormLayer.mean.dimshuffle", "theano.sqr.dimshuffle", "theano.sum", "theano.sum", "theano.sum", "batch_norm.BatchNormLayer.beta.dimshuffle", "batch_norm.BatchNormLayer.beta.dimshuffle", "x.dimshuffle", "theano.mean", "theano.mean", "theano.mean", "batch_norm.BatchNormLayer.mean.dimshuffle", "theano.cast.dimshuffle", "theano.cast.squeeze", "x_stdinv.squeeze"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], ["def", "__init__", "(", "self", ",", "layers", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-5", ",", "renorm_max_r", "=", "1.0", ",", "renorm_max_d", "=", "0.0", ",", "renorm_max_it", "=", "10", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "enabled", "=", "json_param", ".", "get", "(", "\"enabled\"", ",", "True", ")", "\n", "self", ".", "momentum", "=", "json_param", ".", "get", "(", "\"momentum\"", ",", "momentum", ")", "\n", "\n", "self", ".", "renorm_max_r", "=", "json_param", ".", "get", "(", "\"renormMaxR\"", ",", "renorm_max_r", ")", "\n", "self", ".", "renorm_max_d", "=", "json_param", ".", "get", "(", "\"renormMaxD\"", ",", "renorm_max_d", ")", "\n", "self", ".", "renorm_max_it", "=", "json_param", ".", "get", "(", "\"renormMaxIt\"", ",", "renorm_max_it", ")", "\n", "\n", "self", ".", "eps", "=", "json_param", ".", "get", "(", "\"eps\"", ",", "eps", ")", "\n", "if", "self", ".", "enabled", ":", "\n", "\n", "#initialize param", "\n", "            ", "param_shape", "=", "(", "self", ".", "input_shape", "[", "1", "]", ",", ")", "\n", "self", ".", "omega", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "ones", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn omega\"", ")", "\n", "self", ".", "beta", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "zeros", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn beta\"", ")", "\n", "self", ".", "mean", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "zeros", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn mean\"", ")", "\n", "self", ".", "stdinv", "=", "theano", ".", "shared", "(", "numpy", ".", "asarray", "(", "numpy", ".", "ones", "(", "param_shape", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "name", "=", "\"bn std inv\"", ")", "\n", "\n", "#evaluate", "\n", "x_shape", "=", "self", ".", "input_shape", "\n", "x", "=", "self", ".", "input", "\n", "\n", "#directly call cudnn version until added to master", "\n", "dim", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "use_cudnn", "=", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", ".", "dnn_available", "(", ")", "and", "(", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", ".", "version", "(", ")", ">=", "(", "5000", ",", "5000", ")", ")", "\n", "# use_cudnn = theano.gpuarray.dnn.dnn_available(None) and (theano.gpuarray.dnn.version() >= 5000)", "\n", "if", "use_cudnn", ":", "\n", "                ", "from", "theano", ".", "sandbox", ".", "cuda", ".", "dnn", "import", "dnn_batch_normalization_train", ",", "dnn_batch_normalization_test", "\n", "# from theano.gpuarray.dnn import dnn_batch_normalization_train, dnn_batch_normalization_test", "\n", "var", "=", "tensor", ".", "sqr", "(", "1.0", "/", "self", ".", "stdinv", ")", "\n", "x_n_train", ",", "x_mean", ",", "x_stdinv", "=", "dnn_batch_normalization_train", "(", "x", ",", "self", ".", "omega", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", ",", "'spatial'", ",", "self", ".", "eps", ")", "\n", "x_n_test", "=", "dnn_batch_normalization_test", "(", "x", ",", "self", ".", "omega", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", ",", "self", ".", "mean", ".", "dimshuffle", "(", "dim", ")", ",", "var", ".", "dimshuffle", "(", "dim", ")", ",", "'spatial'", ",", "self", ".", "eps", ")", "\n", "x_std", "=", "1.0", "/", "x_stdinv", "\n", "", "else", ":", "\n", "#WARNING: BROKEN!", "\n", "                ", "xt", "=", "x", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "flatten", "(", "2", ")", "\n", "x_mean", "=", "tensor", ".", "sum", "(", "xt", ",", "axis", "=", "1", ")", "/", "(", "self", ".", "input_shape", "[", "0", "]", "*", "self", ".", "input_shape", "[", "2", "]", "*", "self", ".", "input_shape", "[", "3", "]", ")", "\n", "x_mean", "=", "tensor", ".", "cast", "(", "x_mean", ",", "\"float32\"", ")", "\n", "x_std", "=", "tensor", ".", "sqrt", "(", "tensor", ".", "mean", "(", "x", "*", "x", ",", "axis", "=", "[", "0", ",", "2", ",", "3", "]", ")", "-", "x_mean", "*", "x_mean", "+", "self", ".", "eps", ")", "\n", "x_stdinv", "=", "1.0", "/", "x_std", "\n", "\n", "x_n_test", "=", "(", "x", "-", "self", ".", "mean", ".", "dimshuffle", "(", "dim", ")", ")", "*", "(", "self", ".", "omega", "*", "self", ".", "stdinv", ")", ".", "dimshuffle", "(", "dim", ")", "+", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", "\n", "x_n_train", "=", "(", "x", "-", "x_mean", ".", "dimshuffle", "(", "dim", ")", ")", "*", "(", "self", ".", "omega", "*", "x_stdinv", ")", ".", "dimshuffle", "(", "dim", ")", "+", "self", ".", "beta", ".", "dimshuffle", "(", "dim", ")", "\n", "\n", "#override old value with renormalized version", "\n", "# if (self.renorm_max_r > 1.0) or (self.renorm_max_d > 0.0):", "\n", "#     r_alpha = math.log(self.renorm_max_r) / self.renorm_max_it", "\n", "#     d_alpha = math.log(self.renorm_max_d + 1) / self.renorm_max_it", "\n", "#     r_max = tensor.minimum(self.renorm_max_r, tensor.exp(get_epoch()*r_alpha))", "\n", "#     d_max = tensor.minimum(self.renorm_max_d, tensor.exp(get_epoch()*d_alpha) - 1)", "\n", "#     x_r = tensor.gradient.zero_grad(tensor.clip(x_std*self.stdinv, 1.0/r_max, r_max))", "\n", "#     x_d = tensor.gradient.zero_grad(tensor.clip((x_mean - self.mean) * self.stdinv, -d_max, d_max))", "\n", "#     x_n_train = (x - x_mean.dimshuffle(dim)) * (self.omega*x_stdinv*x_r).dimshuffle(dim) + (self.beta + self.omega*x_d).dimshuffle(dim)", "\n", "\n", "", "self", ".", "local_updates", "=", "[", "(", "self", ".", "mean", ",", "self", ".", "momentum", "*", "self", ".", "mean", "+", "(", "1.0", "-", "self", ".", "momentum", ")", "*", "x_mean", ".", "squeeze", "(", ")", ")", ",", "\n", "(", "self", ".", "stdinv", ",", "self", ".", "momentum", "*", "self", ".", "stdinv", "+", "(", "1.0", "-", "self", ".", "momentum", ")", "*", "x_stdinv", ".", "squeeze", "(", ")", ")", "]", "\n", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "self", ".", "output", "=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "tensor", ".", "as_tensor_variable", "(", "x_n_train", ")", ",", "theano", ".", "gradient", ".", "disconnected_grad", "(", "x_n_test", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "self", ".", "output", "=", "self", ".", "input", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "# logging.verbose(\"Adding\", self, \"layer - input: \", self.input_shape, \"momentum:\", self.momentum, \"eps:\", self.eps, ", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.parse_desc": [[89, 98], ["params.get", "params.get", "params.get", "layers.append", "batch_norm.BatchNormLayer", "params.get", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"BN\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "renorm_max_r", "=", "params", ".", "get", "(", "2", ",", "1", ")", "\n", "renorm_max_d", "=", "params", ".", "get", "(", "3", ",", "0", ")", "\n", "renorm_max_it", "=", "params", ".", "get", "(", "4", ",", "0", ")", "\n", "layers", ".", "append", "(", "BatchNormLayer", "(", "layers", ",", "params", ".", "get", "(", "0", ",", "0.9", ")", ",", "params", ".", "get", "(", "1", ",", "1e-5", ")", ",", "renorm_max_r", ",", "renorm_max_d", ",", "renorm_max_it", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.params": [[100, 102], ["None"], "methods", ["None"], ["", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", ",", "self", ".", "beta", ",", "self", ".", "mean", ",", "self", ".", "stdinv", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.updates": [[103, 105], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ",", "cost", ")", ":", "\n", "        ", "return", "self", ".", "local_updates", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.biases": [[106, 108], ["None"], "methods", ["None"], ["", "def", "biases", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "omega", ",", "self", ".", "beta", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.export_json": [[109, 122], ["super().export_json", "super().export_json.update", "batch_norm.BatchNormLayer.mean.get_value", "batch_norm.BatchNormLayer.stdinv.get_value", "batch_norm.BatchNormLayer.omega.get_value", "batch_norm.BatchNormLayer.beta.get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"momentum\"", ":", "self", ".", "momentum", ",", "\n", "\"eps\"", ":", "self", ".", "eps", ",", "\n", "\"mean\"", ":", "self", ".", "mean", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"std\"", ":", "self", ".", "stdinv", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"gamma\"", ":", "self", ".", "omega", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"bias\"", ":", "self", ".", "beta", ".", "get_value", "(", "borrow", "=", "True", ")", ",", "\n", "\"renormMaxR\"", ":", "self", ".", "renorm_max_r", ",", "\n", "\"renormMaxD\"", ":", "self", ".", "renorm_max_d", ",", "\n", "\"renormMaxIt\"", ":", "self", ".", "renorm_max_it", ",", "\n", "\"enabled\"", ":", "self", ".", "enabled", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.BatchNormLayer.import_json": [[123, 129], ["batch_norm.BatchNormLayer.omega.set_value", "batch_norm.BatchNormLayer.beta.set_value", "batch_norm.BatchNormLayer.mean.set_value", "batch_norm.BatchNormLayer.stdinv.set_value", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "        ", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "omega", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"gamma\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "beta", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"bias\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "mean", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"mean\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "stdinv", ".", "set_value", "(", "numpy", ".", "asarray", "(", "json_param", "[", "\"std\"", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm.test": [[131, 155], ["numpy.random.seed", "theano.tensor4", "batch_norm.BatchNormLayer", "theano.function", "theano.function", "theano.function", "numpy.random.uniform().astype", "theano.function.", "BatchNormLayer.mean.get_value", "BatchNormLayer.std.get_value", "theano.tensor.tensor4", "theano.tensor.tensor4", "theano.tensor.tensor4", "theano.function", "theano.function", "theano.function", "numpy.random.uniform().astype", "print", "theano.tensor.tensor4.mean", "theano.function.", "Exception", "InitialLayer", "numpy.random.uniform", "numpy.random.uniform", "abs", "abs", "abs", "abs", "f.mean", "f.std", "bn.mean.get_value.mean", "bn.std.get_value.mean", "f.mean", "denet.layer.get_train", "theano.cast", "f.std", "bn.mean.get_value.mean", "bn.std.get_value.mean", "numpy.random.uniform().astype.mean"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train"], ["", "", "", "def", "test", "(", ")", ":", "\n", "    ", "from", "denet", ".", "layer", "import", "InitialLayer", "\n", "numpy", ".", "random", ".", "seed", "(", "1002", ")", "\n", "eps", "=", "1e-4", "\n", "\n", "input", "=", "tensor", ".", "tensor4", "(", ")", "\n", "input_shape", "=", "(", "64", ",", "128", ",", "32", ",", "32", ")", "\n", "bn", "=", "BatchNormLayer", "(", "[", "InitialLayer", "(", "input", ",", "input_shape", ")", "]", ")", "\n", "f", "=", "theano", ".", "function", "(", "[", "input", "]", ",", "bn", ".", "output", ",", "updates", "=", "bn", ".", "local_updates", ",", "givens", "=", "[", "(", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "1", ",", "'int8'", ")", ")", "]", ")", "\n", "x", "=", "numpy", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ",", "input_shape", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "y", "=", "f", "(", "x", ")", "\n", "x_mean", "=", "bn", ".", "mean", ".", "get_value", "(", ")", "\n", "x_std", "=", "bn", ".", "std", ".", "get_value", "(", ")", "\n", "\n", "import", "theano", "\n", "import", "numpy", "\n", "input", "=", "theano", ".", "tensor", ".", "tensor4", "(", ")", "\n", "f", "=", "theano", ".", "function", "(", "[", "input", "]", ",", "input", ".", "mean", "(", ")", ")", "\n", "x", "=", "numpy", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ",", "(", "64", ",", "128", ",", "32", ",", "32", ")", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "print", "(", "\"Mean TEST = \"", ",", "f", "(", "x", ")", ")", "\n", "\n", "\n", "if", "abs", "(", "y", ".", "mean", "(", ")", ")", ">", "eps", "or", "abs", "(", "y", ".", "std", "(", ")", "-", "1.0", ")", ">", "eps", "or", "abs", "(", "x_mean", ".", "mean", "(", ")", "-", "x", ".", "mean", "(", ")", "*", "0.1", ")", ">", "eps", "or", "abs", "(", "x_std", ".", "mean", "(", ")", "-", "1.24641", ")", ">", "eps", ":", "\n", "        ", "raise", "Exception", "(", "\"Batchnorm failed test! \"", ",", "y", ".", "mean", "(", ")", ",", "y", ".", "std", "(", ")", ",", "x_mean", ".", "mean", "(", ")", ",", "x_std", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.dropout.DropoutLayer.__init__": [[12, 28], ["denet.layer.AbstractLayer.__init__", "json_param.get", "denet.layer.get_rng().binomial", "theano.cast", "theano.cast", "theano.ifelse.ifelse", "theano.ifelse.ifelse", "theano.ifelse.ifelse", "theano.ifelse.ifelse", "denet.verbose", "denet.layer.get_train", "len", "denet.layer.get_rng"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng"], ["def", "__init__", "(", "self", ",", "layers", ",", "dropout_rate", "=", "1.0", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "#get parameters", "\n", "self", ".", "dropout_rate", "=", "json_param", ".", "get", "(", "\"dropoutRate\"", ",", "dropout_rate", ")", "\n", "\n", "scale", "=", "1.0", "/", "(", "1.0", "-", "self", ".", "dropout_rate", ")", "\n", "mask", "=", "get_rng", "(", ")", ".", "binomial", "(", "n", "=", "1", ",", "p", "=", "1.0", "-", "self", ".", "dropout_rate", ",", "size", "=", "self", ".", "input_shape", ")", "\n", "mask", "=", "tensor", ".", "cast", "(", "mask", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "self", ".", "output", "=", "theano", ".", "ifelse", ".", "ifelse", "(", "get_train", "(", ")", ",", "self", ".", "input", "*", "mask", "*", "scale", ",", "self", ".", "input", ")", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ",", "\"layer - input:\"", ",", "self", ".", "input_shape", ",", "\"dropout: %.0f%%\"", "%", "(", "100.0", "*", "self", ".", "dropout_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.dropout.DropoutLayer.parse_desc": [[29, 35], ["params.get", "layers.append", "dropout.DropoutLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"D\"", ":", "\n", "            ", "return", "False", "\n", "", "dropout_rate", "=", "params", ".", "get", "(", "0", ",", "0.5", ")", "\n", "layers", ".", "append", "(", "DropoutLayer", "(", "layers", ",", "dropout_rate", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.dropout.DropoutLayer.export_json": [[36, 40], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"dropoutRate\"", ":", "self", ".", "dropout_rate", "}", ")", "\n", "return", "json", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.__init__": [[28, 113], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "denet.find_layers", "denet.find_layers", "denet.find_layers", "denet.log_softmax", "denet.log_softmax", "denet.log_softmax", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "denet.verbose", "denet.verbose", "denet.verbose", "denet.layer.convolution.ConvLayer", "denet.layer.convolution.ConvLayer", "denet.layer.convolution.ConvLayer", "numpy.zeros", "theano.concatenate", "theano.concatenate", "denet.log_softmax", "denet.log_softmax", "denet.log_softmax", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "len", "theano.exp", "theano.exp", "theano.exp", "theano.exp", "numpy.zeros", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax"], ["def", "__init__", "(", "self", ",", "layers", ",", "class_num", "=", "10", ",", "overlap_threshold", "=", "0.5", ",", "cost_factor", "=", "1.0", ",", "bbox_factor", "=", "0.0", ",", "indfit_factor", "=", "0.0", ",", "\n", "use_jointfit", "=", "False", ",", "use_bounded_iou", "=", "False", ",", "json_param", "=", "{", "}", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "#passthrough layer", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "self", ".", "output", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "output_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "cost_factor", "=", "json_param", ".", "get", "(", "\"costFactor\"", ",", "cost_factor", ")", "\n", "self", ".", "bbox_factor", "=", "json_param", ".", "get", "(", "\"bboxFactor\"", ",", "bbox_factor", ")", "\n", "self", ".", "class_num", "=", "json_param", ".", "get", "(", "\"classNum\"", ",", "class_num", ")", "\n", "self", ".", "overlap_threshold", "=", "json_param", ".", "get", "(", "\"overlapThreshold\"", ",", "overlap_threshold", ")", "\n", "\n", "#Joint Fitness and Bounded IoU additions", "\n", "self", ".", "use_jointfit", "=", "json_param", ".", "get", "(", "\"useJointFitness\"", ",", "use_jointfit", ")", "\n", "self", ".", "use_bounded_iou", "=", "json_param", ".", "get", "(", "\"useBoundedIoU\"", ",", "use_bounded_iou", ")", "\n", "self", ".", "indfit_factor", "=", "json_param", ".", "get", "(", "\"fitnessFactor\"", ",", "indfit_factor", ")", "\n", "self", ".", "use_indfit", "=", "(", "self", ".", "indfit_factor", ">", "0.0", ")", "\n", "assert", "not", "(", "self", ".", "use_indfit", "and", "self", ".", "use_jointfit", ")", ",", "\"Cannot enable both fitness methods at once!\"", "\n", "\n", "#find sparse / instcount / compare layer", "\n", "self", ".", "sparse_layer", "=", "common", ".", "find_layers", "(", "layers", ",", "\"denet-sparse\"", ",", "False", ")", "\n", "assert", "self", ".", "sparse_layer", "!=", "None", ",", "\"Error: Requires denet-sparse layer to be specified before denet-detect layer!\"", "\n", "\n", "self", ".", "use_bbox_reg", "=", "(", "self", ".", "bbox_factor", ">", "0.0", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "sparse_layer", ".", "batch_size", "\n", "self", ".", "sample_num", "=", "self", ".", "sparse_layer", ".", "sample_num", "\n", "self", ".", "null_class", "=", "self", ".", "class_num", "\n", "\n", "if", "self", ".", "use_jointfit", ":", "\n", "            ", "self", ".", "fitness_num", "=", "5", "\n", "self", ".", "null_class", "=", "self", ".", "class_num", "*", "self", ".", "fitness_num", "\n", "s0", "=", "self", ".", "class_num", "*", "self", ".", "fitness_num", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "fitness_num", "=", "6", "\n", "self", ".", "null_class", "=", "self", ".", "class_num", "\n", "s0", "=", "self", ".", "class_num", "+", "1", "\n", "\n", "#", "\n", "", "s1", "=", "4", "if", "self", ".", "use_bbox_reg", "else", "0", "\n", "s2", "=", "self", ".", "fitness_num", "if", "self", ".", "use_indfit", "else", "0", "\n", "self", ".", "layers", "=", "[", "ConvLayer", "(", "[", "InitialLayer", "(", "self", ".", "input", ",", "self", ".", "input_shape", ")", "]", ",", "(", "s0", "+", "s1", "+", "s2", ",", "self", ".", "input_shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "True", ",", "\"valid\"", ",", "0.0", ")", "]", "\n", "\n", "#class assignment log(Pr(X | sample_j, sample_i)) where X is either the class distribution or the class-fitness distribution for joint fitness", "\n", "self", ".", "det_shape", "=", "(", "self", ".", "batch_size", ",", "s0", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", "\n", "self", ".", "det_lh", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", ":", "s0", ",", "...", "]", "\n", "self", ".", "det_lh", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", ":", "s0", ",", "...", "]", "\n", "self", ".", "det_pr", "=", "theano_util", ".", "log_softmax", "(", "self", ".", "det_lh", ",", "axis", "=", "[", "1", "]", ")", "\n", "self", ".", "det_pr_target", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "det_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", ")", "\n", "\n", "#bbox regression", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "self", ".", "bbox_shape", "=", "(", "self", ".", "batch_size", ",", "s1", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", "\n", "self", ".", "bbox_reg", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", "s0", ":", "(", "s0", "+", "s1", ")", ",", "...", "]", "\n", "\n", "#updated sample bounding boxes", "\n", "sample_cx", "=", "0.5", "*", "(", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "sample_cy", "=", "0.5", "*", "(", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "\n", "sample_w", "=", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "sample_h", "=", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "3", "]", "-", "self", ".", "sparse_layer", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "\n", "predict_cx", "=", "self", ".", "bbox_reg", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "sample_w", "+", "sample_cx", "\n", "predict_cy", "=", "self", ".", "bbox_reg", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "sample_h", "+", "sample_cy", "\n", "predict_w", "=", "tensor", ".", "exp", "(", "self", ".", "bbox_reg", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", "*", "sample_w", "\n", "predict_h", "=", "tensor", ".", "exp", "(", "self", ".", "bbox_reg", "[", ":", ",", "3", ",", ":", ",", ":", "]", ")", "*", "sample_h", "\n", "predict_x0", "=", "predict_cx", "-", "predict_w", "*", "0.5", "\n", "predict_y0", "=", "predict_cy", "-", "predict_h", "*", "0.5", "\n", "predict_x1", "=", "predict_cx", "+", "predict_w", "*", "0.5", "\n", "predict_y1", "=", "predict_cy", "+", "predict_h", "*", "0.5", "\n", "self", ".", "bbox_predict", "=", "tensor", ".", "concatenate", "(", "[", "predict_x0", "[", "...", ",", "None", "]", ",", "predict_y0", "[", "...", ",", "None", "]", ",", "predict_x1", "[", "...", ",", "None", "]", ",", "predict_y1", "[", "...", ",", "None", "]", "]", ",", "axis", "=", "len", "(", "self", ".", "bbox_shape", ")", "-", "1", ")", "\n", "\n", "#independent fitness distribution", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "self", ".", "indfit_shape", "=", "(", "self", ".", "batch_size", ",", "s2", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", "\n", "self", ".", "indfit_lh", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "[", ":", ",", "(", "s0", "+", "s1", ")", ":", "(", "s0", "+", "s1", "+", "s2", ")", ",", "...", "]", "\n", "self", ".", "indfit_pr", "=", "theano_util", ".", "log_softmax", "(", "self", ".", "indfit_lh", ",", "axis", "=", "[", "1", "]", ")", "\n", "self", ".", "indfit_pr_target", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "indfit_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", ")", "\n", "\n", "", "self", ".", "detect_func", "=", "None", "\n", "self", ".", "nms_func", "=", "None", "\n", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.parse_desc": [[115, 128], ["params.get", "params.get", "params.get", "params.get", "layers.append", "denet_detect.DeNetDetectLayer", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"DND\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "overlap_threshold", "=", "params", ".", "get", "(", "0", ",", "0.5", ")", "\n", "cost_factor", "=", "params", ".", "get", "(", "1", ",", "1.0", ")", "\n", "bbox_factor", "=", "params", ".", "get", "(", "2", ",", "0.0", ")", "\n", "indfit_factor", "=", "params", ".", "get", "(", "3", ",", "0.0", ")", "\n", "use_jointfit", "=", "\"J\"", "in", "tags", "\n", "use_bounded_iou", "=", "\"B\"", "in", "tags", "\n", "layers", ".", "append", "(", "DeNetDetectLayer", "(", "layers", ",", "params", ".", "get", "(", "\"classNum\"", ")", ",", "overlap_threshold", ",", "cost_factor", ",", "bbox_factor", ",", "indfit_factor", ",", "\n", "use_jointfit", ",", "use_bounded_iou", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.import_json": [[129, 135], ["super().import_json", "denet_detect.DeNetDetectLayer.layers[].import_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["", "def", "import_json", "(", "self", ",", "json_param", ")", ":", "\n", "        ", "super", "(", ")", ".", "import_json", "(", "json_param", ")", "\n", "\n", "#backward compatibility", "\n", "if", "\"conv\"", "in", "json_param", ":", "\n", "            ", "self", ".", "layers", "[", "0", "]", ".", "import_json", "(", "json_param", "[", "\"conv\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.export_json": [[136, 146], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"costFactor\"", ":", "self", ".", "cost_factor", ",", "\n", "\"bboxFactor\"", ":", "self", ".", "bbox_factor", ",", "\n", "\"fitnessFactor\"", ":", "self", ".", "indfit_factor", ",", "\n", "\"useJointFitness\"", ":", "self", ".", "use_jointfit", ",", "\n", "\"useBoundedIoU\"", ":", "self", ".", "use_bounded_iou", ",", "\n", "\"classNum\"", ":", "self", ".", "class_num", ",", "\n", "\"overlapThreshold\"", ":", "self", ".", "overlap_threshold", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.get_target": [[147, 236], ["denet.Timer", "denet.Timer", "denet.Timer", "numpy.zeros", "enumerate", "numpy.zeros.flatten", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros.sum", "numpy.concatenate", "numpy.concatenate", "numpy.array", "denet.get_overlap_iou", "denet.get_overlap_iou", "denet.get_overlap_iou", "numpy.where", "zip", "numpy.zeros.sum", "len", "len", "bbox_indexs.tolist", "sample_indexs.tolist", "denet.get_overlap_iou.argmax", "range", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.zeros.flatten", "max", "max", "len", "min", "int", "min", "int", "math.floor"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.get_overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.get_overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.get_overlap_iou"], ["", "def", "get_target", "(", "self", ",", "model", ",", "samples", ",", "metas", ")", ":", "\n", "\n", "        ", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "\n", "#build sample", "\n", "det_pr", "=", "numpy", ".", "zeros", "(", "self", ".", "det_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "det_pr", "[", ":", ",", "self", ".", "null_class", ",", "...", "]", "=", "1.0", "\n", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "bbox_valid", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "bbox_reg", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "8", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "bbox_reg", "[", ":", ",", "2", ",", "...", "]", "=", "1.0", "\n", "bbox_reg", "[", ":", ",", "3", ",", "...", "]", "=", "1.0", "\n", "bbox_reg", "[", ":", ",", "6", ",", "...", "]", "=", "1.0", "\n", "bbox_reg", "[", ":", ",", "7", ",", "...", "]", "=", "1.0", "\n", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_pr", "=", "numpy", ".", "zeros", "(", "self", ".", "indfit_shape", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "indfit_pr", "[", ":", ",", "0", ",", "...", "]", "=", "1.0", "\n", "\n", "", "for", "b", ",", "meta", "in", "enumerate", "(", "metas", ")", ":", "\n", "\n", "            ", "samples", "=", "[", "bbox", "for", "_", ",", "bbox", "in", "self", ".", "sparse_layer", ".", "sample_bbox_list", "[", "b", "]", "]", "\n", "if", "len", "(", "meta", "[", "\"bbox\"", "]", ")", ">", "0", "and", "len", "(", "samples", ")", ">", "0", ":", "\n", "                ", "overlap", "=", "theano_util", ".", "get_overlap_iou", "(", "meta", "[", "\"bbox\"", "]", ",", "samples", ")", "\n", "bbox_indexs", ",", "sample_indexs", "=", "numpy", ".", "where", "(", "overlap", ">", "self", ".", "overlap_threshold", "[", "0", "]", ")", "\n", "for", "obj", ",", "index", "in", "zip", "(", "bbox_indexs", ".", "tolist", "(", ")", ",", "sample_indexs", ".", "tolist", "(", ")", ")", ":", "\n", "                    ", "sample_i", "=", "index", "%", "self", ".", "sparse_layer", ".", "sample_num", "\n", "sample_j", "=", "index", "//", "self", ".", "sparse_layer", ".", "sample_num", "\n", "sample_cls", "=", "meta", "[", "\"class\"", "]", "[", "obj", "]", "\n", "sample_bbox", "=", "samples", "[", "index", "]", "\n", "sample_f", "=", "(", "overlap", "[", "obj", ",", "index", "]", "-", "self", ".", "overlap_threshold", "[", "0", "]", ")", "/", "(", "1.0", "-", "self", ".", "overlap_threshold", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_jointfit", ":", "\n", "                        ", "f", "=", "max", "(", "0", ",", "min", "(", "int", "(", "self", ".", "fitness_num", "*", "sample_f", ")", ",", "self", ".", "fitness_num", "-", "1", ")", ")", "\n", "det_pr", "[", "b", ",", "sample_cls", "*", "self", ".", "fitness_num", "+", "f", ",", "sample_j", ",", "sample_i", "]", "=", "1.0", "\n", "det_pr", "[", "b", ",", "self", ".", "null_class", ",", "sample_j", ",", "sample_i", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                        ", "det_pr", "[", "b", ",", "sample_cls", ",", "sample_j", ",", "sample_i", "]", "=", "1.0", "\n", "det_pr", "[", "b", ",", "self", ".", "null_class", ",", "sample_j", ",", "sample_i", "]", "=", "0.0", "\n", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "                        ", "f", "=", "1", "+", "int", "(", "math", ".", "floor", "(", "(", "self", ".", "fitness_num", "-", "1", ")", "*", "sample_f", ")", ")", "\n", "f", "=", "max", "(", "1", ",", "min", "(", "f", ",", "self", ".", "fitness_num", "-", "1", ")", ")", "\n", "indfit_pr", "[", "b", ",", "0", ",", "sample_j", ",", "sample_i", "]", "=", "0.0", "\n", "indfit_pr", "[", "b", ",", "f", ",", "sample_j", ",", "sample_i", "]", "=", "1.0", "\n", "\n", "", "", "if", "self", ".", "use_bbox_reg", ":", "\n", "                    ", "overlap_max", "=", "overlap", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "                        ", "obj", "=", "overlap_max", "[", "index", "]", "\n", "if", "overlap", "[", "obj", ",", "index", "]", "<=", "self", ".", "overlap_threshold", "[", "1", "]", ":", "\n", "                            ", "continue", "\n", "\n", "", "sample", "=", "samples", "[", "index", "]", "\n", "target", "=", "meta", "[", "\"bbox\"", "]", "[", "obj", "]", "\n", "sample_i", "=", "index", "%", "self", ".", "sparse_layer", ".", "sample_num", "\n", "sample_j", "=", "index", "//", "self", ".", "sparse_layer", ".", "sample_num", "\n", "bbox_valid", "[", "b", ",", "sample_j", ",", "sample_i", "]", "=", "1.0", "\n", "bbox_reg", "[", "b", ",", "0", ",", "sample_j", ",", "sample_i", "]", "=", "0.5", "*", "(", "target", "[", "0", "]", "+", "target", "[", "2", "]", ")", "\n", "bbox_reg", "[", "b", ",", "1", ",", "sample_j", ",", "sample_i", "]", "=", "0.5", "*", "(", "target", "[", "1", "]", "+", "target", "[", "3", "]", ")", "\n", "bbox_reg", "[", "b", ",", "2", ",", "sample_j", ",", "sample_i", "]", "=", "target", "[", "2", "]", "-", "target", "[", "0", "]", "\n", "bbox_reg", "[", "b", ",", "3", ",", "sample_j", ",", "sample_i", "]", "=", "target", "[", "3", "]", "-", "target", "[", "1", "]", "\n", "bbox_reg", "[", "b", ",", "4", ",", "sample_j", ",", "sample_i", "]", "=", "0.5", "*", "(", "sample", "[", "0", "]", "+", "sample", "[", "2", "]", ")", "\n", "bbox_reg", "[", "b", ",", "5", ",", "sample_j", ",", "sample_i", "]", "=", "0.5", "*", "(", "sample", "[", "1", "]", "+", "sample", "[", "3", "]", ")", "\n", "bbox_reg", "[", "b", ",", "6", ",", "sample_j", ",", "sample_i", "]", "=", "sample", "[", "2", "]", "-", "sample", "[", "0", "]", "\n", "bbox_reg", "[", "b", ",", "7", ",", "sample_j", ",", "sample_i", "]", "=", "sample", "[", "3", "]", "-", "sample", "[", "1", "]", "\n", "\n", "#normalize probabilities", "\n", "", "", "", "", "det_pr", "/=", "det_pr", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "None", ",", "...", "]", "\n", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_pr", "/=", "indfit_pr", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "None", ",", "...", "]", "\n", "\n", "#normalize by number of samples", "\n", "", "nfactor", "=", "self", ".", "sample_num", "*", "self", ".", "sample_num", "\n", "det_pr", "/=", "nfactor", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "bbox_valid", "/=", "nfactor", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_pr", "/=", "nfactor", "\n", "\n", "#pack indices / values", "\n", "", "yt_value", "=", "det_pr", ".", "flatten", "(", ")", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "yt_value", "=", "numpy", ".", "concatenate", "(", "(", "yt_value", ",", "bbox_valid", ".", "flatten", "(", ")", ",", "bbox_reg", ".", "flatten", "(", ")", ")", ")", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "yt_value", "=", "numpy", ".", "concatenate", "(", "(", "yt_value", ",", "indfit_pr", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "return", "numpy", ".", "array", "(", "[", "]", ",", "dtype", "=", "numpy", ".", "int64", ")", ",", "yt_value", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.get_errors": [[238, 302], ["denet.ndarray_unpack", "denet.ndarray_unpack", "denet.ndarray_unpack", "math.log", "theano.zeros", "theano.zeros", "theano.sum", "theano.sum", "theano.switch", "theano.switch", "theano.switch", "theano.switch", "theano.concatenate", "theano.concatenate", "theano.log", "theano.log", "theano.log", "theano.log", "theano.concatenate", "theano.concatenate", "math.log", "theano.minimum", "theano.minimum", "theano.minimum", "theano.minimum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "denet.smooth_L1", "denet.smooth_L1", "denet.smooth_L1", "denet.smooth_L1", "denet.smooth_L1", "denet.smooth_L1"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1"], ["", "def", "get_errors", "(", "self", ",", "yt_index", ",", "yt_value", ")", ":", "\n", "\n", "#unpack indexs and values", "\n", "        ", "shapes", "=", "[", "self", ".", "det_shape", "]", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "shapes", "+=", "[", "(", "self", ".", "batch_size", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", ",", "(", "self", ".", "batch_size", ",", "8", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", "]", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "shapes", "+=", "[", "self", ".", "indfit_shape", "]", "\n", "\n", "", "v", "=", "common", ".", "ndarray_unpack", "(", "yt_value", ",", "shapes", ")", "\n", "det_pr", "=", "v", "[", "0", "]", "\n", "index", "=", "1", "\n", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "bbox_valid", ",", "bbox_reg", "=", "v", "[", "index", ":", "(", "index", "+", "2", ")", "]", "\n", "index", "+=", "2", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_pr", "=", "v", "[", "index", ":", "(", "index", "+", "1", ")", "]", "\n", "\n", "#Detection Cost:", "\n", "", "det_errors", "=", "-", "tensor", ".", "sum", "(", "det_pr", "*", "self", ".", "det_pr", ",", "axis", "=", "1", ")", "/", "math", ".", "log", "(", "self", ".", "det_shape", "[", "1", "]", ")", "\n", "\n", "#Bounding Box Regression Cost:", "\n", "bbox_errors", "=", "None", "\n", "if", "self", ".", "use_bbox_reg", "and", "self", ".", "bbox_factor", ">", "0.0", ":", "\n", "            ", "bbox_target", "=", "bbox_reg", "[", ":", ",", "0", ":", "4", ",", "...", "]", "\n", "bbox_sample", "=", "bbox_reg", "[", ":", ",", "4", ":", "8", ",", "...", "]", "\n", "\n", "bbox_errors", "=", "tensor", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "if", "self", ".", "use_bounded_iou", ":", "\n", "                ", "target_x", "=", "bbox_target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "target_y", "=", "bbox_target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "target_w", "=", "bbox_target", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "target_h", "=", "bbox_target", "[", ":", ",", "3", ",", ":", ",", ":", "]", "\n", "predict_x", "=", "0.5", "*", "(", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "predict_y", "=", "0.5", "*", "(", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "\n", "predict_w", "=", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "predict_h", "=", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "3", "]", "-", "self", ".", "bbox_predict", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "\n", "dx", "=", "target_x", "-", "predict_x", "\n", "dy", "=", "target_y", "-", "predict_y", "\n", "eps", "=", "0.001", "\n", "\n", "#ORIGINAL Paper used 4*dx, proper implementation is 2*dx", "\n", "cost_x", "=", "tensor", ".", "switch", "(", "dx", ">=", "0.0", ",", "2", "*", "dx", "/", "(", "target_w", "+", "dx", "+", "eps", ")", ",", "-", "2", "*", "dx", "/", "(", "target_w", "-", "dx", "+", "eps", ")", ")", "\n", "cost_y", "=", "tensor", ".", "switch", "(", "dy", ">=", "0.0", ",", "2", "*", "dy", "/", "(", "target_h", "+", "dy", "+", "eps", ")", ",", "-", "2", "*", "dy", "/", "(", "target_h", "-", "dy", "+", "eps", ")", ")", "\n", "cost_w", "=", "1.0", "-", "tensor", ".", "minimum", "(", "target_w", "/", "(", "predict_w", "+", "eps", ")", ",", "predict_w", "/", "(", "target_w", "+", "eps", ")", ")", "\n", "cost_h", "=", "1.0", "-", "tensor", ".", "minimum", "(", "target_h", "/", "(", "predict_h", "+", "eps", ")", ",", "predict_h", "/", "(", "target_h", "+", "eps", ")", ")", "\n", "cost", "=", "tensor", ".", "concatenate", "(", "[", "cost_x", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "cost_y", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "cost_w", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "cost_h", "[", ":", ",", "None", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "bbox_errors", "+=", "self", ".", "bbox_factor", "*", "bbox_valid", "*", "tensor", ".", "sum", "(", "theano_util", ".", "smooth_L1", "(", "cost", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "#standard Fast R-CNN style cost", "\n", "                ", "tx", "=", "(", "bbox_target", "[", ":", ",", "0", ",", "...", "]", "-", "bbox_sample", "[", ":", ",", "0", ",", "...", "]", ")", "/", "bbox_sample", "[", ":", ",", "2", ",", "...", "]", "\n", "ty", "=", "(", "bbox_target", "[", ":", ",", "1", ",", "...", "]", "-", "bbox_sample", "[", ":", ",", "1", ",", "...", "]", ")", "/", "bbox_sample", "[", ":", ",", "3", ",", "...", "]", "\n", "tw", "=", "tensor", ".", "log", "(", "bbox_target", "[", ":", ",", "2", ",", "...", "]", "/", "bbox_sample", "[", ":", ",", "2", ",", "...", "]", ")", "\n", "th", "=", "tensor", ".", "log", "(", "bbox_target", "[", ":", ",", "3", ",", "...", "]", "/", "bbox_sample", "[", ":", ",", "3", ",", "...", "]", ")", "\n", "t", "=", "tensor", ".", "concatenate", "(", "[", "tx", "[", ":", ",", "None", ",", "...", "]", ",", "ty", "[", ":", ",", "None", ",", "...", "]", ",", "tw", "[", ":", ",", "None", ",", "...", "]", ",", "th", "[", ":", ",", "None", ",", "...", "]", "]", ",", "axis", "=", "1", ")", "\n", "dt", "=", "t", "-", "self", ".", "bbox_reg", "\n", "bbox_errors", "+=", "self", ".", "bbox_factor", "*", "bbox_valid", "*", "tensor", ".", "sum", "(", "theano_util", ".", "smooth_L1", "(", "dt", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "indfit_errors", "=", "None", "\n", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_errors", "=", "-", "tensor", ".", "sum", "(", "indfit_pr", "*", "self", ".", "indfit_pr", ",", "axis", "=", "1", ")", "/", "math", ".", "log", "(", "self", ".", "fitness_num", ")", "\n", "\n", "", "return", "det_errors", ",", "bbox_errors", ",", "indfit_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.cost": [[304, 314], ["denet_detect.DeNetDetectLayer.get_errors", "theano.as_tensor_variable", "theano.as_tensor_variable", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "theano.printing.Print", "det_errors.sum", "bbox_errors.sum", "indfit_errors.sum"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.get_errors"], ["", "def", "cost", "(", "self", ",", "yt_index", ",", "yt_value", ")", ":", "\n", "        ", "det_errors", ",", "bbox_errors", ",", "indfit_errors", "=", "self", ".", "get_errors", "(", "yt_index", ",", "yt_value", ")", "\n", "cost", "=", "tensor", ".", "as_tensor_variable", "(", "0.0", ")", "\n", "if", "not", "det_errors", "is", "None", ":", "\n", "            ", "cost", "+=", "theano", ".", "printing", ".", "Print", "(", "'DET Cost:'", ")", "(", "self", ".", "cost_factor", "*", "det_errors", ".", "sum", "(", ")", "/", "self", ".", "batch_size", ")", "\n", "", "if", "not", "bbox_errors", "is", "None", ":", "\n", "            ", "cost", "+=", "theano", ".", "printing", ".", "Print", "(", "'BBOX Cost:'", ")", "(", "self", ".", "bbox_factor", "*", "bbox_errors", ".", "sum", "(", ")", "/", "self", ".", "batch_size", ")", "\n", "", "if", "not", "indfit_errors", "is", "None", ":", "\n", "            ", "cost", "+=", "theano", ".", "printing", ".", "Print", "(", "'Ind. Fitness Cost:'", ")", "(", "self", ".", "indfit_factor", "*", "indfit_errors", ".", "sum", "(", ")", "/", "self", ".", "batch_size", ")", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.get_detections": [[316, 425], ["params.get", "params.get", "params.get", "params.get", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.Timer", "denet.Timer", "denet.Timer", "denet_detect.DeNetDetectLayer.sparse_layer.get_samples", "denet.Timer.mark", "denet.verbose", "denet.verbose", "denet.verbose", "denet_detect.DeNetDetectLayer.sparse_layer.set_samples", "denet.Timer.mark", "list", "denet.Timer.mark", "c_code.build_detections_nms", "denet.Timer.mark", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "enumerate", "params.get", "denet.info", "denet.info", "denet.info", "theano.function", "theano.function", "theano.function", "theano.function", "denet.verbose", "denet.verbose", "denet.verbose", "denet_detect.DeNetDetectLayer.detect_func", "numpy.copy", "denet_detect.DeNetDetectLayer.sparse_layer.get_bbox_array", "numpy.array", "numpy.sum().astype", "len", "denet.Timer.current", "denet.info", "denet.info", "denet.info", "results.append", "det_fit.reshape.reshape.reshape", "theano.exp", "theano.exp", "theano.max", "theano.max", "theano.concatenate", "theano.concatenate", "outputs.append", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.log", "theano.log", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "open", "theano.printing.debugprint", "theano.printing.debugprint", "theano.printing.debugprint", "theano.printing.debugprint", "numpy.log", "len", "tuple", "theano.log", "theano.log", "numpy.array", "theano.sum", "theano.sum", "theano.exp", "theano.exp", "len", "numpy.sum", "theano.sum", "theano.sum", "range", "denet.Timer.deltas_ms", "theano.exp", "theano.exp", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "theano.cast", "theano.cast", "range", "denet.Timer.current"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.get_samples", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.set_samples", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_bbox_array", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.deltas_ms", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current"], ["", "def", "get_detections", "(", "self", ",", "model", ",", "data_x", ",", "data_m", ",", "params", ")", ":", "\n", "\n", "        ", "pr_threshold", "=", "params", ".", "get", "(", "\"prThreshold\"", ",", "0.01", ")", "\n", "nms_threshold", "=", "params", ".", "get", "(", "\"nmsThreshold\"", ",", "0.5", ")", "\n", "corner_threshold", "=", "params", ".", "get", "(", "\"cornerThreshold\"", ",", "self", ".", "sparse_layer", ".", "corner_threshold", ")", "\n", "corner_max", "=", "params", ".", "get", "(", "\"cornerMax\"", ",", "1024", ")", "\n", "use_soft_nms", "=", "params", ".", "get", "(", "\"useSoftNMS\"", ",", "0", ")", "==", "1", "\n", "t", "=", "(", "pr_threshold", ",", "nms_threshold", ",", "corner_threshold", ",", "corner_max", ")", "\n", "logging", ".", "verbose", "(", "\"Using detection params - pr threshold: %f, nms threshold: %f, corner_threshold: %f, corner_max: %i\"", "%", "t", ")", "\n", "\n", "first_detect", "=", "False", "\n", "if", "self", ".", "detect_func", "is", "None", ":", "\n", "\n", "#get all model outputs", "\n", "            ", "outputs", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_jointfit", ":", "\n", "                ", "det_fit", "=", "self", ".", "det_pr", "\n", "det_fit_null", "=", "det_fit", "[", ":", ",", "self", ".", "null_class", ",", ":", ",", ":", "]", "\n", "det_fit", "=", "det_fit", "[", ":", ",", ":", "self", ".", "class_num", "*", "self", ".", "fitness_num", ",", ":", ",", ":", "]", "\n", "det_fit", "=", "det_fit", ".", "reshape", "(", "(", "self", ".", "batch_size", ",", "self", ".", "class_num", ",", "self", ".", "fitness_num", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", ")", "\n", "det_fit_pr", "=", "tensor", ".", "exp", "(", "det_fit", ")", "\n", "\n", "m", "=", "tensor", ".", "max", "(", "det_fit", ",", "axis", "=", "2", ")", "\n", "det_pr", "=", "m", "+", "tensor", ".", "log", "(", "tensor", ".", "sum", "(", "tensor", ".", "exp", "(", "det_fit", "-", "m", "[", ":", ",", ":", ",", "None", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "2", ")", ")", "\n", "det_pr", "=", "tensor", ".", "concatenate", "(", "[", "det_pr", ",", "det_fit_null", "[", ":", ",", "None", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "outputs", ".", "append", "(", "det_pr", ")", "\n", "\n", "val", "=", "[", "self", ".", "overlap_threshold", "[", "0", "]", "+", "i", "*", "(", "1.0", "-", "self", ".", "overlap_threshold", "[", "0", "]", ")", "/", "self", ".", "fitness_num", "for", "i", "in", "range", "(", "self", ".", "fitness_num", ")", "]", "\n", "fitness_val", "=", "theano", ".", "shared", "(", "numpy", ".", "array", "(", "val", ",", "dtype", "=", "numpy", ".", "float32", ")", ")", "\n", "fitness", "=", "tensor", ".", "log", "(", "tensor", ".", "sum", "(", "det_fit_pr", "*", "fitness_val", "[", "None", ",", "None", ",", ":", ",", "None", ",", "None", "]", ",", "axis", "=", "2", ")", ")", "\n", "outputs", ".", "append", "(", "fitness", ")", "\n", "", "else", ":", "\n", "                ", "outputs", ".", "append", "(", "self", ".", "det_pr", ")", "\n", "\n", "", "if", "self", ".", "use_bbox_reg", ":", "\n", "                ", "outputs", ".", "append", "(", "self", ".", "bbox_predict", ")", "\n", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "                ", "outputs", ".", "append", "(", "tensor", ".", "exp", "(", "self", ".", "indfit_pr", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Building detection function\"", ")", "\n", "self", ".", "detect_func", "=", "theano", ".", "function", "(", "[", "model", ".", "input", "]", ",", "outputs", ",", "givens", "=", "[", "(", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "0", ",", "'int8'", ")", ")", "]", ",", "on_unused_input", "=", "'ignore'", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Exporting graph...\"", ")", "\n", "with", "open", "(", "\"detect_graph.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "theano", ".", "printing", ".", "debugprint", "(", "self", ".", "detect_func", ",", "file", "=", "f", ",", "print_type", "=", "True", ")", "\n", "\n", "", "first_detect", "=", "True", "\n", "\n", "#get sampling bounding boxs", "\n", "", "logging", ".", "verbose", "(", "\"Detecting sample bboxs (%.2f)\"", "%", "corner_threshold", ")", "\n", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "sample_bboxs", "=", "self", ".", "sparse_layer", ".", "get_samples", "(", "data_x", ",", "train", "=", "False", ",", "store_shared", "=", "True", ")", "\n", "timer", ".", "mark", "(", ")", "\n", "logging", ".", "verbose", "(", "\"Found sample bboxs: {}\"", ".", "format", "(", "[", "len", "(", "bbox", ")", "for", "bbox", "in", "sample_bboxs", "]", ")", ")", "\n", "\n", "#upload sampling bounding boxs", "\n", "bboxs", "=", "self", ".", "sparse_layer", ".", "set_samples", "(", "sample_bboxs", ")", "\n", "timer", ".", "mark", "(", ")", "\n", "\n", "#classify sampling bounding boxs", "\n", "r", "=", "list", "(", "self", ".", "detect_func", "(", "data_x", ")", ")", "\n", "\n", "#get outputs", "\n", "if", "self", ".", "use_jointfit", ":", "\n", "            ", "det_pr", "=", "r", "[", "0", "]", "\n", "fitness", "=", "r", "[", "1", "]", "\n", "r_index", "=", "2", "\n", "", "else", ":", "\n", "            ", "det_pr", "=", "r", "[", "0", "]", "\n", "fitness", "=", "numpy", ".", "copy", "(", "det_pr", ")", "\n", "r_index", "=", "1", "\n", "\n", "", "if", "self", ".", "use_bbox_reg", ":", "\n", "            ", "bboxs", "=", "r", "[", "r_index", "]", "\n", "r_index", "+=", "1", "\n", "", "else", ":", "\n", "            ", "bboxs", "=", "self", ".", "sparse_layer", ".", "get_bbox_array", "(", "sample_bboxs", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_indfit", ":", "\n", "            ", "indfit_pr", "=", "r", "[", "r_index", "]", "\n", "fitness_val", "=", "numpy", ".", "array", "(", "[", "0.0", "]", "+", "[", "self", ".", "overlap_threshold", "[", "0", "]", "+", "i", "*", "(", "1.0", "-", "self", ".", "overlap_threshold", "[", "0", "]", ")", "/", "(", "self", ".", "fitness_num", "-", "1", ")", "for", "i", "in", "range", "(", "self", ".", "fitness_num", "-", "1", ")", "]", ")", "\n", "fitness_exp", "=", "numpy", ".", "sum", "(", "indfit_pr", "*", "fitness_val", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "fitness", "+=", "numpy", ".", "log", "(", "fitness_exp", ")", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "r_index", "+=", "1", "\n", "\n", "\n", "", "timer", ".", "mark", "(", ")", "\n", "sample_bbox_num", "=", "[", "len", "(", "s", ")", "for", "s", "in", "sample_bboxs", "]", "\n", "detlists", "=", "c_code", ".", "build_detections_nms", "(", "pr_threshold", ",", "nms_threshold", ",", "use_soft_nms", ",", "det_pr", ",", "fitness", ",", "bboxs", ",", "sample_bbox_num", ")", "\n", "timer", ".", "mark", "(", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Found detections:\"", ",", "[", "len", "(", "detlist", ")", "for", "detlist", "in", "detlists", "]", ")", "\n", "logging", ".", "verbose", "(", "\"FPS=%.1f, Timing (ms) - get samples: %i, upload: %i, classify: %i, build+nms %i\"", "%", "tuple", "(", "[", "self", ".", "batch_size", "/", "timer", ".", "current", "(", ")", "]", "+", "timer", ".", "deltas_ms", "(", ")", ")", ")", "\n", "\n", "if", "not", "first_detect", ":", "\n", "            ", "global", "detect_time", ",", "detect_num", "\n", "detect_time", "+=", "timer", ".", "current", "(", ")", "\n", "detect_num", "+=", "self", ".", "batch_size", "\n", "logging", ".", "info", "(", "\"Average FPS=%.1f\"", "%", "(", "detect_num", "/", "detect_time", ")", ")", "\n", "\n", "#results format", "\n", "", "results", "=", "[", "]", "\n", "for", "i", ",", "detlist", "in", "enumerate", "(", "detlists", ")", ":", "\n", "            ", "results", ".", "append", "(", "{", "\"detections\"", ":", "detlist", ",", "\"meta\"", ":", "data_m", "[", "i", "]", "}", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.__init__": [[11, 26], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "denet.verbose", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "len", "numpy.zeros().astype", "numpy.zeros().astype", "str", "str", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "__init__", "(", "self", ",", "layers", ",", "skip_index", "=", "0", ",", "split", "=", "False", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "self", ".", "skip_index", "=", "json_param", ".", "get", "(", "\"index\"", ",", "skip_index", ")", "\n", "self", ".", "has_split", "=", "json_param", ".", "get", "(", "\"split\"", ",", "split", ")", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n", "self", ".", "output_shape", "=", "self", ".", "input_shape", "\n", "if", "self", ".", "has_split", ":", "\n", "            ", "self", ".", "output", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "output_shape", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ",", "str", "(", "self", ")", "+", "\" - output\"", ")", "\n", "self", ".", "skip", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "self", ".", "output_shape", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ",", "str", "(", "self", ")", "+", "\" - skip\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "self", ".", "output", "=", "self", ".", "input", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ",", "\"split:\"", ",", "self", ".", "has_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.export_json": [[27, 31], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "j", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "j", ".", "update", "(", "{", "\"index\"", ":", "self", ".", "skip_index", ",", "\"split\"", ":", "self", ".", "has_split", "}", ")", "\n", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.split_forward": [[33, 38], ["None"], "methods", ["None"], ["", "def", "split_forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_split", ":", "\n", "            ", "return", "[", "(", "self", ".", "output", ",", "self", ".", "input", ")", ",", "(", "self", ".", "skip", ",", "self", ".", "input", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.split_backward": [[40, 45], ["theano.tensor.grad", "theano.tensor.grad", "theano.tensor.grad", "theano.tensor.grad"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad"], ["", "", "def", "split_backward", "(", "self", ",", "cost", ",", "known_grads", ")", ":", "\n", "        ", "if", "self", ".", "has_split", ":", "\n", "            ", "return", "[", "(", "self", ".", "output", ",", "theano", ".", "tensor", ".", "grad", "(", "cost", ",", "self", ".", "output", ",", "known_grads", "=", "known_grads", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.split_known_grads": [[46, 51], ["None"], "methods", ["None"], ["", "", "def", "split_known_grads", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_split", ":", "\n", "            ", "return", "{", "self", ".", "input", ":", "(", "self", ".", "output", "+", "self", ".", "skip", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipSrcLayer.parse_desc": [[52, 58], ["layers.append", "skip.SkipSrcLayer", "params.get"], "methods", ["None"], ["", "", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"SKIPSRC\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "layers", ".", "append", "(", "SkipSrcLayer", "(", "layers", ",", "params", ".", "get", "(", "0", ",", "0", ")", ",", "\"X\"", "in", "tags", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipLayer.__init__": [[61, 97], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "denet.verbose", "len", "skip.SkipLayer.layers.append", "theano.concatenate", "theano.concatenate", "Exception", "denet.layer.InitialLayer", "denet.layer.convolution.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate"], ["def", "__init__", "(", "self", ",", "layers", ",", "skip_index", "=", "0", ",", "combine_mode", "=", "\"proj-add\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "combine_mode", "=", "json_param", ".", "get", "(", "\"combineMode\"", ",", "combine_mode", ")", "\n", "self", ".", "skip_index", "=", "json_param", ".", "get", "(", "\"index\"", ",", "skip_index", ")", "\n", "self", ".", "skip_layer", "=", "None", "\n", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "layer", ".", "type_name", "==", "\"skip-src\"", "and", "layer", ".", "skip_index", "==", "self", ".", "skip_index", ":", "\n", "                ", "self", ".", "skip_layer", "=", "layer", "\n", "break", "\n", "", "", "assert", "self", ".", "skip_layer", "!=", "None", "\n", "\n", "self", ".", "x", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "x_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "self", ".", "y", "=", "self", ".", "skip_layer", ".", "skip", "\n", "self", ".", "y_shape", "=", "self", ".", "skip_layer", ".", "output_shape", "\n", "\n", "if", "self", ".", "combine_mode", "==", "\"proj-add\"", ":", "\n", "\n", "            ", "self", ".", "output_shape", "=", "self", ".", "x_shape", "\n", "if", "self", ".", "y_shape", "[", "1", "]", "!=", "self", ".", "x_shape", "[", "1", "]", ":", "\n", "                ", "self", ".", "layers", "=", "[", "InitialLayer", "(", "self", ".", "y", ",", "self", ".", "y_shape", ")", "]", "\n", "self", ".", "layers", ".", "append", "(", "ConvLayer", "(", "self", ".", "layers", ",", "filter_shape", "=", "(", "self", ".", "x_shape", "[", "1", "]", ",", "self", ".", "y_shape", "[", "1", "]", ",", "1", ",", "1", ")", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "x", "+", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "else", ":", "\n", "                ", "self", ".", "output", "=", "self", ".", "x", "+", "self", ".", "y", "\n", "\n", "", "", "elif", "self", ".", "combine_mode", "==", "\"concat\"", ":", "\n", "\n", "            ", "self", ".", "output_shape", "=", "(", "self", ".", "x_shape", "[", "0", "]", ",", "self", ".", "x_shape", "[", "1", "]", "+", "self", ".", "y_shape", "[", "1", "]", ",", "self", ".", "x_shape", "[", "2", "]", ",", "self", ".", "x_shape", "[", "3", "]", ")", "\n", "self", ".", "output", "=", "tensor", ".", "concatenate", "(", "[", "self", ".", "x", ",", "self", ".", "y", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown combine mode: %s\"", "%", "self", ".", "combine_mode", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ",", "\"layer - x:\"", ",", "self", ".", "x_shape", ",", "\"y:\"", ",", "self", ".", "y_shape", ",", "\"skip index:\"", ",", "self", ".", "skip_index", ",", "\"combine mode:\"", ",", "self", ".", "combine_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipLayer.split_backward": [[99, 104], ["theano.tensor.grad", "theano.tensor.grad", "theano.tensor.grad", "theano.tensor.grad"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad"], ["", "def", "split_backward", "(", "self", ",", "cost", ",", "known_grads", ")", ":", "\n", "        ", "if", "self", ".", "skip_layer", ".", "has_split", ":", "\n", "            ", "return", "[", "(", "self", ".", "skip_layer", ".", "skip", ",", "theano", ".", "tensor", ".", "grad", "(", "cost", ",", "self", ".", "skip_layer", ".", "skip", ",", "known_grads", "=", "known_grads", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipLayer.export_json": [[105, 109], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "j", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "j", ".", "update", "(", "{", "\"index\"", ":", "self", ".", "skip_index", ",", "\"combineMode\"", ":", "self", ".", "combine_mode", "}", ")", "\n", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.skip.SkipLayer.parse_desc": [[110, 116], ["layers.append", "skip.SkipLayer", "params.get"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"SKIP\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "layers", ".", "append", "(", "SkipLayer", "(", "layers", ",", "params", ".", "get", "(", "0", ",", "0", ")", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.__init__": [[66, 72], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.__str__": [[73, 101], ["__init__.AbstractLayer.__dict__.items", "__init__.AbstractLayer.__str__.get_param_str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights": [[102, 104], ["sum", "x.weights"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases": [[105, 107], ["sum", "x.biases"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.split_forward": [[109, 111], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.split_backward": [[113, 115], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.split_known_grads": [[117, 119], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.updates": [[121, 123], ["sum", "x.updates"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.updates"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.params": [[125, 127], ["__init__.AbstractLayer.weights", "__init__.AbstractLayer.biases"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.cost": [[129, 131], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.get_target": [[133, 135], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.export_json": [[137, 139], ["type", "layer.export_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.import_json": [[140, 144], ["enumerate", "__init__.AbstractLayer.layers[].import_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.InitialLayer.__init__": [[148, 152], ["__init__.AbstractLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.IdentityLayer.__init__": [[156, 160], ["__init__.AbstractLayer.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.IdentityLayer.parse_desc": [[162, 164], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_rng": [[10, 13], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed": [[14, 17], ["layer_train_rng.seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train": [[18, 21], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_epoch": [[22, 25], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration": [[26, 29], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.import_json": [[31, 61], ["len", "__init__.InitialLayer", "layer_type.import_json", "layers.append", "type", "min", "len", "type", "min", "Exception", "layer_type", "len"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], []], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.__init__": [[28, 100], ["denet.layer.AbstractLayer.__init__", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "json_param.get", "denet.find_layers", "denet.find_layers", "denet.find_layers", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.switch", "theano.switch", "denet.verbose", "denet.verbose", "denet.verbose", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "theano.maximum", "theano.maximum", "theano.maximum", "theano.maximum", "theano.cast", "theano.cast", "theano.cast", "theano.cast", "theano.switch.dimshuffle().flatten", "sample.dimshuffle.dimshuffle.reshape", "sample.dimshuffle.dimshuffle.dimshuffle", "sample.dimshuffle.dimshuffle.reshape", "sample.dimshuffle.dimshuffle.dimshuffle", "theano.concatenate", "theano.concatenate", "len", "numpy.zeros", "denet.layer.denet_sparse_op.DeNetSparseOp", "denet.layer.denet_sparse_op.DeNetSparseOp", "denet.layer.denet_sparse_op.DeNetSparseOp", "theano.arange", "theano.arange", "theano.arange().reshape", "theano.arange().reshape", "theano.minimum", "theano.minimum", "theano.minimum", "theano.minimum", "theano.maximum.round", "theano.maximum.round", "theano.switch.dimshuffle", "theano.arange", "theano.arange", "byxc.flatten", "theano.arange", "theano.arange", "theano.arange", "theano.arange"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], ["def", "__init__", "(", "self", ",", "layers", ",", "grid_size", "=", "3", ",", "sample_num", "=", "16", ",", "corner_threshold", "=", "0.01", ",", "random_sample", "=", "0.0", ",", "\n", "local_max", "=", "0", ",", "nms_threshold", "=", "0.7", ",", "sample_gt", "=", "True", ",", "version", "=", "\"v2\"", ",", "json_param", "=", "{", "}", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "layer_index", "=", "len", "(", "layers", ")", ")", "\n", "\n", "self", ".", "input", "=", "layers", "[", "-", "1", "]", ".", "output", "\n", "self", ".", "input_shape", "=", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "self", ".", "batch_size", "=", "self", ".", "input_shape", "[", "0", "]", "\n", "self", ".", "model_input", "=", "layers", "[", "0", "]", ".", "output", "\n", "\n", "self", ".", "grid_size", "=", "json_param", ".", "get", "(", "\"gridSize\"", ",", "grid_size", ")", "\n", "self", ".", "sample_num", "=", "json_param", ".", "get", "(", "\"sampleNum\"", ",", "sample_num", ")", "\n", "self", ".", "sample_gt", "=", "json_param", ".", "get", "(", "\"sampleGT\"", ",", "sample_gt", ")", "\n", "self", ".", "corner_threshold", "=", "json_param", ".", "get", "(", "\"cornerThreshold\"", ",", "corner_threshold", ")", "\n", "self", ".", "nms_threshold", "=", "json_param", ".", "get", "(", "\"nmsThreshold\"", ",", "nms_threshold", ")", "\n", "self", ".", "random_sample", "=", "json_param", ".", "get", "(", "\"randomSample\"", ",", "random_sample", ")", "\n", "self", ".", "local_max", "=", "json_param", ".", "get", "(", "\"localMax\"", ",", "local_max", ")", "\n", "self", ".", "version", "=", "json_param", ".", "get", "(", "\"version\"", ",", "version", ")", "\n", "\n", "self", ".", "corner_max", "=", "1024", "\n", "self", ".", "thread_num", "=", "self", ".", "batch_size", "\n", "self", ".", "sample_count", "=", "self", ".", "sample_num", "*", "self", ".", "sample_num", "\n", "\n", "#find corner layer", "\n", "self", ".", "corner_func", "=", "None", "\n", "self", ".", "corner_layer", "=", "common", ".", "find_layers", "(", "layers", ",", "\"denet-corner\"", ",", "True", ")", "\n", "assert", "not", "self", ".", "corner_layer", "is", "None", ",", "\"denet-corner layer required before spare layer!\"", "\n", "\n", "#sampling bounding boxs", "\n", "self", ".", "sample_bbox_list", "=", "[", "]", "\n", "self", ".", "sample_bbox", "=", "theano", ".", "shared", "(", "value", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ",", "4", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", ")", "\n", "\n", "self", ".", "output_feat", "=", "self", ".", "grid_size", "*", "self", ".", "grid_size", "*", "self", ".", "corner_layer", ".", "sample_shape", "[", "1", "]", "+", "2", "\n", "self", ".", "output_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "output_feat", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ")", "\n", "\n", "#Use optimized op! ", "\n", "sample_input", "=", "tensor", ".", "switch", "(", "get_train", "(", ")", ",", "self", ".", "corner_layer", ".", "sample", ",", "self", ".", "corner_layer", ".", "sample_shared", ")", "\n", "self", ".", "use_optimized", "=", "theano", ".", "sandbox", ".", "cuda", ".", "cuda_enabled", "\n", "if", "self", ".", "use_optimized", ":", "\n", "            ", "self", ".", "output", "=", "DeNetSparseOp", "(", "self", ".", "grid_size", ")", "(", "sample_input", ",", "self", ".", "sample_bbox", ")", "\n", "", "else", ":", "\n", "\n", "            ", "sample_w", "=", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "2", "]", "-", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "sample_h", "=", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "3", "]", "-", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "sample_x", "=", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "0", ",", "None", "]", "+", "tensor", ".", "arange", "(", "self", ".", "grid_size", ",", "dtype", "=", "'float32'", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "*", "sample_w", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "(", "self", ".", "grid_size", "-", "1", ")", "\n", "sample_y", "=", "self", ".", "sample_bbox", "[", ":", ",", ":", ",", ":", ",", "1", ",", "None", "]", "+", "tensor", ".", "arange", "(", "self", ".", "grid_size", ",", "dtype", "=", "'float32'", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "*", "sample_h", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "(", "self", ".", "grid_size", "-", "1", ")", "\n", "batch_range", "=", "tensor", ".", "arange", "(", "self", ".", "batch_size", ",", "dtype", "=", "'int64'", ")", "[", ":", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "grid_range", "=", "tensor", ".", "arange", "(", "self", ".", "grid_size", "*", "self", ".", "grid_size", ",", "dtype", "=", "'int64'", ")", ".", "reshape", "(", "(", "self", ".", "grid_size", ",", "self", ".", "grid_size", ")", ")", "[", "None", ",", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "#extract samples", "\n", "b", ",", "f", ",", "h", ",", "w", "=", "self", ".", "corner_layer", ".", "sample_shape", "\n", "\n", "#get sample position in feature map (b,sj,si,gy/gx)", "\n", "sample_xf", "=", "tensor", ".", "maximum", "(", "0", ",", "tensor", ".", "minimum", "(", "sample_x", "*", "w", ",", "w", "-", "1", ")", ")", "\n", "sample_yf", "=", "tensor", ".", "maximum", "(", "0", ",", "tensor", ".", "minimum", "(", "sample_y", "*", "h", ",", "h", "-", "1", ")", ")", "\n", "syf", "=", "tensor", ".", "cast", "(", "sample_yf", ".", "round", "(", ")", ",", "'int64'", ")", "\n", "sxf", "=", "tensor", ".", "cast", "(", "sample_xf", ".", "round", "(", ")", ",", "'int64'", ")", "\n", "byxc", "=", "batch_range", "*", "h", "*", "w", "+", "syf", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", "]", "*", "w", "+", "sxf", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "#extract sample", "\n", "sample", "=", "sample_input", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "flatten", "(", "2", ")", "\n", "sample", "=", "sample", "[", ":", ",", "byxc", ".", "flatten", "(", ")", "]", "\n", "sample", "=", "sample", ".", "reshape", "(", "(", "f", ",", "b", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ",", "self", ".", "grid_size", "*", "self", ".", "grid_size", ")", ")", "\n", "sample", "=", "sample", ".", "dimshuffle", "(", "(", "1", ",", "2", ",", "3", ",", "4", ",", "0", ")", ")", "\n", "sample", "=", "sample", ".", "reshape", "(", "(", "b", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ",", "self", ".", "grid_size", "*", "self", ".", "grid_size", "*", "f", ")", ")", "\n", "sample", "=", "sample", ".", "dimshuffle", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "#add width / height", "\n", "self", ".", "output", "=", "tensor", ".", "concatenate", "(", "[", "sample", ",", "sample_h", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "sample_w", "[", ":", ",", "None", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "global", "c_code", "\n", "logging", ".", "verbose", "(", "\"Adding\"", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.parse_desc": [[102, 115], ["params.get", "params.get", "params.get", "params.get", "params.get", "params.get", "layers.append", "denet_sparse.DeNetSparseLayer"], "methods", ["None"], ["", "def", "parse_desc", "(", "layers", ",", "name", ",", "tags", ",", "params", ")", ":", "\n", "        ", "if", "name", "!=", "\"DNS\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "grid_size", "=", "params", ".", "get", "(", "0", ",", "3", ")", "\n", "sample_num", "=", "params", ".", "get", "(", "1", ",", "4", ")", "\n", "corner_threshold", "=", "params", ".", "get", "(", "2", ",", "0.01", ")", "\n", "random_sample", "=", "params", ".", "get", "(", "3", ",", "0.1", ")", "\n", "local_max", "=", "params", ".", "get", "(", "4", ",", "0", ")", "\n", "nms_threshold", "=", "params", ".", "get", "(", "5", ",", "1.0", ")", "\n", "sample_gt", "=", "not", "\"G\"", "in", "tags", "\n", "layers", ".", "append", "(", "DeNetSparseLayer", "(", "layers", ",", "grid_size", ",", "sample_num", ",", "corner_threshold", ",", "random_sample", ",", "local_max", ",", "nms_threshold", ",", "sample_gt", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_samples": [[117, 146], ["denet.Timer", "denet.Timer", "denet.Timer", "denet.debug", "denet.debug", "denet.debug", "denet_sparse.DeNetSparseLayer.corner_func", "denet.Timer.mark", "denet.debug", "denet.debug", "denet.debug", "c_code.build_samples", "denet.Timer.mark", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "theano.function", "theano.function", "theano.function", "theano.function", "denet.debug", "denet.debug", "denet.debug", "denet.profile", "denet.profile", "denet.profile", "denet.export_graph", "denet.export_graph", "denet.export_graph", "denet.debug", "denet.debug", "denet.debug", "exit", "denet.Timer.current_ms", "denet.Timer.delta_ms", "denet.Timer.delta_ms", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "theano.cast", "theano.cast", "int"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.profile", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.profile", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.profile", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.export_graph", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.export_graph", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.export_graph", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current_ms", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta_ms", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta_ms", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train"], ["", "def", "get_samples", "(", "self", ",", "data_x", ",", "train", "=", "False", ",", "store_shared", "=", "False", ")", ":", "\n", "\n", "        ", "global", "profile", "\n", "if", "self", ".", "corner_func", "is", "None", ":", "\n", "            ", "logging", ".", "verbose", "(", "\"Building corner function - store samples:\"", ",", "store_shared", ",", "\"train:\"", ",", "train", ")", "\n", "updates", "=", "[", "(", "self", ".", "corner_layer", ".", "sample_shared", ",", "self", ".", "corner_layer", ".", "sample", ")", "]", "if", "store_shared", "else", "[", "]", "\n", "self", ".", "corner_func", "=", "theano", ".", "function", "(", "[", "self", ".", "model_input", "]", ",", "self", ".", "corner_layer", ".", "corner_pr", ",", "updates", "=", "updates", ",", "profile", "=", "profile", ",", "\n", "givens", "=", "[", "(", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "int", "(", "train", ")", ",", "'int8'", ")", ")", "]", ",", "on_unused_input", "=", "'ignore'", ")", "\n", "\n", "#find corners", "\n", "", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "logging", ".", "debug", "(", "\"Running corner function\"", ")", "\n", "corner_pr", "=", "self", ".", "corner_func", "(", "data_x", ")", "\n", "\n", "if", "profile", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Profiling corner function\"", ")", "\n", "theano_util", ".", "profile", "(", "self", ".", "corner_func", ",", "10", ",", "data_x", ")", "\n", "theano_util", ".", "export_graph", "(", "\"./corner.graph\"", ",", "self", ".", "corner_func", ")", "\n", "logging", ".", "debug", "(", "\"Done\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "#build sampling bounding boxs", "\n", "", "timer", ".", "mark", "(", ")", "\n", "logging", ".", "debug", "(", "\"Build samples (%i threads)\"", "%", "self", ".", "thread_num", ")", "\n", "samples", "=", "c_code", ".", "build_samples", "(", "self", ".", "thread_num", ",", "corner_pr", ",", "self", ".", "corner_threshold", ",", "self", ".", "sample_num", ",", "self", ".", "corner_max", ",", "self", ".", "local_max", ",", "self", ".", "nms_threshold", ")", "\n", "\n", "timer", ".", "mark", "(", ")", "\n", "logging", ".", "verbose", "(", "\"Took %i ms to get_samples (%i model, %i build, %i max corners) \"", "%", "(", "timer", ".", "current_ms", "(", ")", ",", "timer", ".", "delta_ms", "(", "0", ")", ",", "timer", ".", "delta_ms", "(", "1", ")", ",", "self", ".", "corner_max", ")", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_bbox_array": [[148, 154], ["denet.Timer", "denet.Timer", "denet.Timer", "numpy.zeros", "c_code.build_bbox_array", "denet.debug", "denet.debug", "denet.debug", "denet.Timer.current_ms"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current_ms"], ["", "def", "get_bbox_array", "(", "self", ",", "sample_bboxs", ")", ":", "\n", "        ", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "bboxs", "=", "numpy", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "sample_num", ",", "self", ".", "sample_num", ",", "4", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "c_code", ".", "build_bbox_array", "(", "sample_bboxs", ",", "bboxs", ")", "\n", "logging", ".", "debug", "(", "\"Took %i ms to get_bbox_array\"", "%", "timer", ".", "current_ms", "(", ")", ")", "\n", "return", "bboxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.set_samples": [[155, 162], ["denet.Timer", "denet.Timer", "denet.Timer", "denet_sparse.DeNetSparseLayer.get_bbox_array", "denet_sparse.DeNetSparseLayer.sample_bbox.set_value", "denet.debug", "denet.debug", "denet.debug", "denet.Timer.current_ms"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_bbox_array", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current_ms"], ["", "def", "set_samples", "(", "self", ",", "sample_bboxs", ")", ":", "\n", "        ", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "bboxs", "=", "self", ".", "get_bbox_array", "(", "sample_bboxs", ")", "\n", "self", ".", "sample_bbox", ".", "set_value", "(", "bboxs", ")", "\n", "self", ".", "sample_bbox_list", "=", "sample_bboxs", "\n", "logging", ".", "debug", "(", "\"Took %i ms to set_samples\"", "%", "timer", ".", "current_ms", "(", ")", ")", "\n", "return", "bboxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_target": [[164, 207], ["denet_sparse.DeNetSparseLayer.get_samples", "enumerate", "denet.verbose", "denet.verbose", "denet.verbose", "denet_sparse.DeNetSparseLayer.set_samples", "denet.verbose", "denet.verbose", "denet.verbose", "len", "math.floor", "len", "random.sample", "len", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "sample_bboxs[].append", "enumerate", "denet.overlap_iou", "denet.overlap_iou", "denet.overlap_iou", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.get_samples", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.set_samples", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou"], ["", "def", "get_target", "(", "self", ",", "model", ",", "data_x", ",", "metas", ")", ":", "\n", "\n", "        ", "sample_bboxs", "=", "self", ".", "get_samples", "(", "data_x", ",", "train", "=", "True", ")", "\n", "\n", "total_cover", "=", "0", "\n", "total_bbox", "=", "0", "\n", "for", "b", ",", "meta", "in", "enumerate", "(", "metas", ")", ":", "\n", "\n", "#compute groundtruth coverage", "\n", "            ", "cover", "=", "0", "\n", "for", "meta_bbox", "in", "meta", "[", "\"bbox\"", "]", ":", "\n", "                ", "for", "_", ",", "sample_bbox", "in", "sample_bboxs", "[", "b", "]", ":", "\n", "                    ", "if", "common", ".", "overlap_iou", "(", "meta_bbox", ",", "sample_bbox", ")", ">", "0.5", ":", "\n", "                        ", "cover", "+=", "1", "\n", "break", "\n", "\n", "", "", "", "logging", ".", "verbose", "(", "\"%i: corner detector found %i samples (%i/%i coverage)\"", "%", "(", "b", ",", "len", "(", "sample_bboxs", "[", "b", "]", ")", ",", "cover", ",", "len", "(", "meta", "[", "\"bbox\"", "]", ")", ")", ")", "\n", "total_cover", "+=", "cover", "\n", "total_bbox", "+=", "len", "(", "meta", "[", "\"bbox\"", "]", ")", "\n", "\n", "n", "=", "self", ".", "sample_count", "-", "math", ".", "floor", "(", "self", ".", "random_sample", "*", "self", ".", "sample_count", ")", "\n", "if", "len", "(", "sample_bboxs", "[", "b", "]", ")", ">", "n", ":", "\n", "# logging.verbose(\"%i: removing %i samples to make room for random samples\"%(b, len(sample_bboxs[b]) - n))", "\n", "                ", "sample_bboxs", "[", "b", "]", "=", "random", ".", "sample", "(", "sample_bboxs", "[", "b", "]", ",", "n", ")", "\n", "\n", "#add random samples if bbox detector produces too few", "\n", "", "while", "len", "(", "sample_bboxs", "[", "b", "]", ")", "<", "self", ".", "sample_count", ":", "\n", "                ", "x0", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "y0", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "x1", "=", "random", ".", "uniform", "(", "x0", ",", "1.0", ")", "\n", "y1", "=", "random", ".", "uniform", "(", "y0", ",", "1.0", ")", "\n", "bbox", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "sample_bboxs", "[", "b", "]", ".", "append", "(", "(", "0.0", ",", "bbox", ")", ")", "\n", "\n", "#insert groundtruth", "\n", "", "if", "self", ".", "sample_gt", ":", "\n", "                ", "for", "index", ",", "bbox", "in", "enumerate", "(", "meta", "[", "\"bbox\"", "]", ")", ":", "\n", "                    ", "sample_bboxs", "[", "b", "]", "[", "-", "(", "index", "+", "1", ")", "]", "=", "(", "1.0", ",", "bbox", ")", "\n", "\n", "", "", "", "logging", ".", "verbose", "(", "\"Overall %i/%i (%.2f%%) coverage\"", "%", "(", "total_cover", ",", "total_bbox", ",", "100.0", "*", "total_cover", "/", "total_bbox", ")", ")", "\n", "\n", "self", ".", "set_samples", "(", "sample_bboxs", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.export_json": [[208, 219], ["super().export_json", "super().export_json.update"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json", "=", "super", "(", ")", ".", "export_json", "(", ")", "\n", "json", ".", "update", "(", "{", "\"gridSize\"", ":", "self", ".", "grid_size", ",", "\n", "\"sampleNum\"", ":", "self", ".", "sample_num", ",", "\n", "\"sampleGT\"", ":", "self", ".", "sample_gt", ",", "\n", "\"localMax\"", ":", "self", ".", "local_max", ",", "\n", "\"cornerThreshold\"", ":", "self", ".", "corner_threshold", ",", "\n", "\"randomSample\"", ":", "self", ".", "random_sample", ",", "\n", "\"nmsThreshold\"", ":", "self", ".", "nms_threshold", ",", "\n", "\"version\"", ":", "self", ".", "version", "}", ")", "\n", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.image_to_array": [[9, 17], ["numpy.swapaxes", "numpy.swapaxes", "im.convert.convert", "numpy.array"], "function", ["None"], ["def", "image_to_array", "(", "im", ")", ":", "\n", "    ", "if", "im", ".", "mode", "!=", "\"RGB\"", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "im_x", "=", "numpy", ".", "array", "(", "im", ",", "dtype", "=", "numpy", ".", "float32", ")", "/", "255.0", "\n", "im_x", "=", "numpy", ".", "swapaxes", "(", "im_x", ",", "0", ",", "2", ")", "\n", "im_x", "=", "numpy", ".", "swapaxes", "(", "im_x", ",", "1", ",", "2", ")", "\n", "return", "im_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale": [[20, 48], ["max", "im.thumbnail", "im.resize", "str", "Exception", "str", "int", "int", "math.ceil", "math.ceil", "int", "int", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize"], ["", "def", "scale", "(", "im", ",", "size", ",", "scale_mode", "=", "\"small\"", ",", "interp_mode", "=", "Image", ".", "ANTIALIAS", ")", ":", "\n", "    ", "old_size", "=", "im", ".", "size", "\n", "if", "scale_mode", "==", "\"warp\"", ":", "\n", "        ", "new_size", "=", "(", "size", ",", "size", ")", "\n", "", "elif", "scale_mode", "==", "\"small\"", ":", "\n", "        ", "if", "im", ".", "size", "[", "0", "]", "<", "im", ".", "size", "[", "1", "]", ":", "\n", "            ", "new_size", "=", "(", "size", ",", "int", "(", "math", ".", "ceil", "(", "size", "*", "im", ".", "size", "[", "1", "]", "/", "im", ".", "size", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "new_size", "=", "(", "int", "(", "math", ".", "ceil", "(", "size", "*", "im", ".", "size", "[", "0", "]", "/", "im", ".", "size", "[", "1", "]", ")", ")", ",", "size", ")", "\n", "", "", "elif", "scale_mode", "==", "\"large\"", ":", "\n", "        ", "if", "im", ".", "size", "[", "0", "]", ">", "im", ".", "size", "[", "1", "]", ":", "\n", "            ", "new_size", "=", "(", "size", ",", "int", "(", "math", ".", "ceil", "(", "size", "*", "im", ".", "size", "[", "1", "]", "/", "im", ".", "size", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "new_size", "=", "(", "int", "(", "math", ".", "ceil", "(", "size", "*", "im", ".", "size", "[", "0", "]", "/", "im", ".", "size", "[", "1", "]", ")", ")", ",", "size", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown scale mode\"", ")", "\n", "\n", "", "if", "im", ".", "size", "[", "0", "]", ">", "new_size", "[", "0", "]", "and", "im", ".", "size", "[", "1", "]", ">", "new_size", "[", "1", "]", ":", "\n", "        ", "s", "=", "max", "(", "new_size", "[", "0", "]", ",", "new_size", "[", "1", "]", ")", "\n", "im", ".", "thumbnail", "(", "(", "s", ",", "s", ")", ",", "interp_mode", ")", "\n", "\n", "", "if", "im", ".", "size", "!=", "new_size", ":", "\n", "        ", "im_resize", "=", "im", ".", "resize", "(", "new_size", ",", "interp_mode", ")", "\n", "", "else", ":", "\n", "        ", "im_resize", "=", "im", "\n", "\n", "", "assert", "im_resize", ".", "size", "==", "new_size", ",", "\"Scaling Error! \"", "+", "str", "(", "im", ".", "size", ")", "+", "\" != \"", "+", "str", "(", "new_size", ")", "\n", "return", "im_resize", ",", "new_size", "[", "0", "]", "/", "old_size", "[", "0", "]", ",", "new_size", "[", "1", "]", "/", "old_size", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.add_border": [[51, 62], ["int", "int", "PIL.Image.new", "Image.new.paste", "max", "max", "Image.new.copy"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["", "def", "add_border", "(", "im", ",", "size", ")", ":", "\n", "    ", "if", "im", ".", "size", "[", "0", "]", "<", "size", "or", "im", ".", "size", "[", "1", "]", "<", "size", ":", "\n", "# raise Exception(\"error in add border, do not use!\")", "\n", "        ", "size_new", "=", "(", "max", "(", "im", ".", "size", "[", "0", "]", ",", "size", ")", ",", "max", "(", "im", ".", "size", "[", "1", "]", ",", "size", ")", ")", "\n", "x", "=", "int", "(", "(", "size_new", "[", "0", "]", "-", "im", ".", "size", "[", "0", "]", ")", "//", "2", ")", "\n", "y", "=", "int", "(", "(", "size_new", "[", "1", "]", "-", "im", ".", "size", "[", "1", "]", ")", "//", "2", ")", "\n", "im_border", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "size_new", ")", "\n", "im_border", ".", "paste", "(", "im", ",", "box", "=", "(", "x", ",", "y", ",", "x", "+", "im", ".", "size", "[", "0", "]", ",", "y", "+", "im", ".", "size", "[", "1", "]", ")", ")", "\n", "return", "im_border", ".", "copy", "(", ")", ",", "-", "x", ",", "-", "y", "\n", "", "else", ":", "\n", "        ", "return", "im", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.center_crop": [[64, 73], ["augment.add_border", "math.ceil", "math.ceil", "imm.crop"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.add_border"], ["", "", "def", "center_crop", "(", "im", ",", "size", ")", ":", "\n", "\n", "#add black border", "\n", "    ", "imm", ",", "x", ",", "y", "=", "add_border", "(", "im", ",", "size", ")", "\n", "\n", "#crop", "\n", "dx", "=", "math", ".", "ceil", "(", "(", "imm", ".", "size", "[", "0", "]", "-", "size", ")", "/", "2", ")", "\n", "dy", "=", "math", ".", "ceil", "(", "(", "imm", ".", "size", "[", "1", "]", "-", "size", ")", "/", "2", ")", "\n", "return", "imm", ".", "crop", "(", "(", "dx", ",", "dy", ",", "dx", "+", "size", ",", "dy", "+", "size", ")", ")", ",", "x", "+", "dx", ",", "y", "+", "dy", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.random_crop": [[75, 84], ["augment.add_border", "random.randint", "random.randint", "imm.crop"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.add_border"], ["", "def", "random_crop", "(", "im", ",", "size", ")", ":", "\n", "\n", "#add black border", "\n", "    ", "imm", ",", "x", ",", "y", "=", "add_border", "(", "im", ",", "size", ")", "\n", "\n", "#crop", "\n", "dx", "=", "random", ".", "randint", "(", "0", ",", "imm", ".", "size", "[", "0", "]", "-", "size", ")", "\n", "dy", "=", "random", ".", "randint", "(", "0", ",", "imm", ".", "size", "[", "1", "]", "-", "size", ")", "\n", "return", "imm", ".", "crop", "(", "(", "dx", ",", "dy", ",", "dx", "+", "size", ",", "dy", "+", "size", ")", ")", ",", "x", "+", "dx", ",", "y", "+", "dy", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.multi_crop": [[86, 95], ["augment.center_crop", "im.crop", "im.crop", "im.crop", "im.crop"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.center_crop"], ["", "def", "multi_crop", "(", "im", ",", "size", ")", ":", "\n", "    ", "center", ",", "x", ",", "y", "=", "center_crop", "(", "im", ",", "size", ")", "\n", "top_left", "=", "im", ".", "crop", "(", "(", "0", ",", "0", ",", "size", ",", "size", ")", ")", "\n", "top_right", "=", "im", ".", "crop", "(", "(", "im", ".", "size", "[", "0", "]", "-", "size", ",", "0", ",", "im", ".", "size", "[", "0", "]", ",", "size", ")", ")", "\n", "bottom_left", "=", "im", ".", "crop", "(", "(", "0", ",", "im", ".", "size", "[", "1", "]", "-", "size", ",", "size", ",", "im", ".", "size", "[", "1", "]", ")", ")", "\n", "bottom_right", "=", "im", ".", "crop", "(", "(", "im", ".", "size", "[", "0", "]", "-", "size", ",", "im", ".", "size", "[", "1", "]", "-", "size", ",", "im", ".", "size", "[", "0", "]", ",", "im", ".", "size", "[", "1", "]", ")", ")", "\n", "offset_x", "=", "[", "x", ",", "0", ",", "im", ".", "size", "[", "0", "]", "-", "size", ",", "0", ",", "im", ".", "size", "[", "0", "]", "-", "size", "]", "\n", "offset_y", "=", "[", "y", ",", "0", ",", "0", ",", "im", ".", "size", "[", "1", "]", "-", "size", ",", "im", ".", "size", "[", "1", "]", "-", "size", "]", "\n", "return", "[", "center", ",", "top_left", ",", "top_right", ",", "bottom_left", ",", "bottom_right", "]", ",", "offset_x", ",", "offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.multi_crop_mirror": [[97, 104], ["augment.multi_crop", "x.transpose"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.multi_crop"], ["", "def", "multi_crop_mirror", "(", "im", ",", "size", ")", ":", "\n", "    ", "im_list", ",", "offset_x", ",", "offset_y", "=", "multi_crop", "(", "im", ",", "size", ")", "\n", "im_list", "+=", "[", "x", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "x", "in", "im_list", "]", "\n", "offset_x", "+=", "offset_x", "\n", "offset_y", "+=", "offset_y", "\n", "mirror", "=", "[", "False", "]", "*", "5", "+", "[", "True", "]", "*", "5", "\n", "return", "im_list", ",", "offset_x", ",", "offset_y", ",", "mirror", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.lenet_crop": [[106, 134], ["range", "print", "augment.scale", "augment.center_crop", "random.uniform", "int", "int", "random.uniform", "math.sqrt", "math.sqrt", "random.random", "random.randint", "random.randint", "im.crop", "im_test.resize.resize"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.center_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize"], ["", "def", "lenet_crop", "(", "im", ",", "size", ",", "area_min", "=", "0.08", ",", "aspect_factor", "=", "3", "/", "4", ",", "max_trials", "=", "10", ",", "scale_mode", "=", "\"small\"", ")", ":", "\n", "    ", "area", "=", "im", ".", "size", "[", "0", "]", "*", "im", ".", "size", "[", "1", "]", "\n", "for", "_", "in", "range", "(", "max_trials", ")", ":", "\n", "        ", "target_area", "=", "random", ".", "uniform", "(", "area_min", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "aspect_factor", ",", "1.0", "/", "aspect_factor", ")", "\n", "w", "=", "int", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "int", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "im", ".", "size", "[", "0", "]", "and", "h", "<=", "im", ".", "size", "[", "1", "]", ":", "\n", "            ", "scale_x", "=", "size", "/", "w", "\n", "scale_y", "=", "size", "/", "h", "\n", "bbox_x0", "=", "random", ".", "randint", "(", "0", ",", "im", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "bbox_y0", "=", "random", ".", "randint", "(", "0", ",", "im", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "bbox_x1", "=", "bbox_x0", "+", "w", "\n", "bbox_y1", "=", "bbox_y0", "+", "h", "\n", "im_test", "=", "im", ".", "crop", "(", "(", "bbox_x0", ",", "bbox_y0", ",", "bbox_x1", ",", "bbox_y1", ")", ")", "\n", "im_test", "=", "im_test", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "offset_x", "=", "bbox_x0", "*", "scale_x", "\n", "offset_y", "=", "bbox_y0", "*", "scale_y", "\n", "return", "im_test", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "\n", "\n", "#fall back", "\n", "", "", "print", "(", "\"warning: using lenet crop fallback\"", ")", "\n", "im", ",", "scale_x", ",", "scale_y", "=", "scale", "(", "im", ",", "size", ",", "scale_mode", ")", "\n", "im", ",", "offset_x", ",", "offset_y", "=", "center_crop", "(", "im", ",", "size", ")", "\n", "return", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.resnet_crop": [[136, 161], ["random.randint", "random.randint", "random.randint", "int", "int", "int", "int", "im.crop.crop", "augment.scale", "int", "int", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale"], ["", "def", "resnet_crop", "(", "im", ",", "size", ")", ":", "\n", "\n", "    ", "target_size", "=", "random", ".", "randint", "(", "256", ",", "480", ")", "\n", "if", "im", ".", "size", "[", "0", "]", "<", "im", ".", "size", "[", "1", "]", ":", "\n", "        ", "scaled_size", "=", "(", "target_size", ",", "int", "(", "math", ".", "ceil", "(", "target_size", "*", "im", ".", "size", "[", "1", "]", "/", "im", ".", "size", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "scaled_size", "=", "(", "int", "(", "math", ".", "ceil", "(", "target_size", "*", "im", ".", "size", "[", "0", "]", "/", "im", ".", "size", "[", "1", "]", ")", ")", ",", "target_size", ")", "\n", "\n", "", "scale_x", "=", "scaled_size", "[", "0", "]", "/", "im", ".", "size", "[", "0", "]", "\n", "scale_y", "=", "scaled_size", "[", "1", "]", "/", "im", ".", "size", "[", "1", "]", "\n", "\n", "#crop position in scaled image", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "scaled_size", "[", "0", "]", "-", "size", ")", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "scaled_size", "[", "1", "]", "-", "size", ")", "\n", "\n", "#crop position in unscaled image", "\n", "bbox_x0", "=", "int", "(", "offset_x", "/", "scale_x", ")", "\n", "bbox_y0", "=", "int", "(", "offset_y", "/", "scale_y", ")", "\n", "bbox_x1", "=", "int", "(", "(", "offset_x", "+", "size", ")", "/", "scale_x", ")", "\n", "bbox_y1", "=", "int", "(", "(", "offset_y", "+", "size", ")", "/", "scale_y", ")", "\n", "\n", "#apply crop and scale", "\n", "im", "=", "im", ".", "crop", "(", "(", "bbox_x0", ",", "bbox_y0", ",", "bbox_x1", ",", "bbox_y1", ")", ")", "\n", "im", ",", "_", ",", "_", "=", "scale", "(", "im", ",", "im_crop", ",", "scale_mode", "=", "\"warp\"", ")", "\n", "return", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.ssd_crop": [[163, 218], ["max", "augment.add_border", "random.choice", "random.choice", "im_border.crop", "augment.scale", "range", "random.uniform", "int", "int", "random.randint", "random.randint", "crops.append", "math.sqrt", "math.sqrt", "denet.overlap_iou"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.add_border", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou"], ["", "def", "ssd_crop", "(", "im", ",", "size", ",", "bboxs", ")", ":", "\n", "\n", "    ", "im_size", "=", "max", "(", "im", ".", "size", "[", "0", "]", ",", "im", ".", "size", "[", "1", "]", ")", "\n", "im_border", ",", "offset_x", ",", "offset_y", "=", "add_border", "(", "im", ",", "im_size", ")", "\n", "\n", "crops", "=", "[", "(", "0", ",", "0", ",", "im_size", ",", "im_size", ")", "]", "\n", "for", "min_jaccard_overlap", "in", "[", "0.0", ",", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", ":", "\n", "        ", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "#in normalized coordinates [0,1)", "\n", "            ", "s", "=", "random", ".", "uniform", "(", "0.3", ",", "1.0", ")", "\n", "# aspect_min = max(0.5, pow(s, +2))", "\n", "# aspect_max = min(2.0, pow(s, -2))", "\n", "# aspect_ratio = random.uniform(aspect_min, aspect_max)", "\n", "aspect_ratio", "=", "1", "\n", "\n", "#in unnormalized coordinates [0,im_size)", "\n", "w", "=", "int", "(", "s", "*", "im", ".", "size", "[", "0", "]", "*", "math", ".", "sqrt", "(", "aspect_ratio", ")", ")", "\n", "h", "=", "int", "(", "s", "*", "im", ".", "size", "[", "1", "]", "/", "math", ".", "sqrt", "(", "aspect_ratio", ")", ")", "\n", "x0", "=", "random", ".", "randint", "(", "0", ",", "im", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y0", "=", "random", ".", "randint", "(", "0", ",", "im", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "x1", "=", "x0", "+", "w", "\n", "y1", "=", "y0", "+", "h", "\n", "\n", "#check to see if any object bbox satisfies min_jaccard_overlap", "\n", "sx", "=", "size", "/", "w", "\n", "sy", "=", "size", "/", "h", "\n", "\n", "sx", "=", "size", "/", "w", "\n", "sy", "=", "size", "/", "h", "\n", "ox", "=", "(", "offset_x", "+", "x0", ")", "*", "sx", "\n", "oy", "=", "(", "offset_y", "+", "y0", ")", "*", "sy", "\n", "\n", "valid", "=", "False", "\n", "for", "bbox", "in", "bboxs", ":", "\n", "                ", "min_x", "=", "(", "bbox", "[", "0", "]", "*", "sx", "-", "ox", ")", "/", "size", "\n", "min_y", "=", "(", "bbox", "[", "1", "]", "*", "sy", "-", "oy", ")", "/", "size", "\n", "max_x", "=", "(", "bbox", "[", "2", "]", "*", "sx", "-", "ox", ")", "/", "size", "\n", "max_y", "=", "(", "bbox", "[", "3", "]", "*", "sy", "-", "oy", ")", "/", "size", "\n", "if", "common", ".", "overlap_iou", "(", "(", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", ")", ")", ">", "min_jaccard_overlap", ":", "\n", "                    ", "valid", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "valid", ":", "\n", "                ", "crops", ".", "append", "(", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "break", "\n", "\n", "", "", "", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "random", ".", "choice", "(", "crops", ")", "\n", "sx", ",", "sy", "=", "size", "/", "(", "x1", "-", "x0", ")", ",", "size", "/", "(", "y1", "-", "y0", ")", "\n", "ox", "=", "(", "offset_x", "+", "x0", ")", "*", "sx", "\n", "oy", "=", "(", "offset_y", "+", "y0", ")", "*", "sy", "\n", "\n", "interp_mode", "=", "random", ".", "choice", "(", "[", "Image", ".", "NEAREST", ",", "Image", ".", "BILINEAR", ",", "Image", ".", "BICUBIC", ",", "Image", ".", "ANTIALIAS", "]", ")", "\n", "im", "=", "im_border", ".", "crop", "(", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "im", ",", "_", ",", "_", "=", "scale", "(", "im", ",", "size", ",", "scale_mode", "=", "\"warp\"", ",", "interp_mode", "=", "interp_mode", ")", "\n", "return", "im", ",", "sx", ",", "sy", ",", "ox", ",", "oy", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.denet_crop": [[220, 260], ["max", "augment.add_border", "range", "augment.scale", "pow", "int", "int", "random.randint", "random.randint", "random.uniform", "math.sqrt", "math.sqrt", "denet.overlap_rel", "random.uniform", "im_border.crop", "augment.scale"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.add_border", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_rel", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale"], ["", "def", "denet_crop", "(", "im", ",", "size", ",", "bboxs", ",", "area_min", "=", "0.08", ",", "aspect_factor", "=", "1", ",", "max_trials", "=", "10", ",", "interp_mode", "=", "Image", ".", "ANTIALIAS", ")", ":", "\n", "\n", "    ", "im_size", "=", "max", "(", "im", ".", "size", "[", "0", "]", ",", "im", ".", "size", "[", "1", "]", ")", "\n", "im_border", ",", "offset_x", ",", "offset_y", "=", "add_border", "(", "im", ",", "im_size", ")", "\n", "\n", "for", "_", "in", "range", "(", "max_trials", ")", ":", "\n", "        ", "target_area", "=", "random", ".", "uniform", "(", "area_min", ",", "1.0", ")", "*", "im_size", "*", "im_size", "\n", "aspect_ratio", "=", "pow", "(", "aspect_factor", ",", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", ")", "\n", "\n", "w", "=", "int", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "int", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", "\n", "\n", "if", "w", ">", "im_size", "or", "h", ">", "im_size", ":", "\n", "            ", "continue", "\n", "\n", "", "x0", "=", "random", ".", "randint", "(", "0", ",", "im_size", "-", "w", ")", "\n", "y0", "=", "random", ".", "randint", "(", "0", ",", "im_size", "-", "h", ")", "\n", "x1", "=", "x0", "+", "w", "\n", "y1", "=", "y0", "+", "h", "\n", "\n", "sx", "=", "size", "/", "w", "\n", "sy", "=", "size", "/", "h", "\n", "ox", "=", "(", "offset_x", "+", "x0", ")", "*", "sx", "\n", "oy", "=", "(", "offset_y", "+", "y0", ")", "*", "sy", "\n", "\n", "#make sure at least one object is onscreen", "\n", "for", "bbox", "in", "bboxs", ":", "\n", "            ", "min_x", "=", "(", "bbox", "[", "0", "]", "*", "sx", "-", "ox", ")", "/", "size", "\n", "min_y", "=", "(", "bbox", "[", "1", "]", "*", "sy", "-", "oy", ")", "/", "size", "\n", "max_x", "=", "(", "bbox", "[", "2", "]", "*", "sx", "-", "ox", ")", "/", "size", "\n", "max_y", "=", "(", "bbox", "[", "3", "]", "*", "sy", "-", "oy", ")", "/", "size", "\n", "overlap", "=", "common", ".", "overlap_rel", "(", "(", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", ")", ")", "\n", "if", "overlap", ">=", "0.5", ":", "\n", "                ", "im", "=", "im_border", ".", "crop", "(", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "im", ",", "_", ",", "_", "=", "scale", "(", "im", ",", "size", ",", "scale_mode", "=", "\"warp\"", ",", "interp_mode", "=", "interp_mode", ")", "\n", "return", "im", ",", "sx", ",", "sy", ",", "ox", ",", "oy", "\n", "\n", "#fall back", "\n", "", "", "", "im", ",", "scale_x", ",", "scale_y", "=", "scale", "(", "im_border", ",", "size", ",", "interp_mode", "=", "interp_mode", ")", "\n", "return", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", "*", "scale_x", ",", "offset_y", "*", "scale_y", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.photometric": [[262, 276], ["random.sample", "type", "random.uniform", "numpy.mean"], "function", ["None"], ["", "def", "photometric", "(", "im_x", ",", "v", "=", "0.4", ")", ":", "\n", "    ", "assert", "type", "(", "im_x", ")", "is", "numpy", ".", "ndarray", "\n", "for", "op", "in", "random", ".", "sample", "(", "[", "\"contrast\"", ",", "\"brightness\"", ",", "\"saturation\"", "]", ",", "3", ")", ":", "\n", "        ", "alpha", "=", "random", ".", "uniform", "(", "1.0", "-", "v", ",", "1.0", "+", "v", ")", "\n", "if", "op", "==", "\"brightness\"", ":", "\n", "            ", "im_x", "=", "im_x", "*", "alpha", "\n", "", "elif", "op", "==", "\"contrast\"", ":", "\n", "            ", "im_grey", "=", "0.299", "*", "im_x", "[", "0", ",", ":", ",", ":", "]", "+", "0.587", "*", "im_x", "[", "1", ",", ":", ",", ":", "]", "+", "0.114", "*", "im_x", "[", "2", ",", ":", ",", ":", "]", "\n", "im_x", "=", "im_x", "*", "alpha", "+", "(", "1.0", "-", "alpha", ")", "*", "numpy", ".", "mean", "(", "im_grey", ")", "\n", "", "elif", "op", "==", "\"saturation\"", ":", "\n", "            ", "im_grey", "=", "0.299", "*", "im_x", "[", "0", ",", ":", ",", ":", "]", "+", "0.587", "*", "im_x", "[", "1", ",", ":", ",", ":", "]", "+", "0.114", "*", "im_x", "[", "2", ",", ":", ",", ":", "]", "\n", "im_x", "=", "im_x", "*", "alpha", "+", "(", "1.0", "-", "alpha", ")", "*", "im_grey", "[", "None", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "im_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.colorspace": [[278, 284], ["numpy.dot", "type", "numpy.random.normal"], "function", ["None"], ["", "def", "colorspace", "(", "im_x", ",", "rgb_eigen_val", ",", "rgb_eigen_vec", ",", "v", "=", "0.1", ")", ":", "\n", "    ", "assert", "type", "(", "im_x", ")", "is", "numpy", ".", "ndarray", "\n", "aug", "=", "numpy", ".", "random", ".", "normal", "(", "0", ",", "v", ",", "3", ")", "*", "rgb_eigen_val", "\n", "noise", "=", "numpy", ".", "dot", "(", "rgb_eigen_vec", ",", "aug", ".", "T", ")", "\n", "im_x", "+=", "noise", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "im_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.copy": [[19, 24], ["super().copy"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["    ", "def", "copy", "(", "self", ",", "copy_data", "=", "True", ")", ":", "\n", "        ", "r", "=", "super", "(", ")", ".", "copy", "(", "copy_data", ")", "\n", "r", ".", "images", "=", "self", ".", "images", "\n", "r", ".", "image_loader", "=", "self", ".", "image_loader", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.shuffle": [[25, 27], ["random.shuffle"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle"], ["", "def", "shuffle", "(", "self", ",", "mode", "=", "\"random\"", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.load_from_subset": [[28, 38], ["denet.info", "denet.info", "min", "imagenet.DatasetImagenet.image_loader.load"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "def", "load_from_subset", "(", "self", ",", "subset", ")", ":", "\n", "        ", "if", "self", ".", "subset_index", "==", "subset", ":", "\n", "            ", "return", "\n", "\n", "", "logging", ".", "info", "(", "\"Loading from subset %i / %i (%i threads)\"", "%", "(", "subset", ",", "self", ".", "subset_num", ",", "self", ".", "thread_num", ")", ")", "\n", "\n", "index_start", "=", "subset", "*", "self", ".", "subset_size", "\n", "index_end", "=", "min", "(", "(", "subset", "+", "1", ")", "*", "self", ".", "subset_size", ",", "self", ".", "subset_total_size", ")", "\n", "self", ".", "data", "=", "self", ".", "image_loader", ".", "load", "(", "self", ".", "images", "[", "index_start", ":", "index_end", "]", ")", "\n", "self", ".", "subset_index", "=", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.load": [[39, 157], ["os.path.join", "os.path.join", "os.path.isfile", "denet.get_params_dict", "denet.get_params_dict", "denet.dataset.image_loader.ImageLoader", "denet.dataset.image_loader.ImageLoader", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "denet.get_params_dict.get", "denet.get_params_dict.get", "denet.get_params_dict.get", "denet.get_params_dict.get", "len", "min", "denet.info", "denet.info", "os.path.dirname", "os.path.isfile", "denet.info", "denet.info", "denet.info", "denet.info", "denet.json_from_file", "denet.json_from_file", "os.path.join", "enumerate", "denet.info", "denet.info", "enumerate", "len", "int", "open", "f.readlines", "DatasetFromDir.find_class_labels", "denet.json_from_file.get", "denet.warning", "denet.warning", "os.path.dirname", "os.path.isdir", "Exception", "os.listdir().sort", "DatasetFromDir.find_paths", "denet.info", "denet.info", "denet.verbose", "denet.verbose", "os.path.basename", "os.path.join", "os.path.isfile", "imagenet.DatasetImagenet.images.append", "denet.info", "denet.info", "denet.json_to_file", "denet.json_to_file", "data_format.split", "math.ceil", "line.rstrip().split", "int", "os.path.join", "os.path.dirname", "xml.parse().getroot", "xml.parse().getroot.find", "int", "int", "xml.parse().getroot.iter", "denet.warning", "denet.warning", "os.path.basename", "len", "images_bbox.append", "os.listdir", "len", "obj.find", "int", "int", "int", "int", "bboxs.append", "os.path.dirname", "line.rstrip", "len", "os.path.splitext", "xml.parse", "xml.parse().getroot.find.find", "xml.parse().getroot.find.find", "os.path.basename", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_class_labels", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_paths", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning"], ["", "def", "load", "(", "self", ",", "input_dir", ",", "data_format", ",", "is_training", ",", "thread_num", ",", "class_labels", "=", "None", ")", ":", "\n", "\n", "        ", "from", ".", "basic", "import", "DatasetFromDir", "\n", "\n", "self", ".", "input_dir", "=", "input_dir", "\n", "if", "self", ".", "input_dir", "[", "-", "1", "]", "==", "'/'", ":", "\n", "            ", "self", ".", "input_dir", "=", "self", ".", "input_dir", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "thread_num", "=", "thread_num", "\n", "\n", "#generate class labels", "\n", "self", ".", "class_labels", "=", "class_labels", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "input_dir", ")", ",", "\"class_labels.txt\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", "and", "self", ".", "class_labels", "is", "None", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading class labels from:\"", ",", "fname", ")", "\n", "self", ".", "class_labels", "=", "{", "}", "\n", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                    ", "tokens", "=", "line", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "\" \"", ")", "\n", "self", ".", "class_labels", "[", "tokens", "[", "1", "]", "]", "=", "int", "(", "tokens", "[", "0", "]", ")", "\n", "\n", "", "", "", "elif", "self", ".", "class_labels", "is", "None", ":", "\n", "            ", "self", ".", "class_labels", "=", "DatasetFromDir", ".", "find_class_labels", "(", "input_dir", ")", "\n", "\n", "#check to see if buffered file list is present", "\n", "", "list_fname", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"image_list.json\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "list_fname", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading dataset metadata:\"", ",", "list_fname", ")", "\n", "json_data", "=", "common", ".", "json_from_file", "(", "list_fname", ")", "\n", "if", "json_data", ".", "get", "(", "\"version\"", ",", "0", ")", "<", "1", ":", "\n", "                ", "logging", ".", "warning", "(", "\"Warning: image_list.json is old version, missing bounding boxs!\"", ")", "\n", "self", ".", "images", "=", "[", "{", "\"fname\"", ":", "fname", ",", "\"bboxs\"", ":", "[", "]", "}", "for", "fname", "in", "json_data", "[", "\"images\"", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "images", "=", "json_data", "[", "\"images\"", "]", "\n", "", "", "else", ":", "\n", "\n", "            ", "bbox_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_dir", ")", ",", "\"bbox\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "bbox_dir", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"ERROR: cannot find bbox dir:\"", "+", "bbox_dir", ")", "\n", "\n", "", "fnames", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "os", ".", "listdir", "(", "input_dir", ")", ".", "sort", "(", ")", ")", ":", "\n", "                ", "images_cls", "=", "DatasetFromDir", ".", "find_paths", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "c", ")", ",", "\"*.JPEG\"", ")", "\n", "logging", ".", "info", "(", "\"Found %i images for class\"", "%", "len", "(", "images_cls", ")", ",", "c", ")", "\n", "fnames", "+=", "images_cls", "\n", "\n", "", "logging", ".", "info", "(", "\"Finding bboxs in:\"", ",", "bbox_dir", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "fnames", ")", ":", "\n", "                ", "logging", ".", "verbose", "(", "\"%i/%i\"", "%", "(", "i", ",", "len", "(", "fnames", ")", ")", ")", "\n", "cls_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", "\n", "obj_fname", "=", "os", ".", "path", ".", "join", "(", "bbox_dir", ",", "cls_name", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "+", "\".xml\"", ")", "\n", "bboxs", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isfile", "(", "obj_fname", ")", ":", "\n", "                    ", "obj_tree", "=", "xml", ".", "parse", "(", "obj_fname", ")", ".", "getroot", "(", ")", "\n", "size", "=", "obj_tree", ".", "find", "(", "\"size\"", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "\"height\"", ")", ".", "text", ")", "\n", "for", "obj", "in", "obj_tree", ".", "iter", "(", "\"object\"", ")", ":", "\n", "                        ", "bndbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "min_x", "=", "int", "(", "bndbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "\n", "min_y", "=", "int", "(", "bndbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "\n", "max_x", "=", "int", "(", "bndbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "\n", "max_y", "=", "int", "(", "bndbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "\n", "bboxs", ".", "append", "(", "{", "\"x0\"", ":", "min_x", ",", "\"x1\"", ":", "max_x", ",", "\"y0\"", ":", "min_y", ",", "\"y1\"", ":", "max_y", "}", ")", "\n", "\n", "", "", "self", ".", "images", ".", "append", "(", "{", "\"fname\"", ":", "fname", ",", "\"bboxs\"", ":", "bboxs", "}", ")", "\n", "\n", "", "try", ":", "\n", "                ", "logging", ".", "info", "(", "\"Saving dataset metadata:\"", ",", "list_fname", ")", "\n", "common", ".", "json_to_file", "(", "list_fname", ",", "{", "\"images\"", ":", "self", ".", "images", ",", "\"version\"", ":", "1", "}", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "\"Warning: failed to write buffered image list - \"", ",", "e", ")", "\n", "\n", "#add/fix fields to fit new image_loader interface", "\n", "", "", "for", "image", "in", "self", ".", "images", ":", "\n", "            ", "fname", "=", "image", "[", "\"fname\"", "]", "\n", "cls", "=", "self", ".", "class_labels", "[", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", "]", "\n", "image", "[", "\"class\"", "]", "=", "cls", "\n", "image", "[", "\"bboxs\"", "]", "=", "[", "(", "cls", ",", "(", "bb", "[", "\"x0\"", "]", ",", "bb", "[", "\"y0\"", "]", ",", "bb", "[", "\"x1\"", "]", ",", "bb", "[", "\"y1\"", "]", ")", ")", "for", "bb", "in", "image", "[", "\"bboxs\"", "]", "]", "\n", "\n", "", "param_str", "=", "\",\"", ".", "join", "(", "data_format", ".", "split", "(", "\",\"", ")", "[", "1", ":", "]", ")", "\n", "format_params", "=", "common", ".", "get_params_dict", "(", "param_str", ")", "\n", "self", ".", "image_loader", "=", "ImageLoader", "(", "thread_num", ",", "is_training", ",", "format_params", ")", "\n", "\n", "#from facebook resnet implementation", "\n", "self", ".", "image_loader", ".", "rgb_mean", "=", "numpy", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_std", "=", "numpy", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_eigen_val", "=", "numpy", ".", "array", "(", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_eigen_vec", "=", "numpy", ".", "array", "(", "[", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "#others", "\n", "self", ".", "subset_size", "=", "format_params", ".", "get", "(", "\"images_per_subset\"", ",", "10000", ")", "\n", "self", ".", "use_null_class", "=", "format_params", ".", "get", "(", "\"null\"", ",", "False", ")", "\n", "self", ".", "subset_num", "=", "format_params", ".", "get", "(", "\"subset_num\"", ",", "sys", ".", "maxsize", ")", "\n", "self", ".", "bbox_only", "=", "format_params", ".", "get", "(", "\"bbox_only\"", ",", "False", ")", "\n", "\n", "#only use samples with bounding boxes", "\n", "if", "self", ".", "image_loader", ".", "is_training", "and", "self", ".", "bbox_only", ":", "\n", "            ", "images_bbox", "=", "[", "]", "\n", "for", "image", "in", "self", ".", "images", ":", "\n", "                ", "if", "len", "(", "image", "[", "\"bboxs\"", "]", ")", ">", "0", ":", "\n", "                    ", "images_bbox", ".", "append", "(", "image", ")", "\n", "", "", "self", ".", "images", "=", "images_bbox", "\n", "\n", "#append null class", "\n", "", "if", "self", ".", "use_null_class", "and", "not", "\"null\"", "in", "self", ".", "class_labels", ":", "\n", "            ", "self", ".", "class_labels", "[", "\"null\"", "]", "=", "len", "(", "self", ".", "class_labels", ")", "\n", "\n", "", "self", ".", "subset_index", "=", "-", "1", "\n", "self", ".", "subset_total_size", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "subset_num", "=", "min", "(", "self", ".", "subset_num", ",", "int", "(", "math", ".", "ceil", "(", "self", ".", "subset_total_size", "/", "self", ".", "subset_size", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Using Imagenet dataset - size:\"", ",", "self", ".", "subset_total_size", ",", "\"subset_num\"", ",", "self", ".", "subset_num", ",", "\"images per subset:\"", ",", "self", ".", "subset_size", ",", "self", ".", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.get_localization_error": [[159, 181], ["denet.info", "denet.info", "dets.sort", "len", "len", "zip", "min", "len", "len", "len", "denet.overlap_iou", "denet.overlap_iou"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou"], ["", "def", "get_localization_error", "(", "detections", ")", ":", "\n", "        ", "error", "=", "0", "\n", "det_truth", "=", "0", "\n", "det_total", "=", "0", "\n", "for", "d", "in", "detections", ":", "\n", "            ", "meta", "=", "d", "[", "\"meta\"", "]", "\n", "dets", "=", "d", "[", "\"detections\"", "]", "\n", "dets", ".", "sort", "(", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", "\n", "\n", "det_truth", "+=", "len", "(", "meta", "[", "\"class\"", "]", ")", "\n", "det_total", "+=", "len", "(", "dets", ")", "\n", "\n", "positive", "=", "False", "\n", "for", "_", ",", "cls_a", ",", "bbox_a", "in", "dets", "[", ":", "min", "(", "5", ",", "len", "(", "dets", ")", ")", "]", ":", "\n", "                ", "for", "cls_b", ",", "bbox_b", "in", "zip", "(", "meta", "[", "\"class\"", "]", ",", "meta", "[", "\"objs\"", "]", ")", ":", "\n", "                    ", "if", "cls_a", "==", "cls_b", "and", "common", ".", "overlap_iou", "(", "bbox_a", ",", "bbox_b", ")", ">", "0.5", ":", "\n", "                        ", "positive", "=", "True", "\n", "\n", "", "", "", "if", "not", "positive", ":", "\n", "                ", "error", "+=", "1", "\n", "\n", "", "", "logging", ".", "info", "(", "\"Imagenet localization error: %.2f (%i images, %i true detections, %i total detections)\"", "%", "(", "100.0", "*", "error", "/", "len", "(", "detections", ")", ",", "len", "(", "detections", ")", ",", "det_truth", ",", "det_total", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.image_loader.ImageLoader.__init__": [[143, 169], ["format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "format_params.get", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "multiprocessing.Pool"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "thread_num", ",", "is_training", ",", "format_params", "=", "{", "}", ")", ":", "\n", "#cropping / scaling", "\n", "        ", "self", ".", "crop", "=", "format_params", ".", "get", "(", "\"crop\"", ",", "224", ")", "\n", "self", ".", "multicrop", "=", "format_params", ".", "get", "(", "\"multicrop\"", ",", "False", ")", "\n", "self", ".", "crop_mode", "=", "format_params", ".", "get", "(", "\"crop_mode\"", ",", "\"default\"", ")", "\n", "self", ".", "max_trials", "=", "format_params", ".", "get", "(", "\"max_trials\"", ",", "10", ")", "\n", "self", ".", "scale", "=", "format_params", ".", "get", "(", "\"scale\"", ",", "self", ".", "crop", ")", "\n", "self", ".", "scale_mode", "=", "format_params", ".", "get", "(", "\"scale_mode\"", ",", "\"small\"", ")", "\n", "self", ".", "area_min", "=", "format_params", ".", "get", "(", "\"area_min\"", ",", "0.08", ")", "\n", "self", ".", "aspect_factor", "=", "format_params", ".", "get", "(", "\"aspect_factor\"", ",", "0.75", ")", "\n", "\n", "#other augmentation", "\n", "self", ".", "subtract_mean", "=", "format_params", ".", "get", "(", "\"subtract_mean\"", ",", "False", ")", "\n", "self", ".", "augment_color", "=", "format_params", ".", "get", "(", "\"augment_color\"", ",", "False", ")", "\n", "self", ".", "augment_photo", "=", "format_params", ".", "get", "(", "\"augment_photo\"", ",", "False", ")", "\n", "self", ".", "check_onscreen", "=", "format_params", ".", "get", "(", "\"check_onscreen\"", ",", "0.5", ")", "\n", "self", ".", "check_center", "=", "format_params", ".", "get", "(", "\"check_center\"", ",", "False", ")", "\n", "self", ".", "augment_mirror", "=", "True", "\n", "self", ".", "rgb_mean", "=", "numpy", ".", "zeros", "(", "3", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "rgb_std", "=", "numpy", ".", "zeros", "(", "3", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "rgb_eigen_val", "=", "numpy", ".", "zeros", "(", "3", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "rgb_eigen_vec", "=", "numpy", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "thread_num", "=", "thread_num", "\n", "self", ".", "procs", "=", "mp", ".", "Pool", "(", "self", ".", "thread_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.image_loader.ImageLoader.__str__": [[171, 177], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "r", "=", "\"thread_num: %i, is_training: %i, subtract_mean: %i, scale: %i, scale mode: %s, \"", "%", "(", "self", ".", "thread_num", ",", "self", ".", "is_training", ",", "self", ".", "subtract_mean", ",", "self", ".", "scale", ",", "self", ".", "scale_mode", ")", "\n", "r", "+=", "\"crop: %i, crop_mode: %s, multicrop: %i, onscreen: %.1f, center: %i, \"", "%", "(", "self", ".", "crop", ",", "self", ".", "crop_mode", ",", "self", ".", "multicrop", ",", "self", ".", "check_onscreen", ",", "self", ".", "check_center", ")", "\n", "r", "+=", "\"area: (%.2f,1.0), aspect: (%.2f,%.2f), max_trials: %i, \"", "%", "(", "self", ".", "area_min", ",", "self", ".", "aspect_factor", ",", "1.0", "/", "self", ".", "aspect_factor", ",", "self", ".", "max_trials", ")", "\n", "r", "+=", "\"augment - mirror: %i, color: %i, photo: %i\"", "%", "(", "self", ".", "augment_mirror", ",", "self", ".", "augment_color", ",", "self", ".", "augment_photo", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.image_loader.ImageLoader.load": [[178, 210], ["image_loader.ImageLoader.procs.imap", "sum", "args_list.append", "image_loader.ImageLoader.rgb_mean.tolist", "image_loader.ImageLoader.rgb_std.tolist", "image_loader.ImageLoader.rgb_eigen_vec.tolist", "image_loader.ImageLoader.rgb_eigen_val.tolist", "random.randint"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "images", ")", ":", "\n", "\n", "#build args", "\n", "        ", "args_list", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "args", "=", "{", "\"image\"", ":", "image", ",", "\n", "\"isTraining\"", ":", "self", ".", "is_training", ",", "\n", "\"multicrop\"", ":", "self", ".", "multicrop", ",", "\n", "\"checkOnscreen\"", ":", "self", ".", "check_onscreen", ",", "\n", "\"checkCenter\"", ":", "self", ".", "check_center", ",", "\n", "\"scale\"", ":", "self", ".", "scale", ",", "\n", "\"scaleMode\"", ":", "self", ".", "scale_mode", ",", "\n", "\"crop\"", ":", "self", ".", "crop", ",", "\n", "\"cropMode\"", ":", "self", ".", "crop_mode", ",", "\n", "\"subtractMean\"", ":", "self", ".", "subtract_mean", ",", "\n", "\"maxTrials\"", ":", "self", ".", "max_trials", ",", "\n", "\"areaMin\"", ":", "self", ".", "area_min", ",", "\n", "\"aspectFactor\"", ":", "self", ".", "aspect_factor", ",", "\n", "\"rgbMean\"", ":", "self", ".", "rgb_mean", ".", "tolist", "(", ")", ",", "\n", "\"rgbStd\"", ":", "self", ".", "rgb_std", ".", "tolist", "(", ")", ",", "\n", "\"rgbEigenVec\"", ":", "self", ".", "rgb_eigen_vec", ".", "tolist", "(", ")", ",", "\n", "\"rgbEigenVal\"", ":", "self", ".", "rgb_eigen_val", ".", "tolist", "(", ")", ",", "\n", "\"augmentMirror\"", ":", "self", ".", "augment_mirror", ",", "\n", "\"augmentColor\"", ":", "self", ".", "augment_color", ",", "\n", "\"augmentPhoto\"", ":", "self", ".", "augment_photo", ",", "\n", "\"seed\"", ":", "random", ".", "randint", "(", "0", ",", "1000000", ")", "}", "\n", "\n", "args_list", ".", "append", "(", "args", ")", "\n", "\n", "", "data_list", "=", "self", ".", "procs", ".", "imap", "(", "load_sample_proc", ",", "args_list", ")", "\n", "data", "=", "sum", "(", "data_list", ",", "[", "]", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.image_loader.load_sample_proc": [[11, 141], ["image.get", "image.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "random.seed", "numpy.random.seed", "PIL.Image.open", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "denet.image_to_array", "denet.scale", "len", "data.append", "denet.resnet_crop", "denet.photometric", "denet.colorspace", "denet.multi_crop_mirror", "denet.center_crop", "denet.lenet_crop", "random.random", "denet.image_to_array", "denet.image_to_array", "type", "type", "type", "type", "type", "type", "denet.clip", "denet.clip", "denet.clip", "denet.clip", "denet.overlap_rel", "bboxs.append", "classes.append", "os.path.basename", "denet.denet_crop", "bboxs.append", "classes.append", "denet.ssd_crop", "denet.scale", "denet.random_crop", "denet.scale", "denet.center_crop", "Exception"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.image_to_array", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.resnet_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.photometric", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.colorspace", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.multi_crop_mirror", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.center_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.lenet_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.image_to_array", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.image_to_array", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.clip", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.clip", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.clip", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.clip", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_rel", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.denet_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.ssd_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.random_crop", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.scale", "home.repos.pwc.inspect_result.lachlants_denet.dataset.augment.center_crop"], ["def", "load_sample_proc", "(", "args", ")", ":", "\n", "\n", "    ", "image", "=", "args", "[", "\"image\"", "]", "\n", "image_fname", "=", "image", "[", "\"fname\"", "]", "\n", "image_bboxs", "=", "image", ".", "get", "(", "\"bboxs\"", ",", "[", "]", ")", "\n", "bboxs", "=", "[", "bbox", "for", "_", ",", "bbox", "in", "image_bboxs", "]", "\n", "image_cls", "=", "image", ".", "get", "(", "\"class\"", ",", "None", ")", "\n", "\n", "is_training", "=", "args", "[", "\"isTraining\"", "]", "\n", "scale", "=", "args", "[", "\"scale\"", "]", "\n", "scale_mode", "=", "args", ".", "get", "(", "\"scaleMode\"", ",", "\"small\"", ")", "\n", "crop", "=", "args", "[", "\"crop\"", "]", "\n", "crop_mode", "=", "args", ".", "get", "(", "\"cropMode\"", ",", "\"default\"", ")", "\n", "max_trials", "=", "args", ".", "get", "(", "\"maxTrials\"", ",", "10", ")", "\n", "multicrop", "=", "args", ".", "get", "(", "\"multicrop\"", ",", "False", ")", "\n", "\n", "area_min", "=", "args", ".", "get", "(", "\"areaMin\"", ",", "0.08", ")", "\n", "aspect_factor", "=", "args", ".", "get", "(", "\"aspectFactor\"", ",", "3", "/", "4", ")", "\n", "\n", "check_onscreen", "=", "args", ".", "get", "(", "\"checkOnscreen\"", ",", "0.0", ")", "\n", "check_center", "=", "args", ".", "get", "(", "\"checkCenter\"", ",", "False", ")", "\n", "\n", "augment_mirror", "=", "args", ".", "get", "(", "\"augmentMirror\"", ",", "False", ")", "\n", "augment_color", "=", "args", ".", "get", "(", "\"augmentColor\"", ",", "False", ")", "\n", "augment_photo", "=", "args", ".", "get", "(", "\"augmentPhoto\"", ",", "False", ")", "\n", "\n", "subtract_mean", "=", "args", ".", "get", "(", "\"subtractMean\"", ",", "False", ")", "\n", "if", "subtract_mean", ":", "\n", "        ", "rgb_mean", "=", "numpy", ".", "array", "(", "args", "[", "\"rgbMean\"", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "rgb_std", "=", "numpy", ".", "array", "(", "args", "[", "\"rgbStd\"", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "", "if", "augment_color", ":", "\n", "        ", "rgb_eigen_val", "=", "numpy", ".", "array", "(", "args", "[", "\"rgbEigenVal\"", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "rgb_eigen_vec", "=", "numpy", ".", "array", "(", "args", "[", "\"rgbEigenVec\"", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "", "seed", "=", "args", ".", "get", "(", "\"seed\"", ",", "None", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "im", "=", "Image", ".", "open", "(", "image_fname", ")", "\n", "im_size", "=", "im", ".", "size", "\n", "mirror", "=", "False", "\n", "if", "is_training", ":", "\n", "\n", "#scale / crop augmentation", "\n", "        ", "if", "crop_mode", "==", "\"resnet\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "resnet_crop", "(", "im", ",", "crop", ",", "scale", ",", "480", ")", "\n", "", "elif", "crop_mode", "==", "\"lenet\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "lenet_crop", "(", "im", ",", "crop", ",", "area_min", ",", "aspect_factor", ",", "max_trials", ",", "scale_mode", ")", "\n", "", "elif", "crop_mode", "==", "\"denet\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "denet_crop", "(", "im", ",", "crop", ",", "bboxs", ",", "area_min", ",", "aspect_factor", ",", "max_trials", ")", "\n", "", "elif", "crop_mode", "==", "\"ssd\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "ssd_crop", "(", "im", ",", "crop", ",", "bboxs", ")", "\n", "", "elif", "crop_mode", "==", "\"default\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", "=", "augment", ".", "scale", "(", "im", ",", "scale", ",", "scale_mode", ")", "\n", "im", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "random_crop", "(", "im", ",", "crop", ")", "\n", "", "elif", "crop_mode", "==", "\"center\"", ":", "\n", "            ", "im", ",", "scale_x", ",", "scale_y", "=", "augment", ".", "scale", "(", "im", ",", "scale", ",", "scale_mode", ")", "\n", "im", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "center_crop", "(", "im", ",", "crop", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown crop mode:\"", ",", "crop_mode", ")", "\n", "\n", "#convert to ndarray", "\n", "", "im_x", "=", "augment", ".", "image_to_array", "(", "im", ")", "\n", "if", "augment_photo", ":", "\n", "            ", "im_x", "=", "augment", ".", "photometric", "(", "im_x", ")", "\n", "", "if", "augment_color", ":", "\n", "            ", "im_x", "=", "augment", ".", "colorspace", "(", "im_x", ",", "rgb_eigen_val", ",", "rgb_eigen_vec", ")", "\n", "\n", "#random flip", "\n", "", "if", "augment_mirror", "and", "random", ".", "random", "(", ")", ">=", "0.5", ":", "\n", "            ", "im_x", "=", "im_x", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "mirror", "=", "True", "\n", "\n", "", "im_list_x", "=", "[", "im_x", "]", "\n", "", "else", ":", "\n", "        ", "im", ",", "scale_x", ",", "scale_y", "=", "augment", ".", "scale", "(", "im", ",", "scale", ",", "scale_mode", ")", "\n", "if", "multicrop", ":", "\n", "            ", "im_list", ",", "offset_x", ",", "offset_y", ",", "mirror", "=", "augment", ".", "multi_crop_mirror", "(", "im", ",", "crop", ")", "\n", "im_list_x", "=", "[", "augment", ".", "image_to_array", "(", "x", ")", "for", "x", "in", "im_list", "]", "\n", "scale_x", "=", "[", "scale_x", "]", "*", "10", "\n", "scale_y", "=", "[", "scale_y", "]", "*", "10", "\n", "", "else", ":", "\n", "            ", "im", ",", "offset_x", ",", "offset_y", "=", "augment", ".", "center_crop", "(", "im", ",", "crop", ")", "\n", "im_list_x", "=", "[", "augment", ".", "image_to_array", "(", "im", ")", "]", "\n", "\n", "", "", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "im_list_x", ")", ")", ":", "\n", "\n", "#collect info for sample", "\n", "        ", "im_x", "=", "im_list_x", "[", "i", "]", "if", "type", "(", "im_list_x", ")", "is", "list", "else", "im_list_x", "\n", "\n", "if", "subtract_mean", ":", "\n", "            ", "im_x", "=", "(", "im_x", "-", "rgb_mean", "[", ":", ",", "None", ",", "None", "]", ")", "/", "rgb_std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "x", "=", "offset_x", "[", "i", "]", "if", "type", "(", "offset_x", ")", "is", "list", "else", "offset_x", "\n", "y", "=", "offset_y", "[", "i", "]", "if", "type", "(", "offset_y", ")", "is", "list", "else", "offset_y", "\n", "sx", "=", "scale_x", "[", "i", "]", "if", "type", "(", "scale_x", ")", "is", "list", "else", "scale_x", "\n", "sy", "=", "scale_y", "[", "i", "]", "if", "type", "(", "scale_y", ")", "is", "list", "else", "scale_y", "\n", "m", "=", "mirror", "[", "i", "]", "if", "type", "(", "mirror", ")", "is", "list", "else", "mirror", "\n", "\n", "#collect meta data", "\n", "bboxs", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "for", "cls", ",", "bbox", "in", "image_bboxs", ":", "\n", "            ", "min_x", "=", "(", "bbox", "[", "0", "]", "*", "sx", "-", "x", ")", "/", "crop", "\n", "min_y", "=", "(", "bbox", "[", "1", "]", "*", "sy", "-", "y", ")", "/", "crop", "\n", "max_x", "=", "(", "bbox", "[", "2", "]", "*", "sx", "-", "x", ")", "/", "crop", "\n", "max_y", "=", "(", "bbox", "[", "3", "]", "*", "sy", "-", "y", ")", "/", "crop", "\n", "if", "m", ":", "\n", "                ", "x0", ",", "x1", "=", "min_x", ",", "max_x", "\n", "max_x", "=", "1.0", "-", "x0", "\n", "min_x", "=", "1.0", "-", "x1", "\n", "\n", "", "cx", "=", "(", "min_x", "+", "max_x", ")", "*", "0.5", "\n", "cy", "=", "(", "min_y", "+", "max_y", ")", "*", "0.5", "\n", "bbox", "=", "(", "common", ".", "clip", "(", "min_x", ",", "0", ",", "1", ")", ",", "common", ".", "clip", "(", "min_y", ",", "0", ",", "1", ")", ",", "common", ".", "clip", "(", "max_x", ",", "0", ",", "1", ")", ",", "common", ".", "clip", "(", "max_y", ",", "0", ",", "1", ")", ")", "\n", "if", "common", ".", "overlap_rel", "(", "(", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", ")", ")", ">=", "check_onscreen", ":", "\n", "                ", "bboxs", ".", "append", "(", "bbox", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "elif", "check_center", "and", "cx", ">=", "0.0", "and", "cx", "<=", "1.0", "and", "cy", ">=", "0.0", "and", "cy", "<=", "1.0", ":", "\n", "                ", "bboxs", ".", "append", "(", "bbox", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "\n", "", "", "meta", "=", "{", "\"class\"", ":", "classes", ",", "\"bbox\"", ":", "bboxs", ",", "\"scale\"", ":", "(", "sx", ",", "sy", ")", ",", "\"offset\"", ":", "(", "x", ",", "y", ")", ",", "\"mirror\"", ":", "m", ",", "\"image_size\"", ":", "im_size", ",", "\"image\"", ":", "image", "}", "\n", "if", "not", "image_cls", "is", "None", ":", "\n", "            ", "meta", "[", "\"image_class\"", "]", "=", "image_cls", "\n", "\n", "", "data", ".", "append", "(", "(", "os", ".", "path", ".", "basename", "(", "image_fname", ")", ",", "im_x", ",", "meta", ")", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.get_data_shape": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "get_data_shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "3", ",", "self", ".", "output_size", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.copy": [[19, 24], ["super().copy"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["", "def", "copy", "(", "self", ",", "copy_data", "=", "True", ")", ":", "\n", "        ", "r", "=", "super", "(", ")", ".", "copy", "(", "copy_data", ")", "\n", "r", ".", "images", "=", "self", ".", "images", "\n", "r", ".", "image_loader", "=", "self", ".", "image_loader", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.shuffle": [[25, 27], ["random.shuffle"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle"], ["", "def", "shuffle", "(", "self", ",", "mode", "=", "\"random\"", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.load_from_subset": [[28, 37], ["denet.info", "denet.info", "min", "mscoco.DatasetMSCOCO.image_loader.load"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "def", "load_from_subset", "(", "self", ",", "subset", ")", ":", "\n", "        ", "if", "self", ".", "subset_index", "==", "subset", ":", "\n", "            ", "return", "\n", "\n", "", "logging", ".", "info", "(", "\"Loading from subset %i / %i (%i threads)\"", "%", "(", "subset", ",", "self", ".", "subset_num", ",", "self", ".", "thread_num", ")", ")", "\n", "index_start", "=", "subset", "*", "self", ".", "subset_size", "\n", "index_end", "=", "min", "(", "(", "subset", "+", "1", ")", "*", "self", ".", "subset_size", ",", "self", ".", "subset_total_size", ")", "\n", "self", ".", "data", "=", "self", ".", "image_loader", ".", "load", "(", "self", ".", "images", "[", "index_start", ":", "index_end", "]", ")", "\n", "self", ".", "subset_index", "=", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.load": [[38, 138], ["denet.get_params_dict", "denet.get_params_dict", "denet.get_params_dict.get", "denet.get_params_dict.get", "denet.get_params_dict.get", "denet.get_params_dict.get", "denet.get_params_dict.get", "print", "denet.dataset.image_loader.ImageLoader", "denet.dataset.image_loader.ImageLoader", "denet.get_params_dict.get", "len", "denet.get_params_dict.get", "min", "denet.get_params_dict.get", "denet.info", "denet.info", "mscoco.DatasetMSCOCO.data_types.append", "mscoco.DatasetMSCOCO.data_types.append", "mscoco.DatasetMSCOCO.data_types.append", "mscoco.DatasetMSCOCO.data_types.append", "mscoco.DatasetMSCOCO.data_types.append", "len", "Exception", "denet.json_from_file", "denet.json_from_file", "enumerate", "denet.verbose", "denet.verbose", "denet.json_from_file.get", "denet.verbose", "denet.verbose", "int", "denet.info", "denet.info", "data_format.split", "range", "os.path.join", "os.path.join", "bboxs[].append", "bboxs.get", "mscoco.DatasetMSCOCO.images.append", "round", "math.ceil", "len", "len", "sum", "len", "images_bbox.append", "min", "os.path.join", "sum", "len", "len", "len", "len", "bboxs.values"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "def", "load", "(", "self", ",", "input_dir", ",", "data_format", ",", "is_training", ",", "thread_num", ",", "class_labels", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "thread_num", "=", "thread_num", "\n", "\n", "param_str", "=", "\",\"", ".", "join", "(", "data_format", ".", "split", "(", "\",\"", ")", "[", "1", ":", "]", ")", "\n", "format_params", "=", "common", ".", "get_params_dict", "(", "param_str", ")", "\n", "self", ".", "data_types", "=", "[", "]", "\n", "if", "format_params", ".", "get", "(", "\"2014-train\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "data_types", ".", "append", "(", "\"train2014\"", ")", "\n", "", "if", "format_params", ".", "get", "(", "\"2014-val\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "data_types", ".", "append", "(", "\"val2014\"", ")", "\n", "", "if", "format_params", ".", "get", "(", "\"2014-test\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "data_types", ".", "append", "(", "\"test2014\"", ")", "\n", "", "if", "format_params", ".", "get", "(", "\"2015-test\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "data_types", ".", "append", "(", "\"test2015\"", ")", "\n", "", "if", "format_params", ".", "get", "(", "\"2015-test-dev\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "data_types", ".", "append", "(", "\"test-dev2015\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "data_types", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"please specify mscoco subset\"", ")", "\n", "\n", "", "bbox_hist", "=", "[", "0", "for", "_", "in", "range", "(", "32", ")", "]", "\n", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "class_labels", "=", "{", "}", "\n", "self", ".", "categories", "=", "None", "\n", "for", "data_type", "in", "self", ".", "data_types", ":", "\n", "\n", "            ", "if", "\"test\"", "in", "data_type", ":", "\n", "                ", "fname", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"annotations/image_info_%s.json\"", "%", "data_type", ")", "\n", "", "else", ":", "\n", "                ", "fname", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"annotations/instances_%s.json\"", "%", "data_type", ")", "\n", "\n", "", "json_data", "=", "common", ".", "json_from_file", "(", "fname", ")", "\n", "\n", "#get class labels", "\n", "data_categories", "=", "{", "}", "\n", "for", "i", ",", "json_cat", "in", "enumerate", "(", "json_data", "[", "\"categories\"", "]", ")", ":", "\n", "                ", "data_categories", "[", "json_cat", "[", "\"id\"", "]", "]", "=", "json_cat", "[", "\"name\"", "]", "\n", "\n", "if", "not", "json_cat", "[", "\"name\"", "]", "in", "self", ".", "class_labels", ":", "\n", "                    ", "self", ".", "class_labels", "[", "json_cat", "[", "\"name\"", "]", "]", "=", "len", "(", "self", ".", "class_labels", ")", "\n", "\n", "", "", "assert", "(", "self", ".", "categories", "is", "None", ")", "or", "(", "self", ".", "categories", "==", "data_categories", ")", "\n", "self", ".", "categories", "=", "data_categories", "\n", "\n", "logging", ".", "verbose", "(", "\"Found %i labels:\"", "%", "len", "(", "self", ".", "class_labels", ")", ")", "\n", "\n", "#collect bounding boxes", "\n", "bboxs", "=", "{", "}", "\n", "for", "json_ann", "in", "json_data", ".", "get", "(", "\"annotations\"", ",", "[", "]", ")", ":", "\n", "                ", "cls_id", "=", "self", ".", "class_labels", "[", "self", ".", "categories", "[", "json_ann", "[", "\"category_id\"", "]", "]", "]", "\n", "image_id", "=", "json_ann", "[", "\"image_id\"", "]", "\n", "bbox", "=", "json_ann", "[", "\"bbox\"", "]", "\n", "\n", "if", "not", "image_id", "in", "bboxs", ":", "\n", "                    ", "bboxs", "[", "image_id", "]", "=", "[", "]", "\n", "", "bboxs", "[", "image_id", "]", ".", "append", "(", "(", "cls_id", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", ")", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Found %i bboxs\"", "%", "(", "sum", "(", "[", "len", "(", "bbox", ")", "for", "bbox", "in", "bboxs", ".", "values", "(", ")", "]", ")", ")", ")", "\n", "\n", "#collect images", "\n", "if", "data_type", "==", "\"test-dev2015\"", ":", "\n", "                ", "data_type", "=", "\"test2015\"", "\n", "\n", "", "for", "image", "in", "json_data", "[", "\"images\"", "]", ":", "\n", "                ", "fname", "=", "image", "[", "\"file_name\"", "]", "\n", "image_id", "=", "image", "[", "\"id\"", "]", "\n", "bbox_list", "=", "bboxs", ".", "get", "(", "image_id", ",", "[", "]", ")", "\n", "bbox_hist", "[", "min", "(", "len", "(", "bbox_list", ")", ",", "31", ")", "]", "+=", "1", "\n", "self", ".", "images", ".", "append", "(", "{", "\"fname\"", ":", "os", ".", "path", ".", "join", "(", "input_dir", ",", "data_type", ",", "fname", ")", ",", "\"bboxs\"", ":", "bbox_list", ",", "\"id\"", ":", "image_id", "}", ")", "\n", "\n", "", "", "print", "(", "\"BBox histogram (%):\"", ",", "[", "round", "(", "100.0", "*", "x", "/", "sum", "(", "bbox_hist", ")", ",", "1", ")", "for", "x", "in", "bbox_hist", "]", ")", "\n", "\n", "#setup image loader", "\n", "self", ".", "image_loader", "=", "ImageLoader", "(", "thread_num", ",", "is_training", ",", "format_params", ")", "\n", "\n", "#subset", "\n", "self", ".", "output_size", "=", "self", ".", "image_loader", ".", "crop", "\n", "self", ".", "images_per_subset", "=", "format_params", ".", "get", "(", "\"images_per_subset\"", ",", "10000", ")", "\n", "self", ".", "subset_total_size", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "subset_num", "=", "format_params", ".", "get", "(", "\"subset_num\"", ",", "sys", ".", "maxsize", ")", "\n", "self", ".", "subset_num", "=", "min", "(", "self", ".", "subset_num", ",", "int", "(", "math", ".", "ceil", "(", "self", ".", "subset_total_size", "/", "self", ".", "images_per_subset", ")", ")", ")", "\n", "self", ".", "subset_index", "=", "-", "1", "\n", "self", ".", "subset_size", "=", "self", ".", "images_per_subset", "\n", "\n", "self", ".", "bbox_only", "=", "format_params", ".", "get", "(", "\"bbox_only\"", ",", "False", ")", "\n", "\n", "#only use samples with bounding boxes", "\n", "if", "self", ".", "image_loader", ".", "is_training", "and", "self", ".", "bbox_only", ":", "\n", "            ", "images_bbox", "=", "[", "]", "\n", "for", "image", "in", "self", ".", "images", ":", "\n", "                ", "if", "len", "(", "image", "[", "\"bboxs\"", "]", ")", ">", "0", ":", "\n", "                    ", "images_bbox", ".", "append", "(", "image", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"Removed %i images without bboxs\"", "%", "(", "len", "(", "self", ".", "images", ")", "-", "len", "(", "images_bbox", ")", ")", ")", "\n", "self", ".", "images", "=", "images_bbox", "\n", "\n", "", "logging", ".", "info", "(", "\"Using MSCOCO dataset - size:\"", ",", "self", ".", "subset_total_size", ",", "\"subset_num\"", ",", "self", ".", "subset_num", ",", "\"images per subset:\"", ",", "self", ".", "subset_size", ",", "self", ".", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.mscoco.DatasetMSCOCO.export_detections": [[140, 170], ["mscoco.DatasetMSCOCO.categories.items", "dets.sort", "open", "json.dump", "max", "max", "max", "max", "results.append", "min", "min", "min", "min", "round", "round", "round", "round", "round"], "methods", ["None"], ["", "def", "export_detections", "(", "self", ",", "output_fname", ",", "detection_list", ")", ":", "\n", "\n", "\n", "        ", "label_cat_map", "=", "{", "}", "\n", "for", "index", ",", "name", "in", "self", ".", "categories", ".", "items", "(", ")", ":", "\n", "            ", "label_cat_map", "[", "self", ".", "class_labels", "[", "name", "]", "]", "=", "index", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "d", "in", "detection_list", ":", "\n", "            ", "image_id", "=", "d", "[", "\"meta\"", "]", "[", "\"image\"", "]", "[", "\"id\"", "]", "\n", "scale_x", ",", "scale_y", "=", "d", "[", "\"meta\"", "]", "[", "\"scale\"", "]", "\n", "offset_x", ",", "offset_y", "=", "d", "[", "\"meta\"", "]", "[", "\"offset\"", "]", "\n", "image_width", ",", "image_height", "=", "d", "[", "\"meta\"", "]", "[", "\"image_size\"", "]", "\n", "dets", "=", "d", "[", "\"detections\"", "]", "\n", "\n", "#export results", "\n", "dets", ".", "sort", "(", "key", "=", "lambda", "t", ":", "-", "t", "[", "0", "]", ")", "\n", "for", "pr", ",", "cls", ",", "bbox", "in", "dets", ":", "\n", "                ", "x0", "=", "max", "(", "min", "(", "(", "bbox", "[", "0", "]", "*", "self", ".", "output_size", "+", "offset_x", ")", "/", "scale_x", "+", "1", ",", "image_width", ")", ",", "1", ")", "\n", "y0", "=", "max", "(", "min", "(", "(", "bbox", "[", "1", "]", "*", "self", ".", "output_size", "+", "offset_y", ")", "/", "scale_y", "+", "1", ",", "image_height", ")", ",", "1", ")", "\n", "x1", "=", "max", "(", "min", "(", "(", "bbox", "[", "2", "]", "*", "self", ".", "output_size", "+", "offset_x", ")", "/", "scale_x", "+", "1", ",", "image_width", ")", ",", "1", ")", "\n", "y1", "=", "max", "(", "min", "(", "(", "bbox", "[", "3", "]", "*", "self", ".", "output_size", "+", "offset_y", ")", "/", "scale_y", "+", "1", ",", "image_height", ")", ",", "1", ")", "\n", "\n", "results", ".", "append", "(", "{", "\"image_id\"", ":", "image_id", ",", "\n", "\"category_id\"", ":", "label_cat_map", "[", "cls", "]", ",", "\n", "\"bbox\"", ":", "[", "round", "(", "x0", ",", "1", ")", ",", "round", "(", "y0", ",", "1", ")", ",", "round", "(", "x1", "-", "x0", ",", "1", ")", ",", "round", "(", "y1", "-", "y0", ",", "1", ")", "]", ",", "\n", "\"score\"", ":", "round", "(", "pr", ",", "6", ")", "}", ")", "\n", "\n", "", "", "with", "open", "(", "output_fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_class_labels": [[14, 22], ["dict", "os.listdir", "os.path.isdir", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "find_class_labels", "(", "src_dir", ")", ":", "\n", "        ", "labels", "=", "dict", "(", ")", "\n", "classes", "=", "os", ".", "listdir", "(", "src_dir", ")", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "c", ")", ")", "and", "not", "c", "in", "labels", ":", "\n", "                ", "labels", "[", "c", "]", "=", "len", "(", "labels", ")", "\n", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_paths": [[23, 32], ["os.walk", "paths.sort", "os.path.join", "fnmatch.fnmatch", "paths.append"], "methods", ["None"], ["", "def", "find_paths", "(", "directory", ",", "pattern", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "directory", ",", "topdown", "=", "False", ",", "followlinks", "=", "True", ")", ":", "\n", "            ", "for", "basename", "in", "files", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "basename", ")", "\n", "if", "fnmatch", ".", "fnmatch", "(", "filename", ",", "pattern", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "filename", ")", "\n", "", "", "", "paths", ".", "sort", "(", ")", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.load": [[34, 56], ["os.listdir", "basic.DatasetFromDir.data.sort", "denet.info", "basic.DatasetFromDir.find_class_labels", "basic.DatasetFromDir.find_paths", "denet.info", "os.path.join", "PIL.Image.open", "f.replace", "basic.DatasetFromDir.data.append", "str", "str", "PIL.Image.open.copy", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_class_labels", "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromDir.find_paths", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["", "def", "load", "(", "self", ",", "input_dir", ",", "ext", ",", "is_training", ",", "thread_num", ",", "class_labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "class_labels", "=", "class_labels", "\n", "\n", "#generate class labels", "\n", "if", "self", ".", "class_labels", "is", "None", ":", "\n", "            ", "self", ".", "class_labels", "=", "DatasetFromDir", ".", "find_class_labels", "(", "input_dir", ")", "\n", "\n", "#load images", "\n", "", "classes", "=", "os", ".", "listdir", "(", "input_dir", ")", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "cls", "=", "self", ".", "class_labels", "[", "c", "]", "\n", "images", "=", "DatasetFromDir", ".", "find_paths", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "c", ")", ",", "\"*.\"", "+", "ext", ")", "\n", "\n", "logging", ".", "info", "(", "\"Found class \"", "+", "c", "+", "\" (\"", "+", "str", "(", "cls", ")", "+", "\") with \"", "+", "str", "(", "len", "(", "images", ")", ")", "+", "\" images\"", ")", "\n", "for", "f", "in", "images", ":", "\n", "                ", "imfile", "=", "Image", ".", "open", "(", "f", ")", "\n", "basename", "=", "f", ".", "replace", "(", "input_dir", ",", "\"\"", ")", "\n", "self", ".", "data", ".", "append", "(", "(", "basename", ",", "imfile", ".", "copy", "(", ")", ",", "{", "\"image_class\"", ":", "cls", ",", "\"partial\"", ":", "False", "}", ")", ")", "\n", "\n", "#sort by class", "\n", "", "", "self", ".", "data", ".", "sort", "(", "key", "=", "lambda", "d", ":", "d", "[", "2", "]", "[", "\"image_class\"", "]", ")", "\n", "logging", ".", "info", "(", "\"Loaded \"", "+", "str", "(", "len", "(", "self", ")", ")", "+", "\" Samples\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.basic.DatasetFromArray.load": [[58, 79], ["numpy.load", "numpy.load", "range", "os.path.join", "os.path.join", "int", "int", "range", "basic.DatasetFromArray.data.append", "numpy.load.min", "numpy.load.max", "basic.DatasetFromArray.class_labels.update", "str", "numpy.array", "str", "len", "int"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update"], ["    ", "def", "load", "(", "self", ",", "src_prefix", ",", "ext", ",", "is_training", ",", "thread_num", ",", "class_labels", "=", "None", ")", ":", "\n", "\n", "        ", "data", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "src_prefix", ",", "\"_data.npy\"", ")", ")", "\n", "labels", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "src_prefix", ",", "\"_labels.npy\"", ")", ")", "\n", "\n", "if", "class_labels", "is", "None", ":", "\n", "            ", "label_min", "=", "int", "(", "labels", ".", "min", "(", ")", ")", "\n", "label_max", "=", "int", "(", "labels", ".", "max", "(", ")", ")", "\n", "self", ".", "class_labels", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "label_min", ",", "label_max", "+", "1", ")", ":", "\n", "                ", "self", ".", "class_labels", ".", "update", "(", "{", "str", "(", "i", ")", ":", "len", "(", "self", ".", "class_labels", ")", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "class_labels", "=", "class_labels", "\n", "\n", "", "self", ".", "data_type", "=", "\"array\"", "\n", "self", ".", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cls", "=", "self", ".", "class_labels", "[", "str", "(", "int", "(", "labels", "[", "i", "]", ")", ")", "]", "\n", "self", ".", "data", ".", "append", "(", "(", "data_fname", ",", "numpy", ".", "array", "(", "data", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "dtype", "=", "numpy", ".", "float32", ",", "copy", "=", "True", ")", ",", "{", "\"class\"", ":", "cls", ",", "\"partial\"", ":", "False", "}", ")", ")", "\n", "\n", "", "del", "data", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.__init__": [[15, 24], ["threading.Thread.__init__", "__init__.DatasetExportThread.start"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.run": [[25, 33], ["denet.info", "denet.info", "denet.Timer", "denet.Timer", "__init__.DatasetExportThread.data.load_from_subset", "denet.Timer.mark", "__init__.DatasetExportThread.data.export", "denet.Timer.mark", "denet.info", "denet.info", "denet.Timer.delta", "denet.Timer.delta"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.wait": [[34, 36], ["__init__.DatasetExportThread.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.get_export": [[37, 39], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.get_labels": [[40, 42], ["__init__.DatasetExportThread.data.get_labels"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.__init__": [[44, 57], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.copy": [[59, 79], ["type", "__init__.DatasetAbstract.get_data_type", "__init__.DatasetAbstract.get_data_type", "d.copy", "meta.copy", "numpy.copy", "meta.copy"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.load": [[81, 83], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.load_from_subset": [[85, 87], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save": [[89, 91], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save_symbolic": [[93, 95], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_subset_size": [[96, 101], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update": [[103, 140], ["numpy.zeros", "numpy.argmax", "enumerate", "numpy.fill_diagonal", "denet.info", "denet.info", "denet.info", "denet.info", "numpy.argmax", "enumerate", "numpy.sum", "numpy.sum", "float", "enumerate", "__init__.DatasetAbstract.get_class_num", "__init__.DatasetAbstract.get_class_num", "numpy.argmax", "pr.fill", "__init__.DatasetAbstract.partial_mode.split", "meta[].index", "max", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_class_num", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_class_num"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.__len__": [[143, 145], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_total_size": [[147, 149], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_class_num": [[150, 152], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels": [[153, 155], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_metas": [[156, 158], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type": [[160, 168], ["Exception", "len", "type", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_shape": [[170, 182], ["len", "Exception", "__init__.DatasetAbstract.get_data_type", "__init__.DatasetAbstract.get_data_type"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.split_folds": [[184, 190], ["enumerate", "__init__.DatasetAbstract.copy", "data_folds[].data.append", "range"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate": [[192, 196], ["__init__.DatasetAbstract.copy"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.shuffle": [[198, 203], ["random.shuffle", "Exception"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.set_image_mode": [[205, 211], ["__init__.DatasetAbstract.get_data_type", "new_data.append", "im.convert"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.add_border": [[213, 225], ["new_data.append", "__init__.DatasetAbstract.get_data_type", "PIL.Image.new", "numpy.zeros.paste", "__init__.DatasetAbstract.get_data_type", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize": [[227, 242], ["__init__.DatasetAbstract.get_data_type", "new_data.append", "__init__.DatasetAbstract.get_data_type", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "new_data.append", "im.resize", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.transform_sample": [[244, 278], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "__init__.DatasetAbstract.get_data_type", "ImageOps.mirror.transform", "ImageOps.mirror", "__init__.DatasetAbstract.get_data_type", "numpy.zeros_like", "scipy.ndimage.interpolation.affine_transform", "scipy.ndimage.interpolation.affine_transform", "scipy.ndimage.interpolation.affine_transform", "math.cos", "math.sin", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.transform", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.distort_affine": [[280, 325], ["len", "threading.Thread.__init__", "__init__.DatasetAbstract.data.transform_sample", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "AffineDistortWorker", "AffineDistortWorker.start", "active_workers.append", "AffineDistortWorker.join", "len", "len", "numpy.random.random_integers", "numpy.random.random_integers", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.random", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.transform_sample", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.transform": [[326, 330], ["__init__.DatasetAbstract.copy", "__init__.DatasetAbstract.apply_transform"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.augment_mirror": [[332, 337], ["__init__.DatasetAbstract.get_data_type", "__init__.DatasetAbstract.get_data_type", "im.transpose"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.set_data": [[339, 347], ["data_list.append", "meta.get"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export": [[349, 367], ["numpy.zeros", "range", "math.ceil", "data_meta.append", "len", "random.randint", "__init__.DatasetAbstract.get_data_type", "numpy.swapaxes", "numpy.swapaxes", "len", "__init__.DatasetAbstract.get_data_shape", "__init__.DatasetAbstract.get_data_shape", "__init__.DatasetAbstract.get_data_shape", "len", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_data_type", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.load": [[369, 388], ["DatasetFromDir.load", "DatasetImagenet", "DatasetMSCOCO", "DatasetPascalVOC", "DatasetFromArray", "DatasetFromDir"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], []], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "get_data_shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "3", ",", "self", ".", "output_size", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.copy": [[18, 29], ["super().copy"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["", "def", "copy", "(", "self", ",", "copy_data", "=", "True", ")", ":", "\n", "        ", "r", "=", "super", "(", ")", ".", "copy", "(", "copy_data", ")", "\n", "r", ".", "images", "=", "self", ".", "images", "\n", "r", ".", "scale", "=", "self", ".", "scale", "\n", "r", ".", "crop", "=", "self", ".", "crop", "\n", "r", ".", "is_training", "=", "self", ".", "is_training", "\n", "r", ".", "augment_resnet", "=", "self", ".", "augment_resnet", "\n", "r", ".", "augment_lenet", "=", "self", ".", "augment_lenet", "\n", "r", ".", "augment_mirror", "=", "self", ".", "augment_mirror", "\n", "r", ".", "augment_photometric", "=", "self", ".", "augment_photometric", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle": [[30, 32], ["random.shuffle"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle"], ["", "def", "shuffle", "(", "self", ",", "mode", "=", "\"random\"", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset": [[33, 44], ["min", "denet.info", "denet.info", "pascal_voc.DatasetPascalVOC.image_loader.load"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "def", "load_from_subset", "(", "self", ",", "subset", ")", ":", "\n", "\n", "# if self.subset_index == subset:", "\n", "#     return", "\n", "\n", "        ", "index_start", "=", "subset", "*", "self", ".", "subset_size", "\n", "index_end", "=", "min", "(", "(", "subset", "+", "1", ")", "*", "self", ".", "subset_size", ",", "self", ".", "subset_total_size", ")", "\n", "\n", "logging", ".", "info", "(", "\"Loading from subset %i / %i (%i threads, %i start, %i end)\"", "%", "(", "subset", ",", "self", ".", "subset_num", ",", "self", ".", "thread_num", ",", "index_start", ",", "index_end", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "image_loader", ".", "load", "(", "self", ".", "images", "[", "index_start", ":", "index_end", "]", ")", "\n", "self", ".", "subset_index", "=", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load": [[45, 141], ["denet.get_params_dict", "denet.get_params_dict", "denet.info", "denet.info", "pascal_voc.DatasetPascalVOC.images.sort", "denet.dataset.image_loader.ImageLoader", "denet.dataset.image_loader.ImageLoader", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "min", "len", "denet.get_params_dict.get", "min", "denet.info", "denet.info", "denet.info", "denet.info", "pascal_voc.DatasetPascalVOC.load.get_files"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "def", "load", "(", "self", ",", "input_dir", ",", "data_format", ",", "is_training", ",", "thread_num", ",", "class_labels", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "thread_num", "=", "thread_num", "\n", "\n", "#get arguments", "\n", "param_str", "=", "\",\"", ".", "join", "(", "data_format", ".", "split", "(", "\",\"", ")", "[", "1", ":", "]", ")", "\n", "format_params", "=", "common", ".", "get_params_dict", "(", "param_str", ")", "\n", "\n", "#Hard coded class labels", "\n", "self", ".", "class_labels", "=", "{", "\"aeroplane\"", ":", "0", ",", "\"bicycle\"", ":", "1", ",", "\"bird\"", ":", "2", ",", "\"boat\"", ":", "3", ",", "\"bottle\"", ":", "4", ",", "\"bus\"", ":", "5", ",", "\"car\"", ":", "6", ",", "\"cat\"", ":", "7", ",", "\"chair\"", ":", "8", ",", "\"cow\"", ":", "9", ",", "\"diningtable\"", ":", "10", ",", "\n", "\"dog\"", ":", "11", ",", "\"horse\"", ":", "12", ",", "\"motorbike\"", ":", "13", ",", "\"person\"", ":", "14", ",", "\"pottedplant\"", ":", "15", ",", "\"sheep\"", ":", "16", ",", "\"sofa\"", ":", "17", ",", "\"train\"", ":", "18", ",", "\"tvmonitor\"", ":", "19", "}", "\n", "\n", "#select datasets to include", "\n", "\n", "def", "get_files", "(", "data_set", ",", "image_set", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading pascal %s %s...\"", "%", "(", "data_set", ",", "image_set", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"%s/ImageSets/Main/%s.txt\"", "%", "(", "data_set", ",", "image_set", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "fnames", "=", "[", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"%s/JPEGImages/%s.jpg\"", "%", "(", "data_set", ",", "index", ".", "rstrip", "(", ")", ")", ")", "for", "index", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "fnames", "\n", "\n", "#VOC 2007", "\n", "", "files", "=", "[", "]", "\n", "param", "=", "[", "s", "for", "s", "in", "format_params", ".", "keys", "(", ")", "if", "s", ".", "startswith", "(", "\"2007\"", ")", "]", "\n", "param", "=", "param", "[", "0", "]", "if", "len", "(", "param", ")", ">", "0", "else", "\"\"", "\n", "if", "\"train\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2007\"", ",", "\"train\"", ")", "\n", "", "if", "\"val\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2007\"", ",", "\"val\"", ")", "\n", "", "if", "\"test\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2007\"", ",", "\"test\"", ")", "\n", "\n", "#VOC 2012", "\n", "", "param", "=", "[", "s", "for", "s", "in", "format_params", ".", "keys", "(", ")", "if", "s", ".", "startswith", "(", "\"2012\"", ")", "]", "\n", "param", "=", "param", "[", "0", "]", "if", "len", "(", "param", ")", ">", "0", "else", "\"\"", "\n", "if", "\"train\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2012\"", ",", "\"train\"", ")", "\n", "", "if", "\"val\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2012\"", ",", "\"val\"", ")", "\n", "", "if", "\"test\"", "in", "param", ":", "\n", "            ", "files", "+=", "get_files", "(", "\"VOC2012\"", ",", "\"test\"", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Finding images / metadata\"", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "for", "fname", "in", "files", ":", "\n", "\n", "            ", "bboxs", "=", "[", "]", "\n", "difficult", "=", "[", "]", "\n", "\n", "#load objects associated with image", "\n", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", ",", "\"Annotations\"", ")", "\n", "obj_fname", "=", "os", ".", "path", ".", "join", "(", "anno_dir", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "+", "\".xml\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "obj_fname", ")", ":", "\n", "                ", "obj_tree", "=", "xml", ".", "parse", "(", "obj_fname", ")", ".", "getroot", "(", ")", "\n", "for", "obj", "in", "obj_tree", ".", "iter", "(", "\"object\"", ")", ":", "\n", "                    ", "cls", "=", "self", ".", "class_labels", "[", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", "]", "\n", "\n", "diff", "=", "bool", "(", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", ">", "0", ")", "\n", "difficult", ".", "append", "(", "diff", ")", "\n", "\n", "#minus one due to MATLAB stupidity", "\n", "bndbox", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "min_x", "=", "int", "(", "bndbox", ".", "find", "(", "\"xmin\"", ")", ".", "text", ")", "-", "1", "\n", "min_y", "=", "int", "(", "bndbox", ".", "find", "(", "\"ymin\"", ")", ".", "text", ")", "-", "1", "\n", "max_x", "=", "int", "(", "bndbox", ".", "find", "(", "\"xmax\"", ")", ".", "text", ")", "-", "1", "\n", "max_y", "=", "int", "(", "bndbox", ".", "find", "(", "\"ymax\"", ")", ".", "text", ")", "-", "1", "\n", "bboxs", ".", "append", "(", "(", "cls", ",", "(", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", ")", ")", ")", "\n", "\n", "", "", "elif", "is_training", ":", "\n", "                ", "raise", "Exception", "(", "\"Could not find annotations for training data!\"", ")", "\n", "\n", "", "self", ".", "images", ".", "append", "(", "{", "\"fname\"", ":", "fname", ",", "\"bboxs\"", ":", "bboxs", ",", "\"difficult\"", ":", "difficult", "}", ")", "\n", "\n", "#sort images initially", "\n", "", "self", ".", "images", ".", "sort", "(", "key", "=", "lambda", "im", ":", "im", "[", "\"fname\"", "]", ")", "\n", "self", ".", "image_loader", "=", "ImageLoader", "(", "thread_num", ",", "is_training", ",", "format_params", ")", "\n", "# self.image_loader.rgb_mean = numpy.array([0.41, 0.46, 0.48], dtype=numpy.float32)", "\n", "# self.image_loader.rgb_std = numpy.array([1,1,1], dtype=numpy.float32)", "\n", "\n", "#from Imagenet (natural image set = should have similar values)", "\n", "self", ".", "image_loader", ".", "rgb_mean", "=", "numpy", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_std", "=", "numpy", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_eigen_val", "=", "numpy", ".", "array", "(", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "self", ".", "image_loader", ".", "rgb_eigen_vec", "=", "numpy", ".", "array", "(", "[", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "\n", "#subset", "\n", "self", ".", "output_size", "=", "self", ".", "image_loader", ".", "crop", "\n", "self", ".", "subset_size", "=", "min", "(", "format_params", ".", "get", "(", "\"images_per_subset\"", ",", "10000", ")", ",", "len", "(", "self", ".", "images", ")", ")", "\n", "self", ".", "subset_total_size", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "subset_num", "=", "format_params", ".", "get", "(", "\"subset_num\"", ",", "sys", ".", "maxsize", ")", "\n", "self", ".", "subset_num", "=", "min", "(", "self", ".", "subset_num", ",", "int", "(", "math", ".", "ceil", "(", "self", ".", "subset_total_size", "/", "self", ".", "subset_size", ")", ")", ")", "\n", "self", ".", "subset_index", "=", "-", "1", "\n", "\n", "logging", ".", "info", "(", "\"Using Pascal VOC dataset - size:\"", ",", "self", ".", "subset_total_size", ",", "\"subset_num\"", ",", "self", ".", "subset_num", ",", "\"images per subset:\"", ",", "self", ".", "subset_size", ",", "self", ".", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.export_detections": [[143, 168], ["enumerate", "output.keys", "os.path.join", "os.path.splitext", "max", "max", "max", "max", "output[].append", "open", "os.path.basename", "min", "min", "min", "min", "f.write", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "export_detections", "(", "output_dir", ",", "detections", ",", "width", ",", "height", ",", "class_labels_inv", ")", ":", "\n", "\n", "        ", "output", "=", "{", "}", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "detections", ")", ":", "\n", "\n", "            ", "meta", "=", "r", "[", "\"meta\"", "]", "\n", "image_id", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "meta", "[", "\"image\"", "]", "[", "\"fname\"", "]", ")", ")", "[", "0", "]", "\n", "scale_x", ",", "scale_y", "=", "meta", "[", "\"scale\"", "]", "\n", "offset_x", ",", "offset_y", "=", "meta", "[", "\"offset\"", "]", "\n", "image_width", ",", "image_height", "=", "meta", "[", "\"image_size\"", "]", "\n", "\n", "for", "pr", ",", "cls", ",", "bbox", "in", "r", "[", "\"detections\"", "]", ":", "\n", "                ", "x0", "=", "max", "(", "min", "(", "int", "(", "(", "bbox", "[", "0", "]", "*", "width", "+", "offset_x", ")", "/", "scale_x", ")", "+", "1", ",", "image_width", ")", ",", "1", ")", "\n", "y0", "=", "max", "(", "min", "(", "int", "(", "(", "bbox", "[", "1", "]", "*", "height", "+", "offset_y", ")", "/", "scale_y", ")", "+", "1", ",", "image_height", ")", ",", "1", ")", "\n", "x1", "=", "max", "(", "min", "(", "int", "(", "(", "bbox", "[", "2", "]", "*", "width", "+", "offset_x", ")", "/", "scale_x", ")", "+", "1", ",", "image_width", ")", ",", "1", ")", "\n", "y1", "=", "max", "(", "min", "(", "int", "(", "(", "bbox", "[", "3", "]", "*", "height", "+", "offset_y", ")", "/", "scale_y", ")", "+", "1", ",", "image_height", ")", ",", "1", ")", "\n", "if", "cls", "not", "in", "output", ":", "\n", "                    ", "output", "[", "cls", "]", "=", "[", "]", "\n", "", "output", "[", "cls", "]", ".", "append", "(", "(", "image_id", ",", "pr", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "\n", "", "", "for", "cls", "in", "output", ".", "keys", "(", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"comp4_det_test_%s.txt\"", "%", "class_labels_inv", "[", "cls", "]", ")", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "d", "in", "output", "[", "cls", "]", ":", "\n", "                    ", "f", ".", "write", "(", "\"%s %0.6f %.6f %.6f %.6f %.6f\\n\"", "%", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_precision": [[170, 266], ["denet.info", "denet.info", "enumerate", "denet.warning", "denet.warning", "denet.info", "denet.info", "range", "denet.info", "denet.info", "zip", "zip", "dts.sort", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "numpy.linspace", "denet.info", "denet.info", "range", "range", "dts_cls[].append", "gts_cls[].append", "len", "enumerate", "len", "len", "n.any", "prec[].max", "denet.overlap_iou", "denet.overlap_iou", "len", "len", "denet.overlap_iou", "denet.overlap_iou", "gt_found.append"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou"], ["", "", "", "", "def", "get_precision", "(", "detections", ",", "overlap_threshold", "=", "0.5", ")", ":", "\n", "\n", "#inverse class labelling", "\n", "        ", "class_labels_inv", "=", "{", "0", ":", "\"aeroplane\"", ",", "1", ":", "\"bicycle\"", ",", "2", ":", "\"bird\"", ",", "3", ":", "\"boat\"", ",", "4", ":", "\"bottle\"", ",", "5", ":", "\"bus\"", ",", "6", ":", "\"car\"", ",", "7", ":", "\"cat\"", ",", "8", ":", "\"chair\"", ",", "9", ":", "\"cow\"", ",", "10", ":", "\"diningtable\"", ",", "\n", "11", ":", "\"dog\"", ",", "12", ":", "\"horse\"", ",", "13", ":", "\"motorbike\"", ",", "14", ":", "\"person\"", ",", "15", ":", "\"pottedplant\"", ",", "16", ":", "\"sheep\"", ",", "17", ":", "\"sofa\"", ",", "18", ":", "\"train\"", ",", "19", ":", "\"tvmonitor\"", "}", "\n", "\n", "coverage", "=", "0", "\n", "coverage_total", "=", "0", "\n", "for", "r", "in", "detections", ":", "\n", "            ", "for", "cls_a", ",", "bbox_a", "in", "zip", "(", "r", "[", "\"meta\"", "]", "[", "\"class\"", "]", ",", "r", "[", "\"meta\"", "]", "[", "\"bbox\"", "]", ")", ":", "\n", "                ", "coverage_total", "+=", "1", "\n", "for", "_", ",", "cls_b", ",", "bbox_b", "in", "r", "[", "\"detections\"", "]", ":", "\n", "                    ", "if", "cls_a", "==", "cls_b", "and", "common", ".", "overlap_iou", "(", "bbox_a", ",", "bbox_b", ")", ">", "overlap_threshold", ":", "\n", "                        ", "coverage", "+=", "1", "\n", "break", "\n", "\n", "", "", "", "", "logging", ".", "info", "(", "\"coverage: %.2f%% (%i,%i)\"", "%", "(", "100.0", "*", "coverage", "/", "coverage_total", ",", "coverage", ",", "coverage_total", ")", ")", "\n", "\n", "#collect all detections and groundtruth detections into classes", "\n", "gts_cls", "=", "[", "[", "]", "for", "_", "in", "range", "(", "20", ")", "]", "\n", "dts_cls", "=", "[", "[", "]", "for", "_", "in", "range", "(", "20", ")", "]", "\n", "for", "image_id", ",", "r", "in", "enumerate", "(", "detections", ")", ":", "\n", "            ", "for", "pr", ",", "cls", ",", "bbox", "in", "r", "[", "\"detections\"", "]", ":", "\n", "                ", "dts_cls", "[", "cls", "]", ".", "append", "(", "(", "image_id", ",", "pr", ",", "bbox", ")", ")", "\n", "\n", "", "for", "cls", ",", "bbox", ",", "difficult", "in", "zip", "(", "r", "[", "\"meta\"", "]", "[", "\"class\"", "]", ",", "r", "[", "\"meta\"", "]", "[", "\"bbox\"", "]", ",", "r", "[", "\"meta\"", "]", "[", "\"image\"", "]", "[", "\"difficult\"", "]", ")", ":", "\n", "                ", "gts_cls", "[", "cls", "]", ".", "append", "(", "(", "image_id", ",", "difficult", ",", "bbox", ")", ")", "\n", "\n", "", "", "logging", ".", "warning", "(", "\"WARNING: does not obtain exact results relative to VOCcode implementation!\"", ")", "\n", "logging", ".", "info", "(", "\"Using overlap threshold: %.2f\"", "%", "overlap_threshold", ")", "\n", "mean_ap", "=", "0", "\n", "for", "cls", "in", "range", "(", "20", ")", ":", "\n", "            ", "gts", "=", "gts_cls", "[", "cls", "]", "\n", "dts", "=", "dts_cls", "[", "cls", "]", "\n", "\n", "non_difficult_num", "=", "0", "\n", "for", "_", ",", "diff", ",", "_", "in", "gts", ":", "\n", "                ", "if", "not", "diff", ":", "\n", "                    ", "non_difficult_num", "+=", "1", "\n", "\n", "#sort by confidence", "\n", "", "", "dts", ".", "sort", "(", "key", "=", "lambda", "d", ":", "-", "d", "[", "1", "]", ")", "\n", "tp", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "dts", ")", ",", ")", ",", "dtype", "=", "numpy", ".", "int64", ")", "\n", "fp", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "dts", ")", ",", ")", ",", "dtype", "=", "numpy", ".", "int64", ")", "\n", "gt_found", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "len", "(", "dts", ")", ")", ":", "\n", "\n", "                ", "image_id", ",", "pr", ",", "bbox", "=", "dts", "[", "d", "]", "\n", "overlap_max", "=", "0", "\n", "overlap_index", "=", "0", "\n", "for", "gt_i", ",", "gt", "in", "enumerate", "(", "gts", ")", ":", "\n", "                    ", "gt_image_id", ",", "_", ",", "gt_bbox", "=", "gt", "\n", "if", "gt_image_id", "==", "image_id", ":", "\n", "                        ", "overlap", "=", "common", ".", "overlap_iou", "(", "bbox", ",", "gt_bbox", ")", "\n", "if", "overlap", ">", "overlap_max", ":", "\n", "                            ", "overlap_max", "=", "overlap", "\n", "overlap_index", "=", "gt_i", "\n", "\n", "", "", "", "if", "overlap_max", ">=", "overlap_threshold", ":", "\n", "                    ", "if", "not", "gts", "[", "overlap_index", "]", "[", "1", "]", ":", "\n", "                        ", "if", "overlap_index", "in", "gt_found", ":", "\n", "                            ", "fp", "[", "d", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "gt_found", ".", "append", "(", "overlap_index", ")", "\n", "tp", "[", "d", "]", "=", "1", "\n", "", "", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1", "\n", "\n", "", "", "tp", "=", "numpy", ".", "cumsum", "(", "tp", ")", "\n", "fp", "=", "numpy", ".", "cumsum", "(", "fp", ")", "\n", "recall", "=", "tp", "/", "non_difficult_num", "\n", "prec", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "\n", "#VOC 2007 algorithm!", "\n", "ap", "=", "0", "\n", "for", "t", "in", "numpy", ".", "linspace", "(", "0.0", ",", "1.0", ",", "11", ")", ":", "\n", "                ", "n", "=", "(", "recall", ">=", "t", ")", "\n", "p", "=", "prec", "[", "n", "]", ".", "max", "(", ")", "if", "n", ".", "any", "(", ")", "else", "0.0", "\n", "ap", "+=", "p", "/", "11", "\n", "\n", "# #fancy pascal VOC 2012 AP calculation", "\n", "# mrec = numpy.array([0.0] + recall.tolist() + [1.0])", "\n", "# mpre = numpy.array([0] + prec.tolist() + [0.0])", "\n", "# for i in range(mpre.shape[0] - 2, -1, -1):", "\n", "#     mpre[i] = max(mpre[i], mpre[i+1])", "\n", "\n", "# ap=0", "\n", "# for i in range(mrec.shape[0]-1):", "\n", "#     if mrec[i+1] != mrec[i]:", "\n", "#         ap += (mrec[i+1] - mrec[i]) * mpre[i+1]", "\n", "\n", "", "mean_ap", "+=", "ap", "\n", "logging", ".", "info", "(", "\"%s - AP: %.4f (%i detections,  %i groundtruth, %i non difficult)\"", "%", "(", "class_labels_inv", "[", "cls", "]", ",", "ap", ",", "len", "(", "dts", ")", ",", "len", "(", "gts", ")", ",", "non_difficult_num", ")", ")", "\n", "\n", "", "mean_ap", "/=", "20", "\n", "logging", ".", "info", "(", "\"Mean AP: %.4f\"", "%", "mean_ap", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.run_train_epoch": [[25, 169], ["denet.info", "random.seed", "train_data.shuffle", "denet.ModelUpdate", "shared.ModelUpdate.import_updates", "update_client.get_subset_next", "denet.info", "denet.dataset.DatasetExportThread", "denet.Timer", "denet.Timer", "update_client.sync", "model_cnn.save_to_file", "worker.set_epoch", "common.Timer.reset", "denet.dataset.DatasetExportThread.wait", "denet.dataset.DatasetExportThread.get_export", "denet.debug", "update_client.get_subset_next", "denet.info", "common.Timer.reset", "denet.info", "shared.ModelUpdate.export_updates", "worker.learn_rate.get_lock", "len", "common.Timer.current", "denet.warning", "denet.dataset.DatasetExportThread", "time.time", "time.time", "time.time", "time.time", "shared.ModelUpdate.set_mean_init", "shared.ModelUpdate.set_mean_finish", "len", "int", "denet.verbose", "denet.info", "model_cnn.save_to_file", "common.Timer.reset", "len", "len", "worker.wait", "worker.model_write", "worker.train_begin", "worker.train_end", "worker.model_read", "worker.wait", "range", "threading.Thread", "threading.Thread.start", "threads.append", "threading.Thread.join", "proc_ts.append", "shared.ModelUpdate.set_mean_update", "common.Timer.current", "common.Timer.current", "min", "worker.train_step", "worker.wait", "int", "worker.cost.get_lock", "len", "common.Timer.current", "len", "worker_indexs.append", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_updates", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.set_epoch", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.reset", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.get_export", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.reset", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_updates", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_init", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_finish", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.reset", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.model_write", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_begin", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_end", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.model_read", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_update", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_step", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current"], ["def", "run_train_epoch", "(", "args", ",", "update_client", ",", "workers", ",", "model", ",", "train_data", ",", "learn_rate", ")", ":", "\n", "\n", "    ", "import", "model_cnn", "\n", "\n", "logging", ".", "info", "(", "\"Perform train...\"", ")", "\n", "batch_size_factor", "=", "args", ".", "batch_size_factor", "\n", "output_prefix", "=", "args", ".", "output_prefix", "\n", "model_dims", "=", "args", ".", "model_dims", "\n", "model_save_dt", "=", "args", ".", "model_save_dt", "*", "60", "\n", "\n", "#update learning rates:", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "with", "worker", ".", "learn_rate", ".", "get_lock", "(", ")", ":", "\n", "            ", "worker", ".", "learn_rate", ".", "value", "=", "learn_rate", "\n", "\n", "#randomly shuffle data before each epoch, set seed to ensure each node has same data order", "\n", "", "", "random", ".", "seed", "(", "args", ".", "seed", "+", "update_client", ".", "epoch", ")", "\n", "train_data", ".", "shuffle", "(", ")", "\n", "\n", "#perform initial sync so that all nodes have the same model", "\n", "model_update", "=", "shared", ".", "ModelUpdate", "(", "model_dims", ")", "\n", "model_update", ".", "import_updates", "(", "model", ")", "\n", "# update_client.sync(model_update, workers, initial=True)", "\n", "\n", "#get subset next", "\n", "subset_next", "=", "update_client", ".", "get_subset_next", "(", ")", "\n", "\n", "#start export of data", "\n", "batch_size", "=", "len", "(", "workers", ")", "*", "model", ".", "batch_size", "*", "batch_size_factor", "\n", "logging", ".", "info", "(", "\"SGD batch size is %ix%ix%i = %i\"", "%", "(", "batch_size_factor", ",", "len", "(", "workers", ")", ",", "model", ".", "batch_size", ",", "batch_size", ")", ")", "\n", "export_thread", "=", "DatasetExportThread", "(", "model", ",", "train_data", ",", "subset_next", ",", "batch_size", ",", "True", ")", "\n", "\n", "#start processing", "\n", "total_cost", "=", "0", "\n", "total_it", "=", "0", "\n", "subset_current", "=", "subset_next", "\n", "epoch_current", "=", "update_client", ".", "epoch", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "set_epoch", "(", "epoch_current", ")", "\n", "\n", "", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "timer_save", "=", "common", ".", "Timer", "(", ")", "\n", "while", "subset_next", ">=", "0", ":", "\n", "\n", "#wait until export is ready", "\n", "        ", "timer", ".", "reset", "(", ")", "\n", "export_thread", ".", "wait", "(", ")", "\n", "data_x", ",", "data_y", ",", "data_size", "=", "export_thread", ".", "get_export", "(", ")", "\n", "subset_current", "=", "subset_next", "\n", "del", "export_thread", "\n", "if", "timer", ".", "current", "(", ")", ">", "1", ":", "\n", "            ", "logging", ".", "warning", "(", "\"Warning: needed an additional %.1f seconds for dataset export\"", "%", "timer", ".", "current", "(", ")", ")", "\n", "\n", "#print training classes for checking random seed etc", "\n", "", "logging", ".", "debug", "(", "\"Sample Metas: \"", ",", "data_y", "[", "0", ":", "min", "(", "3", ",", "len", "(", "data_y", ")", ")", "]", ")", "\n", "\n", "#start exporting next subset", "\n", "subset_next", "=", "update_client", ".", "get_subset_next", "(", ")", "\n", "if", "subset_next", ">=", "0", ":", "\n", "            ", "export_thread", "=", "DatasetExportThread", "(", "model", ",", "train_data", ",", "subset_next", ",", "batch_size", ",", "True", ")", "\n", "\n", "# #store initial model before changes", "\n", "# model_update_delta = model_update.copy()", "\n", "\n", "", "logging", ".", "info", "(", "\"Evaluating training function\"", ")", "\n", "timer", ".", "reset", "(", ")", "\n", "batch_num", "=", "data_x", ".", "shape", "[", "0", "]", "//", "model", ".", "batch_size", "\n", "it_num", "=", "batch_num", "//", "(", "len", "(", "workers", ")", "*", "batch_size_factor", ")", "\n", "index", "=", "0", "\n", "subset_cost", "=", "0", "\n", "\n", "while", "(", "index", "<", "batch_num", ")", ":", "\n", "\n", "            ", "total_ts", "=", "time", ".", "time", "(", ")", "\n", "\n", "def", "train_worker_thread", "(", "worker", ",", "indexs", ")", ":", "\n", "                ", "worker", ".", "wait", "(", ")", "\n", "worker", ".", "model_write", "(", "model_update", ")", "\n", "worker", ".", "train_begin", "(", ")", "\n", "for", "i", "in", "indexs", ":", "\n", "                    ", "dx", "=", "data_x", "[", "i", "*", "model", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "model", ".", "batch_size", "]", "\n", "dy", "=", "data_y", "[", "i", "*", "model", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "model", ".", "batch_size", "]", "\n", "worker", ".", "train_step", "(", "dx", ",", "dy", ")", "\n", "worker", ".", "wait", "(", ")", "\n", "", "worker", ".", "train_end", "(", ")", "\n", "worker", ".", "model_read", "(", ")", "\n", "worker", ".", "wait", "(", ")", "\n", "\n", "", "threads", "=", "[", "]", "\n", "for", "worker", "in", "workers", ":", "\n", "                ", "worker_indexs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "batch_size_factor", ")", ":", "\n", "                    ", "if", "index", "<", "batch_num", ":", "\n", "                        ", "worker_indexs", ".", "append", "(", "index", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "t", "=", "threading", ".", "Thread", "(", "target", "=", "train_worker_thread", ",", "args", "=", "(", "worker", ",", "worker_indexs", ")", ")", "\n", "t", ".", "start", "(", ")", "\n", "threads", ".", "append", "(", "(", "t", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "", "proc_ts", "=", "[", "]", "\n", "for", "t", ",", "start_ts", "in", "threads", ":", "\n", "                ", "t", ".", "join", "(", ")", "\n", "proc_ts", ".", "append", "(", "int", "(", "1000", "*", "(", "time", ".", "time", "(", ")", "-", "start_ts", ")", ")", ")", "\n", "\n", "#average models between GPUS and print batch info", "\n", "", "combine_ts", "=", "time", ".", "time", "(", ")", "\n", "batch_cost", "=", "0", "\n", "model_update", ".", "set_mean_init", "(", ")", "\n", "for", "worker", "in", "workers", ":", "\n", "                ", "model_update", ".", "set_mean_update", "(", "worker", ".", "model_update", ")", "\n", "with", "worker", ".", "cost", ".", "get_lock", "(", ")", ":", "\n", "                    ", "batch_cost", "+=", "worker", ".", "cost", ".", "value", "\n", "", "", "model_update", ".", "set_mean_finish", "(", ")", "\n", "batch_cost", "/=", "len", "(", "workers", ")", "\n", "subset_cost", "+=", "batch_cost", "\n", "it_index", "=", "index", "//", "(", "len", "(", "workers", ")", "*", "batch_size_factor", ")", "\n", "combine_ts", "=", "int", "(", "1000", "*", "(", "time", ".", "time", "(", ")", "-", "combine_ts", ")", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Processing times (ms):\"", ",", "proc_ts", ",", "\", Combine time: %i ms\"", "%", "combine_ts", ")", "\n", "logging", ".", "info", "(", "\"Subset %i/%i, Batch It %i/%i\"", "%", "(", "subset_current", "+", "1", ",", "train_data", ".", "subset_num", ",", "it_index", ",", "it_num", ")", ",", "\"- Cost:\"", ",", "batch_cost", ",", "\"Time: %i ms\"", "%", "(", "1000", "*", "(", "time", ".", "time", "(", ")", "-", "total_ts", ")", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Training subset %i took %0.1f sec, mean cost:\"", "%", "(", "subset_current", "+", "1", ",", "timer", ".", "current", "(", ")", ")", ",", "subset_cost", "/", "it_num", ")", "\n", "total_it", "+=", "it_num", "\n", "total_cost", "+=", "subset_cost", "\n", "\n", "#update with server (if one exists)", "\n", "model_update", ".", "export_updates", "(", "model", ")", "\n", "# model_update_delta.set_delta(model_update)", "\n", "# update_client.update(model_update_delta, model_update, workers)", "\n", "\n", "#save intermediate models", "\n", "if", "timer_save", ".", "current", "(", ")", ">", "model_save_dt", "and", "model_save_dt", ">", "0", ":", "\n", "            ", "model_cnn", ".", "save_to_file", "(", "model", ",", "output_prefix", "+", "\"_epoch%03i_subset%03i.mdl.gz\"", "%", "(", "epoch_current", ",", "subset_current", "+", "1", ")", ")", "\n", "timer_save", ".", "reset", "(", ")", "\n", "\n", "\n", "#perform final sync so that all nodes have the same model", "\n", "", "", "update_client", ".", "sync", "(", "model_update", ",", "workers", ")", "\n", "\n", "#save final models", "\n", "model_cnn", ".", "save_to_file", "(", "model", ",", "output_prefix", "+", "\"_epoch%03i_final.mdl.gz\"", "%", "(", "epoch_current", ")", ")", "\n", "\n", "return", "(", "total_cost", "/", "total_it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.compute_error": [[171, 235], ["denet.info", "denet.dataset.DatasetExportThread", "range", "range", "denet.dataset.DatasetExportThread.wait", "denet.dataset.DatasetExportThread.get_export", "denet.dataset.DatasetExportThread.get_labels", "denet.info", "numpy.zeros", "numpy.argmax", "range", "sum", "cls_errors.append", "len", "denet.info", "denet.dataset.DatasetExportThread", "sum", "len", "enumerate", "time.sleep", "time.sleep", "len", "worker.predict", "active_workers.append", "model.get_probability_shape", "denet.verbose", "worker.get_active", "len", "worker.data_y.get_array"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetExportThread.get_export", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.predict", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.get_active", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "compute_error", "(", "workers", ",", "model", ",", "test_data", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"Perform inference...\"", ")", "\n", "class_errors", "=", "[", "0", "]", "*", "model", ".", "class_num", "\n", "class_samples", "=", "[", "0", "]", "*", "model", ".", "class_num", "\n", "\n", "#export first data", "\n", "export_thread", "=", "DatasetExportThread", "(", "model", ",", "test_data", ",", "0", ",", "len", "(", "workers", ")", "*", "model", ".", "batch_size", ",", "False", ")", "\n", "for", "subset", "in", "range", "(", "test_data", ".", "subset_num", ")", ":", "\n", "\n", "        ", "export_thread", ".", "wait", "(", ")", "\n", "data_x", ",", "data_y", ",", "data_size", "=", "export_thread", ".", "get_export", "(", ")", "\n", "truth_labels", "=", "export_thread", ".", "get_labels", "(", ")", "\n", "del", "export_thread", "\n", "\n", "#start exporting next subset", "\n", "if", "(", "subset", "+", "1", ")", "<", "test_data", ".", "subset_num", ":", "\n", "            ", "logging", ".", "info", "(", "\"Starting next subset export\"", ")", "\n", "export_thread", "=", "DatasetExportThread", "(", "model", ",", "test_data", ",", "subset", "+", "1", ",", "len", "(", "workers", ")", "*", "model", ".", "batch_size", ",", "False", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Evaluating predict function (%i samples)\"", "%", "data_size", ")", "\n", "predict_y", "=", "numpy", ".", "zeros", "(", "shape", "=", "(", "data_x", ".", "shape", "[", "0", "]", ",", "model", ".", "get_probability_shape", "(", ")", "[", "1", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "nbatch", "=", "data_x", ".", "shape", "[", "0", "]", "//", "model", ".", "batch_size", "\n", "index", "=", "0", "\n", "while", "(", "index", "<", "nbatch", ")", ":", "\n", "\n", "#use group of workers to process multi gpu batch", "\n", "            ", "active_workers", "=", "[", "]", "\n", "for", "worker", "in", "workers", ":", "\n", "                ", "if", "index", "<", "nbatch", ":", "\n", "                    ", "dx", "=", "data_x", "[", "index", "*", "model", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "model", ".", "batch_size", "]", ";", "\n", "worker", ".", "predict", "(", "dx", ")", "\n", "active_workers", ".", "append", "(", "worker", ")", "\n", "index", "+=", "1", "\n", "\n", "#as workers finish combine resulting models", "\n", "", "", "done", "=", "[", "False", "]", "*", "len", "(", "active_workers", ")", "\n", "while", "(", "False", "in", "done", ")", ":", "\n", "                ", "for", "i", ",", "worker", "in", "enumerate", "(", "active_workers", ")", ":", "\n", "                    ", "if", "done", "[", "i", "]", "==", "False", "and", "worker", ".", "get_active", "(", ")", "==", "0", ":", "\n", "                        ", "done", "[", "i", "]", "=", "True", "\n", "worker_index", "=", "index", "-", "len", "(", "active_workers", ")", "+", "i", "\n", "logging", ".", "verbose", "(", "\"Adding predictions %i/%i\"", "%", "(", "worker_index", ",", "nbatch", ")", ")", "\n", "with", "worker", ".", "data_y", ".", "lock", ":", "\n", "                            ", "predict_y", "[", "worker_index", "*", "model", ".", "batch_size", ":", "(", "worker_index", "+", "1", ")", "*", "model", ".", "batch_size", ",", "...", "]", "=", "worker", ".", "data_y", ".", "get_array", "(", ")", "[", "...", "]", "\n", "\n", "", "", "", "time", ".", "sleep", "(", "0.0001", ")", "\n", "\n", "", "", "predict_y", "=", "predict_y", "[", "0", ":", "data_size", ",", "...", "]", "\n", "predict_labels", "=", "numpy", ".", "argmax", "(", "predict_y", ",", "axis", "=", "1", ")", "\n", "#print(\"sizes:\", truth_labels.shape, data_size)", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "            ", "class_samples", "[", "truth_labels", "[", "i", "]", "]", "+=", "1", "\n", "if", "predict_labels", "[", "i", "]", "!=", "truth_labels", "[", "i", "]", ":", "\n", "                ", "class_errors", "[", "truth_labels", "[", "i", "]", "]", "+=", "1", "\n", "\n", "#compute errors", "\n", "", "", "", "error", "=", "100.0", "*", "sum", "(", "class_errors", ")", "/", "sum", "(", "class_samples", ")", "\n", "cls_errors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "model", ".", "class_num", ")", ":", "\n", "        ", "x", "=", "100.0", "*", "class_errors", "[", "i", "]", "/", "class_samples", "[", "i", "]", "if", "class_samples", "[", "i", "]", ">", "0", "else", "100.0", "\n", "cls_errors", ".", "append", "(", "(", "i", ",", "x", ",", "class_samples", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "(", "error", ",", "cls_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.save_results": [[236, 241], ["open", "denet.info", "denet.info"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "def", "save_results", "(", "fname", ",", "error", ",", "class_errors", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "logging", ".", "info", "(", "\"Overall Error=%.2f%%\"", "%", "(", "error", ")", ",", "file", "=", "f", ")", "\n", "for", "d", "in", "class_errors", ":", "\n", "            ", "logging", ".", "info", "(", "\"Class %i=%.2f%% (%i samples)\"", "%", "(", "d", "[", "0", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", "*", "d", "[", "1", "]", "/", "100", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.load_restart_args": [[242, 269], ["denet.info", "denet.find_files", "os.path.basename", "v[].split", "denet.info", "os.path.isfile", "Exception", "open", "pickle.load", "os.path.dirname", "len", "Exception", "int", "int", "int", "v[].split.find"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_files", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "", "", "def", "load_restart_args", "(", "args_fname", ",", "args", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args_fname", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Cannot find arguments file:\"", "+", "args_fname", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Loading arguments from:\"", ",", "args_fname", ")", "\n", "with", "open", "(", "args_fname", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "args", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "#search for models", "\n", "", "model_fnames", "=", "common", ".", "find_files", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "output_prefix", ")", ",", "\"*_epoch*.mdl.gz\"", ")", "\n", "if", "len", "(", "model_fnames", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "\"Could not find any intermediate models to continue training from!\"", ")", "\n", "\n", "", "v", "=", "os", ".", "path", ".", "basename", "(", "model_fnames", "[", "-", "1", "]", ")", "\n", "v", "=", "v", "[", ":", "v", ".", "find", "(", "\".\"", ")", "]", ".", "split", "(", "\"_\"", ")", "\n", "\n", "if", "v", "[", "-", "1", "]", "==", "\"final\"", ":", "\n", "        ", "args", ".", "epoch_start", "=", "int", "(", "v", "[", "-", "2", "]", "[", "5", ":", "]", ")", "+", "1", "\n", "args", ".", "subset_start", "=", "0", "\n", "", "else", ":", "\n", "        ", "args", ".", "epoch_start", "=", "int", "(", "v", "[", "-", "2", "]", "[", "5", ":", "]", ")", "\n", "args", ".", "subset_start", "=", "int", "(", "v", "[", "-", "1", "]", "[", "6", ":", "]", ")", "+", "1", "\n", "\n", "", "args", ".", "model", "=", "model_fnames", "[", "-", "1", "]", "\n", "logging", ".", "info", "(", "\"Continuing training with model:\"", ",", "args", ".", "model", ",", "\"epoch:\"", ",", "args", ".", "epoch_start", ",", "\"subset:\"", ",", "args", ".", "subset_start", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.main": [[271, 439], ["argparse.ArgumentParser", "denet.add_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "denet.init", "random.seed", "numpy.random.seed", "denet.info", "denet.load", "dataset.load.get_data_shape", "dataset.load.get_class_num", "denet.info", "denet.info", "model_cnn.initialize", "model_cnn.initialize.build_train_func", "range", "range", "denet.info", "train_multi.load_restart_args", "denet.info", "os.path.isfile", "denet.info", "model_cnn.initialize", "model_cnn.initialize.build_train_func", "denet.ModelUpdate.save_dims", "denet.info", "exit", "denet.multi.worker.WorkerProcess", "dataset.load.augment_mirror", "denet.info", "denet.load", "denet.info", "bool", "bool", "denet.info", "denet.multi.update_client.UpdateClient", "denet.multi.update_client.UpdateClient", "denet.info", "denet.info", "train_multi.run_train_epoch", "denet.info", "open", "pickle.dump", "MPI.COMM_WORLD.Get_rank", "float", "denet.multi.update_server.UpdateServer", "sys.exit", "str", "dataset.load.get_total_size", "int", "int", "int", "socket.create_connection", "denet.verbose", "denet.info", "denet.Timer", "train_multi.run_train_epoch", "denet.info", "denet.verbose", "time.time", "time.time", "train_multi.compute_error", "denet.info", "train_multi.save_results", "denet.multi.update_server.UpdateServer.start", "dataset.load.get_total_size", "str", "len", "len", "len", "str", "str", "str", "common.Timer.current", "dataset.load.get_total_size", "str", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.add_arguments", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_class_num", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.initialize", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_train_func", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.load_restart_args", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.initialize", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_train_func", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.save_dims", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.augment_mirror", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.run_train_epoch", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_total_size", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.train_multi.run_train_epoch", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.model.train.compute_error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.train.save_results", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_total_size", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_total_size"], ["", "def", "main", "(", ")", ":", "\n", "\n", "#load arguments:", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a convolutional network using labelled data'", ")", "\n", "logging", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-acc-mode\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use model accumulation over multiple batches (uses more VRAM)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cost-factors\"", ",", "default", "=", "[", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Multiplicative factors for model costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--export-model-dims\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Ignore, don't use this option!\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-dims\"", ",", "default", "=", "\"./model-dims.json\"", ",", "type", "=", "str", ",", "help", "=", "\"export file for shared model dimensions\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-save-dt\"", ",", "default", "=", "30", ",", "type", "=", "int", ",", "help", "=", "\"Minimum time (min) between saving an intermediate model. Use 0 to disable.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "False", ",", "default", "=", "None", ",", "help", "=", "\"Model to continue training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "\"gpu0\"", "]", ",", "help", "=", "\"list of gpus to train over\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--update-server\"", ",", "metavar", "=", "\"<addr> [port] [offset] [delta]\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"model update server for synchronizing multiple networked machines. Set <addr> to 'mpi' for MPI networking.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--subset-max\"", ",", "type", "=", "int", ",", "default", "=", "10000000", ",", "help", "=", "\"Specify maximum number of subsets to be used in each training epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train\"", ",", "default", "=", "None", ",", "help", "=", "\"The folder with training / validation data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "default", "=", "None", ",", "help", "=", "\"The folder with testing data (optional)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-mode\"", ",", "default", "=", "\"default\"", ",", "help", "=", "\"Testing Mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-epochs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Epochs between each test evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thread-num\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of threads to use for supported opeartions (e.g. loading/distorting datasets)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extension\"", ",", "default", "=", "\"ppm\"", ",", "help", "=", "\"Image file extension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--activation\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Activation function used in convolution / hidden layers (tanh, relu, leaky-relu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--border-mode\"", ",", "default", "=", "\"half\"", ",", "help", "=", "\"Border mode for convolutional layers (full, valid)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-prefix\"", ",", "default", "=", "\"./model\"", ",", "help", "=", "\"Output prefix for model files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--solver\"", ",", "type", "=", "str", ",", "default", "=", "\"nesterov\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-init\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "\"he-backward\"", "]", ",", "help", "=", "\"Weight initialization scheme\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--initial-tune\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"Perform initial tuning with learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-rate\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Learning rate for weights and biases.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-momentum\"", ",", "type", "=", "float", ",", "default", "=", "[", "0.0", ",", "0.0", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Learning momentum for weights and biases (0.0 - 1.0).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-anneal\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\"Annealing factor per epoch for weight and bias learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-anneal-epochs\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ",", "help", "=", "\"Epochs to apply learning rate annealing (default every epoch)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-decay\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"L2 weight decay (not applied to biases). \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"The number of training epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epoch-start\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Epoch to start from\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--subset-start\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Subset to start from\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-samples\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Maximum samples to load from training set\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"Size of each processing batch (per GPU)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size-factor\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Batch size multiplier, use when desired batch size won't fit in memory.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-data-size\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of batches to upload to GPU for processing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "23455", ",", "help", "=", "\"Random Seed for weights\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--split-seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Random Seed for splitting into validation / training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--export-symbolic\"", ",", "default", "=", "None", ",", "help", "=", "\"Save datasets as symbolic links\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distort-mode\"", ",", "default", "=", "[", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Distortions to apply to training data (default, cifar10, disable)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--augment-mirror\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Augment training data with horizontally mirrored copies\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--skip-train\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Skip training of model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--skip-layer-updates\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ",", "help", "=", "\"Skip training updates to specified layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-desc\"", ",", "default", "=", "[", "\"C100,7\"", ",", "\"P2\"", ",", "\"C150,4\"", ",", "\"P2\"", ",", "\"C250,4\"", ",", "\"P2\"", ",", "\"C300,1\"", ",", "\"CR\"", "]", ",", "nargs", "=", "\"+\"", ",", "type", "=", "str", ",", "help", "=", "\"Network layer description\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--theano-flags\"", ",", "type", "=", "str", ",", "default", "=", "\"lib.cnmem=1.0\"", ",", "help", "=", "\"Additional THEANO_FLAGS environment variables for worker threads\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restart\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Restart training of model\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "init", "(", "args", ")", "\n", "\n", "#continue training", "\n", "args_fname", "=", "\"./train.args\"", "\n", "if", "args", ".", "restart", ":", "\n", "        ", "args", "=", "load_restart_args", "(", "args_fname", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"Exporting arguments:\"", ",", "args_fname", ")", "\n", "with", "open", "(", "args_fname", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "args", ",", "f", ")", "\n", "\n", "#start MPI update server if this is master node:", "\n", "", "", "if", "not", "args", ".", "update_server", "is", "None", "and", "args", ".", "update_server", "[", "0", "]", "==", "\"mpi\"", ":", "\n", "        ", "from", "mpi4py", "import", "MPI", "\n", "if", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "            ", "momentum", "=", "float", "(", "args", ".", "update_server", "[", "1", "]", ")", "\n", "update_server", "=", "UpdateServer", "(", "args", ".", "model_dims", ",", "momentum", "=", "momentum", ",", "use_mpi", "=", "True", ",", "use_async", "=", "True", ")", "\n", "sys", ".", "exit", "(", "update_server", ".", "start", "(", ")", ")", "\n", "\n", "#set random seeds", "\n", "", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "#load training dataset", "\n", "logging", ".", "info", "(", "\"Loading training data: \"", "+", "str", "(", "args", ".", "train", ")", ")", "\n", "train_data", "=", "dataset", ".", "load", "(", "args", ".", "train", ",", "args", ".", "extension", ",", "is_training", "=", "True", ",", "thread_num", "=", "args", ".", "thread_num", ")", "\n", "data_shape", "=", "train_data", ".", "get_data_shape", "(", ")", "\n", "class_num", "=", "train_data", ".", "get_class_num", "(", ")", "\n", "class_labels", "=", "train_data", ".", "class_labels", "\n", "logging", ".", "info", "(", "\"Found %i samples across %i class Labels:\\n\"", "%", "(", "train_data", ".", "get_total_size", "(", ")", ",", "class_num", ")", ",", "class_labels", ")", "\n", "\n", "#HACK to determine model parameter dimensions for shared models without initializing theano...", "\n", "#Not need any more in theano-0.8.0", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "model_dims", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Exporting model dims file to \"", "+", "args", ".", "model_dims", ")", "\n", "import", "model_cnn", "\n", "model", "=", "model_cnn", ".", "initialize", "(", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ")", "\n", "model", ".", "build_train_func", "(", "args", ".", "solver", ",", "skip_build", "=", "True", ")", "\n", "shared", ".", "ModelUpdate", ".", "save_dims", "(", "args", ".", "model_dims", ",", "model", ")", "\n", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "#construct worker processes (must be done before model due to Theano init! No longer true in theano 0.8.0):", "\n", "", "logging", ".", "info", "(", "\"Initializing worker procs for\"", ",", "args", ".", "gpus", ")", "\n", "workers", "=", "[", "WorkerProcess", "(", "gpu", ",", "args", ",", "data_shape", ",", "class_labels", ")", "for", "gpu", "in", "args", ".", "gpus", "]", "\n", "\n", "#initialize model (and Theano)", "\n", "import", "model_cnn", "\n", "model", "=", "model_cnn", ".", "initialize", "(", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ")", "\n", "model", ".", "build_train_func", "(", "args", ".", "solver", ",", "skip_build", "=", "True", ")", "\n", "\n", "#mirror training data", "\n", "if", "args", ".", "augment_mirror", ":", "\n", "        ", "train_data", ".", "augment_mirror", "(", ")", ";", "\n", "\n", "#load test dataset", "\n", "", "if", "args", ".", "test", ":", "\n", "        ", "logging", ".", "info", "(", "\"Loading test: \"", "+", "str", "(", "args", ".", "test", ")", ")", "\n", "test_data", "=", "dataset", ".", "load", "(", "args", ".", "test", ",", "args", ".", "extension", ",", "is_training", "=", "False", ",", "class_labels", "=", "class_labels", ",", "thread_num", "=", "args", ".", "thread_num", ")", "\n", "logging", ".", "info", "(", "\"Testing: \"", "+", "str", "(", "test_data", ".", "get_total_size", "(", ")", ")", "+", "\" samples\"", ")", "\n", "assert", "(", "test_data", ".", "get_total_size", "(", ")", "!=", "0", ")", "\n", "\n", "#connect with update server", "\n", "", "if", "not", "args", ".", "update_server", "is", "None", ":", "\n", "\n", "        ", "addr", "=", "args", ".", "update_server", "[", "0", "]", "\n", "use_mpi", "=", "bool", "(", "addr", "==", "\"mpi\"", ")", "\n", "use_async", "=", "bool", "(", "len", "(", "args", ".", "update_server", ")", "==", "2", ")", "\n", "port", "=", "0", "if", "use_mpi", "else", "int", "(", "args", ".", "update_server", "[", "1", "]", ")", "\n", "offset", "=", "0", "if", "use_async", "else", "int", "(", "args", ".", "update_server", "[", "2", "]", ")", "\n", "delta", "=", "0", "if", "use_async", "else", "int", "(", "args", ".", "update_server", "[", "3", "]", ")", "\n", "\n", "logging", ".", "info", "(", "\"Connecting to update server (async=%i, mpi=%i): \"", "%", "(", "use_async", ",", "use_mpi", ")", ",", "addr", ",", "port", ")", "\n", "sock", "=", "0", "if", "use_mpi", "else", "socket", ".", "create_connection", "(", "(", "addr", ",", "port", ")", ")", "\n", "update_client", "=", "UpdateClient", "(", "args", ".", "epoch_start", ",", "args", ".", "subset_start", ",", "train_data", ".", "subset_num", ",", "sock", ",", "use_async", ",", "use_mpi", ",", "offset", ",", "delta", ")", "\n", "", "else", ":", "\n", "        ", "update_client", "=", "UpdateClient", "(", "args", ".", "epoch_start", ",", "args", ".", "subset_start", ",", "train_data", ".", "subset_num", ")", "\n", "\n", "#perform training and save models", "\n", "", "if", "args", ".", "initial_tune", ">", "0", ":", "\n", "        ", "logging", ".", "info", "(", "\"----- Initial Fine Tune -----\"", ")", "\n", "logging", ".", "info", "(", "\"Running initial tune with learning rate:\"", ",", "args", ".", "initial_tune", ")", "\n", "run_train_epoch", "(", "args", ",", "update_client", ",", "workers", ",", "model", ",", "train_data", ",", "args", ".", "initial_tune", ")", "\n", "\n", "#anneal learning rate", "\n", "", "learn_rate", "=", "args", ".", "learn_rate", "\n", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epoch_start", ")", ":", "\n", "        ", "if", "len", "(", "args", ".", "learn_anneal_epochs", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "args", ".", "learn_anneal_epochs", ":", "\n", "            ", "logging", ".", "verbose", "(", "\"Annealing learning rate\"", ")", "\n", "learn_rate", "*=", "args", ".", "learn_anneal", "\n", "\n", "#Run training", "\n", "", "", "best_test_error", "=", "100.0", ";", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_start", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"----- Training Epoch: \"", "+", "str", "(", "epoch", ")", "+", "\" -----\"", ")", "\n", "\n", "#perform training and save models", "\n", "if", "not", "args", ".", "skip_train", ":", "\n", "            ", "logging", ".", "info", "(", "\"Training with learning rates \"", "+", "str", "(", "learn_rate", ")", "+", "\" and momentum \"", "+", "str", "(", "args", ".", "learn_momentum", ")", ")", "\n", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "cost", "=", "run_train_epoch", "(", "args", ",", "update_client", ",", "workers", ",", "model", ",", "train_data", ",", "learn_rate", ")", "\n", "logging", ".", "info", "(", "\"Training - mean cost:\"", ",", "cost", ",", "\", took %.0f sec\"", "%", "timer", ".", "current", "(", ")", ")", "\n", "\n", "#anneal learning rate", "\n", "", "if", "len", "(", "args", ".", "learn_anneal_epochs", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "args", ".", "learn_anneal_epochs", ":", "\n", "            ", "logging", ".", "verbose", "(", "\"Annealing learning rate\"", ")", "\n", "learn_rate", "*=", "args", ".", "learn_anneal", "\n", "\n", "#perform testing", "\n", "", "test_error", "=", "0", "\n", "if", "args", ".", "test", "and", "(", "(", "epoch", "%", "args", ".", "test_epochs", ")", "==", "0", "or", "epoch", "==", "(", "args", ".", "epochs", "-", "1", ")", ")", ":", "\n", "            ", "ts", "=", "time", ".", "time", "(", ")", "\n", "test_error", ",", "test_class_errors", "=", "compute_error", "(", "workers", ",", "model", ",", "test_data", ")", "\n", "logging", ".", "info", "(", "\"Epoch %i Test Error: %.2f%%, Took %.0f sec\"", "%", "(", "epoch", ",", "test_error", ",", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "save_results", "(", "args", ".", "output_prefix", "+", "\"_epoch%03i.test\"", "%", "epoch", ",", "test_error", ",", "test_class_errors", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_single": [[18, 51], ["range", "numpy.array", "numpy.array", "numpy.array", "denet.info", "denet.info", "denet.info", "data.load_from_subset", "data.get_labels", "denet.info", "model.predict_probabilities", "range", "denet.verbose", "numpy.sum", "numpy.argmax", "numpy.array.append", "numpy.array.append", "numpy.array.append", "list", "numpy.sum", "numpy.argpartition", "zip", "numpy.any"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "test_single", "(", "mode", ",", "model", ",", "data", ")", ":", "\n", "\n", "    ", "y", "=", "[", "]", "\n", "yy", "=", "[", "]", "\n", "yt", "=", "[", "]", "\n", "for", "subset", "in", "range", "(", "data", ".", "subset_num", ")", ":", "\n", "\n", "#load / prepare data", "\n", "        ", "logging", ".", "info", "(", "\"Subset %i: loading data...\"", "%", "subset", ")", "\n", "data", ".", "load_from_subset", "(", "subset", ")", "\n", "labels", "=", "data", ".", "get_labels", "(", ")", "\n", "\n", "#", "\n", "logging", ".", "info", "(", "\"Subset %i: computing error...\"", "%", "subset", ")", "\n", "pr", "=", "model", ".", "predict_probabilities", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "pr", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pr_i", "=", "pr", "[", "i", ",", ":", "]", "\n", "top1", "=", "numpy", ".", "argmax", "(", "pr_i", ")", "\n", "top5", "=", "numpy", ".", "argpartition", "(", "-", "pr_i", ",", "5", ")", "[", ":", "5", "]", "\n", "y", ".", "append", "(", "top1", ")", "\n", "yy", ".", "append", "(", "top5", ")", "\n", "yt", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Samples - (True, Predicted):\"", ",", "list", "(", "zip", "(", "yt", "[", "-", "10", ":", "]", ",", "y", "[", "-", "10", ":", "]", ")", ")", ")", "\n", "\n", "", "y", "=", "numpy", ".", "array", "(", "y", ",", "numpy", ".", "int64", ")", "\n", "yy", "=", "numpy", ".", "array", "(", "yy", ",", "numpy", ".", "int64", ")", "\n", "yt", "=", "numpy", ".", "array", "(", "yt", ",", "numpy", ".", "int64", ")", "\n", "\n", "error1", "=", "numpy", ".", "sum", "(", "yt", "!=", "y", ")", "/", "yt", ".", "shape", "[", "0", "]", "\n", "error5", "=", "1.0", "-", "numpy", ".", "sum", "(", "numpy", ".", "any", "(", "yy", "[", ":", ",", "]", "==", "yt", "[", ":", ",", "None", "]", ",", "axis", "=", "1", ")", ")", "/", "yt", ".", "shape", "[", "0", "]", "\n", "logging", ".", "info", "(", "\"Top1 - Error Rate: %.3f%%\"", "%", "(", "100.0", "*", "error1", ")", ")", "\n", "logging", ".", "info", "(", "\"Top5 - Error Rate: %.3f%%\"", "%", "(", "100.0", "*", "error5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_multicrop": [[53, 85], ["range", "numpy.array", "numpy.array", "numpy.array", "denet.info", "denet.info", "denet.info", "data.load_from_subset", "data.get_labels", "denet.info", "model.predict_probabilities", "range", "numpy.sum", "numpy.argmax", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.sum", "numpy.sum", "numpy.argpartition", "numpy.any"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "def", "test_multicrop", "(", "mode", ",", "model", ",", "data", ")", ":", "\n", "\n", "    ", "y", "=", "[", "]", "\n", "yy", "=", "[", "]", "\n", "yt", "=", "[", "]", "\n", "for", "subset", "in", "range", "(", "data", ".", "subset_num", ")", ":", "\n", "\n", "#load / prepare data", "\n", "        ", "logging", ".", "info", "(", "\"Subset %i: loading data...\"", "%", "subset", ")", "\n", "data", ".", "load_from_subset", "(", "subset", ")", "\n", "labels", "=", "data", ".", "get_labels", "(", ")", "\n", "\n", "#", "\n", "logging", ".", "info", "(", "\"Subset %i: computing error...\"", "%", "subset", ")", "\n", "pr", "=", "model", ".", "predict_probabilities", "(", "data", ")", "\n", "n", "=", "pr", ".", "shape", "[", "0", "]", "//", "10", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "pr_i", "=", "numpy", ".", "sum", "(", "pr", "[", "i", "*", "10", ":", "(", "i", "+", "1", ")", "*", "10", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "top1", "=", "numpy", ".", "argmax", "(", "pr_i", ")", "\n", "top5", "=", "numpy", ".", "argpartition", "(", "-", "pr_i", ",", "5", ")", "[", ":", "5", "]", "\n", "y", ".", "append", "(", "top1", ")", "\n", "yy", ".", "append", "(", "top5", ")", "\n", "yt", ".", "append", "(", "labels", "[", "i", "*", "10", "]", ")", "\n", "\n", "", "", "y", "=", "numpy", ".", "array", "(", "y", ",", "numpy", ".", "int64", ")", "\n", "yy", "=", "numpy", ".", "array", "(", "yy", ",", "numpy", ".", "int64", ")", "\n", "yt", "=", "numpy", ".", "array", "(", "yt", ",", "numpy", ".", "int64", ")", "\n", "\n", "error1", "=", "1.0", "-", "numpy", ".", "sum", "(", "yt", "==", "y", ")", "/", "yt", ".", "shape", "[", "0", "]", "\n", "error5", "=", "1.0", "-", "numpy", ".", "sum", "(", "numpy", ".", "any", "(", "yy", "[", ":", ",", "]", "==", "yt", "[", ":", ",", "None", "]", ",", "axis", "=", "1", ")", ")", "/", "yt", ".", "shape", "[", "0", "]", "\n", "logging", ".", "info", "(", "\"Top1 - Error Rate: %.3f%%\"", "%", "(", "100.0", "*", "error1", ")", ")", "\n", "logging", ".", "info", "(", "\"Top5 - Error Rate: %.3f%%\"", "%", "(", "100.0", "*", "error5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.export_detection_image": [[87, 164], ["bboxs.sort", "set", "len", "map", "numpy.zeros", "numpy.maximum", "numpy.maximum.astype", "numpy.swapaxes", "numpy.swapaxes", "Image.fromarray", "Image.new", "Image.new.paste", "ImageDraw.Draw", "ImageFont.truetype", "enumerate", "os.path.dirname", "Image.new.save", "max", "max", "max", "max", "bboxs.append", "numpy.array", "numpy.array", "range", "numpy.minimum", "cls_colormap.items", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "os.makedirs", "min", "min", "min", "min", "range", "colorsys.hsv_to_rgb", "zip", "int", "int", "int", "int", "int", "int", "os.path.isdir", "int", "int", "int", "int", "[].upper"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save"], ["", "def", "export_detection_image", "(", "fname", ",", "data", ",", "class_labels_inv", ",", "dets", "=", "[", "]", ")", ":", "\n", "\n", "    ", "bboxs", "=", "[", "]", "\n", "for", "pr", ",", "cls", ",", "bbox", "in", "dets", ":", "\n", "        ", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "bbox", "\n", "x0", "=", "max", "(", "0", ",", "min", "(", "int", "(", "x0", "*", "data", ".", "shape", "[", "2", "]", ")", ",", "data", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "\n", "x1", "=", "max", "(", "0", ",", "min", "(", "int", "(", "x1", "*", "data", ".", "shape", "[", "2", "]", ")", ",", "data", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "\n", "y0", "=", "max", "(", "0", ",", "min", "(", "int", "(", "y0", "*", "data", ".", "shape", "[", "1", "]", ")", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "min", "(", "int", "(", "y1", "*", "data", ".", "shape", "[", "1", "]", ")", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "bboxs", ".", "append", "(", "(", "cls", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "\n", "", "bboxs", ".", "sort", "(", "key", "=", "lambda", "t", ":", "(", "t", "[", "3", "]", "-", "t", "[", "1", "]", ")", "*", "(", "t", "[", "4", "]", "-", "t", "[", "2", "]", ")", ")", "\n", "bboxs", "=", "bboxs", "[", ":", ":", "-", "1", "]", "\n", "\n", "#create unique color map for ", "\n", "import", "colorsys", "\n", "cls_unique", "=", "set", "(", "[", "cls", "for", "cls", ",", "_", ",", "_", ",", "_", ",", "_", "in", "bboxs", "]", ")", "\n", "cls_unique_n", "=", "len", "(", "cls_unique", ")", "\n", "colormap_hsv", "=", "[", "(", "x", "*", "1.0", "/", "cls_unique_n", ",", "0.5", ",", "0.5", ")", "for", "x", "in", "range", "(", "cls_unique_n", ")", "]", "\n", "colormap_rgb", "=", "map", "(", "lambda", "x", ":", "colorsys", ".", "hsv_to_rgb", "(", "*", "x", ")", ",", "colormap_hsv", ")", "\n", "cls_colormap", "=", "{", "cls", ":", "rgb", "for", "cls", ",", "rgb", "in", "zip", "(", "cls_unique", ",", "colormap_rgb", ")", "}", "\n", "\n", "#construct data filter", "\n", "bbox_alpha", "=", "0.75", "\n", "data_filter", "=", "numpy", ".", "zeros", "(", "shape", "=", "(", "4", ",", "data", ".", "shape", "[", "1", "]", ",", "data", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "for", "cls", ",", "x0", ",", "y0", ",", "x1", ",", "y1", "in", "bboxs", ":", "\n", "        ", "rgb", "=", "cls_colormap", "[", "cls", "]", "\n", "rgba_border", "=", "numpy", ".", "array", "(", "[", "rgb", "[", "0", "]", ",", "rgb", "[", "1", "]", ",", "rgb", "[", "2", "]", ",", "1.0", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "rgba_center", "=", "numpy", ".", "array", "(", "[", "rgb", "[", "0", "]", ",", "rgb", "[", "1", "]", ",", "rgb", "[", "2", "]", ",", "bbox_alpha", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "data_filter", "[", ":", ",", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "=", "rgba_center", "[", ":", ",", "None", ",", "None", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "(", "y0", "-", "i", ")", ">", "0", ":", "\n", "                ", "data_filter", "[", ":", ",", "y0", "-", "i", ",", "x0", ":", "x1", "]", "=", "rgba_border", "[", ":", ",", "None", "]", "\n", "", "if", "(", "y1", "+", "i", ")", "<", "data", ".", "shape", "[", "1", "]", ":", "\n", "                ", "data_filter", "[", ":", ",", "y1", "+", "i", ",", "x0", ":", "x1", "]", "=", "rgba_border", "[", ":", ",", "None", "]", "\n", "", "if", "(", "x0", "-", "i", ")", ">", "0", ":", "\n", "                ", "data_filter", "[", ":", ",", "y0", ":", "y1", ",", "x0", "-", "i", "]", "=", "rgba_border", "[", ":", ",", "None", "]", "\n", "", "if", "(", "x1", "+", "i", ")", "<", "data", ".", "shape", "[", "2", "]", ":", "\n", "                ", "data_filter", "[", ":", ",", "y0", ":", "y1", ",", "x1", "+", "i", "]", "=", "rgba_border", "[", ":", ",", "None", "]", "\n", "\n", "#apply filter", "\n", "", "", "", "data", "=", "data_filter", "[", "3", ",", "None", ",", ":", ",", ":", "]", "*", "data_filter", "[", ":", "3", ",", ":", ",", ":", "]", "+", "(", "1.0", "-", "data_filter", "[", "3", ",", "None", ",", ":", ",", ":", "]", ")", "*", "data", "[", ":", ",", ":", ",", ":", "]", "\n", "d", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "255", "*", "data", ",", "255", ")", ")", "\n", "im_d", "=", "d", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "im_d", "=", "numpy", ".", "swapaxes", "(", "im_d", ",", "0", ",", "2", ")", "\n", "im_d", "=", "numpy", ".", "swapaxes", "(", "im_d", ",", "0", ",", "1", ")", "\n", "\n", "from", "PIL", "import", "Image", "\n", "from", "PIL", "import", "ImageDraw", "\n", "from", "PIL", "import", "ImageFont", "\n", "im", "=", "Image", ".", "fromarray", "(", "im_d", ",", "'RGB'", ")", "\n", "\n", "#add legend:", "\n", "im_legend", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "im", ".", "size", "[", "0", "]", "+", "256", ",", "im", ".", "size", "[", "1", "]", ")", ",", "\"black\"", ")", "\n", "im_legend", ".", "paste", "(", "im", ",", "(", "0", ",", "0", ",", "im", ".", "size", "[", "0", "]", ",", "im", ".", "size", "[", "1", "]", ")", ")", "\n", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "im_legend", ")", "\n", "font_height", "=", "16", "\n", "# font = ImageFont.truetype(\"sans-serif.ttf\", font_height)", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "\"DejaVuSerif-Bold.ttf\"", ",", "font_height", ")", "\n", "# font = ImageFont.load_default()", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "cls_colormap", ".", "items", "(", ")", ")", ":", "\n", "        ", "cls", ",", "rgb", "=", "item", "\n", "rgb", "=", "(", "int", "(", "rgb", "[", "0", "]", "*", "255", ")", ",", "int", "(", "rgb", "[", "1", "]", "*", "255", ")", ",", "int", "(", "rgb", "[", "2", "]", "*", "255", ")", ")", "\n", "rgb_fill", "=", "(", "int", "(", "rgb", "[", "0", "]", "*", "bbox_alpha", ")", ",", "int", "(", "rgb", "[", "1", "]", "*", "bbox_alpha", ")", ",", "int", "(", "rgb", "[", "2", "]", "*", "bbox_alpha", ")", ")", "\n", "x0", "=", "im", ".", "size", "[", "0", "]", "\n", "y0", "=", "i", "*", "(", "font_height", "+", "4", ")", "\n", "\n", "draw", ".", "rectangle", "(", "(", "x0", ",", "y0", ",", "x0", "+", "16", ",", "y0", "+", "16", ")", ",", "fill", "=", "rgb_fill", ",", "outline", "=", "rgb", ")", "\n", "draw", ".", "text", "(", "(", "x0", "+", "18", ",", "y0", ")", ",", "class_labels_inv", "[", "cls", "]", "[", "0", "]", ".", "upper", "(", ")", "+", "class_labels_inv", "[", "cls", "]", "[", "1", ":", "]", ",", "rgb", ",", "font", "=", "font", ")", "\n", "\n", "#save image", "\n", "", "dname", "=", "os", ".", "path", ".", "dirname", "(", "fname", ")", "\n", "if", "dname", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "isdir", "(", "dname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dname", ")", "\n", "\n", "", "im_legend", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_detector": [[166, 237], ["denet.get_params_dict", "print", "range", "denet.info", "os.path.join", "denet.info", "denet.json_to_file", "denet.info", "data.load_from_subset", "data.export", "denet.info", "range", "os.path.dirname", "denet.info", "model.get_input_shape", "DatasetPascalVOC.export_detections", "DatasetPascalVOC.get_precision", "model.class_labels.items", "detect_layer.get_detections", "os.path.dirname", "os.path.dirname", "common.get_params_dict.get", "denet.info", "data.export_detections", "enumerate", "sum", "len", "DatasetImagenet.get_localization_error", "predict.export_detection_image", "len"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_input_shape", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.export_detections", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_precision", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_detect.DeNetDetectLayer.get_detections", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.export_detections", "home.repos.pwc.inspect_result.lachlants_denet.dataset.imagenet.DatasetImagenet.get_localization_error", "home.repos.pwc.inspect_result.lachlants_denet.model.predict.export_detection_image"], ["", "def", "test_detector", "(", "mode", ",", "model", ",", "data", ",", "output_fname", ",", "params", ")", ":", "\n", "\n", "    ", "detect_params", "=", "common", ".", "get_params_dict", "(", "params", ")", "\n", "print", "(", "\"Using detector params:\"", ",", "detect_params", ",", "params", ")", "\n", "\n", "detect_layer", "=", "model", ".", "layers", "[", "-", "1", "]", "\n", "class_labels_inv", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "model", ".", "class_labels", ".", "items", "(", ")", "}", "\n", "index", "=", "0", "\n", "detections", "=", "[", "]", "\n", "for", "subset", "in", "range", "(", "data", ".", "subset_num", ")", ":", "\n", "\n", "#load data", "\n", "        ", "logging", ".", "info", "(", "\"Subset %i: loading data...\"", "%", "subset", ")", "\n", "data", ".", "load_from_subset", "(", "subset", ")", "\n", "data_x", ",", "data_m", ",", "data_size", "=", "data", ".", "export", "(", "model", ".", "batch_size", ")", "\n", "\n", "#", "\n", "logging", ".", "info", "(", "\"Subset %i: computing error...\"", "%", "subset", ")", "\n", "batch_num", "=", "data_x", ".", "shape", "[", "0", "]", "//", "model", ".", "batch_size", "\n", "subset_det", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "dx", "=", "data_x", "[", "n", "*", "model", ".", "batch_size", ":", "(", "n", "+", "1", ")", "*", "model", ".", "batch_size", "]", "\n", "dm", "=", "data_m", "[", "n", "*", "model", ".", "batch_size", ":", "(", "n", "+", "1", ")", "*", "model", ".", "batch_size", "]", "\n", "results", "=", "detect_layer", ".", "get_detections", "(", "model", ",", "dx", ",", "dm", ",", "detect_params", ")", "\n", "\n", "#export samples images", "\n", "if", "\"image\"", "in", "mode", ":", "\n", "                ", "for", "i", ",", "r", "in", "enumerate", "(", "results", ")", ":", "\n", "                    ", "export_detection_image", "(", "\"%06i_dets.png\"", "%", "(", "index", "+", "i", ")", ",", "dx", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "class_labels_inv", ",", "r", "[", "\"detections\"", "]", ")", "\n", "\n", "# for cls in set(r[\"meta\"][\"class\"]):", "\n", "#     objs = []", "\n", "#     for obj_cls,obj in zip(r[\"meta\"][\"class\"], r[\"meta\"][\"bbox\"]):", "\n", "#         if obj_cls == cls:", "\n", "#             objs.append(obj)", "\n", "#     common.export_activation_rgb(\"%06i_gt_%s.png\"%(index+i, class_labels_inv[cls]), data_x[i,:,:,:], objs)", "\n", "\n", "# for j, det in enumerate(r[\"detections\"]):", "\n", "#     pr, cls, bbox = det", "\n", "#     logging.verbose(\"sample %i - %i: class %s, pr=%.4f, bbox:\"%(index+i, j, class_labels_inv[cls], pr), bbox)", "\n", "#     common.export_activation_rgb(\"%06i_%03i_%s_pr%0.2f.png\"%(index+i, j, class_labels_inv[cls], pr), data_x[i,:,:,:], [bbox])", "\n", "\n", "", "", "subset_det", "+=", "results", "\n", "index", "+=", "model", ".", "batch_size", "\n", "\n", "", "detections", "+=", "subset_det", "[", ":", "data_size", "]", "\n", "\n", "\n", "", "logging", ".", "info", "(", "\"Found %i detections for %i samples\"", "%", "(", "sum", "(", "[", "len", "(", "d", "[", "\"detections\"", "]", ")", "for", "d", "in", "detections", "]", ")", ",", "len", "(", "detections", ")", ")", ")", "\n", "\n", "#export raw", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "output_fname", ")", ",", "\"detections.json\"", ")", "\n", "logging", ".", "info", "(", "\"Saving raw detections to:\"", "+", "fname", ")", "\n", "json_dets", "=", "{", "\"dets\"", ":", "detections", ",", "\"classLabels\"", ":", "model", ".", "class_labels", ",", "\"detectParams\"", ":", "detect_params", "}", "\n", "common", ".", "json_to_file", "(", "fname", ",", "json_dets", ")", "\n", "\n", "if", "\"voc\"", "in", "mode", ":", "\n", "        ", "from", "denet", ".", "dataset", ".", "pascal_voc", "import", "DatasetPascalVOC", "\n", "logging", ".", "info", "(", "\"Exporting pascal voc detections to: \"", ",", "os", ".", "path", ".", "dirname", "(", "output_fname", ")", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "model", ".", "get_input_shape", "(", ")", "\n", "DatasetPascalVOC", ".", "export_detections", "(", "os", ".", "path", ".", "dirname", "(", "output_fname", ")", ",", "detections", ",", "width", ",", "height", ",", "class_labels_inv", ")", "\n", "DatasetPascalVOC", ".", "get_precision", "(", "detections", ",", "detect_params", ".", "get", "(", "\"matchIOU\"", ",", "0.5", ")", ")", "\n", "\n", "", "elif", "\"mscoco\"", "in", "mode", ":", "\n", "        ", "from", "denet", ".", "dataset", ".", "mscoco", "import", "DatasetMSCOCO", "\n", "logging", ".", "info", "(", "\"Exporting mscoco detections to: \"", ",", "output_fname", "+", "\".json\"", ")", "\n", "data", ".", "export_detections", "(", "output_fname", "+", "\".json\"", ",", "detections", ")", "\n", "\n", "", "elif", "\"imagenet\"", "in", "mode", ":", "\n", "        ", "from", "denet", ".", "dataset", ".", "imagenet", "import", "DatasetImagenet", "\n", "DatasetImagenet", ".", "get_localization_error", "(", "detections", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_segment": [[238, 290], ["range", "range", "print", "denet.info", "data.load_from_subset", "model.predict_output", "numpy.argmax", "range", "print", "range", "range", "range", "range", "range", "hyperspec.mean", "denet.export_label", "denet.export_label", "model.class_labels.items", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_label", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_label"], ["", "", "def", "test_segment", "(", "mode", ",", "model", ",", "data", ")", ":", "\n", "\n", "    ", "cls_tp", "=", "[", "0", "for", "_", "in", "range", "(", "model", ".", "class_num", ")", "]", "\n", "cls_tn", "=", "[", "0", "for", "_", "in", "range", "(", "model", ".", "class_num", ")", "]", "\n", "cls_fp", "=", "[", "0", "for", "_", "in", "range", "(", "model", ".", "class_num", ")", "]", "\n", "cls_fn", "=", "[", "0", "for", "_", "in", "range", "(", "model", ".", "class_num", ")", "]", "\n", "for", "subset", "in", "range", "(", "data", ".", "subset_num", ")", ":", "\n", "\n", "#load data", "\n", "        ", "logging", ".", "info", "(", "\"Subset %i: loading data...\"", "%", "subset", ")", "\n", "data", ".", "load_from_subset", "(", "subset", ")", "\n", "\n", "#predict output", "\n", "pr", "=", "model", ".", "predict_output", "(", "data", ")", "\n", "label", "=", "numpy", ".", "argmax", "(", "pr", ",", "axis", "=", "1", ")", "\n", "for", "b", "in", "range", "(", "pr", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "            ", "label_predict", "=", "label", "[", "b", ",", ":", ",", ":", "]", "\n", "label_true", "=", "data", ".", "data", "[", "b", "]", "[", "2", "]", "[", "\"label\"", "]", "\n", "\n", "for", "cls", "in", "range", "(", "model", ".", "class_num", ")", ":", "\n", "                ", "tp", "=", "numpy", ".", "logical_and", "(", "label_true", "==", "cls", ",", "label_predict", "==", "cls", ")", "\n", "fn", "=", "numpy", ".", "logical_and", "(", "label_true", "==", "cls", ",", "label_predict", "!=", "cls", ")", "\n", "fp", "=", "numpy", ".", "logical_and", "(", "label_true", "!=", "cls", ",", "label_predict", "==", "cls", ")", "\n", "tn", "=", "numpy", ".", "logical_and", "(", "label_true", "!=", "cls", ",", "label_predict", "!=", "cls", ")", "\n", "cls_tp", "[", "cls", "]", "+=", "numpy", ".", "count_nonzero", "(", "tp", ")", "\n", "cls_fn", "[", "cls", "]", "+=", "numpy", ".", "count_nonzero", "(", "fn", ")", "\n", "cls_fp", "[", "cls", "]", "+=", "numpy", ".", "count_nonzero", "(", "fp", ")", "\n", "cls_tn", "[", "cls", "]", "+=", "numpy", ".", "count_nonzero", "(", "tn", ")", "\n", "\n", "", "fname", "=", "data", ".", "data", "[", "b", "]", "[", "0", "]", "\n", "hyperspec", "=", "data", ".", "data", "[", "b", "]", "[", "1", "]", "\n", "hyperspec_gray", "=", "hyperspec", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "colors", "=", "[", "(", "255", ",", "255", ",", "255", ",", "0", ")", ",", "(", "255", ",", "0", ",", "0", ",", "60", ")", ",", "(", "0", ",", "0", ",", "255", ",", "60", ")", "]", "\n", "common", ".", "export_label", "(", "fname", "+", "\"_predict.png\"", ",", "label_predict", ",", "colors", ",", "background", "=", "hyperspec_gray", ")", "\n", "common", ".", "export_label", "(", "fname", "+", "\"_true.png\"", ",", "label_true", ",", "colors", ",", "background", "=", "hyperspec_gray", ")", "\n", "\n", "", "", "class_labels_inv", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "model", ".", "class_labels", ".", "items", "(", ")", "}", "\n", "overall_correct", "=", "0", "\n", "overall_total", "=", "0", "\n", "for", "cls", "in", "range", "(", "model", ".", "class_num", ")", ":", "\n", "\n", "        ", "correct", "=", "cls_tp", "[", "cls", "]", "+", "cls_tn", "[", "cls", "]", "\n", "total", "=", "cls_tp", "[", "cls", "]", "+", "cls_fp", "[", "cls", "]", "+", "cls_fn", "[", "cls", "]", "+", "cls_tn", "[", "cls", "]", "\n", "overall_correct", "+=", "correct", "\n", "overall_total", "+=", "total", "\n", "t", "=", "(", "class_labels_inv", "[", "cls", "]", ",", "100", "*", "correct", "/", "total", ",", "100", "*", "cls_tp", "[", "cls", "]", "/", "(", "cls_tp", "[", "cls", "]", "+", "cls_fn", "[", "cls", "]", ")", ",", "100", "*", "cls_fp", "[", "cls", "]", "/", "(", "cls_fp", "[", "cls", "]", "+", "cls_tn", "[", "cls", "]", ")", ")", "\n", "print", "(", "\"Accuracy (%s): %.2f%%, TPR: %.2f%%, FPR: %.2f%% \"", "%", "t", ")", "\n", "\n", "\n", "", "print", "(", "\"Overall Accuracy: %.2f%%\"", "%", "(", "100", "*", "overall_correct", "/", "overall_total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.predict.main": [[292, 339], ["argparse.ArgumentParser", "denet.add_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "denet.init", "denet.info", "denet.load_from_file", "denet.info", "denet.info", "denet.info", "denet.load", "denet.info", "denet.info", "denet.info", "denet.info", "denet.info", "predict.test_single", "denet.info", "predict.test_multicrop", "denet.info", "predict.test_segment", "denet.info", "predict.test_detector"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.add_arguments", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_single", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_multicrop", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_segment", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.predict.test_detector"], ["", "def", "main", "(", ")", ":", "\n", "\n", "#load arguments:", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Predict labels using trained model'", ")", "\n", "logging", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "True", ",", "help", "=", "\"the model file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input\"", ",", "required", "=", "True", ",", "help", "=", "\"The folder with data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--results\"", ",", "default", "=", "\"./results\"", ",", "type", "=", "str", ",", "help", "=", "\"Results folder / filename\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extension\"", ",", "default", "=", "\"png\"", ",", "help", "=", "\"Image file extension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"Size of processing batchs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--predict-mode\"", ",", "default", "=", "\"single\"", ",", "required", "=", "False", ",", "help", "=", "\"Prediction mode (single, multicrop, convolutional)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thread-num\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Number of threads for dataset loading\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--params\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Additional detection params\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "init", "(", "args", ")", "\n", "\n", "logging", ".", "info", "(", "\"------------------------\"", ")", "\n", "model", "=", "model_cnn", ".", "load_from_file", "(", "args", ".", "model", ",", "args", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"Class labels:\\n\"", ",", "model", ".", "class_labels", ")", "\n", "\n", "logging", ".", "info", "(", "\"------------------------\"", ")", "\n", "logging", ".", "info", "(", "\"Loading Dataset...\"", ")", "\n", "data", "=", "dataset", ".", "load", "(", "args", ".", "input", ",", "args", ".", "extension", ",", "class_labels", "=", "model", ".", "class_labels", ",", "thread_num", "=", "args", ".", "thread_num", ")", "\n", "\n", "logging", ".", "info", "(", "\"------------------------\"", ")", "\n", "logging", ".", "info", "(", "\"Using cudnn algo_fwd: \"", ",", "theano", ".", "config", ".", "dnn", ".", "conv", ".", "algo_fwd", ")", "\n", "logging", ".", "info", "(", "\"------------------------\"", ")", "\n", "\n", "if", "\"single\"", "in", "args", ".", "predict_mode", ":", "\n", "        ", "logging", ".", "info", "(", "\"Testing: single crop\"", ")", "\n", "test_single", "(", "args", ".", "predict_mode", ",", "model", ",", "data", ")", "\n", "\n", "", "elif", "\"multicrop\"", "in", "args", ".", "predict_mode", ":", "\n", "        ", "logging", ".", "info", "(", "\"Testing: multicrop\"", ")", "\n", "assert", "\"multicrop\"", "in", "args", ".", "extension", "\n", "test_multicrop", "(", "args", ".", "predict_mode", ",", "model", ",", "data", ")", "\n", "\n", "", "elif", "\"segment\"", "in", "args", ".", "predict_mode", ":", "\n", "        ", "logging", ".", "info", "(", "\"Testing: segmentation\"", ")", "\n", "test_segment", "(", "args", ".", "predict_mode", ",", "model", ",", "data", ")", "\n", "\n", "", "elif", "\"detect\"", "in", "args", ".", "predict_mode", ":", "\n", "        ", "logging", ".", "info", "(", "\"Testing: Detection\"", ")", "\n", "test_detector", "(", "args", ".", "predict_mode", ",", "model", ",", "data", ",", "args", ".", "results", ",", "args", ".", "params", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.__init__": [[82, 103], ["super().__init__", "random.randint", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "denet.layer.set_rng_seed", "theano.tensor4", "theano.tensor4"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.set_rng_seed"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "0", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "class_labels", "=", "None", "\n", "self", ".", "data_shape", "=", "None", "\n", "self", ".", "class_num", "=", "0", "\n", "self", ".", "rng_seed", "=", "random", ".", "randint", "(", "1", ",", "9999", ")", "\n", "denet", ".", "layer", ".", "set_rng_seed", "(", "self", ".", "rng_seed", ")", "\n", "\n", "#training parameters", "\n", "self", ".", "gradient_clip", "=", "0.0", "\n", "self", ".", "skip_layer_updates", "=", "[", "]", "\n", "self", ".", "bias_decay", "=", "False", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "distort_mode", "=", "[", "]", "\n", "self", ".", "func", "=", "{", "}", "\n", "\n", "#input data", "\n", "self", ".", "input", "=", "tensor", ".", "tensor4", "(", "\"input\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_input_shape": [[105, 108], ["tuple", "list"], "methods", ["None"], ["", "def", "get_input_shape", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "data_shape", "is", "None", ",", "\"Data shape hasn't been set!\"", "\n", "return", "tuple", "(", "[", "self", ".", "batch_size", "]", "+", "list", "(", "self", ".", "data_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_output_shape": [[110, 112], ["None"], "methods", ["None"], ["", "def", "get_output_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layers", "[", "-", "1", "]", ".", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_parameter_num": [[114, 120], ["layer.params", "param.get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.params"], ["", "def", "get_parameter_num", "(", "self", ")", ":", "\n", "        ", "n", "=", "0", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "for", "param", "in", "layer", ".", "params", "(", ")", ":", "\n", "                ", "n", "+=", "param", ".", "get_value", "(", "borrow", "=", "True", ",", "return_internal_type", "=", "True", ")", ".", "size", "\n", "", "", "return", "n", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_layer": [[122, 146], ["layer_desc.find", "layer_desc.find", "layer_type.find", "Exception", "enumerate", "layer.parse_desc", "layer_desc[].split", "denet.convert_num", "denet.convert_num", "denet.convert_num"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.parse_desc", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.convert_num", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.convert_num", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.convert_num"], ["", "def", "build_layer", "(", "self", ",", "layer_desc", ",", "layers", ",", "activation", ",", "border_mode", ",", "wb", ")", ":", "\n", "\n", "        ", "p_start", "=", "layer_desc", ".", "find", "(", "\"[\"", ")", "\n", "p_end", "=", "layer_desc", ".", "find", "(", "\"]\"", ")", "\n", "layer_params", "=", "{", "\"classNum\"", ":", "self", ".", "class_num", ",", "\"activation\"", ":", "activation", ",", "\"borderMode\"", ":", "border_mode", ",", "\"wb\"", ":", "wb", "}", "\n", "if", "p_start", ">", "0", "and", "p_end", ">", "p_start", ":", "\n", "            ", "layer_type", "=", "layer_desc", "[", ":", "p_start", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "layer_desc", "[", "(", "p_start", "+", "1", ")", ":", "p_end", "]", ".", "split", "(", "\",\"", ")", ")", ":", "\n", "                ", "layer_params", "[", "i", "]", "=", "common", ".", "convert_num", "(", "p", ")", "\n", "", "", "else", ":", "\n", "            ", "layer_type", "=", "layer_desc", "\n", "\n", "", "t_index", "=", "layer_type", ".", "find", "(", "\".\"", ")", "\n", "if", "t_index", ">", "0", ":", "\n", "            ", "layer_tags", "=", "layer_type", "[", "(", "t_index", "+", "1", ")", ":", "]", "\n", "layer_type", "=", "layer_type", "[", ":", "t_index", "]", "\n", "", "else", ":", "\n", "            ", "layer_tags", "=", "\"\"", "\n", "\n", "", "for", "layer", "in", "layer_types", ":", "\n", "            ", "if", "layer", ".", "parse_desc", "(", "layers", ",", "layer_type", ",", "layer_tags", ",", "layer_params", ")", ":", "\n", "                ", "return", "\n", "\n", "", "", "raise", "Exception", "(", "\"Invalid layer - type: \"", ",", "layer_type", ",", "\"tags:\"", ",", "layer_tags", ",", "\"params:\"", ",", "layer_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build": [[148, 158], ["enumerate", "denet.verbose", "denet.verbose", "denet.verbose", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "denet.layer.InitialLayer", "model_cnn.ModelCNN.build_layer", "model_cnn.ModelCNN.get_input_shape", "model_cnn.ModelCNN.get_parameter_num", "min", "len"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_layer", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_input_shape", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_parameter_num"], ["", "def", "build", "(", "self", ",", "model_desc", ",", "data_shape", ",", "activation", "=", "\"relu\"", ",", "border_mode", "=", "\"valid\"", ",", "weight_init", "=", "\"he-forward\"", ")", ":", "\n", "\n", "        ", "self", ".", "model_desc", "=", "\" \"", ".", "join", "(", "model_desc", ")", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "layers", "=", "[", "InitialLayer", "(", "self", ".", "input", ",", "self", ".", "get_input_shape", "(", ")", ")", "]", "\n", "for", "i", ",", "layer_desc", "in", "enumerate", "(", "model_desc", ")", ":", "\n", "            ", "wb", "=", "weight_init", "[", "min", "(", "len", "(", "weight_init", ")", "-", "1", ",", "i", ")", "]", "\n", "self", ".", "build_layer", "(", "layer_desc", ",", "self", ".", "layers", ",", "activation", ",", "border_mode", ",", "wb", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Number of parameters in model: %d\"", "%", "self", ".", "get_parameter_num", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.export_json": [[159, 174], ["range", "json_obj.update", "len", "json_layers.append", "strftime", "getpass.getuser", "model_cnn.ModelCNN.layers[].export_json", "gmtime"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "json_layers", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "1", ",", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "            ", "json_layers", ".", "append", "(", "self", ".", "layers", "[", "index", "]", ".", "export_json", "(", ")", ")", "\n", "\n", "", "from", "time", "import", "gmtime", ",", "strftime", "\n", "json_obj", "=", "{", "\"classifierType\"", ":", "\"CNN\"", ",", "\n", "\"classLabels\"", ":", "self", ".", "class_labels", ",", "\n", "\"classNum\"", ":", "self", ".", "class_num", ",", "\n", "\"dataShape\"", ":", "self", ".", "data_shape", ",", "\n", "\"date\"", ":", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "gmtime", "(", ")", ")", ",", "\n", "\"user\"", ":", "getpass", ".", "getuser", "(", ")", "}", "\n", "\n", "json_obj", ".", "update", "(", "{", "\"version\"", ":", "3", ",", "\"layers\"", ":", "json_layers", "}", ")", "\n", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.import_json": [[175, 204], ["json_obj.get", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.layer.import_json", "denet.info", "denet.info", "denet.info", "json_obj.get", "Exception", "json_obj.get", "json_obj.get", "len", "model_cnn.ModelCNN.get_input_shape", "tuple", "model_cnn.ModelCNN.get_parameter_num"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_input_shape", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_parameter_num"], ["", "def", "import_json", "(", "self", ",", "json_obj", ",", "layer_range", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "func", "=", "{", "}", "\n", "\n", "#check if old JSON format", "\n", "if", "json_obj", ".", "get", "(", "\"version\"", ",", "0", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Old format model file detected, no compatibility!\"", ")", "\n", "return", "\n", "\n", "", "self", ".", "class_labels", "=", "json_obj", "[", "\"classLabels\"", "]", "\n", "\n", "if", "\"imageSize\"", "in", "json_obj", "and", "\"imageMode\"", "in", "json_obj", ":", "\n", "            ", "width", "=", "json_obj", "[", "\"imageSize\"", "]", "[", "0", "]", "\n", "height", "=", "json_obj", "[", "\"imageSize\"", "]", "[", "1", "]", "\n", "image_mode", "=", "json_obj", ".", "get", "(", "\"imageMode\"", ",", "\"RGB\"", ")", "\n", "self", ".", "data_shape", "=", "(", "{", "\"RGB\"", ":", "3", ",", "\"L\"", ":", "1", "}", "[", "image_mode", "]", ",", "width", ",", "height", ")", "\n", "", "elif", "\"dataShape\"", "in", "json_obj", ":", "\n", "            ", "self", ".", "data_shape", "=", "tuple", "(", "json_obj", "[", "\"dataShape\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Bad mdl file, Cannot determine input data shape!\"", "\n", "\n", "", "assert", "json_obj", ".", "get", "(", "\"imageBorder\"", ",", "0", ")", "==", "0", "\n", "\n", "self", ".", "class_num", "=", "json_obj", ".", "get", "(", "\"classNum\"", ",", "len", "(", "self", ".", "class_labels", ")", ")", "\n", "\n", "#load layers", "\n", "self", ".", "layers", "=", "denet", ".", "layer", ".", "import_json", "(", "json_obj", "[", "\"layers\"", "]", ",", "self", ".", "input", ",", "self", ".", "get_input_shape", "(", ")", ",", "layer_range", ")", "\n", "\n", "logging", ".", "info", "(", "\"Number of parameters in model: %d\"", "%", "self", ".", "get_parameter_num", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_train_func": [[205, 406], ["denet.info", "denet.info", "denet.info", "theano.fscalar", "theano.fscalar", "theano.fscalar", "theano.fscalar", "theano.fvector", "theano.fvector", "theano.fscalar", "theano.fscalar", "denet.info", "denet.info", "denet.info", "theano.as_tensor_variable", "theano.as_tensor_variable", "enumerate", "enumerate", "split_points.append", "range", "theano.lvector", "theano.lvector", "theano.fvector", "theano.fvector", "layer.cost", "len", "len", "list", "denet.info", "denet.info", "denet.info", "theano.gradient.grad_clip", "theano.gradient.grad_clip", "theano.gradient.grad_clip", "theano.gradient.grad_clip", "len", "denet.verbose", "denet.verbose", "denet.verbose", "denet.info", "denet.info", "denet.info", "enumerate", "OrderedDict", "range", "print", "theano.grad", "theano.grad", "zip", "model_cnn.ModelCNN.cost_list.append", "model_cnn.ModelCNN.cost_layers.append", "model_cnn.ModelCNN.cost_layer_names.append", "len", "len", "len", "len", "len", "zip", "split_points.append", "len", "OrderedDict.update", "len", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.switch", "theano.switch", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.switch", "theano.switch", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "layer.weights", "layer.biases", "sum", "denet.warning", "denet.warning", "denet.warning", "theano.compile.MonitorMode", "theano.compile.MonitorMode", "theano.compile.MonitorMode", "theano.compile.MonitorMode", "sum", "print", "theano.function", "theano.function", "theano.function", "theano.function", "model_cnn.ModelCNN.func[].insert", "len", "len", "len", "split_layers.append", "len", "model_cnn.ModelCNN.layers[].split_known_grads", "numpy.zeros", "theano.gt", "theano.gt", "numpy.zeros", "theano.gt", "theano.gt", "numpy.zeros", "numpy.zeros", "len", "len", "model_cnn.ModelCNN.build_train_func.get_adam_updates"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.cost", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.layer.batch_norm_relu.BatchNormReluOp.grad", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.update", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.weights", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.biases", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.AbstractLayer.split_known_grads"], ["", "def", "build_train_func", "(", "self", ",", "solver_mode", "=", "\"sgd\"", ",", "cost_factors", "=", "[", "]", ",", "use_acc_mode", "=", "False", ",", "skip_build", "=", "False", ")", ":", "\n", "\n", "#arguments to function", "\n", "        ", "logging", ".", "info", "(", "\"Building training functions - solver: %s, use_acc_mode: %s\"", "%", "(", "solver_mode", ",", "use_acc_mode", ")", ")", "\n", "iteration", "=", "tensor", ".", "fscalar", "(", ")", "\n", "learn_rate", "=", "tensor", ".", "fscalar", "(", ")", "\n", "momentum", "=", "tensor", ".", "fvector", "(", ")", "\n", "decay", "=", "tensor", ".", "fscalar", "(", ")", "\n", "\n", "#find costs", "\n", "self", ".", "yt", "=", "[", "]", "\n", "self", ".", "cost_list", "=", "[", "]", "\n", "self", ".", "cost_layers", "=", "[", "]", "\n", "self", ".", "cost_layer_names", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "yt_index", "=", "tensor", ".", "lvector", "(", "\"target index %i\"", "%", "len", "(", "self", ".", "cost_layers", ")", ")", "\n", "yt_value", "=", "tensor", ".", "fvector", "(", "\"target value %i\"", "%", "len", "(", "self", ".", "cost_layers", ")", ")", "\n", "cost", "=", "layer", ".", "cost", "(", "yt_index", ",", "yt_value", ")", "\n", "if", "not", "cost", "is", "None", ":", "\n", "                ", "self", ".", "yt", "+=", "[", "yt_index", ",", "yt_value", "]", "\n", "self", ".", "cost_list", ".", "append", "(", "cost", ")", "\n", "self", ".", "cost_layers", ".", "append", "(", "layer", ")", "\n", "self", ".", "cost_layer_names", ".", "append", "(", "layer", ".", "type_name", ")", "\n", "\n", "", "", "self", ".", "cost_factors", "=", "[", "1.0", "]", "*", "len", "(", "self", ".", "cost_list", ")", "if", "len", "(", "cost_factors", ")", "==", "0", "else", "cost_factors", "\n", "assert", "len", "(", "self", ".", "cost_factors", ")", "==", "len", "(", "self", ".", "cost_list", ")", ",", "\"Different number of cost factors (%i) and cost layers (%i)\"", "%", "(", "len", "(", "self", ".", "cost_factors", ")", ",", "len", "(", "self", ".", "cost_layers", ")", ")", "\n", "logging", ".", "info", "(", "\"Found %i costs in model:\"", "%", "len", "(", "self", ".", "cost_layers", ")", ",", "list", "(", "zip", "(", "self", ".", "cost_layer_names", ",", "self", ".", "cost_factors", ")", ")", ")", "\n", "\n", "self", ".", "train_cost", "=", "tensor", ".", "as_tensor_variable", "(", "0", ")", "\n", "for", "i", ",", "cost", "in", "enumerate", "(", "self", ".", "cost_list", ")", ":", "\n", "            ", "self", ".", "train_cost", "+=", "self", ".", "cost_factors", "[", "i", "]", "*", "cost", "\n", "\n", "", "if", "self", ".", "gradient_clip", ">", "0.0", ":", "\n", "            ", "logging", ".", "info", "(", "\"Clipping gradient to [%f,%f]\"", "%", "(", "-", "self", ".", "gradient_clip", ",", "self", ".", "gradient_clip", ")", ")", "\n", "self", ".", "train_cost", "=", "theano", ".", "gradient", ".", "grad_clip", "(", "self", ".", "train_cost", ",", "-", "self", ".", "gradient_clip", ",", "self", ".", "gradient_clip", ")", "\n", "\n", "#find split points", "\n", "", "split_points", "=", "[", "0", "]", "\n", "self", ".", "use_split_mode", "=", "False", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "layer", ".", "has_split", ":", "\n", "                ", "self", ".", "use_split_mode", "=", "True", "\n", "split_points", ".", "append", "(", "index", ")", "\n", "", "", "split_points", ".", "append", "(", "len", "(", "self", ".", "layers", ")", ")", "\n", "\n", "if", "self", ".", "use_split_mode", ":", "\n", "            ", "logging", ".", "verbose", "(", "\"Using split mode with split points:\"", ",", "split_points", ")", "\n", "self", ".", "func", "[", "\"train_fwd\"", "]", "=", "[", "]", "\n", "self", ".", "func", "[", "\"train_bwd\"", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "updates", "=", "[", "]", "\n", "for", "sp", "in", "range", "(", "len", "(", "split_points", ")", "-", "1", ")", ":", "\n", "\n", "            ", "logging", ".", "info", "(", "\"Building training functions for layers %i-%i\"", "%", "(", "split_points", "[", "sp", "]", ",", "split_points", "[", "sp", "+", "1", "]", ")", ")", "\n", "\n", "split_start", "=", "self", ".", "layers", "[", "split_points", "[", "sp", "]", "]", "if", "sp", ">", "0", "else", "None", "\n", "split_end", "=", "self", ".", "layers", "[", "split_points", "[", "sp", "+", "1", "]", "]", "if", "(", "sp", "+", "2", ")", "<", "len", "(", "split_points", ")", "else", "None", "\n", "split_cost", "=", "self", ".", "train_cost", "if", "split_end", "is", "None", "else", "None", "\n", "split_layers", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "if", "(", "i", ">", "split_points", "[", "sp", "]", ")", "and", "(", "i", "<", "split_points", "[", "sp", "+", "1", "]", ")", ":", "\n", "                    ", "split_layers", ".", "append", "(", "layer", ")", "\n", "\n", "#determine known_grads provided by previous backward passes", "\n", "", "", "from", "collections", "import", "OrderedDict", "\n", "split_known_grads", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "sp", "+", "1", ",", "len", "(", "split_points", ")", "-", "1", ")", ":", "\n", "                ", "split_known_grads", ".", "update", "(", "self", ".", "layers", "[", "split_points", "[", "i", "]", "]", ".", "split_known_grads", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "split_known_grads", ")", "==", "0", ":", "\n", "                ", "split_known_grads", "=", "None", "\n", "\n", "# print(split_known_grads)", "\n", "# print(split_known_grads)", "\n", "# print(sp+1, len(split_points)-1)", "\n", "\n", "#", "\n", "", "def", "get_sgd_updates", "(", "p", ",", "g", ")", ":", "\n", "                ", "m", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "p", ".", "shape", ".", "eval", "(", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "broadcastable", "=", "p", ".", "broadcastable", ",", "borrow", "=", "True", ")", "\n", "rho", "=", "tensor", ".", "switch", "(", "tensor", ".", "gt", "(", "iteration", ",", "0", ")", ",", "momentum", "[", "0", "]", ",", "0.0", ")", "\n", "m_update", "=", "rho", "*", "m", "+", "(", "1.0", "-", "rho", ")", "*", "g", "\n", "p_update", "=", "p", "-", "learn_rate", "*", "m_update", "\n", "return", "[", "(", "p", ",", "p_update", ")", ",", "(", "m", ",", "m_update", ")", "]", "\n", "\n", "", "def", "get_torch_updates", "(", "p", ",", "g", ")", ":", "\n", "                ", "m", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "p", ".", "shape", ".", "eval", "(", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "broadcastable", "=", "p", ".", "broadcastable", ",", "borrow", "=", "True", ")", "\n", "rho", "=", "tensor", ".", "switch", "(", "tensor", ".", "gt", "(", "iteration", ",", "0", ")", ",", "momentum", "[", "0", "]", ",", "0.0", ")", "\n", "m_update", "=", "rho", "*", "m", "+", "g", "\n", "p_update", "=", "p", "-", "learn_rate", "*", "(", "g", "+", "momentum", "[", "0", "]", "*", "m_update", ")", "\n", "return", "[", "(", "p", ",", "p_update", ")", ",", "(", "m", ",", "m_update", ")", "]", "\n", "\n", "", "def", "get_adam_updates", "(", "p", ",", "g", ")", ":", "\n", "                ", "eps", "=", "1e-8", "\n", "m", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "p", ".", "shape", ".", "eval", "(", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "broadcastable", "=", "p", ".", "broadcastable", ",", "borrow", "=", "True", ")", "\n", "v", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "p", ".", "shape", ".", "eval", "(", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "broadcastable", "=", "p", ".", "broadcastable", ",", "borrow", "=", "True", ")", "\n", "m_update", "=", "momentum", "[", "0", "]", "*", "m", "+", "(", "1.0", "-", "momentum", "[", "0", "]", ")", "*", "g", "\n", "v_update", "=", "momentum", "[", "1", "]", "*", "v", "+", "(", "1.0", "-", "momentum", "[", "1", "]", ")", "*", "(", "g", "*", "g", ")", "\n", "m_hat", "=", "m_update", "/", "(", "1.0", "-", "tensor", ".", "pow", "(", "momentum", "[", "0", "]", ",", "iteration", "+", "1", ")", ")", "\n", "v_hat", "=", "v_update", "/", "(", "1.0", "-", "tensor", ".", "pow", "(", "momentum", "[", "1", "]", ",", "iteration", "+", "1", ")", ")", "\n", "p_update", "=", "p", "-", "learn_rate", "*", "m_hat", "/", "(", "tensor", ".", "sqrt", "(", "v_hat", ")", "+", "eps", ")", "\n", "return", "[", "(", "p", ",", "p_update", ")", ",", "(", "m", ",", "m_update", ")", ",", "(", "v", ",", "v_update", ")", "]", "\n", "\n", "#append parameter updates", "\n", "", "params", "=", "[", "]", "\n", "params_decay", "=", "[", "]", "\n", "for", "layer", "in", "split_layers", ":", "\n", "                ", "params", "+=", "layer", ".", "weights", "(", ")", "\n", "params_decay", "+=", "[", "True", "]", "*", "len", "(", "layer", ".", "weights", "(", ")", ")", "\n", "params", "+=", "layer", ".", "biases", "(", ")", "\n", "params_decay", "+=", "[", "False", "]", "*", "len", "(", "layer", ".", "biases", "(", ")", ")", "\n", "\n", "#build updates", "\n", "", "print", "(", "\"known grads:\"", ",", "split_known_grads", ")", "\n", "grads", "=", "tensor", ".", "grad", "(", "split_cost", ",", "params", ",", "known_grads", "=", "split_known_grads", ")", "\n", "solver_updates", "=", "[", "]", "\n", "for", "p", ",", "g", ",", "p_decay", "in", "zip", "(", "params", ",", "grads", ",", "params_decay", ")", ":", "\n", "\n", "#add L2 weight decay if needed", "\n", "                ", "if", "p_decay", "or", "self", ".", "bias_decay", ":", "\n", "                    ", "g", "+=", "decay", "*", "p", "\n", "\n", "", "if", "solver_mode", "==", "\"adam\"", ":", "\n", "                    ", "solver_updates", "+=", "get_adam_updates", "(", "p", ",", "g", ")", "\n", "", "elif", "solver_mode", "==", "\"torch\"", "or", "solver_mode", "==", "\"nesterov\"", ":", "\n", "                    ", "solver_updates", "+=", "get_torch_updates", "(", "p", ",", "g", ")", "\n", "", "else", ":", "\n", "                    ", "solver_updates", "+=", "get_sgd_updates", "(", "p", ",", "g", ")", "\n", "\n", "#append per layer updates", "\n", "", "", "local_updates", "=", "solver_updates", "+", "sum", "(", "[", "layer", ".", "updates", "(", "self", ".", "train_cost", ")", "for", "layer", "in", "split_layers", "]", ",", "[", "]", ")", "\n", "\n", "#all updates", "\n", "self", ".", "updates", "+=", "local_updates", "\n", "\n", "#skipping actual theano function building (if you just want updates, etc)", "\n", "if", "skip_build", ":", "\n", "                ", "continue", "\n", "\n", "", "global", "debug_train", "\n", "if", "debug_train", ":", "\n", "                ", "logging", ".", "warning", "(", "\"WARNING: Debug mode is active!\"", ")", "\n", "from", "theano", ".", "compile", ".", "nanguardmode", "import", "NanGuardMode", "\n", "debug_mode", "=", "theano", ".", "compile", ".", "MonitorMode", "(", "post_func", "=", "debug_detect_errors", ")", "\n", "", "else", ":", "\n", "                ", "debug_mode", "=", "None", "\n", "\n", "", "if", "self", ".", "use_split_mode", ":", "\n", "\n", "                ", "if", "not", "split_end", "is", "None", ":", "\n", "                    ", "updates", "=", "sum", "(", "[", "layer", ".", "split_forward", "(", ")", "for", "layer", "in", "split_layers", "]", ",", "[", "]", ")", "\n", "updates", "+=", "split_end", ".", "split_forward", "(", ")", "\n", "\n", "print", "(", "\"fwd updates:\"", ",", "updates", ")", "\n", "f", "=", "theano", ".", "function", "(", "[", "self", ".", "input", "]", ",", "[", "]", ",", "updates", "=", "updates", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "1", ",", "'int8'", ")", ")", "]", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "mode", "=", "debug_mode", ")", "\n", "self", ".", "func", "[", "\"train_fwd\"", "]", ".", "append", "(", "f", ")", "\n", "\n", "", "outputs", "=", "(", "[", "self", ".", "train_cost", "]", "+", "self", ".", "cost_list", ")", "if", "split_end", "is", "None", "else", "[", "]", "\n", "updates", "=", "sum", "(", "[", "layer", ".", "split_backward", "(", "split_cost", ",", "split_known_grads", ")", "for", "layer", "in", "split_layers", "]", ",", "[", "]", ")", "\n", "if", "not", "split_start", "is", "None", ":", "\n", "                    ", "updates", "+=", "split_start", ".", "split_backward", "(", "split_cost", ",", "split_known_grads", ")", "\n", "\n", "", "print", "(", "\"bwd updates:\"", ",", "updates", ")", "\n", "updates", "+=", "local_updates", "\n", "f", "=", "theano", ".", "function", "(", "[", "denet", ".", "layer", ".", "get_epoch", "(", ")", ",", "iteration", ",", "learn_rate", ",", "momentum", ",", "decay", ",", "self", ".", "input", "]", "+", "self", ".", "yt", ",", "\n", "outputs", ",", "updates", "=", "updates", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "1", ",", "'int8'", ")", ")", "]", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "mode", "=", "debug_mode", ")", "\n", "self", ".", "func", "[", "\"train_bwd\"", "]", ".", "insert", "(", "0", ",", "f", ")", "\n", "\n", "", "elif", "use_acc_mode", ":", "\n", "                ", "acc_counter", "=", "theano", ".", "shared", "(", "numpy", ".", "array", "(", "0", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "begin_updates", "=", "[", "(", "acc_counter", ",", "tensor", ".", "zeros_like", "(", "acc_counter", ")", ")", "]", "\n", "step_updates", "=", "[", "(", "acc_counter", ",", "acc_counter", "+", "1", ")", "]", "\n", "end_updates", "=", "[", "]", "\n", "self", ".", "acc_params", "=", "[", "]", "\n", "for", "p_dest", ",", "p_src", "in", "self", ".", "updates", ":", "\n", "                    ", "p_acc", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "p_dest", ".", "shape", ".", "eval", "(", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "broadcastable", "=", "p_dest", ".", "broadcastable", ",", "borrow", "=", "True", ")", "\n", "begin_updates", ".", "append", "(", "(", "p_acc", ",", "tensor", ".", "zeros_like", "(", "p_acc", ")", ")", ")", "\n", "step_updates", ".", "append", "(", "(", "p_acc", ",", "p_acc", "+", "p_src", ")", ")", "\n", "end_updates", ".", "append", "(", "(", "p_dest", ",", "p_acc", "/", "acc_counter", ")", ")", "\n", "self", ".", "acc_params", ".", "append", "(", "p_acc", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Constructing parameter accumulate update functions (solver=%s)\"", "%", "solver_mode", ")", "\n", "self", ".", "func", "[", "\"train_begin\"", "]", "=", "theano", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "begin_updates", ")", "\n", "self", ".", "func", "[", "\"train_step\"", "]", "=", "theano", ".", "function", "(", "[", "denet", ".", "layer", ".", "get_epoch", "(", ")", ",", "iteration", ",", "learn_rate", ",", "momentum", ",", "decay", ",", "self", ".", "input", "]", "+", "self", ".", "yt", ",", "[", "self", ".", "train_cost", "]", "+", "self", ".", "cost_list", ",", "\n", "updates", "=", "step_updates", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "1", ",", "'int8'", ")", ")", "]", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "allow_input_downcast", "=", "True", ",", "mode", "=", "debug_mode", ")", "\n", "self", ".", "func", "[", "\"train_end\"", "]", "=", "theano", ".", "function", "(", "[", "]", ",", "[", "]", ",", "updates", "=", "end_updates", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "\"Constructing parameter update function (solver=%s)\"", "%", "solver_mode", ")", "\n", "\n", "#making ", "\n", "f_input", "=", "theano", ".", "In", "(", "self", ".", "input", ",", "borrow", "=", "True", ")", "\n", "f_yt", "=", "[", "theano", ".", "In", "(", "yt", ",", "borrow", "=", "True", ")", "for", "yt", "in", "self", ".", "yt", "]", "\n", "self", ".", "func", "[", "\"train_step\"", "]", "=", "theano", ".", "function", "(", "[", "denet", ".", "layer", ".", "get_epoch", "(", ")", ",", "iteration", ",", "learn_rate", ",", "momentum", ",", "decay", ",", "f_input", "]", "+", "f_yt", ",", "[", "self", ".", "train_cost", "]", "+", "self", ".", "cost_list", ",", "\n", "updates", "=", "self", ".", "updates", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "1", ",", "'int8'", ")", ")", "]", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "allow_input_downcast", "=", "True", ",", "mode", "=", "debug_mode", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Exporting graph...\"", ")", "\n", "with", "open", "(", "\"graph.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "theano", ".", "printing", ".", "debugprint", "(", "self", ".", "func", "[", "\"train_step\"", "]", ",", "file", "=", "f", ",", "print_type", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.train_step": [[407, 446], ["denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "denet.layer.get_iteration().set_value", "numpy.array", "denet.verbose", "denet.verbose", "denet.verbose", "enumerate", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "denet.layer.get_iteration", "layer.get_target", "denet.verbose", "denet.verbose", "denet.verbose", "f_bwd", "layer.get_target", "denet.verbose", "denet.verbose", "denet.verbose", "print"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_iteration", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_target", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.denet_sparse.DeNetSparseLayer.get_target", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["", "", "", "", "def", "train_step", "(", "self", ",", "data_x", ",", "data_m", ",", "epoch", ",", "it", ",", "learning_rate", ",", "momentum", ",", "decay", ")", ":", "\n", "#assert \"train\" in self.func, \"Call build_train_func() before calling train_step()\"", "\n", "        ", "denet", ".", "layer", ".", "get_iteration", "(", ")", ".", "set_value", "(", "it", ")", "\n", "momentum", "=", "numpy", ".", "array", "(", "momentum", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "#for split mode explicitly perform bwd/fwd propagation", "\n", "if", "self", ".", "use_split_mode", ":", "\n", "\n", "#only get_targets after train_fwd has been performed", "\n", "            ", "targets", "=", "[", "]", "\n", "fwd_index", "=", "0", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "                ", "if", "layer", ".", "has_split", ":", "\n", "                    ", "logging", ".", "verbose", "(", "\"Forward prop %i\"", "%", "fwd_index", ")", "\n", "self", ".", "func", "[", "\"train_fwd\"", "]", "[", "fwd_index", "]", "(", "data_x", ")", "\n", "fwd_index", "+=", "1", "\n", "\n", "", "target", "=", "layer", ".", "get_target", "(", "self", ",", "data_x", ",", "data_m", ")", "\n", "if", "not", "target", "is", "None", ":", "\n", "                    ", "print", "(", "layer", ".", "type_name", ")", "\n", "targets", "+=", "target", "\n", "\n", "# print(targets)", "\n", "\n", "", "", "logging", ".", "verbose", "(", "\"Backward prop %i\"", "%", "0", ")", "\n", "costs", "=", "self", ".", "func", "[", "\"train_bwd\"", "]", "[", "0", "]", "(", "epoch", ",", "it", ",", "learning_rate", ",", "momentum", ",", "decay", ",", "data_x", ",", "*", "targets", ")", "\n", "for", "i", ",", "f_bwd", "in", "enumerate", "(", "self", ".", "func", "[", "\"train_bwd\"", "]", "[", "1", ":", "]", ")", ":", "\n", "                ", "logging", ".", "verbose", "(", "\"Backward prop %i\"", "%", "(", "i", "+", "1", ")", ")", "\n", "f_bwd", "(", "epoch", ",", "it", ",", "learning_rate", ",", "momentum", ",", "decay", ",", "data_x", ",", "*", "targets", ")", "\n", "", "", "else", ":", "\n", "            ", "targets", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "                ", "target", "=", "layer", ".", "get_target", "(", "self", ",", "data_x", ",", "data_m", ")", "\n", "if", "not", "target", "is", "None", ":", "\n", "                    ", "targets", "+=", "target", "\n", "\n", "", "", "costs", "=", "self", ".", "func", "[", "\"train_step\"", "]", "(", "epoch", ",", "it", ",", "learning_rate", ",", "momentum", ",", "decay", ",", "data_x", ",", "*", "targets", ")", "\n", "\n", "", "return", "costs", "[", "0", "]", ",", "costs", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.train_epoch": [[447, 471], ["denet.info", "denet.info", "denet.info", "dataset.export", "math.ceil", "range", "denet.Timer", "denet.Timer", "denet.Timer", "model_cnn.ModelCNN.train_step", "math.isnan", "denet.verbose", "denet.verbose", "denet.verbose", "Exception", "denet.Timer.current_ms"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_step", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current_ms"], ["", "def", "train_epoch", "(", "self", ",", "dataset", ",", "epoch", ",", "learning_rate", ",", "momentum", "=", "[", "0", ",", "1", ",", "0", "]", ",", "decay", "=", "0.0", ",", "solver_mode", "=", "\"sgd\"", ")", ":", "\n", "\n", "#train over batches (assume dataset size is mulitple of batch_size!)", "\n", "        ", "logging", ".", "info", "(", "\"Evaluating training function\"", ")", "\n", "dataset_x", ",", "dataset_m", ",", "dataset_size", "=", "dataset", ".", "export", "(", "self", ".", "batch_size", ")", "\n", "index_num", "=", "math", ".", "ceil", "(", "dataset_size", "/", "self", ".", "batch_size", ")", "\n", "total_cost", "=", "0", "\n", "for", "index", "in", "range", "(", "index_num", ")", ":", "\n", "\n", "#upload data to GPU and perform train step", "\n", "            ", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "data_x", "=", "dataset_x", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "data_m", "=", "dataset_m", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "cost", ",", "_", "=", "self", ".", "train_step", "(", "data_x", ",", "data_m", ",", "epoch", ",", "self", ".", "iteration", ",", "learning_rate", ",", "momentum", ",", "decay", ")", "\n", "\n", "#watch out for GPU's randomly producing NaN!", "\n", "if", "math", ".", "isnan", "(", "cost", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"ERROR: Cost is NaN\"", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"Batch %i.%i - iteration: %i cost:\"", "%", "(", "epoch", ",", "index", "*", "self", ".", "batch_size", ",", "self", ".", "iteration", ")", ",", "cost", ",", "\"took: %i ms\"", "%", "timer", ".", "current_ms", "(", ")", ")", "\n", "total_cost", "+=", "cost", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output_step": [[473, 479], ["denet.info", "denet.info", "denet.info", "theano.function", "theano.function", "theano.function", "theano.function", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "theano.cast", "theano.cast"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train"], ["", "def", "predict_output_step", "(", "self", ",", "data_x", ")", ":", "\n", "        ", "if", "not", "\"predict\"", "in", "self", ".", "func", ":", "\n", "            ", "logging", ".", "info", "(", "\"Building predict function\"", ")", "\n", "self", ".", "func", "[", "\"predict\"", "]", "=", "theano", ".", "function", "(", "[", "self", ".", "input", "]", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "tensor", ".", "cast", "(", "0", ",", "'int8'", ")", ")", "]", ",", "on_unused_input", "=", "'ignore'", ")", "\n", "\n", "", "return", "self", ".", "func", "[", "\"predict\"", "]", "(", "data_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output": [[481, 505], ["dataset.export", "model_cnn.ModelCNN.predict_output_step", "denet.Timer", "denet.Timer", "denet.Timer", "math.ceil", "range", "numpy.concatenate", "denet.verbose", "denet.verbose", "denet.verbose", "model_cnn.ModelCNN.predict_output_step", "numpy.concatenate.append", "numpy.concatenate.resize", "list", "tuple", "denet.Timer.current"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output_step", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.concatenate", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output_step", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current"], ["", "def", "predict_output", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "dataset_x", ",", "dataset_y", ",", "dataset_size", "=", "dataset", ".", "export", "(", "self", ".", "batch_size", ")", "\n", "\n", "#dummy call to build function", "\n", "self", ".", "predict_output_step", "(", "dataset_x", "[", ":", "self", ".", "batch_size", "]", ")", "\n", "\n", "#evaluate function", "\n", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "n", "=", "math", ".", "ceil", "(", "dataset_size", "/", "self", ".", "batch_size", ")", "\n", "pr", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "n", ")", ":", "\n", "            ", "data_x", "=", "dataset_x", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "pr_batch", "=", "self", ".", "predict_output_step", "(", "data_x", ")", "\n", "pr", ".", "append", "(", "pr_batch", ")", "\n", "", "pr", "=", "numpy", ".", "concatenate", "(", "pr", ",", "axis", "=", "0", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Prediction took %.3f sec for %i samples\"", "%", "(", "timer", ".", "current", "(", ")", ",", "pr", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "#crop dummy data", "\n", "if", "(", "dataset_size", "%", "self", ".", "batch_size", ")", "!=", "0", ":", "\n", "            ", "s", "=", "[", "dataset_size", "]", "+", "list", "(", "pr", ".", "shape", "[", "1", ":", "]", ")", "\n", "pr", ".", "resize", "(", "tuple", "(", "s", ")", ",", "refcheck", "=", "False", ")", "\n", "\n", "", "return", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_label": [[507, 512], ["model_cnn.ModelCNN.predict_output", "numpy.argmax", "range"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output"], ["", "def", "predict_label", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "pr", "=", "self", ".", "predict_output", "(", "dataset", ")", "\n", "assert", "pr", ".", "ndim", "==", "2", "\n", "predict", "=", "[", "numpy", ".", "argmax", "(", "pr", "[", "i", ",", "...", "]", ")", "for", "i", "in", "range", "(", "pr", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "predict", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_custom": [[514, 540], ["dataset.export", "math.ceil", "tuple", "numpy.zeros", "range", "output_func", "list", "numpy.zeros.resize", "tuple", "list"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.resize"], ["", "def", "predict_custom", "(", "self", ",", "dataset", ",", "output_func", ",", "output_shape", ")", ":", "\n", "\n", "#upload data to GPU", "\n", "        ", "dataset_x", ",", "dataset_y", ",", "dataset_size", "=", "dataset", ".", "export", "(", "self", ".", "batch_size", ")", "\n", "\n", "#evaluate function", "\n", "n", "=", "math", ".", "ceil", "(", "dataset_size", "/", "self", ".", "batch_size", ")", "\n", "shape", "=", "tuple", "(", "[", "n", "*", "output_shape", "[", "0", "]", "]", "+", "list", "(", "output_shape", ")", "[", "1", ":", "]", ")", "\n", "result", "=", "numpy", ".", "zeros", "(", "shape", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "for", "index", "in", "range", "(", "n", ")", ":", "\n", "            ", "i0", "=", "index", "*", "self", ".", "batch_size", "\n", "i1", "=", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "\n", "data_x", "=", "dataset_x", "[", "i0", ":", "i1", "]", "\n", "data_y", "=", "output_func", "(", "data_x", ")", "\n", "\n", "i0", "=", "index", "*", "output_shape", "[", "0", "]", "\n", "i1", "=", "(", "index", "+", "1", ")", "*", "output_shape", "[", "0", "]", "\n", "result", "[", "i0", ":", "i1", ",", "...", "]", "=", "data_y", "[", "...", "]", "\n", "\n", "#crop dummy data", "\n", "", "if", "(", "dataset_size", "%", "self", ".", "batch_size", ")", "!=", "0", ":", "\n", "            ", "s", "=", "list", "(", "result", ".", "shape", ")", "\n", "s", "[", "0", "]", "=", "dataset_size", "\n", "result", ".", "resize", "(", "tuple", "(", "s", ")", ",", "refcheck", "=", "False", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_json": [[24, 29], ["model_cnn.ModelCNN", "model_cnn.ModelCNN.import_json"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["def", "load_from_json", "(", "json_obj", ",", "batch_size", "=", "32", ",", "layer_range", "=", "None", ")", ":", "\n", "    ", "model", "=", "ModelCNN", "(", ")", "\n", "model", ".", "batch_size", "=", "batch_size", "\n", "model", ".", "import_json", "(", "json_obj", ",", "layer_range", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_file": [[31, 38], ["time.time", "denet.info", "model_cnn.load_from_json", "denet.verbose", "denet.json_from_gz", "time.time"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_gz"], ["", "def", "load_from_file", "(", "fname", ",", "batch_size", "=", "32", ",", "layer_range", "=", "None", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "\"Loading model from %s\"", "%", "fname", ")", "\n", "model", "=", "load_from_json", "(", "common", ".", "json_from_gz", "(", "fname", ")", ",", "batch_size", ",", "layer_range", ")", "\n", "model", ".", "fname", "=", "fname", "\n", "logging", ".", "verbose", "(", "\"Loading model took %.2f sec\"", "%", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file": [[40, 45], ["denet.info", "time.time", "denet.json_to_gz", "denet.verbose", "model.export_json", "time.time"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_gz", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json"], ["", "def", "save_to_file", "(", "model", ",", "fname", ",", "compresslevel", "=", "9", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Saving model to %s\"", "%", "fname", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "common", ".", "json_to_gz", "(", "fname", ",", "model", ".", "export_json", "(", ")", ",", "compresslevel", ")", "\n", "logging", ".", "verbose", "(", "\"Saving model took %.2f sec\"", "%", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.initialize": [[46, 78], ["denet.info", "denet.info", "model_cnn.ModelCNN", "load_from_file.build", "model_cnn.load_from_file", "len", "denet.info", "int", "list", "str", "str"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "def", "initialize", "(", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ")", ":", "\n", "\n", "    ", "cudnn_info", "=", "(", "theano", ".", "config", ".", "dnn", ".", "conv", ".", "algo_fwd", ",", "theano", ".", "config", ".", "dnn", ".", "conv", ".", "algo_bwd_data", ",", "theano", ".", "config", ".", "dnn", ".", "conv", ".", "algo_bwd_filter", ")", "\n", "logging", ".", "info", "(", "\"Using theano version:\"", ",", "theano", ".", "__version__", ",", "\"(cudnn fwd=%s,bwd data=%s,bwd filter=%s)\"", "%", "cudnn_info", ")", "\n", "if", "args", ".", "model", "is", "None", ":", "\n", "\n", "#construct convolutional model", "\n", "        ", "logging", ".", "info", "(", "\"Building convolutional model (%i classes)...\"", "%", "class_num", ")", "\n", "model", "=", "ModelCNN", "(", ")", "\n", "model", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "model", ".", "class_labels", "=", "class_labels", "\n", "model", ".", "class_num", "=", "class_num", "\n", "\n", "#allow padding to be specified in border mode", "\n", "try", ":", "\n", "            ", "n", "=", "int", "(", "args", ".", "border_mode", ")", "\n", "border_mode", "=", "(", "n", ",", "n", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "border_mode", "=", "args", ".", "border_mode", "\n", "\n", "", "model", ".", "build", "(", "args", ".", "model_desc", ",", "data_shape", ",", "args", ".", "activation", ",", "border_mode", ",", "list", "(", "args", ".", "weight_init", ")", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "load_from_file", "(", "args", ".", "model", ",", "args", ".", "batch_size", ")", "\n", "model", ".", "class_labels", "=", "class_labels", "\n", "model", ".", "class_num", "=", "class_num", "\n", "assert", "data_shape", "==", "model", ".", "data_shape", ",", "\"Mismatching data shapes in .mdl and data: \"", "+", "str", "(", "data_shape", ")", "+", "\"!=\"", "+", "str", "(", "model", ".", "data_shape", ")", "\n", "\n", "", "model", ".", "skip_layer_updates", "=", "args", ".", "skip_layer_updates", "\n", "if", "len", "(", "model", ".", "skip_layer_updates", ")", ">", "0", ":", "\n", "        ", "logging", ".", "info", "(", "\"Skipping layer updates:\"", ",", "model", ".", "skip_layer_updates", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.debug_denet_export_targets": [[541, 572], ["denet.debug", "range", "set", "enumerate", "model.class_labels.items", "zip", "denet.export_activation_rgb", "denet.ndarray_unpack", "denet.export_activation", "objs.append", "denet.ndarray_unpack", "enumerate", "denet.export_activation", "denet.debug", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_activation_rgb", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_activation", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_activation", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug"], ["", "", "def", "debug_denet_export_targets", "(", "model", ",", "data_x", ",", "data_m", ",", "targets", ")", ":", "\n", "    ", "logging", ".", "debug", "(", "\"DEBUGGING! Exporting targets\"", ")", "\n", "class_labels_inv", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "model", ".", "class_labels", ".", "items", "(", ")", "}", "\n", "for", "b", "in", "range", "(", "model", ".", "batch_size", ")", ":", "\n", "\n", "#export ground truth", "\n", "        ", "for", "cls", "in", "set", "(", "data_m", "[", "b", "]", "[", "\"class\"", "]", ")", ":", "\n", "            ", "objs", "=", "[", "]", "\n", "for", "obj_cls", ",", "obj", "in", "zip", "(", "data_m", "[", "b", "]", "[", "\"class\"", "]", ",", "data_m", "[", "b", "]", "[", "\"objs\"", "]", ")", ":", "\n", "                ", "if", "obj_cls", "==", "cls", ":", "\n", "                    ", "objs", ".", "append", "(", "obj", ")", "\n", "", "", "common", ".", "export_activation_rgb", "(", "\"%06i_gt_%s.png\"", "%", "(", "b", ",", "class_labels_inv", "[", "cls", "]", ")", ",", "data_x", "[", "b", ",", ":", ",", ":", ",", ":", "]", ",", "objs", ")", "\n", "\n", "#export targets", "\n", "", "for", "index", ",", "layer", "in", "enumerate", "(", "model", ".", "cost_layers", ")", ":", "\n", "\n", "            ", "yt_index", "=", "targets", "[", "index", "*", "2", "+", "0", "]", "\n", "yt_value", "=", "targets", "[", "index", "*", "2", "+", "1", "]", "\n", "if", "layer", ".", "type_name", "==", "\"denet-corner\"", ":", "\n", "                ", "corner_pr", ",", "=", "common", ".", "ndarray_unpack", "(", "yt_value", ",", "[", "layer", ".", "corner_shape", "]", ")", "\n", "common", ".", "export_activation", "(", "\"%06i_l%i_corner.png\"", "%", "(", "b", ",", "index", ")", ",", "corner_pr", "[", "b", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "elif", "layer", ".", "type_name", "==", "\"denet-detect\"", ":", "\n", "                ", "det_pr", ",", "=", "common", ".", "ndarray_unpack", "(", "yt_value", ",", "[", "layer", ".", "det_shape", "]", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "layer", ".", "sparse_layer", ".", "sample_bboxs", "[", "b", "]", ")", ":", "\n", "                    ", "sample_i", "=", "i", "%", "layer", ".", "sparse_layer", ".", "sample_num", "\n", "sample_j", "=", "i", "//", "layer", ".", "sparse_layer", ".", "sample_num", "\n", "logging", ".", "debug", "(", "\"%i - sample:\"", "%", "b", ",", "(", "sample_i", ",", "sample_j", ")", ",", "\"bbox:\"", ",", "(", "int", "(", "sample", "[", "2", "]", "[", "0", "]", "*", "model", ".", "width", ")", ",", "int", "(", "sample", "[", "2", "]", "[", "1", "]", "*", "model", ".", "height", ")", ",", "int", "(", "sample", "[", "2", "]", "[", "2", "]", "*", "model", ".", "width", ")", ",", "\n", "int", "(", "sample", "[", "2", "]", "[", "3", "]", "*", "model", ".", "height", ")", ")", ",", "\"pr:\"", ",", "sample", "[", "1", "]", ",", "\"corner:\"", ",", "sample", "[", "0", "]", ")", "\n", "\n", "", "common", ".", "export_activation", "(", "\"%06i_l%i_det.png\"", "%", "(", "b", ",", "index", ")", ",", "det_pr", "[", "b", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.model.update_bn.main": [[17, 82], ["argparse.ArgumentParser", "denet.add_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "denet.init", "denet.info", "denet.load_from_file", "denet.info", "denet.info", "denet.load", "dataset.load.shuffle", "dataset.load.load_from_subset", "dataset.load.prepare", "data.prepare.export", "denet.info", "enumerate", "denet.save_to_file", "denet.info", "theano.function", "numpy.zeros", "numpy.zeros", "denet.info", "range", "denet.verbose", "denet.verbose", "denet.verbose", "denet.verbose", "layer.mean.set_value", "layer.stdinv.set_value", "bn_layers.append", "len", "theano.function.", "numpy.sqrt", "layer.mean.get_value", "layer.stdinv.get_value", "layer.input.mean", "layer.input.var", "bn_layers.append", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "denet.layer.get_train", "theano.tensor.cast"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.add_arguments", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.load_from_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.export", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train", "home.repos.pwc.inspect_result.lachlants_denet.layer.__init__.get_train"], ["def", "main", "(", "argv", "=", "None", ")", ":", "\n", "\n", "#load arguments:", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Predict labels using trained model'", ")", "\n", "logging", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "True", ",", "help", "=", "\"input model file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "required", "=", "True", ",", "help", "=", "\"output model file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input\"", ",", "required", "=", "True", ",", "help", "=", "\"The folder with data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extension\"", ",", "default", "=", "\"png\"", ",", "help", "=", "\"Image file extension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"Size of processing batchs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thread-num\"", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "\"Number of threads for dataset loading\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "init", "(", "args", ")", "\n", "\n", "logging", ".", "info", "(", "\"Loading model: \"", ",", "args", ".", "model", ")", "\n", "model", "=", "model_cnn", ".", "load_from_file", "(", "args", ".", "model", ",", "args", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"Class labels:\\n\"", ",", "model", ".", "class_labels", ")", "\n", "\n", "logging", ".", "info", "(", "\"Loading Dataset...\"", ")", "\n", "data", "=", "dataset", ".", "load", "(", "args", ".", "input", ",", "args", ".", "extension", ",", "is_training", "=", "True", ",", "thread_num", "=", "args", ".", "thread_num", ")", "\n", "data", ".", "shuffle", "(", ")", "\n", "data", ".", "load_from_subset", "(", "0", ")", "\n", "dataset_p", "=", "data", ".", "prepare", "(", "model", ".", "width", ",", "model", ".", "height", ",", "model", ".", "image_border", ",", "model", ".", "distort_mode", ",", "True", ",", "copy_data", "=", "False", ")", "\n", "dataset_x", ",", "_", ",", "dataset_size", "=", "dataset_p", ".", "export", "(", "args", ".", "batch_size", ")", "\n", "\n", "#find all batch norm layers", "\n", "bn_layers", "=", "[", "]", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "layer", ".", "type_name", "in", "[", "\"batchnorm\"", ",", "\"batchnorm-relu\"", "]", ":", "\n", "            ", "bn_layers", ".", "append", "(", "layer", ")", "\n", "", "elif", "layer", ".", "type_name", "==", "\"resnet\"", ":", "\n", "            ", "for", "l", "in", "layer", ".", "layers", ":", "\n", "                ", "if", "l", ".", "type_name", "in", "[", "\"batchnorm\"", ",", "\"batchnorm-relu\"", "]", ":", "\n", "                    ", "bn_layers", ".", "append", "(", "l", ")", "\n", "\n", "", "", "", "", "logging", ".", "info", "(", "\"Found %i batch norm layers\"", "%", "len", "(", "bn_layers", ")", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "bn_layers", ")", ":", "\n", "        ", "bn_func", "=", "theano", ".", "function", "(", "[", "model", ".", "input", "]", ",", "[", "layer", ".", "input", ".", "mean", "(", "axis", "=", "[", "0", ",", "2", ",", "3", "]", ")", ",", "layer", ".", "input", ".", "var", "(", "axis", "=", "[", "0", ",", "2", ",", "3", "]", ")", "]", ",", "givens", "=", "[", "(", "denet", ".", "layer", ".", "get_train", "(", ")", ",", "theano", ".", "tensor", ".", "cast", "(", "0", ",", "'int8'", ")", ")", "]", ")", "\n", "bn_mean", "=", "numpy", ".", "zeros", "(", "(", "layer", ".", "input_shape", "[", "1", "]", ",", ")", ",", "numpy", ".", "float64", ")", "\n", "bn_var", "=", "numpy", ".", "zeros", "(", "(", "layer", ".", "input_shape", "[", "1", "]", ",", ")", ",", "numpy", ".", "float64", ")", "\n", "\n", "logging", ".", "info", "(", "\"Estimating mean and var for layer %i with %i samples\"", "%", "(", "i", ",", "dataset_size", ")", ")", "\n", "n", "=", "dataset_size", "//", "args", ".", "batch_size", "\n", "for", "b", "in", "range", "(", "n", ")", ":", "\n", "            ", "u", ",", "v", "=", "bn_func", "(", "dataset_x", "[", "b", "*", "args", ".", "batch_size", ":", "(", "b", "+", "1", ")", "*", "args", ".", "batch_size", "]", ")", "\n", "bn_mean", "+=", "u", "\n", "bn_var", "+=", "v", "\n", "\n", "", "eps", "=", "1e-5", "\n", "bn_mean", "=", "(", "bn_mean", "/", "n", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "bn_var", "=", "(", "bn_var", "/", "n", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "bn_invstd", "=", "1.0", "/", "(", "numpy", ".", "sqrt", "(", "bn_var", "+", "eps", ")", ")", "\n", "\n", "logging", ".", "verbose", "(", "\"Layer %i - Old Mean:\"", "%", "i", ",", "layer", ".", "mean", ".", "get_value", "(", ")", ")", "\n", "logging", ".", "verbose", "(", "\"Layer %i - New Mean:\"", "%", "i", ",", "bn_mean", ")", "\n", "logging", ".", "verbose", "(", "\"Layer %i - Old Std:\"", "%", "i", ",", "layer", ".", "stdinv", ".", "get_value", "(", ")", ")", "\n", "logging", ".", "verbose", "(", "\"Layer %i - New Std:\"", "%", "i", ",", "bn_invstd", ")", "\n", "\n", "layer", ".", "mean", ".", "set_value", "(", "bn_mean", ",", "borrow", "=", "True", ")", "\n", "layer", ".", "stdinv", ".", "set_value", "(", "bn_invstd", ",", "borrow", "=", "True", ")", "\n", "\n", "", "model_cnn", ".", "save_to_file", "(", "model", ",", "args", ".", "output", ")", "\n", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train.compute_error": [[18, 39], ["range", "data.load_from_subset", "denet.info", "model.predict_label", "data.get_labels", "range", "sum", "len", "sum", "range"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_label", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_labels"], ["def", "compute_error", "(", "data", ",", "model", ")", ":", "\n", "\n", "    ", "class_errors", "=", "[", "0", "]", "*", "model", ".", "class_num", "\n", "class_samples", "=", "[", "0", "]", "*", "model", ".", "class_num", "\n", "for", "subset", "in", "range", "(", "data", ".", "subset_num", ")", ":", "\n", "        ", "data", ".", "load_from_subset", "(", "subset", ")", "\n", "\n", "#logging.info(\"Preparing test data\")", "\n", "#test_data = data.prepare(model.width, model.height, model.image_border, model.distort_mode, training=False)", "\n", "\n", "logging", ".", "info", "(", "\"Computing error...\"", ")", "\n", "labels_predict", "=", "model", ".", "predict_label", "(", "data", ")", "\n", "labels", "=", "data", ".", "get_labels", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "class_samples", "[", "labels", "[", "i", "]", "]", "+=", "1", "\n", "if", "labels_predict", "[", "i", "]", "!=", "labels", "[", "i", "]", ":", "\n", "                ", "class_errors", "[", "labels", "[", "i", "]", "]", "+=", "1", "\n", "\n", "", "", "", "error", "=", "100.0", "*", "sum", "(", "class_errors", ")", "/", "sum", "(", "class_samples", ")", "\n", "class_errors", "=", "[", "(", "i", ",", "100.0", "*", "class_errors", "[", "i", "]", "/", "class_samples", "[", "i", "]", ",", "class_samples", "[", "i", "]", ")", "for", "i", "in", "range", "(", "model", ".", "class_num", ")", "]", "\n", "return", "(", "error", ",", "class_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train.save_results": [[40, 45], ["open", "print", "print"], "function", ["None"], ["", "def", "save_results", "(", "fname", ",", "error", ",", "class_errors", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "print", "(", "\"Overall Error=%.2f%%\"", "%", "(", "error", ")", ",", "file", "=", "f", ")", "\n", "for", "d", "in", "class_errors", ":", "\n", "            ", "print", "(", "\"Class %i=%.2f%% (%i samples)\"", "%", "(", "d", "[", "0", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", "*", "d", "[", "1", "]", "/", "100", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.model.train.main": [[46, 157], ["argparse.ArgumentParser", "denet.add_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "denet.init", "random.seed", "numpy.random.seed", "denet.info", "denet.load", "dataset.load.get_data_shape", "dataset.load.get_class_num", "denet.info", "denet.info", "denet.initialize", "model_cnn.initialize.build_train_func", "range", "denet.save_to_file", "denet.info", "random.sample", "dataset.load.augment_mirror", "denet.info", "denet.load", "denet.info", "len", "denet.info", "dataset.load.shuffle", "range", "denet.verbose", "train.compute_error", "denet.info", "train.save_results", "denet.save_to_file", "denet.Timer", "dataset.load.load_from_subset", "denet.info", "model_cnn.initialize.train_epoch", "math.ceil", "denet.info", "len", "str", "len", "int", "str", "common.Timer.current", "len"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.add_arguments", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.get_data_shape", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.get_class_num", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.initialize", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_train_func", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.augment_mirror", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.shuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.model.train.compute_error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.train.save_results", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.save_to_file", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load_from_subset", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.train_epoch", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current"], ["", "", "", "def", "main", "(", ")", ":", "\n", "\n", "#load arguments:", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a convolutional network using labelled data.'", ")", "\n", "logging", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "False", ",", "default", "=", "None", ",", "help", "=", "\"Model to continue training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cost-factors\"", ",", "default", "=", "[", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Multiplicative factors for model costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thread-num\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of threads to use for supported opeartions (e.g. loading/distorting datasets)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extension\"", ",", "default", "=", "\"ppm\"", ",", "help", "=", "\"Image file extension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train\"", ",", "default", "=", "None", ",", "help", "=", "\"The folder with training / validation data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "default", "=", "None", ",", "help", "=", "\"The folder with testing data (optional)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-epochs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Epochs between each test evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-mode\"", ",", "default", "=", "\"default\"", ",", "help", "=", "\"Mode to use for testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--border-mode\"", ",", "default", "=", "\"valid\"", ",", "help", "=", "\"Border mode for convolutional layers (full, valid)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-prefix\"", ",", "default", "=", "\"./model\"", ",", "help", "=", "\"Output prefix for model files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--activation\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Activation function used in convolution / hidden layers (tanh, relu, leaky-relu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--solver\"", ",", "type", "=", "str", ",", "default", "=", "\"nesterov\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-init\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "\"he-backward\"", "]", ",", "help", "=", "\"Weight initialization scheme\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-rate\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Learning rate for weights and biases.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-momentum\"", ",", "type", "=", "float", ",", "default", "=", "[", "0.0", ",", "0.0", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Learning momentum for weights and biases (0.0 - 1.0).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-anneal\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\"Annealing factor per epoch for weight and bias learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-anneal-epochs\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ",", "help", "=", "\"Epochs to apply learning rate annealing (default every epoch)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learn-decay\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"L2 weight decay (not applied to biases). \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"The number of training epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-samples\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Maximum samples to load from training set\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"Size of processing batchs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "23455", ",", "help", "=", "\"Random Seed for weights\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distort-mode\"", ",", "default", "=", "[", "]", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"Distortions to apply to training data (default, cifar10, disable)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--disable-intermediate\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Disable outputting of intermediate model files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--augment-mirror\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Augment training data with horizontally mirrored copies\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--skip-train\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Skip training of model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--skip-layer-updates\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ",", "help", "=", "\"Skip training updates to specified layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-desc\"", ",", "default", "=", "[", "\"C[100,7]\"", ",", "\"P[2]\"", ",", "\"C[150,4]\"", ",", "\"P[2]\"", ",", "\"C[250,4]\"", ",", "\"P[2]\"", ",", "\"C[300,1]\"", ",", "\"R\"", "]", ",", "nargs", "=", "\"+\"", ",", "type", "=", "str", ",", "help", "=", "\"Network layer description\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "init", "(", "args", ")", "\n", "\n", "#set random seeds", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "#load training dataset", "\n", "logging", ".", "info", "(", "\"Loading training data:\"", ",", "args", ".", "train", ")", "\n", "train_data", "=", "dataset", ".", "load", "(", "args", ".", "train", ",", "args", ".", "extension", ",", "is_training", "=", "True", ",", "thread_num", "=", "args", ".", "thread_num", ")", "\n", "data_shape", "=", "train_data", ".", "get_data_shape", "(", ")", "\n", "class_num", "=", "train_data", ".", "get_class_num", "(", ")", "\n", "class_labels", "=", "train_data", ".", "class_labels", "\n", "logging", ".", "info", "(", "\"Found %i class labels:\\n\"", "%", "class_num", ",", "class_labels", ")", "\n", "\n", "#hack for reducing training data size", "\n", "if", "not", "args", ".", "max_samples", "is", "None", ":", "\n", "        ", "train_data", ".", "data", "=", "random", ".", "sample", "(", "train_data", ".", "data", ",", "args", ".", "max_samples", ")", "\n", "\n", "#mirror training data", "\n", "", "if", "args", ".", "augment_mirror", ":", "\n", "        ", "train_data", ".", "augment_mirror", "(", ")", ";", "\n", "\n", "", "logging", ".", "info", "(", "\"Training: %i samples\"", "%", "len", "(", "train_data", ")", ")", "\n", "\n", "#load test dataset", "\n", "if", "args", ".", "test", ":", "\n", "        ", "logging", ".", "info", "(", "\"Loading test: \"", "+", "args", ".", "test", ")", "\n", "test_data", "=", "dataset", ".", "load", "(", "args", ".", "test", ",", "args", ".", "extension", ",", "is_training", "=", "False", ",", "thread_num", "=", "args", ".", "thread_num", ",", "class_labels", "=", "class_labels", ")", "\n", "\n", "#initialize model", "\n", "", "model", "=", "model_cnn", ".", "initialize", "(", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ")", "\n", "model", ".", "build_train_func", "(", "args", ".", "solver", ",", "args", ".", "cost_factors", ")", "\n", "\n", "#Run training", "\n", "best_test_error", "=", "100.0", "\n", "learn_rate", "=", "args", ".", "learn_rate", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"----- Training Epoch: %i -----\"", "%", "epoch", ")", "\n", "\n", "#perform training", "\n", "if", "not", "args", ".", "skip_train", ":", "\n", "\n", "            ", "logging", ".", "info", "(", "\"Training with solver \"", "+", "args", ".", "solver", "+", "\", learning rate \"", "+", "str", "(", "learn_rate", ")", "+", "\" and momentum \"", "+", "str", "(", "args", ".", "learn_momentum", ")", ")", "\n", "\n", "#shuffle dataset:", "\n", "train_data", ".", "shuffle", "(", ")", "\n", "\n", "for", "subset", "in", "range", "(", "train_data", ".", "subset_num", ")", ":", "\n", "                ", "timer", "=", "common", ".", "Timer", "(", ")", "\n", "train_data", ".", "load_from_subset", "(", "subset", ")", "\n", "\n", "logging", ".", "info", "(", "\"Performing Gradient Descent...\"", ")", "\n", "cost", "=", "model", ".", "train_epoch", "(", "train_data", ",", "epoch", ",", "learn_rate", ",", "args", ".", "learn_momentum", ",", "args", ".", "learn_decay", ")", "\n", "\n", "nbatch", "=", "math", ".", "ceil", "(", "len", "(", "train_data", ")", "/", "model", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"Training subset %i - Cost: %.3f, Took %.1f sec\"", "%", "(", "subset", ",", "cost", ",", "timer", ".", "current", "(", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "args", ".", "learn_anneal_epochs", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "args", ".", "learn_anneal_epochs", ":", "\n", "            ", "logging", ".", "verbose", "(", "\"Annealing learning rate\"", ")", "\n", "learn_rate", "*=", "args", ".", "learn_anneal", "\n", "\n", "#perform testing", "\n", "", "test_error", "=", "0", "\n", "if", "not", "args", ".", "test", "is", "None", "and", "(", "(", "epoch", "%", "args", ".", "test_epochs", ")", "==", "0", "or", "epoch", "==", "(", "args", ".", "epochs", "-", "1", ")", ")", ":", "\n", "            ", "test_error", ",", "test_class_errors", "=", "compute_error", "(", "test_data", ",", "model", ")", "\n", "logging", ".", "info", "(", "\"Epoch %i test error: %.2f%% (%i samples)\"", "%", "(", "epoch", ",", "test_error", ",", "int", "(", "test_error", "*", "len", "(", "test_data", ")", "/", "100.0", ")", ")", ")", "\n", "save_results", "(", "args", ".", "output_prefix", "+", "\"_epoch%03i.test\"", "%", "epoch", ",", "test_error", ",", "test_class_errors", ")", "\n", "\n", "#save intermediate models", "\n", "", "if", "not", "args", ".", "disable_intermediate", ":", "\n", "            ", "model_cnn", ".", "save_to_file", "(", "model", ",", "args", ".", "output_prefix", "+", "\"_epoch%03i.mdl.gz\"", "%", "(", "epoch", ")", ")", "\n", "\n", "\n", "#save final model", "\n", "", "", "model_cnn", ".", "save_to_file", "(", "model", ",", "args", ".", "output_prefix", "+", "\"_epoch%03i_final.mdl.gz\"", "%", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.__init__": [[12, 29], ["numpy.prod", "multiprocessing.RawArray", "multiprocessing.RLock", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "num_elems", "=", "numpy", ".", "prod", "(", "shape", ")", "\n", "\n", "if", "dtype", "==", "numpy", ".", "int32", ":", "\n", "            ", "c_type", "=", "ctypes", ".", "c_int", "\n", "", "elif", "dtype", "==", "numpy", ".", "float32", ":", "\n", "            ", "c_type", "=", "ctypes", ".", "c_float", "\n", "", "elif", "dtype", "==", "numpy", ".", "float64", ":", "\n", "            ", "c_type", "=", "ctypes", ".", "c_double", "\n", "", "else", ":", "\n", "            ", "assert", "(", "0", ")", "\n", "\n", "#shared storage for numpy array", "\n", "", "self", ".", "shape", "=", "shape", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "base", "=", "mp", ".", "RawArray", "(", "c_type", ",", "int", "(", "num_elems", ")", ")", "\n", "self", ".", "lock", "=", "mp", ".", "RLock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.add_array": [[31, 34], ["shared.Array.get_array", "p.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "add_array", "(", "self", ",", "p", ")", ":", "\n", "        ", "with", "p", ".", "lock", ",", "self", ".", "lock", ":", "\n", "            ", "self", ".", "get_array", "(", ")", "[", "...", "]", "+=", "p", ".", "get_array", "(", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.set_array": [[35, 38], ["shared.Array.get_array", "p.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "set_array", "(", "self", ",", "p", ")", ":", "\n", "        ", "with", "p", ".", "lock", ",", "self", ".", "lock", ":", "\n", "            ", "self", ".", "get_array", "(", ")", "[", "...", "]", "=", "p", ".", "get_array", "(", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.fill_value": [[39, 42], ["shared.Array.get_array().fill", "shared.Array.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "fill_value", "(", "self", ",", "v", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "get_array", "(", ")", ".", "fill", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.mul_value": [[43, 46], ["shared.Array.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "mul_value", "(", "self", ",", "v", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "get_array", "(", ")", "[", "...", "]", "*=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.div_value": [[47, 49], ["shared.Array.mul_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.mul_value"], ["", "", "def", "div_value", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "mul_value", "(", "1.0", "/", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array": [[50, 54], ["numpy.frombuffer", "numpy.frombuffer.reshape"], "methods", ["None"], ["", "def", "get_array", "(", "self", ")", ":", "\n", "#when lock is true, base doesn't have get_obj", "\n", "        ", "array", "=", "numpy", ".", "frombuffer", "(", "self", ".", "base", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "return", "array", ".", "reshape", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.export_json": [[56, 60], ["denet.numpy_to_json", "shared.Array.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.json_util.numpy_to_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "r", "=", "common", ".", "numpy_to_json", "(", "self", ".", "get_array", "(", ")", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.import_json": [[61, 64], ["denet.numpy_from_json", "shared.Array.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.json_util.numpy_from_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "import_json", "(", "self", ",", "data", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "get_array", "(", ")", "[", "...", "]", "=", "common", ".", "numpy_from_json", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.__init__": [[67, 78], ["open", "json.load", "tuple", "tuple", "shared.Array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "batch_size", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "dims_fname", "=", "fname", "\n", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "json_data", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "batch_size", "is", "None", ":", "\n", "                ", "batch_size", "=", "json_data", "[", "\"input\"", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "input_shape", "=", "tuple", "(", "[", "batch_size", "]", "+", "json_data", "[", "\"input\"", "]", "[", "1", ":", "]", ")", "\n", "self", ".", "output_shape", "=", "tuple", "(", "[", "batch_size", "]", "+", "json_data", "[", "\"output\"", "]", "[", "1", ":", "]", ")", "\n", "self", ".", "updates", "=", "[", "Array", "(", "dim", "[", "\"shape\"", "]", ",", "numpy", ".", "float32", ")", "for", "dim", "in", "json_data", "[", "\"dims\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy": [[80, 85], ["shared.ModelUpdate", "range", "len", "ModelUpdate.updates[].set_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.set_array"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "r", "=", "ModelUpdate", "(", "self", ".", "dims_fname", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "r", ".", "updates", "[", "i", "]", ".", "set_array", "(", "self", ".", "updates", "[", "i", "]", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.get_samples": [[87, 89], ["update.get_array().flatten", "update.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "get_samples", "(", "self", ")", ":", "\n", "        ", "return", "[", "update", ".", "get_array", "(", ")", ".", "flatten", "(", ")", "[", "0", "]", "for", "update", "in", "self", ".", "updates", "]", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_updates": [[90, 93], ["enumerate", "p.set_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.set_array"], ["", "def", "set_updates", "(", "self", ",", "shared_params", ")", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "updates", ")", ":", "\n", "            ", "p", ".", "set_array", "(", "shared_params", ".", "updates", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.add_delta": [[94, 98], ["range", "len", "shared.ModelUpdate.updates[].get_array", "model_update.updates[].get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "add_delta", "(", "self", ",", "model_update", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "with", "self", ".", "updates", "[", "i", "]", ".", "lock", ",", "model_update", ".", "updates", "[", "i", "]", ".", "lock", ":", "\n", "                ", "self", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", "[", "...", "]", "+=", "alpha", "*", "model_update", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_delta": [[99, 103], ["range", "len", "shared.ModelUpdate.updates[].get_array", "model_update.updates[].get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "", "def", "set_delta", "(", "self", ",", "model_update", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "with", "self", ".", "updates", "[", "i", "]", ".", "lock", ",", "model_update", ".", "updates", "[", "i", "]", ".", "lock", ":", "\n", "                ", "self", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", "[", "...", "]", "-=", "model_update", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_init": [[105, 109], ["range", "len", "shared.ModelUpdate.updates[].fill_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.fill_value"], ["", "", "", "def", "set_mean_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "update_num", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "self", ".", "updates", "[", "i", "]", ".", "fill_value", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_update": [[111, 115], ["range", "len", "shared.ModelUpdate.updates[].add_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.add_array"], ["", "", "def", "set_mean_update", "(", "self", ",", "shared_params", ")", ":", "\n", "        ", "self", ".", "update_num", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "self", ".", "updates", "[", "i", "]", ".", "add_array", "(", "shared_params", ".", "updates", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean_finish": [[117, 120], ["range", "len", "shared.ModelUpdate.updates[].div_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.div_value"], ["", "", "def", "set_mean_finish", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "self", ".", "updates", "[", "i", "]", ".", "div_value", "(", "self", ".", "update_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean": [[122, 145], ["shared.ModelUpdate.updates[].fill_value", "shared.ModelUpdate.updates[].div_value", "range", "shared.ModelUpdate.updates[].add_array", "len", "len", "shared.ModelUpdate.set_mean.set_mean_delta"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.fill_value", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.div_value", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.add_array"], ["", "", "def", "set_mean", "(", "self", ",", "shared_params_list", ",", "nthreads", "=", "1", ")", ":", "\n", "\n", "        ", "def", "set_mean_delta", "(", "index", ")", ":", "\n", "            ", "self", ".", "updates", "[", "index", "]", ".", "fill_value", "(", "0.0", ")", "\n", "for", "shared_params", "in", "shared_params_list", ":", "\n", "                ", "self", ".", "updates", "[", "index", "]", ".", "add_array", "(", "shared_params", ".", "updates", "[", "index", "]", ")", "\n", "", "self", ".", "updates", "[", "index", "]", ".", "div_value", "(", "len", "(", "shared_params_list", ")", ")", "\n", "\n", "", "if", "nthreads", "<=", "1", ":", "\n", "            ", "for", "index", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "                ", "set_mean_delta", "(", "self", ",", "index", ")", "\n", "", "", "else", ":", "\n", "            ", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "self", ".", "updates", ")", ":", "\n", "\n", "                ", "workers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "nthreads", ")", ":", "\n", "                    ", "if", "index", "<", "len", "(", "self", ".", "updates", ")", ":", "\n", "                        ", "workers", ".", "append", "(", "threading", ".", "Thread", "(", "target", "=", "set_mean_delta", ",", "args", "=", "(", "index", ",", ")", ")", ")", "\n", "workers", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "index", "+=", "1", "\n", "", "", "for", "worker", "in", "workers", ":", "\n", "                    ", "worker", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_moving_mean": [[147, 153], ["range", "len", "len", "len", "shared_params.updates[].mul_value", "shared.ModelUpdate.updates[].mul_value", "shared.ModelUpdate.updates[].add_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.mul_value", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.mul_value", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.add_array"], ["", "", "", "", "def", "set_moving_mean", "(", "self", ",", "shared_params", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "updates", ")", "==", "len", "(", "shared_params", ".", "updates", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "updates", ")", ")", ":", "\n", "            ", "shared_params", ".", "updates", "[", "i", "]", ".", "mul_value", "(", "1.0", "-", "momentum", ")", "\n", "self", ".", "updates", "[", "i", "]", ".", "mul_value", "(", "momentum", ")", "\n", "self", ".", "updates", "[", "i", "]", ".", "add_array", "(", "shared_params", ".", "updates", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_updates": [[155, 159], ["enumerate", "shared.ModelUpdate.updates[].get_array", "update[].get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "import_updates", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "i", ",", "update", "in", "enumerate", "(", "model", ".", "updates", ")", ":", "\n", "            ", "with", "self", ".", "updates", "[", "i", "]", ".", "lock", ":", "\n", "                ", "self", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", "[", "...", "]", "=", "update", "[", "0", "]", ".", "get_value", "(", "borrow", "=", "False", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_updates": [[161, 166], ["enumerate", "update[].set_value", "shared.ModelUpdate.updates[].get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "", "def", "export_updates", "(", "self", ",", "model", ")", ":", "\n", "        ", "index", "=", "0", "\n", "for", "i", ",", "update", "in", "enumerate", "(", "model", ".", "updates", ")", ":", "\n", "            ", "with", "self", ".", "updates", "[", "i", "]", ".", "lock", ":", "\n", "                ", "update", "[", "0", "]", ".", "set_value", "(", "self", ".", "updates", "[", "i", "]", ".", "get_array", "(", ")", ",", "borrow", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.save_dims": [[168, 179], ["json_dims.append", "open", "json.dump", "model.get_input_shape", "model.get_output_shape", "update[].get_value"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_input_shape", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.get_output_shape"], ["", "", "", "def", "save_dims", "(", "fname", ",", "model", ")", ":", "\n", "\n", "#make sure updates are valid", "\n", "        ", "json_dims", "=", "[", "]", "\n", "for", "update", "in", "model", ".", "updates", ":", "\n", "            ", "json_dims", ".", "append", "(", "{", "\"shape\"", ":", "update", "[", "0", "]", ".", "get_value", "(", "borrow", "=", "True", ")", ".", "shape", "}", ")", "\n", "\n", "", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\"input\"", ":", "model", ".", "get_input_shape", "(", ")", ",", "\n", "\"output\"", ":", "model", ".", "get_output_shape", "(", ")", ",", "\n", "\"dims\"", ":", "json_dims", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_npz": [[181, 183], ["numpy.savez", "update.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "", "def", "export_npz", "(", "self", ",", "fp", ")", ":", "\n", "        ", "numpy", ".", "savez", "(", "fp", ",", "*", "[", "update", ".", "get_array", "(", ")", "for", "update", "in", "self", ".", "updates", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_npz": [[184, 190], ["numpy.load", "enumerate", "len", "len", "update.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "import_npz", "(", "self", ",", "fp", ")", ":", "\n", "        ", "output", "=", "numpy", ".", "load", "(", "fp", ")", "\n", "assert", "len", "(", "output", ".", "files", ")", "==", "len", "(", "self", ".", "updates", ")", "\n", "for", "i", ",", "update", "in", "enumerate", "(", "self", ".", "updates", ")", ":", "\n", "            ", "with", "update", ".", "lock", ":", "\n", "                ", "update", ".", "get_array", "(", ")", "[", "...", "]", "=", "output", "[", "\"arr_%i\"", "%", "i", "]", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json": [[191, 193], ["update.export_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json"], ["", "", "", "def", "export_json", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"updates\"", ":", "[", "update", ".", "export_json", "(", ")", "for", "update", "in", "self", ".", "updates", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json": [[194, 197], ["enumerate", "shared.ModelUpdate.updates[].import_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json"], ["", "def", "import_json", "(", "self", ",", "json", ")", ":", "\n", "        ", "for", "i", ",", "json_update", "in", "enumerate", "(", "json", "[", "\"updates\"", "]", ")", ":", "\n", "            ", "self", ".", "updates", "[", "i", "]", ".", "import_json", "(", "json_update", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.__init__": [[139, 169], ["super().__init__", "len", "multiprocessing.Queue", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "denet.ModelUpdate", "denet.ModelUpdate", "denet.Array", "denet.Array", "denet.Array", "denet.Array", "multiprocessing.Queue", "multiprocessing.Queue", "denet.info", "denet.info", "multiprocessing.Process", "worker.WorkerProcess.proc.start", "psutil.Process"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start"], ["    ", "def", "__init__", "(", "self", ",", "gpu", ",", "args", ",", "data_shape", ",", "class_labels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "class_labels", "=", "class_labels", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "class_num", "=", "len", "(", "class_labels", ")", "\n", "\n", "#shared variables", "\n", "self", ".", "task_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "self", ".", "active", "=", "mp", ".", "Value", "(", "'i'", ",", "1", ")", "\n", "self", ".", "epoch", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "self", ".", "learn_rate", "=", "mp", ".", "Value", "(", "'f'", ",", "args", ".", "learn_rate", ")", "\n", "self", ".", "cost", "=", "mp", ".", "Value", "(", "'f'", ",", "0.0", ")", "\n", "self", ".", "timer", "=", "mp", ".", "Value", "(", "'f'", ",", "0.0", ")", "\n", "\n", "self", ".", "model_update", "=", "shared", ".", "ModelUpdate", "(", "args", ".", "model_dims", ",", "args", ".", "batch_size", ")", "\n", "self", ".", "data_x", "=", "shared", ".", "Array", "(", "self", ".", "model_update", ".", "input_shape", ")", "\n", "self", ".", "data_y", "=", "shared", ".", "Array", "(", "self", ".", "model_update", ".", "output_shape", ")", "\n", "self", ".", "data_m", "=", "mp", ".", "Queue", "(", ")", "\n", "self", ".", "error_q", "=", "mp", ".", "Queue", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"Starting worker:\"", "+", "self", ".", "gpu", ")", "\n", "proc_args", "=", "(", "self", ".", "gpu", ",", "self", ".", "args", ",", "self", ".", "data_shape", ",", "self", ".", "class_labels", ",", "self", ".", "class_num", ",", "self", ".", "task_queue", ",", "self", ".", "active", ",", "self", ".", "epoch", ",", "self", ".", "learn_rate", ",", "self", ".", "cost", ",", "\n", "self", ".", "timer", ",", "self", ".", "data_x", ",", "self", ".", "data_y", ",", "self", ".", "data_m", ",", "self", ".", "model_update", ",", "self", ".", "error_q", ")", "\n", "self", ".", "proc", "=", "mp", ".", "Process", "(", "target", "=", "run_worker_wrapper", ",", "args", "=", "proc_args", ",", "name", "=", "self", ".", "gpu", ")", "\n", "self", ".", "proc", ".", "daemon", "=", "True", "\n", "self", ".", "proc", ".", "start", "(", ")", "\n", "self", ".", "ps_proc", "=", "psutil", ".", "Process", "(", "self", ".", "proc", ".", "pid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.set_active": [[170, 173], ["worker.WorkerProcess.active.get_lock"], "methods", ["None"], ["", "def", "set_active", "(", "self", ",", "state", ")", ":", "\n", "        ", "with", "self", ".", "active", ".", "get_lock", "(", ")", ":", "\n", "            ", "self", ".", "active", ".", "value", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.set_epoch": [[174, 177], ["worker.WorkerProcess.epoch.get_lock"], "methods", ["None"], ["", "", "def", "set_epoch", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "self", ".", "epoch", ".", "get_lock", "(", ")", ":", "\n", "            ", "self", ".", "epoch", ".", "value", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.get_active": [[178, 183], ["worker.WorkerProcess.active.get_lock"], "methods", ["None"], ["", "", "def", "get_active", "(", "self", ")", ":", "\n", "        ", "v", "=", "0", "\n", "with", "self", ".", "active", ".", "get_lock", "(", ")", ":", "\n", "            ", "v", "=", "self", ".", "active", ".", "value", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task": [[184, 187], ["worker.WorkerProcess.set_active", "worker.WorkerProcess.task_queue.put"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.set_active"], ["", "def", "start_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "self", ".", "set_active", "(", "1", ")", "\n", "self", ".", "task_queue", ".", "put", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_begin": [[188, 190], ["worker.WorkerProcess.start_task"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task"], ["", "def", "train_begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_task", "(", "\"train-begin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_step": [[191, 196], ["worker.WorkerProcess.data_m.put", "worker.WorkerProcess.start_task", "worker.WorkerProcess.data_x.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "train_step", "(", "self", ",", "data_x", ",", "data_m", ")", ":", "\n", "        ", "with", "self", ".", "data_x", ".", "lock", ":", "\n", "            ", "self", ".", "data_x", ".", "get_array", "(", ")", "[", "...", "]", "=", "data_x", "[", "...", "]", "\n", "", "self", ".", "data_m", ".", "put", "(", "data_m", ")", "\n", "self", ".", "start_task", "(", "\"train-step\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_end": [[197, 199], ["worker.WorkerProcess.start_task"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task"], ["", "def", "train_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_task", "(", "\"train-end\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.model_read": [[201, 203], ["worker.WorkerProcess.start_task"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task"], ["", "def", "model_read", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_task", "(", "\"model-read\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.model_write": [[205, 208], ["worker.WorkerProcess.model_update.set_updates", "worker.WorkerProcess.start_task"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_updates", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task"], ["", "def", "model_write", "(", "self", ",", "shared_update", ")", ":", "\n", "        ", "self", ".", "model_update", ".", "set_updates", "(", "shared_update", ")", "\n", "self", ".", "start_task", "(", "\"model-write\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.predict": [[209, 213], ["worker.WorkerProcess.start_task", "worker.WorkerProcess.data_x.get_array"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "predict", "(", "self", ",", "data_x", ")", ":", "\n", "        ", "with", "self", ".", "data_x", ".", "lock", ":", "\n", "            ", "self", ".", "data_x", ".", "get_array", "(", ")", "[", "...", "]", "=", "data_x", "[", "...", "]", "\n", "", "self", ".", "start_task", "(", "\"predict\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.done": [[214, 217], ["worker.WorkerProcess.start_task", "worker.WorkerProcess.proc.join"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.start_task"], ["", "def", "done", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_task", "(", "\"done\"", ")", "\n", "self", ".", "proc", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.wait": [[219, 244], ["time.sleep", "worker.WorkerProcess.active.get_lock", "worker.WorkerProcess.error_q.get", "worker.WorkerProcess.proc.terminate", "exit"], "methods", ["None"], ["", "def", "wait", "(", "self", ",", "dt", "=", "0.001", ")", ":", "\n", "        ", "count", "=", "0", "\n", "done", "=", "False", "\n", "while", "(", "not", "done", ")", ":", "\n", "            ", "with", "self", ".", "active", ".", "get_lock", "(", ")", ":", "\n", "                ", "if", "self", ".", "active", ".", "value", "==", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "#check for exceptions", "\n", "", "", "try", ":", "\n", "                ", "error", "=", "self", ".", "error_q", ".", "get", "(", "block", "=", "False", ")", "\n", "self", ".", "proc", ".", "terminate", "(", ")", "\n", "raise", "(", "error", ")", "\n", "exit", "(", "1", ")", "\n", "", "except", "queue", ".", "Empty", ":", "\n", "                ", "pass", "\n", "\n", "#check if process has stopped", "\n", "# if self.ps_proc.status() == psutil.STATUS_ZOMBIE or self.ps_proc.status() == psutil.STATUS_DEAD:", "\n", "#     raise Exception(\"Worker died prematurely: \" + self.gpu)", "\n", "\n", "", "time", ".", "sleep", "(", "dt", ")", "\n", "count", "+=", "1", "\n", "\n", "", "return", "count", "*", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.flush_logs": [[17, 21], ["sys.stdout.flush", "sys.stderr.flush", "threading.Timer().start", "threading.Timer"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start"], ["def", "flush_logs", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "threading", ".", "Timer", "(", "5.0", ",", "flush_logs", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.run_worker": [[23, 127], ["open", "open", "denet.init", "sys.setrecursionlimit", "worker.flush_logs", "denet.info", "os.environ.keys", "denet.info", "model_cnn.initialize", "model_cnn.initialize.build_train_func", "time.time", "denet.verbose", "time.time", "task_queue.get", "time.time", "timer.get_lock", "denet.info", "denet.verbose", "task_queue.get", "model_cnn.initialize.predict_output_step", "model_update.import_updates", "time.time", "socket.gethostname", "active.get_lock", "data_y.get_array", "data_x.get_array", "model_update.export_updates", "train_begin_func", "cost.get_lock", "cost.get_lock", "epoch.get_lock", "learn_rate.get_lock", "data_m.get", "model_cnn.initialize.train_step", "math.isnan", "data_x.get_array", "Exception", "train_end_func", "cost.get_lock", "exit"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.flush_logs", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.initialize", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.build_train_func", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.model.model_cnn.ModelCNN.predict_output_step", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_updates", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_updates", "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.WorkerProcess.train_step", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.Array.get_array"], ["", "def", "run_worker", "(", "gpu", ",", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ",", "task_queue", ",", "active", ",", "epoch", ",", "learn_rate", ",", "cost", ",", "timer", ",", "\n", "data_x", ",", "data_y", ",", "data_m", ",", "model_update", ")", ":", "\n", "\n", "#redirect output (unbuffered)", "\n", "    ", "sys", ".", "stdout", "=", "open", "(", "gpu", "+", "\".out\"", ",", "'w'", ")", "\n", "sys", ".", "stderr", "=", "open", "(", "gpu", "+", "\".err\"", ",", "'w'", ")", "\n", "logging", ".", "init", "(", "args", ",", "flush", "=", "True", ")", "\n", "sys", ".", "setrecursionlimit", "(", "10000", ")", "\n", "\n", "#create thread to flush stdout / stderr every 5 seconds", "\n", "flush_logs", "(", ")", "\n", "\n", "logging", ".", "info", "(", "gpu", "+", "\": initializing\"", ")", "\n", "\n", "#remove all openmpi variables!", "\n", "for", "v", "in", "os", ".", "environ", ".", "keys", "(", ")", ":", "\n", "        ", "if", "v", "[", ":", "5", "]", "==", "\"OMPI_\"", ":", "\n", "            ", "del", "os", ".", "environ", "[", "v", "]", "\n", "\n", "#set compile dir and gpu (possible since theano hasn't been imported yet!)", "\n", "", "", "if", "not", "\"THEANO_FLAGS\"", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "=", "\"\"", "\n", "\n", "", "import", "socket", "\n", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "+=", "\",\"", "+", "args", ".", "theano_flags", "+", "\",\"", "\n", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "+=", "\"device=\"", "+", "gpu", "+", "\",\"", ";", "\n", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "+=", "\"force_device=True,\"", ";", "\n", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "+=", "\"compiledir=~/.theano/\"", "+", "socket", ".", "gethostname", "(", ")", "+", "\"-\"", "+", "gpu", "+", "\"/,\"", "\n", "#os.environ[\"THEANO_FLAGS\"] += \"lib.cnmem=1,\";", "\n", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", "+=", "\"nvcc.flags=-D_FORCE_INLINES,\"", "\n", "logging", ".", "info", "(", "gpu", "+", "\": Using THEANO_FLAGS:\"", ",", "os", ".", "environ", "[", "\"THEANO_FLAGS\"", "]", ")", "\n", "\n", "#initialize local model", "\n", "import", "denet", ".", "model", ".", "model_cnn", "as", "model_cnn", "\n", "model", "=", "model_cnn", ".", "initialize", "(", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ")", "\n", "\n", "#pre-initialize training function", "\n", "use_acc_mode", "=", "args", ".", "batch_size_factor", ">", "1", "and", "args", ".", "use_acc_mode", "\n", "model", ".", "build_train_func", "(", "args", ".", "solver", ",", "args", ".", "cost_factors", ",", "use_acc_mode", "=", "use_acc_mode", ")", "\n", "if", "use_acc_mode", ":", "\n", "        ", "train_begin_func", "=", "model", ".", "func", "[", "\"train_begin\"", "]", "\n", "train_end_func", "=", "model", ".", "func", "[", "\"train_end\"", "]", "\n", "\n", "#begin processing loop", "\n", "", "iteration", "=", "0", "\n", "while", "(", "True", ")", ":", "\n", "\n", "#try to start next task immediately otherwise wait for task", "\n", "        ", "wait_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "            ", "task", "=", "task_queue", ".", "get", "(", "block", "=", "False", ")", "\n", "", "except", "queue", ".", "Empty", ":", "\n", "            ", "logging", ".", "verbose", "(", "gpu", "+", "\": waiting for task\"", ")", "\n", "with", "active", ".", "get_lock", "(", ")", ":", "\n", "                ", "active", ".", "value", "=", "0", "\n", "", "task", "=", "task_queue", ".", "get", "(", "block", "=", "True", ")", "\n", "", "wait_time", "=", "time", ".", "time", "(", ")", "-", "wait_time", "\n", "\n", "logging", ".", "verbose", "(", "gpu", "+", "\": \"", "+", "task", "+", "\" (wait time=%i ms)\"", "%", "(", "1000", "*", "wait_time", ")", ")", "\n", "\n", "#calculate updates", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "if", "task", "==", "\"predict\"", ":", "\n", "            ", "with", "data_x", ".", "lock", ",", "data_y", ".", "lock", ":", "\n", "                ", "data_y", ".", "get_array", "(", ")", "[", "...", "]", "=", "model", ".", "predict_output_step", "(", "data_x", ".", "get_array", "(", ")", ")", "\n", "\n", "", "", "elif", "task", "==", "\"model-read\"", ":", "\n", "            ", "model_update", ".", "import_updates", "(", "model", ")", "\n", "\n", "", "elif", "task", "==", "\"model-write\"", ":", "\n", "            ", "model_update", ".", "export_updates", "(", "model", ")", "\n", "\n", "", "elif", "task", "==", "\"train-begin\"", ":", "\n", "            ", "if", "use_acc_mode", ":", "\n", "                ", "train_begin_func", "(", ")", "\n", "\n", "", "with", "cost", ".", "get_lock", "(", ")", ":", "\n", "                ", "cost", ".", "value", "=", "0", "\n", "\n", "", "", "elif", "task", "==", "\"train-step\"", ":", "\n", "            ", "with", "cost", ".", "get_lock", "(", ")", ",", "epoch", ".", "get_lock", "(", ")", ",", "learn_rate", ".", "get_lock", "(", ")", ",", "data_x", ".", "lock", ":", "\n", "                ", "data_meta", "=", "data_m", ".", "get", "(", "block", "=", "True", ")", "\n", "c", ",", "_", "=", "model", ".", "train_step", "(", "data_x", ".", "get_array", "(", ")", ",", "data_meta", ",", "epoch", ".", "value", ",", "iteration", ",", "\n", "learn_rate", ".", "value", ",", "args", ".", "learn_momentum", ",", "args", ".", "learn_decay", ")", "\n", "if", "math", ".", "isnan", "(", "c", ")", ":", "\n", "                    ", "raise", "Exception", "(", "\"Encountered NaN cost for worker\"", ")", "\n", "\n", "", "cost", ".", "value", "+=", "c", "\n", "\n", "", "iteration", "+=", "1", "\n", "\n", "", "elif", "task", "==", "\"train-end\"", ":", "\n", "            ", "if", "use_acc_mode", ":", "\n", "                ", "train_end_func", "(", ")", "\n", "\n", "", "with", "cost", ".", "get_lock", "(", ")", ":", "\n", "                ", "cost", ".", "value", "/=", "args", ".", "batch_size_factor", "\n", "\n", "", "", "elif", "task", "==", "\"done\"", ":", "\n", "            ", "exit", "(", "0", ")", "\n", "\n", "", "with", "timer", ".", "get_lock", "(", ")", ":", "\n", "            ", "timer", ".", "value", "=", "time", ".", "time", "(", ")", "-", "ts", "\n", "logging", ".", "info", "(", "gpu", "+", "\": %s took %i ms\"", "%", "(", "task", ",", "1000", "*", "timer", ".", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.worker.run_worker_wrapper": [[128, 137], ["worker.run_worker", "error_q.put"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.worker.run_worker"], ["", "", "", "def", "run_worker_wrapper", "(", "gpu", ",", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ",", "task_queue", ",", "active", ",", "epoch", ",", "learn_rate", ",", "cost", ",", "timer", ",", "\n", "data_x", ",", "data_y", ",", "data_m", ",", "model_update", ",", "error_q", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "run_worker", "(", "gpu", ",", "args", ",", "data_shape", ",", "class_labels", ",", "class_num", ",", "task_queue", ",", "active", ",", "epoch", ",", "learn_rate", ",", "cost", ",", "timer", ",", "\n", "data_x", ",", "data_y", ",", "data_m", ",", "model_update", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "error_q", ".", "put", "(", "e", ")", "\n", "raise", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_msg": [[7, 11], ["sock.sendall", "struct.pack", "len"], "function", ["None"], ["def", "send_msg", "(", "sock", ",", "msg", ")", ":", "\n", "# print(\"socket sending %i bytes\"%len(msg))", "\n", "    ", "msg", "=", "struct", ".", "pack", "(", "'>I'", ",", "len", "(", "msg", ")", ")", "+", "msg", "\n", "sock", ".", "sendall", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_msg": [[12, 20], ["network.recvall", "network.recvall", "Exception", "struct.unpack"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.network.recvall", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recvall"], ["", "def", "recv_msg", "(", "sock", ")", ":", "\n", "    ", "n_raw", "=", "recvall", "(", "sock", ",", "4", ")", "\n", "if", "not", "n_raw", ":", "\n", "        ", "raise", "Exception", "(", "\"Failed to read message length\"", ")", "\n", "\n", "", "n", "=", "struct", ".", "unpack", "(", "'>I'", ",", "n_raw", ")", "[", "0", "]", "\n", "# print(\"socket recieved %i bytes\"%n)", "\n", "return", "recvall", "(", "sock", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recvall": [[21, 30], ["bytes", "len", "sock.recv", "Exception", "len"], "function", ["None"], ["", "def", "recvall", "(", "sock", ",", "n", ")", ":", "\n", "    ", "data", "=", "bytes", "(", ")", "\n", "while", "len", "(", "data", ")", "<", "n", ":", "\n", "        ", "packet", "=", "sock", ".", "recv", "(", "n", "-", "len", "(", "data", ")", ")", "\n", "if", "not", "packet", ":", "\n", "            ", "raise", "Exception", "(", "\"Failed to read packet\"", ")", "\n", "", "data", "+=", "packet", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json": [[32, 40], ["json.dumps().encode", "MPI.COMM_WORLD.send", "network.send_msg", "json.dumps"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_msg"], ["", "def", "send_json", "(", "sock", ",", "data", ",", "use_mpi", "=", "False", ")", ":", "\n", "    ", "json_data", "=", "json", ".", "dumps", "(", "data", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "if", "use_mpi", ":", "\n", "        ", "from", "mpi4py", "import", "MPI", "\n", "# print(\"send %i:\"%sock, json_data)", "\n", "MPI", ".", "COMM_WORLD", ".", "send", "(", "json_data", ",", "dest", "=", "sock", ")", "\n", "", "else", ":", "\n", "        ", "send_msg", "(", "sock", ",", "json_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json": [[42, 50], ["MPI.COMM_WORLD.recv", "json.loads", "json.loads", "MPI.COMM_WORLD.recv.decode", "recv_msg().decode", "network.recv_msg"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_msg"], ["", "", "def", "recv_json", "(", "sock", ",", "use_mpi", "=", "False", ")", ":", "\n", "    ", "if", "use_mpi", ":", "\n", "        ", "from", "mpi4py", "import", "MPI", "\n", "json_data", "=", "MPI", ".", "COMM_WORLD", ".", "recv", "(", "source", "=", "sock", ")", "\n", "# print(\"recv %i:\"%sock, json_data)", "\n", "return", "json", ".", "loads", "(", "json_data", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "json", ".", "loads", "(", "recv_msg", "(", "sock", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.__init__": [[15, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_dims", ",", "port", "=", "0", ",", "client_num", "=", "0", ",", "thread_num", "=", "1", ",", "momentum", "=", "0.9", ",", "use_async", "=", "False", ",", "use_mpi", "=", "False", ")", ":", "\n", "        ", "self", ".", "port", "=", "port", "\n", "self", ".", "client_num", "=", "client_num", "\n", "self", ".", "thread_num", "=", "thread_num", "\n", "self", ".", "model_dims", "=", "model_dims", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "use_async", "=", "use_async", "\n", "self", ".", "use_mpi", "=", "use_mpi", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.start": [[24, 29], ["update_server.UpdateServer.run_async", "update_server.UpdateServer.run_sync"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.run_async", "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.run_sync"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_async", ":", "\n", "            ", "self", ".", "run_async", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "run_sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.connect_clients": [[31, 56], ["denet.info", "denet.info", "denet.info", "mpi_comm.Get_rank", "list", "len", "denet.info", "denet.info", "denet.info", "socket.socket", "denet.info", "denet.info", "denet.info", "socket.socket.bind", "socket.socket.listen", "denet.info", "denet.info", "denet.info", "range", "range", "socket.gethostname", "socket.socket.accept", "denet.info", "denet.info", "denet.info", "list.append", "mpi_comm.Get_size", "socket.gethostname", "socket.gethostname"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "", "def", "connect_clients", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_mpi", ":", "\n", "            ", "from", "mpi4py", "import", "MPI", "\n", "mpi_comm", "=", "MPI", ".", "COMM_WORLD", "\n", "server_socket", "=", "mpi_comm", ".", "Get_rank", "(", ")", "\n", "client_sockets", "=", "list", "(", "range", "(", "mpi_comm", ".", "Get_size", "(", ")", ")", ")", "\n", "del", "client_sockets", "[", "server_socket", "]", "\n", "self", ".", "client_num", "=", "len", "(", "client_sockets", ")", "\n", "logging", ".", "info", "(", "\"Starting MPI update server on:\"", ",", "socket", ".", "gethostname", "(", ")", ",", "\"(%i clients)\"", "%", "self", ".", "client_num", ")", "\n", "", "else", ":", "\n", "            ", "server_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "logging", ".", "info", "(", "\"Starting update server on %s:%i (%i clients)\"", "%", "(", "socket", ".", "gethostname", "(", ")", ",", "self", ".", "port", ",", "self", ".", "client_num", ")", ")", "\n", "\n", "server_socket", ".", "bind", "(", "(", "socket", ".", "gethostname", "(", ")", ",", "self", ".", "port", ")", ")", "\n", "server_socket", ".", "listen", "(", "1", ")", "\n", "\n", "logging", ".", "info", "(", "\"Waiting for %i clients to connect...\"", "%", "self", ".", "client_num", ")", "\n", "client_sockets", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "client_num", ")", ":", "\n", "                ", "sock", ",", "addr", "=", "server_socket", ".", "accept", "(", ")", "\n", "logging", ".", "info", "(", "\"Model Update Server - Adding new client:\"", ",", "addr", ")", "\n", "client_sockets", ".", "append", "(", "sock", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"All clients are connected!\"", ")", "\n", "return", "server_socket", ",", "client_sockets", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.run_async": [[58, 135], ["update_server.UpdateServer.connect_clients", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.info", "denet.info", "denet.info", "enumerate", "MPI.Status", "mpi_comm.recv", "json.loads", "select.select", "denet.info", "denet.info", "denet.info", "denet.error", "denet.error", "denet.error", "mpi_comm.recv.decode", "MPI.Status.Get_source", "denet.info", "denet.info", "denet.info", "denet.recv_json", "denet.recv_json", "denet.recv_json", "denet.info", "denet.info", "denet.info", "denet.send_json", "denet.send_json", "denet.send_json", "denet.info", "denet.info", "denet.info", "denet.ModelUpdate.import_json", "denet.ModelUpdate.add_delta", "denet.send_json", "denet.send_json", "denet.send_json", "denet.ModelUpdate.export_json", "denet.info", "denet.info", "denet.info", "denet.error", "denet.error", "denet.error", "sync.append", "denet.ModelUpdate.import_json", "len", "len", "denet.ModelUpdate.export_json", "denet.send_json", "denet.send_json", "denet.send_json"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.connect_clients", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.add_delta", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json"], ["", "def", "run_async", "(", "self", ")", ":", "\n", "\n", "#connect to clients", "\n", "        ", "server_socket", ",", "client_sockets", "=", "self", ".", "connect_clients", "(", ")", "\n", "\n", "#construct update object for each client / server", "\n", "client_update", "=", "shared", ".", "ModelUpdate", "(", "self", ".", "model_dims", ")", "\n", "server_update", "=", "shared", ".", "ModelUpdate", "(", "self", ".", "model_dims", ")", "\n", "\n", "#perform synchronization", "\n", "logging", ".", "info", "(", "\"Begin processing...\"", ")", "\n", "count", "=", "0", "\n", "sync", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "#get sockets which have data", "\n", "# print(\"Waiting for updates...\")", "\n", "                ", "if", "self", ".", "use_mpi", ":", "\n", "                    ", "from", "mpi4py", "import", "MPI", "\n", "mpi_comm", "=", "MPI", ".", "COMM_WORLD", "\n", "mpi_status", "=", "MPI", ".", "Status", "(", ")", "\n", "client_data", "=", "mpi_comm", ".", "recv", "(", "source", "=", "MPI", ".", "ANY_SOURCE", ",", "tag", "=", "MPI", ".", "ANY_TAG", ",", "status", "=", "mpi_status", ")", "\n", "client_json", "=", "json", ".", "loads", "(", "client_data", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "read_sockets", "=", "[", "mpi_status", ".", "Get_source", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "read_sockets", ",", "_", ",", "_", "=", "select", ".", "select", "(", "client_sockets", ",", "[", "]", ",", "[", "]", ")", "\n", "\n", "", "for", "i", ",", "sock", "in", "enumerate", "(", "client_sockets", ")", ":", "\n", "\n", "#socket is sending data", "\n", "                    ", "if", "sock", "in", "read_sockets", ":", "\n", "\n", "#read data", "\n", "                        ", "if", "not", "self", ".", "use_mpi", ":", "\n", "                            ", "logging", ".", "info", "(", "\"client %i: recieving command\"", "%", "i", ")", "\n", "client_json", "=", "network", ".", "recv_json", "(", "sock", ")", "\n", "\n", "#get counter", "\n", "", "if", "client_json", "[", "\"cmd\"", "]", "==", "\"count\"", ":", "\n", "                            ", "logging", ".", "info", "(", "\"count:\"", ",", "count", ",", "\"peek:\"", ",", "client_json", "[", "\"peek\"", "]", ")", "\n", "network", ".", "send_json", "(", "sock", ",", "{", "\"count\"", ":", "count", "}", ",", "self", ".", "use_mpi", ")", "\n", "if", "not", "client_json", "[", "\"peek\"", "]", ":", "\n", "                                ", "count", "+=", "1", "\n", "\n", "#apply client update to server updates", "\n", "", "", "elif", "client_json", "[", "\"cmd\"", "]", "==", "\"update\"", ":", "\n", "                            ", "logging", ".", "info", "(", "\"update\"", ")", "\n", "client_update", ".", "import_json", "(", "client_json", "[", "\"data\"", "]", ")", "\n", "server_update", ".", "add_delta", "(", "client_update", ",", "self", ".", "momentum", ")", "\n", "network", ".", "send_json", "(", "sock", ",", "server_update", ".", "export_json", "(", ")", ",", "self", ".", "use_mpi", ")", "\n", "\n", "#synchronize model between all clients / server", "\n", "", "elif", "client_json", "[", "\"cmd\"", "]", "==", "\"sync\"", ":", "\n", "                            ", "logging", ".", "info", "(", "\"sync, initial:\"", ",", "client_json", "[", "\"initial\"", "]", ")", "\n", "if", "not", "i", "in", "sync", ":", "\n", "                                ", "sync", ".", "append", "(", "i", ")", "\n", "\n", "#on 'initial' sync set server update", "\n", "", "if", "client_json", "[", "\"initial\"", "]", ":", "\n", "                                ", "server_update", ".", "import_json", "(", "client_json", "[", "\"data\"", "]", ")", "\n", "\n", "#perform sync after all clients have call sync", "\n", "", "if", "len", "(", "sync", ")", "==", "len", "(", "client_sockets", ")", ":", "\n", "                                ", "model_update", "=", "server_update", ".", "export_json", "(", ")", "\n", "for", "s", "in", "client_sockets", ":", "\n", "                                    ", "network", ".", "send_json", "(", "s", ",", "model_update", ",", "self", ".", "use_mpi", ")", "\n", "sync", "=", "[", "]", "\n", "", "", "", "else", ":", "\n", "                            ", "logging", ".", "error", "(", "\"ERROR: Unknown client command: \"", ",", "client_json", "[", "\"cmd\"", "]", ")", "\n", "\n", "", "", "", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "return", "1", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "error", "(", "\"Encounter exception: \"", ",", "e", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.run_sync": [[137, 176], ["update_server.UpdateServer.connect_clients", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "denet.ModelUpdate", "range", "denet.info", "denet.info", "denet.info", "enumerate", "denet.info", "denet.info", "denet.info", "time.time", "denet.ModelUpdate.set_mean", "denet.verbose", "denet.verbose", "denet.verbose", "time.time", "denet.ModelUpdate.export_json", "denet.verbose", "denet.verbose", "denet.verbose", "time.time", "denet.verbose", "denet.verbose", "denet.verbose", "denet.recv_json", "denet.recv_json", "denet.recv_json", "client_updates[].import_json", "denet.send_json", "denet.send_json", "denet.send_json", "denet.info", "denet.info", "denet.info", "sys.exit", "denet.error", "denet.error", "denet.error", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.multi.update_server.UpdateServer.connect_clients", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.set_mean", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.export_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.recv_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.import_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.multi.network.send_json", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error"], ["", "", "", "def", "run_sync", "(", "self", ")", ":", "\n", "\n", "#connect to clients", "\n", "        ", "server_socket", ",", "client_sockets", "=", "self", ".", "connect_clients", "(", ")", "\n", "\n", "#construct update object for each client / server", "\n", "client_updates", "=", "[", "shared", ".", "ModelUpdate", "(", "self", ".", "model_dims", ")", "for", "_", "in", "range", "(", "self", ".", "client_num", ")", "]", "\n", "server_update", "=", "shared", ".", "ModelUpdate", "(", "self", ".", "model_dims", ")", "\n", "\n", "#perform synchronization", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "logging", ".", "info", "(", "\"Waiting for updates...\"", ")", "\n", "for", "i", ",", "sock", "in", "enumerate", "(", "client_sockets", ")", ":", "\n", "                    ", "update_json", "=", "network", ".", "recv_json", "(", "sock", ")", "\n", "client_updates", "[", "i", "]", ".", "import_json", "(", "update_json", "[", "\"data\"", "]", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Synchronising...\"", ")", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "server_update", ".", "set_mean", "(", "client_updates", ",", "self", ".", "thread_num", ")", "\n", "logging", ".", "verbose", "(", "\"mean calc took %.2f sec\"", "%", "(", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "server_json", "=", "server_update", ".", "export_json", "(", ")", "\n", "logging", ".", "verbose", "(", "\"json export took %.2f sec\"", "%", "(", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "\n", "#send mean update to clients", "\n", "ts", "=", "time", ".", "time", "(", ")", "\n", "for", "sock", "in", "client_sockets", ":", "\n", "                    ", "network", ".", "send_json", "(", "sock", ",", "server_json", ")", "\n", "\n", "", "logging", ".", "verbose", "(", "\"transferring data to clients took %.2f sec\"", "%", "(", "time", ".", "time", "(", ")", "-", "ts", ")", ")", "\n", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "error", "(", "\"Encounter exception: \"", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg": [[11, 16], ["msg.rstrip", "str"], "function", ["None"], ["def", "get_log_msg", "(", "*", "args", ")", ":", "\n", "    ", "msg", "=", "\"\"", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "msg", "+=", "str", "(", "arg", ")", "+", "\" \"", "\n", "", "return", "msg", ".", "rstrip", "(", "\" \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug": [[17, 23], ["denet_logger.debug", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "debug", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info": [[24, 30], ["denet_logger.info", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "info", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose": [[31, 37], ["denet_logger.log", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "verbose", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "log", "(", "VERBOSE", ",", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning": [[38, 44], ["denet_logger.warning", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.warning", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "warning", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "warning", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.error": [[45, 51], ["denet_logger.error", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.error", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "error", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.critical": [[52, 58], ["denet_logger.critical", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.critical", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "critical", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "critical", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.exception": [[59, 65], ["denet_logger.exception", "logging.init", "logging.get_log_msg", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.exception", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.get_log_msg"], ["", "", "def", "exception", "(", "*", "args", ")", ":", "\n", "    ", "if", "denet_logger", "is", "None", ":", "\n", "        ", "init", "(", ")", "\n", "", "denet_logger", ".", "exception", "(", "get_log_msg", "(", "*", "args", ")", ")", "\n", "if", "denet_flush", ":", "\n", "        ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.setLevel": [[66, 70], ["denet_logger.setLevel", "str().upper", "str"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.setLevel"], ["", "", "def", "setLevel", "(", "lvl", ")", ":", "\n", "    ", "if", "str", "(", "lvl", ")", ".", "upper", "(", ")", "==", "\"VERBOSE\"", ":", "\n", "        ", "lvl", "=", "VERBOSE", "\n", "", "denet_logger", ".", "setLevel", "(", "lvl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.add_arguments": [[72, 74], ["parser.add_argument"], "function", ["None"], ["", "def", "add_arguments", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--log-level\"", ",", "default", "=", "\"verbose\"", ",", "help", "=", "\"Log level\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.logging.init": [[75, 90], ["logging.basicConfig", "logging.getLogger", "logging.setLevel", "logging.info", "logging.info", "logging.info", "logging.debug", "args.log_level.upper"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.setLevel", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.info", "home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug"], ["", "def", "init", "(", "args", "=", "None", ",", "flush", "=", "False", ")", ":", "\n", "\n", "    ", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "format", "=", "\"%(message)s\"", ")", "\n", "\n", "global", "denet_logger", ",", "denet_flush", "\n", "denet_logger", "=", "logging", ".", "getLogger", "(", "\"denet\"", ")", "\n", "setLevel", "(", "VERBOSE", "if", "args", "is", "None", "else", "args", ".", "log_level", ".", "upper", "(", ")", ")", "\n", "\n", "if", "flush", ":", "\n", "        ", "debug", "(", "\"Logging: enabling flushing\"", ")", "\n", "denet_flush", "=", "True", "\n", "\n", "", "info", "(", "\"--------------------------------\"", ")", "\n", "info", "(", "\"Program Cmdline: \"", "+", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "info", "(", "\"--------------------------------\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.get_unique_colors": [[7, 11], ["colorsys.hsv_to_rgb", "range"], "function", ["None"], ["def", "get_unique_colors", "(", "n", ",", "sat", "=", "1", ",", "val", "=", "1", ")", ":", "\n", "    ", "hsv", "=", "[", "(", "x", "*", "1.0", "/", "n", ",", "sat", ",", "val", ")", "for", "x", "in", "range", "(", "n", ")", "]", "\n", "rgb", "=", "[", "colorsys", ".", "hsv_to_rgb", "(", "*", "x", ")", "for", "x", "in", "hsv", "]", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_luminance": [[13, 26], ["numpy.maximum", "numpy.maximum.astype", "PIL.Image.fromarray", "os.path.dirname", "Image.fromarray.save", "numpy.minimum", "os.makedirs", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save"], ["", "def", "export_luminance", "(", "fname", ",", "data", ")", ":", "\n", "    ", "assert", "data", ".", "ndim", "==", "2", "\n", "\n", "d", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "255", "*", "data", ",", "255", ")", ")", "\n", "im_d", "=", "d", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "# im_d = numpy.swapaxes(im_d, 0, 1)", "\n", "im", "=", "Image", ".", "fromarray", "(", "im_d", ",", "'L'", ")", "\n", "\n", "dname", "=", "os", ".", "path", ".", "dirname", "(", "fname", ")", "\n", "if", "dname", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "isdir", "(", "dname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dname", ")", "\n", "\n", "", "im", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_activation_rgb": [[28, 58], ["numpy.maximum", "numpy.maximum.astype", "numpy.swapaxes", "numpy.swapaxes", "PIL.Image.fromarray", "os.path.dirname", "Image.fromarray.save", "len", "numpy.copy", "numpy.minimum", "os.makedirs", "max", "max", "max", "max", "os.path.isdir", "min", "min", "min", "min", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save", "home.repos.pwc.inspect_result.lachlants_denet.multi.shared.ModelUpdate.copy"], ["", "def", "export_activation_rgb", "(", "fname", ",", "data", ",", "bboxs", "=", "[", "]", ")", ":", "\n", "\n", "    ", "if", "len", "(", "bboxs", ")", ">", "0", ":", "\n", "        ", "data", "=", "numpy", ".", "copy", "(", "data", ")", "\n", "for", "x0", ",", "y0", ",", "x1", ",", "y1", "in", "bboxs", ":", "\n", "            ", "x0", "=", "max", "(", "0", ",", "min", "(", "int", "(", "x0", "*", "data", ".", "shape", "[", "2", "]", ")", ",", "data", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "\n", "x1", "=", "max", "(", "0", ",", "min", "(", "int", "(", "x1", "*", "data", ".", "shape", "[", "2", "]", ")", ",", "data", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "\n", "y0", "=", "max", "(", "0", ",", "min", "(", "int", "(", "y0", "*", "data", ".", "shape", "[", "1", "]", ")", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "min", "(", "int", "(", "y1", "*", "data", ".", "shape", "[", "1", "]", ")", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "\n", "data", "[", ":", ",", "y0", ",", "x0", ":", "x1", "]", "=", "0", "\n", "data", "[", ":", ",", "y1", ",", "x0", ":", "x1", "]", "=", "0", "\n", "data", "[", ":", ",", "y0", ":", "y1", ",", "x0", "]", "=", "0", "\n", "data", "[", ":", ",", "y0", ":", "y1", ",", "x1", "]", "=", "0", "\n", "data", "[", "0", ",", "y0", ",", "x0", ":", "x1", "]", "=", "1", "\n", "data", "[", "0", ",", "y1", ",", "x0", ":", "x1", "]", "=", "1", "\n", "data", "[", "0", ",", "y0", ":", "y1", ",", "x0", "]", "=", "1", "\n", "data", "[", "0", ",", "y0", ":", "y1", ",", "x1", "]", "=", "1", "\n", "\n", "", "", "d", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "255", "*", "data", ",", "255", ")", ")", "\n", "im_d", "=", "d", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "im_d", "=", "numpy", ".", "swapaxes", "(", "im_d", ",", "0", ",", "2", ")", "\n", "im_d", "=", "numpy", ".", "swapaxes", "(", "im_d", ",", "0", ",", "1", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "im_d", ",", "'RGB'", ")", "\n", "\n", "dname", "=", "os", ".", "path", ".", "dirname", "(", "fname", ")", "\n", "if", "dname", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "isdir", "(", "dname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dname", ")", "\n", "\n", "", "im", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.wavelength_to_rgb": [[61, 91], ["numpy.array", "math.pow", "math.pow", "math.pow"], "function", ["None"], ["", "def", "wavelength_to_rgb", "(", "w", ",", "gamma", "=", "0.8", ")", ":", "\n", "\n", "    ", "r", "=", "g", "=", "b", "=", "0.0", "\n", "if", "(", "w", ">=", "380", ")", "and", "(", "w", "<", "440", ")", ":", "\n", "        ", "r", "=", "-", "(", "w", "-", "440", ")", "/", "(", "440", "-", "380", ")", "\n", "b", "=", "1.0", "\n", "", "elif", "(", "w", ">=", "440", ")", "and", "(", "w", "<", "490", ")", ":", "\n", "        ", "g", "=", "(", "w", "-", "440", ")", "/", "(", "490", "-", "440", ")", "\n", "b", "=", "1.0", "\n", "", "elif", "(", "w", ">=", "490", ")", "and", "(", "w", "<", "510", ")", ":", "\n", "        ", "g", "=", "1.0", ";", "\n", "b", "=", "-", "(", "w", "-", "510", ")", "/", "(", "510", "-", "490", ")", "\n", "", "elif", "(", "w", ">=", "510", ")", "and", "(", "w", "<", "580", ")", ":", "\n", "        ", "r", "=", "(", "w", "-", "510", ")", "/", "(", "580", "-", "510", ")", ";", "\n", "g", "=", "1.0", ";", "\n", "", "elif", "(", "w", ">=", "580", ")", "and", "(", "w", "<", "645", ")", ":", "\n", "        ", "r", "=", "1.0", ";", "\n", "g", "=", "-", "(", "w", "-", "645", ")", "/", "(", "645", "-", "580", ")", ";", "\n", "", "elif", "(", "w", ">=", "645", ")", "and", "(", "w", "<", "781", ")", ":", "\n", "        ", "r", "=", "1.0", ";", "\n", "\n", "", "factor", "=", "0.0", "\n", "if", "(", "w", ">=", "380", ")", "and", "(", "w", "<", "420", ")", ":", "\n", "        ", "factor", "=", "0.3", "+", "0.7", "*", "(", "w", "-", "380", ")", "/", "(", "420", "-", "380", ")", ";", "\n", "", "elif", "(", "w", ">=", "420", ")", "and", "(", "w", "<", "701", ")", ":", "\n", "        ", "factor", "=", "1.0", ";", "\n", "", "elif", "(", "w", ">=", "701", ")", "and", "(", "w", "<", "781", ")", ":", "\n", "        ", "factor", "=", "0.3", "+", "0.7", "*", "(", "780", "-", "w", ")", "/", "(", "780", "-", "700", ")", ";", "\n", "\n", "", "return", "numpy", ".", "array", "(", "[", "math", ".", "pow", "(", "r", "*", "factor", ",", "gamma", ")", ",", "math", ".", "pow", "(", "g", "*", "factor", ",", "gamma", ")", ",", "math", ".", "pow", "(", "b", "*", "factor", ",", "gamma", ")", "]", ",", "dtype", "=", "numpy", ".", "float32", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.convert_hyperspec_rgb": [[92, 104], ["numpy.zeros", "range", "len", "len", "image_util.wavelength_to_rgb", "len", "numpy.zeros.min", "numpy.zeros.max", "numpy.zeros.min"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.image_util.wavelength_to_rgb"], ["", "def", "convert_hyperspec_rgb", "(", "data", ",", "wavelens", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "assert", "len", "(", "wavelens", ")", "==", "data", ".", "shape", "[", "0", "]", "\n", "\n", "image", "=", "numpy", ".", "zeros", "(", "shape", "=", "(", "3", ",", "data", ".", "shape", "[", "1", "]", ",", "data", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "wavelens", ")", ")", ":", "\n", "        ", "rgb", "=", "wavelength_to_rgb", "(", "wavelens", "[", "c", "]", ")", "/", "len", "(", "wavelens", ")", "\n", "image", "+=", "rgb", "[", ":", ",", "None", ",", "None", "]", "*", "data", "[", "None", ",", "c", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "return", "(", "image", "-", "image", ".", "min", "(", ")", ")", "/", "(", "image", ".", "max", "(", ")", "-", "image", ".", "min", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_hyperspec_rgb": [[105, 114], ["image_util.convert_hyperspec_rgb", "image.astype.swapaxes", "image.astype.swapaxes", "numpy.maximum", "image.astype.astype", "PIL.Image.fromarray", "Image.fromarray.save", "len", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.image_util.convert_hyperspec_rgb", "home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save"], ["", "", "def", "export_hyperspec_rgb", "(", "fname", ",", "data", ",", "wavelens", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "assert", "len", "(", "wavelens", ")", "==", "data", ".", "shape", "[", "0", "]", "\n", "image", "=", "convert_hyperspec_rgb", "(", "data", ",", "wavelens", ",", "normalize", ")", "\n", "image", "=", "image", ".", "swapaxes", "(", "0", ",", "2", ")", "\n", "image", "=", "image", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "image", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "255", "*", "image", ",", "255", ")", ")", "\n", "image", "=", "image", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "image", ",", "'RGB'", ")", "\n", "im", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_label": [[116, 140], ["numpy.zeros", "numpy.zeros", "range", "numpy.maximum", "image.swapaxes.astype", "image.swapaxes.swapaxes", "image.swapaxes.swapaxes", "PIL.Image.fromarray", "Image.fromarray.save", "type", "numpy.array", "numpy.minimum", "data.max", "image_util.get_unique_colors"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save", "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.get_unique_colors"], ["", "def", "export_label", "(", "fname", ",", "data", ",", "colors", ",", "background", "=", "None", ")", ":", "\n", "\n", "# labels = list(set(data.flatten().tolist()))", "\n", "\n", "    ", "if", "type", "(", "colors", ")", "is", "int", ":", "\n", "        ", "colors", "=", "[", "(", "255", "*", "r", ",", "255", "*", "g", ",", "255", "*", "b", ",", "125", ")", "for", "r", ",", "g", ",", "b", "in", "get_unique_colors", "(", "colors", ")", "]", "\n", "# print(colors)", "\n", "\n", "", "image", "=", "numpy", ".", "zeros", "(", "shape", "=", "(", "3", ",", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "image_alpha", "=", "numpy", ".", "zeros", "(", "shape", "=", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "for", "c", "in", "range", "(", "data", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "color", "=", "numpy", ".", "array", "(", "colors", "[", "c", "]", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "image", "+=", "color", "[", "0", ":", "3", ",", "None", ",", "None", "]", "*", "(", "data", "[", "None", ",", ":", ",", ":", "]", "==", "c", ")", "\n", "image_alpha", "+=", "(", "color", "[", "3", ",", "None", ",", "None", "]", "/", "255.0", ")", "*", "(", "data", "==", "c", ")", "\n", "\n", "", "if", "not", "background", "is", "None", ":", "\n", "        ", "image", "=", "255", "*", "background", "[", "None", ",", ":", ",", ":", "]", "*", "(", "1.0", "-", "image_alpha", "[", "None", ",", ":", ",", ":", "]", ")", "+", "image", "*", "image_alpha", "[", "None", ",", ":", ",", ":", "]", "\n", "\n", "", "image", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "image", ",", "255", ")", ")", "\n", "image", "=", "image", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "image", "=", "image", ".", "swapaxes", "(", "0", ",", "2", ")", "\n", "image", "=", "image", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "image", ",", "'RGB'", ")", "\n", "im", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.image_util.export_activation": [[141, 174], ["int", "numpy.zeros", "range", "range", "PIL.Image.fromarray", "os.path.dirname", "Image.fromarray.save", "len", "len", "data.min", "data.max", "math.ceil", "numpy.maximum", "d.astype.astype", "os.makedirs", "math.sqrt", "numpy.minimum", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save"], ["", "def", "export_activation", "(", "fname", ",", "data", ",", "dmin", "=", "None", ",", "dmax", "=", "None", ",", "border", "=", "1", ")", ":", "\n", "\n", "    ", "if", "len", "(", "data", ".", "shape", ")", "==", "2", ":", "\n", "        ", "data", "=", "data", "[", "None", ",", ":", ",", ":", "]", "\n", "border", "=", "0", "\n", "\n", "", "assert", "len", "(", "data", ".", "shape", ")", "==", "3", "\n", "dmin", "=", "data", ".", "min", "(", ")", "if", "dmin", "is", "None", "else", "dmin", "\n", "dmax", "=", "data", ".", "max", "(", ")", "if", "dmax", "is", "None", "else", "dmax", "\n", "\n", "n", "=", "int", "(", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "data", ".", "shape", "[", "-", "3", "]", ")", ")", ")", "\n", "h", "=", "data", ".", "shape", "[", "1", "]", "\n", "w", "=", "data", ".", "shape", "[", "2", "]", "\n", "\n", "im_x", "=", "numpy", ".", "zeros", "(", "(", "(", "h", "+", "border", ")", "*", "n", ",", "(", "w", "+", "border", ")", "*", "n", ",", "3", ")", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "im_x", "[", ":", ",", "i", "*", "(", "h", "+", "border", ")", "-", "1", ",", "0", "]", "=", "255", "\n", "im_x", "[", "i", "*", "(", "h", "+", "border", ")", "-", "1", ",", ":", ",", "0", "]", "=", "255", "\n", "\n", "", "for", "f", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "d", "=", "255", "*", "(", "data", "[", "f", ",", ":", ",", ":", "]", "-", "dmin", ")", "/", "(", "dmax", "-", "dmin", ")", "\n", "d", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "d", ",", "255", ")", ")", "\n", "d", "=", "d", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "\n", "yi", "=", "(", "f", "//", "n", ")", "*", "(", "h", "+", "border", ")", "\n", "xi", "=", "(", "f", "%", "n", ")", "*", "(", "w", "+", "border", ")", "\n", "im_x", "[", "yi", ":", "(", "yi", "+", "h", ")", ",", "xi", ":", "(", "xi", "+", "w", ")", ",", ":", "]", "=", "d", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "im", "=", "Image", ".", "fromarray", "(", "im_x", ",", "'RGB'", ")", "\n", "dname", "=", "os", ".", "path", ".", "dirname", "(", "fname", ")", "\n", "if", "dname", "!=", "\"\"", "and", "not", "os", ".", "path", ".", "isdir", "(", "dname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dname", ")", "\n", "", "im", ".", "save", "(", "fname", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.export_graph": [[8, 12], ["denet.verbose", "open", "theano.printing.debugprint", "theano.printing.debugprint"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.verbose"], ["def", "export_graph", "(", "fname", ",", "func", ")", ":", "\n", "    ", "logging", ".", "verbose", "(", "\"Saving function graph: \"", "+", "fname", ")", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "theano", ".", "printing", ".", "debugprint", "(", "func", ",", "file", "=", "f", ",", "print_type", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.profile": [[13, 25], ["denet.info", "range", "os.environ.get", "func", "func.profile.summary"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.info"], ["", "", "def", "profile", "(", "func", ",", "it_num", ",", "*", "args", ")", ":", "\n", "    ", "assert", "os", ".", "environ", ".", "get", "(", "'CUDA_LAUNCH_BLOCKING'", ",", "'0'", ")", "==", "'1'", ",", "\"Requires CUDA_LAUNCH_BLOCKING=1 to get proper results\"", "\n", "assert", "not", "func", ".", "profile", "is", "None", ",", "\"Compile function with profile=True\"", "\n", "\n", "logging", ".", "info", "(", "\"Profiling function (%i it)\"", "%", "it_num", ")", "\n", "for", "_", "in", "range", "(", "it_num", ")", ":", "\n", "        ", "func", "(", "*", "args", ")", "\n", "\n", "", "try", ":", "\n", "        ", "func", ".", "profile", ".", "summary", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.log_softmax": [[27, 30], ["x.max", "theano.log", "theano.sum", "theano.exp"], "function", ["None"], ["", "", "def", "log_softmax", "(", "x", ",", "axis", ")", ":", "\n", "    ", "xdev", "=", "x", "-", "x", ".", "max", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "return", "xdev", "-", "tensor", ".", "log", "(", "tensor", ".", "sum", "(", "tensor", ".", "exp", "(", "xdev", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.smooth_L1": [[32, 35], ["abs", "theano.switch", "theano.pow"], "function", ["None"], ["", "def", "smooth_L1", "(", "x", ")", ":", "\n", "    ", "x_abs", "=", "abs", "(", "x", ")", "\n", "return", "tensor", ".", "switch", "(", "x_abs", "<", "1", ",", "0.5", "*", "tensor", ".", "pow", "(", "x", ",", "2", ")", ",", "x_abs", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.get_overlap_iou": [[38, 60], ["denet.debug", "theano.matrix", "theano.matrix", "theano.maximum", "theano.maximum", "theano.function", "theano.function", "numpy.array", "numpy.array", "theano.function.", "len", "len", "theano.minimum", "theano.maximum", "theano.minimum", "theano.maximum"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.logging.debug"], ["def", "get_overlap_iou", "(", "obj_bboxs", ",", "sample_bboxs", ")", ":", "\n", "\n", "    ", "global", "overlap_func", "\n", "if", "overlap_func", "is", "None", ":", "\n", "        ", "logging", ".", "debug", "(", "\"Building overlap function\"", ")", "\n", "x_bboxs", "=", "tensor", ".", "matrix", "(", ")", "\n", "y_bboxs", "=", "tensor", ".", "matrix", "(", ")", "\n", "x_area", "=", "(", "x_bboxs", "[", ":", ",", "2", "]", "-", "x_bboxs", "[", ":", ",", "0", "]", ")", "*", "(", "x_bboxs", "[", ":", ",", "3", "]", "-", "x_bboxs", "[", ":", ",", "1", "]", ")", "\n", "y_area", "=", "(", "y_bboxs", "[", ":", ",", "2", "]", "-", "y_bboxs", "[", ":", ",", "0", "]", ")", "*", "(", "y_bboxs", "[", ":", ",", "3", "]", "-", "y_bboxs", "[", ":", ",", "1", "]", ")", "\n", "dx", "=", "tensor", ".", "maximum", "(", "tensor", ".", "minimum", "(", "x_bboxs", "[", ":", ",", "None", ",", "2", "]", ",", "y_bboxs", "[", "None", ",", ":", ",", "2", "]", ")", "-", "tensor", ".", "maximum", "(", "x_bboxs", "[", ":", ",", "None", ",", "0", "]", ",", "y_bboxs", "[", "None", ",", ":", ",", "0", "]", ")", ",", "0", ")", "\n", "dy", "=", "tensor", ".", "maximum", "(", "tensor", ".", "minimum", "(", "x_bboxs", "[", ":", ",", "None", ",", "3", "]", ",", "y_bboxs", "[", "None", ",", ":", ",", "3", "]", ")", "-", "tensor", ".", "maximum", "(", "x_bboxs", "[", ":", ",", "None", ",", "1", "]", ",", "y_bboxs", "[", "None", ",", ":", ",", "1", "]", ")", ",", "0", ")", "\n", "area_intersect", "=", "dx", "*", "dy", "\n", "area_union", "=", "(", "x_area", "[", ":", ",", "None", "]", "+", "y_area", "[", "None", ",", ":", "]", "-", "area_intersect", ")", "\n", "area_iou", "=", "area_intersect", "/", "area_union", "\n", "overlap_func", "=", "theano", ".", "function", "(", "[", "x_bboxs", ",", "y_bboxs", "]", ",", "area_iou", ",", "allow_input_downcast", "=", "True", ")", "\n", "\n", "", "if", "len", "(", "obj_bboxs", ")", "==", "0", "or", "len", "(", "sample_bboxs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "x", "=", "numpy", ".", "array", "(", "obj_bboxs", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "y", "=", "numpy", ".", "array", "(", "sample_bboxs", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "return", "overlap_func", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.replace_inf_nan": [[62, 64], ["theano.switch", "theano.or_", "theano.isnan", "theano.isinf"], "function", ["None"], ["", "", "def", "replace_inf_nan", "(", "x", ",", "v", ")", ":", "\n", "    ", "return", "tensor", ".", "switch", "(", "tensor", ".", "or_", "(", "tensor", ".", "isnan", "(", "x", ")", ",", "tensor", ".", "isinf", "(", "x", ")", ")", ",", "v", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.update_inf_nan": [[66, 69], ["theano.switch", "theano.or_", "theano.isnan", "theano.isinf"], "function", ["None"], ["", "def", "update_inf_nan", "(", "x", ",", "delta", ",", "v", ")", ":", "\n", "    ", "r", "=", "x", "+", "delta", "\n", "return", "tensor", ".", "switch", "(", "tensor", ".", "or_", "(", "tensor", ".", "isnan", "(", "r", ")", ",", "tensor", ".", "isinf", "(", "r", ")", ")", ",", "x", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle": [[71, 80], ["enumerate", "input.dimshuffle"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], ["", "def", "dimshuffle", "(", "input", ",", "s", ")", ":", "\n", "\n", "    ", "need_shuffle", "=", "False", "\n", "for", "i", ",", "ss", "in", "enumerate", "(", "s", ")", ":", "\n", "        ", "if", "i", "!=", "ss", ":", "\n", "            ", "need_shuffle", "=", "True", "\n", "break", "\n", "\n", "", "", "return", "input", ".", "dimshuffle", "(", "s", ")", "if", "need_shuffle", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.other_axes": [[82, 88], ["range", "other_axes.append"], "function", ["None"], ["", "def", "other_axes", "(", "input", ",", "axes", ")", ":", "\n", "    ", "other_axes", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "input", ".", "ndim", ")", ":", "\n", "        ", "if", "a", "not", "in", "axes", ":", "\n", "            ", "other_axes", ".", "append", "(", "a", ")", "\n", "", "", "return", "other_axes", "\n", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.numpy_to_json": [[8, 17], ["isinstance", "TypeError", "io.BytesIO", "numpy.save", "type", "base64.b64encode().decode", "base64.b64encode", "io.BytesIO.getvalue"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.__init__.DatasetAbstract.save"], ["def", "numpy_to_json", "(", "python_object", ")", ":", "\n", "    ", "if", "isinstance", "(", "python_object", ",", "numpy", ".", "ndarray", ")", ":", "\n", "        ", "strio", "=", "io", ".", "BytesIO", "(", ")", "\n", "numpy", ".", "save", "(", "strio", ",", "python_object", ")", "\n", "\n", "return", "{", "'__class__'", ":", "'numpy.ndarray'", ",", "\n", "'__value__'", ":", "base64", ".", "b64encode", "(", "strio", ".", "getvalue", "(", ")", ")", ".", "decode", "(", ")", "}", "\n", "\n", "", "raise", "TypeError", "(", "type", "(", "python_object", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.numpy_from_json": [[18, 25], ["io.BytesIO", "numpy.load", "base64.b64decode"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "def", "numpy_from_json", "(", "json_object", ")", ":", "\n", "    ", "if", "'__class__'", "in", "json_object", ":", "\n", "        ", "if", "json_object", "[", "'__class__'", "]", "==", "'numpy.ndarray'", ":", "\n", "            ", "bio", "=", "io", ".", "BytesIO", "(", "base64", ".", "b64decode", "(", "json_object", "[", "'__value__'", "]", ")", ")", "\n", "return", "numpy", ".", "load", "(", "bio", ")", "\n", "\n", "", "", "return", "json_object", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_gz": [[26, 30], ["gzip.open", "json.load"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "def", "json_from_gz", "(", "fname", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "fname", ",", "\"rt\"", ")", "as", "f", ":", "\n", "        ", "json_obj", "=", "json", ".", "load", "(", "f", ",", "object_hook", "=", "numpy_from_json", ")", "\n", "", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_gz": [[31, 34], ["gzip.open", "json.dump"], "function", ["None"], ["", "def", "json_to_gz", "(", "fname", ",", "json_obj", ",", "compresslevel", "=", "9", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "fname", ",", "\"wt\"", ",", "compresslevel", "=", "compresslevel", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "json_obj", ",", "f", ",", "indent", "=", "2", ",", "default", "=", "numpy_to_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_file": [[35, 42], ["json_util.json_from_gz", "os.path.splitext", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_from_gz", "home.repos.pwc.inspect_result.lachlants_denet.dataset.pascal_voc.DatasetPascalVOC.load"], ["", "", "def", "json_from_file", "(", "fname", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "splitext", "(", "fname", ")", "[", "1", "]", "==", "\".gz\"", ":", "\n", "        ", "return", "json_from_gz", "(", "fname", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "json_obj", "=", "json", ".", "load", "(", "f", ",", "object_hook", "=", "numpy_from_json", ")", "\n", "", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_file": [[43, 49], ["json_util.json_to_gz", "os.path.splitext", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.json_util.json_to_gz"], ["", "", "def", "json_to_file", "(", "fname", ",", "json_obj", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "splitext", "(", "fname", ")", "[", "1", "]", "==", "\".gz\"", ":", "\n", "        ", "return", "json_to_gz", "(", "fname", ",", "json_obj", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"wt\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "json_obj", ",", "f", ",", "indent", "=", "2", ",", "default", "=", "numpy_to_json", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.__init__": [[17, 19], ["__init__.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.reset"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.mark": [[20, 22], ["__init__.Timer.marks.append", "time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.reset": [[23, 25], ["time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current": [[27, 29], ["time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current_ms": [[31, 33], ["__init__.Timer.current"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.current"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta": [[34, 38], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta_ms": [[39, 41], ["__init__.Timer.delta"], "methods", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.delta"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.deltas": [[42, 44], ["range", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.Timer.deltas_ms": [[45, 47], ["range", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.print_flush": [[48, 51], ["print", "sys.stdout.flush"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_files": [[52, 62], ["os.walk", "paths.sort", "os.path.join", "fnmatch.fnmatch", "paths.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.find_layers": [[65, 87], ["type", "len", "enumerate", "enumerate", "len", "len", "Exception", "missed_names.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap": [[91, 95], ["max", "max", "min", "max", "min", "max"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_rel": [[97, 102], ["max", "max", "min", "max", "min", "max"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap_iou": [[104, 110], ["__init__.overlap"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.overlap"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.clip": [[112, 119], ["min", "max", "min", "max"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_flat_index": [[121, 123], ["sum", "zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.ndarray_unpack": [[125, 134], ["numpy.prod", "r.append", "v[].reshape"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.block_view_2d": [[136, 140], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.convert_num": [[142, 150], ["int", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.merge_axes": [[151, 170], ["axes.sort", "range", "numpy.prod", "x.dimshuffle", "y.dimshuffle.flatten", "list", "list.insert", "y.dimshuffle.dimshuffle", "len", "len", "tuple", "range", "non_axes.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle", "home.repos.pwc.inspect_result.lachlants_denet.common.theano_util.dimshuffle"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.import_c": [[171, 196], ["compilelock.get_lock", "cmodule.dlimport_workdir", "os.path.basename", "cmodule.GCC_compiler.compile_str", "compilelock.release_lock", "open", "f.read", "print", "os.path.splitext"], "function", ["None"], []], "home.repos.pwc.inspect_result.lachlants_denet.common.__init__.get_params_dict": [[200, 209], ["params.split", "str.split", "__init__.convert_num", "len"], "function", ["home.repos.pwc.inspect_result.lachlants_denet.common.__init__.convert_num"], []]}