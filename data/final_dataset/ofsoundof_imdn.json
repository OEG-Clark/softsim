{"home.repos.pwc.inspect_result.ofsoundof_imdn.None.val_demo.main": [[11, 96], ["utils.utils_logger.logger_info", "logging.getLogger", "torch.cuda.current_device", "torch.cuda.empty_cache", "torch.device", "os.path.join", "models.IMDN.IMDN", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "sum", "logging.getLogger.info", "os.path.join", "os.path.join", "utils.utils_image.mkdir", "collections.OrderedDict", "logging.getLogger.info", "logging.getLogger.info", "torch.cuda.Event", "torch.cuda.Event", "utils.utils_image.get_image_paths", "logging.getLogger.info", "torch.load", "map", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "utils.utils_image.uint2tensor4", "img_L.to.to", "torch.cuda.Event.record", "model.to.", "torch.cuda.Event.record", "torch.cuda.synchronize", "test_results[].append", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "torch.cuda.is_available", "model.to.parameters", "os.path.basename", "torch.cuda.Event.elapsed_time", "os.path.join", "sum", "len", "x.numel"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imsave"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "utils_logger", ".", "logger_info", "(", "'NTIRE2022-EfficientSR'", ",", "log_path", "=", "'NTIRE2022-EfficientSR.log'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'NTIRE2022-EfficientSR'", ")", "\n", "\n", "# --------------------------------", "\n", "# basic settings", "\n", "# --------------------------------", "\n", "# testsets = 'DIV2K'", "\n", "testsets", "=", "'/home/thor/projects/data/super_resolution/DIV2K'", "\n", "testset_L", "=", "'DIV2K_valid_LR_bicubic'", "\n", "\n", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# --------------------------------", "\n", "# load model", "\n", "# --------------------------------", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "'model_zoo'", ",", "'imdn_x4.pth'", ")", "\n", "model", "=", "IMDN", "(", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nc", "=", "64", ",", "nb", "=", "8", ",", "upscale", "=", "4", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# number of parameters", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Params number: {}'", ".", "format", "(", "number_parameters", ")", ")", "\n", "\n", "# --------------------------------", "\n", "# read image", "\n", "# --------------------------------", "\n", "L_folder", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_L", ",", "'X4'", ")", "\n", "E_folder", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_L", "+", "'_results'", ")", "\n", "util", ".", "mkdir", "(", "E_folder", ")", "\n", "\n", "# record PSNR, runtime", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'runtime'", "]", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "L_folder", ")", "\n", "logger", ".", "info", "(", "E_folder", ")", "\n", "idx", "=", "0", "\n", "\n", "start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "for", "img", "in", "util", ".", "get_image_paths", "(", "L_folder", ")", ":", "\n", "\n", "# --------------------------------", "\n", "# (1) img_L", "\n", "# --------------------------------", "\n", "        ", "idx", "+=", "1", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", ",", "img_name", "+", "ext", ")", ")", "\n", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "3", ")", "\n", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "start", ".", "record", "(", ")", "\n", "img_E", "=", "model", "(", "img_L", ")", "\n", "end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "test_results", "[", "'runtime'", "]", ".", "append", "(", "start", ".", "elapsed_time", "(", "end", ")", ")", "# milliseconds", "\n", "\n", "\n", "#        torch.cuda.synchronize()", "\n", "#        start = time.time()", "\n", "#        img_E = model(img_L)", "\n", "#        torch.cuda.synchronize()", "\n", "#        end = time.time()", "\n", "#        test_results['runtime'].append(end-start)  # seconds", "\n", "\n", "# --------------------------------", "\n", "# (2) img_E", "\n", "# --------------------------------", "\n", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_folder", ",", "img_name", "[", ":", "4", "]", "+", "ext", ")", ")", "\n", "", "ave_runtime", "=", "sum", "(", "test_results", "[", "'runtime'", "]", ")", "/", "len", "(", "test_results", "[", "'runtime'", "]", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "'------> Average runtime of ({}) is : {:.6f} seconds'", ".", "format", "(", "L_folder", ",", "ave_runtime", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.None.test_demo.main": [[12, 113], ["utils.utils_logger.logger_info", "logging.getLogger", "os.path.join", "torch.cuda.current_device", "torch.cuda.empty_cache", "torch.device", "os.path.join", "models.IMDN.IMDN", "print", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "sum", "logging.getLogger.info", "os.path.join", "os.path.join", "utils.utils_image.mkdir", "collections.OrderedDict", "logging.getLogger.info", "logging.getLogger.info", "torch.cuda.Event", "torch.cuda.Event", "utils.model_summary.get_model_activation", "logging.getLogger.info", "logging.getLogger.info", "utils.model_summary.get_model_flops", "logging.getLogger.info", "sum", "logging.getLogger.info", "logging.getLogger.info", "os.getcwd", "torch.load", "map", "utils.utils_image.get_image_paths", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "utils.utils_image.uint2tensor4", "img_L.to.to", "torch.cuda.Event.record", "model.to.", "torch.cuda.Event.record", "torch.cuda.synchronize", "test_results[].append", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "map", "torch.cuda.is_available", "model.to.parameters", "os.path.basename", "torch.cuda.Event.elapsed_time", "os.path.join", "model.to.parameters", "sum", "len", "x.numel", "x.numel"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_activation", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_flops", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imsave"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "utils_logger", ".", "logger_info", "(", "'NTIRE2022-EfficientSR'", ",", "log_path", "=", "'NTIRE2022-EfficientSR.log'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'NTIRE2022-EfficientSR'", ")", "\n", "\n", "# --------------------------------", "\n", "# basic settings", "\n", "# --------------------------------", "\n", "# testsets = 'DIV2K'", "\n", "testsets", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ")", "\n", "testset_L", "=", "'DIV2K_test_LR'", "\n", "\n", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# --------------------------------", "\n", "# load model", "\n", "# --------------------------------", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "'model_zoo'", ",", "'imdn_x4.pth'", ")", "\n", "model", "=", "IMDN", "(", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nc", "=", "64", ",", "nb", "=", "8", ",", "upscale", "=", "4", ")", "\n", "print", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# number of parameters", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Params number: {}'", ".", "format", "(", "number_parameters", ")", ")", "\n", "\n", "# --------------------------------", "\n", "# read image", "\n", "# --------------------------------", "\n", "L_folder", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_L", ")", "\n", "E_folder", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_L", "+", "'_results'", ")", "\n", "util", ".", "mkdir", "(", "E_folder", ")", "\n", "\n", "# record PSNR, runtime", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'runtime'", "]", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "L_folder", ")", "\n", "logger", ".", "info", "(", "E_folder", ")", "\n", "idx", "=", "0", "\n", "\n", "start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "for", "img", "in", "util", ".", "get_image_paths", "(", "L_folder", ")", "[", "0", "]", ":", "\n", "\n", "# --------------------------------", "\n", "# (1) img_L", "\n", "# --------------------------------", "\n", "        ", "idx", "+=", "1", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", ",", "img_name", "+", "ext", ")", ")", "\n", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "3", ")", "\n", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "start", ".", "record", "(", ")", "\n", "img_E", "=", "model", "(", "img_L", ")", "\n", "end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "test_results", "[", "'runtime'", "]", ".", "append", "(", "start", ".", "elapsed_time", "(", "end", ")", ")", "# milliseconds", "\n", "\n", "\n", "#        torch.cuda.synchronize()", "\n", "#        start = time.time()", "\n", "#        img_E = model(img_L)", "\n", "#        torch.cuda.synchronize()", "\n", "#        end = time.time()", "\n", "#        test_results['runtime'].append(end-start)  # seconds", "\n", "\n", "# --------------------------------", "\n", "# (2) img_E", "\n", "# --------------------------------", "\n", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_folder", ",", "img_name", "[", ":", "4", "]", "+", "ext", ")", ")", "\n", "\n", "", "input_dim", "=", "(", "3", ",", "256", ",", "256", ")", "# set the input dimension", "\n", "activations", ",", "num_conv", "=", "get_model_activation", "(", "model", ",", "input_dim", ")", "\n", "activations", "=", "activations", "/", "10", "**", "6", "\n", "logger", ".", "info", "(", "\"{:>16s} : {:<.4f} [M]\"", ".", "format", "(", "\"#Activations\"", ",", "activations", ")", ")", "\n", "logger", ".", "info", "(", "\"{:>16s} : {:<d}\"", ".", "format", "(", "\"#Conv2d\"", ",", "num_conv", ")", ")", "\n", "\n", "flops", "=", "get_model_flops", "(", "model", ",", "input_dim", ",", "False", ")", "\n", "flops", "=", "flops", "/", "10", "**", "9", "\n", "logger", ".", "info", "(", "\"{:>16s} : {:<.4f} [G]\"", ".", "format", "(", "\"FLOPs\"", ",", "flops", ")", ")", "\n", "\n", "num_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "num_parameters", "=", "num_parameters", "/", "10", "**", "6", "\n", "logger", ".", "info", "(", "\"{:>16s} : {:<.4f} [M]\"", ".", "format", "(", "\"#Params\"", ",", "num_parameters", ")", ")", "\n", "\n", "ave_runtime", "=", "sum", "(", "test_results", "[", "'runtime'", "]", ")", "/", "len", "(", "test_results", "[", "'runtime'", "]", ")", "/", "1000.0", "\n", "logger", ".", "info", "(", "'------> Average runtime of ({}) is : {:.6f} seconds'", ".", "format", "(", "L_folder", ",", "ave_runtime", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_flops": [[27, 47], ["model_summary.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.FloatTensor().to", "torch.FloatTensor().to", "add_flops_counting_methods.", "model_summary.print_model_with_flops", "add_flops_counting_methods.eval", "list", "torch.FloatTensor", "torch.FloatTensor", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_flops_counting_methods", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.start_flops_count", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_flops_cost", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.stop_flops_count", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.print_model_with_flops"], ["def", "get_model_flops", "(", "model", ",", "input_res", ",", "print_per_layer_stat", "=", "True", ",", "\n", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", ",", "'Please provide the size of the input image.'", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", ",", "'Input image should have 3 dimensions.'", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "list", "(", "flops_model", ".", "parameters", "(", ")", ")", "[", "-", "1", "]", ".", "device", "\n", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "return", "flops_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_activation": [[48, 65], ["model_summary.add_activation_counting_methods", "add_activation_counting_methods.eval().start_activation_count", "add_activation_counting_methods.compute_average_activation_cost", "add_activation_counting_methods.stop_activation_count", "type", "len", "input_constructor", "add_activation_counting_methods.", "torch.FloatTensor().to", "torch.FloatTensor().to", "add_activation_counting_methods.", "add_activation_counting_methods.eval", "list", "torch.FloatTensor", "torch.FloatTensor", "add_activation_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_activation_counting_methods", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.start_activation_count", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_activation_cost", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.stop_activation_count"], ["", "def", "get_model_activation", "(", "model", ",", "input_res", ",", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", ",", "'Please provide the size of the input image.'", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", ",", "'Input image should have 3 dimensions.'", "\n", "activation_model", "=", "add_activation_counting_methods", "(", "model", ")", "\n", "activation_model", ".", "eval", "(", ")", ".", "start_activation_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "activation_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "list", "(", "activation_model", ".", "parameters", "(", ")", ")", "[", "-", "1", "]", ".", "device", "\n", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "activation_model", "(", "batch", ")", "\n", "\n", "", "activation_count", ",", "num_conv", "=", "activation_model", ".", "compute_average_activation_cost", "(", ")", "\n", "activation_model", ".", "stop_activation_count", "(", ")", "\n", "\n", "return", "activation_count", ",", "num_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_complexity_info": [[67, 90], ["model_summary.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "model_summary.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.FloatTensor", "torch.FloatTensor", "add_flops_counting_methods.", "model_summary.print_model_with_flops", "add_flops_counting_methods.eval", "model_summary.flops_to_string", "model_summary.params_to_string"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_flops_counting_methods", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.start_flops_count", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_flops_cost", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_parameters_number", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.stop_flops_count", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.print_model_with_flops", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.flops_to_string", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.params_to_string"], ["", "def", "get_model_complexity_info", "(", "model", ",", "input_res", ",", "print_per_layer_stat", "=", "True", ",", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "3", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "FloatTensor", "(", "1", ",", "*", "input_res", ")", "\n", "_", "=", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.flops_to_string": [[92, 111], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.params_to_string": [[113, 120], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.print_model_with_flops": [[122, 158], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "model_summary.is_supported_instance", "model_summary..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "model_summary..children", "m.accumulate_flops", "model_summary.flops_to_string", "model_summary..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_flops_cost", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "'GMac'", ",", "precision", "=", "3", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "flops_to_string", "(", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.get_model_parameters_number": [[160, 163], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_flops_counting_methods": [[165, 176], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "# embed()", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_flops_cost": [[178, 193], ["model_summary..modules", "model_summary.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean flops consumption per image.\n\n    \"\"\"", "\n", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.start_flops_count": [[195, 205], ["model_summary..apply"], "function", ["None"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.stop_flops_count": [[207, 217], ["model_summary..apply"], "function", ["None"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.reset_flops_count": [[219, 228], ["model_summary..apply"], "function", ["None"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_flops_counter_hook_function": [[230, 246], ["model_summary.is_supported_instance", "hasattr", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance"], ["", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "ReLU", ",", "nn", ".", "PReLU", ",", "nn", ".", "ELU", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU6", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "relu_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "linear_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "bn_flops_counter_hook", ")", "\n", "", "else", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "empty_flops_counter_hook", ")", "\n", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.remove_flops_counter_hook_function": [[248, 253], ["model_summary.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_flops_counter_variable_or_reset": [[255, 258], ["model_summary.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance"], ["", "", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance": [[261, 272], ["isinstance"], "function", ["None"], ["", "", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "\n", "(", "\n", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "\n", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "Linear", ",", "\n", "nn", ".", "ReLU", ",", "nn", ".", "PReLU", ",", "nn", ".", "ELU", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU6", ",", "\n", ")", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.conv_flops_counter_hook": [[274, 295], ["list", "list", "int", "numpy.prod", "int", "int", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "# input = input[0]", "\n", "\n", "    ", "batch_size", "=", "output", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "overall_conv_flops", "=", "int", "(", "conv_per_position_flops", ")", "*", "int", "(", "active_elements_count", ")", "\n", "\n", "# overall_flops = overall_conv_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_conv_flops", ")", "\n", "# conv_module.__output_dims__ = output_dims", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.relu_flops_counter_hook": [[298, 301], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "# print(module.__flops__, id(module))", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.linear_flops_counter_hook": [[305, 313], ["len", "int", "int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "if", "len", "(", "input", ".", "shape", ")", "==", "1", ":", "\n", "        ", "batch_size", "=", "1", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "0", "]", "*", "output", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.bn_flops_counter_hook": [[315, 329], ["int", "numpy.prod"], "function", ["None"], ["", "", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "# input = input[0]", "\n", "# TODO: need to check here", "\n", "# batch_flops = np.prod(input.shape)", "\n", "# if module.affine:", "\n", "#     batch_flops *= 2", "\n", "# module.__flops__ += int(batch_flops)", "\n", "    ", "batch", "=", "output", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "channels", "=", "module", ".", "num_features", "\n", "batch_flops", "=", "batch", "*", "channels", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_activation_counting_methods": [[332, 343], ["start_activation_count.__get__", "stop_activation_count.__get__", "reset_activation_count.__get__", "compute_average_activation_cost.__get__", "net_main_module.reset_activation_count"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.reset_activation_count"], ["", "def", "add_activation_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "# embed()", "\n", "    ", "net_main_module", ".", "start_activation_count", "=", "start_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_activation_count", "=", "stop_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_activation_count", "=", "reset_activation_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_activation_cost", "=", "compute_average_activation_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_activation_count", "(", ")", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.compute_average_activation_cost": [[345, 361], ["model_summary..modules", "model_summary.is_supported_instance_for_activation"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance_for_activation"], ["", "def", "compute_average_activation_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean activation consumption per image.\n\n    \"\"\"", "\n", "\n", "activation_sum", "=", "0", "\n", "num_conv", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "            ", "activation_sum", "+=", "module", ".", "__activation__", "\n", "num_conv", "+=", "module", ".", "__num_conv__", "\n", "", "", "return", "activation_sum", ",", "num_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.start_activation_count": [[363, 373], ["model_summary..apply"], "function", ["None"], ["", "def", "start_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean activation consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_activation_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.stop_activation_count": [[375, 385], ["model_summary..apply"], "function", ["None"], ["", "def", "stop_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean activation consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "remove_activation_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.reset_activation_count": [[387, 396], ["model_summary..apply"], "function", ["None"], ["", "def", "reset_activation_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_activation_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "self", ".", "apply", "(", "add_activation_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_activation_counter_hook_function": [[398, 406], ["model_summary.is_supported_instance_for_activation", "hasattr", "isinstance", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance_for_activation"], ["", "def", "add_activation_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__activation_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_activation_counter_hook", ")", "\n", "module", ".", "__activation_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.remove_activation_counter_hook_function": [[408, 413], ["model_summary.is_supported_instance_for_activation", "hasattr", "module.__activation_handle__.remove"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance_for_activation"], ["", "", "", "def", "remove_activation_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__activation_handle__'", ")", ":", "\n", "            ", "module", ".", "__activation_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__activation_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.add_activation_counter_variable_or_reset": [[415, 419], ["model_summary.is_supported_instance_for_activation"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance_for_activation"], ["", "", "", "def", "add_activation_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "        ", "module", ".", "__activation__", "=", "0", "\n", "module", ".", "__num_conv__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.is_supported_instance_for_activation": [[421, 429], ["isinstance"], "function", ["None"], ["", "", "def", "is_supported_instance_for_activation", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "\n", "(", "\n", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "Conv1d", ",", "nn", ".", "Linear", ",", "nn", ".", "ConvTranspose1d", "\n", ")", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.conv_activation_counter_hook": [[430, 441], ["output.numel"], "function", ["None"], ["", "def", "conv_activation_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the activations in the convolutional operation.\n    Reference: Ilija Radosavovic, Raj Prateek Kosaraju, Ross Girshick, Kaiming He, Piotr Doll\u00e1r, Designing Network Design Spaces.\n    :param module:\n    :param input:\n    :param output:\n    :return:\n    \"\"\"", "\n", "module", ".", "__activation__", "+=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__num_conv__", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.empty_flops_counter_hook": [[443, 445], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.upsample_flops_counter_hook": [[447, 454], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.pool_flops_counter_hook": [[456, 459], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.model_summary.dconv_flops_counter_hook": [[461, 480], ["list", "int", "numpy.prod"], "function", ["None"], ["", "def", "dconv_flops_counter_hook", "(", "dconv_module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "m_channels", ",", "in_channels", ",", "kernel_dim1", ",", "_", ",", "=", "dconv_module", ".", "weight", ".", "shape", "\n", "out_channels", ",", "_", ",", "kernel_dim2", ",", "_", ",", "=", "dconv_module", ".", "projection", ".", "shape", "\n", "# groups = dconv_module.groups", "\n", "\n", "# filters_per_channel = out_channels // groups", "\n", "conv_per_position_flops1", "=", "kernel_dim1", "**", "2", "*", "in_channels", "*", "m_channels", "\n", "conv_per_position_flops2", "=", "kernel_dim2", "**", "2", "*", "out_channels", "*", "m_channels", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "overall_conv_flops", "=", "(", "conv_per_position_flops1", "+", "conv_per_position_flops2", ")", "*", "active_elements_count", "\n", "overall_flops", "=", "overall_conv_flops", "\n", "\n", "dconv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "# dconv_module.__output_dims__ = output_dims", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.is_image_file": [[22, 24], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.get_timestamp": [[26, 28], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imshow": [[30, 38], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "numpy.squeeze", "matplotlib.title", "matplotlib.colorbar"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imshow"], ["", "def", "imshow", "(", "x", ",", "title", "=", "None", ",", "cbar", "=", "False", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "x", ")", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "'gray'", ")", "\n", "if", "title", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "if", "cbar", ":", "\n", "        ", "plt", ".", "colorbar", "(", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.get_image_paths": [[47, 52], ["sorted", "utils_image._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image._get_paths_from_images"], ["def", "get_image_paths", "(", "dataroot", ")", ":", "\n", "    ", "paths", "=", "None", "# return None if dataroot is None", "\n", "if", "dataroot", "is", "not", "None", ":", "\n", "        ", "paths", "=", "sorted", "(", "_get_paths_from_images", "(", "dataroot", ")", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image._get_paths_from_images": [[54, 64], ["os.path.isdir", "sorted", "os.walk", "sorted", "utils_image.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.is_image_file"], ["", "def", "_get_paths_from_images", "(", "path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "path", ")", ",", "'{:s} is not a valid directory'", ".", "format", "(", "path", ")", "\n", "images", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "path", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "", "", "", "assert", "images", ",", "'{:s} has no valid image file'", ".", "format", "(", "path", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir": [[73, 76], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdirs": [[78, 84], ["isinstance", "utils_image.mkdir", "utils_image.mkdir"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.mkdir_and_rename": [[86, 92], ["os.path.exists", "os.makedirs", "print", "os.rename", "utils_image.get_timestamp"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.read_img": [[106, 117], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["def", "read_img", "(", "path", ")", ":", "\n", "# read image by cv2", "\n", "# return: Numpy float32, HWC, BGR, [0,1]", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imread_uint": [[122, 135], ["cv2.imread", "numpy.expand_dims", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["", "def", "imread_uint", "(", "path", ",", "n_channels", "=", "3", ")", ":", "\n", "#  input: path", "\n", "# output: HxWx3(RGB or GGG), or HxWx1 (G)", "\n", "    ", "if", "n_channels", "==", "1", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "0", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "# HxWx1", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# BGR or G", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "# GGG", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# RGB", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imsave": [[137, 142], ["numpy.squeeze", "cv2.imwrite"], "function", ["None"], ["", "def", "imsave", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2single": [[158, 161], ["numpy.float32"], "function", ["None"], ["def", "uint2single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2single1": [[163, 166], ["numpy.float32", "numpy.squeeze"], "function", ["None"], ["", "def", "uint2single1", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "np", ".", "squeeze", "(", "img", ")", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.single2uint": [[168, 171], ["numpy.uint8", "img.clip"], "function", ["None"], ["", "def", "single2uint", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint8", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "255.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint162single": [[173, 176], ["numpy.float32"], "function", ["None"], ["", "def", "uint162single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "65535.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.single2uint16": [[178, 181], ["numpy.uint8", "img.clip"], "function", ["None"], ["", "def", "single2uint16", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint8", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "65535.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2tensor4": [[190, 194], ["torch.from_numpy().permute().float().div().unsqueeze", "numpy.expand_dims", "torch.from_numpy().permute().float().div", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor4", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.uint2tensor3": [[197, 201], ["torch.from_numpy().permute().float().div", "numpy.expand_dims", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor3", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2uint": [[204, 209], ["np.transpose.data.squeeze().float().clamp_().cpu().numpy", "numpy.uint8", "numpy.transpose", "np.transpose.data.squeeze().float().clamp_().cpu", "np.transpose.data.squeeze().float().clamp_", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2uint", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "np", ".", "uint8", "(", "(", "img", "*", "255.0", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.single2tensor4": [[218, 220], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.single2tensor3": [[223, 225], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor3", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2single": [[228, 234], ["np.transpose.data.squeeze().float().clamp_().cpu().numpy", "numpy.transpose", "np.transpose.data.squeeze().float().clamp_().cpu", "np.transpose.data.squeeze().float().clamp_", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2single", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2single3": [[235, 242], ["np.expand_dims.data.squeeze().float().clamp_().cpu().numpy", "numpy.transpose", "np.expand_dims.data.squeeze().float().clamp_().cpu", "numpy.expand_dims", "np.expand_dims.data.squeeze().float().clamp_", "np.expand_dims.data.squeeze().float", "np.expand_dims.data.squeeze"], "function", ["None"], ["", "def", "tensor2single3", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.tensor2img": [[245, 270], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array of BGR channel order\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# squeeze first, then clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.uint8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.augment_img": [[280, 297], ["numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90"], "function", ["None"], ["def", "augment_img", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ")", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "img", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.augment_img_np3": [[299, 325], ["img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose"], "function", ["None"], ["", "", "def", "augment_img_np3", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "img", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.augment_img_tensor": [[327, 342], ["img.size", "img.data.cpu().numpy", "utils_image.augment_img", "torch.from_numpy", "img_tensor.permute.type_as", "len", "numpy.transpose", "numpy.ascontiguousarray", "len", "img_tensor.permute.permute", "img.data.cpu", "len", "numpy.transpose", "len", "img_tensor.permute.permute"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.augment_img"], ["", "", "def", "augment_img_tensor", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "img_size", "=", "img", ".", "size", "(", ")", "\n", "img_np", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", "\n", "", "img_np", "=", "augment_img", "(", "img_np", ",", "mode", "=", "mode", ")", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img_np", ")", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "img_tensor", ".", "type_as", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.augment_imgs": [[344, 360], ["utils_image.augment_imgs._augment"], "function", ["None"], ["", "def", "augment_imgs", "(", "img_list", ",", "hflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "# horizontal flip OR rotate", "\n", "    ", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "img", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "vflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "rot90", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "return", "img", "\n", "\n", "", "return", "[", "_augment", "(", "img", ")", "for", "img", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.rgb2ycbcr": [[374, 396], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.ycbcr2rgb": [[398, 416], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["", "def", "ycbcr2rgb", "(", "img", ")", ":", "\n", "    ", "'''same as matlab ycbcr2rgb\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "0.00456621", ",", "0.00456621", ",", "0.00456621", "]", ",", "[", "0", ",", "-", "0.00153632", ",", "0.00791071", "]", ",", "\n", "[", "0.00625893", ",", "-", "0.00318811", ",", "0", "]", "]", ")", "*", "255.0", "+", "[", "-", "222.921", ",", "135.576", ",", "-", "276.836", "]", "\n", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.bgr2ycbcr": [[418, 440], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''bgr version of rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.modcrop": [[442, 456], ["numpy.copy", "ValueError"], "function", ["None"], ["", "def", "modcrop", "(", "img_in", ",", "scale", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "H", ",", "W", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", "]", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong img ndim: [{:d}].'", ".", "format", "(", "img", ".", "ndim", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.shave": [[458, 464], ["numpy.copy"], "function", ["None"], ["", "def", "shave", "(", "img_in", ",", "border", "=", "0", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "img", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.channel_convert": [[466, 478], ["cv2.cvtColor", "numpy.expand_dims", "utils_image.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.bgr2ycbcr"], ["", "def", "channel_convert", "(", "in_c", ",", "tar_type", ",", "img_list", ")", ":", "\n", "# conversion among BGR, gray and y", "\n", "    ", "if", "in_c", "==", "3", "and", "tar_type", "==", "'gray'", ":", "# BGR to gray", "\n", "        ", "gray_list", "=", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "gray_list", "]", "\n", "", "elif", "in_c", "==", "3", "and", "tar_type", "==", "'y'", ":", "# BGR to y", "\n", "        ", "y_list", "=", "[", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "y_list", "]", "\n", "", "elif", "in_c", "==", "1", "and", "tar_type", "==", "'RGB'", ":", "# gray/y to BGR", "\n", "        ", "return", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "for", "img", "in", "img_list", "]", "\n", "", "else", ":", "\n", "        ", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_psnr": [[490, 504], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "ValueError", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_ssim": [[509, 532], ["ValueError", "utils_image.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "utils_image.ssim", "utils_image.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.ssim", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.ssim", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.ssim": [[534, 555], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.cubic": [[565, 571], ["torch.abs"], "function", ["None"], ["def", "cubic", "(", "x", ")", ":", "\n", "    ", "absx", "=", "torch", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", "*", "(", "(", "absx", "<=", "1", ")", ".", "type_as", "(", "absx", ")", ")", "+", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", "*", "(", "(", "(", "absx", ">", "1", ")", "*", "(", "absx", "<=", "2", ")", ")", ".", "type_as", "(", "absx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_weights_indices": [[573, 626], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "utils_image.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "utils_image.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.cubic", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.cubic"], ["", "def", "calculate_weights_indices", "(", "in_length", ",", "out_length", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "    ", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "# Use a modified kernel to simultaneously interpolate and antialias- larger kernel width", "\n", "        ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n", "# Output-space coordinates", "\n", "", "x", "=", "torch", ".", "linspace", "(", "1", ",", "out_length", ",", "out_length", ")", "\n", "\n", "# Input-space coordinates. Calculate the inverse mapping such that 0.5", "\n", "# in output space maps to 0.5 in input space, and 0.5+scale in output", "\n", "# space maps to 1.5 in input space.", "\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "# What is the left-most pixel that can be involved in the computation?", "\n", "left", "=", "torch", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "# What is the maximum number of pixels that can be involved in the", "\n", "# computation?  Note: it's OK to use an extra pixel here; if the", "\n", "# corresponding weights are all zero, it will be eliminated at the end", "\n", "# of this function.", "\n", "P", "=", "math", ".", "ceil", "(", "kernel_width", ")", "+", "2", "\n", "\n", "# The indices of the input pixels involved in computing the k-th output", "\n", "# pixel are in row k of the indices matrix.", "\n", "indices", "=", "left", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "+", "torch", ".", "linspace", "(", "0", ",", "P", "-", "1", ",", "P", ")", ".", "view", "(", "\n", "1", ",", "P", ")", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# The weights used to compute the k-th output pixel are in row k of the", "\n", "# weights matrix.", "\n", "distance_to_center", "=", "u", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "-", "indices", "\n", "# apply cubic kernel", "\n", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "        ", "weights", "=", "scale", "*", "cubic", "(", "distance_to_center", "*", "scale", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "cubic", "(", "distance_to_center", ")", "\n", "# Normalize the weights matrix so that each row sums to 1.", "\n", "", "weights_sum", "=", "torch", ".", "sum", "(", "weights", ",", "1", ")", ".", "view", "(", "out_length", ",", "1", ")", "\n", "weights", "=", "weights", "/", "weights_sum", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# If a column in weights is all zero, get rid of it. only consider the first and last column.", "\n", "weights_zero_tmp", "=", "torch", ".", "sum", "(", "(", "weights", "==", "0", ")", ",", "0", ")", "\n", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "0", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "-", "1", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "", "weights", "=", "weights", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "contiguous", "(", ")", "\n", "sym_len_s", "=", "-", "indices", ".", "min", "(", ")", "+", "1", "\n", "sym_len_e", "=", "indices", ".", "max", "(", ")", "-", "in_length", "\n", "indices", "=", "indices", "+", "sym_len_s", "-", "1", "\n", "return", "weights", ",", "indices", ",", "int", "(", "sym_len_s", ")", ",", "int", "(", "sym_len_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imresize": [[631, 699], ["img.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "img.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "img.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: pytorch tensor, CHW or HW [0,1]", "\n", "# output: CHW or HW [0,1] w/o round", "\n", "    ", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "0", ")", "\n", "", "in_C", ",", "in_H", ",", "in_W", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", ":", "sym_len_Hs", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", "-", "sym_len_He", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "j", ",", "i", ",", ":", "]", "=", "img_aug", "[", "j", ",", "idx", ":", "idx", "+", "kernel_width", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", ":", "sym_len_Ws", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", "-", "sym_len_We", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "out_W", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", "j", ",", ":", ",", "i", "]", "=", "out_1_aug", "[", "j", ",", ":", ",", "idx", ":", "idx", "+", "kernel_width", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "", "return", "out_2", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.imresize_np": [[704, 775], ["torch.from_numpy", "torch.from_numpy.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "torch.from_numpy.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "torch.from_numpy.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize_np", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: Numpy, HWC or HW [0,1]", "\n", "# output: HWC or HW [0,1] w/o round", "\n", "    ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "2", ")", "\n", "\n", "", "in_H", ",", "in_W", ",", "in_C", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ",", "in_C", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", "sym_len_Hs", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", "-", "sym_len_He", ":", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "i", ",", ":", ",", "j", "]", "=", "img_aug", "[", "idx", ":", "idx", "+", "kernel_width", ",", ":", ",", "j", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ",", "in_C", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", "sym_len_Ws", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", "-", "sym_len_We", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "out_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", ":", ",", "i", ",", "j", "]", "=", "out_1_aug", "[", ":", ",", "idx", ":", "idx", "+", "kernel_width", ",", "j", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "out_2", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_print.__init__": [[56, 59], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_path", "=", "\"default.log\"", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "log_path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_print.write": [[60, 63], ["utils_logger.logger_print.terminal.write", "utils_logger.logger_print.log.write"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_print.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "# write the message", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_print.flush": [[64, 66], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.log": [[14, 16], ["print", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "log", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S:\"", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.utils.utils_logger.logger_info": [[26, 46], ["logging.getLogger", "logging.getLogger.hasHandlers", "print", "print", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "logger_info", "(", "logger_name", ",", "log_path", "=", "'default_logger.log'", ")", ":", "\n", "    ", "''' set up logger\n    modified by Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "log", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "if", "log", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "print", "(", "'LogHandlers exist!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'LogHandlers setup!'", ")", "\n", "level", "=", "logging", ".", "INFO", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d : %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_path", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "setLevel", "(", "level", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "# print(len(log.handlers))", "\n", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.IMDN.IMDN.__init__": [[33, 62], ["torch.Module.__init__", "models.conv", "m_body.append", "upsample_block", "models.sequential", "models.IMDBlock", "models.conv", "models.ShortcutBlock", "range", "str", "models.sequential", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nc", "=", "64", ",", "nb", "=", "8", ",", "upscale", "=", "4", ",", "act_mode", "=", "'L'", ",", "upsample_mode", "=", "'pixelshuffle'", ",", "negative_slope", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"\n        in_nc: channel number of input\n        out_nc: channel number of output\n        nc: channel number\n        nb: number of residual blocks\n        upscale: up-scale factor\n        act_mode: activation function\n        upsample_mode: 'upconv' | 'pixelshuffle' | 'convtranspose'\n        \"\"\"", "\n", "super", "(", "IMDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "'R'", "in", "act_mode", "or", "'L'", "in", "act_mode", ",", "'Examples of activation function: R, L, BR, BL, IR, IL'", "\n", "\n", "m_head", "=", "B", ".", "conv", "(", "in_nc", ",", "nc", ",", "mode", "=", "'C'", ")", "\n", "m_body", "=", "[", "B", ".", "IMDBlock", "(", "nc", ",", "nc", ",", "mode", "=", "'C'", "+", "act_mode", ",", "negative_slope", "=", "negative_slope", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "\n", "m_body", ".", "append", "(", "B", ".", "conv", "(", "nc", ",", "nc", ",", "mode", "=", "'C'", ")", ")", "\n", "\n", "if", "upsample_mode", "==", "'upconv'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upsample_upconv", "\n", "", "elif", "upsample_mode", "==", "'pixelshuffle'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upsample_pixelshuffle", "\n", "", "elif", "upsample_mode", "==", "'convtranspose'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upsample_convtranspose", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'upsample mode [{:s}] is not found'", ".", "format", "(", "upsample_mode", ")", ")", "\n", "\n", "", "m_uper", "=", "upsample_block", "(", "nc", ",", "out_nc", ",", "mode", "=", "str", "(", "upscale", ")", ")", "\n", "\n", "self", ".", "model", "=", "B", ".", "sequential", "(", "m_head", ",", "B", ".", "ShortcutBlock", "(", "B", ".", "sequential", "(", "*", "m_body", ")", ")", ",", "*", "m_uper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.IMDN.IMDN.forward": [[63, 66], ["IMDN.IMDN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.PixelUnShuffle.__init__": [[141, 144], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "upscale_factor", ")", ":", "\n", "        ", "super", "(", "PixelUnShuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "upscale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.PixelUnShuffle.forward": [[145, 147], ["basicblock.pixel_unshuffle"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.pixel_unshuffle"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "pixel_unshuffle", "(", "input", ",", "self", ".", "upscale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.PixelUnShuffle.extra_repr": [[148, 150], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'upscale_factor={}'", ".", "format", "(", "self", ".", "upscale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ConditionalBatchNorm2d.__init__": [[157, 164], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Embedding", "torch.Embedding", "torch.Embedding", "basicblock.ConditionalBatchNorm2d.embed.weight.data[].normal_", "basicblock.ConditionalBatchNorm2d.embed.weight.data[].zero_"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "affine", "=", "False", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", "*", "2", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", ":", "num_features", "]", ".", "normal_", "(", "1", ",", "0.02", ")", "# Initialise scale at N(1, 0.02)", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", "num_features", ":", "]", ".", "zero_", "(", ")", "# Initialise bias at 0", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ConditionalBatchNorm2d.forward": [[165, 170], ["basicblock.ConditionalBatchNorm2d.bn", "basicblock.ConditionalBatchNorm2d.embed().chunk", "beta.view", "basicblock.ConditionalBatchNorm2d.embed", "gamma.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "gamma", ",", "beta", "=", "self", ".", "embed", "(", "y", ")", ".", "chunk", "(", "2", ",", "1", ")", "\n", "out", "=", "gamma", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "*", "out", "+", "beta", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ConcatBlock.__init__": [[176, 179], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ConcatBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sub", "=", "submodule", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ConcatBlock.forward": [[180, 183], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basicblock.ConcatBlock.sub"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "sub", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ConcatBlock.__repr__": [[184, 186], ["basicblock.ConcatBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ShortcutBlock.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sub", ".", "__repr__", "(", ")", "+", "'concat'", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ShortcutBlock.__init__": [[192, 196], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ShortcutBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sub", "=", "submodule", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ShortcutBlock.forward": [[197, 200], ["basicblock.ShortcutBlock.sub"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "+", "self", ".", "sub", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ShortcutBlock.__repr__": [[201, 206], ["basicblock.ShortcutBlock.sub.__repr__().replace", "basicblock.ShortcutBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ShortcutBlock.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "'Identity + \\n|'", "\n", "modstr", "=", "self", ".", "sub", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n|'", ")", "\n", "tmpstr", "=", "tmpstr", "+", "modstr", "\n", "return", "tmpstr", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ResBlock.__init__": [[212, 220], ["torch.Module.__init__", "basicblock.conv", "mode[].lower"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CRC'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "in_channels", "==", "out_channels", ",", "'Only support in_channels==out_channels.'", "\n", "if", "mode", "[", "0", "]", "in", "[", "'R'", ",", "'L'", "]", ":", "\n", "            ", "mode", "=", "mode", "[", "0", "]", ".", "lower", "(", ")", "+", "mode", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "res", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ResBlock.forward": [[221, 224], ["basicblock.ResBlock.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.IMDBlock.__init__": [[246, 258], ["torch.Module.__init__", "int", "int", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CL'", ",", "d_rate", "=", "0.25", ",", "negative_slope", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "IMDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_nc", "=", "int", "(", "in_channels", "*", "d_rate", ")", "\n", "self", ".", "r_nc", "=", "int", "(", "in_channels", "-", "self", ".", "d_nc", ")", "\n", "\n", "assert", "mode", "[", "0", "]", "==", "'C'", ",", "'convolutional layer first'", "\n", "\n", "self", ".", "conv1", "=", "conv", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "self", ".", "r_nc", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "self", ".", "r_nc", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "d_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "[", "0", "]", ",", "negative_slope", ")", "\n", "self", ".", "conv1x1", "=", "conv", "(", "self", ".", "d_nc", "*", "4", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.IMDBlock.forward": [[259, 266], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "basicblock.IMDBlock.conv4", "basicblock.IMDBlock.conv1x1", "basicblock.IMDBlock.conv1", "basicblock.IMDBlock.conv2", "basicblock.IMDBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "d1", ",", "r1", "=", "torch", ".", "split", "(", "self", ".", "conv1", "(", "x", ")", ",", "(", "self", ".", "d_nc", ",", "self", ".", "r_nc", ")", ",", "dim", "=", "1", ")", "\n", "d2", ",", "r2", "=", "torch", ".", "split", "(", "self", ".", "conv2", "(", "r1", ")", ",", "(", "self", ".", "d_nc", ",", "self", ".", "r_nc", ")", ",", "dim", "=", "1", ")", "\n", "d3", ",", "r3", "=", "torch", ".", "split", "(", "self", ".", "conv3", "(", "r2", ")", ",", "(", "self", ".", "d_nc", ",", "self", ".", "r_nc", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "conv4", "(", "r3", ")", "\n", "res", "=", "self", ".", "conv1x1", "(", "torch", ".", "cat", "(", "(", "d1", ",", "d2", ",", "d3", ",", "d4", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ESA.__init__": [[272, 286], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", "=", "64", ",", "reduction", "=", "4", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ESA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#               -->conv3x3(conv21)-----------------------------------------------------------------------------------------+", "\n", "# conv1x1(conv1)-->conv3x3-2(conv2)-->maxpool7-3-->conv3x3(conv3)(relu)-->conv3x3(conv4)(relu)-->conv3x3(conv5)-->bilinear--->conv1x1(conv6)-->sigmoid", "\n", "self", ".", "r_nc", "=", "channel", "//", "reduction", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channel", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "self", ".", "r_nc", ",", "channel", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ESA.forward": [[287, 295], ["basicblock.ESA.conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "basicblock.ESA.relu", "basicblock.ESA.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "basicblock.ESA.conv6", "x.mul", "basicblock.ESA.conv2", "basicblock.ESA.conv3", "basicblock.ESA.conv4", "basicblock.ESA.conv5", "basicblock.ESA.sigmoid", "x.size", "x.size", "basicblock.ESA.conv21"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "F", ".", "max_pool2d", "(", "self", ".", "conv2", "(", "x1", ")", ",", "kernel_size", "=", "7", ",", "stride", "=", "3", ")", "# 1/6", "\n", "x2", "=", "self", ".", "relu", "(", "self", ".", "conv3", "(", "x2", ")", ")", "\n", "x2", "=", "self", ".", "relu", "(", "self", ".", "conv4", "(", "x2", ")", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "self", ".", "conv5", "(", "x2", ")", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x2", "=", "self", ".", "conv6", "(", "x2", "+", "self", ".", "conv21", "(", "x1", ")", ")", "\n", "return", "x", ".", "mul", "(", "self", ".", "sigmoid", "(", "x2", ")", ")", "\n", "# return x.mul_(self.sigmoid(x2))", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.CFRB.__init__": [[299, 316], ["torch.Module.__init__", "int", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.ESA"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "50", ",", "out_channels", "=", "50", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CL'", ",", "d_rate", "=", "0.5", ",", "negative_slope", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "CFRB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_nc", "=", "int", "(", "in_channels", "*", "d_rate", ")", "\n", "self", ".", "r_nc", "=", "in_channels", "# int(in_channels - self.d_nc)", "\n", "\n", "assert", "mode", "[", "0", "]", "==", "'C'", ",", "'convolutional layer first'", "\n", "\n", "self", ".", "conv1_d", "=", "conv", "(", "in_channels", ",", "self", ".", "d_nc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv1_r", "=", "conv", "(", "in_channels", ",", "self", ".", "r_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv2_d", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "d_nc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv2_r", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv3_d", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "d_nc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv3_r", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "r_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv4_d", "=", "conv", "(", "self", ".", "r_nc", ",", "self", ".", "d_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "conv1x1", "=", "conv", "(", "self", ".", "d_nc", "*", "4", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ",", "mode", "=", "mode", "[", "0", "]", ")", "\n", "self", ".", "act", "=", "conv", "(", "mode", "=", "mode", "[", "-", "1", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "self", ".", "esa", "=", "ESA", "(", "in_channels", ",", "reduction", "=", "4", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.CFRB.forward": [[317, 328], ["basicblock.CFRB.conv1_d", "basicblock.CFRB.act", "basicblock.CFRB.conv2_d", "basicblock.CFRB.act", "basicblock.CFRB.conv3_d", "basicblock.CFRB.act", "basicblock.CFRB.conv4_d", "basicblock.CFRB.act", "basicblock.CFRB.esa", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basicblock.CFRB.conv1x1", "basicblock.CFRB.conv1_r", "basicblock.CFRB.conv2_r", "basicblock.CFRB.conv3_r"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "d1", "=", "self", ".", "conv1_d", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "conv1_r", "(", "x", ")", "+", "x", ")", "\n", "d2", "=", "self", ".", "conv2_d", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "conv2_r", "(", "x", ")", "+", "x", ")", "\n", "d3", "=", "self", ".", "conv3_d", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "conv3_r", "(", "x", ")", "+", "x", ")", "\n", "x", "=", "self", ".", "conv4_d", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "torch", ".", "cat", "(", "[", "d1", ",", "d2", ",", "d3", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "esa", "(", "self", ".", "conv1x1", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.CALayer.__init__": [[334, 343], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", "=", "64", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.CALayer.forward": [[345, 349], ["basicblock.CALayer.avg_pool", "basicblock.CALayer.conv_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_fc", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RCABlock.__init__": [[355, 363], ["torch.Module.__init__", "basicblock.conv", "basicblock.CALayer", "mode[].lower"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CRC'", ",", "reduction", "=", "16", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "RCABlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "out_channels", ",", "'Only support in_channels==out_channels.'", "\n", "if", "mode", "[", "0", "]", "in", "[", "'R'", ",", "'L'", "]", ":", "\n", "            ", "mode", "=", "mode", "[", "0", "]", ".", "lower", "(", ")", "+", "mode", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "res", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "ca", "=", "CALayer", "(", "out_channels", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RCABlock.forward": [[364, 368], ["basicblock.RCABlock.res", "basicblock.RCABlock.ca"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "res", "=", "self", ".", "ca", "(", "res", ")", "\n", "return", "res", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RCAGroup.__init__": [[374, 383], ["torch.Module.__init__", "RG.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basicblock.RCABlock", "basicblock.conv", "mode[].lower", "range"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CRC'", ",", "reduction", "=", "16", ",", "nb", "=", "12", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "RCAGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "out_channels", ",", "'Only support in_channels==out_channels.'", "\n", "if", "mode", "[", "0", "]", "in", "[", "'R'", ",", "'L'", "]", ":", "\n", "            ", "mode", "=", "mode", "[", "0", "]", ".", "lower", "(", ")", "+", "mode", "[", "1", ":", "]", "\n", "\n", "", "RG", "=", "[", "RCABlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "reduction", ",", "negative_slope", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "\n", "RG", ".", "append", "(", "conv", "(", "out_channels", ",", "out_channels", ",", "mode", "=", "'C'", ")", ")", "\n", "self", ".", "rg", "=", "nn", ".", "Sequential", "(", "*", "RG", ")", "# self.rg = ShortcutBlock(nn.Sequential(*RG))", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RCAGroup.forward": [[384, 387], ["basicblock.RCAGroup.rg"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "rg", "(", "x", ")", "\n", "return", "res", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ResidualDenseBlock_5C.__init__": [[394, 402], ["torch.Module.__init__", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv", "basicblock.conv"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "64", ",", "gc", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CR'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel", "\n", "self", ".", "conv1", "=", "conv", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "nc", "+", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "nc", "+", "2", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "nc", "+", "3", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "conv5", "=", "conv", "(", "nc", "+", "4", "*", "gc", ",", "nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "[", ":", "-", "1", "]", ",", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.ResidualDenseBlock_5C.forward": [[403, 410], ["basicblock.ResidualDenseBlock_5C.conv1", "basicblock.ResidualDenseBlock_5C.conv2", "basicblock.ResidualDenseBlock_5C.conv3", "basicblock.ResidualDenseBlock_5C.conv4", "basicblock.ResidualDenseBlock_5C.conv5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basicblock.ResidualDenseBlock_5C.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", ".", "mul_", "(", "0.2", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RRDB.__init__": [[417, 423], ["torch.Module.__init__", "basicblock.ResidualDenseBlock_5C", "basicblock.ResidualDenseBlock_5C", "basicblock.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "64", ",", "gc", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CR'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.RRDB.forward": [[424, 429], ["basicblock.RRDB.RDB1", "basicblock.RRDB.RDB2", "basicblock.RRDB.RDB3", "basicblock.RRDB.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", ".", "mul_", "(", "0.2", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__": [[544, 567], ["torch.Module.__init__", "basicblock.conv", "basicblock.conv", "downsample_block", "downsample_block", "basicblock.conv", "basicblock.conv", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.__init__", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "act_mode", "=", "'B'", ",", "downsample", "=", "False", ",", "downsample_mode", "=", "'maxpool'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "\n", "        ", "super", "(", "NonLocalBlock2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "inter_nc", "=", "nc", "//", "2", "\n", "self", ".", "inter_nc", "=", "inter_nc", "\n", "self", ".", "W", "=", "conv", "(", "inter_nc", ",", "nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", "+", "act_mode", ")", "\n", "self", ".", "theta", "=", "conv", "(", "nc", ",", "inter_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", ")", "\n", "\n", "if", "downsample", ":", "\n", "            ", "if", "downsample_mode", "==", "'avgpool'", ":", "\n", "                ", "downsample_block", "=", "downsample_avgpool", "\n", "", "elif", "downsample_mode", "==", "'maxpool'", ":", "\n", "                ", "downsample_block", "=", "downsample_maxpool", "\n", "", "elif", "downsample_mode", "==", "'strideconv'", ":", "\n", "                ", "downsample_block", "=", "downsample_strideconv", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'downsample mode [{:s}] is not found'", ".", "format", "(", "downsample_mode", ")", ")", "\n", "", "self", ".", "phi", "=", "downsample_block", "(", "nc", ",", "inter_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'2'", ")", "\n", "self", ".", "g", "=", "downsample_block", "(", "nc", ",", "inter_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'2'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "phi", "=", "conv", "(", "nc", ",", "inter_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", ")", "\n", "self", ".", "g", "=", "conv", "(", "nc", ",", "inter_nc", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.NonLocalBlock2D.forward": [[568, 592], ["x.size", "basicblock.NonLocalBlock2D.g().view", "g_x.permute.permute.permute", "basicblock.NonLocalBlock2D.theta().view", "theta_x.permute.permute.permute", "basicblock.NonLocalBlock2D.phi().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "basicblock.NonLocalBlock2D.W", "basicblock.NonLocalBlock2D.g", "basicblock.NonLocalBlock2D.theta", "basicblock.NonLocalBlock2D.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_nc", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_nc", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_nc", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_nc", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential": [[15, 36], ["torch.Sequential", "len", "isinstance", "isinstance", "NotImplementedError", "module.children", "isinstance", "modules.append", "modules.append"], "function", ["None"], ["def", "sequential", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Advanced nn.Sequential.\n\n    Args:\n        nn.Sequential, nn.Module\n\n    Returns:\n        nn.Sequential\n    \"\"\"", "\n", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'sequential does not support OrderedDict input.'", ")", "\n", "", "return", "args", "[", "0", "]", "# No sequential is needed.", "\n", "", "modules", "=", "[", "]", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "submodule", "in", "module", ".", "children", "(", ")", ":", "\n", "                ", "modules", ".", "append", "(", "submodule", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "modules", ".", "append", "(", "module", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv": [[61, 99], ["basicblock.sequential", "L.append", "torch.Conv2d", "L.append", "torch.ConvTranspose2d", "L.append", "torch.BatchNorm2d", "L.append", "torch.InstanceNorm2d", "L.append", "torch.ReLU", "L.append", "torch.ReLU", "L.append", "torch.LeakyReLU", "L.append", "torch.LeakyReLU", "L.append", "torch.PixelShuffle", "L.append", "torch.PixelShuffle", "L.append", "torch.PixelShuffle", "L.append", "torch.Upsample", "L.append", "torch.Upsample", "L.append", "torch.Upsample", "L.append", "torch.MaxPool2d", "L.append", "NotImplementedError", "torch.AvgPool2d"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential"], ["def", "conv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CBR'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "L", "=", "[", "]", "\n", "for", "t", "in", "mode", ":", "\n", "        ", "if", "t", "==", "'C'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "elif", "t", "==", "'T'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "elif", "t", "==", "'B'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-04", ",", "affine", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'I'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'R'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'r'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "", "elif", "t", "==", "'L'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'l'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "False", ")", ")", "\n", "", "elif", "t", "==", "'2'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "2", ")", ")", "\n", "", "elif", "t", "==", "'3'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "3", ")", ")", "\n", "", "elif", "t", "==", "'4'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "4", ")", ")", "\n", "", "elif", "t", "==", "'U'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'u'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'v'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'M'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "elif", "t", "==", "'A'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Undefined type: '", ".", "format", "(", "t", ")", ")", "\n", "", "", "return", "sequential", "(", "*", "L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.pixel_unshuffle": [[104, 127], ["input.size", "input.contiguous().view", "input.contiguous().view.permute().contiguous", "input_view.permute().contiguous.view", "input.contiguous", "input.contiguous().view.permute"], "function", ["None"], ["", "def", "pixel_unshuffle", "(", "input", ",", "upscale_factor", ")", ":", "\n", "    ", "r\"\"\"Rearranges elements in a Tensor of shape :math:`(C, rH, rW)` to a\n    tensor of shape :math:`(*, r^2C, H, W)`.\n\n    Authors:\n        Zhaoyi Yan, https://github.com/Zhaoyi-Yan\n        Kai Zhang, https://github.com/cszn/FFDNet\n\n    Date:\n        01/Jan/2019\n    \"\"\"", "\n", "batch_size", ",", "channels", ",", "in_height", ",", "in_width", "=", "input", ".", "size", "(", ")", "\n", "\n", "out_height", "=", "in_height", "//", "upscale_factor", "\n", "out_width", "=", "in_width", "//", "upscale_factor", "\n", "\n", "input_view", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "batch_size", ",", "channels", ",", "out_height", ",", "upscale_factor", ",", "\n", "out_width", ",", "upscale_factor", ")", "\n", "\n", "channels", "*=", "upscale_factor", "**", "2", "\n", "unshuffle_out", "=", "input_view", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "5", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "return", "unshuffle_out", ".", "view", "(", "batch_size", ",", "channels", ",", "out_height", ",", "out_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.upsample_pixelshuffle": [[446, 450], ["basicblock.conv", "len", "int"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["def", "upsample_pixelshuffle", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", "*", "(", "int", "(", "mode", "[", "0", "]", ")", "**", "2", ")", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", "+", "mode", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.upsample_upconv": [[455, 466], ["mode.replace.replace", "basicblock.conv", "len"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["", "def", "upsample_upconv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR'", "\n", "if", "mode", "[", "0", "]", "==", "'2'", ":", "\n", "        ", "uc", "=", "'UC'", "\n", "", "elif", "mode", "[", "0", "]", "==", "'3'", ":", "\n", "        ", "uc", "=", "'uC'", "\n", "", "elif", "mode", "[", "0", "]", "==", "'4'", ":", "\n", "        ", "uc", "=", "'vC'", "\n", "", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "uc", ")", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.upsample_convtranspose": [[471, 478], ["int", "int", "mode.replace.replace", "basicblock.conv", "len"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["", "def", "upsample_convtranspose", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "kernel_size", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'T'", ")", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.downsample_strideconv": [[495, 502], ["int", "int", "mode.replace.replace", "basicblock.conv", "len"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv"], ["def", "downsample_strideconv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "kernel_size", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'C'", ")", "\n", "down1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "return", "down1", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.downsample_maxpool": [[507, 515], ["int", "int", "mode.replace.replace", "basicblock.conv", "basicblock.conv", "basicblock.sequential", "len"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential"], ["", "def", "downsample_maxpool", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 3BR.'", "\n", "kernel_size_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'MC'", ")", "\n", "pool", "=", "conv", "(", "kernel_size", "=", "kernel_size_pool", ",", "stride", "=", "stride_pool", ",", "mode", "=", "mode", "[", "0", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "pool_tail", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", "[", "1", ":", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "sequential", "(", "pool", ",", "pool_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.downsample_avgpool": [[520, 528], ["int", "int", "mode.replace.replace", "basicblock.conv", "basicblock.conv", "basicblock.sequential", "len"], "function", ["home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.conv", "home.repos.pwc.inspect_result.ofsoundof_imdn.models.basicblock.sequential"], ["", "def", "downsample_avgpool", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 3BR.'", "\n", "kernel_size_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'AC'", ")", "\n", "pool", "=", "conv", "(", "kernel_size", "=", "kernel_size_pool", ",", "stride", "=", "stride_pool", ",", "mode", "=", "mode", "[", "0", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "pool_tail", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", "[", "1", ":", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "sequential", "(", "pool", ",", "pool_tail", ")", "\n", "\n"]]}