{"home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info": [[15, 26], ["set", "set", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_videodata_info": [[27, 41], ["set", "set", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "get_videodata_info", "(", "self", ",", "data", ",", "return_tracklet_stats", "=", "False", ")", ":", "\n", "        ", "pids", ",", "cams", ",", "tracklet_stats", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "img_paths", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "tracklet_stats", "+=", "[", "len", "(", "img_paths", ")", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_tracklets", "=", "len", "(", "data", ")", "\n", "if", "return_tracklet_stats", ":", "\n", "            ", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", ",", "tracklet_stats", "\n", "", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.print_dataset_statistics": [[42, 44], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseImageDataset.print_dataset_statistics": [[51, 64], ["bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseImageDataset.print_dataset_statistics_for_train_only": [[65, 74], ["bases.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info"], ["", "def", "print_dataset_statistics_for_train_only", "(", "self", ",", "train", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseVideoDataset.print_dataset_statistics": [[80, 105], ["bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_videodata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ",", "train_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "train", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ",", "query_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "query", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ",", "gallery_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "gallery", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "tracklet_stats", "=", "train_tracklet_stats", "+", "query_tracklet_stats", "+", "gallery_tracklet_stats", "\n", "min_num", "=", "np", ".", "min", "(", "tracklet_stats", ")", "\n", "max_num", "=", "np", ".", "max", "(", "tracklet_stats", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "tracklet_stats", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets | # cameras\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.2f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.uavhuman.UAVHuman.__init__": [[20, 62], ["bases.BaseImageDataset.__init__", "os.join", "uavhuman.UAVHuman._check_before_run", "uavhuman.UAVHuman._process_dir", "uavhuman.UAVHuman.get_imagedata_info", "print", "uavhuman.UAVHuman.print_dataset_statistics_for_train_only"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.Graph.__init__", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.uavhuman.UAVHuman._check_before_run", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.uavhuman.UAVHuman._process_dir", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.bases.BaseImageDataset.print_dataset_statistics_for_train_only"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'./data'", ",", "\n", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UAVHuman", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "root", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.query_dir = osp.join(self.dataset_dir, 'query')\n        self.gallery_dir = osp.join(self.dataset_dir, 'bounding_box_test')\n        \"\"\"", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        query = self._process_dir(self.query_dir, relabel=False)\n        gallery = self._process_dir(self.gallery_dir, relabel=False)\n        \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> UAVHuman loaded\"", ")", "\n", "\n", "\"\"\"Comment for Competition Split\n            self.print_dataset_statistics(train, query, gallery)\n            \"\"\"", "\n", "\n", "self", ".", "print_dataset_statistics_for_train_only", "(", "train", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.query = query\n        self.gallery = gallery\n        \"\"\"", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.num_query_pids, self.num_query_imgs, self.num_query_cams = self.get_imagedata_info(self.query)\n        self.num_gallery_pids, self.num_gallery_imgs, self.num_gallery_cams = self.get_imagedata_info(self.gallery)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.uavhuman.UAVHuman._check_before_run": [[63, 76], ["os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "\n", "", "\"\"\"Comment for Competition Splits\n        if not osp.exists(self.query_dir):\n            raise RuntimeError(\"'{}' is not available\".format(self.query_dir))\n        if not osp.exists(self.gallery_dir):\n            raise RuntimeError(\"'{}' is not available\".format(self.gallery_dir))\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.datasets.uavhuman.UAVHuman._process_dir": [[77, 116], ["glob.glob", "re.compile", "re.compile", "set", "os.join", "fname.startswith", "set.add", "fname.startswith", "dataset.append", "os.split", "int", "re.compile.search().groups", "int", "ipdb.set_trace", "enumerate", "os.split", "int", "int", "re.compile.search().groups", "int", "re.compile.search().groups", "int", "re.compile.search", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern_pid", "=", "re", ".", "compile", "(", "r'P([-\\d]+)S([-\\d]+)'", ")", "\n", "pattern_camid", "=", "re", ".", "compile", "(", "r'A([-\\d]+)R([-\\d])_([-\\d]+)_([-\\d]+)'", ")", "\n", "distractor_pid", "=", "50000", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "fname", "=", "osp", ".", "split", "(", "img_path", ")", "[", "-", "1", "]", "\n", "if", "fname", ".", "startswith", "(", "'D'", ")", ":", "\n", "                ", "pid", "=", "int", "(", "distractor_pid", ")", "\n", "", "else", ":", "\n", "                ", "pid_part1", ",", "pid_part2", "=", "pattern_pid", ".", "search", "(", "fname", ")", ".", "groups", "(", ")", "\n", "pid", "=", "int", "(", "pid_part1", "+", "pid_part2", ")", "\n", "\n", "", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "if", "pid", "==", "3109", "or", "pid", "==", "8405", ":", "\n", "                ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "continue", "\n", "\n", "", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "fname", "=", "osp", ".", "split", "(", "img_path", ")", "[", "-", "1", "]", "\n", "if", "fname", ".", "startswith", "(", "'D'", ")", ":", "\n", "                ", "pid", "=", "int", "(", "distractor_pid", ")", "\n", "camid", "=", "int", "(", "fname", "[", "-", "13", ":", "-", "8", "]", ")", "\n", "", "else", ":", "\n", "                ", "pid_part1", ",", "pid_part2", "=", "pattern_pid", ".", "search", "(", "fname", ")", ".", "groups", "(", ")", "\n", "pid", "=", "int", "(", "pid_part1", "+", "pid_part2", ")", "\n", "camid_part1", ",", "_", ",", "_", ",", "camid_part2", "=", "pattern_camid", ".", "search", "(", "fname", ")", ".", "groups", "(", ")", "\n", "camid", "=", "int", "(", "camid_part1", "+", "camid_part2", ")", "\n", "", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgb_dataset.UavhumanRgb.__init__": [[34, 48], ["uavhuman_rgb_dataset.UavhumanRgb.get_videos"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.get_videos"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ":", "str", ",", "\n", "num_frames", ":", "int", ",", "\n", "transforms", ":", "transforms", ".", "Compose", "=", "None", ",", "\n", "num_classes", ":", "int", "=", "155", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "filename_regex", "=", "r'P\\d+S\\d+G\\d+B\\d+H\\d+UC\\d+LC\\d+A(\\d+)R\\d+_\\d+'", "\n", "\n", "self", ".", "videos", "=", "self", ".", "get_videos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgb_dataset.UavhumanRgb.get_videos": [[49, 79], ["list", "print", "tuple", "os.path.basename", "int", "dataset.append", "glob.glob", "f.endswith", "os.path.exists", "ValueError", "numpy.zeros", "len", "os.path.join", "re.match().groups", "re.match"], "methods", ["None"], ["", "def", "get_videos", "(", "self", ",", "binary_labels", ":", "bool", "=", "False", ")", "->", "list", "(", "tuple", "(", "(", "str", ",", "np", ".", "array", ")", ")", ")", ":", "\n", "        ", "\"\"\"\n        Obtain video names and corresponding label in directory recursively.\n        \n        Args:\n            binary_labels: set true if require binary labels (Batch x Classes x Frames)\n        \n        Returns:\n            List containing Tuples, each with filename and corresponding label\n        \"\"\"", "\n", "dataset", "=", "[", "]", "\n", "vids", "=", "[", "f", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"*\"", ")", ",", "recursive", "=", "True", ")", "\n", "if", "f", ".", "endswith", "(", "'avi'", ")", "]", "\n", "\n", "for", "filename", "in", "vids", ":", "\n", "            ", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'%s does not exist!'", "%", "filename", ")", "\n", "\n", "", "ann", "=", "int", "(", "re", ".", "match", "(", "self", ".", "filename_regex", ",", "basename", ")", ".", "groups", "(", ")", "[", "0", "]", ")", "\n", "if", "binary_labels", ":", "\n", "                ", "label", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_frames", ")", ",", "np", ".", "float32", ")", "\n", "label", "[", "ann", ",", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "ann", "\n", "", "dataset", ".", "append", "(", "(", "basename", ",", "label", ")", ")", "\n", "\n", "", "print", "(", "\"Found %s video examples\"", "%", "(", "len", "(", "vids", ")", ")", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgb_dataset.UavhumanRgb.load_frames_from_video": [[80, 109], ["cv2.VideoCapture", "cv2.VideoCapture.get", "random.randint", "range", "range", "torch.stack", "cv2.VideoCapture.read", "cv2.VideoCapture.read", "cv2.VideoCapture.get.append", "torchvision.transforms.ToTensor", "uavhuman_rgb_dataset.UavhumanRgb.transforms"], "methods", ["None"], ["", "def", "load_frames_from_video", "(", "self", ",", "video_path", ":", "str", ")", "->", "np", ".", "array", ":", "\n", "        ", "\"\"\"\n        Load sequence of images from video, starting at a random point.\n\n        Args:\n            video_path: path to avi file\n        \n        Returns:\n            RGB images, transformed (T x H x W x C)\n        \"\"\"", "\n", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "frames", "=", "capture", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "\n", "# random start location", "\n", "start_frame", "=", "random", ".", "randint", "(", "0", ",", "frames", "-", "self", ".", "num_frames", "-", "1", ")", "# both bounds inclusive", "\n", "for", "i", "in", "range", "(", "start_frame", ")", ":", "\n", "            ", "_", ",", "_", "=", "capture", ".", "read", "(", ")", "\n", "\n", "", "frames", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_frames", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "capture", ".", "read", "(", ")", "\n", "frame", "=", "frame", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "frame", "=", "transforms", ".", "ToTensor", "(", ")", "(", "frame", ")", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "frame", "=", "self", ".", "transforms", "(", "frame", ")", "\n", "", "frames", ".", "append", "(", "frame", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "frames", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgb_dataset.UavhumanRgb.__getitem__": [[110, 116], ["os.path.join", "uavhuman_rgb_dataset.UavhumanRgb.load_frames_from_video"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.load_frames_from_video"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", ",", "label", "=", "self", ".", "videos", "[", "index", "]", "\n", "video_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "vid", ")", "\n", "imgs", "=", "self", ".", "load_frames_from_video", "(", "video_path", ")", "\n", "\n", "return", "vid", ",", "imgs", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgb_dataset.UavhumanRgb.__len__": [[117, 119], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.__init__": [[29, 47], ["uavhuman_rgbprocessed_dataset.UavhumanRgb.get_videos"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.get_videos"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ":", "str", ",", "\n", "num_frames", ":", "int", ",", "\n", "transforms", ":", "transforms", ".", "Compose", "=", "None", ",", "\n", "num_classes", ":", "int", "=", "155", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "split_name_conversion", "=", "{", "\n", "'training'", ":", "'train_fns'", ",", "\n", "'testing'", ":", "'test_fns'", "\n", "}", "\n", "self", ".", "filename_regex", "=", "r'P\\d+S\\d+G\\d+B\\d+H\\d+UC\\d+LC\\d+A(\\d+)R\\d+_\\d+'", "\n", "\n", "self", ".", "videos", "=", "self", ".", "get_videos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.get_videos": [[48, 77], ["list", "print", "tuple", "os.path.basename", "int", "dataset.append", "glob.glob", "os.path.isdir", "numpy.zeros", "len", "os.path.join", "re.match().groups", "re.match"], "methods", ["None"], ["", "def", "get_videos", "(", "self", ",", "binary_labels", ":", "bool", "=", "False", ")", "->", "list", "(", "tuple", "(", "(", "str", ",", "np", ".", "array", ")", ")", ")", ":", "\n", "        ", "\"\"\"\n        Obtain video names and corresponding label in data directory.\n        Expects video folders to be of depth=2.\n        \n        Args:\n            binary_labels: set true if require binary labels (Batch x Classes x Frames)\n        \n        Returns:\n            List containing Tuples, each with filename and corresponding label\n        \"\"\"", "\n", "dataset", "=", "[", "]", "\n", "vids", "=", "[", "f", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"*.avi\"", ")", ",", "recursive", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", "]", "\n", "\n", "for", "filename", "in", "vids", ":", "\n", "            ", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "\n", "ann", "=", "int", "(", "re", ".", "match", "(", "self", ".", "filename_regex", ",", "basename", ")", ".", "groups", "(", ")", "[", "0", "]", ")", "\n", "if", "binary_labels", ":", "\n", "                ", "label", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_frames", ")", ",", "np", ".", "float32", ")", "\n", "label", "[", "ann", ",", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "ann", "\n", "", "dataset", ".", "append", "(", "(", "filename", ",", "label", ")", ")", "\n", "\n", "", "print", "(", "\"Found %s video examples\"", "%", "(", "len", "(", "vids", ")", ")", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.load_frames_from_video": [[78, 105], ["len", "random.randint", "range", "torch.stack", "PIL.Image.open().convert", "data_array.append", "glob.glob", "uavhuman_rgbprocessed_dataset.UavhumanRgb.transforms", "os.path.join", "PIL.Image.open", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "load_frames_from_video", "(", "self", ",", "video_path", ":", "str", ")", "->", "np", ".", "array", ":", "\n", "        ", "\"\"\"\n        Load sequence of images from folder, starting at a random point.\n\n        Args:\n            video_path: path to folder of frames\n        \n        Returns:\n            RGB images, transformed (T x H x W x C)\n        \"\"\"", "\n", "\n", "filenames", "=", "[", "f", "for", "f", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "video_path", ",", "'*.png'", ")", ")", "]", "\n", "frames", "=", "len", "(", "filenames", ")", "\n", "\n", "# random start location", "\n", "start_frame", "=", "random", ".", "randint", "(", "0", ",", "frames", "-", "self", ".", "num_frames", "-", "1", ")", "# both bounds inclusive", "\n", "\n", "data_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "start_frame", ",", "start_frame", "+", "64", ")", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "filenames", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transforms", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "transforms", ".", "ToTensor", "(", ")", "(", "image", ")", "\n", "", "data_array", ".", "append", "(", "image", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "data_array", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.__getitem__": [[106, 111], ["uavhuman_rgbprocessed_dataset.UavhumanRgb.load_frames_from_video"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.load_frames_from_video"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_path", ",", "label", "=", "self", ".", "videos", "[", "index", "]", "\n", "imgs", "=", "self", ".", "load_frames_from_video", "(", "video_path", ")", "\n", "\n", "return", "video_path", ",", "imgs", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.uavhuman_rgbprocessed_dataset.UavhumanRgb.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.generate_data.extract_frames": [[16, 49], ["os.path.basename", "print", "cv2.VideoCapture", "cv2.VideoCapture.read", "os.path.exists", "FileNotFoundError", "os.path.join", "cv2.imwrite", "cv2.VideoCapture.read", "os.path.exists", "os.makedirs", "torchvision.transforms", "frame.permute().numpy.permute().numpy", "frame.permute().numpy.permute"], "function", ["None"], ["def", "extract_frames", "(", "filename", ":", "str", ",", "\n", "save_dir", ":", "str", ",", "\n", "transforms", ":", "transforms", ".", "Compose", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Extract frames given path to video. \n\n    Args:\n        filename: path to video\n        save_dir: path to frame output directory\n        transforms: torchvision transformations\n    \"\"\"", "\n", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'%s does not exist!'", "%", "filename", ")", "\n", "\n", "", "print", "(", "'Decomposing %s.'", "%", "filename", ")", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "filename", ")", "\n", "ret", ",", "frame", "=", "capture", ".", "read", "(", ")", "\n", "frame_no", "=", "0", "\n", "\n", "while", "ret", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s.png'", "%", "frame_no", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "if", "transforms", "is", "not", "None", ":", "\n", "            ", "frame", "=", "transforms", "(", "frame", ")", "\n", "frame", "=", "frame", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "save_path", ",", "frame", ")", "\n", "frame_no", "+=", "1", "\n", "ret", ",", "frame", "=", "capture", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanactiontools.generate_data.gendata": [[51, 67], ["print", "multiprocessing.Pool().starmap", "f.replace", "os.path.join", "generate_data.gendata.get_save_dir"], "function", ["None"], ["", "", "def", "gendata", "(", "data_path", ":", "str", ",", "\n", "out_path", ":", "str", ",", "\n", "num_workers", ":", "int", ",", "\n", "transforms", ":", "transforms", ".", "Compose", "=", "None", ")", ":", "\n", "\n", "    ", "vids", "=", "[", "f", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "for", "f", "in", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'**/*.avi'", ")", ",", "recursive", "=", "True", ")", "]", "\n", "print", "(", "'Total of %s videos found.'", "%", "(", "len", "(", "vids", ")", ")", ")", "\n", "\n", "def", "get_save_dir", "(", "vid_filename", ")", ":", "\n", "        ", "video_base_path", "=", "vid_filename", ".", "split", "(", "data_path", ")", "[", "1", "]", "\n", "return", "os", ".", "path", ".", "join", "(", "out_path", ",", "video_base_path", ")", "\n", "", "save_dirs", "=", "[", "get_save_dir", "(", "f", ")", "for", "f", "in", "vids", "]", "\n", "\n", "Pool", "(", "num_workers", ")", ".", "starmap", "(", "\n", "extract_frames", ",", "zip", "(", "vids", ",", "save_dirs", ",", "repeat", "(", "transforms", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.UAVHuman.__init__": [[19, 31], ["torch.utils.data.Dataset.__init__", "sorted", "glob.glob.glob", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.Graph.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "root", "=", "'./data'", ",", "\n", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UAVHuman", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "root", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.query_dir = osp.join(self.dataset_dir, 'query')\n        self.gallery_dir = osp.join(self.dataset_dir, 'bounding_box_test')\n        \"\"\"", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.UAVHuman.parse_label": [[32, 41], ["re.match().groups", "re.match", "os.path.basename"], "methods", ["None"], ["\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        query = self._process_dir(self.query_dir, relabel=False)\n        gallery = self._process_dir(self.gallery_dir, relabel=False)\n        \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> UAVHuman loaded\"", ")", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.UAVHuman.__getitem__": [[42, 62], ["uavhuman.UAVHuman.parse_label", "PIL.Image.open", "uavhuman.UAVHuman.transforms", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.UAVHuman.parse_label"], ["\n", "\"\"\"Comment for Competition Split\n            self.print_dataset_statistics(train, query, gallery)\n            \"\"\"", "\n", "\n", "self", ".", "print_dataset_statistics_for_train_only", "(", "train", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.query = query\n        self.gallery = gallery\n        \"\"\"", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "\n", "\"\"\"Comment for Competition Splits\n        self.num_query_pids, self.num_query_imgs, self.num_query_cams = self.get_imagedata_info(self.query)\n        self.num_gallery_pids, self.num_gallery_imgs, self.num_gallery_cams = self.get_imagedata_info(self.gallery)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.UAVHuman.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanattrtools.uavhuman.get_uavhuman": [[11, 17], ["uavhuman.UAVHuman", "uavhuman.UAVHuman", "os.path.join", "os.path.join"], "function", ["None"], ["import", "re", "\n", "\n", "import", "os", ".", "path", "as", "osp", "\n", "\n", "from", ".", "bases", "import", "BaseImageDataset", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.__init__": [[21, 50], ["uavhuman_pose_dataset.UavhumanPose.load_data", "uavhuman_pose_dataset.UavhumanPose.get_mean_map"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.load_data", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.get_mean_map"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "label_path", ",", "\n", "random_choose", "=", "False", ",", "random_shift", "=", "False", ",", "random_move", "=", "False", ",", "\n", "window_size", "=", "-", "1", ",", "normalization", "=", "False", ",", "debug", "=", "False", ",", "use_mmap", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_path: path to npy file containing skeleton data\n            label_path: path to pkl file containing labels\n            random_choose: If true, randomly choose a portion of the input sequence\n            random_shift: If true, randomly pad zeros at the begining or end of sequence\n            random_move: If true, randomly scale, rotate and translate by small amount\n            window_size: The length of the output sequence\n            normalization: If true, normalize input sequence\n            debug: If true, only use the first 100 samples\n            use_mmap: If true, use mmap mode to load data, which can save the running memory\n        \"\"\"", "\n", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "label_path", "=", "label_path", "\n", "self", ".", "random_choose", "=", "random_choose", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "random_move", "=", "random_move", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "use_mmap", "=", "use_mmap", "\n", "\n", "self", ".", "load_data", "(", ")", "\n", "if", "normalization", ":", "\n", "            ", "self", ".", "get_mean_map", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.load_data": [[51, 73], ["numpy.load", "numpy.load", "open", "pickle.load", "open", "pickle.load"], "methods", ["None"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Obtain skeleton data and corresponding labels from preprocessed files\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "with", "open", "(", "self", ".", "label_path", ")", "as", "f", ":", "\n", "                ", "self", ".", "sample_name", ",", "self", ".", "label", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "# for pickle file from python2", "\n", "            ", "with", "open", "(", "self", ".", "label_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "sample_name", ",", "self", ".", "label", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "", "if", "self", ".", "use_mmap", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "data_path", ",", "mmap_mode", "=", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "data_path", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "label", "=", "self", ".", "label", "[", "0", ":", "100", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "0", ":", "100", "]", "\n", "self", ".", "sample_name", "=", "self", ".", "sample_name", "[", "0", ":", "100", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.get_mean_map": [[74, 83], ["data.mean().mean().mean", "data.transpose().reshape().std().reshape", "data.mean().mean", "data.transpose().reshape().std", "data.mean", "data.transpose().reshape", "data.transpose"], "methods", ["None"], ["", "", "def", "get_mean_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get mean and standard deviation for normalization\n        \"\"\"", "\n", "\n", "data", "=", "self", ".", "data", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "self", ".", "mean_map", "=", "data", ".", "mean", "(", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ".", "mean", "(", "axis", "=", "4", ",", "keepdims", "=", "True", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "self", ".", "std_map", "=", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "(", "N", "*", "T", "*", "M", ",", "C", "*", "V", ")", ")", ".", "std", "(", "axis", "=", "0", ")", ".", "reshape", "(", "(", "C", ",", "1", ",", "V", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.__iter__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.__getitem__": [[90, 106], ["numpy.array", "numpy.nan_to_num", "pose_data_tools.tools.random_shift", "pose_data_tools.tools.random_choose", "pose_data_tools.tools.random_move", "pose_data_tools.tools.auto_pading"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_shift", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_choose", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_move", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.auto_pading"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_numpy", "=", "np", ".", "array", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "\n", "if", "self", ".", "normalization", ":", "\n", "            ", "data_numpy", "=", "(", "data_numpy", "-", "self", ".", "mean_map", ")", "/", "self", ".", "std_map", "\n", "data_numpy", "=", "np", ".", "nan_to_num", "(", "data_numpy", ")", "\n", "", "if", "self", ".", "random_shift", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_shift", "(", "data_numpy", ")", "\n", "", "if", "self", ".", "random_choose", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_choose", "(", "data_numpy", ",", "self", ".", "window_size", ")", "\n", "", "elif", "self", ".", "window_size", ">", "0", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "auto_pading", "(", "data_numpy", ",", "self", ".", "window_size", ")", "\n", "", "if", "self", ".", "random_move", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_move", "(", "data_numpy", ")", "\n", "\n", "", "return", "self", ".", "sample_name", "[", "index", "]", ",", "data_numpy", ",", "self", ".", "label", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.uavhuman_pose_dataset.UavhumanPose.top_k": [[107, 111], ["score.argsort", "len", "enumerate", "sum"], "methods", ["None"], ["", "def", "top_k", "(", "self", ",", "score", ",", "top_k", ")", ":", "\n", "        ", "rank", "=", "score", ".", "argsort", "(", ")", "\n", "hit_top_k", "=", "[", "l", "in", "rank", "[", "i", ",", "-", "top_k", ":", "]", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "label", ")", "]", "\n", "return", "sum", "(", "hit_top_k", ")", "*", "1.0", "/", "len", "(", "hit_top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.read_skeleton_filter": [[26, 65], ["open", "int", "range", "f.readline", "int", "range", "skeleton_sequence[].append", "f.readline", "int", "range", "frame_info[].append", "float", "f.readline", "body_info[].append", "zip", "float", "f.readline().split", "zip", "f.readline().split", "f.readline", "f.readline"], "function", ["None"], ["\n", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'%s does not exist!'", "%", "filename", ")", "\n", "\n", "", "print", "(", "'Decomposing %s.'", "%", "filename", ")", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "filename", ")", "\n", "ret", ",", "frame", "=", "capture", ".", "read", "(", ")", "\n", "frame_no", "=", "0", "\n", "\n", "while", "ret", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s.png'", "%", "frame_no", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "if", "transforms", "is", "not", "None", ":", "\n", "            ", "frame", "=", "transforms", "(", "frame", ")", "\n", "frame", "=", "frame", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "save_path", ",", "frame", ")", "\n", "frame_no", "+=", "1", "\n", "ret", ",", "frame", "=", "capture", ".", "read", "(", ")", "\n", "\n", "\n", "", "", "def", "gendata", "(", "data_path", ":", "str", ",", "\n", "out_path", ":", "str", ",", "\n", "num_workers", ":", "int", ",", "\n", "transforms", ":", "transforms", ".", "Compose", "=", "None", ")", ":", "\n", "\n", "    ", "vids", "=", "[", "f", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "for", "f", "in", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'**/*.avi'", ")", ",", "recursive", "=", "True", ")", "]", "\n", "print", "(", "'Total of %s videos found.'", "%", "(", "len", "(", "vids", ")", ")", ")", "\n", "\n", "def", "get_save_dir", "(", "vid_filename", ")", ":", "\n", "        ", "video_base_path", "=", "vid_filename", ".", "split", "(", "data_path", ")", "[", "1", "]", "\n", "return", "os", ".", "path", ".", "join", "(", "out_path", ",", "video_base_path", ")", "\n", "", "save_dirs", "=", "[", "get_save_dir", "(", "f", ")", "for", "f", "in", "vids", "]", "\n", "\n", "Pool", "(", "num_workers", ")", ".", "starmap", "(", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.get_nonzero_std": [[67, 75], ["s.sum().sum", "len", "s[].std", "s.sum", "s[].std", "s[].std"], "function", ["None"], ["\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "    ", "preprocess_transforms", "=", "None", "\n", "# preprocess_transforms = transforms.Compose([", "\n", "#     transforms.ToTensor(),", "\n", "#     transforms.CenterCrop((224, 224))", "\n", "# ])", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.read_xyz": [[77, 95], ["generate_data.read_skeleton_filter", "numpy.zeros", "enumerate", "numpy.array", "data.transpose.transpose", "enumerate", "enumerate", "generate_data.get_nonzero_std", "np.array.argsort"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.read_skeleton_filter", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.get_nonzero_std"], ["parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'UAVHuman Data Converter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--out_folder'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "4", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_folder", ")", "\n", "\n", "", "gendata", "(", "data_path", "=", "args", ".", "data_path", ",", "\n", "out_path", "=", "args", ".", "out_folder", ",", "\n", "transforms", "=", "preprocess_transforms", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.gendata": [[97, 130], ["os.path.join", "numpy.zeros", "enumerate", "pose_data_tools.preprocess.pre_normalization", "numpy.save", "os.path.basename", "os.path.join", "sample_name.append", "tqdm.tqdm", "generate_data.read_xyz", "glob.glob", "os.path.exists", "OSError", "len", "int", "sample_label.append", "open", "pickle.dump", "os.path.join", "re.match().groups", "list", "re.match"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.pre_normalization", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.uavhumanposetools.generate_data.read_xyz"], []], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.Graph.__init__": [[66, 73], ["graph.Graph.get_adjacency_matrix"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.Graph.get_adjacency_matrix"], ["    ", "def", "__init__", "(", "self", ",", "labeling_mode", "=", "'spatial'", ")", ":", "\n", "        ", "self", ".", "A", "=", "self", ".", "get_adjacency_matrix", "(", "labeling_mode", ")", "\n", "self", ".", "num_node", "=", "num_node", "\n", "self", ".", "self_link", "=", "self_link", "\n", "self", ".", "inward", "=", "inward", "\n", "self", ".", "outward", "=", "outward", "\n", "self", ".", "neighbor", "=", "neighbor", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.Graph.get_adjacency_matrix": [[74, 82], ["graph.get_spatial_graph", "ValueError"], "methods", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.get_spatial_graph"], ["", "def", "get_adjacency_matrix", "(", "self", ",", "labeling_mode", "=", "None", ")", ":", "\n", "        ", "if", "labeling_mode", "is", "None", ":", "\n", "            ", "return", "self", ".", "A", "\n", "", "if", "labeling_mode", "==", "'spatial'", ":", "\n", "            ", "A", "=", "get_spatial_graph", "(", "num_node", ",", "self_link", ",", "inward", ",", "outward", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.edge2mat": [[39, 44], ["numpy.zeros"], "function", ["None"], ["def", "edge2mat", "(", "link", ",", "num_node", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", ",", "j", "in", "link", ":", "\n", "        ", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.normalize_digraph": [[46, 55], ["numpy.sum", "numpy.zeros", "range", "numpy.dot"], "function", ["None"], ["", "def", "normalize_digraph", "(", "A", ")", ":", "# \u9664\u4ee5\u6bcf\u5217\u7684\u548c", "\n", "    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "0", ")", "\n", "h", ",", "w", "=", "A", ".", "shape", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "w", ",", "w", ")", ")", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "1", ")", "\n", "", "", "AD", "=", "np", ".", "dot", "(", "A", ",", "Dn", ")", "\n", "return", "AD", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.get_spatial_graph": [[57, 63], ["graph.edge2mat", "graph.normalize_digraph", "graph.normalize_digraph", "numpy.stack", "graph.edge2mat", "graph.edge2mat"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.edge2mat", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.normalize_digraph", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.normalize_digraph", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.edge2mat", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.graph.edge2mat"], ["", "def", "get_spatial_graph", "(", "num_node", ",", "self_link", ",", "inward", ",", "outward", ")", ":", "\n", "    ", "I", "=", "edge2mat", "(", "self_link", ",", "num_node", ")", "\n", "In", "=", "normalize_digraph", "(", "edge2mat", "(", "inward", ",", "num_node", ")", ")", "\n", "Out", "=", "normalize_digraph", "(", "edge2mat", "(", "outward", ",", "num_node", ")", ")", "\n", "A", "=", "np", ".", "stack", "(", "(", "I", ",", "In", ",", "Out", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.downsample": [[6, 10], ["numpy.random.randint"], "function", ["None"], ["def", "downsample", "(", "data_numpy", ",", "step", ",", "random_sample", "=", "True", ")", ":", "\n", "# input: C,T,V,M", "\n", "    ", "begin", "=", "np", ".", "random", ".", "randint", "(", "step", ")", "if", "random_sample", "else", "0", "\n", "return", "data_numpy", "[", ":", ",", "begin", ":", ":", "step", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.temporal_slice": [[12, 17], ["data_numpy.reshape().transpose().reshape", "data_numpy.reshape().transpose", "data_numpy.reshape"], "function", ["None"], ["", "def", "temporal_slice", "(", "data_numpy", ",", "step", ")", ":", "\n", "# input: C,T,V,M", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "return", "data_numpy", ".", "reshape", "(", "C", ",", "T", "/", "step", ",", "step", ",", "V", ",", "M", ")", ".", "transpose", "(", "\n", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ")", ".", "reshape", "(", "C", ",", "T", "/", "step", ",", "V", ",", "step", "*", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.mean_subtractor": [[19, 30], ["valid_frame.argmax", "len", "valid_frame[].argmax"], "function", ["None"], ["", "def", "mean_subtractor", "(", "data_numpy", ",", "mean", ")", ":", "\n", "# input: C,T,V,M", "\n", "# naive version", "\n", "    ", "if", "mean", "==", "0", ":", "\n", "        ", "return", "\n", "", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "valid_frame", "=", "(", "data_numpy", "!=", "0", ")", ".", "sum", "(", "axis", "=", "3", ")", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "\n", "begin", "=", "valid_frame", ".", "argmax", "(", ")", "\n", "end", "=", "len", "(", "valid_frame", ")", "-", "valid_frame", "[", ":", ":", "-", "1", "]", ".", "argmax", "(", ")", "\n", "data_numpy", "[", ":", ",", ":", "end", ",", ":", ",", ":", "]", "=", "data_numpy", "[", ":", ",", ":", "end", ",", ":", ",", ":", "]", "-", "mean", "\n", "return", "data_numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.auto_pading": [[32, 41], ["numpy.zeros", "random.randint"], "function", ["None"], ["", "def", "auto_pading", "(", "data_numpy", ",", "size", ",", "random_pad", "=", "False", ")", ":", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "if", "T", "<", "size", ":", "\n", "        ", "begin", "=", "random", ".", "randint", "(", "0", ",", "size", "-", "T", ")", "if", "random_pad", "else", "0", "\n", "data_numpy_paded", "=", "np", ".", "zeros", "(", "(", "C", ",", "size", ",", "V", ",", "M", ")", ")", "\n", "data_numpy_paded", "[", ":", ",", "begin", ":", "begin", "+", "T", ",", ":", ",", ":", "]", "=", "data_numpy", "\n", "return", "data_numpy_paded", "\n", "", "else", ":", "\n", "        ", "return", "data_numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_choose": [[43, 56], ["random.randint", "tools.auto_pading"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.auto_pading"], ["", "", "def", "random_choose", "(", "data_numpy", ",", "size", ",", "auto_pad", "=", "True", ")", ":", "\n", "# input: C,T,V,M \u968f\u673a\u9009\u62e9\u5176\u4e2d\u4e00\u6bb5\uff0c\u4e0d\u662f\u5f88\u5408\u7406\u3002\u56e0\u4e3a\u67090", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "if", "T", "==", "size", ":", "\n", "        ", "return", "data_numpy", "\n", "", "elif", "T", "<", "size", ":", "\n", "        ", "if", "auto_pad", ":", "\n", "            ", "return", "auto_pading", "(", "data_numpy", ",", "size", ",", "random_pad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "data_numpy", "\n", "", "", "else", ":", "\n", "        ", "begin", "=", "random", ".", "randint", "(", "0", ",", "T", "-", "size", ")", "\n", "return", "data_numpy", "[", ":", ",", "begin", ":", "begin", "+", "size", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_move": [[58, 103], ["random.choice", "numpy.arange().round().astype", "numpy.append", "len", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.array", "range", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.dot", "np.dot.reshape", "numpy.arange().round", "xy.reshape", "numpy.linspace", "numpy.arange", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "", "def", "random_move", "(", "data_numpy", ",", "\n", "angle_candidate", "=", "[", "-", "10.", ",", "-", "5.", ",", "0.", ",", "5.", ",", "10.", "]", ",", "\n", "scale_candidate", "=", "[", "0.9", ",", "1.0", ",", "1.1", "]", ",", "\n", "transform_candidate", "=", "[", "-", "0.2", ",", "-", "0.1", ",", "0.0", ",", "0.1", ",", "0.2", "]", ",", "\n", "move_time_candidate", "=", "[", "1", "]", ")", ":", "\n", "# input: C,T,V,M", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "move_time", "=", "random", ".", "choice", "(", "move_time_candidate", ")", "\n", "node", "=", "np", ".", "arange", "(", "0", ",", "T", ",", "T", "*", "1.0", "/", "move_time", ")", ".", "round", "(", ")", ".", "astype", "(", "int", ")", "\n", "node", "=", "np", ".", "append", "(", "node", ",", "T", ")", "\n", "num_node", "=", "len", "(", "node", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "choice", "(", "angle_candidate", ",", "num_node", ")", "\n", "S", "=", "np", ".", "random", ".", "choice", "(", "scale_candidate", ",", "num_node", ")", "\n", "T_x", "=", "np", ".", "random", ".", "choice", "(", "transform_candidate", ",", "num_node", ")", "\n", "T_y", "=", "np", ".", "random", ".", "choice", "(", "transform_candidate", ",", "num_node", ")", "\n", "\n", "a", "=", "np", ".", "zeros", "(", "T", ")", "\n", "s", "=", "np", ".", "zeros", "(", "T", ")", "\n", "t_x", "=", "np", ".", "zeros", "(", "T", ")", "\n", "t_y", "=", "np", ".", "zeros", "(", "T", ")", "\n", "\n", "# linspace", "\n", "for", "i", "in", "range", "(", "num_node", "-", "1", ")", ":", "\n", "        ", "a", "[", "node", "[", "i", "]", ":", "node", "[", "i", "+", "1", "]", "]", "=", "np", ".", "linspace", "(", "\n", "A", "[", "i", "]", ",", "A", "[", "i", "+", "1", "]", ",", "node", "[", "i", "+", "1", "]", "-", "node", "[", "i", "]", ")", "*", "np", ".", "pi", "/", "180", "\n", "s", "[", "node", "[", "i", "]", ":", "node", "[", "i", "+", "1", "]", "]", "=", "np", ".", "linspace", "(", "S", "[", "i", "]", ",", "S", "[", "i", "+", "1", "]", ",", "\n", "node", "[", "i", "+", "1", "]", "-", "node", "[", "i", "]", ")", "\n", "t_x", "[", "node", "[", "i", "]", ":", "node", "[", "i", "+", "1", "]", "]", "=", "np", ".", "linspace", "(", "T_x", "[", "i", "]", ",", "T_x", "[", "i", "+", "1", "]", ",", "\n", "node", "[", "i", "+", "1", "]", "-", "node", "[", "i", "]", ")", "\n", "t_y", "[", "node", "[", "i", "]", ":", "node", "[", "i", "+", "1", "]", "]", "=", "np", ".", "linspace", "(", "T_y", "[", "i", "]", ",", "T_y", "[", "i", "+", "1", "]", ",", "\n", "node", "[", "i", "+", "1", "]", "-", "node", "[", "i", "]", ")", "\n", "\n", "", "theta", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "a", ")", "*", "s", ",", "-", "np", ".", "sin", "(", "a", ")", "*", "s", "]", ",", "\n", "[", "np", ".", "sin", "(", "a", ")", "*", "s", ",", "np", ".", "cos", "(", "a", ")", "*", "s", "]", "]", ")", "# xuanzhuan juzhen", "\n", "\n", "# perform transformation", "\n", "for", "i_frame", "in", "range", "(", "T", ")", ":", "\n", "        ", "xy", "=", "data_numpy", "[", "0", ":", "2", ",", "i_frame", ",", ":", ",", ":", "]", "\n", "new_xy", "=", "np", ".", "dot", "(", "theta", "[", ":", ",", ":", ",", "i_frame", "]", ",", "xy", ".", "reshape", "(", "2", ",", "-", "1", ")", ")", "\n", "new_xy", "[", "0", "]", "+=", "t_x", "[", "i_frame", "]", "\n", "new_xy", "[", "1", "]", "+=", "t_y", "[", "i_frame", "]", "# pingyi bianhuan", "\n", "data_numpy", "[", "0", ":", "2", ",", "i_frame", ",", ":", ",", ":", "]", "=", "new_xy", ".", "reshape", "(", "2", ",", "V", ",", "M", ")", "\n", "\n", "", "return", "data_numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.random_shift": [[105, 118], ["numpy.zeros", "valid_frame.argmax", "random.randint", "len", "valid_frame[].argmax"], "function", ["None"], ["", "def", "random_shift", "(", "data_numpy", ")", ":", "\n", "# input: C,T,V,M \u504f\u79fb\u5176\u4e2d\u4e00\u6bb5", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "data_shift", "=", "np", ".", "zeros", "(", "data_numpy", ".", "shape", ")", "\n", "valid_frame", "=", "(", "data_numpy", "!=", "0", ")", ".", "sum", "(", "axis", "=", "3", ")", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "\n", "begin", "=", "valid_frame", ".", "argmax", "(", ")", "\n", "end", "=", "len", "(", "valid_frame", ")", "-", "valid_frame", "[", ":", ":", "-", "1", "]", ".", "argmax", "(", ")", "\n", "\n", "size", "=", "end", "-", "begin", "\n", "bias", "=", "random", ".", "randint", "(", "0", ",", "T", "-", "size", ")", "\n", "data_shift", "[", ":", ",", "bias", ":", "bias", "+", "size", ",", ":", ",", ":", "]", "=", "data_numpy", "[", ":", ",", "begin", ":", "end", ",", ":", ",", ":", "]", "\n", "\n", "return", "data_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.tools.openpose_match": [[120, 162], ["data_numpy[].sum", "data_numpy[].reshape", "data_numpy[].reshape", "range", "range", "numpy.all", "range", "numpy.zeros", "range", "data_numpy[].sum().sum", "numpy.zeros", "distance[].argmin", "range", "data_numpy[].transpose", "data_numpy[].sum"], "function", ["None"], ["", "def", "openpose_match", "(", "data_numpy", ")", ":", "\n", "    ", "C", ",", "T", ",", "V", ",", "M", "=", "data_numpy", ".", "shape", "\n", "assert", "(", "C", "==", "3", ")", "\n", "score", "=", "data_numpy", "[", "2", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "axis", "=", "1", ")", "\n", "# the rank of body confidence in each frame (shape: T-1, M)", "\n", "rank", "=", "(", "-", "score", "[", "0", ":", "T", "-", "1", "]", ")", ".", "argsort", "(", "axis", "=", "1", ")", ".", "reshape", "(", "T", "-", "1", ",", "M", ")", "\n", "\n", "# data of frame 1", "\n", "xy1", "=", "data_numpy", "[", "0", ":", "2", ",", "0", ":", "T", "-", "1", ",", ":", ",", ":", "]", ".", "reshape", "(", "2", ",", "T", "-", "1", ",", "V", ",", "M", ",", "1", ")", "\n", "# data of frame 2", "\n", "xy2", "=", "data_numpy", "[", "0", ":", "2", ",", "1", ":", "T", ",", ":", ",", ":", "]", ".", "reshape", "(", "2", ",", "T", "-", "1", ",", "V", ",", "1", ",", "M", ")", "\n", "# square of distance between frame 1&2 (shape: T-1, M, M)", "\n", "distance", "=", "(", "(", "xy2", "-", "xy1", ")", "**", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "# match pose", "\n", "forward_map", "=", "np", ".", "zeros", "(", "(", "T", ",", "M", ")", ",", "dtype", "=", "int", ")", "-", "1", "\n", "forward_map", "[", "0", "]", "=", "range", "(", "M", ")", "\n", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "        ", "choose", "=", "(", "rank", "==", "m", ")", "\n", "forward", "=", "distance", "[", "choose", "]", ".", "argmin", "(", "axis", "=", "1", ")", "\n", "for", "t", "in", "range", "(", "T", "-", "1", ")", ":", "\n", "            ", "distance", "[", "t", ",", ":", ",", "forward", "[", "t", "]", "]", "=", "np", ".", "inf", "\n", "", "forward_map", "[", "1", ":", "]", "[", "choose", "]", "=", "forward", "\n", "", "assert", "(", "np", ".", "all", "(", "forward_map", ">=", "0", ")", ")", "\n", "\n", "# string data", "\n", "for", "t", "in", "range", "(", "T", "-", "1", ")", ":", "\n", "        ", "forward_map", "[", "t", "+", "1", "]", "=", "forward_map", "[", "t", "+", "1", "]", "[", "forward_map", "[", "t", "]", "]", "\n", "\n", "# generate data", "\n", "", "new_data_numpy", "=", "np", ".", "zeros", "(", "data_numpy", ".", "shape", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "        ", "new_data_numpy", "[", ":", ",", "t", ",", ":", ",", ":", "]", "=", "data_numpy", "[", ":", ",", "t", ",", ":", ",", "forward_map", "[", "\n", "t", "]", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "", "data_numpy", "=", "new_data_numpy", "\n", "\n", "# score sort", "\n", "trace_score", "=", "data_numpy", "[", "2", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "axis", "=", "1", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "rank", "=", "(", "-", "trace_score", ")", ".", "argsort", "(", ")", "\n", "data_numpy", "=", "data_numpy", "[", ":", ",", ":", ",", ":", ",", "rank", "]", "\n", "\n", "return", "data_numpy", "\n", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.rotation_matrix": [[5, 21], ["numpy.asarray", "math.cos", "numpy.array", "numpy.eye", "math.sqrt", "math.sin", "numpy.abs().sum", "numpy.abs", "numpy.dot", "numpy.abs"], "function", ["None"], ["def", "rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "\"\"\"\n    Return the rotation matrix associated with counterclockwise rotation about\n    the given axis by theta radians.\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "axis", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "theta", ")", "<", "1e-6", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "math", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "math", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "math", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.unit_vector": [[23, 26], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.angle_between": [[28, 43], ["rotation.unit_vector", "rotation.unit_vector", "numpy.arccos", "numpy.clip", "numpy.abs().sum", "numpy.abs().sum", "numpy.dot", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.unit_vector", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.unit_vector"], ["", "def", "angle_between", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\" Returns the angle in radians between vectors 'v1' and 'v2'::\n\n            >>> angle_between((1, 0, 0), (0, 1, 0))\n            1.5707963267948966\n            >>> angle_between((1, 0, 0), (1, 0, 0))\n            0.0\n            >>> angle_between((1, 0, 0), (-1, 0, 0))\n            3.141592653589793\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "v1", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "v2", ")", ".", "sum", "(", ")", "<", "1e-6", ":", "\n", "        ", "return", "0", "\n", "", "v1_u", "=", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.x_rotation": [[45, 49], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "x_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around x-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.y_rotation": [[51, 55], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "y_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around y-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "0", ",", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.rotation.z_rotation": [[57, 61], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "z_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around z-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.visualise.visualise": [[5, 68], ["matplotlib.ion", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.axis", "range", "sys.path.append", "range", "fig.add_subplot.axis", "range", "range", "plt.figure.canvas.draw", "matplotlib.pause", "path.dirname", "range", "pose.append", "fig.add_subplot.set_zlim3d", "range", "plt.figure.canvas.draw", "matplotlib.pause", "fig.add_subplot.plot", "range", "pose[].set_xdata", "pose[].set_ydata", "path.dirname", "len", "enumerate", "numpy.zeros", "numpy.zeros", "path.dirname", "a.append", "a.append", "path.abspath", "[].set_xdata", "[].set_ydata", "fig.add_subplot.plot", "fig.add_subplot.plot", "[].set_3d_properties", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "x1.sum", "x2.sum"], "function", ["None"], ["def", "visualise", "(", "data", ",", "graph", "=", "None", ",", "is_3d", "=", "True", ")", ":", "\n", "    ", "'''\n    Visualise skeleton data using matplotlib\n    \n    Args:\n        data: tensor of shape (B x C x V x T x M)\n        graph: graph representation for skeleton\n        is_3d: set true for 3d skeletons\n    '''", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "\n", "plt", ".", "ion", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "if", "is_3d", ":", "\n", "        ", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "", "if", "graph", "is", "None", ":", "\n", "        ", "p_type", "=", "[", "'b.'", ",", "'g.'", ",", "'r.'", ",", "'c.'", ",", "'m.'", ",", "'y.'", ",", "'k.'", ",", "'k.'", ",", "'k.'", ",", "'k.'", "]", "\n", "pose", "=", "[", "\n", "ax", ".", "plot", "(", "np", ".", "zeros", "(", "V", ")", ",", "np", ".", "zeros", "(", "V", ")", ",", "p_type", "[", "m", "]", ")", "[", "0", "]", "for", "m", "in", "range", "(", "M", ")", "\n", "]", "\n", "ax", ".", "axis", "(", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "                ", "pose", "[", "m", "]", ".", "set_xdata", "(", "data", "[", "0", ",", "0", ",", "t", ",", ":", ",", "m", "]", ")", "\n", "pose", "[", "m", "]", ".", "set_ydata", "(", "data", "[", "0", ",", "1", ",", "t", ",", ":", ",", "m", "]", ")", "\n", "", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "", "", "else", ":", "\n", "        ", "p_type", "=", "[", "'b-'", ",", "'g-'", ",", "'r-'", ",", "'c-'", ",", "'m-'", ",", "'y-'", ",", "'k-'", ",", "'k-'", ",", "'k-'", ",", "'k-'", "]", "\n", "import", "sys", "\n", "from", "os", "import", "path", "\n", "sys", ".", "path", ".", "append", "(", "\n", "path", ".", "dirname", "(", "path", ".", "dirname", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ")", ")", ")", "\n", "G", "=", "graph", "\n", "edge", "=", "G", ".", "inward", "\n", "pose", "=", "[", "]", "\n", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "            ", "a", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edge", ")", ")", ":", "\n", "                ", "if", "is_3d", ":", "\n", "                    ", "a", ".", "append", "(", "ax", ".", "plot", "(", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", ",", "p_type", "[", "m", "]", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "a", ".", "append", "(", "ax", ".", "plot", "(", "np", ".", "zeros", "(", "2", ")", ",", "np", ".", "zeros", "(", "2", ")", ",", "p_type", "[", "m", "]", ")", "[", "0", "]", ")", "\n", "", "", "pose", ".", "append", "(", "a", ")", "\n", "", "ax", ".", "axis", "(", "[", "-", "100", ",", "100", ",", "-", "100", ",", "100", "]", ")", "\n", "if", "is_3d", ":", "\n", "            ", "ax", ".", "set_zlim3d", "(", "-", "100", ",", "100", ")", "\n", "", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "                ", "for", "i", ",", "(", "v1", ",", "v2", ")", "in", "enumerate", "(", "edge", ")", ":", "\n", "                    ", "x1", "=", "data", "[", "0", ",", ":", "2", ",", "t", ",", "v1", ",", "m", "]", "\n", "x2", "=", "data", "[", "0", ",", ":", "2", ",", "t", ",", "v2", ",", "m", "]", "\n", "if", "(", "x1", ".", "sum", "(", ")", "!=", "0", "and", "x2", ".", "sum", "(", ")", "!=", "0", ")", "or", "v1", "==", "1", "or", "v2", "==", "1", ":", "\n", "                        ", "pose", "[", "m", "]", "[", "i", "]", ".", "set_xdata", "(", "data", "[", "0", ",", "0", ",", "t", ",", "[", "v1", ",", "v2", "]", ",", "m", "]", ")", "\n", "pose", "[", "m", "]", "[", "i", "]", ".", "set_ydata", "(", "data", "[", "0", ",", "1", ",", "t", ",", "[", "v1", ",", "v2", "]", ",", "m", "]", ")", "\n", "if", "is_3d", ":", "\n", "                            ", "pose", "[", "m", "]", "[", "i", "]", ".", "set_3d_properties", "(", "data", "[", "0", ",", "2", ",", "t", ",", "[", "v1", ",", "v2", "]", ",", "m", "]", ")", "\n", "", "", "", "", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.01", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.pre_normalization": [[15, 94], ["numpy.transpose", "print", "enumerate", "print", "enumerate", "numpy.transpose", "tqdm.tqdm", "enumerate", "tqdm.tqdm", "[].copy", "enumerate", "enumerate", "print", "preprocess.pre_normalization.align_human_to_vector"], "function", ["None"], ["def", "pre_normalization", "(", "data", ",", "center_joint", "=", "1", ",", "zaxis", "=", "[", "11", ",", "5", "]", ",", "xaxis", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Normalization steps:\n        1) Pad empty frames with last frame\n        2) Center the human at origin\n        3) Rotate human to align specified joints to z-axis: ntu [0,1], uav [11,5]\n        4) Rotate human to align specified joints to x-axis: ntu [8,4], uav []\n    \n    Args:\n        data: tensor with skeleton data of shape N x C x T x V x M\n        center_joint: body joint index indicating center of body\n        zaxis: list containing 0 or 2 body joint indices (0 skips the alignment)\n        xaxis: list containing 0 or 2 body joint indices (0 skips the alignment)\n    \"\"\"", "\n", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "s", "=", "np", ".", "transpose", "(", "data", ",", "[", "0", ",", "4", ",", "2", ",", "3", ",", "1", "]", ")", "# N, C, T, V, M  to  N, M, T, V, C", "\n", "\n", "print", "(", "'pad the null frames with the previous frames'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "# pad", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "i_s", ",", "' has no skeleton'", ")", "\n", "", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "person", "[", "0", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "index", "=", "(", "person", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "tmp", "=", "person", "[", "index", "]", ".", "copy", "(", ")", "\n", "person", "*=", "0", "\n", "person", "[", ":", "len", "(", "tmp", ")", "]", "=", "tmp", "\n", "", "for", "i_f", ",", "frame", "in", "enumerate", "(", "person", ")", ":", "\n", "                ", "if", "frame", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "if", "person", "[", "i_f", ":", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "rest", "=", "len", "(", "person", ")", "-", "i_f", "\n", "num", "=", "int", "(", "np", ".", "ceil", "(", "rest", "/", "i_f", ")", ")", "\n", "pad", "=", "np", ".", "concatenate", "(", "[", "person", "[", "0", ":", "i_f", "]", "for", "_", "in", "range", "(", "num", ")", "]", ",", "0", ")", "[", ":", "rest", "]", "\n", "s", "[", "i_s", ",", "i_p", ",", "i_f", ":", "]", "=", "pad", "\n", "break", "\n", "\n", "", "", "", "", "", "print", "(", "'sub the center joint #1 (spine joint in ntu and neck joint in kinetics)'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "main_body_center", "=", "skeleton", "[", "0", "]", "[", ":", ",", "center_joint", ":", "center_joint", "+", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "mask", "=", "(", "person", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", ".", "reshape", "(", "T", ",", "V", ",", "1", ")", "\n", "s", "[", "i_s", ",", "i_p", "]", "=", "(", "s", "[", "i_s", ",", "i_p", "]", "-", "main_body_center", ")", "*", "mask", "\n", "\n", "", "", "def", "align_human_to_vector", "(", "joint_idx1", ":", "int", ",", "joint_idx2", ":", "int", ",", "target_vector", ":", "list", ")", ":", "\n", "        ", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "\n", "            ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "joint1", "=", "skeleton", "[", "0", ",", "0", ",", "joint_idx1", "]", "\n", "joint2", "=", "skeleton", "[", "0", ",", "0", ",", "joint_idx2", "]", "\n", "axis", "=", "np", ".", "cross", "(", "joint2", "-", "joint1", ",", "target_vector", ")", "\n", "angle", "=", "angle_between", "(", "joint2", "-", "joint1", ",", "target_vector", ")", "\n", "matrix", "=", "rotation_matrix", "(", "axis", ",", "angle", ")", "\n", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "                ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "for", "i_f", ",", "frame", "in", "enumerate", "(", "person", ")", ":", "\n", "                    ", "if", "frame", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "for", "i_j", ",", "joint", "in", "enumerate", "(", "frame", ")", ":", "\n", "                        ", "s", "[", "i_s", ",", "i_p", ",", "i_f", ",", "i_j", "]", "=", "np", ".", "dot", "(", "matrix", ",", "joint", ")", "\n", "\n", "", "", "", "", "", "if", "zaxis", ":", "\n", "        ", "print", "(", "'parallel the bone between hip(jpt %s)'", "%", "zaxis", "[", "0", "]", "+", "'and spine(jpt %s) of the first person to the z axis'", "%", "zaxis", "[", "1", "]", ")", "\n", "align_human_to_vector", "(", "zaxis", "[", "0", "]", ",", "zaxis", "[", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "", "if", "xaxis", ":", "\n", "        ", "print", "(", "'parallel the bone between right shoulder(jpt %s)'", "%", "xaxis", "[", "0", "]", "+", "'and left shoulder(jpt %s) of the first person to the x axis'", "%", "xaxis", "[", "1", "]", ")", "\n", "align_human_to_vector", "(", "xaxis", "[", "0", "]", ",", "xaxis", "[", "1", "]", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "\n", "", "data", "=", "np", ".", "transpose", "(", "s", ",", "[", "0", ",", "4", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.rotation_matrix": [[96, 112], ["numpy.asarray", "math.cos", "numpy.array", "numpy.eye", "math.sqrt", "math.sin", "numpy.abs().sum", "numpy.abs", "numpy.dot", "numpy.abs"], "function", ["None"], ["", "def", "rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "\"\"\"\n    Return the rotation matrix associated with counterclockwise rotation about\n    the given axis by theta radians.\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "axis", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "theta", ")", "<", "1e-6", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "math", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "math", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "math", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.unit_vector": [[114, 117], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.angle_between": [[119, 134], ["preprocess.unit_vector", "preprocess.unit_vector", "numpy.arccos", "numpy.clip", "numpy.abs().sum", "numpy.abs().sum", "numpy.dot", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.unit_vector", "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.unit_vector"], ["", "def", "angle_between", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\" Returns the angle in radians between vectors 'v1' and 'v2'::\n\n            >>> angle_between((1, 0, 0), (0, 1, 0))\n            1.5707963267948966\n            >>> angle_between((1, 0, 0), (1, 0, 0))\n            0.0\n            >>> angle_between((1, 0, 0), (-1, 0, 0))\n            3.141592653589793\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "v1", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "v2", ")", ".", "sum", "(", ")", "<", "1e-6", ":", "\n", "        ", "return", "0", "\n", "", "v1_u", "=", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.x_rotation": [[136, 140], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "x_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around x-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.y_rotation": [[142, 146], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "y_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around y-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "0", ",", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SUTDCV_UAV-Human.pose_data_tools.preprocess.z_rotation": [[148, 152], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "z_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around z-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]]}