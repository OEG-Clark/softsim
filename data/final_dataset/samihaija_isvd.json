{"home.repos.pwc.inspect_result.samihaija_isvd.None.final_obgn_mixed_device.get_all_layers": [[48, 77], ["range", "tensorflow.concat", "tensorflow.sparse.sparse_dense_matmul", "tf_X.append", "tensorflow.zeros_like", "tensorflow.math.l2_normalize", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.zeros_like"], "function", ["None"], ["def", "get_all_layers", "(", "tf_adj", ",", "tf_x", ",", "tf_trainy", ",", "adj_diagonal", ",", "remove_first_layer", "=", "False", ",", "layernorm", "=", "False", ")", ":", "\n", "  ", "tf_X", "=", "[", "tf_x", "]", "\n", "for", "l", "in", "range", "(", "FLAGS", ".", "layers", ")", ":", "\n", "    ", "xprev", "=", "tf_X", "[", "-", "1", "]", "\n", "if", "l", "==", "0", "and", "FLAGS", ".", "label_reuse", ":", "\n", "# Concat labels.", "\n", "      ", "xprev", "=", "tf", ".", "concat", "(", "[", "xprev", ",", "tf_trainy", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "AX", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "tf_adj", ",", "xprev", ")", "\n", "\n", "if", "l", "==", "0", "and", "FLAGS", ".", "label_reuse", ":", "\n", "# prevent leakage. Remove tf_trainy from each node's row.", "\n", "      ", "AX", "=", "AX", "-", "(", "tf", ".", "concat", "(", "[", "tf", ".", "zeros_like", "(", "tf_x", ")", ",", "tf_trainy", "]", ",", "axis", "=", "1", ")", "*", "tf", ".", "expand_dims", "(", "adj_diagonal", ",", "1", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "delta", ":", "\n", "      ", "AX", "=", "tf", ".", "concat", "(", "[", "\n", "AX", ",", "\n", "AX", "-", "xprev", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "tf_X", ".", "append", "(", "AX", ")", "\n", "\n", "", "if", "remove_first_layer", ":", "\n", "    ", "tf_X", "[", "0", "]", "=", "tf", ".", "zeros_like", "(", "tf_X", "[", "0", "]", ")", "\n", "\n", "", "X", "=", "tf", ".", "concat", "(", "tf_X", ",", "axis", "=", "1", ")", "\n", "if", "layernorm", ":", "\n", "    ", "X", "=", "tf", ".", "math", ".", "l2_normalize", "(", "X", ",", "axis", "=", "1", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.final_obgn_mixed_device.main": [[79, 435], ["FLAGS.train_loop.endswith", "json.loads.get().items", "ogb.nodeproppred.NodePropPredDataset", "ogb.nodeproppred.NodePropPredDataset.get_idx_split", "numpy.concatenate", "scipy.sparse.csr_matrix", "scipy.sparse.eye", "scipy.sparse.diags", "scipy.sparse.diags.dot().dot", "scipy.sparse.diags.dot().dot", "normalizer.dot().dot.nonzero", "os.path.join", "os.path.exists", "json.loads", "json.loads", "setattr", "numpy.concatenate", "np.concatenate.max", "numpy.array", "numpy.array", "numpy.sqrt", "numpy.array", "label.max", "tensorflow.device", "tensorflow.sparse.SparseTensor", "tensorflow.one_hot", "tf.one_hot.numpy", "tensorflow.convert_to_tensor", "sklearn.decomposition.PCA().fit_transform", "tensorflow.device", "tensorflow.convert_to_tensor", "final_obgn_mixed_device.get_all_layers", "final_obgn_mixed_device.get_all_layers", "range", "tf_fsvd.leaf", "tf_fsvd.fsvd", "tensorflow.concat", "tensorflow.matmul", "tensorflow.gather", "range", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.reduce_mean", "print", "tensorflow.device", "final_obgn_mixed_device.main.run_test"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.final_obgn_mixed_device.get_all_layers", "home.repos.pwc.inspect_result.samihaija_isvd.None.final_obgn_mixed_device.get_all_layers", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "if", "FLAGS", ".", "train_loop", ".", "endswith", "(", "'.json'", ")", ":", "\n", "    ", "TRAIN_LOOP", "=", "json", ".", "loads", "(", "open", "(", "FLAGS", ".", "train_loop", ")", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "TRAIN_LOOP", "=", "json", ".", "loads", "(", "FLAGS", ".", "train_loop", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "TRAIN_LOOP", ".", "get", "(", "'flags'", ",", "{", "}", ")", ".", "items", "(", ")", ":", "\n", "    ", "setattr", "(", "FLAGS", ",", "k", ",", "v", ")", "\n", "\n", "\n", "\n", "", "dataset", "=", "NodePropPredDataset", "(", "name", "=", "FLAGS", ".", "dataset", ")", "\n", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "valid_idx", ",", "test_idx", "=", "split_idx", "[", "\"train\"", "]", ",", "split_idx", "[", "\"valid\"", "]", ",", "split_idx", "[", "\"test\"", "]", "\n", "if", "FLAGS", ".", "val_as_train", ":", "\n", "    ", "train_idx", "=", "np", ".", "concatenate", "(", "[", "train_idx", ",", "valid_idx", "]", ",", "axis", "=", "0", ")", "\n", "", "graph", ",", "label", "=", "dataset", "[", "0", "]", "# graph: library-agnostic graph object", "\n", "\n", "edges", "=", "graph", "[", "'edge_index'", "]", ".", "T", "\n", "num_nodes", "=", "edges", ".", "max", "(", ")", "+", "1", "\n", "\n", "edges", "=", "np", ".", "concatenate", "(", "[", "\n", "edges", ",", "\n", "# Add transpose", "\n", "edges", "[", ":", ",", ":", ":", "-", "1", "]", "]", ")", "\n", "\n", "A", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "\n", "(", "np", ".", "ones", "(", "[", "len", "(", "edges", ")", "]", ",", "dtype", "=", "'float32'", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "A", "+=", "scipy", ".", "sparse", ".", "eye", "(", "A", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Remove double-edges", "\n", "A", "=", "(", "A", ">", "0", ")", "*", "np", ".", "array", "(", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "inv_degrees", "=", "np", ".", "array", "(", "1.0", "/", "A", ".", "sum", "(", "0", ")", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", "\n", "# Symmetric normalization", "\n", "normalizer", "=", "scipy", ".", "sparse", ".", "diags", "(", "np", ".", "sqrt", "(", "inv_degrees", ")", ")", "\n", "\n", "Ahat", "=", "normalizer", ".", "dot", "(", "A", ")", ".", "dot", "(", "normalizer", ")", "\n", "DA", "=", "normalizer", ".", "dot", "(", "normalizer", ")", ".", "dot", "(", "A", ")", "# unused", "\n", "\n", "rows", ",", "cols", "=", "Ahat", ".", "nonzero", "(", ")", "\n", "values", "=", "np", ".", "array", "(", "Ahat", "[", "rows", ",", "cols", "]", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", "\n", "num_labels", "=", "label", ".", "max", "(", ")", "+", "1", "\n", "with", "tf", ".", "device", "(", "FLAGS", ".", "svd_device", ")", ":", "\n", "    ", "tf_adj", "=", "tf", ".", "sparse", ".", "SparseTensor", "(", "\n", "tf", ".", "stack", "(", "[", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int64'", ")", ",", "np", ".", "array", "(", "cols", ",", "dtype", "=", "'int64'", ")", "]", ",", "axis", "=", "1", ")", ",", "\n", "values", ",", "\n", "Ahat", ".", "shape", ")", "\n", "tf_ally", "=", "tf", ".", "one_hot", "(", "label", "[", ":", ",", "0", "]", ",", "num_labels", ")", "\n", "np_ally", "=", "tf_ally", ".", "numpy", "(", ")", "\n", "np_trainy", "=", "np_ally", "+", "0", "\n", "np_trainy", "[", "test_idx", "]", "=", "0", "\n", "tf_trainy", "=", "tf", ".", "convert_to_tensor", "(", "np_trainy", ")", "# Oops.", "\n", "\n", "", "dense_x", "=", "graph", "[", "'node_feat'", "]", "\n", "\n", "import", "sklearn", ".", "decomposition", "\n", "\n", "if", "FLAGS", ".", "pca_x", ":", "\n", "    ", "dense_x", "=", "sklearn", ".", "decomposition", ".", "PCA", "(", "FLAGS", ".", "pca_x", ")", ".", "fit_transform", "(", "dense_x", ")", "\n", "", "with", "tf", ".", "device", "(", "FLAGS", ".", "svd_device", ")", ":", "\n", "    ", "tf_x", "=", "tf", ".", "convert_to_tensor", "(", "dense_x", ")", "\n", "\n", "X", "=", "get_all_layers", "(", "tf_adj", ",", "tf_x", ",", "tf_trainy", ",", "inv_degrees", ",", "layernorm", "=", "FLAGS", ".", "layernorm", ")", "\n", "\n", "X2", "=", "get_all_layers", "(", "tf_adj", ",", "tf_x", ",", "tf", ".", "zeros_like", "(", "tf_trainy", ")", ",", "inv_degrees", ",", "layernorm", "=", "FLAGS", ".", "layernorm", ")", "\n", "\n", "xgroups", "=", "[", "\n", "X", ",", "X2", ",", "\n", "#X3, X4", "\n", "]", "\n", "for", "l", "in", "range", "(", "FLAGS", ".", "dropout_levels", ")", ":", "\n", "      ", "xgroups", ".", "append", "(", "tf", ".", "nn", ".", "dropout", "(", "xgroups", "[", "0", "]", ",", "rate", "=", "0.5", ")", ")", "\n", "", "XC", "=", "tf_fsvd", ".", "leaf", "(", "tf", ".", "concat", "(", "xgroups", ",", "axis", "=", "0", ")", ")", "\n", "\n", "svdX", "=", "tf_fsvd", ".", "fsvd", "(", "\n", "XC", ",", "FLAGS", ".", "inv_rank", ",", "n_iter", "=", "FLAGS", ".", "svd_iter", ",", "renorm", "=", "FLAGS", ".", "renorm", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "\n", "\n", "combined_idx", "=", "[", "train_idx", "+", "A", ".", "shape", "[", "0", "]", "*", "ii", "for", "ii", "in", "range", "(", "2", "+", "FLAGS", ".", "dropout_levels", ")", "]", "\n", "combined_idx", "=", "tf", ".", "concat", "(", "combined_idx", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "def", "run_test", "(", "U", ",", "S", ",", "V", ",", "Y", ",", "scale_y", "=", "None", ")", ":", "\n", "    ", "SCALE_Y", "=", "scale_y", "or", "FLAGS", ".", "scale_y", "\n", "W", "=", "tf", ".", "matmul", "(", "\n", "V", "*", "(", "1", "/", "S", ")", ",", "\n", "tf", ".", "matmul", "(", "U", ",", "Y", "*", "SCALE_Y", "-", "(", "SCALE_Y", "/", "2", ")", ",", "transpose_a", "=", "True", ")", ")", "\n", "Wtest", "=", "W", "\n", "\n", "scores", "=", "tf", ".", "gather", "(", "XC", ".", "dot", "(", "Wtest", ")", ",", "test_idx", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "label_reuse", ")", ":", "\n", "#", "\n", "      ", "np_combined_y", "=", "tf_trainy", ".", "numpy", "(", ")", "\n", "np_combined_y", "[", "test_idx", "]", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", "*", "10000", ")", ".", "numpy", "(", ")", "\n", "tf_combined_y", "=", "tf", ".", "convert_to_tensor", "(", "np_combined_y", ")", "\n", "testX", "=", "get_all_layers", "(", "tf_adj", ",", "tf_x", ",", "tf_combined_y", ",", "inv_degrees", ",", "layernorm", "=", "FLAGS", ".", "layernorm", ")", "\n", "scores", "=", "tf", ".", "matmul", "(", "testX", ",", "Wtest", ")", "\n", "scores", "=", "tf", ".", "gather", "(", "scores", ",", "test_idx", ")", "\n", "\n", "\n", "# Test accuracy", "\n", "", "ypred", "=", "tf", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ytrue", "=", "tf", ".", "argmax", "(", "tf", ".", "gather", "(", "tf_ally", ",", "test_idx", ")", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "ypred", "==", "ytrue", ",", "tf", ".", "float32", ")", ")", "\n", "print", "(", "'test accuracy'", ",", "accuracy", ".", "numpy", "(", ")", ")", "\n", "return", "W", ",", "float", "(", "accuracy", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "", "with", "tf", ".", "device", "(", "FLAGS", ".", "svd_device", ")", ":", "\n", "    ", "W", ",", "svd_test_accuracy", "=", "run_test", "(", "U", "=", "tf", ".", "gather", "(", "svdX", "[", "0", "]", ",", "combined_idx", ")", ",", "S", "=", "svdX", "[", "1", "]", ",", "V", "=", "svdX", "[", "2", "]", ",", "Y", "=", "tf", ".", "gather", "(", "tf_ally", ",", "tf", ".", "concat", "(", "[", "train_idx", "]", "*", "(", "2", "+", "FLAGS", ".", "dropout_levels", ")", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "# Compact Adjacency", "\n", "", "cadj_fname", "=", "os", ".", "path", ".", "join", "(", "'dataset'", ",", "FLAGS", ".", "dataset", "+", "'-cadj.np.gz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cadj_fname", ")", ":", "\n", "    ", "cadj", "=", "gttf", ".", "framework", ".", "compact_adj", ".", "CompactAdjacency", ".", "from_file", "(", "cadj_fname", ")", "\n", "", "else", ":", "\n", "    ", "cadj", "=", "gttf", ".", "framework", ".", "compact_adj", ".", "CompactAdjacency", "(", "A", "-", "scipy", ".", "sparse", ".", "eye", "(", "A", ".", "shape", "[", "0", "]", ")", ")", "\n", "cadj", ".", "save", "(", "cadj_fname", ")", "\n", "\n", "\n", "\n", "", "class", "Net", ":", "# With label re-use", "\n", "    ", "def", "__init__", "(", "self", ",", "W", ",", "dimx", ",", "dimy", ")", ":", "\n", "      ", "self", ".", "trainable_variables", "=", "[", "]", "\n", "self", ".", "w_init", "=", "W", "\n", "self", ".", "ws_init", "=", "[", "]", "\n", "self", ".", "trainables", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "layers", "+", "1", ")", ":", "\n", "        ", "endi", "=", "offset", "+", "dimx", "\n", "if", "i", ">", "0", "and", "FLAGS", ".", "label_reuse", ":", "\n", "          ", "endi", "+=", "dimy", "\n", "\n", "", "w", "=", "W", "[", "offset", ":", "endi", "]", "\n", "self", ".", "ws_init", ".", "append", "(", "w", ")", "\n", "# <SplitRelu layer at output>", "\n", "pos_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "w", ".", "shape", "[", "1", "]", ")", "\n", "neg_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "w", ".", "shape", "[", "1", "]", ",", "use_bias", "=", "False", ")", "\n", "pos_layer", "(", "tf", ".", "zeros", "(", "[", "1", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "neg_layer", "(", "tf", ".", "zeros", "(", "[", "1", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "pos_layer", ".", "trainable_variables", "[", "0", "]", ".", "assign", "(", "w", ")", "\n", "neg_layer", ".", "trainable_variables", "[", "0", "]", ".", "assign", "(", "-", "w", ")", "\n", "self", ".", "trainables", ".", "append", "(", "[", "\n", "pos_layer", ",", "# Positive part to output", "\n", "neg_layer", ",", "# Negative part to output", "\n", "]", ")", "\n", "# </SplitRelu layer at output>", "\n", "self", ".", "trainable_variables", "+=", "pos_layer", ".", "trainable_variables", "+", "neg_layer", ".", "trainable_variables", "\n", "if", "i", "<", "FLAGS", ".", "layers", ":", "\n", "# <SplitRelu layer for propagation>", "\n", "          ", "pos_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "w", ".", "shape", "[", "0", "]", ")", "\n", "neg_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "w", ".", "shape", "[", "0", "]", ",", "use_bias", "=", "False", ")", "# No need for 2 bias terms", "\n", "neg_layer", "(", "tf", ".", "zeros", "(", "[", "1", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "pos_layer", "(", "tf", ".", "zeros", "(", "[", "1", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "self", ".", "trainables", "[", "-", "1", "]", ".", "append", "(", "pos_layer", ")", "\n", "self", ".", "trainables", "[", "-", "1", "]", ".", "append", "(", "neg_layer", ")", "\n", "pos_layer", ".", "trainable_variables", "[", "0", "]", ".", "assign", "(", "tf", ".", "zeros", "(", "[", "w", ".", "shape", "[", "0", "]", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "neg_layer", ".", "trainable_variables", "[", "0", "]", ".", "assign", "(", "-", "tf", ".", "zeros", "(", "[", "w", ".", "shape", "[", "0", "]", ",", "w", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "self", ".", "trainable_variables", "+=", "pos_layer", ".", "trainable_variables", "+", "neg_layer", ".", "trainable_variables", "\n", "# </SplitRelu layer for propagation>", "\n", "", "offset", "=", "endi", "\n", "\n", "", "", "def", "__call__", "(", "self", ",", "adj", ",", "x", ",", "y", ",", "adj_diagonal", ",", "dropout", "=", "None", ")", ":", "\n", "      ", "net", "=", "x", "\n", "output", "=", "[", "]", "\n", "for", "layer", ",", "layers", "in", "enumerate", "(", "self", ".", "trainables", ")", ":", "\n", "# Output path", "\n", "        ", "pos_out_layer", ",", "neg_out_layer", "=", "layers", "[", ":", "2", "]", "\n", "pos_net", "=", "pos_out_layer", "(", "net", ")", "\n", "if", "dropout", ":", "pos_net", "=", "tf", ".", "nn", ".", "dropout", "(", "pos_net", ",", "rate", "=", "dropout", ")", "\n", "pos_net", "=", "tf", ".", "nn", ".", "relu", "(", "pos_net", ")", "\n", "neg_net", "=", "neg_out_layer", "(", "net", ")", "\n", "if", "dropout", ":", "neg_net", "=", "tf", ".", "nn", ".", "dropout", "(", "neg_net", ",", "rate", "=", "dropout", ")", "\n", "neg_net", "=", "tf", ".", "nn", ".", "relu", "(", "neg_net", ")", "\n", "out_net", "=", "pos_net", "-", "neg_net", "\n", "output", ".", "append", "(", "out_net", ")", "\n", "\n", "if", "layer", "<", "FLAGS", ".", "layers", ":", "# Forward propagation path", "\n", "          ", "layer_input", "=", "net", "\n", "pos_fwd_layer", ",", "neg_fwd_layer", "=", "layers", "[", "-", "2", ":", "]", "\n", "\n", "pos_net", "=", "pos_fwd_layer", "(", "net", ")", "+", "layer_input", "# Residual connection", "\n", "if", "dropout", ":", "pos_net", "=", "tf", ".", "nn", ".", "dropout", "(", "pos_net", ",", "rate", "=", "dropout", ")", "\n", "\n", "neg_net", "=", "neg_fwd_layer", "(", "net", ")", "-", "layer_input", "# Residual connection", "\n", "if", "dropout", ":", "neg_net", "=", "tf", ".", "nn", ".", "dropout", "(", "neg_net", ",", "rate", "=", "dropout", ")", "\n", "\n", "pos_net", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "adj", ",", "pos_net", ")", "\n", "neg_net", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "adj", ",", "neg_net", ")", "\n", "pos_net", "=", "tf", ".", "nn", ".", "relu", "(", "pos_net", ")", "\n", "neg_net", "=", "tf", ".", "nn", ".", "relu", "(", "neg_net", ")", "\n", "\n", "net", "=", "pos_net", "-", "neg_net", "\n", "\n", "if", "layer", "==", "0", "and", "FLAGS", ".", "label_reuse", ":", "\n", "            ", "y_columns", "=", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "adj", ",", "y", ")", "\n", "y_columns", "-=", "tf", ".", "expand_dims", "(", "adj_diagonal", ",", "1", ")", "*", "y", "\n", "net", "=", "tf", ".", "concat", "(", "[", "net", ",", "y_columns", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "return", "tf", ".", "reduce_sum", "(", "output", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "with", "tf", ".", "device", "(", "FLAGS", ".", "finetune_device", ")", ":", "\n", "    ", "net", "=", "Net", "(", "W", ",", "tf_x", ".", "shape", "[", "1", "]", ",", "tf_ally", ".", "shape", "[", "1", "]", ")", "\n", "adj_indices", "=", "tf", ".", "stack", "(", "[", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int64'", ")", ",", "np", ".", "array", "(", "cols", ",", "dtype", "=", "'int64'", ")", "]", ",", "axis", "=", "1", ")", "\n", "tf_adj", "=", "tf", ".", "sparse", ".", "SparseTensor", "(", "\n", "tf", ".", "stack", "(", "[", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int64'", ")", ",", "np", ".", "array", "(", "cols", ",", "dtype", "=", "'int64'", ")", "]", ",", "axis", "=", "1", ")", ",", "\n", "values", ",", "\n", "Ahat", ".", "shape", ")", "\n", "\n", "att_net", "=", "tf", ".", "keras", ".", "models", ".", "Sequential", "(", "[", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "50", ",", "use_bias", "=", "False", ")", "]", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "1e-4", ")", "\n", "#opt = tf.keras.optimizers.SGD(1e-4, momentum=0.9)", "\n", "tf_x", "=", "tf_x", "+", "0", "\n", "\n", "", "def", "finetune_gttf", "(", "num_epochs", "=", "5", ",", "eval_every", "=", "1", ")", ":", "\n", "    ", "all_accuracies", "=", "[", "]", "\n", "net_variables", "=", "None", "\n", "DROPOUT", "=", "0.5", "\n", "BATCH_SIZE", "=", "500", "\n", "if", "FLAGS", ".", "fanouts", ":", "\n", "      ", "FANOUT", "=", "[", "int", "(", "f", ")", "for", "f", "in", "FLAGS", ".", "fanouts", ".", "split", "(", "'x'", ")", "]", "\n", "", "else", ":", "\n", "      ", "FANOUT", "=", "[", "4", "]", "+", "(", "[", "2", "]", "*", "(", "FLAGS", ".", "layers", "-", "1", ")", ")", "\n", "\n", "", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "num_epochs", ")", ")", ":", "\n", "      ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "train_idx", ")", "\n", "for", "starti", "in", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "len", "(", "perm", ")", ",", "BATCH_SIZE", ")", ")", ":", "\n", "        ", "endi", "=", "starti", "+", "BATCH_SIZE", "\n", "if", "endi", ">", "len", "(", "perm", ")", ":", "\n", "          ", "continue", "\n", "#", "\n", "", "seed_nodes", "=", "perm", "[", "starti", ":", "endi", "]", "\n", "walk_forest", "=", "gttf", ".", "framework", ".", "traversals", ".", "np_traverse", "(", "cadj", ",", "seed_nodes", ",", "fanouts", "=", "FANOUT", ")", "\n", "sampled_adj", "=", "gttf", ".", "framework", ".", "accumulation", ".", "SampledAdjacency", ".", "from_walk_forest", "(", "walk_forest", ",", "A", ".", "shape", ")", "\n", "batch_a", "=", "sampled_adj", ".", "tf_trimmed", "\n", "batch_a", ",", "normalizer", "=", "gttf", ".", "utils", ".", "tf_utils", ".", "kipf_renorm_tf", "(", "batch_a", ",", "return_normalizer", "=", "True", ")", "\n", "batch_inv_degrees", "=", "normalizer", "*", "normalizer", "\n", "batch_x", "=", "sampled_adj", ".", "tf_trim_x", "(", "tf_x", ")", "\n", "batch_x_y", "=", "sampled_adj", ".", "tf_trim_x", "(", "tf_trainy", ")", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "          ", "if", "FLAGS", ".", "y_dropout", ":", "\n", "            ", "dropped_out_y", "=", "batch_x_y", "*", "tf", ".", "cast", "(", "tf", ".", "random", ".", "uniform", "(", "[", "batch_x_y", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "minval", "=", "0", ",", "maxval", "=", "2", ",", "dtype", "=", "tf", ".", "dtypes", ".", "int32", ")", ",", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "dropped_out_y", "=", "batch_x_y", "\n", "", "h", "=", "net", "(", "batch_a", ",", "batch_x", ",", "dropped_out_y", ",", "batch_inv_degrees", ",", "dropout", "=", "DROPOUT", ")", "\n", "h_untrimmed", "=", "sampled_adj", ".", "tf_untrim_gather", "(", "h", ",", "seed_nodes", ")", "\n", "\n", "# Compute Loss.", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "gather", "(", "tf_trainy", ",", "seed_nodes", ")", ",", "\n", "logits", "=", "h_untrimmed", ",", "\n", ")", ")", "\n", "\n", "##", "\n", "if", "net_variables", "is", "None", ":", "\n", "            ", "net_variables", "=", "net", ".", "trainable_variables", "\n", "", "trainable_variables", "=", "net_variables", "\n", "\n", "reg_loss", "=", "[", "tf", ".", "reduce_sum", "(", "v", "**", "2", ")", "for", "v", "in", "trainable_variables", "]", "\n", "reg_loss", "=", "FLAGS", ".", "l2reg", "*", "tf", ".", "reduce_sum", "(", "reg_loss", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "+", "reg_loss", "\n", "\n", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "trainable_variables", ")", "\n", "grads_and_vars", "=", "zip", "(", "grads", ",", "trainable_variables", ")", "\n", "opt", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "eval_every", "==", "0", ":", "\n", "### EVAL", "\n", "        ", "if", "FLAGS", ".", "stochastic_eval", ":", "\n", "          ", "test_batch", "=", "np", ".", "random", ".", "choice", "(", "test_idx", ",", "10000", ")", "\n", "#test_batch = test_idx[:10000]", "\n", "seed_nodes", "=", "test_batch", "\n", "TEST_FANOUTS", "=", "[", "f", "*", "5", "for", "f", "in", "FANOUT", "]", "\n", "walk_forest", "=", "gttf", ".", "framework", ".", "traversals", ".", "np_traverse", "(", "cadj", ",", "seed_nodes", ",", "fanouts", "=", "TEST_FANOUTS", ")", "\n", "sampled_adj", "=", "gttf", ".", "framework", ".", "accumulation", ".", "SampledAdjacency", ".", "from_walk_forest", "(", "walk_forest", ",", "A", ".", "shape", ")", "\n", "batch_a", "=", "sampled_adj", ".", "tf_trimmed", "\n", "batch_a", ",", "normalizer", "=", "gttf", ".", "utils", ".", "tf_utils", ".", "kipf_renorm_tf", "(", "batch_a", ",", "return_normalizer", "=", "True", ")", "\n", "batch_inv_degrees", "=", "normalizer", "*", "normalizer", "\n", "batch_x", "=", "sampled_adj", ".", "tf_trim_x", "(", "tf_x", ")", "\n", "batch_x_y", "=", "sampled_adj", ".", "tf_trim_x", "(", "tf_trainy", ")", "\n", "\n", "scores", "=", "net", "(", "batch_a", ",", "batch_x", ",", "batch_x_y", ",", "batch_inv_degrees", ")", "\n", "scores", "=", "sampled_adj", ".", "tf_untrim_gather", "(", "scores", ",", "test_batch", ")", "\n", "test_idx_locations", "=", "sampled_adj", ".", "tf_untrim_gather", "(", "tf", ".", "range", "(", "batch_x_y", ".", "shape", "[", "0", "]", ")", ",", "test_batch", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "label_reuse", ")", ":", "\n", "            ", "updated_batch_x_y", "=", "tf", ".", "tensor_scatter_nd_add", "(", "\n", "batch_x_y", ",", "\n", "tf", ".", "expand_dims", "(", "test_idx_locations", ",", "1", ")", ",", "\n", "tf", ".", "nn", ".", "softmax", "(", "scores", "*", "10", ")", ")", "\n", "scores", "=", "net", "(", "batch_a", ",", "batch_x", ",", "updated_batch_x_y", ",", "batch_inv_degrees", ")", "\n", "scores", "=", "sampled_adj", ".", "tf_untrim_gather", "(", "scores", ",", "test_batch", ")", "\n", "\n", "# Test accuracy", "\n", "", "ypred", "=", "tf", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ytrue", "=", "tf", ".", "argmax", "(", "tf", ".", "gather", "(", "tf_ally", ",", "test_batch", ")", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "ypred", "==", "ytrue", ",", "tf", ".", "float32", ")", ")", "\n", "print", "(", "'test accuracy'", ",", "accuracy", ".", "numpy", "(", ")", ")", "\n", "all_accuracies", ".", "append", "(", "(", "i", ",", "float", "(", "accuracy", ".", "numpy", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "          ", "scores", "=", "net", "(", "tf_adj", ",", "tf_x", ",", "tf_trainy", ",", "inv_degrees", ")", "\n", "scores", "=", "tf", ".", "gather", "(", "scores", ",", "test_idx", ")", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "label_reuse", ")", ":", "\n", "#", "\n", "            ", "np_combined_y", "=", "tf_trainy", ".", "numpy", "(", ")", "\n", "np_combined_y", "[", "test_idx", "]", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", "*", "10", ")", ".", "numpy", "(", ")", "\n", "tf_combined_y", "=", "tf", ".", "convert_to_tensor", "(", "np_combined_y", ")", "\n", "scores", "=", "net", "(", "tf_adj", ",", "tf_x", ",", "tf_combined_y", ",", "inv_degrees", ")", "\n", "scores", "=", "tf", ".", "gather", "(", "scores", ",", "test_idx", ")", "\n", "\n", "\n", "# Test accuracy", "\n", "", "ypred", "=", "tf", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ytrue", "=", "tf", ".", "argmax", "(", "tf", ".", "gather", "(", "tf_ally", ",", "test_idx", ")", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "ypred", "==", "ytrue", ",", "tf", ".", "float32", ")", ")", "\n", "print", "(", "'test accuracy'", ",", "accuracy", ".", "numpy", "(", ")", ")", "\n", "all_accuracies", ".", "append", "(", "(", "i", ",", "float", "(", "accuracy", ".", "numpy", "(", ")", ")", ")", ")", "\n", "", "", "", "return", "all_accuracies", "\n", "\n", "\n", "", "FINETUNE_FN_DICT", "=", "{", "\n", "\"finetune_gttf\"", ":", "finetune_gttf", ",", "\n", "}", "\n", "\n", "with", "tf", ".", "device", "(", "FLAGS", ".", "finetune_device", ")", ":", "\n", "    ", "fn_name", "=", "TRAIN_LOOP", ".", "get", "(", "'f'", ")", "\n", "finetune_fn", "=", "FINETUNE_FN_DICT", "[", "fn_name", "]", "\n", "accuracy_curve", "=", "[", "(", "-", "1", ",", "svd_test_accuracy", ")", "]", "\n", "def", "run_epochs", "(", "num_epochs", ",", "learn_rate", ")", ":", "\n", "      ", "print", "(", "'\\n\\n####  Running %i epochs of %s at learning rate %g'", "%", "(", "num_epochs", ",", "fn_name", ",", "learn_rate", ")", ")", "\n", "opt", ".", "lr", ".", "assign", "(", "learn_rate", ")", "\n", "accuracy_curve", ".", "extend", "(", "finetune_fn", "(", "num_epochs", "=", "num_epochs", ",", "eval_every", "=", "1", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "ipython", ":", "\n", "      ", "import", "IPython", ";", "IPython", ".", "embed", "(", ")", "\n", "\n", "", "for", "num_epochs", ",", "learn_rate", "in", "TRAIN_LOOP", ".", "get", "(", "'curve'", ")", ":", "\n", "      ", "run_epochs", "(", "num_epochs", ",", "learn_rate", ")", "\n", "\n", "", "if", "FLAGS", ".", "train_loop", ".", "endswith", "(", "'.json'", ")", ":", "\n", "      ", "if", "not", "os", ".", "path", ".", "exists", "(", "'train_curves'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'train_curves'", ")", "\n", "", "outfile", "=", "os", ".", "path", ".", "join", "(", "'train_curves'", ",", "'%i_%s'", "%", "(", "int", "(", "time", ".", "time", "(", ")", ")", ",", "os", ".", "path", ".", "basename", "(", "FLAGS", ".", "train_loop", ")", ")", ")", "\n", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "{", "\n", "'curve'", ":", "accuracy_curve", ",", "\n", "'flags'", ":", "{", "k", ":", "getattr", "(", "FLAGS", ",", "k", ")", "for", "k", "in", "dir", "(", "FLAGS", ")", "}", ",", "\n", "}", ")", ")", "\n", "\n", "", "print", "(", "'wrote '", "+", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_asym": [[43, 47], ["tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather"], ["def", "score_asym", "(", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "  ", "batch_u", "=", "tf", ".", "gather", "(", "u", ",", "ids1", ")", "\n", "batch_v", "=", "tf", ".", "gather", "(", "v", ",", "ids2", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "batch_u", "*", "s", "*", "batch_v", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_sym": [[48, 50], ["run_snap_linkpred.score_asym", "run_snap_linkpred.score_asym"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_asym", "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_asym"], ["", "def", "score_sym", "(", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "  ", "return", "(", "score_asym", "(", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", "+", "score_asym", "(", "ids2", ",", "ids1", ",", "u", ",", "s", ",", "v", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.find_k_valid": [[52, 104], ["tf_fsvd.make_deepwalk_mat", "tf_fsvd.fsvd", "print", "time.time", "tf_fsvd.fsvd", "print", "print", "numpy.random.shuffle", "int", "numpy.concatenate", "numpy.random.randint", "scipy.sparse.csr_matrix", "run_snap_linkpred.score_sym", "run_snap_linkpred.score_sym", "numpy.concatenate", "numpy.concatenate", "sklearn.metrics.roc_auc_score", "max", "time.time", "numpy.max", "print", "len", "numpy.ones", "numpy.ones", "numpy.zeros", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.make_deepwalk_mat", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_sym", "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.score_sym"], ["", "def", "find_k_valid", "(", "all_train_edges", ",", "holdout", "=", "0.25", ")", ":", "\n", "\n", "  ", "while", "True", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "all_train_edges", ")", "\n", "\n", "num_train", "=", "int", "(", "holdout", "*", "len", "(", "all_train_edges", ")", ")", "\n", "train_edges", "=", "all_train_edges", "[", ":", "num_train", "]", "\n", "validate_edges", "=", "all_train_edges", "[", "num_train", ":", "]", "\n", "train_edges", "=", "np", ".", "concatenate", "(", "[", "train_edges", ",", "train_edges", "[", ":", ",", ":", ":", "-", "1", "]", "]", ")", "\n", "\n", "num_nodes", "=", "1", "+", "np", ".", "max", "(", "all_train_edges", ")", "\n", "validate_negs", "=", "np", ".", "random", ".", "randint", "(", "size", "=", "[", "validate_edges", ".", "shape", "[", "0", "]", "*", "5", ",", "2", "]", ",", "low", "=", "0", ",", "high", "=", "num_nodes", ")", "\n", "\n", "A", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "\n", "(", "np", ".", "ones", "(", "[", "len", "(", "train_edges", ")", "]", ",", "dtype", "=", "'float32'", ")", ",", "(", "train_edges", "[", ":", ",", "0", "]", ",", "train_edges", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "if", "A", ".", "shape", "!=", "(", "num_nodes", ",", "num_nodes", ")", ":", "\n", "      ", "print", "(", "'did not capture all nodes. Retrying...'", ")", "\n", "", "else", ":", "\n", "      ", "break", "\n", "\n", "\n", "", "", "RANK", "=", "256", "\n", "\n", "mult_f", "=", "tf_fsvd", ".", "make_deepwalk_mat", "(", "A", ",", "FLAGS", ".", "window", ",", "mult_degrees", "=", "FLAGS", ".", "mult_degrees", ",", "neg_sample_coef", "=", "FLAGS", ".", "neg_coef", ")", "\n", "\n", "_", "=", "tf_fsvd", ".", "fsvd", "(", "mult_f", ",", "2", ",", "n_iter", "=", "1", ")", "# Warm-up GPU", "\n", "print", "(", "'FINDING RANK'", ")", "\n", "started", "=", "time", ".", "time", "(", ")", "\n", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "mult_f", ",", "RANK", ",", "n_iter", "=", "20", ",", "renorm", "=", "FLAGS", ".", "renorm", ")", "\n", "\n", "import", "sklearn", ".", "metrics", "\n", "max_auc_k", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "#TRY_RANKS = range(5, RANK+1, 5)", "\n", "TRY_RANKS", "=", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "for", "k", "in", "TRY_RANKS", ":", "\n", "    ", "pos_scores", "=", "score_sym", "(", "validate_edges", "[", ":", ",", "0", "]", ",", "validate_edges", "[", ":", ",", "1", "]", ",", "u", "[", ":", ",", ":", "k", "]", ",", "s", "[", ":", "k", "]", ",", "v", "[", ":", ",", ":", "k", "]", ")", "\n", "neg_scores", "=", "score_sym", "(", "validate_negs", "[", ":", ",", "0", "]", ",", "validate_negs", "[", ":", ",", "1", "]", ",", "u", "[", ":", ",", ":", "k", "]", ",", "s", "[", ":", "k", "]", ",", "v", "[", ":", ",", ":", "k", "]", ")", "\n", "\n", "all_score", "=", "np", ".", "concatenate", "(", "[", "pos_scores", ",", "neg_scores", "]", ",", "0", ")", "\n", "all_y", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "ones", "(", "[", "len", "(", "pos_scores", ")", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "zeros", "(", "[", "len", "(", "neg_scores", ")", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ",", "0", ")", "\n", "\n", "auc", "=", "sklearn", ".", "metrics", ".", "roc_auc_score", "(", "all_y", ",", "all_score", ")", "\n", "max_auc_k", "=", "max", "(", "max_auc_k", ",", "(", "auc", ",", "k", ")", ")", "\n", "\n", "", "best_k", "=", "max_auc_k", "[", "-", "1", "]", "\n", "print", "(", "'best k at %i'", "%", "best_k", ")", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "started", "\n", "print", "(", "'  ... done FINDING RANK'", ")", "\n", "return", "best_k", ",", "train_time", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_snap_linkpred.main": [[106, 156], ["os.path.join", "numpy.load", "numpy.concatenate", "scipy.sparse.csr_matrix", "tf_fsvd.make_deepwalk_mat", "tf_fsvd.fsvd", "print", "time.time", "tf_fsvd.fsvd", "print", "print", "numpy.load", "numpy.load", "run_snap_linkpred.main.eval_metric"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.make_deepwalk_mat", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "FLAGS", ".", "datasets_dir", ")", ",", "FLAGS", ".", "dataset_name", ")", "\n", "\n", "train_edges", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'train.txt.npy'", ")", ")", "\n", "train_edges", "=", "np", ".", "concatenate", "(", "[", "train_edges", ",", "train_edges", "[", ":", ",", ":", ":", "-", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "if", "FLAGS", ".", "dim", "<=", "0", ":", "\n", "    ", "rank", ",", "runtime", "=", "find_k_valid", "(", "train_edges", ",", "0.4", ")", "\n", "", "else", ":", "\n", "    ", "rank", ",", "runtime", "=", "FLAGS", ".", "dim", ",", "0", "\n", "\n", "", "num_nodes", "=", "1", "+", "np", ".", "max", "(", "train_edges", ")", "\n", "A", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "\n", "(", "np", ".", "ones", "(", "[", "len", "(", "train_edges", ")", "]", ",", "dtype", "=", "'float32'", ")", ",", "(", "train_edges", "[", ":", ",", "0", "]", ",", "train_edges", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "mult_f", "=", "tf_fsvd", ".", "make_deepwalk_mat", "(", "A", ",", "FLAGS", ".", "window", ",", "mult_degrees", "=", "FLAGS", ".", "mult_degrees", ",", "neg_sample_coef", "=", "FLAGS", ".", "neg_coef", ")", "\n", "\n", "_", "=", "tf_fsvd", ".", "fsvd", "(", "mult_f", ",", "2", ",", "n_iter", "=", "1", ")", "# Warm-up GPU", "\n", "print", "(", "'training'", ")", "\n", "started", "=", "time", ".", "time", "(", ")", "\n", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "mult_f", ",", "rank", ",", "n_iter", "=", "10", ",", "renorm", "=", "FLAGS", ".", "renorm", ")", "\n", "train_time", "=", "time", ".", "time", "(", ")", "-", "started", "\n", "print", "(", "'  ... done training'", ")", "\n", "\n", "print", "(", "'testing'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'out'", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "'out'", ")", "\n", "\n", "\n", "", "test_edges", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'test.txt.npy'", ")", ")", "\n", "test_neg_edges", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'test.neg.txt.npy'", ")", ")", "\n", "\n", "def", "eval_metric", "(", ")", ":", "\n", "    ", "pos_scores", "=", "score_sym", "(", "test_edges", "[", ":", ",", "0", "]", ",", "test_edges", "[", ":", ",", "1", "]", ",", "u", ",", "s", ",", "v", ")", "\n", "neg_scores", "=", "score_sym", "(", "test_neg_edges", "[", ":", ",", "0", "]", ",", "test_neg_edges", "[", ":", ",", "1", "]", ",", "u", ",", "s", ",", "v", ")", "\n", "import", "sklearn", ".", "metrics", "\n", "all_score", "=", "np", ".", "concatenate", "(", "[", "pos_scores", ",", "neg_scores", "]", ",", "0", ")", "\n", "all_y", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "ones", "(", "[", "len", "(", "pos_scores", ")", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "zeros", "(", "[", "len", "(", "neg_scores", ")", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ",", "0", ")", "\n", "\n", "return", "{", "\n", "'auc'", ":", "sklearn", ".", "metrics", ".", "roc_auc_score", "(", "all_y", ",", "all_score", ")", ",", "\n", "}", "\n", "\n", "", "eval_results", "=", "eval_metric", "(", ")", "\n", "eval_results", "[", "'time'", "]", "=", "train_time", "+", "runtime", "\n", "print", "(", "json", ".", "dumps", "(", "eval_results", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.dot": [[28, 31], ["NotImplementedError"], "methods", ["None"], ["def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "'dot: must be able to multiply (implicit) matrix by another matrix `m`.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.T": [[32, 36], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "'T: must return instance of SymbolicPF that is transpose of this one.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.shape": [[37, 41], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "'shape: must return shape of implicit matrix.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__add__": [[42, 46], ["tf_fsvd.SumPF", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "other", ",", "SymbolicPF", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'Expected type ProductPF but instead received %s. Did you mean to wrap with leaf(.)?'", "%", "other", ".", "__class__", ".", "__name__", ")", "\n", "", "return", "SumPF", "(", "[", "self", ",", "other", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__matmul__": [[47, 51], ["tf_fsvd.ProductPF", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__matmul__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "other", ",", "SymbolicPF", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'Expected type ProductPF but instead received %s. Did you mean to wrap with leaf(.)?'", "%", "other", ".", "__class__", ".", "__name__", ")", "\n", "", "return", "ProductPF", "(", "[", "self", ",", "other", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__sub__": [[52, 56], ["tf_fsvd.SumPF", "isinstance", "TypeError", "tf_fsvd.TimesScalarPF"], "methods", ["None"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "other", ",", "SymbolicPF", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'Expected type ProductPF but instead received %s. Did you mean to wrap with leaf(.)?'", "%", "other", ".", "__class__", ".", "__name__", ")", "\n", "", "return", "SumPF", "(", "[", "self", ",", "TimesScalarPF", "(", "-", "1", ",", "other", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__mul__": [[57, 61], ["tf_fsvd.TimesScalarPF", "numpy.isscalar", "TypeError"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "scalar", ")", ":", "\n", "    ", "if", "not", "np", ".", "isscalar", "(", "scalar", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'Can only multiply with scalars. For matrices, use @. For automatic broadcasting, please consider extending framework'", ")", "\n", "", "return", "TimesScalarPF", "(", "scalar", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__rmul__": [[62, 66], ["tf_fsvd.TimesScalarPF", "numpy.isscalar", "TypeError"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "scalar", ")", ":", "\n", "    ", "if", "not", "np", ".", "isscalar", "(", "scalar", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'Can only multiply with scalars. For matrices, use @. For automatic broadcasting, please consider extending framework'", ")", "\n", "", "return", "TimesScalarPF", "(", "scalar", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__pow__": [[67, 71], ["tf_fsvd.ProductPF", "isinstance", "print", "int"], "methods", ["None"], ["", "def", "__pow__", "(", "self", ",", "integer", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "integer", ",", "int", ")", ":", "\n", "      ", "print", "(", "'WARNING: power must be integer. Converting to int() on your behalf'", ")", "\n", "", "return", "ProductPF", "(", "[", "self", "]", "*", "int", "(", "integer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SymbolicPF.__repr__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"Symbolic (type %s) of shape %s\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherRowsPF.__init__": [[182, 186], ["numpy.array"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "pf", ",", "rows", ",", "T", "=", "None", ")", ":", "\n", "    ", "self", ".", "pf", "=", "pf", "\n", "self", ".", "rows", "=", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int32'", ")", "\n", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherRowsPF.dot": [[187, 189], ["tensorflow.gather", "tf_fsvd.GatherRowsPF.pf.dot"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "gather", "(", "self", ".", "pf", ".", "dot", "(", "m", ",", "cache", ")", ",", "self", ".", "rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherRowsPF.T": [[190, 195], ["tf_fsvd.GatherColumnsPF"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "GatherColumnsPF", "(", "self", ".", "pf", ".", "T", ",", "self", ".", "rows", ",", "T", "=", "self", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherRowsPF.shape": [[196, 199], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "(", "len", "(", "self", ".", "rows", ")", ",", "self", ".", "pf", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherColumnsPF.__init__": [[203, 207], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "pf", ",", "cols", ",", "T", "=", "None", ")", ":", "\n", "    ", "self", ".", "cols", "=", "cols", "\n", "self", ".", "pf", "=", "pf", "\n", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherColumnsPF.dot": [[208, 213], ["tensorflow.tensor_scatter_nd_add", "tf_fsvd.GatherColumnsPF.pf.dot", "tensorflow.zeros", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "m_padded", "=", "tf", ".", "tensor_scatter_nd_add", "(", "\n", "tf", ".", "zeros", "(", "(", "self", ".", "pf", ".", "shape", "[", "1", "]", ",", "m", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "m", ".", "dtype", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "cols", "]", ")", ".", "T", ",", "m", ")", "\n", "return", "self", ".", "pf", ".", "dot", "(", "m_padded", ",", "cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherColumnsPF.T": [[215, 220], ["tf_fsvd.GatherRowsPF"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "GatherRowsPF", "(", "self", ".", "pf", ".", "T", ",", "self", ".", "cols", ",", "T", "=", "self", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GatherColumnsPF.shape": [[221, 224], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "(", "self", ".", "pf", ".", "shape", "[", "0", "]", ",", "len", "(", "self", ".", "cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GeoSumPF.__init__": [[229, 234], ["len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "pf", ",", "coefs", ",", "T", "=", "None", ")", ":", "\n", "    ", "self", ".", "pf", "=", "pf", "\n", "self", ".", "coefs", "=", "coefs", "\n", "assert", "len", "(", "self", ".", "coefs", ")", ">", "0", "\n", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GeoSumPF.dot": [[235, 242], ["range", "len", "tf_fsvd.GeoSumPF.pf.dot", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "mat", ",", "cache", "=", "None", ")", ":", "\n", "    ", "power", "=", "mat", "\n", "geo_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "coefs", ")", ")", ":", "\n", "      ", "power", "=", "self", ".", "pf", ".", "dot", "(", "mat", ",", "cache", ")", "\n", "geo_sum", "+=", "tf", ".", "reduce_sum", "(", "self", ".", "coefs", "[", "i", ":", "]", ")", "*", "power", "\n", "", "return", "geo_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GeoSumPF.shape": [[243, 246], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "pf", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.GeoSumPF.T": [[247, 252], ["tf_fsvd.GeoSumPF"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "GeoSumPF", "(", "self", ".", "pf", ".", "T", ",", "self", ".", "coefs", ",", "T", "=", "self", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SparseMatrixPF.__init__": [[263, 291], ["super().__init__", "ValueError", "csr_mat.nonzero", "tensorflow.sparse.SparseTensor", "numpy.array", "tensorflow.stack", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.__init__"], ["def", "__init__", "(", "self", ",", "csr_mat", "=", "None", ",", "precomputed_tfs", "=", "None", ",", "T", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs matrix from csr_mat (or alternatively, tf.sparse.tensor).\n\n    Args:\n      csr_mat: instance of scipy.sparse.csr_mat (or any other sparse matrix\n        class). This matrix will only be read once and converted to\n        tf.sparse.SparseTensor.\n      precomputed_tfs: (optional) matrix (2D) instance of tf.sparse.SparseTensor.\n        if not given, will be initialized from `csr_mat`.\n      T: (do not provide) if given, must be instance of SymbolicPF with implicit\n        matrix as the transpose of this one. If not provided (recommended) it\n        will be automatically (lazily) computed.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "precomputed_tfs", "is", "None", "and", "csr_mat", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Require at least one of csr_mat or precomputed_tfs'", ")", "\n", "", "if", "precomputed_tfs", "is", "None", ":", "\n", "      ", "rows", ",", "cols", "=", "csr_mat", ".", "nonzero", "(", ")", "\n", "values", "=", "np", ".", "array", "(", "csr_mat", "[", "rows", ",", "cols", "]", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", "\n", "precomputed_tfs", "=", "tf", ".", "sparse", ".", "SparseTensor", "(", "\n", "tf", ".", "stack", "(", "[", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int64'", ")", ",", "np", ".", "array", "(", "cols", ",", "dtype", "=", "'int64'", ")", "]", ",", "axis", "=", "1", ")", ",", "\n", "values", ",", "\n", "csr_mat", ".", "shape", ")", "\n", "\n", "", "self", ".", "_shape", "=", "precomputed_tfs", ".", "shape", "\n", "self", ".", "csr_mat", "=", "csr_mat", "\n", "self", ".", "tfs", "=", "precomputed_tfs", "# tensorflow sparse tensor.", "\n", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SparseMatrixPF.dot": [[292, 294], ["tensorflow.sparse.sparse_dense_matmul"], "methods", ["None"], ["", "def", "dot", "(", "self", ",", "v", ",", "cache", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "self", ".", "tfs", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SparseMatrixPF.T": [[295, 305], ["tf_fsvd.SparseMatrixPF", "tensorflow.sparse.transpose"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns SymbolicPF with implicit matrix being transpose of this one.\"\"\"", "\n", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "SparseMatrixPF", "(", "\n", "self", ".", "csr_mat", ".", "T", "if", "self", ".", "csr_mat", "is", "not", "None", "else", "None", ",", "\n", "precomputed_tfs", "=", "tf", ".", "sparse", ".", "transpose", "(", "self", ".", "tfs", ")", ",", "\n", "T", "=", "self", ")", "\n", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SparseMatrixPF.shape": [[306, 309], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.BlockWisePF.__init__": [[321, 334], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fns", ",", "T", "=", "None", ",", "concat_axis", "=", "1", ")", ":", "\n", "    ", "\"\"\"Concatenate (implicit) matrices stored in `fns`, column-wise.\n\n    Args:\n      fns: list. Each entry must be an instance of class implementing SymbolicPF.\n      T: (do not provide) if given, must be instance of SymbolicPF with implicit\n        matrix as the transpose of this one. If not provided (recommended) it\n        will be automatically (lazily) computed.\n      concat_axis: fixed to 1 (i.e. concatenates column-wise).\n    \"\"\"", "\n", "self", ".", "fns", "=", "fns", "\n", "self", ".", "_t", "=", "T", "\n", "self", ".", "concat_axis", "=", "concat_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.BlockWisePF.shape": [[335, 345], ["numpy.sum", "tuple"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "size_other_axis", "=", "self", ".", "fns", "[", "0", "]", ".", "shape", "[", "1", "-", "self", ".", "concat_axis", "]", "\n", "for", "fn", "in", "self", ".", "fns", "[", "1", ":", "]", ":", "\n", "      ", "assert", "fn", ".", "shape", "[", "1", "-", "self", ".", "concat_axis", "]", "==", "size_other_axis", "\n", "", "total", "=", "np", ".", "sum", "(", "[", "fn", ".", "shape", "[", "self", ".", "concat_axis", "]", "for", "fn", "in", "self", ".", "fns", "]", ")", "\n", "myshape", "=", "[", "0", ",", "0", "]", "\n", "myshape", "[", "self", ".", "concat_axis", "]", "=", "total", "\n", "myshape", "[", "1", "-", "self", ".", "concat_axis", "]", "=", "size_other_axis", "\n", "return", "tuple", "(", "myshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.BlockWisePF.dot": [[346, 359], ["tensorflow.concat", "tensorflow.reduce_sum", "fn.dot", "dots.append", "fn.dot"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "v", ",", "cache", "=", "None", ")", ":", "\n", "    ", "assert", "self", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "concat_axis", "==", "0", ":", "\n", "      ", "dots", "=", "[", "fn", ".", "dot", "(", "v", ",", "cache", ")", "for", "fn", "in", "self", ".", "fns", "]", "\n", "return", "tf", ".", "concat", "(", "dots", ",", "axis", "=", "self", ".", "concat_axis", ")", "\n", "", "else", ":", "\n", "      ", "dots", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "fn", "in", "self", ".", "fns", ":", "\n", "        ", "fn_columns", "=", "fn", ".", "shape", "[", "1", "]", "\n", "dots", ".", "append", "(", "fn", ".", "dot", "(", "v", "[", "offset", ":", "offset", "+", "fn_columns", "]", ")", ")", "\n", "offset", "+=", "fn_columns", "\n", "", "return", "tf", ".", "reduce_sum", "(", "dots", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.BlockWisePF.T": [[360, 367], ["tf_fsvd.BlockWisePF"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns SymbolicPF with implicit matrix being transpose of this one.\"\"\"", "\n", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "fns_T", "=", "[", "fn", ".", "T", "for", "fn", "in", "self", ".", "fns", "]", "\n", "self", ".", "_t", "=", "BlockWisePF", "(", "fns_T", ",", "T", "=", "self", ",", "concat_axis", "=", "1", "-", "self", ".", "concat_axis", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DenseMatrixPF.__init__": [[378, 389], ["tensorflow.convert_to_tensor", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "m", ",", "T", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      m: tf.Tensor (dense 2d matrix). This will be the \"implicit\" matrix.\n      T: (do not provide) if given, must be instance of SymbolicPF with implicit\n        matrix as the transpose of this one. If not provided (recommended) it\n        will be automatically (lazily) computed.\n    \"\"\"", "\n", "assert", "len", "(", "m", ".", "shape", ")", "==", "2", "\n", "self", ".", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DenseMatrixPF.dot": [[390, 392], ["tensorflow.matmul"], "methods", ["None"], ["", "def", "dot", "(", "self", ",", "v", ",", "cache", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "matmul", "(", "self", ".", "m", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DenseMatrixPF.shape": [[393, 396], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "m", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DenseMatrixPF.T": [[397, 403], ["tf_fsvd.DenseMatrixPF", "tensorflow.transpose"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns SymbolicPF with implicit matrix being transpose of this one.\"\"\"", "\n", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "DenseMatrixPF", "(", "tf", ".", "transpose", "(", "self", ".", "m", ")", ",", "T", "=", "self", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SumPF.__init__": [[407, 412], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "pfs", ",", "T", "=", "None", ")", ":", "\n", "    ", "self", ".", "pfs", "=", "pfs", "\n", "for", "pf", "in", "pfs", ":", "\n", "      ", "assert", "pf", ".", "shape", "==", "pfs", "[", "0", "]", ".", "shape", "\n", "", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SumPF.dot": [[413, 418], ["tf_fsvd.SumPF.pfs[].dot", "pf.dot"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "sum_", "=", "self", ".", "pfs", "[", "0", "]", ".", "dot", "(", "m", ",", "cache", ")", "\n", "for", "pf", "in", "self", ".", "pfs", "[", "1", ":", "]", ":", "\n", "      ", "sum_", "+=", "pf", ".", "dot", "(", "m", ",", "cache", ")", "\n", "", "return", "sum_", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SumPF.T": [[419, 426], ["tf_fsvd.SumPF"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_t", ":", "\n", "      ", "return", "self", ".", "_t", "\n", "\n", "", "self", ".", "_t", "=", "SumPF", "(", "[", "pf", ".", "T", "for", "pf", "in", "self", ".", "pfs", "]", ",", "T", "=", "self", ")", "\n", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.SumPF.shape": [[427, 430], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "pfs", "[", "0", "]", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.TimesScalarPF.__init__": [[434, 437], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "scalar", ",", "pf", ")", ":", "\n", "    ", "self", ".", "scalar", "=", "scalar", "\n", "self", ".", "pf", "=", "pf", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.TimesScalarPF.dot": [[438, 440], ["tf_fsvd.TimesScalarPF.pf.dot"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "pf", ".", "dot", "(", "m", ",", "cache", ")", "*", "self", ".", "scalar", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.TimesScalarPF.shape": [[441, 444], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "pf", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.TimesScalarPF.T": [[445, 448], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.ProductPF.__init__": [[451, 456], ["range", "len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "pfs", ",", "T", "=", "None", ")", ":", "\n", "    ", "self", ".", "pfs", "=", "pfs", "\n", "for", "i", "in", "range", "(", "len", "(", "pfs", ")", "-", "1", ")", ":", "\n", "      ", "assert", "pfs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "pfs", "[", "i", "+", "1", "]", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "_t", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.ProductPF.shape": [[457, 460], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "return", "(", "self", ".", "pfs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "pfs", "[", "-", "1", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.ProductPF.T": [[461, 466], ["tf_fsvd.ProductPF", "reversed"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_t", "is", "None", ":", "\n", "      ", "self", ".", "_t", "=", "ProductPF", "(", "[", "pf", ".", "T", "for", "pf", "in", "reversed", "(", "self", ".", "pfs", ")", "]", ",", "T", "=", "self", ")", "\n", "", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.ProductPF.dot": [[467, 480], ["enumerate", "reversed", "tuple", "pf.dot", "pf.dot"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "product", "=", "m", "\n", "for", "i", ",", "pf", "in", "enumerate", "(", "reversed", "(", "self", ".", "pfs", ")", ")", ":", "\n", "      ", "if", "cache", "is", "not", "None", ":", "\n", "        ", "cache_key", "=", "tuple", "(", "self", ".", "pfs", "[", "-", "(", "i", "+", "1", ")", ":", "]", "+", "[", "m", ".", "_id", "]", ")", "\n", "if", "cache_key", "in", "cache", ":", "\n", "          ", "product", "=", "cache", "[", "cache_key", "]", "\n", "", "else", ":", "\n", "          ", "product", "=", "pf", ".", "dot", "(", "product", ",", "cache", ")", "\n", "cache", "[", "cache_key", "]", "=", "product", "\n", "", "", "else", ":", "\n", "        ", "product", "=", "pf", ".", "dot", "(", "product", ",", "cache", ")", "\n", "", "", "return", "product", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.__init__": [[484, 487], ["tensorflow.expand_dims", "len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "diagonal_vector", ")", ":", "\n", "    ", "assert", "len", "(", "diagonal_vector", ".", "shape", ")", "==", "1", "\n", "self", ".", "_colvec", "=", "tf", ".", "expand_dims", "(", "diagonal_vector", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.shape": [[488, 492], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "    ", "dim", "=", "self", ".", "_colvec", ".", "shape", "[", "0", "]", "\n", "return", "(", "dim", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.T": [[493, 496], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "T", "(", "self", ")", ":", "\n", "    ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot": [[497, 499], ["None"], "methods", ["None"], ["", "def", "dot", "(", "self", ",", "m", ",", "cache", "=", "None", ")", ":", "\n", "    ", "return", "m", "*", "self", ".", "_colvec", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd": [[80, 144], ["tensorflow.random.normal", "range", "tf_fsvd._orthonormalize", "tensorflow.transpose", "tensorflow.linalg.svd", "tensorflow.matmul", "tf_fsvd._sign_correction", "min", "tqdm.tqdm", "print", "print", "fn.dot", "fn.T.dot", "fn.dot", "fn.T.dot", "fn.dot", "fn.T.dot", "tf_fsvd._orthonormalize", "tf_fsvd._orthonormalize", "tf_fsvd._orthonormalize", "tf_fsvd._orthonormalize", "str", "numpy.linalg.matrix_rank", "fn.T.dot.numpy"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._sign_correction", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize"], ["", "", "def", "fsvd", "(", "fn", ",", "k", ",", "n_redundancy", "=", "None", ",", "n_iter", "=", "10", ",", "renorm", "=", "'qr'", ",", "verbose", "=", "None", ")", ":", "\n", "  ", "\"\"\"Functional TF Randomized SVD based on Halko et al 2009\n\n  Args:\n    fn: Instance of a class implementing SymbolicPF. Should hold implicit matrix\n      `M` with (arbitrary) shape. Then, it must be that `fn.shape == (r, c)`,\n      and `fn.dot(M1)` where `M1` has shape `(c, s)` must return `M @ M1` with\n      shape `(r, s)`. Further, `fn.T.dot(M2)` where M2 has shape `(r, h)` must\n      return `M @ M2` with shape `(c, h)`.\n    k: rank of decomposition. Returns (approximate) top-k singular values in S\n      and their corresponding left- and right- singular vectors in U, V, such\n      that, `tf.matmul(U * S, V, transpose_b=True)` is the best rank-k\n      approximation of matrix `M` (implicitly) stored in `fn`.\n    n_redundancy: rank of \"randomized\" decomposition of Halko. The analysis of\n      Halko provides that if n_redundancy == k, then the rank-k SVD approximation\n      is, in expectation, no worse (in frobenius norm) than twice of the \"true\"\n      rank-k SVD compared to the (implicit) matrix represented by fn.\n      However, n_redundancy == k is too slow when k is large. Default sets it\n      to min(k, 30).\n    n_iter: Number of iterations. >=4 gives good results (with 4 passes over the\n      data). We set to 10 (slower than 4) to ensure close approximation accuracy.\n      The error decays exponentially with n_iter.\n  Returns:\n    U, s, V, s.t. tf.matmul(U*s, V, transpose_b=True) is a rank-k approximation\n    of fn.\n  \"\"\"", "\n", "if", "n_redundancy", "is", "None", ":", "\n", "    ", "n_redundancy", "=", "min", "(", "k", ",", "30", ")", "\n", "", "n_random", "=", "k", "+", "n_redundancy", "\n", "n_samples", ",", "n_features", "=", "fn", ".", "shape", "\n", "transpose", "=", "n_samples", "<", "n_features", "\n", "if", "transpose", ":", "\n", "# This is faster", "\n", "    ", "fn", "=", "fn", ".", "T", "\n", "\n", "", "Q", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "(", "fn", ".", "shape", "[", "1", "]", ",", "n_random", ")", ")", "\n", "iterations", "=", "range", "(", "n_iter", ")", "\n", "if", "verbose", ":", "\n", "    ", "iterations", "=", "tqdm", ".", "tqdm", "(", "iterations", ",", "desc", "=", "'SVD'", ")", "\n", "print", "(", "'Starting with Q of shape %s and rank %i'", "%", "(", "\n", "str", "(", "Q", ".", "shape", ")", ",", "np", ".", "linalg", ".", "matrix_rank", "(", "Q", ".", "numpy", "(", ")", ")", "\n", ")", ")", "\n", "", "for", "i", "in", "iterations", ":", "\n", "    ", "if", "FLAGS", ".", "disable_svd_compute_cache", ":", "\n", "      ", "Q", "=", "fn", ".", "dot", "(", "_orthonormalize", "(", "Q", ",", "alg", "=", "renorm", ")", ")", "\n", "Q", "=", "fn", ".", "T", ".", "dot", "(", "_orthonormalize", "(", "Q", ",", "alg", "=", "renorm", ")", ")", "\n", "", "else", ":", "\n", "      ", "Q", "=", "fn", ".", "dot", "(", "_orthonormalize", "(", "Q", ",", "alg", "=", "renorm", ")", ",", "{", "}", ")", "\n", "Q", "=", "fn", ".", "T", ".", "dot", "(", "_orthonormalize", "(", "Q", ",", "alg", "=", "renorm", ")", ",", "{", "}", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "    ", "print", "(", "'SVD: Final step, followed by SVD on small rank matrix.'", ")", "\n", "", "Q", "=", "_orthonormalize", "(", "fn", ".", "dot", "(", "Q", ",", "{", "}", ")", ",", "alg", "=", "renorm", ")", "\n", "B", "=", "tf", ".", "transpose", "(", "fn", ".", "T", ".", "dot", "(", "Q", ",", "{", "}", ")", ")", "\n", "s", ",", "Uhat", ",", "V", "=", "tf", ".", "linalg", ".", "svd", "(", "B", ")", "\n", "del", "B", "\n", "U", "=", "tf", ".", "matmul", "(", "Q", ",", "Uhat", ")", "\n", "\n", "U", ",", "V", "=", "_sign_correction", "(", "u", "=", "U", ",", "v", "=", "V", ",", "u_based_decision", "=", "not", "transpose", ")", "\n", "\n", "if", "transpose", ":", "\n", "    ", "return", "V", "[", ":", ",", ":", "k", "]", ",", "s", "[", ":", "k", "]", ",", "U", "[", ":", ",", ":", "k", "]", "\n", "", "else", ":", "\n", "    ", "return", "U", "[", ":", ",", ":", "k", "]", ",", "s", "[", ":", "k", "]", ",", "V", "[", ":", ",", ":", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._orthonormalize": [[146, 164], ["tensorflow.linalg.qr", "tensorflow.math.l2_normalize", "tensorflow_probability.math.gram_schmidt", "tensorflow.math.l2_normalize", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.linalg.cholesky", "tensorflow.linalg.inv", "ValueError", "numpy.linalg.matrix_rank", "tf.matmul.numpy"], "function", ["None"], ["", "", "def", "_orthonormalize", "(", "Q", ",", "alg", "=", "'qr'", ")", ":", "\n", "  ", "if", "alg", "==", "'qr'", ":", "\n", "    ", "return", "tf", ".", "linalg", ".", "qr", "(", "Q", ")", "[", "0", "]", "\n", "", "elif", "alg", "==", "'l2'", ":", "\n", "    ", "return", "tf", ".", "math", ".", "l2_normalize", "(", "Q", ",", "axis", "=", "0", ")", "\n", "", "elif", "alg", "==", "'gs'", ":", "\n", "    ", "return", "tfp", ".", "math", ".", "gram_schmidt", "(", "Q", ")", "\n", "", "elif", "alg", "==", "'cholesky'", ":", "\n", "\n", "    ", "qn", "=", "tf", ".", "math", ".", "l2_normalize", "(", "Q", ",", "axis", "=", "0", ")", "# *10", "\n", "qnqn", "=", "tf", ".", "matmul", "(", "qn", ",", "qn", ",", "transpose_a", "=", "True", ")", "\n", "try", ":", "\n", "      ", "ch", "=", "tf", ".", "linalg", ".", "cholesky", "(", "qnqn", ")", "\n", "", "except", ":", "\n", "      ", "raise", "ValueError", "(", "'It seems that your matrix has an inherit rank of %i -- you may only do SVD of that rank including the redundancy parameter.'", "%", "\n", "np", ".", "linalg", ".", "matrix_rank", "(", "qnqn", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "return", "tf", ".", "matmul", "(", "qn", ",", "tf", ".", "linalg", ".", "inv", "(", "ch", ")", ",", "transpose_b", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd._sign_correction": [[166, 172], ["tensorflow.argmax", "tensorflow.sign", "tensorflow.abs", "tensorflow.gather_nd", "tensorflow.stack", "tensorflow.range"], "function", ["None"], ["", "", "def", "_sign_correction", "(", "u", ",", "v", ",", "u_based_decision", "=", "True", ")", ":", "\n", "    ", "M", "=", "u", "if", "u_based_decision", "else", "v", "\n", "max_abs_cols", "=", "tf", ".", "argmax", "(", "tf", ".", "abs", "(", "M", ")", ",", "axis", "=", "0", ")", "\n", "signs", "=", "tf", ".", "sign", "(", "tf", ".", "gather_nd", "(", "M", ",", "tf", ".", "stack", "(", "[", "max_abs_cols", ",", "tf", ".", "range", "(", "M", ".", "shape", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "]", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n", "return", "u", "*", "signs", ",", "v", "*", "signs", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.make_deepwalk_mat": [[502, 545], ["numpy.clip", "tf_fsvd.leaf", "tf_fsvd.sum", "tf_fsvd.leaf", "numpy.array", "numpy.sqrt", "scipy.sparse.diags", "scipy.sparse.diags", "scipy.sparse.diags.dot().dot", "scipy.sparse.diags", "scipy.sparse.diags", "scipy.sparse.diags.dot", "numpy.sum", "len", "tensorflow.ones", "csr_adj.sum", "numpy.arange", "tf_fsvd.DiagPF", "scipy.sparse.linalg.svds", "scipy.sparse.linalg.svds", "tf_fsvd.leaf", "scipy.sparse.diags.dot", "enumerate", "tf_fsvd.leaf", "tf_fsvd.leaf"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.clip", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf"], ["", "", "def", "make_deepwalk_mat", "(", "\n", "csr_adj", ",", "window", "=", "5", ",", "Q", "=", "None", ",", "mult_degrees", "=", "False", ",", "sym_normalization", "=", "True", ",", "\n", "neg_sample_coef", "=", "0.02", ",", "rank_negatives", "=", "0", ")", ":", "\n", "\n", "  ", "degrees", "=", "np", ".", "array", "(", "csr_adj", ".", "sum", "(", "axis", "=", "1", ")", ",", "dtype", "=", "'float32'", ")", "[", ":", ",", "0", "]", "\n", "degrees", "=", "np", ".", "clip", "(", "degrees", ",", "1", ",", "None", ")", "\n", "if", "sym_normalization", ":", "\n", "    ", "sqrt_degrees", "=", "np", ".", "sqrt", "(", "degrees", ")", "\n", "degrees", "=", "sqrt_degrees", "\n", "inv_sqrt_degrees", "=", "scipy", ".", "sparse", ".", "diags", "(", "1.0", "/", "sqrt_degrees", ")", "\n", "csr_normalized", "=", "inv_sqrt_degrees", ".", "dot", "(", "csr_adj", ")", ".", "dot", "(", "inv_sqrt_degrees", ")", "\n", "", "else", ":", "\n", "    ", "inv_degrees", "=", "scipy", ".", "sparse", ".", "diags", "(", "1.0", "/", "degrees", ")", "\n", "csr_normalized", "=", "inv_degrees", ".", "dot", "(", "csr_adj", ")", "\n", "\n", "", "tt", "=", "leaf", "(", "csr_normalized", ")", "\n", "\n", "if", "Q", "is", "None", ":", "\n", "# Default of deepwalk per WYS", "\n", "    ", "Q", "=", "window", "-", "np", ".", "arange", "(", "window", ",", "dtype", "=", "'float32'", ")", "\n", "Q", "/=", "np", ".", "sum", "(", "Q", ")", "\n", "", "else", ":", "\n", "    ", "window", "=", "len", "(", "Q", ")", "\n", "\n", "", "tm", "=", "sum", "(", "[", "q", "*", "tt", "**", "(", "j", "+", "1", ")", "for", "j", ",", "q", "in", "enumerate", "(", "Q", ")", "]", ")", "\n", "if", "mult_degrees", ":", "\n", "    ", "tm", "=", "tm", "@", "DiagPF", "(", "degrees", ")", "\n", "\n", "\n", "# Negatives.", "\n", "", "trow1", "=", "leaf", "(", "tf", ".", "ones", "(", "[", "1", ",", "csr_adj", ".", "shape", "[", "1", "]", "]", ")", ")", "\n", "if", "rank_negatives", "==", "1", ":", "\n", "    ", "tm", "=", "tm", "-", "trow1", ".", "T", "@", "trow1", "*", "neg_sample_coef", "\n", "", "elif", "rank_negatives", ":", "\n", "    ", "SVDA", "=", "scipy", ".", "sparse", ".", "linalg", ".", "svds", "(", "csr_adj", ",", "k", "=", "rank_negatives", ")", "\n", "SVDA_US", "=", "SVDA", "[", "0", "]", "*", "SVDA", "[", "1", "]", "\n", "SVDA_VS", "=", "SVDA", "[", "2", "]", ".", "T", "*", "SVDA", "[", "1", "]", "\n", "tm", "=", "tm", "-", "(", "trow1", ".", "T", "@", "trow1", "-", "leaf", "(", "SVDA_US", ")", "@", "leaf", "(", "SVDA_VS", ")", ".", "T", ")", "*", "neg_sample_coef", "\n", "", "else", ":", "# rank_negatives is 0 or None. Do full-rank negatives.", "\n", "    ", "ta", "=", "leaf", "(", "csr_adj", ")", "\n", "tm", "=", "tm", "-", "(", "trow1", ".", "T", "@", "trow1", "-", "ta", ")", "*", "neg_sample_coef", "\n", "\n", "", "return", "tm", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.leaf": [[547, 554], ["scipy.sparse.issparse", "scipy.sparse.issparse", "tf_fsvd.DenseMatrixPF", "tf_fsvd.SparseMatrixPF", "isinstance", "tf_fsvd.SparseMatrixPF"], "function", ["None"], ["", "def", "leaf", "(", "matrix", ")", ":", "\n", "  ", "if", "scipy", ".", "sparse", ".", "issparse", "(", "matrix", ")", ":", "\n", "    ", "return", "SparseMatrixPF", "(", "csr_mat", "=", "matrix", ")", "\n", "", "elif", "isinstance", "(", "matrix", ",", "tf", ".", "sparse", ".", "SparseTensor", ")", ":", "\n", "    ", "return", "SparseMatrixPF", "(", "precomputed_tfs", "=", "matrix", ")", "\n", "# Otherwise, assume dense", "\n", "", "return", "DenseMatrixPF", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum": [[556, 558], ["tf_fsvd.SumPF"], "function", ["None"], ["", "def", "sum", "(", "terms", ")", ":", "\n", "  ", "return", "SumPF", "(", "terms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather": [[560, 567], ["tf_fsvd.GatherRowsPF", "tf_fsvd.DenseMatrixPF", "tensorflow.gather"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather"], ["", "def", "gather", "(", "pf", ",", "indices", ",", "axis", "=", "0", ")", ":", "\n", "  ", "assert", "axis", "in", "(", "0", ",", "1", ")", "\n", "if", "axis", "==", "1", ":", "\n", "    ", "pf", "=", "pf", ".", "T", "\n", "", "if", "pf", ".", "__class__", "==", "DenseMatrixPF", ":", "\n", "    ", "return", "DenseMatrixPF", "(", "tf", ".", "gather", "(", "pf", ".", "m", ",", "indices", ")", ")", "\n", "", "return", "GatherRowsPF", "(", "pf", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.test_rsvdf": [[570, 586], ["sp.csr_matrix", "range", "tf_fsvd.fsvd", "numpy.all", "tf_fsvd.fsvd", "numpy.all", "print", "range", "tf_fsvd.SparseMatrixPF", "tf_fsvd.SparseMatrixPF", "numpy.abs", "numpy.abs", "sp.csr_matrix.todense", "tensorflow.matmul().numpy", "sp.csr_matrix.todense", "tensorflow.matmul().numpy", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd"], ["", "def", "test_rsvdf", "(", ")", ":", "\n", "  ", "import", "scipy", ".", "sparse", "as", "sp", "\n", "M", "=", "sp", ".", "csr_matrix", "(", "(", "50", ",", "100", ")", ")", "\n", "for", "i", "in", "range", "(", "M", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "M", ".", "shape", "[", "1", "]", ")", ":", "\n", "      ", "if", "(", "i", "+", "j", ")", "%", "2", "==", "0", ":", "\n", "        ", "M", "[", "i", ",", "j", "]", "=", "i", "+", "j", "\n", "\n", "", "", "", "u", ",", "s", ",", "v", "=", "fsvd", "(", "SparseMatrixPF", "(", "M", ")", ",", "4", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "abs", "(", "M", ".", "todense", "(", ")", "-", "tf", ".", "matmul", "(", "u", "*", "s", ",", "v", ",", "transpose_b", "=", "True", ")", ".", "numpy", "(", ")", ")", "<", "1e-3", ")", "\n", "\n", "M", "=", "M", ".", "T", "\n", "u", ",", "s", ",", "v", "=", "fsvd", "(", "SparseMatrixPF", "(", "M", ")", ",", "4", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "abs", "(", "M", ".", "todense", "(", ")", "-", "tf", ".", "matmul", "(", "u", "*", "s", ",", "v", ",", "transpose_b", "=", "True", ")", ".", "numpy", "(", ")", ")", "<", "1e-3", ")", "\n", "\n", "print", "(", "'Test passes.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.SingularValueModel.trainable_variables": [[38, 41], ["None"], "methods", ["None"], ["  ", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "    ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.SingularValueModel.clip": [[42, 44], ["None"], "methods", ["None"], ["", "def", "clip", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel.__init__": [[47, 52], ["tensorflow.Variable", "ogb_linkpred_sing_val_net.TrainableSModel.ts.assign", "tensorflow.Variable", "tensorflow.zeros_like", "tensorflow.math.log", "numpy.array"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "self", ".", "u", ",", "self", ".", "s", ",", "self", ".", "v", "=", "u", ",", "s", ",", "v", "\n", "self", ".", "ts", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "s", ")", ")", "\n", "self", ".", "ts", ".", "assign", "(", "tf", ".", "math", ".", "log", "(", "s", ")", ")", "\n", "self", ".", "tpow", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "1.0", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel.set_basis": [[53, 57], ["None"], "methods", ["None"], ["", "def", "set_basis", "(", "self", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "self", ".", "u", "=", "u", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_asym": [[58, 62], ["tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather"], ["", "def", "_score_asym", "(", "self", ",", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "batch_u", "=", "tf", ".", "gather", "(", "u", ",", "ids1", ")", "\n", "batch_v", "=", "tf", ".", "gather", "(", "v", ",", "ids2", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "batch_u", "*", "s", "*", "batch_v", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_sym": [[63, 65], ["ogb_linkpred_sing_val_net.TrainableSModel._score_asym", "ogb_linkpred_sing_val_net.TrainableSModel._score_asym"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_asym", "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_asym"], ["", "def", "_score_sym", "(", "self", ",", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "return", "(", "self", ".", "_score_asym", "(", "ids1", ",", "ids2", ",", "u", ",", "s", ",", "v", ")", "+", "self", ".", "_score_asym", "(", "ids2", ",", "ids1", ",", "u", ",", "s", ",", "v", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel.trainable_variables": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "ts", ",", "self", ".", "tpow", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel.score": [[70, 74], ["ogb_linkpred_sing_val_net.TrainableSModel._score_sym", "tensorflow.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_sym"], ["", "def", "score", "(", "self", ",", "ids1", ",", "ids2", ")", ":", "\n", "    ", "overflow", "=", "self", ".", "u", ".", "shape", "[", "0", "]", "\n", "softmax_s", "=", "overflow", "*", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "ts", ")", "**", "self", ".", "tpow", "\n", "return", "self", ".", "_score_sym", "(", "ids1", ",", "ids2", ",", "self", ".", "u", ",", "softmax_s", ",", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.__init__": [[79, 92], ["numpy.arange", "ogb_linkpred_sing_val_net.CvxPowSModel2.set_basis", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.set_basis"], ["  ", "def", "__init__", "(", "self", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "self", ".", "noop", "=", "False", "\n", "self", ".", "act_converged", "=", "False", "\n", "D", "=", "0.005", "\n", "self", ".", "pows", "=", "np", ".", "arange", "(", "0.5", ",", "2.0", "+", "D", ",", "D", ")", "\n", "self", ".", "set_basis", "(", "u", ",", "s", ",", "v", ")", "\n", "#self.M = tf.Variable(np.array(0.9, dtype='float32'))  # (volume) multiplier ", "\n", "self", ".", "M", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "1", ",", "dtype", "=", "'float32'", ")", ")", "# (volume) multiplier ", "\n", "self", ".", "b", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "0", ",", "dtype", "=", "'float32'", ")", ")", "# bias", "\n", "\n", "self", ".", "tpows", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "pows", ",", "dtype", "=", "'float32'", ")", ")", "\n", "self", ".", "center", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "1", ",", "dtype", "=", "'float32'", ")", ")", "\n", "self", ".", "logscale", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "5", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.set_basis": [[94, 102], ["ogb_linkpred_sing_val_net.TrainableSModel.set_basis", "tensorflow.stack", "ogb_linkpred_sing_val_net.CvxPowSModel2.s_pows.append"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.set_basis"], ["", "def", "set_basis", "(", "self", ",", "u", ",", "s", ",", "v", ")", ":", "\n", "    ", "super", "(", ")", ".", "set_basis", "(", "u", ",", "s", ",", "v", ")", "\n", "self", ".", "s_pows", "=", "[", "]", "\n", "for", "p", "in", "self", ".", "pows", ":", "\n", "      ", "s_pow", "=", "self", ".", "s", "**", "p", "\n", "self", ".", "s_pows", ".", "append", "(", "s_pow", ")", "\n", "\n", "", "self", ".", "stacked_pows", "=", "tf", ".", "stack", "(", "self", ".", "s_pows", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.trainable_variables": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "center", ",", "self", ".", "logscale", "]", "#, self.M] # ,self.b", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.score": [[108, 122], ["ogb_linkpred_sing_val_net.CvxPowSModel2._score_sym", "ogb_linkpred_sing_val_net.CvxPowSModel2._score_sym", "tensorflow.nn.softmax", "tensorflow.math.exp", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_sym", "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.TrainableSModel._score_sym"], ["", "def", "score", "(", "self", ",", "ids1", ",", "ids2", ")", ":", "\n", "    ", "equiv_s", "=", "self", ".", "s", "\n", "if", "self", ".", "act_converged", ":", "\n", "      ", "return", "self", ".", "_score_sym", "(", "ids1", ",", "ids2", ",", "self", ".", "u", ",", "self", ".", "s", "**", "self", ".", "center", ",", "self", ".", "v", ")", "\n", "\n", "", "if", "not", "self", ".", "noop", ":", "\n", "      ", "cvx_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "-", "(", "self", ".", "center", "-", "self", ".", "tpows", ")", "**", "2", "\n", "*", "tf", ".", "math", ".", "exp", "(", "self", ".", "logscale", ")", "\n", "#* self.logscale ** 2", "\n", ")", "\n", "cvx_sum_s", "=", "self", ".", "stacked_pows", "*", "cvx_weights", "\n", "cvx_sum_s", "=", "(", "self", ".", "M", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "cvx_sum_s", ",", "axis", "=", "1", ")", "+", "self", ".", "b", "\n", "equiv_s", "=", "cvx_sum_s", "\n", "", "return", "self", ".", "_score_sym", "(", "ids1", ",", "ids2", ",", "self", ".", "u", ",", "equiv_s", ",", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.clip": [[123, 126], ["ogb_linkpred_sing_val_net.CvxPowSModel2.logscale.assign", "ogb_linkpred_sing_val_net.CvxPowSModel2.center.assign", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "clip", "(", "self", ")", ":", "\n", "    ", "self", ".", "logscale", ".", "assign", "(", "tf", ".", "clip_by_value", "(", "self", ".", "logscale", ",", "0", ",", "20", ")", ")", "\n", "self", ".", "center", ".", "assign", "(", "tf", ".", "clip_by_value", "(", "self", ".", "center", ",", "self", ".", "pows", "[", "2", "]", ",", "self", ".", "pows", "[", "-", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.CvxPowSModel2.__str__": [[127, 133], ["str", "ogb_linkpred_sing_val_net.CvxPowSModel2.center.numpy", "numpy.exp", "ogb_linkpred_sing_val_net.CvxPowSModel2.b.numpy", "ogb_linkpred_sing_val_net.CvxPowSModel2.logscale.numpy", "ogb_linkpred_sing_val_net.CvxPowSModel2.M.numpy"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "str", "(", "'m=%g s=%g b=%g M=%g'", "%", "(", "self", ".", "center", ".", "numpy", "(", ")", ",", "\n", "np", ".", "exp", "(", "self", ".", "logscale", ".", "numpy", "(", ")", ")", ",", "\n", "#self.logscale.numpy()**2,", "\n", "self", ".", "b", ".", "numpy", "(", ")", ",", "\n", "self", ".", "M", ".", "numpy", "(", ")", "**", "2", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.ogb_linkpred_sing_val_net.main": [[136, 272], ["ogb.linkproppred.LinkPropPredDataset", "ogb.linkproppred.LinkPropPredDataset.get_edge_split", "ogb.linkproppred.LinkPropPredDataset", "ogb.linkproppred.Evaluator", "ogb_linkpred_sing_val_net.main.get_USV"], "function", ["None"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "ds", "=", "LinkPropPredDataset", "(", "FLAGS", ".", "dataset", ")", "\n", "split_edge", "=", "ds", ".", "get_edge_split", "(", ")", "\n", "\n", "dataset", "=", "LinkPropPredDataset", "(", "FLAGS", ".", "dataset", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "FLAGS", ".", "dataset", ")", "\n", "evaluator", ".", "K", "=", "FLAGS", ".", "hits", "\n", "\n", "train_edges", "=", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", "\n", "val_edges", "=", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", "\n", "num_nodes", "=", "train_edges", ".", "max", "(", ")", "+", "1", "\n", "def", "get_USV", "(", "train_edges", ")", ":", "\n", "    ", "train_edges", "=", "np", ".", "concatenate", "(", "[", "train_edges", ",", "train_edges", "[", ":", ",", ":", ":", "-", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "spa", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "(", "np", ".", "ones", "(", "[", "len", "(", "train_edges", ")", "]", ")", ",", "(", "train_edges", "[", ":", ",", "0", "]", ",", "train_edges", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "spa", "=", "(", "spa", ">", "0", ")", "*", "np", ".", "array", "(", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "window", "=", "FLAGS", ".", "wys_window", "\n", "mult_f", "=", "tf_fsvd", ".", "make_deepwalk_mat", "(", "spa", ",", "window", "=", "FLAGS", ".", "wys_window", ",", "neg_sample_coef", "=", "FLAGS", ".", "wys_neg_coef", ",", "sym_normalization", "=", "FLAGS", ".", "sym", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "mult_f", ",", "FLAGS", ".", "k", ",", "n_iter", "=", "FLAGS", ".", "svd_iters", ",", "n_redundancy", "=", "FLAGS", ".", "k", ",", "renorm", "=", "FLAGS", ".", "renorm", ",", "verbose", "=", "True", ")", "\n", "init_train_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "(", "u", ",", "s", ",", "v", ")", ",", "init_train_time", "\n", "\n", "", "(", "u", ",", "s", ",", "v", ")", ",", "init_train_time", "=", "get_USV", "(", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", ")", "\n", "\n", "train_edges", "=", "np", ".", "concatenate", "(", "[", "train_edges", ",", "train_edges", "[", ":", ",", ":", ":", "-", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "test_metrics", "=", "[", "]", "\n", "val_metrics", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "\n", "model", "=", "CvxPowSModel2", "(", "u", ",", "s", ",", "v", ")", "\n", "\n", "model", ".", "noop", "=", "True", "\n", "split_edge", "=", "dataset", ".", "get_edge_split", "(", ")", "\n", "\n", "def", "eval_metric", "(", "split", "=", "'test'", ")", ":", "\n", "    ", "pos_edges", "=", "split_edge", "[", "split", "]", "[", "'edge'", "]", "\n", "neg_edges", "=", "split_edge", "[", "split", "]", "[", "'edge_neg'", "]", "\n", "pos_scores", "=", "model", ".", "score", "(", "pos_edges", "[", ":", ",", "0", "]", ",", "pos_edges", "[", ":", ",", "1", "]", ")", ".", "numpy", "(", ")", "\n", "neg_scores", "=", "model", ".", "score", "(", "neg_edges", "[", ":", ",", "0", "]", ",", "neg_edges", "[", ":", ",", "1", "]", ")", ".", "numpy", "(", ")", "\n", "metric", "=", "evaluator", ".", "eval", "(", "{", "'y_pred_pos'", ":", "pos_scores", ",", "'y_pred_neg'", ":", "neg_scores", "}", ")", "\n", "return", "metric", "\n", "\n", "", "test_metrics", ".", "append", "(", "eval_metric", "(", ")", ")", "\n", "val_metrics", ".", "append", "(", "eval_metric", "(", "'valid'", ")", ")", "\n", "times", ".", "append", "(", "init_train_time", ")", "\n", "\n", "print", "(", "test_metrics", ")", "\n", "\n", "\n", "trainable_vars", "=", "model", ".", "trainable_variables", "\n", "if", "not", "trainable_vars", ":", "\n", "    ", "print", "(", "'Nothing to train. Results are final.'", ")", "\n", "return", "0", "\n", "#exit(0)", "\n", "", "model", ".", "noop", "=", "False", "\n", "####", "\n", "# START OF TEST CODE", "\n", "#np.savez('out/ddi_svd', u=u.numpy(), s=s.numpy(), v=v.numpy())", "\n", "#np.save('out/ddi_s', s.numpy())", "\n", "EPOCHS", "=", "FLAGS", ".", "epochs", "\n", "BATCH_SIZE", "=", "1000", "\n", "total_steps", "=", "0", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "FLAGS", ".", "lr", ")", "\n", "#opt = tf.keras.optimizers.SGD(FLAGS.lr)", "\n", "\n", "for", "i", "in", "range", "(", "EPOCHS", ")", ":", "\n", "    ", "edge_ids", "=", "np", ".", "random", ".", "permutation", "(", "train_edges", ".", "shape", "[", "0", "]", ")", "\n", "losses", "=", "[", "]", "\n", "tt", "=", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "len", "(", "edge_ids", ")", ",", "BATCH_SIZE", ")", ")", "\n", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "starti", "in", "tt", ":", "\n", "      ", "if", "FLAGS", ".", "early_stop_steps", ">", "0", "and", "total_steps", ">", "FLAGS", ".", "early_stop_steps", ":", "\n", "        ", "break", "\n", "", "total_steps", "+=", "1", "\n", "endi", "=", "starti", "+", "BATCH_SIZE", "\n", "if", "endi", ">", "len", "(", "edge_ids", ")", ":", "\n", "        ", "continue", "\n", "#", "\n", "", "indices", "=", "edge_ids", "[", "starti", ":", "endi", "]", "\n", "\n", "pos_edges", "=", "train_edges", "[", "indices", "]", "\n", "NEGK", "=", "10", "\n", "neg_edges", "=", "np", ".", "random", ".", "choice", "(", "num_nodes", ",", "size", "=", "(", "NEGK", "*", "pos_edges", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "# Fixed.", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "pos_scores", "=", "model", ".", "score", "(", "pos_edges", "[", ":", ",", "0", "]", ",", "pos_edges", "[", ":", ",", "1", "]", ")", "\n", "neg_scores", "=", "model", ".", "score", "(", "neg_edges", "[", ":", ",", "0", "]", ",", "neg_edges", "[", ":", ",", "1", "]", ")", "\n", "all_scores", "=", "tf", ".", "concat", "(", "[", "pos_scores", ",", "neg_scores", "]", ",", "axis", "=", "0", ")", "\n", "if", "FLAGS", ".", "hinge", ":", "\n", "#import IPython; IPython.embed()", "\n", "          ", "poss", "=", "tf", ".", "math", ".", "log_sigmoid", "(", "pos_scores", ")", "\n", "negs", "=", "tf", ".", "math", ".", "log_sigmoid", "(", "neg_scores", ")", "\n", "all_scores", "=", "tf", ".", "concat", "(", "[", "poss", ",", "negs", "]", ",", "axis", "=", "0", ")", "\n", "all_labels", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones_like", "(", "pos_scores", ")", ",", "tf", ".", "zeros_like", "(", "neg_scores", ")", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "hinge", "(", "y_true", "=", "all_labels", ",", "y_pred", "=", "all_scores", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "", "else", ":", "\n", "          ", "all_labels", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones_like", "(", "pos_scores", ")", ",", "tf", ".", "zeros_like", "(", "neg_scores", ")", "]", ",", "axis", "=", "0", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "all_labels", ",", "logits", "=", "all_scores", ")", ")", "\n", "#loss += 1e-4 * tf.reduce_sum([tf.reduce_sum(v**2) for v in trainable_vars])", "\n", "", "losses", ".", "append", "(", "loss", ".", "numpy", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "trainable_vars", ")", "\n", "opt", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "trainable_vars", ")", ")", "\n", "model", ".", "clip", "(", ")", "\n", "tt", ".", "set_description", "(", "str", "(", "model", ")", ")", "\n", "### EVAL", "\n", "", "epoch_train_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start_time", "\n", "test_metrics", ".", "append", "(", "eval_metric", "(", ")", ")", "\n", "val_metrics", ".", "append", "(", "eval_metric", "(", "'valid'", ")", ")", "\n", "times", ".", "append", "(", "epoch_train_time", "+", "times", "[", "-", "1", "]", ")", "\n", "print", "(", "'@%i] loss=%g ; eval=%s, model=%s'", "%", "(", "\n", "i", ",", "np", ".", "mean", "(", "losses", ")", ",", "str", "(", "test_metrics", "[", "-", "1", "]", ")", ",", "str", "(", "model", ")", ")", ")", "\n", "if", "FLAGS", ".", "early_stop_steps", ">", "0", "and", "total_steps", ">", "FLAGS", ".", "early_stop_steps", ":", "\n", "      ", "break", "\n", "\n", "# Compute", "\n", "", "", "model", ".", "act_converged", "=", "True", "\n", "\n", "# END OF TEST CODE", "\n", "####", "\n", "#", "\n", "\n", "if", "True", ":", "\n", "    ", "updated_usv", ",", "update_time", "=", "get_USV", "(", "np", ".", "concatenate", "(", "[", "train_edges", ",", "val_edges", "]", ",", "axis", "=", "0", ")", ")", "\n", "model", ".", "set_basis", "(", "*", "updated_usv", ")", "\n", "test_metrics", ".", "append", "(", "eval_metric", "(", ")", ")", "\n", "times", ".", "append", "(", "update_time", "+", "times", "[", "-", "1", "]", ")", "\n", "\n", "", "print", "(", "json", ".", "dumps", "(", "{", "'test'", ":", "test_metrics", ",", "'times'", ":", "times", "}", ")", ")", "\n", "\n", "if", "FLAGS", ".", "ipython", ":", "\n", "    ", "import", "IPython", ";", "IPython", ".", "embed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.concatenate_csr_matrices_by_rows": [[43, 56], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scipy.sparse.csr_matrix", "len"], "function", ["None"], ["def", "concatenate_csr_matrices_by_rows", "(", "matrix1", ",", "matrix2", ")", ":", "\n", "  ", "\"\"\"Concatenates sparse csr matrices matrix1 above matrix2.\n  \n  Adapted from:\n  https://stackoverflow.com/questions/6844998/is-there-an-efficient-way-of-concatenating-scipy-sparse-matrices\n  \"\"\"", "\n", "new_data", "=", "np", ".", "concatenate", "(", "(", "matrix1", ".", "data", ",", "matrix2", ".", "data", ")", ")", "\n", "new_indices", "=", "np", ".", "concatenate", "(", "(", "matrix1", ".", "indices", ",", "matrix2", ".", "indices", ")", ")", "\n", "new_ind_ptr", "=", "matrix2", ".", "indptr", "+", "len", "(", "matrix1", ".", "data", ")", "\n", "new_ind_ptr", "=", "new_ind_ptr", "[", "1", ":", "]", "\n", "new_ind_ptr", "=", "np", ".", "concatenate", "(", "(", "matrix1", ".", "indptr", ",", "new_ind_ptr", ")", ")", "\n", "\n", "return", "scipy", ".", "sparse", ".", "csr_matrix", "(", "(", "new_data", ",", "new_indices", ",", "new_ind_ptr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.load_x": [[59, 61], ["pickle.load", "open"], "function", ["None"], ["", "def", "load_x", "(", "filename", ")", ":", "\n", "  ", "return", "pickle", ".", "load", "(", "open", "(", "filename", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.read_planetoid_dataset": [[62, 120], ["os.path.expanduser", "pickle.load", "run_planetoid.load_x", "numpy.array", "run_planetoid.load_x", "list", "scipy.sparse.csr_matrix", "run_planetoid.concatenate_csr_matrices_by_rows", "concatenate_csr_matrices_by_rows.tolil", "set", "numpy.array", "numpy.concatenate", "len", "collections.defaultdict", "pickle.load.items", "collections.defaultdict.items", "numpy.array", "numpy.array", "scipy.sparse.csr_matrix", "os.path.join", "os.path.exists", "ValueError", "open", "numpy.load", "map", "numpy.load", "os.path.expanduser", "max", "min", "numpy.zeros", "edge_sets[].add", "edge_sets[].add", "np.array.append", "np.array.append", "open().read().split", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.load_x", "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.load_x", "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.concatenate_csr_matrices_by_rows"], ["", "def", "read_planetoid_dataset", "(", "dataset_name", "=", "'ind.cora'", ",", "dataset_dir", "=", "'~/data/planetoid/data/'", ")", ":", "\n", "  ", "base_path", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "dataset_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "expanduser", "(", "dataset_dir", ")", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'cannot find dataset_dir=%s. Please:\\nmkdir -p ~/data; cd ~/data; git clone git@github.com:kimiyoung/planetoid.git'", ")", "\n", "", "edge_lists", "=", "pickle", ".", "load", "(", "open", "(", "base_path", "+", "'.graph'", ",", "'rb'", ")", ")", "\n", "\n", "allx", "=", "load_x", "(", "base_path", "+", "'.allx'", ")", "\n", "\n", "ally", "=", "np", ".", "array", "(", "np", ".", "load", "(", "base_path", "+", "'.ally'", ",", "allow_pickle", "=", "True", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "testx", "=", "load_x", "(", "base_path", "+", "'.tx'", ")", "\n", "\n", "# Add test", "\n", "test_idx", "=", "list", "(", "map", "(", "int", ",", "open", "(", "base_path", "+", "'.test.index'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "\n", "num_test_examples", "=", "max", "(", "test_idx", ")", "-", "min", "(", "test_idx", ")", "+", "1", "\n", "sparse_zeros", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "(", "num_test_examples", ",", "allx", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "allx", "=", "concatenate_csr_matrices_by_rows", "(", "allx", ",", "sparse_zeros", ")", "\n", "llallx", "=", "allx", ".", "tolil", "(", ")", "\n", "llallx", "[", "test_idx", "]", "=", "testx", "\n", "#allx = scipy.vstack([allx, sparse_zeros])", "\n", "\n", "test_idx_set", "=", "set", "(", "test_idx", ")", "\n", "\n", "\n", "testy", "=", "np", ".", "array", "(", "np", ".", "load", "(", "base_path", "+", "'.ty'", ",", "allow_pickle", "=", "True", ")", ",", "dtype", "=", "'float32'", ")", "\n", "ally", "=", "np", ".", "concatenate", "(", "\n", "[", "ally", ",", "np", ".", "zeros", "(", "(", "num_test_examples", ",", "ally", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "]", ",", "\n", "0", ")", "\n", "ally", "[", "test_idx", "]", "=", "testy", "\n", "\n", "num_nodes", "=", "len", "(", "edge_lists", ")", "\n", "\n", "# Will be used to construct (sparse) adjacency matrix.", "\n", "edge_sets", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "node", ",", "neighbors", "in", "edge_lists", ".", "items", "(", ")", ":", "\n", "    ", "for", "n", "in", "neighbors", ":", "\n", "      ", "edge_sets", "[", "node", "]", ".", "add", "(", "n", ")", "\n", "edge_sets", "[", "n", "]", ".", "add", "(", "node", ")", "# Assume undirected.", "\n", "\n", "# Now, build adjacency list.", "\n", "", "", "adj_indices", "=", "[", "]", "\n", "adj_values", "=", "[", "]", "\n", "for", "node", ",", "neighbors", "in", "edge_sets", ".", "items", "(", ")", ":", "\n", "    ", "for", "n", "in", "neighbors", ":", "\n", "      ", "adj_indices", ".", "append", "(", "(", "node", ",", "n", ")", ")", "\n", "adj_values", ".", "append", "(", "1", ")", "\n", "\n", "", "", "adj_indices", "=", "np", ".", "array", "(", "adj_indices", ",", "dtype", "=", "'int32'", ")", "\n", "adj_values", "=", "np", ".", "array", "(", "adj_values", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "adj", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "adj", "[", "adj_indices", "[", ":", ",", "0", "]", ",", "adj_indices", "[", ":", ",", "1", "]", "]", "=", "adj_values", "\n", "\n", "return", "adj", ",", "llallx", ",", "ally", ",", "test_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.main": [[125, 215], ["run_planetoid.read_planetoid_dataset", "tf_fsvd.make_deepwalk_mat", "tf_fsvd.fsvd", "allx.todense", "numpy.concatenate", "sklearn.decomposition.PCA().fit_transform", "numpy.concatenate", "adj.sum", "scipy.sparse.diags", "scipy.sparse.diags.dot", "print", "normalizer.dot.nonzero", "tensorflow.sparse.SparseTensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "range", "tensorflow.concat", "numpy.arange", "numpy.arange", "print", "time.time", "tf_fsvd.DenseMatrixPF", "print", "tensorflow.gather", "tensorflow.gather", "json.dumps", "print", "scipy.sparse.eye", "numpy.array", "adj.dot", "numpy.array", "tensorflow.stack", "tf_X.append", "tf_X.append", "range", "tensorflow.concat", "numpy.concatenate", "numpy.concatenate", "tf_fsvd.fsvd", "tensorflow.matmul", "tf_fsvd.gather", "min", "tf_fsvd.fsvd", "tensorflow.matmul", "time.time", "tf_fsvd.DenseMatrixPF.dot", "tf_fsvd.DenseMatrixPF.dot", "sklearn.decomposition.PCA", "numpy.array", "tensorflow.sparse.sparse_dense_matmul", "tensorflow.ones", "dropped_tfx.append", "np.concatenate.append", "tensorflow.matmul", "tensorflow.matmul", "min", "numpy.array", "numpy.array", "tensorflow.nn.dropout", "tensorflow.where", "tensorflow.gather", "tensorflow.gather", "tensorflow.where", "tensorflow.gather", "min", "numpy.sqrt", "tensorflow.zeros_like", "tensorflow.zeros_like", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.argmax", "ally[].argmax", "tensorflow.argmax", "ally[].argmax"], "function", ["home.repos.pwc.inspect_result.samihaija_isvd.None.run_planetoid.read_planetoid_dataset", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.make_deepwalk_mat", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.sum", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.fsvd", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.DiagPF.dot", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather", "home.repos.pwc.inspect_result.samihaija_isvd.None.tf_fsvd.gather"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "adj", ",", "allx", ",", "ally", ",", "test_idx", "=", "read_planetoid_dataset", "(", "FLAGS", ".", "dataset", ",", "dataset_dir", "=", "FLAGS", ".", "dataset_dir", ")", "\n", "\n", "wys_f", "=", "tf_fsvd", ".", "make_deepwalk_mat", "(", "adj", ",", "window", "=", "FLAGS", ".", "wys_window", ",", "neg_sample_coef", "=", "FLAGS", ".", "wys_neg_coef", ",", "sym_normalization", "=", "False", ",", "rank_negatives", "=", "0", ")", "\n", "adj", "=", "adj", "+", "scipy", ".", "sparse", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ",", "dtype", "=", "'float32'", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", "\n", "adj", "=", "(", "adj", ">", "0", ")", "*", "np", ".", "array", "(", "1.0", ",", "'float32'", ")", "\n", "\n", "\n", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "wys_f", ",", "64", ",", "n_iter", "=", "10", ",", "renorm", "=", "'cholesky'", ")", "\n", "s", "=", "s", "**", "1", "\n", "dense_x", "=", "allx", ".", "todense", "(", ")", "\n", "dense_x", "=", "np", ".", "concatenate", "(", "[", "dense_x", ",", "(", "u", "*", "np", ".", "sqrt", "(", "s", ")", ")", ".", "numpy", "(", ")", ",", "(", "v", "*", "np", ".", "sqrt", "(", "s", ")", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "1", ")", "\n", "dense_x", "=", "sklearn", ".", "decomposition", ".", "PCA", "(", "min", "(", "min", "(", "dense_x", ".", "shape", ")", ",", "1000", ")", ")", ".", "fit_transform", "(", "dense_x", ")", "\n", "\n", "# Add embeddings.", "\n", "dense_x", "=", "np", ".", "concatenate", "(", "[", "dense_x", ",", "(", "u", "*", "np", ".", "sqrt", "(", "s", ")", ")", ".", "numpy", "(", ")", ",", "(", "v", "*", "np", ".", "sqrt", "(", "s", ")", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "1", ")", "\n", "#adj = adj + scipy.sparse.eye(adj.shape[0]) * 1.5", "\n", "d", "=", "adj", ".", "sum", "(", "axis", "=", "1", ")", "\n", "normalizer", "=", "scipy", ".", "sparse", ".", "diags", "(", "np", ".", "array", "(", "1", "/", "np", ".", "sqrt", "(", "d", ")", ")", "[", ":", ",", "0", "]", ")", "\n", "normed_adj", "=", "normalizer", ".", "dot", "(", "adj", ".", "dot", "(", "normalizer", ")", ")", "\n", "\n", "\n", "print", "(", "'start'", ")", "\n", "rows", ",", "cols", "=", "normed_adj", ".", "nonzero", "(", ")", "\n", "values", "=", "np", ".", "array", "(", "normed_adj", "[", "rows", ",", "cols", "]", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", "\n", "tf_adj", "=", "tf", ".", "sparse", ".", "SparseTensor", "(", "\n", "tf", ".", "stack", "(", "[", "np", ".", "array", "(", "rows", ",", "dtype", "=", "'int64'", ")", ",", "np", ".", "array", "(", "cols", ",", "dtype", "=", "'int64'", ")", "]", ",", "axis", "=", "1", ")", ",", "\n", "values", ",", "\n", "normed_adj", ".", "shape", ")", "\n", "tf_x", "=", "tf", ".", "convert_to_tensor", "(", "dense_x", ")", "\n", "tf_X", "=", "[", "tf_x", "]", "\n", "tf_ally", "=", "tf", ".", "convert_to_tensor", "(", "ally", ")", "\n", "for", "l", "in", "range", "(", "FLAGS", ".", "layers", ")", ":", "\n", "    ", "tf_X", ".", "append", "(", "tf", ".", "sparse", ".", "sparse_dense_matmul", "(", "tf_adj", ",", "tf_X", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "use_bias", ":", "\n", "    ", "tf_X", ".", "append", "(", "tf", ".", "ones", "(", "[", "tf_X", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", "]", ")", ")", "# Finally, column of ones.", "\n", "", "tfx", "=", "tf", ".", "concat", "(", "tf_X", ",", "axis", "=", "1", ")", "\n", "train_idx", "=", "np", ".", "arange", "(", "ally", ".", "shape", "[", "1", "]", "*", "20", ",", "dtype", "=", "'int32'", ")", "\n", "val_idx", "=", "np", ".", "arange", "(", "ally", ".", "shape", "[", "1", "]", "*", "20", ",", "ally", ".", "shape", "[", "1", "]", "*", "20", "+", "500", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "if", "FLAGS", ".", "dropout_levels", ":", "\n", "    ", "dropped_tfx", "=", "[", "tfx", "]", "\n", "train_x_idx", "=", "[", "train_idx", "]", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "dropout_levels", ")", ":", "\n", "      ", "dropped_tfx", ".", "append", "(", "tf", ".", "nn", ".", "dropout", "(", "tfx", ",", "rate", "=", "0.5", ")", ")", "\n", "train_x_idx", ".", "append", "(", "train_idx", "+", "adj", ".", "shape", "[", "0", "]", "*", "(", "i", "+", "1", ")", ")", "\n", "", "tfx", "=", "tf", ".", "concat", "(", "dropped_tfx", ",", "axis", "=", "0", ")", "\n", "train_x_idx", "=", "np", ".", "concatenate", "(", "train_x_idx", ",", "axis", "=", "0", ")", "\n", "train_y_idx", "=", "np", ".", "concatenate", "(", "[", "train_idx", "]", "*", "(", "FLAGS", ".", "dropout_levels", "+", "1", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "    ", "train_x_idx", "=", "train_idx", "\n", "train_y_idx", "=", "train_idx", "\n", "\n", "", "print", "(", "'TRAINING'", ")", "\n", "started", "=", "time", ".", "time", "(", ")", "\n", "\n", "xpf", "=", "tf_fsvd", ".", "DenseMatrixPF", "(", "tfx", ")", "\n", "if", "FLAGS", ".", "slice_on_u", ":", "\n", "    ", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "xpf", ",", "FLAGS", ".", "svd_k", ",", "n_iter", "=", "FLAGS", ".", "svd_iters", ",", "renorm", "=", "'cholesky'", ")", "\n", "w", "=", "tf", ".", "matmul", "(", "\n", "v", "*", "tf", ".", "where", "(", "s", "==", "0", ",", "tf", ".", "zeros_like", "(", "s", ")", ",", "1", "/", "s", ")", ",", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "gather", "(", "u", ",", "train_x_idx", ")", ",", "\n", "tf", ".", "gather", "(", "tf_ally", ",", "train_y_idx", ")", ",", "transpose_a", "=", "True", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "    ", "train_xpf", "=", "tf_fsvd", ".", "gather", "(", "xpf", ",", "train_x_idx", ")", "\n", "n_redundancy", "=", "20", "\n", "svd_k", "=", "min", "(", "FLAGS", ".", "svd_k", ",", "train_xpf", ".", "shape", "[", "0", "]", "-", "n_redundancy", "-", "4", ")", "\n", "u", ",", "s", ",", "v", "=", "tf_fsvd", ".", "fsvd", "(", "train_xpf", ",", "svd_k", ",", "n_iter", "=", "FLAGS", ".", "svd_iters", ",", "renorm", "=", "'cholesky'", ",", "n_redundancy", "=", "n_redundancy", ")", "\n", "w", "=", "tf", ".", "matmul", "(", "\n", "v", "*", "tf", ".", "where", "(", "s", "==", "0", ",", "tf", ".", "zeros_like", "(", "s", ")", ",", "1", "/", "s", ")", ",", "\n", "tf", ".", "matmul", "(", "\n", "u", ",", "\n", "tf", ".", "gather", "(", "tf_ally", ",", "train_y_idx", ")", ",", "transpose_a", "=", "True", ")", ")", "\n", "\n", "", "train_time", "=", "time", ".", "time", "(", ")", "-", "started", "\n", "print", "(", "'TESTING'", ")", "\n", "\n", "test_preds", "=", "tf", ".", "gather", "(", "xpf", ".", "dot", "(", "w", ")", ",", "test_idx", ")", "\n", "val_preds", "=", "tf", ".", "gather", "(", "xpf", ".", "dot", "(", "w", ")", ",", "val_idx", ")", "\n", "\n", "test_acc", "=", "(", "tf", ".", "argmax", "(", "test_preds", ",", "1", ")", "==", "ally", "[", "test_idx", "]", ".", "argmax", "(", "1", ")", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", "\n", "val_acc", "=", "(", "tf", ".", "argmax", "(", "val_preds", ",", "1", ")", "==", "ally", "[", "val_idx", "]", ".", "argmax", "(", "1", ")", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "output", "=", "json", ".", "dumps", "(", "{", "'test'", ":", "test_acc", ",", "'val'", ":", "val_acc", ",", "'time'", ":", "train_time", "}", ")", "\n", "print", "(", "output", ")", "\n", "\n"]]}