{"home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetwork.__init__": [[15, 125], ["torch.Module.__init__", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "Models.OccupancyNetwork.decoding.append", "torch.Linear", "torch.Linear", "Misc.get_activation", "ModelParts.CoordinatesFullyConnectedBlock", "ModelParts.VolumeEncoderBlock", "range"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation"], ["def", "__init__", "(", "self", ",", "number_of_encoding_blocks", ":", "int", "=", "5", ",", "# 5,  # Encoding path parameters", "\n", "channels_in_encoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "1", ",", "32", ")", ",", "(", "32", ",", "32", ")", ",", "(", "32", ",", "64", ")", ",", "(", "64", ",", "64", ")", ",", "(", "64", ",", "8", ")", "]", ",", "\n", "# [(1, 64), (64, 64), (64, 128), (128, 128), (128, 8)]", "\n", "kernel_size_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "3", ",", "stride_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "padding_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "activation_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "downsampling_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "\n", "#   ['none', 'averagepool', 'averagepool', 'averagepool', 'averagepool'],", "\n", "[", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'none'", "]", ",", "\n", "downsampling_factor_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "2", ",", "\n", "normalization_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'instancenorm'", ",", "\n", "dropout_rate_encoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "0.0", ",", "\n", "bias_encoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "False", ",", "\n", "number_of_decoding_blocks", ":", "int", "=", "5", ",", "# Decoding path parameter", "\n", "channels_in_decoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "480", "+", "3", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", "]", ",", "\n", "#  [(180 + 3, 256), (256, 256), (256, 256), (256, 256), (256, 256), (256, 1)],", "\n", "activation_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "normalization_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'cbatchnorm'", ",", "\n", "dropout_rate_decoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "bias_decoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "True", ",", "\n", "output_activation", ":", "str", "=", "'sigmoid'", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Constructor method\n        :param number_of_encoding_blocks: (int) Number of blocks in encoding path\n        :param channels_in_encoding_blocks: (List[Tuple[int]]) Number of input and output channels of each encoding block\n        :param kernel_size_encoding: (int, List[int]) Kernel size of each convolution in each encoding block\n        :param stride_encoding: (int, List[int]) Stride of each convolution in each encoding block\n        :param padding_encoding: (int, List[int]) Padding of each convolution in each encoding block\n        :param activation_encoding: (str, List[str]) Activation used in each encoding block\n        :param downsampling_encoding: (str, List[str]) Downsampling operation in each encoding block\n        :param downsampling_factor_encoding: (int, List[int]) Downsampling factor in each encoding block\n        :param normalization_encoding: (str, List[str]) Type of normalization use in each encoding block\n        :param dropout_rate_encoding: (float, List[float]) Dropout rate to perform in each encoding block\n        :param bias_encoding: (bool, List[bool]) Use bias in each convolution in each encoding block\n        :param number_of_decoding_blocks: (int) Number of block in decoding path\n        :param channels_in_decoding_blocks: (List[Tuple[int]]) Number of input and output channels of each decoding block\n        :param activation_decoding: (str, List[str]) Activation used in each decoding block\n        :param normalization_decoding: (str, List[str]) Type of normalization use in each decoding block\n        :param dropout_rate_decoding: (float, List[float]) Dropout rate to perform in each decoding block\n        :param bias_decoding: (bool, List[bool]) Use bias in each convolution in each decoding block\n        :param bias_residual_decoding: (bool, List[bool]) Use bias in residual mapping in each decoding block\n        :param output_activation: (str) Type of activation function used for output\n        \"\"\"", "\n", "# Call super constructor", "\n", "super", "(", "OccupancyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Convert encoding parameters to lists", "\n", "channels_in_encoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_encoding_blocks", ",", "number_of_encoding_blocks", ",", "\n", "'channels in encoding blocks'", ")", "\n", "kernel_size_encoding", "=", "Misc", ".", "parse_to_list", "(", "kernel_size_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'kernel size encoding'", ")", "\n", "stride_encoding", "=", "Misc", ".", "parse_to_list", "(", "stride_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'stride encoding'", ")", "\n", "padding_encoding", "=", "Misc", ".", "parse_to_list", "(", "padding_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'padding encoding'", ")", "\n", "activation_encoding", "=", "Misc", ".", "parse_to_list", "(", "activation_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'activation encoding'", ")", "\n", "downsampling_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling encoding'", ")", "\n", "downsampling_factor_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_factor_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling factor encoding'", ")", "\n", "normalization_encoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'normalization encoding'", ")", "\n", "dropout_rate_encoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'dropout rate encoding'", ")", "\n", "bias_encoding", "=", "Misc", ".", "parse_to_list", "(", "bias_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'bias encoding'", ")", "\n", "# Convert decoding parameters to lists", "\n", "channels_in_decoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_decoding_blocks", ",", "number_of_decoding_blocks", ",", "\n", "'channels in decoding blocks'", ")", "\n", "activation_decoding", "=", "Misc", ".", "parse_to_list", "(", "activation_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'activation decoding'", ")", "\n", "normalization_decoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'normalization decoding'", ")", "\n", "dropout_rate_decoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'dropout rate decoding'", ")", "\n", "bias_decoding", "=", "Misc", ".", "parse_to_list", "(", "bias_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'bias decoding'", ")", "\n", "\n", "# Init encoding blocks", "\n", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "*", "[", "ModelParts", ".", "VolumeEncoderBlock", "(", "\n", "input_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size_encoding", "[", "index", "]", ",", "\n", "stride", "=", "stride_encoding", "[", "index", "]", ",", "\n", "padding", "=", "padding_encoding", "[", "index", "]", ",", "\n", "activation", "=", "activation_encoding", "[", "index", "]", ",", "\n", "downsampling", "=", "downsampling_encoding", "[", "index", "]", ",", "\n", "downsampling_factor", "=", "downsampling_factor_encoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_encoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_encoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_encoding", "[", "index", "]", ")", "\n", "for", "index", "in", "range", "(", "number_of_encoding_blocks", ")", "]", ")", "\n", "\n", "# Init decoding blocks", "\n", "self", ".", "decoding", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", "in", "range", "(", "number_of_decoding_blocks", ")", ":", "\n", "            ", "self", ".", "decoding", ".", "append", "(", "ModelParts", ".", "CoordinatesFullyConnectedBlock", "(", "\n", "input_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "activation", "=", "activation_decoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_decoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_decoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_decoding", "[", "index", "]", ")", ")", "\n", "\n", "# Init output activation", "\n", "", "self", ".", "output_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "channels_in_decoding_blocks", "[", "-", "1", "]", "[", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "Misc", ".", "get_activation", "(", "output_activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetwork.forward": [[126, 150], ["Models.OccupancyNetwork.encoding", "Models.OccupancyNetwork.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "Models.OccupancyNetwork.output_block", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "block", "block", "int", "Models.OccupancyNetwork.view.clone", "Models.OccupancyNetwork.view.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "volume", ":", "torch", ".", "tensor", ",", "coordinates", ":", "torch", ".", "tensor", ")", "->", "torch", ".", "tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass of the occupancy network\n        :param volume: (torch.tensor) Input tensor including 3D volume\n        :param coordinates: (torch.tensor) Input tensor including coordinates\n        :return: (torch.tensor) Output tensor\n        \"\"\"", "\n", "# Perform encoding path", "\n", "output_encoding", "=", "self", ".", "encoding", "(", "volume", ")", "\n", "# Flatten latent vector for decoding path", "\n", "output_encoding_flatten", "=", "output_encoding", ".", "view", "(", "output_encoding", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# Repeat latent vector", "\n", "input_decoding", "=", "torch", ".", "cat", "(", "(", "torch", ".", "repeat_interleave", "(", "output_encoding_flatten", ",", "\n", "int", "(", "coordinates", ".", "shape", "[", "0", "]", "/", "volume", ".", "shape", "[", "0", "]", ")", ",", "dim", "=", "0", ")", ",", "\n", "coordinates", ")", ",", "dim", "=", "1", ")", "\n", "# Perform decoding path", "\n", "for", "index", ",", "block", "in", "enumerate", "(", "self", ".", "decoding", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "output_decoding", "=", "block", "(", "input_decoding", ",", "output_encoding_flatten", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "output_decoding", "=", "block", "(", "output_decoding", ",", "output_encoding_flatten", ".", "clone", "(", ")", ")", "\n", "# Perform last linear layer + sigmoid activation", "\n", "", "", "output", "=", "self", ".", "output_block", "(", "output_decoding", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetworkNoCat.__init__": [[157, 268], ["torch.Module.__init__", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "Models.OccupancyNetworkNoCat.decoding.append", "torch.Linear", "torch.Linear", "Misc.get_activation", "ModelParts.CoordinatesFullyConnectedBlock", "ModelParts.VolumeEncoderBlock", "range"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation"], ["def", "__init__", "(", "self", ",", "number_of_encoding_blocks", ":", "int", "=", "5", ",", "# 5,  # Encoding path parameters", "\n", "channels_in_encoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "1", ",", "64", ")", ",", "(", "64", ",", "64", ")", ",", "(", "64", ",", "64", ")", ",", "(", "64", ",", "64", ")", ",", "(", "64", ",", "8", ")", "]", ",", "\n", "#   [(1, 32), (32, 64), (64, 128),(128, 64), (64, 32), (32, 3)],", "\n", "#   [(1, 64), (64, 128), (128, 256),(256, 128), (128, 64), (64, 3)],", "\n", "kernel_size_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "3", ",", "stride_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "padding_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "activation_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "downsampling_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "\n", "#   ['none', 'averagepool', 'averagepool', 'averagepool', 'averagepool'],", "\n", "[", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'none'", "]", ",", "\n", "downsampling_factor_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "2", ",", "\n", "normalization_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'instancenorm'", ",", "\n", "dropout_rate_encoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "0.0", ",", "\n", "bias_encoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "False", ",", "\n", "number_of_decoding_blocks", ":", "int", "=", "5", ",", "# Decoding path parameter", "\n", "channels_in_decoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "3", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "128", ")", "]", ",", "\n", "#  [(180 + 3, 256), (256, 256), (256, 256), (256, 256), (256, 256), (256, 1)],", "\n", "activation_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "normalization_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'cbatchnorm'", ",", "\n", "dropout_rate_decoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "bias_decoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "True", ",", "\n", "output_activation", ":", "str", "=", "'sigmoid'", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Constructor method\n        :param number_of_encoding_blocks: (int) Number of blocks in encoding path\n        :param channels_in_encoding_blocks: (List[Tuple[int]]) Number of input and output channels of each encoding block\n        :param kernel_size_encoding: (int, List[int]) Kernel size of each convolution in each encoding block\n        :param stride_encoding: (int, List[int]) Stride of each convolution in each encoding block\n        :param padding_encoding: (int, List[int]) Padding of each convolution in each encoding block\n        :param activation_encoding: (str, List[str]) Activation used in each encoding block\n        :param downsampling_encoding: (str, List[str]) Downsampling operation in each encoding block\n        :param downsampling_factor_encoding: (int, List[int]) Downsampling factor in each encoding block\n        :param normalization_encoding: (str, List[str]) Type of normalization use in each encoding block\n        :param dropout_rate_encoding: (float, List[float]) Dropout rate to perform in each encoding block\n        :param bias_encoding: (bool, List[bool]) Use bias in each convolution in each encoding block\n        :param number_of_decoding_blocks: (int) Number of block in decoding path\n        :param channels_in_decoding_blocks: (List[Tuple[int]]) Number of input and output channels of each decoding block\n        :param activation_decoding: (str, List[str]) Activation used in each decoding block\n        :param normalization_decoding: (str, List[str]) Type of normalization use in each decoding block\n        :param dropout_rate_decoding: (float, List[float]) Dropout rate to perform in each decoding block\n        :param bias_decoding: (bool, List[bool]) Use bias in each convolution in each decoding block\n        :param bias_residual_decoding: (bool, List[bool]) Use bias in residual mapping in each decoding block\n        :param output_activation: (str) Type of activation function used for output\n        \"\"\"", "\n", "# Call super constructor", "\n", "super", "(", "OccupancyNetworkNoCat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Convert encoding parameters to lists", "\n", "channels_in_encoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_encoding_blocks", ",", "number_of_encoding_blocks", ",", "\n", "'channels in encoding blocks'", ")", "\n", "kernel_size_encoding", "=", "Misc", ".", "parse_to_list", "(", "kernel_size_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'kernel size encoding'", ")", "\n", "stride_encoding", "=", "Misc", ".", "parse_to_list", "(", "stride_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'stride encoding'", ")", "\n", "padding_encoding", "=", "Misc", ".", "parse_to_list", "(", "padding_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'padding encoding'", ")", "\n", "activation_encoding", "=", "Misc", ".", "parse_to_list", "(", "activation_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'activation encoding'", ")", "\n", "downsampling_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling encoding'", ")", "\n", "downsampling_factor_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_factor_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling factor encoding'", ")", "\n", "normalization_encoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'normalization encoding'", ")", "\n", "dropout_rate_encoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'dropout rate encoding'", ")", "\n", "bias_encoding", "=", "Misc", ".", "parse_to_list", "(", "bias_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'bias encoding'", ")", "\n", "# Convert decoding parameters to lists", "\n", "channels_in_decoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_decoding_blocks", ",", "number_of_decoding_blocks", ",", "\n", "'channels in decoding blocks'", ")", "\n", "activation_decoding", "=", "Misc", ".", "parse_to_list", "(", "activation_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'activation decoding'", ")", "\n", "normalization_decoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'normalization decoding'", ")", "\n", "dropout_rate_decoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'dropout rate decoding'", ")", "\n", "bias_decoding", "=", "Misc", ".", "parse_to_list", "(", "bias_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'bias decoding'", ")", "\n", "\n", "# Init encoding blocks", "\n", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "*", "[", "ModelParts", ".", "VolumeEncoderBlock", "(", "\n", "input_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size_encoding", "[", "index", "]", ",", "\n", "stride", "=", "stride_encoding", "[", "index", "]", ",", "\n", "padding", "=", "padding_encoding", "[", "index", "]", ",", "\n", "activation", "=", "activation_encoding", "[", "index", "]", ",", "\n", "downsampling", "=", "downsampling_encoding", "[", "index", "]", ",", "\n", "downsampling_factor", "=", "downsampling_factor_encoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_encoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_encoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_encoding", "[", "index", "]", ")", "\n", "for", "index", "in", "range", "(", "number_of_encoding_blocks", ")", "]", ")", "\n", "\n", "# Init decoding blocks", "\n", "self", ".", "decoding", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", "in", "range", "(", "number_of_decoding_blocks", ")", ":", "\n", "            ", "self", ".", "decoding", ".", "append", "(", "ModelParts", ".", "CoordinatesFullyConnectedBlock", "(", "\n", "input_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "activation", "=", "activation_decoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_decoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_decoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_decoding", "[", "index", "]", ")", ")", "\n", "\n", "# Init output activation", "\n", "", "self", ".", "output_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "channels_in_decoding_blocks", "[", "-", "1", "]", "[", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "Misc", ".", "get_activation", "(", "output_activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetworkNoCat.forward": [[269, 289], ["Models.OccupancyNetworkNoCat.encoding", "Models.OccupancyNetworkNoCat.view", "enumerate", "Models.OccupancyNetworkNoCat.output_block", "block", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "volume", ":", "torch", ".", "tensor", ",", "coordinates", ":", "torch", ".", "tensor", ")", "->", "torch", ".", "tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass of the occupancy network\n        :param volume: (torch.tensor) Input tensor including 3D volume\n        :param coordinates: (torch.tensor) Input tensor including coordinates\n        :return: (torch.tensor) Output tensor\n        \"\"\"", "\n", "# Perform encoding path", "\n", "output_encoding", "=", "self", ".", "encoding", "(", "volume", ")", "\n", "# Flatten latent vector for decoding path", "\n", "output_encoding_flatten", "=", "output_encoding", ".", "view", "(", "output_encoding", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# Perform decoding path", "\n", "for", "index", ",", "block", "in", "enumerate", "(", "self", ".", "decoding", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "output_decoding", "=", "block", "(", "coordinates", ",", "output_encoding_flatten", ")", "\n", "", "else", ":", "\n", "                ", "output_decoding", "=", "block", "(", "output_decoding", ",", "output_encoding_flatten", ")", "\n", "# Perform last linear layer + sigmoid activation", "\n", "", "", "output", "=", "self", ".", "output_block", "(", "output_decoding", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetworkNoCatCNN.__init__": [[293, 399], ["torch.Module.__init__", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "Misc.parse_to_list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "ModelParts.VolumeEncoderBlock", "ModelParts.VolumeEncoderBlock", "range", "range"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list"], ["    ", "def", "__init__", "(", "self", ",", "number_of_encoding_blocks", ":", "int", "=", "5", ",", "# 5,  # Encoding path parameters", "\n", "channels_in_encoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "1", ",", "64", ")", ",", "(", "64", ",", "128", ")", ",", "(", "128", ",", "128", ")", ",", "(", "128", ",", "64", ")", ",", "(", "64", ",", "8", ")", "]", ",", "\n", "kernel_size_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "3", ",", "stride_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "padding_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "activation_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "downsampling_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "\n", "[", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'averagepool'", ",", "'none'", "]", ",", "\n", "downsampling_factor_encoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "2", ",", "\n", "normalization_encoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'instancenorm'", ",", "\n", "dropout_rate_encoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "0.0", ",", "\n", "bias_encoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "False", ",", "\n", "number_of_decoding_blocks", ":", "int", "=", "3", ",", "\n", "channels_in_decoding_blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "\n", "[", "(", "9", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "1", ")", "]", ",", "\n", "kernel_size_decoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "3", ",", "stride_decoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "padding_decoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "1", ",", "\n", "activation_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'leaky relu'", ",", "\n", "downsampling_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "\n", "[", "'none'", ",", "'none'", ",", "'none'", "]", ",", "\n", "downsampling_factor_decoding", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", "=", "2", ",", "\n", "normalization_decoding", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "'none'", ",", "\n", "dropout_rate_decoding", ":", "Union", "[", "float", ",", "List", "[", "float", "]", "]", "=", "0.0", ",", "\n", "bias_decoding", ":", "Union", "[", "bool", ",", "List", "[", "bool", "]", "]", "=", "False", ")", "->", "None", ":", "\n", "# Call super constructor", "\n", "        ", "super", "(", "OccupancyNetworkNoCatCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Convert encoding parameters to lists", "\n", "channels_in_encoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_encoding_blocks", ",", "number_of_encoding_blocks", ",", "\n", "'channels in encoding blocks'", ")", "\n", "kernel_size_encoding", "=", "Misc", ".", "parse_to_list", "(", "kernel_size_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'kernel size encoding'", ")", "\n", "stride_encoding", "=", "Misc", ".", "parse_to_list", "(", "stride_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'stride encoding'", ")", "\n", "padding_encoding", "=", "Misc", ".", "parse_to_list", "(", "padding_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'padding encoding'", ")", "\n", "activation_encoding", "=", "Misc", ".", "parse_to_list", "(", "activation_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'activation encoding'", ")", "\n", "downsampling_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling encoding'", ")", "\n", "downsampling_factor_encoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_factor_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'downsampling factor encoding'", ")", "\n", "normalization_encoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'normalization encoding'", ")", "\n", "dropout_rate_encoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'dropout rate encoding'", ")", "\n", "bias_encoding", "=", "Misc", ".", "parse_to_list", "(", "bias_encoding", ",", "number_of_encoding_blocks", ",", "\n", "'bias encoding'", ")", "\n", "# Convert decoding parameters to lists", "\n", "channels_in_decoding_blocks", "=", "Misc", ".", "parse_to_list", "(", "channels_in_decoding_blocks", ",", "number_of_decoding_blocks", ",", "\n", "'channels in encoding blocks'", ")", "\n", "kernel_size_decoding", "=", "Misc", ".", "parse_to_list", "(", "kernel_size_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'kernel size encoding'", ")", "\n", "stride_decoding", "=", "Misc", ".", "parse_to_list", "(", "stride_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'stride encoding'", ")", "\n", "padding_decoding", "=", "Misc", ".", "parse_to_list", "(", "padding_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'padding encoding'", ")", "\n", "activation_decoding", "=", "Misc", ".", "parse_to_list", "(", "activation_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'activation encoding'", ")", "\n", "downsampling_decoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'downsampling encoding'", ")", "\n", "downsampling_factor_decoding", "=", "Misc", ".", "parse_to_list", "(", "downsampling_factor_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'downsampling factor encoding'", ")", "\n", "normalization_decoding", "=", "Misc", ".", "parse_to_list", "(", "normalization_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'normalization encoding'", ")", "\n", "dropout_rate_decoding", "=", "Misc", ".", "parse_to_list", "(", "dropout_rate_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'dropout rate encoding'", ")", "\n", "bias_decoding", "=", "Misc", ".", "parse_to_list", "(", "bias_decoding", ",", "number_of_decoding_blocks", ",", "\n", "'bias encoding'", ")", "\n", "\n", "# Init encoding blocks", "\n", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "*", "[", "ModelParts", ".", "VolumeEncoderBlock", "(", "\n", "input_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_encoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size_encoding", "[", "index", "]", ",", "\n", "stride", "=", "stride_encoding", "[", "index", "]", ",", "\n", "padding", "=", "padding_encoding", "[", "index", "]", ",", "\n", "activation", "=", "activation_encoding", "[", "index", "]", ",", "\n", "downsampling", "=", "downsampling_encoding", "[", "index", "]", ",", "\n", "downsampling_factor", "=", "downsampling_factor_encoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_encoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_encoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_encoding", "[", "index", "]", ")", "\n", "for", "index", "in", "range", "(", "number_of_encoding_blocks", ")", "]", ")", "\n", "\n", "# Init input coordinate mapping", "\n", "self", ".", "coordinate_mapping", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "5", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "# Init decoder blocks", "\n", "self", ".", "decoding", "=", "nn", ".", "Sequential", "(", "*", "[", "ModelParts", ".", "VolumeEncoderBlock", "(", "\n", "input_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "0", "]", ",", "\n", "output_channels", "=", "channels_in_decoding_blocks", "[", "index", "]", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_size_decoding", "[", "index", "]", ",", "\n", "stride", "=", "stride_decoding", "[", "index", "]", ",", "\n", "padding", "=", "padding_decoding", "[", "index", "]", ",", "\n", "activation", "=", "activation_decoding", "[", "index", "]", ",", "\n", "downsampling", "=", "downsampling_decoding", "[", "index", "]", ",", "\n", "downsampling_factor", "=", "downsampling_factor_decoding", "[", "index", "]", ",", "\n", "normalization", "=", "normalization_decoding", "[", "index", "]", ",", "\n", "dropout_rate", "=", "dropout_rate_decoding", "[", "index", "]", ",", "\n", "bias", "=", "bias_decoding", "[", "index", "]", ")", "\n", "for", "index", "in", "range", "(", "number_of_decoding_blocks", ")", "]", ")", "\n", "\n", "# Init final classification layer", "\n", "self", ".", "classification", "=", "nn", ".", "Sequential", "(", "nn", ".", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "60", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Models.OccupancyNetworkNoCatCNN.forward": [[400, 415], ["Models.OccupancyNetworkNoCatCNN.encoding", "Models.OccupancyNetworkNoCatCNN.coordinate_mapping().unsqueeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Models.OccupancyNetworkNoCatCNN.decoding", "Models.OccupancyNetworkNoCatCNN.classification", "Models.OccupancyNetworkNoCatCNN.coordinate_mapping().unsqueeze", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "int", "Models.OccupancyNetworkNoCatCNN.coordinate_mapping", "coordinates.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "volume", ":", "torch", ".", "tensor", ",", "coordinates", ":", "torch", ".", "tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Perform encoding path", "\n", "        ", "output_encoding", "=", "self", ".", "encoding", "(", "volume", ")", "\n", "# Map coordinates", "\n", "mapped_coordinates", "=", "self", ".", "coordinate_mapping", "(", "coordinates", ".", "view", "(", "coordinates", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "3", ")", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "# Concat output of encoder and coordinates", "\n", "input_decoding", "=", "torch", ".", "cat", "(", "(", "\n", "torch", ".", "repeat_interleave", "(", "output_encoding", ",", "int", "(", "coordinates", ".", "shape", "[", "0", "]", "/", "volume", ".", "shape", "[", "0", "]", ")", ",", "\n", "dim", "=", "0", ")", ",", "mapped_coordinates", ")", ",", "dim", "=", "1", ")", "\n", "# Perform decoding path", "\n", "output_decoding", "=", "self", ".", "decoding", "(", "input_decoding", ")", "\n", "# Perform classification", "\n", "classification_output", "=", "self", ".", "classification", "(", "output_decoding", ")", "\n", "return", "classification_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.__init__": [[19, 67], ["occupancy_network.to", "dict", "os.path.join", "os.path.join", "os.path.join", "dict", "str", "str", "str", "str", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "json.dump", "datetime.datetime.now", "str", "os.path.join", "datetime.datetime.now"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "occupancy_network", ":", "nn", ".", "Module", ",", "occupancy_network_optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "training_data", ":", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "\n", "test_data", ":", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "\n", "validation_data", ":", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "\n", "loss_function", ":", "Callable", "[", "[", "torch", ".", "tensor", ",", "torch", ".", "tensor", "]", ",", "torch", ".", "tensor", "]", ",", "device", ":", "str", "=", "'cuda'", ",", "\n", "save_data_path", ":", "str", "=", "'Saved_data_'", ",", "data_folder", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Class constructor\n        :param occupancy_network: (nn.Module) Occupancy network for binary segmentation\n        :param occupancy_network_optimizer: (torch.optim.Optimizer) Optimizer of the occupancy network\n        :param training_data: (torch.utils.data.dataloader) Dataloader including the training dataset\n        :param validation_data: (torch.utils.data.dataloader) Dataloader including the validation dataset\n        :param test_data: (torch.utils.data.dataloader) Dataloader including the test dataset\n        :param loss_function: (Callable[[torch.tensor], torch.tensor]) Loss function to use\n        :param device: (str) Device to use while training, validation and testing\n        :param data_folder: (str) Folder name inside the main save path\n        \"\"\"", "\n", "# Init class variables", "\n", "self", ".", "occupancy_network", "=", "occupancy_network", ".", "to", "(", "device", ")", "\n", "self", ".", "occupancy_network_optimizer", "=", "occupancy_network_optimizer", "\n", "self", ".", "training_data", "=", "training_data", "\n", "self", ".", "test_data", "=", "test_data", "\n", "self", ".", "validation_data", "=", "validation_data", "\n", "self", ".", "loss_function", "=", "loss_function", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "metrics", "=", "dict", "(", ")", "\n", "# Init folder to save models and logs", "\n", "if", "data_folder", "is", "None", ":", "\n", "            ", "data_folder", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "data_folder", "=", "data_folder", "+", "'_'", "+", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "", "self", ".", "path_save_models", "=", "os", ".", "path", ".", "join", "(", "save_data_path", ",", "'models_'", "+", "data_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_save_models", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "path_save_models", ")", "\n", "", "self", ".", "path_save_plots", "=", "os", ".", "path", ".", "join", "(", "save_data_path", ",", "'plots_'", "+", "data_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_save_plots", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "path_save_plots", ")", "\n", "", "self", ".", "path_save_metrics", "=", "os", ".", "path", ".", "join", "(", "save_data_path", ",", "'metrics_'", "+", "data_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_save_metrics", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "path_save_metrics", ")", "\n", "# Save hyperparameters", "\n", "", "hyperparameter", "=", "dict", "(", ")", "\n", "hyperparameter", "[", "'model'", "]", "=", "str", "(", "self", ".", "occupancy_network", ")", "\n", "hyperparameter", "[", "'optim'", "]", "=", "str", "(", "occupancy_network_optimizer", ")", "\n", "hyperparameter", "[", "'loss'", "]", "=", "str", "(", "loss_function", ")", "\n", "# Save to file", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_save_metrics", ",", "'hyperparameter.txt'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json", ".", "dump", "(", "hyperparameter", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.train": [[68, 127], ["ModelWrapper.OccupancyNetworkWrapper.occupancy_network.train", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.to", "tqdm.tqdm.tqdm", "range", "tqdm.tqdm.tqdm.close", "ModelWrapper.OccupancyNetworkWrapper.validate", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.save_metrics", "tqdm.tqdm.tqdm.update", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.zero_grad", "volumes.to.to.to", "coordinates.to.to.to", "labels.to.to.to", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network", "ModelWrapper.OccupancyNetworkWrapper.loss_function", "ModelWrapper.OccupancyNetworkWrapper.backward", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network_optimizer.step", "tqdm.tqdm.tqdm.set_description", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "len", "os.path.join", "os.path.join", "ModelWrapper.OccupancyNetworkWrapper.item", "ModelWrapper.OccupancyNetworkWrapper.item", "str"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.train", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.validate", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.save_metrics", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging"], ["", "", "def", "train", "(", "self", ",", "epochs", ":", "int", "=", "100", ",", "save_best_model", ":", "bool", "=", "True", ",", "save_model_every_n_epoch", ":", "int", "=", "10", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Training loop\n        :param epochs: (int) Number of epochs to perform\n        :param save_best_model: (int) If true the best model is saved\n        :param model_save_path: (str) Path to save the best model\n        \"\"\"", "\n", "# Model into train mode", "\n", "self", ".", "occupancy_network", ".", "train", "(", ")", "\n", "self", ".", "occupancy_network", ".", "to", "(", "self", ".", "device", ")", "\n", "# Init progress bar", "\n", "progress_bar", "=", "tqdm", "(", "total", "=", "epochs", "*", "len", "(", "self", ".", "training_data", ".", "dataset", ")", ")", "\n", "# Init best loss variable", "\n", "best_loss", "=", "np", ".", "inf", "\n", "# Init variables for progress bar", "\n", "validation_loss", ",", "validation_iou", ",", "validation_bb_iou", "=", "np", ".", "inf", ",", "0", ",", "0", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "# Validate model", "\n", "            ", "for", "volumes", ",", "coordinates", ",", "labels", "in", "self", ".", "training_data", ":", "\n", "# Update progress bar", "\n", "                ", "progress_bar", ".", "update", "(", "volumes", ".", "shape", "[", "0", "]", ")", "\n", "# Reset gradients", "\n", "self", ".", "occupancy_network", ".", "zero_grad", "(", ")", "\n", "# Data to device", "\n", "volumes", "=", "volumes", ".", "to", "(", "self", ".", "device", ")", "\n", "coordinates", "=", "coordinates", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "# Perform model prediction", "\n", "prediction", "=", "self", ".", "occupancy_network", "(", "volumes", ",", "coordinates", ")", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "loss_function", "(", "prediction", ",", "labels", ")", "\n", "# Compute gradients", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "occupancy_network_optimizer", ".", "step", "(", ")", "\n", "# Update loss info in progress bar", "\n", "progress_bar", ".", "set_description", "(", "\n", "'Epoch {}/{}, Best val Loss={:.4f}, Cur val Loss={:.4f}, Cur val IoU={:.4f}, Cur val BB IoU={:.4f}, Loss={:.4f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "epochs", ",", "best_loss", ",", "validation_loss", ",", "validation_iou", ",", "validation_bb_iou", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "# Save loss value and current epoch", "\n", "self", ".", "logging", "(", "metric_name", "=", "'train_loss'", ",", "value", "=", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "metric_name", "=", "'epoch'", ",", "value", "=", "epoch", ")", "\n", "", "validation_loss", ",", "validation_iou", ",", "validation_bb_iou", "=", "self", ".", "validate", "(", ")", "\n", "# Save validation values", "\n", "self", ".", "logging", "(", "metric_name", "=", "'validation_loss'", ",", "value", "=", "validation_loss", ")", "\n", "self", ".", "logging", "(", "metric_name", "=", "'validation_iou'", ",", "value", "=", "validation_iou", ")", "\n", "self", ".", "logging", "(", "metric_name", "=", "'validation_bb_iou'", ",", "value", "=", "validation_bb_iou", ")", "\n", "# Save best model", "\n", "if", "save_best_model", "and", "(", "best_loss", ">", "validation_loss", ")", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "occupancy_network", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_save_models", ",", "'occupancy_network_best_'", "+", "self", ".", "device", "+", "'.pt'", ")", ")", "\n", "best_loss", "=", "validation_loss", "\n", "# Save model", "\n", "", "if", "epoch", "%", "save_model_every_n_epoch", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "occupancy_network", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_save_models", ",", "\n", "'occupancy_network_best_'", "+", "str", "(", "epoch", ")", "+", "'_'", "+", "self", ".", "device", "+", "'.pt'", ")", ")", "\n", "", "self", ".", "save_metrics", "(", "self", ".", "metrics", ",", "path", "=", "self", ".", "path_save_metrics", ")", "\n", "", "progress_bar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.validate": [[128, 168], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "float", "float", "float", "volume.to.to.to", "coordinates.to.to.to", "labels.to.to.to", "actual.to.to.to", "isinstance", "loss_values.append", "iou_values.append", "bb_iou_values.append", "numpy.mean", "numpy.mean", "numpy.mean", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.module", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network", "ModelWrapper.OccupancyNetworkWrapper.loss_function().item", "Misc.intersection_over_union().item", "[].item", "ModelWrapper.OccupancyNetworkWrapper.loss_function", "Misc.intersection_over_union", "Misc.intersection_over_union_bounding_box"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union_bounding_box"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "self", ",", "threshold", ":", "float", "=", "0.5", ",", "offset", ":", "torch", ".", "Tensor", "=", "torch", ".", "tensor", "(", "[", "10.0", ",", "10.0", ",", "10.0", "]", ")", ")", "->", "Tuple", "[", "\n", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "'''\n        Validation method\n        :param threshold: (bool) Threshold utilized to calc metrics\n        :param offset: (torch.Tensor) Offset used for bounding box prediction\n        :return: (Tuple[float, float, float]) Validation metrics: loss, iou & bounding box iou\n        '''", "\n", "# Model into eval mode", "\n", "self", ".", "occupancy_network", ".", "eval", "(", ")", "\n", "# Init list to save loss, iou, bb iou", "\n", "loss_values", "=", "[", "]", "\n", "iou_values", "=", "[", "]", "\n", "bb_iou_values", "=", "[", "]", "\n", "# Loop over all indexes", "\n", "# Calc no grads", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Get data", "\n", "            ", "for", "volume", ",", "coordinates", ",", "labels", ",", "actual", "in", "self", ".", "validation_data", ":", "\n", "# Add batch size dim to data and to device", "\n", "                ", "volume", "=", "volume", ".", "to", "(", "self", ".", "device", ")", "\n", "coordinates", "=", "coordinates", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "actual", "=", "actual", ".", "to", "(", "self", ".", "device", ")", "\n", "# Get prediction of model", "\n", "if", "isinstance", "(", "self", ".", "occupancy_network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "prediction", "=", "self", ".", "occupancy_network", ".", "module", "(", "volume", ",", "coordinates", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "self", ".", "occupancy_network", "(", "volume", ",", "coordinates", ")", "\n", "# Calc loss", "\n", "", "loss_values", ".", "append", "(", "self", ".", "loss_function", "(", "prediction", ",", "labels", ")", ".", "item", "(", ")", ")", "\n", "# Calc iou", "\n", "iou_values", ".", "append", "(", "\n", "Misc", ".", "intersection_over_union", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "threshold", "=", "threshold", ")", ".", "item", "(", ")", ")", "\n", "# Calc bb iou", "\n", "bb_iou_values", ".", "append", "(", "\n", "Misc", ".", "intersection_over_union_bounding_box", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "\n", "threshold", "=", "threshold", ",", "offset", "=", "offset", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "", "", "return", "float", "(", "np", ".", "mean", "(", "loss_values", ")", ")", ",", "float", "(", "np", ".", "mean", "(", "iou_values", ")", ")", ",", "float", "(", "np", ".", "mean", "(", "bb_iou_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.test": [[169, 279], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "tqdm.tqdm.tqdm", "ModelWrapper.OccupancyNetworkWrapper.save_metrics", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "print", "print", "print", "print", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm.tqdm.close", "len", "tqdm.tqdm.tqdm.update", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.eval", "volume.to.to.to", "coordinates.to.to.to", "labels.to.to.to", "actual.to.to.to", "isinstance", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "actual.to.to.reshape", "Misc.intersection_over_union", "ModelWrapper.OccupancyNetworkWrapper.logging", "Misc.intersection_over_union_bounding_box", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "Misc.precision", "ModelWrapper.OccupancyNetworkWrapper.logging", "Misc.recall", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.loss_function", "ModelWrapper.OccupancyNetworkWrapper.logging", "Misc.get_tensor_size_mb", "Misc.get_tensor_size_mb", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "ModelWrapper.OccupancyNetworkWrapper.logging", "round", "round", "round", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network.module", "ModelWrapper.OccupancyNetworkWrapper.occupancy_network", "Misc.draw_test", "Misc.intersection_over_union.item", "iou_bounding_box.item", "bounding_box_prediction_shape[].item", "bounding_box_prediction_shape[].item", "bounding_box_prediction_shape[].item", "bounding_box_error[].item", "bounding_box_error[].item", "bounding_box_error[].item", "Misc.precision.item", "Misc.recall.item", "ModelWrapper.OccupancyNetworkWrapper.item", "Misc.get_tensor_size_mb"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.save_metrics", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union_bounding_box", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.precision", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.recall", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_tensor_size_mb", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_tensor_size_mb", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.draw_test", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_tensor_size_mb"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "self", ",", "draw", ":", "bool", "=", "True", ",", "side_len", ":", "int", "=", "1", ",", "threshold", ":", "float", "=", "0.5", ",", "\n", "offset", ":", "torch", ".", "tensor", "=", "torch", ".", "tensor", "(", "[", "10.0", ",", "10.0", ",", "10.0", "]", ")", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "'''\n        Testing method\n        :param draw: (bool) True if predictions should be drawn and save to .obj file\n        :param side_len: (int) Downscale of labels used\n        :param threshold: (bool) Threshold utilized to calc metrics\n        :param offset: (torch.Tensor) Offset used for bounding box prediction\n        :return: (Tuple[float, float, float, float]) Test metrics: iou, iou bounding box, precision, recall & loss\n        '''", "\n", "# Init progress bar", "\n", "progress_bar", "=", "tqdm", "(", "total", "=", "len", "(", "self", ".", "test_data", ")", ")", "\n", "# Get downsampling factor for input and calculate usampling factor", "\n", "upsample_factor", "=", "self", ".", "test_data", ".", "dataset", ".", "side_len", "**", "3", "\n", "# Calc no grads", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Iterate over test dataset", "\n", "            ", "for", "index", ",", "batch", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "# Update progress bar", "\n", "                ", "progress_bar", ".", "update", "(", "1", ")", "\n", "# Model into eval mode", "\n", "self", ".", "occupancy_network", ".", "eval", "(", ")", "\n", "# Get batch data", "\n", "volume", ",", "coordinates", ",", "labels", ",", "actual", "=", "batch", "\n", "# Data to device", "\n", "volume", "=", "volume", ".", "to", "(", "self", ".", "device", ")", "\n", "coordinates", "=", "coordinates", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "actual", "=", "actual", ".", "to", "(", "self", ".", "device", ")", "\n", "# Make prediction", "\n", "if", "isinstance", "(", "self", ".", "occupancy_network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "prediction", "=", "self", ".", "occupancy_network", ".", "module", "(", "volume", ",", "coordinates", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "self", ".", "occupancy_network", "(", "volume", ",", "coordinates", ")", "\n", "# Set offset", "\n", "", "prediction_offset", "=", "(", "prediction", ">", "threshold", ")", ".", "float", "(", ")", "\n", "# Reshape prediction offset tensor by removing dimension", "\n", "prediction_offset", "=", "torch", ".", "squeeze", "(", "prediction_offset", ")", "\n", "# Calc coordinates predicted as a weapon", "\n", "weapon_prediction", "=", "coordinates", "[", "prediction_offset", "==", "1.0", "]", "\n", "# Reshape actual tensor", "\n", "actual_", "=", "actual", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "# Draw weapon prediction", "\n", "if", "draw", ":", "\n", "                    ", "Misc", ".", "draw_test", "(", "weapon_prediction", ",", "actual_", ",", "volume", ",", "side_len", ",", "index", ",", "\n", "draw_out_path", "=", "self", ".", "path_save_metrics", ")", "\n", "# Calc intersection over union", "\n", "", "iou", "=", "Misc", ".", "intersection_over_union", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "threshold", "=", "threshold", ")", "\n", "self", ".", "logging", "(", "'iou'", ",", "iou", ".", "item", "(", ")", ")", "\n", "# Calc intersection over union for bounding box", "\n", "iou_bounding_box", ",", "bounding_box_prediction_shape", ",", "bounding_box_error", "=", "Misc", ".", "intersection_over_union_bounding_box", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "threshold", "=", "threshold", ",", "\n", "offset", "=", "offset", ")", "\n", "self", ".", "logging", "(", "'iou_bounding_box'", ",", "iou_bounding_box", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_shape_x'", ",", "bounding_box_prediction_shape", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_shape_y'", ",", "bounding_box_prediction_shape", "[", "1", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_shape_z'", ",", "bounding_box_prediction_shape", "[", "2", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_error_x'", ",", "bounding_box_error", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_error_y'", ",", "bounding_box_error", "[", "1", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "logging", "(", "'bounding_box_error_z'", ",", "bounding_box_error", "[", "2", "]", ".", "item", "(", ")", ")", "\n", "# Calc precision", "\n", "precision", "=", "Misc", ".", "precision", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "threshold", "=", "threshold", ")", "\n", "self", ".", "logging", "(", "'precision'", ",", "precision", ".", "item", "(", ")", ")", "\n", "# Calc recall", "\n", "recall", "=", "Misc", ".", "recall", "(", "prediction", ",", "coordinates", ",", "actual", "[", "0", "]", ",", "threshold", "=", "threshold", ")", "\n", "self", ".", "logging", "(", "'recall'", ",", "recall", ".", "item", "(", ")", ")", "\n", "# Calc loss", "\n", "loss", "=", "self", ".", "loss_function", "(", "prediction", ",", "labels", ")", "\n", "self", ".", "logging", "(", "'test_loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "# Get memory consumption of tensors (upsample volume to original)", "\n", "size_volume", "=", "Misc", ".", "get_tensor_size_mb", "(", "volume", ")", "*", "upsample_factor", "\n", "size_prediction", "=", "Misc", ".", "get_tensor_size_mb", "(", "prediction", ")", "\n", "size_actual", "=", "Misc", ".", "get_tensor_size_mb", "(", "actual", ")", "\n", "self", ".", "logging", "(", "'size_volume'", ",", "size_volume", ")", "\n", "self", ".", "logging", "(", "'size_prediction'", ",", "size_prediction", ")", "\n", "self", ".", "logging", "(", "'size_actual'", ",", "size_actual", ")", "\n", "\n", "# Close progress bar", "\n", "", "progress_bar", ".", "close", "(", ")", "\n", "# Save metrics", "\n", "", "self", ".", "save_metrics", "(", "self", ".", "metrics", ",", "path", "=", "self", ".", "path_save_metrics", ")", "\n", "# Get average metrics", "\n", "test_iou", "=", "self", ".", "get_average_metric", "(", "'iou'", ")", "\n", "test_iou_bounding_box", "=", "self", ".", "get_average_metric", "(", "'iou_bounding_box'", ")", "\n", "test_bounding_box_shape_x", "=", "self", ".", "get_average_metric", "(", "'bounding_box_shape_x'", ")", "\n", "test_bounding_box_shape_y", "=", "self", ".", "get_average_metric", "(", "'bounding_box_shape_y'", ")", "\n", "test_bounding_box_shape_z", "=", "self", ".", "get_average_metric", "(", "'bounding_box_shape_z'", ")", "\n", "test_bounding_box_error_x", "=", "self", ".", "get_average_metric", "(", "'bounding_box_error_x'", ")", "\n", "test_bounding_box_error_y", "=", "self", ".", "get_average_metric", "(", "'bounding_box_error_y'", ")", "\n", "test_bounding_box_error_z", "=", "self", ".", "get_average_metric", "(", "'bounding_box_error_z'", ")", "\n", "test_precision", "=", "self", ".", "get_average_metric", "(", "'precision'", ")", "\n", "test_recall", "=", "self", ".", "get_average_metric", "(", "'recall'", ")", "\n", "test_loss", "=", "self", ".", "get_average_metric", "(", "'test_loss'", ")", "\n", "test_size_volume", "=", "self", ".", "get_average_metric", "(", "'size_volume'", ")", "\n", "test_size_prediction", "=", "self", ".", "get_average_metric", "(", "'size_prediction'", ")", "\n", "test_size_actual", "=", "self", ".", "get_average_metric", "(", "'size_actual'", ")", "\n", "# Print metrics", "\n", "print", "(", "'Intersection over union = {}'", ".", "format", "(", "test_iou", ")", ")", "\n", "print", "(", "'Intersection over union bounding box = {}'", ".", "format", "(", "test_iou_bounding_box", ")", ")", "\n", "print", "(", "'Mean bounding box shape = {}, {}, {}'", ".", "format", "(", "test_bounding_box_shape_x", ",", "test_bounding_box_shape_y", ",", "\n", "test_bounding_box_shape_z", ")", ")", "\n", "print", "(", "'Mean bounding box error = {}, {}, {}'", ".", "format", "(", "test_bounding_box_error_x", ",", "test_bounding_box_error_y", ",", "\n", "test_bounding_box_error_z", ")", ")", "\n", "print", "(", "'Precision = {}'", ".", "format", "(", "test_precision", ")", ")", "\n", "print", "(", "'Recall = {}'", ".", "format", "(", "test_recall", ")", ")", "\n", "print", "(", "'Test loss = {}'", ".", "format", "(", "test_loss", ")", ")", "\n", "print", "(", "'Average memory usage per sample: Original volume = {}MB, Label = {}MB, Prediction = {}MB'", ".", "format", "(", "\n", "round", "(", "test_size_volume", ",", "2", ")", ",", "round", "(", "test_size_actual", ",", "2", ")", ",", "round", "(", "test_size_prediction", ",", "2", ")", ")", ")", "\n", "return", "test_iou", ",", "test_iou_bounding_box", ",", "test_precision", ",", "test_recall", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.logging": [[280, 293], ["ModelWrapper.OccupancyNetworkWrapper.metrics[].append"], "methods", ["None"], ["", "def", "logging", "(", "self", ",", "metric_name", ":", "str", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method writes a given metric value into a dict including list for every metric\n        :param metric_name: (str) Name of the metric\n        :param value: (float) Value of the metric\n        \"\"\"", "\n", "if", "metric_name", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "return", "\n", "", "else", ":", "\n", "                ", "self", ".", "metrics", "[", "metric_name", "]", ".", "append", "(", "value", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "metrics", "[", "metric_name", "]", "=", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric_for_epoch": [[294, 307], ["numpy.array", "numpy.array", "numpy.mean", "float", "numpy.argwhere"], "methods", ["None"], ["", "", "def", "get_average_metric_for_epoch", "(", "self", ",", "metric_name", ":", "str", ",", "epoch", ":", "int", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Method calculates the average of a metric for a given epoch\n        :param metric_name: (str) Name of the metric\n        :param epoch: (int) Epoch to average over\n        :return: (float) Average metric\n        \"\"\"", "\n", "# Convert lists to np.array", "\n", "metric", "=", "np", ".", "array", "(", "self", ".", "metrics", "[", "metric_name", "]", ")", "\n", "epochs", "=", "np", ".", "array", "(", "self", ".", "metrics", "[", "'epoch'", "]", ")", "\n", "# Calc mean", "\n", "metric_average", "=", "np", ".", "mean", "(", "metric", "[", "np", ".", "argwhere", "(", "epochs", "==", "epoch", ")", "]", ")", "\n", "return", "float", "(", "metric_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.get_average_metric": [[308, 319], ["numpy.array", "numpy.mean", "float"], "methods", ["None"], ["", "def", "get_average_metric", "(", "self", ",", "metric_name", ":", "str", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Method calculates the average of a metric\n        :param metric_name: (str) Name of the metric\n        :return: (float) Average metric\n        \"\"\"", "\n", "# Convert lists to np.array", "\n", "metric", "=", "np", ".", "array", "(", "self", ".", "metrics", "[", "metric_name", "]", ")", "\n", "# Calc mean", "\n", "metric_average", "=", "np", ".", "mean", "(", "metric", ")", "\n", "return", "float", "(", "metric_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.save_metrics": [[320, 337], ["metrics.items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "datetime.now().strftime", "datetime.now"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_metrics", "(", "metrics", ":", "Dict", "[", "str", ",", "List", "[", "float", "]", "]", ",", "path", ":", "str", ",", "add_time_to_file_name", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Static method to save dict of metrics\n        :param metrics: (Dict[str, List[float]]) Dict including metrics\n        :param path: (str) Path to save metrics\n        :param add_time_to_file_name: (bool) True if time has to be added to filename of every metric\n        \"\"\"", "\n", "# Iterate items in metrics dict", "\n", "for", "metric_name", ",", "values", "in", "metrics", ".", "items", "(", ")", ":", "\n", "# Convert list of values to torch tensor to use build in save method from torch", "\n", "            ", "values", "=", "torch", ".", "tensor", "(", "values", ")", "\n", "# Save values", "\n", "if", "add_time_to_file_name", ":", "\n", "                ", "torch", ".", "save", "(", "values", ",", "path", "+", "'/'", "+", "metric_name", "+", "'_'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%H:%M:%S\"", ")", "+", "'.pt'", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "values", ",", "path", "+", "'/'", "+", "metric_name", "+", "'.pt'", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Lossfunctions.DiceLoss.__init__": [[12, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__"], ["def", "__init__", "(", "self", ",", "smooth", ":", "float", "=", "1.0", ")", "->", "None", ":", "\n", "        ", "'''\n        Constructor method\n        :param smooth: (float) Smoothness factor used in computing the dice loss\n        '''", "\n", "# Call super constructor", "\n", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Lossfunctions.DiceLoss.forward": [[21, 38], ["prediction.view.view.view", "label.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prediction", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "'''\n        Forward method calculates the dice loss\n        :param prediction: (torch.tensor) Prediction tensor including probabilities\n        :param label: (torch.tensor) Label tensor (one-hot encoded)\n        :return: (torch.tensor) Dice loss\n        '''", "\n", "# Flatten prediction and label", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "# Calc intersection", "\n", "intersect", "=", "torch", ".", "sum", "(", "(", "prediction", "*", "label", ")", ")", "+", "self", ".", "smooth", "\n", "# Calc union", "\n", "union", "=", "torch", ".", "sum", "(", "prediction", ")", "+", "torch", ".", "sum", "(", "label", ")", "+", "self", ".", "smooth", "\n", "# Calc dice loss", "\n", "dice_loss", "=", "1.0", "-", "(", "(", "2.0", "*", "intersect", ")", "/", "(", "union", ")", ")", "\n", "return", "dice_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Lossfunctions.FocalLoss.__init__": [[46, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "float", "=", "1.0", ",", "gamma", ":", "float", "=", "2.0", ",", "reduce", ":", "str", "=", "'mean'", ")", "->", "None", ":", "\n", "        ", "'''\n        Constructor method\n        :param alpha: (float) Alpha constant (see paper)\n        :param gamma: (float) Gamma constant (ses paper)\n        :param reduce: (str) Reduction operation (mean, sum or none)\n        '''", "\n", "# Call super constructor", "\n", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Check reduce parameter", "\n", "assert", "reduce", "in", "[", "'mean'", ",", "'sum'", ",", "'none'", "]", ",", "'Illegal value of reduce parameter. Use mean, sum or none.'", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Lossfunctions.FocalLoss.forward": [[61, 78], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prediction", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "'''\n        Forward method calculates the dice loss\n        :param prediction: (torch.tensor) Prediction tensor including probabilities\n        :param label: (torch.tensor) Label tensor (one-hot encoded)\n        :return: (torch.tensor) Dice loss\n        '''", "\n", "# Calc binary cross entropy loss", "\n", "cross_entropy_loss", "=", "F", ".", "binary_cross_entropy", "(", "prediction", ",", "label", ",", "reduction", "=", "'none'", ")", "\n", "# Calc focal loss", "\n", "focal_loss", "=", "self", ".", "alpha", "*", "(", "1.0", "-", "prediction", ")", "**", "self", ".", "gamma", "*", "cross_entropy_loss", "\n", "# Reduce loss", "\n", "if", "self", ".", "reduce", "==", "'mean'", ":", "\n", "            ", "focal_loss", "=", "torch", ".", "mean", "(", "focal_loss", ")", "\n", "", "elif", "self", ".", "reduce", "==", "'sum'", ":", "\n", "            ", "focal_loss", "=", "torch", ".", "sum", "(", "focal_loss", ")", "\n", "", "return", "focal_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.__init__": [[11, 13], ["time.process_time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "process_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.stop": [[14, 16], ["time.process_time"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "process_time", "(", ")", "-", "self", ".", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.WeaponDatasetGenerator.__init__": [[23, 56], ["int", "DatasetGenerator.Timer", "os.walk", "os.walk", "os.walk", "os.walk", "enumerate", "print", "len", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "DatasetGenerator.Timer.stop", "file.endswith", "l.startswith", "mixed_labels.append", "DatasetGenerator.WeaponDatasetGenerator.data.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.stop"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "target_path", ",", "start_index", "=", "0", ",", "end_index", "=", "-", "1", ",", "threshold_min", "=", "0", ",", "threshold_max", "=", "50000", ",", "\n", "dim_max", "=", "640", ",", "side_len", "=", "16", ")", ":", "\n", "        ", "self", ".", "threshold_min", "=", "threshold_min", "\n", "self", ".", "threshold_max", "=", "threshold_max", "\n", "self", ".", "side_len", "=", "side_len", "\n", "self", ".", "dim_max", "=", "int", "(", "dim_max", "/", "side_len", ")", "\n", "self", ".", "target_path", "=", "target_path", "\n", "self", ".", "device", "=", "'cuda'", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "mixed_labels", "=", "[", "]", "\n", "t1", "=", "Timer", "(", ")", "\n", "for", "direc", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "root", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "\".mha\"", ")", ":", "\n", "                    ", "if", "\"label\"", "in", "file", ":", "\n", "# label annotation file", "\n", "                        ", "mixed_labels", ".", "append", "(", "os", ".", "path", ".", "join", "(", "direc", ",", "file", ")", ")", "\n", "", "else", ":", "\n", "# regular data file", "\n", "                        ", "self", ".", "data", ".", "append", "(", "os", ".", "path", ".", "join", "(", "direc", ",", "file", ")", ")", "\n", "\n", "", "", "", "", "self", ".", "labels", "=", "[", "None", "]", "*", "len", "(", "self", ".", "data", ")", "\n", "# match data files with label files", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "d", ")", "\n", "for", "l", "in", "mixed_labels", ":", "\n", "                ", "if", "l", ".", "startswith", "(", "name", ")", ":", "\n", "                    ", "self", ".", "labels", "[", "i", "]", "=", "l", "\n", "break", "\n", "", "", "", "self", ".", "data", "=", "self", ".", "data", "[", "start_index", ":", "end_index", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "start_index", ":", "end_index", "]", "\n", "print", "(", "\"File paths\"", ",", "t1", ".", "stop", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.WeaponDatasetGenerator.generate_data": [[58, 99], ["range", "len", "print", "itk.imread", "DatasetGenerator.Timer", "itk.imread", "itk.GetArrayFromImage", "numpy.expand_dims", "print", "DatasetGenerator.Timer", "torch.nn.functional.avg_pool3d", "torch.nn.functional.avg_pool3d", "print", "DatasetGenerator.Timer", "torch.nn.functional.pad", "torch.nn.functional.pad", "print", "numpy.save", "itk.GetArrayFromImage", "numpy.argwhere", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.save", "len", "numpy.flip", "float", "DatasetGenerator.Timer.stop", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "DatasetGenerator.Timer.stop", "DatasetGenerator.Timer.stop", "torch.nn.functional.pad.cpu().numpy().astype", "numpy.concatenate().astype", "numpy.array", "[].split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "torch.nn.functional.pad.cpu().numpy", "str", "numpy.concatenate", "torch.nn.functional.pad.cpu", "itk.imread.GetMetaDataDictionary"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.stop", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.stop", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.Timer.stop"], ["", "def", "generate_data", "(", "self", ")", ":", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "print", "(", "index", ",", "\"/\"", ",", "len", "(", "self", ".", "data", ")", ")", "\n", "data_file", "=", "self", ".", "data", "[", "index", "]", "\n", "label_file", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "# Check if label in place", "\n", "labels", "=", "itk", ".", "imread", "(", "label_file", ")", "\n", "try", ":", "\n", "                ", "offsets_n", "=", "np", ".", "flip", "(", "np", ".", "array", "(", "labels", ".", "GetMetaDataDictionary", "(", ")", "[", "\"DomainFirst\"", "]", ".", "split", "(", "\" \"", ")", ",", "dtype", "=", "np", ".", "int", ")", ",", "0", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "# load data using itk", "\n", "", "t2", "=", "Timer", "(", ")", "\n", "# First take care of volume", "\n", "image", "=", "itk", ".", "imread", "(", "data_file", ")", "\n", "\n", "volume_n", "=", "itk", ".", "GetArrayFromImage", "(", "image", ")", "\n", "volume_n", "=", "(", "volume_n", "-", "self", ".", "threshold_min", ")", ".", "astype", "(", "np", ".", "float", ")", "/", "float", "(", "self", ".", "threshold_max", "-", "self", ".", "threshold_min", ")", "\n", "volume_n", "=", "np", ".", "expand_dims", "(", "volume_n", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\"Read image\"", ",", "t2", ".", "stop", "(", ")", ")", "\n", "\n", "t3", "=", "Timer", "(", ")", "\n", "volume_pooled_tg", "=", "nn", ".", "functional", ".", "avg_pool3d", "(", "torch", ".", "from_numpy", "(", "volume_n", ")", ".", "to", "(", "self", ".", "device", ")", ",", "self", ".", "side_len", ",", "self", ".", "side_len", ")", "\n", "print", "(", "\"Downsampling\"", ",", "t3", ".", "stop", "(", ")", ")", "\n", "t4", "=", "Timer", "(", ")", "\n", "volume_pooled_tg", "=", "volume_pooled_tg", "[", ":", ",", "0", ":", "self", ".", "dim_max", ",", ":", ",", ":", "]", "\n", "volume_pooled_tg", "=", "nn", ".", "functional", ".", "pad", "(", "volume_pooled_tg", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "self", ".", "dim_max", "-", "volume_pooled_tg", ".", "shape", "[", "1", "]", ")", ")", "\n", "print", "(", "\"Padding\"", ",", "t4", ".", "stop", "(", ")", ")", "\n", "np", ".", "save", "(", "self", ".", "target_path", "+", "str", "(", "index", ")", "+", "\".npy\"", ",", "volume_pooled_tg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "# Take care of labels and store coords", "\n", "labels_n", "=", "itk", ".", "GetArrayFromImage", "(", "labels", ")", "\n", "\n", "labels_indices_n", "=", "np", ".", "argwhere", "(", "labels_n", ")", "\n", "x_n", "=", "np", ".", "expand_dims", "(", "labels_indices_n", "[", ":", ",", "0", "]", "+", "offsets_n", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "y_n", "=", "np", ".", "expand_dims", "(", "labels_indices_n", "[", ":", ",", "1", "]", "+", "offsets_n", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "z_n", "=", "np", ".", "expand_dims", "(", "labels_indices_n", "[", ":", ",", "2", "]", "+", "offsets_n", "[", "2", "]", ",", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "self", ".", "target_path", "+", "str", "(", "index", ")", "+", "\"_label.npy\"", ",", "np", ".", "concatenate", "(", "(", "x_n", ",", "y_n", ",", "z_n", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.DatasetGenerator.get_colour": [[18, 20], ["None"], "function", ["None"], ["", "", "def", "get_colour", "(", "x", ",", "N", ")", ":", "\n", "    ", "return", "(", "x", "/", "N", ",", "0.5", ",", "0.5", ")", "\n", "#return colorsys.hsv_to_rgb(x*1.0/N, 0.5, 0.5)", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.VolumeEncoderBlock.__init__": [[14, 56], ["torch.Module.__init__", "Misc.get_activation", "Misc.get_activation", "Misc.get_normalization_3d", "Misc.get_normalization_3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "Misc.get_downsampling_3d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_3d", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_3d", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_downsampling_3d"], ["def", "__init__", "(", "self", ",", "input_channels", ":", "int", ",", "output_channels", ":", "int", ",", "kernel_size", ":", "int", "=", "3", ",", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "1", ",", "activation", ":", "str", "=", "'prelu'", ",", "downsampling", ":", "str", "=", "'averagepool'", ",", "\n", "downsampling_factor", ":", "int", "=", "2", ",", "normalization", ":", "str", "=", "'batchnorm'", ",", "dropout_rate", ":", "float", "=", "0.0", ",", "\n", "bias", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Constructor method\n        :param input_channels: (int) Number of input channels\n        :param output_channels: (int) Number of output channels\n        :param kernel_size: (int) Filter size of convolution\n        :param stride: (int) Stride factor of convolution\n        :param padding: (int) Padding used in every convolution\n        :param activation: (str) Type of activation function\n        :param downsampling: (str) Type of downsampling operation\n        :param downsampling_factor: (int) Downsampling factor to use\n        :param normalization: (str) Type of normalization operation used\n        :param dropout_rate: (float) Dropout rate to perform after every stage\n        :param bias: (bool) True to use bias in convolution operations\n        \"\"\"", "\n", "# Call super constructor", "\n", "super", "(", "VolumeEncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Save dropout rate", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "# Init activations", "\n", "self", ".", "activation_1", "=", "Misc", ".", "get_activation", "(", "activation", "=", "activation", ")", "\n", "self", ".", "activation_2", "=", "Misc", ".", "get_activation", "(", "activation", "=", "activation", ")", "\n", "# Init normalizations", "\n", "self", ".", "normalization_1", "=", "Misc", ".", "get_normalization_3d", "(", "normalization", "=", "normalization", ",", "channels", "=", "output_channels", ")", "\n", "self", ".", "normalization_2", "=", "Misc", ".", "get_normalization_3d", "(", "normalization", "=", "normalization", ",", "channels", "=", "output_channels", ")", "\n", "# Init convolutions", "\n", "self", ".", "convolution_1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "output_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "convolution_2", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "output_channels", ",", "out_channels", "=", "output_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "# Init residual mapping", "\n", "if", "input_channels", "==", "output_channels", ":", "\n", "            ", "self", ".", "residual_mapping", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual_mapping", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "output_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "bias", ")", "\n", "# Init downsampling operation", "\n", "", "self", ".", "downsampling", "=", "Misc", ".", "get_downsampling_3d", "(", "downsampling", "=", "downsampling", ",", "factor", "=", "downsampling_factor", ",", "\n", "channels", "=", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.VolumeEncoderBlock.forward": [[57, 79], ["ModelParts.VolumeEncoderBlock.convolution_1", "ModelParts.VolumeEncoderBlock.normalization_1", "ModelParts.VolumeEncoderBlock.activation_1", "ModelParts.VolumeEncoderBlock.convolution_2", "ModelParts.VolumeEncoderBlock.normalization_2", "ModelParts.VolumeEncoderBlock.activation_2", "ModelParts.VolumeEncoderBlock.downsampling", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "ModelParts.VolumeEncoderBlock.residual_mapping"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass of the basic volume decoder block\n        :param input: (torch.tensor) Input volume with shape (batch size, channels_in, x_in, y_in, z_in)\n        :return: (torch.tensor) Output tensor with shape (batch size, channels_out, x_out, y_out, z_out)\n        \"\"\"", "\n", "# First stage", "\n", "output", "=", "self", ".", "convolution_1", "(", "input", ")", "\n", "output", "=", "self", ".", "normalization_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_1", "(", "output", ")", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "# Perform dropout", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "# Second stage", "\n", "", "output", "=", "self", ".", "convolution_2", "(", "output", ")", "\n", "output", "=", "self", ".", "normalization_2", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_2", "(", "output", ")", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "# Perform dropout", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "", "output", "=", "output", "+", "self", ".", "residual_mapping", "(", "input", ")", "\n", "# Downsampling stage", "\n", "output", "=", "self", ".", "downsampling", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.CoordinatesFullyConnectedBlock.__init__": [[87, 117], ["torch.Module.__init__", "Misc.get_activation", "Misc.get_activation", "Misc.get_normalization_1d", "Misc.get_normalization_1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_1d", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_1d"], ["def", "__init__", "(", "self", ",", "input_channels", ":", "int", ",", "output_channels", ":", "int", ",", "activation", ":", "str", "=", "'selu'", ",", "\n", "normalization", ":", "str", "=", "'batchnorm'", ",", "dropout_rate", ":", "float", "=", "0.0", ",", "bias", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Constructor method\n        :param input_channels: (int) Number of input channels\n        :param output_channels: (int) Number of output channels\n        :param activation: (str) Type of activation function to use\n        :param normalization: (str) Type of normalization operation to use\n        :param dropout_rate: (float) Dropout rate to perform\n        \"\"\"", "\n", "# Call super constructor", "\n", "super", "(", "CoordinatesFullyConnectedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Save dropout rate", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "# Init activations", "\n", "self", ".", "activation_1", "=", "Misc", ".", "get_activation", "(", "activation", "=", "activation", ")", "\n", "self", ".", "activation_2", "=", "Misc", ".", "get_activation", "(", "activation", "=", "activation", ")", "\n", "# Init normalizations", "\n", "self", ".", "normalization_1", "=", "Misc", ".", "get_normalization_1d", "(", "normalization", "=", "normalization", ",", "channels", "=", "output_channels", ",", "\n", "channels_latent", "=", "480", ")", "\n", "self", ".", "normalization_2", "=", "Misc", ".", "get_normalization_1d", "(", "normalization", "=", "normalization", ",", "channels", "=", "output_channels", ",", "\n", "channels_latent", "=", "480", ")", "\n", "# Init linear operations", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "in_features", "=", "input_channels", ",", "out_features", "=", "output_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "linear_2", "=", "nn", ".", "Linear", "(", "in_features", "=", "output_channels", ",", "out_features", "=", "output_channels", ",", "bias", "=", "bias", ")", "\n", "# Init residual operation", "\n", "if", "input_channels", "==", "output_channels", ":", "\n", "            ", "self", ".", "residual_mapping", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual_mapping", "=", "nn", ".", "Linear", "(", "in_features", "=", "input_channels", ",", "out_features", "=", "output_channels", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.CoordinatesFullyConnectedBlock.forward": [[118, 153], ["ModelParts.CoordinatesFullyConnectedBlock.linear_1", "isinstance", "ModelParts.CoordinatesFullyConnectedBlock.activation_1", "ModelParts.CoordinatesFullyConnectedBlock.linear_2", "isinstance", "ModelParts.CoordinatesFullyConnectedBlock.activation_2", "ModelParts.CoordinatesFullyConnectedBlock.normalization_1", "ModelParts.CoordinatesFullyConnectedBlock.normalization_1", "torch.dropout", "torch.dropout", "torch.dropout", "ModelParts.CoordinatesFullyConnectedBlock.normalization_2", "ModelParts.CoordinatesFullyConnectedBlock.normalization_2", "torch.dropout", "torch.dropout", "torch.dropout", "ModelParts.CoordinatesFullyConnectedBlock.residual_mapping"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "latent_tensor", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass of the fully connected residual block\n        :param input: (torch.tensor) Input coordinates with shape (batch size, channels_in)\n        :return: (torch.tensor) Output tensor with shape (batch size, channels_out)\n        \"\"\"", "\n", "# First stage", "\n", "# Linear layer", "\n", "output", "=", "self", ".", "linear_1", "(", "input", ")", "\n", "# Normalization", "\n", "if", "isinstance", "(", "self", ".", "normalization_1", ",", "ConditionalBatchNorm1d", ")", ":", "\n", "            ", "output", "=", "self", ".", "normalization_1", "(", "output", ",", "latent_tensor", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "normalization_1", "(", "output", ")", "\n", "# Activation", "\n", "", "output", "=", "self", ".", "activation_1", "(", "output", ")", "\n", "# Perform dropout", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "# Second stage", "\n", "# Linear layer", "\n", "", "output", "=", "self", ".", "linear_2", "(", "output", ")", "\n", "# Normalization", "\n", "if", "isinstance", "(", "self", ".", "normalization_2", ",", "ConditionalBatchNorm1d", ")", ":", "\n", "            ", "output", "=", "self", ".", "normalization_2", "(", "output", ",", "latent_tensor", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "normalization_2", "(", "output", ")", "\n", "# Activation", "\n", "", "output", "=", "self", ".", "activation_2", "(", "output", ")", "\n", "# Perform dropout", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "# Residual mapping", "\n", "", "output", "=", "output", "+", "self", ".", "residual_mapping", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.ConditionalBatchNorm1d.__init__": [[160, 177], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "Misc.get_normalization_1d", "ModelParts.ConditionalBatchNorm1d.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_1d", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.ConditionalBatchNorm1d.reset_parameters"], ["def", "__init__", "(", "self", ",", "latent_channels", ":", "int", ",", "output_channels", ":", "int", ",", "bias", ":", "bool", "=", "True", ",", "\n", "normalization", ":", "str", "=", "'batchnorm'", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Conditional batch normalization module including two 1D convolutions to predict gamma end beta\n        :param latent_channels: (int) Features of the latent vector\n        :param output_channels: (int) Features of the output vector to be normalized\n        :param bias: (int) True if bias should be used in linear layer\n        :param normalization: (str) Type of normalization to normalize feature tensor before using gamma and  beta\n        \"\"\"", "\n", "super", "(", "ConditionalBatchNorm1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Init operations", "\n", "self", ".", "linear_gamma", "=", "nn", ".", "Linear", "(", "in_features", "=", "latent_channels", ",", "out_features", "=", "output_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "linear_beta", "=", "nn", ".", "Linear", "(", "in_features", "=", "latent_channels", ",", "out_features", "=", "output_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "normalization", "=", "Misc", ".", "get_normalization_1d", "(", "normalization", "=", "normalization", ",", "channels", "=", "output_channels", ",", "\n", "affine", "=", "False", ")", "# affine=False -> gamma & beta not used", "\n", "# Reset parameters of convolutions", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.ConditionalBatchNorm1d.reset_parameters": [[178, 186], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method resets the parameter of the convolution to predict gamma and beta\n        \"\"\"", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "linear_gamma", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "linear_beta", ".", "weight", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "linear_gamma", ".", "bias", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "linear_beta", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.ConditionalBatchNorm1d.forward": [[187, 205], ["ModelParts.ConditionalBatchNorm1d.linear_gamma", "ModelParts.ConditionalBatchNorm1d.linear_beta", "ModelParts.ConditionalBatchNorm1d.normalization", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "latent_vector", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass\n        :param input: (torch.Tensor) Input tensor to be normalized of shape (batch size coordinates, features)\n        :param latent_vector: (torch.Tensor) Latent vector tensor of shape (batch_size, features)\n        :return: (torch.Tensor) Normalized tensor\n        \"\"\"", "\n", "# Perform convolutions to estimate gamma and beta", "\n", "gamma", "=", "self", ".", "linear_gamma", "(", "latent_vector", ")", "\n", "beta", "=", "self", ".", "linear_beta", "(", "latent_vector", ")", "\n", "# Perform normalization", "\n", "output_normalized", "=", "self", ".", "normalization", "(", "input", ")", "\n", "# Repeat gamma and beta to apply factors to every coordinate", "\n", "gamma", "=", "torch", ".", "repeat_interleave", "(", "gamma", ",", "int", "(", "output_normalized", ".", "shape", "[", "0", "]", "/", "gamma", ".", "shape", "[", "0", "]", ")", ",", "dim", "=", "0", ")", "\n", "beta", "=", "torch", ".", "repeat_interleave", "(", "beta", ",", "int", "(", "output_normalized", ".", "shape", "[", "0", "]", "/", "beta", ".", "shape", "[", "0", "]", ")", ",", "dim", "=", "0", ")", "\n", "# Add factors", "\n", "output", "=", "gamma", "*", "output_normalized", "+", "beta", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.InstanceNorm1d.__init__": [[212, 215], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "# Call super constructor", "\n", "        ", "super", "(", "InstanceNorm1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelParts.InstanceNorm1d.forward": [[216, 218], ["input.std", "input.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "(", "input", "-", "input", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "/", "input", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.FilePermutation.__init__": [[405, 688], ["os.listdir", "permutation.append", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "permute", "=", "[", "756", ",", "1796", ",", "1918", ",", "1115", ",", "139", ",", "1650", ",", "1002", ",", "1906", ",", "519", ",", "1250", ",", "2655", ",", "\n", "793", ",", "999", ",", "390", ",", "1444", ",", "1519", ",", "2777", ",", "843", ",", "955", ",", "2917", ",", "784", ",", "875", ",", "\n", "1944", ",", "2009", ",", "2608", ",", "1679", ",", "1507", ",", "202", ",", "2912", ",", "179", ",", "2274", ",", "1052", ",", "2418", ",", "\n", "1603", ",", "2480", ",", "1051", ",", "1934", ",", "729", ",", "2114", ",", "681", ",", "2134", ",", "408", ",", "2707", ",", "2047", ",", "\n", "1109", ",", "1278", ",", "1908", ",", "355", ",", "18", ",", "1069", ",", "2077", ",", "2412", ",", "2051", ",", "1233", ",", "2364", ",", "\n", "858", ",", "1083", ",", "1143", ",", "1805", ",", "1022", ",", "2897", ",", "2709", ",", "370", ",", "2259", ",", "2732", ",", "522", ",", "\n", "2646", ",", "2911", ",", "2022", ",", "1891", ",", "935", ",", "2023", ",", "336", ",", "2934", ",", "575", ",", "1122", ",", "56", ",", "\n", "2806", ",", "1362", ",", "1000", ",", "1108", ",", "2172", ",", "1272", ",", "2122", ",", "1748", ",", "2371", ",", "1512", ",", "2669", ",", "\n", "2840", ",", "257", ",", "432", ",", "1903", ",", "2819", ",", "2240", ",", "2684", ",", "2017", ",", "2697", ",", "413", ",", "2604", ",", "\n", "531", ",", "2057", ",", "1344", ",", "588", ",", "2637", ",", "2038", ",", "1244", ",", "2734", ",", "2029", ",", "2894", ",", "623", ",", "\n", "1473", ",", "924", ",", "1410", ",", "2258", ",", "2042", ",", "371", ",", "163", ",", "1991", ",", "1461", ",", "2188", ",", "2941", ",", "\n", "653", ",", "1852", ",", "491", ",", "2469", ",", "1663", ",", "893", ",", "1769", ",", "2334", ",", "2397", ",", "1691", ",", "1942", ",", "\n", "138", ",", "1920", ",", "1378", ",", "263", ",", "1403", ",", "2282", ",", "874", ",", "1256", ",", "110", ",", "2587", ",", "244", ",", "\n", "733", ",", "286", ",", "1423", ",", "1057", ",", "20", ",", "2509", ",", "845", ",", "1685", ",", "81", ",", "1566", ",", "1997", ",", "\n", "2167", ",", "2856", ",", "2884", ",", "2602", ",", "241", ",", "537", ",", "2440", ",", "416", ",", "1822", ",", "589", ",", "2389", ",", "\n", "2448", ",", "2865", ",", "1951", ",", "1684", ",", "1614", ",", "2197", ",", "1738", ",", "909", ",", "71", ",", "2335", ",", "1136", ",", "\n", "379", ",", "714", ",", "896", ",", "347", ",", "1427", ",", "2206", ",", "1308", ",", "735", ",", "2555", ",", "2063", ",", "2312", ",", "\n", "2705", ",", "1290", ",", "2343", ",", "342", ",", "585", ",", "819", ",", "1882", ",", "2549", ",", "2876", ",", "2442", ",", "294", ",", "\n", "1787", ",", "2944", ",", "1570", ",", "2596", ",", "2266", ",", "90", ",", "980", ",", "2360", ",", "2255", ",", "2396", ",", "2433", ",", "\n", "787", ",", "1711", ",", "121", ",", "2165", ",", "1182", ",", "2909", ",", "2921", ",", "51", ",", "1794", ",", "302", ",", "759", ",", "\n", "2733", ",", "1196", ",", "827", ",", "1931", ",", "962", ",", "1502", ",", "2313", ",", "91", ",", "1897", ",", "2264", ",", "1994", ",", "\n", "2303", ",", "794", ",", "1628", ",", "2696", ",", "1264", ",", "770", ",", "897", ",", "1261", ",", "2192", ",", "774", ",", "0", ",", "\n", "2904", ",", "2841", ",", "1422", ",", "1789", ",", "319", ",", "129", ",", "1873", ",", "2416", ",", "1439", ",", "492", ",", "1611", ",", "\n", "1121", ",", "959", ",", "2279", ",", "2276", ",", "2265", ",", "1894", ",", "189", ",", "2473", ",", "1774", ",", "2317", ",", "1299", ",", "\n", "46", ",", "1880", ",", "1456", ",", "1972", ",", "1361", ",", "185", ",", "1112", ",", "2848", ",", "2751", ",", "1303", ",", "811", ",", "\n", "1384", ",", "2914", ",", "2257", ",", "469", ",", "427", ",", "818", ",", "45", ",", "2611", ",", "69", ",", "1326", ",", "1715", ",", "\n", "2481", ",", "2049", ",", "872", ",", "1674", ",", "1928", ",", "1341", ",", "1003", ",", "1617", ",", "308", ",", "310", ",", "2026", ",", "\n", "2504", ",", "255", ",", "2372", ",", "2526", ",", "1098", ",", "462", ",", "2278", ",", "2530", ",", "958", ",", "2629", ",", "2402", ",", "\n", "979", ",", "268", ",", "463", ",", "863", ",", "271", ",", "2936", ",", "1458", ",", "136", ",", "2578", ",", "533", ",", "2672", ",", "\n", "528", ",", "2225", ",", "2330", ",", "503", ",", "321", ",", "328", ",", "246", ",", "1850", ",", "2514", ",", "841", ",", "2435", ",", "\n", "2449", ",", "569", ",", "1763", ",", "482", ",", "1518", ",", "1015", ",", "2292", ",", "2690", ",", "1296", ",", "2254", ",", "481", ",", "\n", "796", ",", "905", ",", "2173", ",", "771", ",", "1368", ",", "464", ",", "993", ",", "1353", ",", "2451", ",", "553", ",", "1171", ",", "\n", "1255", ",", "1760", ",", "2200", ",", "532", ",", "2176", ",", "1509", ",", "86", ",", "2156", ",", "1048", ",", "1033", ",", "2826", ",", "\n", "1946", ",", "1546", ",", "2786", ",", "1537", ",", "1924", ",", "2755", ",", "552", ",", "801", ",", "1318", ",", "1802", ",", "2072", ",", "\n", "1245", ",", "2455", ",", "104", ",", "1557", ",", "931", ",", "199", ",", "1889", ",", "1390", ",", "840", ",", "2186", ",", "467", ",", "\n", "871", ",", "809", ",", "2089", ",", "2484", ",", "107", ",", "2101", ",", "1178", ",", "2133", ",", "2152", ",", "126", ",", "2943", ",", "\n", "1128", ",", "1954", ",", "779", ",", "1696", ",", "2523", ",", "2044", ",", "1713", ",", "2838", ",", "967", ",", "697", ",", "2321", ",", "\n", "2126", ",", "1913", ",", "2853", ",", "780", ",", "156", ",", "2742", ",", "1666", ",", "1087", ",", "341", ",", "1187", ",", "1168", ",", "\n", "144", ",", "109", ",", "2945", ",", "1565", ",", "2867", ",", "643", ",", "1746", ",", "22", ",", "1550", ",", "160", ",", "2304", ",", "\n", "1243", ",", "1495", ",", "1317", ",", "1545", ",", "828", ",", "2355", ",", "2532", ",", "2487", ",", "1095", ",", "1014", ",", "2275", ",", "\n", "1945", ",", "2927", ",", "1455", ",", "270", ",", "2338", ",", "1780", ",", "2722", ",", "314", ",", "2937", ",", "2634", ",", "1484", ",", "\n", "1188", ",", "1831", ",", "620", ",", "1990", ",", "106", ",", "876", ",", "1214", ",", "287", ",", "1309", ",", "2580", ",", "2319", ",", "\n", "1657", ",", "949", ",", "1082", ",", "2444", ",", "362", ",", "2502", ",", "992", ",", "1421", ",", "1936", ",", "633", ",", "1263", ",", "\n", "2202", ",", "2378", ",", "204", ",", "837", ",", "2456", ",", "2333", ",", "212", ",", "2581", ",", "1664", ",", "2168", ",", "1564", ",", "\n", "940", ",", "2588", ",", "1295", ",", "2737", ",", "698", ",", "2623", ",", "1770", ",", "738", ",", "358", ",", "576", ",", "2064", ",", "\n", "815", ",", "996", ",", "1720", ",", "1030", ",", "788", ",", "1613", ",", "2380", ",", "256", ",", "266", ",", "1092", ",", "997", ",", "\n", "757", ",", "1974", ",", "14", ",", "1703", ",", "239", ",", "1590", ",", "1103", ",", "2951", ",", "2928", ",", "2718", ",", "1947", ",", "\n", "2104", ",", "2575", ",", "1466", ",", "1063", ",", "1107", ",", "245", ",", "1274", ",", "989", ",", "954", ",", "711", ",", "2557", ",", "\n", "1692", ",", "1219", ",", "2674", ",", "2224", ",", "1849", ",", "1629", ",", "303", ",", "2938", ",", "2656", ",", "1571", ",", "297", ",", "\n", "1106", ",", "1476", ",", "2153", ",", "514", ",", "228", ",", "72", ",", "2873", ",", "1129", ",", "152", ",", "2870", ",", "594", ",", "\n", "1732", ",", "1521", ",", "604", ",", "1884", ",", "2213", ",", "52", ",", "560", ",", "957", ",", "509", ",", "910", ",", "2636", ",", "\n", "662", ",", "792", ",", "2337", ",", "497", ",", "1654", ",", "385", ",", "1707", ",", "908", ",", "1637", ",", "1751", ",", "1875", ",", "\n", "1818", ",", "824", ",", "1520", ",", "2891", ",", "1525", ",", "2620", ",", "1914", ",", "1029", ",", "1735", ",", "127", ",", "2868", ",", "\n", "1306", ",", "13", ",", "2673", ",", "102", ",", "2028", ",", "135", ",", "1761", ",", "1387", ",", "2769", ",", "2409", ",", "382", ",", "\n", "1860", ",", "644", ",", "1185", ",", "592", ",", "849", ",", "548", ",", "2492", ",", "1586", ",", "765", ",", "2438", ",", "1210", ",", "\n", "1085", ",", "2837", ",", "2030", ",", "1631", ",", "1826", ",", "471", ",", "1020", ",", "326", ",", "551", ",", "1853", ",", "1328", ",", "\n", "650", ",", "2053", ",", "2500", ",", "2631", ",", "1111", ",", "657", ",", "2462", ",", "2170", ",", "1602", ",", "783", ",", "2146", ",", "\n", "29", ",", "130", ",", "540", ",", "2226", ",", "2821", ",", "2112", ",", "651", ",", "645", ",", "2263", ",", "671", ",", "1736", ",", "\n", "2245", ",", "1145", ",", "417", ",", "6", ",", "1380", ",", "1336", ",", "1217", ",", "2843", ",", "1724", ",", "2143", ",", "75", ",", "\n", "2681", ",", "723", ",", "1289", ",", "2601", ",", "2538", ",", "175", ",", "1165", ",", "2723", ",", "755", ",", "591", ",", "1253", ",", "\n", "1798", ",", "252", ",", "1377", ",", "1164", ",", "2353", ",", "1618", ",", "280", ",", "1307", ",", "1001", ",", "582", ",", "1393", ",", "\n", "2490", ",", "861", ",", "1952", ",", "337", ",", "100", ",", "1370", ",", "2874", ",", "1104", ",", "763", ",", "2762", ",", "323", ",", "\n", "2040", ",", "2899", ",", "24", ",", "2403", ",", "2142", ",", "2088", ",", "2626", ",", "2682", ",", "867", ",", "279", ",", "895", ",", "\n", "1839", ",", "1172", ",", "1400", ",", "2252", ",", "1470", ",", "289", ",", "2", ",", "216", ",", "982", ",", "1940", ",", "2529", ",", "\n", "1449", ",", "2341", ",", "920", ",", "817", ",", "1348", ",", "1004", ",", "917", ",", "915", ",", "885", ",", "599", ",", "695", ",", "\n", "2479", ",", "2109", ",", "411", ",", "2024", ",", "1527", ",", "1862", ",", "1297", ",", "1425", ",", "295", ",", "778", ",", "2058", ",", "\n", "60", ",", "1398", ",", "1269", ",", "2773", ",", "736", ",", "2816", ",", "1723", ",", "789", ",", "2272", ",", "1180", ",", "2562", ",", "\n", "2882", ",", "2633", ",", "2467", ",", "968", ",", "2877", ",", "1588", ",", "621", ",", "2175", ",", "2839", ",", "188", ",", "1404", ",", "\n", "1670", ",", "2132", ",", "2436", ",", "1019", ",", "1394", ",", "484", ",", "2065", ",", "439", ",", "1877", ",", "1828", ",", "1300", ",", "\n", "2221", ",", "878", ",", "941", ",", "1043", ",", "1553", ",", "346", ",", "2488", ",", "972", ",", "200", ",", "1993", ",", "799", ",", "\n", "2060", ",", "2516", ",", "2183", ",", "1469", ",", "2586", ",", "2866", ",", "1856", ",", "565", ",", "1102", ",", "2715", ",", "350", ",", "\n", "672", ",", "1026", ",", "410", ",", "2518", ",", "1776", ",", "1580", ",", "988", ",", "1077", ",", "1457", ",", "1995", ",", "2568", ",", "\n", "747", ",", "450", ",", "605", ",", "1626", ",", "1861", ",", "873", ",", "822", ",", "1131", ",", "1659", ",", "1646", ",", "856", ",", "\n", "2381", ",", "1459", ",", "1899", ",", "1223", ",", "220", ",", "1749", ",", "167", ",", "1633", ",", "2875", ",", "2228", ",", "2946", ",", "\n", "2725", ",", "1987", ",", "455", ",", "544", ",", "437", ",", "1313", ",", "1743", ",", "1388", ",", "1155", ",", "1960", ",", "1958", ",", "\n", "1418", ",", "590", ",", "606", ",", "1874", ",", "839", ",", "950", ",", "1623", ",", "2776", ",", "2267", ",", "1331", ",", "2037", ",", "\n", "2832", ",", "193", ",", "2495", ",", "197", ",", "2570", ",", "313", ",", "150", ",", "329", ",", "2491", ",", "269", ",", "1009", ",", "\n", "1369", ",", "2683", ",", "2326", ",", "1734", ",", "2375", ",", "1984", ",", "2693", ",", "1428", ",", "2842", ",", "59", ",", "1604", ",", "\n", "2318", ",", "977", ",", "2107", ",", "2645", ",", "1986", ",", "1538", ",", "381", ",", "888", ",", "2708", ",", "1452", ",", "2482", ",", "\n", "884", ",", "1236", ",", "291", ",", "1432", ",", "48", ",", "2667", ",", "641", ",", "1133", ",", "2766", ",", "2427", ",", "1202", ",", "\n", "659", ",", "430", ",", "626", ",", "1407", ",", "2895", ",", "2748", ",", "153", ",", "2068", ",", "925", ",", "2879", ",", "2222", ",", "\n", "2092", ",", "2446", ",", "2123", ",", "1792", ",", "44", ",", "1640", ",", "1676", ",", "2231", ",", "1615", ",", "2454", ",", "1644", ",", "\n", "1773", ",", "133", ",", "1205", ",", "194", ",", "2050", ",", "2813", ",", "1293", ",", "276", ",", "402", ",", "2130", ",", "864", ",", "\n", "2561", ",", "632", ",", "2105", ",", "1514", ",", "394", ",", "431", ",", "240", ",", "2342", ",", "161", ",", "2163", ",", "35", ",", "\n", "2955", ",", "1430", ",", "253", ",", "2496", ",", "2460", ",", "433", ",", "2332", ",", "1076", ",", "25", ",", "1056", ",", "1298", ",", "\n", "2076", ",", "2182", ",", "1467", ",", "1814", ",", "1969", ",", "2356", ",", "1222", ",", "752", ",", "1246", ",", "746", ",", "761", ",", "\n", "1066", ",", "196", ",", "1482", ",", "177", ",", "2855", ",", "1868", ",", "852", ",", "1959", ",", "1964", ",", "760", ",", "506", ",", "\n", "678", ",", "198", ",", "894", ",", "1668", ",", "866", ",", "2124", ",", "2365", ",", "1669", ",", "2915", ",", "2537", ",", "2067", ",", "\n", "1900", ",", "1273", ",", "2767", ",", "1533", ",", "1281", ",", "1372", ",", "2351", ",", "227", ",", "1268", ",", "2069", ",", "614", ",", "\n", "670", ",", "1572", ",", "677", ",", "2227", ",", "1408", ",", "235", ",", "1135", ",", "1147", ",", "377", ",", "2569", ",", "2511", ",", "\n", "2534", ",", "2012", ",", "1405", ",", "2700", ",", "600", ",", "1971", ",", "2499", ",", "2447", ",", "1701", ",", "1810", ",", "1249", ",", "\n", "2141", ",", "1436", ",", "122", ",", "440", ",", "790", ",", "1018", ",", "2113", ",", "331", ",", "1441", ",", "1970", ",", "2505", ",", "\n", "1199", ",", "307", ",", "2280", ",", "1312", ",", "120", ",", "1620", ",", "1215", ",", "447", ",", "21", ",", "1346", ",", "487", ",", "\n", "2768", ",", "1562", ",", "1324", ",", "421", ",", "2457", ",", "2930", ",", "1709", ",", "870", ",", "2753", ",", "2799", ",", "170", ",", "\n", "2533", ",", "2622", ",", "1061", ",", "1807", ",", "1283", ",", "542", ",", "489", ",", "344", ",", "2117", ",", "772", ",", "1544", ",", "\n", "1305", ",", "2920", ",", "2062", ",", "597", ",", "2443", ",", "2852", ",", "1729", ",", "2281", ",", "1569", ",", "731", ",", "251", ",", "\n", "2212", ",", "1702", ",", "448", ",", "2952", ",", "2475", ",", "41", ",", "2728", ",", "2413", ",", "1808", ",", "1342", ",", "2410", ",", "\n", "2361", ",", "357", ",", "1354", ",", "242", ",", "1419", ",", "1975", ",", "1447", ",", "311", ",", "207", ",", "457", ",", "1845", ",", "\n", "2018", ",", "2540", ",", "2846", ",", "2614", ",", "613", ",", "2164", ",", "426", ",", "2933", ",", "636", ",", "2219", ",", "2609", ",", "\n", "1213", ",", "1809", ",", "2847", ",", "1847", ",", "2797", ",", "147", ",", "1062", ",", "948", ",", "2352", ",", "740", ",", "2759", ",", "\n", "369", ",", "2461", ",", "2008", ",", "2174", ",", "2367", ",", "62", ",", "2803", ",", "407", ",", "1116", ",", "1478", ",", "1955", ",", "\n", "37", ",", "2198", ",", "921", ",", "900", ",", "210", ",", "648", ",", "1712", ",", "676", ",", "1240", ",", "221", ",", "213", ",", "\n", "580", ",", "446", ",", "1047", ",", "1034", ",", "1542", ",", "2735", ",", "333", ",", "508", ",", "2103", ",", "2093", ",", "1167", ",", "\n", "721", ",", "700", ",", "105", ",", "2641", ",", "1757", ",", "2031", ",", "2691", ",", "512", ",", "2893", ",", "1156", ",", "2576", ",", "\n", "366", ",", "1276", ",", "1024", ",", "1680", ",", "1438", ",", "2552", ",", "2223", ",", "359", ",", "1371", ",", "687", ",", "79", ",", "\n", "2464", ",", "1598", ",", "649", ",", "2745", ",", "1829", ",", "2589", ",", "1501", ",", "368", ",", "1123", ",", "960", ",", "1627", ",", "\n", "2284", ",", "2740", ",", "1067", ",", "1608", ",", "1516", ",", "692", ",", "1124", ",", "1793", ",", "995", ",", "1391", ",", "2574", ",", "\n", "94", ",", "182", ",", "465", ",", "612", ",", "513", ",", "131", ",", "114", ",", "2110", ",", "1587", ",", "1208", ",", "2417", ",", "\n", "1911", ",", "215", ",", "2300", ",", "2565", ",", "2822", ",", "2918", ",", "640", ",", "82", ",", "1915", ",", "524", ",", "2493", ",", "\n", "2301", ",", "1499", ",", "23", ",", "203", ",", "116", ",", "1148", ",", "2244", ",", "1334", ",", "2605", ",", "1745", ",", "2128", ",", "\n", "389", ",", "1832", ",", "821", ",", "1402", ",", "1248", ",", "625", ",", "1170", ",", "2366", ",", "1487", ",", "520", ",", "2305", ",", "\n", "690", ",", "183", ",", "2638", ",", "1910", ",", "795", ",", "663", ",", "1840", ",", "724", ",", "1416", ",", "903", ",", "1870", ",", "\n", "830", ",", "913", ",", "95", ",", "2836", ",", "1302", ",", "2423", ",", "1865", ",", "2005", ",", "1242", ",", "610", ",", "2750", ",", "\n", "1080", ",", "2545", ",", "422", ",", "1058", ",", "247", ",", "2430", ",", "2892", ",", "1184", ",", "667", ",", "2289", ",", "2913", ",", "\n", "1442", ",", "767", ",", "2800", ",", "820", ",", "2607", ",", "2649", ",", "2613", ",", "2070", ",", "10", ",", "237", ",", "327", ",", "\n", "2507", ",", "1357", ",", "673", ",", "510", ",", "2610", ",", "2902", ",", "191", ",", "1785", ",", "1183", ",", "1150", ",", "2196", ",", "\n", "1804", ",", "474", ",", "1038", ",", "966", ",", "946", ",", "384", ",", "1481", ",", "2277", ",", "2851", ",", "515", ",", "1286", ",", "\n", "1591", ",", "2082", ",", "2680", ",", "538", ",", "1158", ",", "2543", ",", "2405", ",", "547", ",", "1699", ",", "2594", ",", "936", ",", "\n", "800", ",", "452", ",", "1096", ",", "299", ",", "305", ",", "1375", ",", "1496", ",", "1916", ",", "2368", ",", "2166", ",", "2658", ",", "\n", "2256", ",", "1023", ",", "1820", ",", "797", ",", "2374", ",", "260", ",", "2661", ",", "607", ",", "1864", ",", "1547", ",", "1917", ",", "\n", "15", ",", "1683", ",", "180", ",", "2650", ",", "1905", ",", "716", ",", "1258", ",", "124", ",", "2135", ",", "814", ",", "92", ",", "\n", "1935", ",", "851", ",", "2567", ",", "2080", ",", "1548", ",", "2160", ",", "49", ",", "1016", ",", "195", ",", "1609", ",", "2199", ",", "\n", "173", ",", "2860", ",", "1169", ",", "2883", ",", "1292", ",", "2344", ",", "380", ",", "458", ",", "1675", ",", "316", ",", "2675", ",", "\n", "58", ",", "891", ",", "2632", ",", "61", ",", "2712", ",", "665", ",", "1881", ",", "751", ",", "495", ",", "835", ",", "1867", ",", "\n", "702", ",", "1812", ",", "1315", ",", "485", ",", "2880", ",", "1694", ",", "1594", ",", "1652", ",", "1907", ",", "2390", ",", "2075", ",", "\n", "2872", ",", "2916", ",", "2090", ",", "2513", ",", "1624", ",", "1013", ",", "367", ",", "2665", ",", "1446", ",", "1790", ",", "1364", ",", "\n", "78", ",", "2782", ",", "1791", ",", "2539", ",", "1132", ",", "2098", ",", "1497", ",", "2585", ",", "2652", ",", "616", ",", "1511", ",", "\n", "1351", ",", "1786", ",", "1151", ",", "943", ",", "860", ",", "55", ",", "1937", ",", "1741", ",", "1752", ",", "1682", ",", "2154", ",", "\n", "1064", ",", "680", ",", "2327", ",", "804", ",", "602", ",", "2564", ",", "2102", ",", "927", ",", "1678", ",", "149", ",", "2754", ",", "\n", "712", ",", "217", ",", "2522", ",", "2592", ",", "391", ",", "2619", ",", "1872", ",", "516", ",", "1660", ",", "2150", ",", "1337", ",", "\n", "2386", ",", "1081", ",", "1622", ",", "2191", ",", "2603", ",", "1363", ",", "67", ",", "1146", ",", "1477", ",", "2749", ",", "1017", ",", "\n", "945", ",", "232", ",", "348", ",", "1641", ",", "2825", ",", "2401", ",", "660", ",", "798", ",", "2056", ",", "1144", ",", "134", ",", "\n", "1927", ",", "1105", ",", "2357", ",", "141", ",", "12", ",", "2393", ",", "349", ",", "2635", ",", "1647", ",", "2052", ",", "1200", ",", "\n", "1574", ",", "1515", ",", "1113", ",", "1939", ",", "2907", ",", "1412", ",", "2428", ",", "405", ",", "2339", ",", "1349", ",", "2421", ",", "\n", "125", ",", "745", ",", "1795", ",", "42", ",", "1898", ",", "2701", ",", "1161", ",", "1099", ",", "2045", ",", "352", ",", "2111", ",", "\n", "17", ",", "1771", ",", "1159", ",", "1689", ",", "1181", ",", "2285", ",", "438", ",", "1140", ",", "2074", ",", "965", ",", "2850", ",", "\n", "236", ",", "87", ",", "1175", ",", "403", ",", "2121", ",", "499", ",", "209", ",", "639", ",", "496", ",", "627", ",", "2703", ",", "\n", "1610", ",", "1277", ",", "112", ",", "969", ",", "443", ",", "2864", ",", "768", ",", "2294", ",", "1506", ",", "265", ",", "1784", ",", "\n", "2348", ",", "734", ",", "53", ",", "2671", ",", "2370", ",", "1933", ",", "1239", ",", "2677", ",", "1356", ",", "205", ",", "2288", ",", "\n", "1823", ",", "1174", ",", "2905", ",", "155", ",", "1992", ",", "2185", ",", "1639", ",", "372", ",", "1177", ",", "918", ",", "85", ",", "\n", "2595", ",", "157", ",", "2425", ",", "2237", ",", "2054", ",", "1379", ",", "1710", ",", "679", ",", "2214", ",", "132", ",", "2236", ",", "\n", "1396", ",", "2559", ",", "2208", ",", "1863", ",", "4", ",", "1532", ",", "1579", ",", "2627", ",", "2640", ",", "1211", ",", "2071", ",", "\n", "1842", ",", "1037", ",", "631", ",", "1730", ",", "2201", ",", "2654", ",", "2239", ",", "493", ",", "290", ",", "374", ",", "2033", ",", "\n", "2810", ",", "974", ",", "1584", ",", "2298", ",", "1912", ",", "722", ",", "675", ",", "557", ",", "2618", ",", "857", ",", "1434", ",", "\n", "1578", ",", "501", ",", "137", ",", "708", ",", "2520", ",", "2802", ",", "97", ",", "2685", ",", "2747", ",", "296", ",", "1173", ",", "\n", "1192", ",", "436", ",", "223", ",", "2729", ",", "994", ",", "541", ",", "2032", ",", "1965", ",", "476", ",", "525", ",", "2161", ",", "\n", "1314", ",", "2666", ",", "151", ",", "1596", ",", "2719", ",", "2834", ",", "1941", ",", "2320", ",", "561", ",", "2020", ",", "2593", ",", "\n", "222", ",", "978", ",", "868", ",", "1988", ",", "2544", ",", "1755", ",", "682", ",", "1489", ",", "2345", ",", "1325", ",", "309", ",", "\n", "103", ",", "1465", ",", "142", ",", "2127", ",", "2519", ",", "2903", ",", "865", ",", "2195", ",", "504", ",", "363", ",", "2726", ",", "\n", "1389", ",", "2807", ",", "1468", ",", "201", ",", "1414", ",", "2790", ",", "933", ",", "2727", ",", "2210", ",", "1841", ",", "2002", ",", "\n", "901", ",", "1426", ",", "171", ",", "2094", ",", "701", ",", "882", ",", "1021", ",", "539", ",", "963", ",", "2615", ",", "578", ",", "\n", "2035", ",", "2136", ",", "1498", ",", "1754", ",", "1806", ",", "2668", ",", "1301", ",", "2716", ",", "1888", ",", "1816", ",", "742", ",", "\n", "2651", ",", "442", ",", "1561", ",", "2714", ",", "684", ",", "2233", ",", "2159", ",", "2013", ",", "1254", ",", "318", ",", "2489", ",", "\n", "564", ",", "635", ",", "563", ",", "2551", ",", "96", ",", "938", ",", "545", ",", "1383", ",", "521", ",", "1114", ",", "304", ",", "\n", "2577", ",", "2419", ",", "2325", ",", "2558", ",", "1904", ",", "2541", ",", "477", ",", "1797", ",", "2315", ",", "2531", ",", "2854", ",", "\n", "686", ",", "2548", ",", "782", ",", "2388", ",", "683", ",", "2849", ",", "445", ",", "2217", ",", "2830", ",", "1304", ",", "947", ",", "\n", "693", ",", "566", ",", "2463", ",", "2434", ",", "2763", ",", "1234", ",", "2888", ",", "143", ",", "2119", ",", "944", ",", "1166", ",", "\n", "2079", ",", "2687", ",", "414", ",", "2171", ",", "404", ",", "2286", ",", "2194", ",", "1227", ",", "833", ",", "2027", ",", "2043", ",", "\n", "2346", ",", "805", ",", "1431", ",", "1833", ",", "1645", ",", "1074", ",", "877", ",", "1073", ",", "273", ",", "2445", ",", "2556", ",", "\n", "2085", ",", "1231", ",", "186", ",", "1053", ",", "570", ",", "406", ",", "1226", ",", "2663", ",", "2598", ",", "2756", ",", "1742", ",", "\n", "1417", ",", "2501", ",", "2216", ",", "775", ",", "642", ",", "2203", ",", "2019", ",", "803", ",", "694", ",", "838", ",", "826", ",", "\n", "929", ",", "1464", ",", "1385", ",", "2859", ",", "1186", ",", "1747", ",", "1878", ",", "691", ",", "2235", ",", "2527", ",", "2929", ",", "\n", "2521", ",", "1225", ",", "1705", ",", "2271", ",", "1486", ",", "2269", ",", "802", ",", "2144", ",", "762", ",", "1448", ",", "278", ",", "\n", "1567", ",", "2494", ",", "1632", ",", "34", ",", "1139", ",", "1838", ",", "973", ",", "725", ",", "1973", ",", "88", ",", "1479", ",", "\n", "2296", ",", "2676", ",", "1190", ",", "2784", ",", "8", ",", "1549", ",", "2817", ",", "853", ",", "1310", ",", "577", ",", "1876", ",", "\n", "1661", ",", "400", ",", "1044", ",", "2314", ",", "1727", ",", "2818", ",", "320", ",", "1360", ",", "2439", ",", "1815", ",", "1320", ",", "\n", "2948", ",", "987", ",", "1599", ",", "2001", ",", "2291", ",", "1335", ",", "661", ",", "211", ",", "806", ",", "2935", ",", "83", ",", "\n", "2717", ",", "2205", ",", "1209", ",", "2528", ",", "298", ",", "1649", ",", "2322", ",", "2896", ",", "1027", ",", "1045", ",", "1141", ",", "\n", "30", ",", "2468", ",", "937", ",", "2382", ",", "1871", ",", "1919", ",", "2791", ",", "2034", ",", "145", ",", "2158", ",", "373", ",", "\n", "1070", ",", "720", ",", "2566", ",", "1126", ",", "2887", ",", "2096", ",", "1582", ",", "2706", ",", "709", ",", "2900", ",", "1775", ",", "\n", "1415", ",", "555", ",", "816", ",", "2246", ",", "2184", ",", "1575", ",", "748", ",", "1843", ",", "1539", ",", "2644", ",", "2881", ",", "\n", "456", ",", "1374", ",", "1088", ",", "2486", ",", "2099", ",", "1524", ",", "2844", ",", "1279", ",", "27", ",", "2730", ",", "1573", ",", "\n", "2827", ",", "2404", ",", "1265", ",", "2384", ",", "2890", ",", "2789", ",", "2349", ",", "165", ",", "2261", ",", "615", ",", "2046", ",", "\n", "494", ",", "1568", ",", "842", ",", "2100", ",", "1485", ",", "534", ",", "1635", ",", "238", ",", "1665", ",", "420", ",", "453", ",", "\n", "773", ",", "1041", ",", "2780", ",", "398", ",", "1977", ",", "1100", ",", "292", ",", "248", ",", "2659", ",", "511", ",", "267", ",", "\n", "2293", ",", "1358", ",", "2007", ",", "2086", ",", "272", ",", "1055", ",", "1399", ",", "2162", ",", "66", ",", "546", ",", "1224", ",", "\n", "2180", ",", "1163", ",", "568", ",", "1541", ",", "1075", ",", "1949", ",", "31", ",", "1846", ",", "1036", ",", "669", ",", "2702", ",", "\n", "324", ",", "2253", ",", "2328", ",", "2118", ",", "2148", ",", "1523", ",", "451", ",", "2398", ",", "1060", ",", "2290", ",", "1228", ",", "\n", "1893", ",", "634", ",", "1740", ",", "1120", ",", "409", ",", "1706", ",", "2695", ",", "1229", ",", "2779", ",", "1929", ",", "2795", ",", "\n", "1885", ",", "1803", ",", "1359", ",", "274", ",", "2400", ",", "1474", ",", "919", ",", "854", ",", "2459", ",", "2283", ",", "2512", ",", "\n", "224", ",", "1322", ",", "1028", ",", "89", ",", "629", ",", "2452", ",", "2014", ",", "2924", ",", "1836", ",", "2744", ",", "850", ",", "\n", "832", ",", "282", ",", "1282", ",", "2472", ",", "1149", ",", "281", ",", "36", ",", "652", ",", "911", ",", "1117", ",", "1392", ",", "\n", "2211", ",", "1605", ",", "386", ",", "2820", ",", "603", ",", "1765", ",", "1980", ",", "1967", ",", "1979", ",", "1333", ",", "2600", ",", "\n", "2041", ",", "2793", ",", "1433", ",", "2809", ",", "1536", ",", "655", ",", "1119", ",", "689", ",", "1032", ",", "624", ",", "2738", ",", "\n", "461", ",", "340", ",", "985", ",", "898", ",", "1756", ",", "234", ",", "523", ",", "1247", ",", "2437", ",", "744", ",", "2138", ",", "\n", "930", ",", "1435", ",", "1230", ",", "598", ",", "2078", ",", "1737", ",", "335", ",", "1321", ",", "1054", ",", "1799", ",", "169", ",", "\n", "554", ",", "769", ",", "429", ",", "2408", ",", "1772", ",", "668", ",", "1719", ",", "813", ",", "529", ",", "1011", ",", "1619", ",", "\n", "2584", ",", "2426", ",", "1237", ",", "2713", ",", "1207", ",", "70", ",", "2939", ",", "1406", ",", "1531", ",", "1708", ",", "2775", ",", "\n", "976", ",", "2376", ",", "2268", ",", "262", ",", "444", ",", "1332", ",", "785", ",", "2116", ",", "2508", ",", "1983", ",", "1687", ",", "\n", "214", ",", "2169", ",", "2429", ",", "737", ",", "396", ",", "2625", ",", "990", ",", "1559", ",", "1078", ",", "176", ",", "593", ",", "\n", "285", ",", "218", ",", "1985", ",", "2694", ",", "1483", ",", "1042", ",", "356", ",", "2299", ",", "1347", ",", "2624", ",", "1800", ",", "\n", "1395", ",", "39", ",", "500", ",", "2770", ",", "1589", ",", "2340", ",", "2606", ",", "928", ",", "2599", ",", "111", ",", "2147", ",", "\n", "1089", ",", "674", ",", "727", ",", "2242", ",", "2925", ",", "1194", ",", "2359", ",", "881", ",", "1978", ",", "1450", ",", "766", ",", "\n", "2563", ",", "1858", ",", "1612", ",", "1902", ",", "1397", ",", "2474", ",", "2922", ",", "2582", ",", "2662", ",", "2129", ",", "1577", ",", "\n", "2535", ",", "2906", ",", "2004", ",", "2639", ",", "2391", ",", "2785", ",", "2073", ",", "1097", ",", "2757", ",", "536", ",", "108", ",", "\n", "2006", ",", "2453", ",", "2746", ",", "646", ",", "1350", ",", "1006", ",", "2157", ",", "914", ",", "939", ",", "43", ",", "2621", ",", "\n", "365", ",", "2572", ",", "47", ",", "2478", ",", "1597", ",", "1526", ",", "1327", ",", "174", ",", "1093", ",", "80", ",", "449", ",", "\n", "777", ",", "1648", ",", "825", ",", "2310", ",", "1999", ",", "2262", ",", "2932", ",", "1462", ",", "550", ",", "791", ",", "596", ",", "\n", "2422", ",", "786", ",", "1125", ",", "1926", ",", "1753", ",", "2377", ",", "1179", ",", "2125", ",", "353", ",", "1025", ",", "2553", ",", "\n", "317", ",", "1866", ",", "2204", ",", "2450", ",", "1492", ",", "2181", ",", "2886", ",", "1508", ",", "2021", ",", "1859", ",", "2229", ",", "\n", "1287", ",", "1386", ",", "584", ",", "848", ",", "2323", ",", "618", ",", "2885", ",", "2711", ",", "57", ",", "63", ",", "1503", ",", "\n", "1059", ",", "473", ",", "1630", ",", "33", ",", "1049", ",", "2178", ",", "284", ",", "475", ",", "883", ",", "1480", ",", "559", ",", "\n", "73", ",", "1259", ",", "1031", ",", "1493", ",", "2097", ",", "1505", ",", "332", ",", "1517", ",", "5", ",", "2187", ",", "1932", ",", "\n", "1869", ",", "1554", ",", "1758", ",", "1376", ",", "530", ",", "1827", ",", "1837", ",", "2385", ",", "1638", ",", "2758", ",", "2781", ",", "\n", "259", ",", "2424", ",", "7", ",", "1251", ",", "168", ",", "2871", ",", "1592", ",", "753", ",", "162", ",", "2179", ",", "1504", ",", "\n", "2003", ",", "932", ",", "2796", ",", "28", ",", "322", ",", "118", ",", "1595", ",", "376", ",", "1957", ",", "2524", ",", "2250", ",", "\n", "275", ",", "435", ",", "98", ",", "656", ",", "1090", ",", "658", ",", "581", ",", "2829", ",", "2000", ",", "1851", ",", "1220", ",", "\n", "1529", ",", "113", ",", "412", ",", "454", ",", "2814", ",", "654", ",", "983", ",", "2617", ",", "1065", ",", "2066", ",", "732", ",", "\n", "2811", ",", "2546", ",", "2630", ",", "2573", ",", "1717", ",", "1552", ",", "1966", ",", "99", ",", "902", ",", "1563", ",", "401", ",", "\n", "1962", ",", "1007", ",", "889", ",", "2857", ",", "1381", ",", "1722", ",", "1152", ",", "2316", ",", "1510", ",", "1673", ",", "2721", ",", "\n", "2407", ",", "1819", ",", "2220", ",", "2698", ",", "2306", ",", "2015", ",", "2642", ",", "1777", ",", "172", ",", "741", ",", "1643", ",", "\n", "1778", ",", "855", ",", "339", ",", "1238", ",", "293", ",", "483", ",", "2311", ",", "1813", ",", "961", ",", "1998", ",", "1118", ",", "\n", "1728", ",", "1982", ",", "1084", ",", "713", ",", "2815", ",", "1731", ",", "574", ",", "1621", ",", "2189", ",", "2247", ",", "472", ",", "\n", "1288", ",", "233", ",", "26", ",", "1454", ",", "460", ",", "1704", ",", "2643", ",", "1463", ",", "2788", ",", "2648", ",", "846", ",", "\n", "2953", ",", "1475", ",", "2387", ",", "2689", ",", "16", ",", "2761", ",", "1953", ",", "301", ",", "2831", ",", "415", ",", "587", ",", "\n", "699", ",", "726", ",", "1367", ",", "2824", ",", "1593", ",", "2547", ",", "468", ",", "184", ",", "1989", ",", "277", ",", "2406", ",", "\n", "1766", ",", "1201", ",", "758", ",", "288", ",", "934", ",", "300", ",", "2025", ",", "2889", ",", "2324", ",", "1601", ",", "2863", ",", "\n", "1130", ",", "1739", ",", "2414", ",", "2804", ",", "1551", ",", "1319", ",", "364", ",", "2657", ",", "1500", ",", "187", ",", "164", ",", "\n", "1068", ",", "844", ",", "425", ",", "1445", ",", "306", ",", "470", ",", "951", ",", "710", ",", "1409", ",", "1768", ",", "517", ",", "\n", "2432", ",", "942", ",", "1762", ",", "77", ",", "1212", ",", "2249", ",", "518", ",", "2792", ",", "1221", ",", "1779", ",", "1235", ",", "\n", "330", ",", "486", ",", "1535", ",", "1733", ",", "146", ",", "1323", ",", "387", ",", "479", ",", "880", ",", "2081", ",", "1555", ",", "\n", "2307", ",", "1443", ",", "2295", ",", "1329", ",", "1203", ",", "2287", ",", "2670", ",", "975", ",", "847", ",", "68", ",", "2087", ",", "\n", "2347", ",", "101", ",", "423", ",", "1191", ",", "9", ",", "1581", ",", "478", ",", "1275", ",", "1625", ",", "2597", ",", "226", ",", "\n", "315", ",", "2395", ",", "1343", ",", "1887", ",", "2787", ",", "2155", ",", "1848", ",", "1961", ",", "2954", ",", "2466", ",", "115", ",", "\n", "1811", ",", "38", ",", "2394", ",", "549", ",", "1204", ",", "696", ",", "776", ",", "2926", ",", "829", ",", "2583", ",", "360", ",", "\n", "2193", ",", "1681", ",", "1925", ",", "2149", ",", "617", ",", "2736", ",", "1616", ",", "859", ",", "1892", ",", "2805", ",", "1206", ",", "\n", "1162", ",", "718", ",", "1291", ",", "2329", ",", "1651", ",", "706", ",", "823", ",", "2091", ",", "2628", ",", "345", ",", "1714", ",", "\n", "1316", ",", "1522", ",", "2833", ",", "2692", ",", "562", ",", "1817", ",", "2942", ",", "2808", ",", "208", ",", "1855", ",", "2431", ",", "\n", "998", ",", "1530", ",", "498", ",", "2771", ",", "502", ",", "1585", ",", "1153", ",", "2498", ",", "2331", ",", "1556", ",", "140", ",", "\n", "2878", ",", "981", ",", "807", ",", "1345", ",", "899", ",", "2741", ",", "2739", ",", "831", ",", "1923", ",", "2273", ",", "383", ",", "\n", "2055", ",", "2510", ",", "1513", ",", "1656", ",", "2336", ",", "2731", ",", "666", ",", "1576", ",", "2420", ",", "1270", ",", "1494", ",", "\n", "2664", ",", "1189", ",", "1886", ",", "1401", ",", "535", ",", "1930", ",", "351", ",", "225", ",", "2699", ",", "719", ",", "1420", ",", "\n", "2036", ",", "2218", ",", "586", ",", "1091", ",", "1338", ",", "2678", ",", "1662", ",", "2653", ",", "1948", ",", "912", ",", "2869", ",", "\n", "2151", ",", "1677", ",", "2358", ",", "608", ",", "1583", ",", "638", ",", "2783", ",", "1488", ",", "2828", ",", "1879", ",", "1830", ",", "\n", "2861", ",", "984", ",", "2483", ",", "567", ",", "1437", ",", "1366", ",", "1725", ",", "2061", ",", "258", ",", "1726", ",", "1956", ",", "\n", "1365", ",", "2647", ",", "2350", ",", "2243", ",", "2571", ",", "611", ",", "230", ",", "1658", ",", "1086", ",", "2369", ",", "1922", ",", "\n", "2238", ",", "573", ",", "571", ",", "1010", ",", "1267", ",", "1072", ",", "1241", ",", "1721", ",", "250", ",", "1781", ",", "1642", ",", "\n", "3", ",", "1901", ",", "1783", ",", "375", ",", "2232", ",", "2177", ",", "1938", ",", "243", ",", "1160", ",", "1491", ",", "2497", ",", "\n", "1560", ",", "2752", ",", "1636", ",", "764", ",", "1996", ",", "630", ",", "490", ",", "2525", ",", "1540", ",", "907", ",", "54", ",", "\n", "2302", ",", "1718", ",", "986", ",", "1767", ",", "1963", ",", "2506", ",", "834", ",", "952", ",", "488", ",", "2411", ",", "2039", ",", "\n", "424", ",", "1655", ",", "2137", ",", "1909", ",", "2616", ",", "2931", ",", "728", ",", "507", ",", "879", ",", "2724", ",", "2234", ",", "\n", "1142", ",", "397", ",", "441", ",", "1844", ",", "1340", ",", "1339", ",", "2190", ",", "1280", ",", "1981", ",", "1424", ",", "2131", ",", "\n", "1138", ",", "1671", ",", "1157", ",", "74", ",", "781", ",", "1039", ",", "836", ",", "808", ",", "923", ",", "558", ",", "609", ",", "\n", "647", ",", "886", ",", "399", ",", "869", ",", "812", ",", "2794", ",", "2710", ",", "1008", ",", "1197", ",", "1460", ",", "2248", ",", "\n", "2554", ",", "2660", ",", "1750", ",", "2949", ",", "2947", ",", "543", ",", "2812", ",", "334", ",", "622", ",", "2270", ",", "2251", ",", "\n", "1744", ",", "1821", ",", "1834", ",", "119", ",", "1943", ",", "434", ",", "1137", ",", "1528", ",", "2679", ",", "1429", ",", "1890", ",", "\n", "2139", ",", "418", ",", "628", ",", "325", ",", "1373", ",", "1193", ",", "1693", ",", "166", ",", "2415", ",", "2095", ",", "312", ",", "\n", "1094", ",", "1690", ",", "2908", ",", "707", ",", "505", ",", "1921", ",", "730", ",", "1176", ",", "2798", ",", "1883", ",", "1352", ",", "\n", "343", ",", "1050", ",", "1012", ",", "2399", ",", "2704", ",", "2140", ",", "378", ",", "2686", ",", "743", ",", "2517", ",", "154", ",", "\n", "749", ",", "1110", ",", "2835", ",", "2858", ",", "264", ",", "1895", ",", "1471", ",", "887", ",", "2919", ",", "601", ",", "1134", ",", "\n", "1257", ",", "2862", ",", "2471", ",", "2084", ",", "572", ",", "76", ",", "40", ",", "178", ",", "1440", ",", "2363", ",", "1759", ",", "\n", "1716", ",", "1543", ",", "1788", ",", "466", ",", "1835", ",", "953", ",", "2591", ",", "2476", ",", "2392", ",", "1232", ",", "2309", ",", "\n", "261", ",", "2354", ",", "2764", ",", "2120", ",", "2950", ",", "556", ",", "971", ",", "717", ",", "338", ",", "1101", ",", "1260", ",", "\n", "1558", ",", "2011", ",", "1700", ",", "926", ",", "2579", ",", "1606", ",", "2477", ",", "181", ",", "2016", ",", "1825", ",", "428", ",", "\n", "1252", ",", "2743", ",", "206", ",", "2536", ",", "1896", ",", "192", ",", "685", ",", "964", ",", "393", ",", "64", ",", "1686", ",", "\n", "922", ",", "1040", ",", "419", ",", "1672", ",", "970", ",", "2550", ",", "361", ",", "2297", ",", "459", ",", "1600", ",", "159", ",", "\n", "11", ",", "2207", ",", "1472", ",", "705", ",", "2215", ",", "1266", ",", "19", ",", "50", ",", "231", ",", "890", ",", "1451", ",", "\n", "1490", ",", "32", ",", "2083", ",", "1071", ",", "65", ",", "1824", ",", "2772", ",", "2106", ",", "579", ",", "527", ",", "1667", ",", "\n", "283", ",", "2612", ",", "1453", ",", "2720", ",", "219", ",", "249", ",", "2778", ",", "1697", ",", "1801", ",", "480", ",", "148", ",", "\n", "2241", ",", "956", ",", "2010", ",", "595", ",", "1976", ",", "862", ",", "1046", ",", "1294", ",", "906", ",", "704", ",", "2590", ",", "\n", "2145", ",", "2260", ",", "1411", ",", "664", ",", "392", ",", "84", ",", "2823", ",", "2308", ",", "1330", ",", "1355", ",", "229", ",", "\n", "2470", ",", "2688", ",", "2898", ",", "2923", ",", "190", ",", "1413", ",", "688", ",", "1764", ",", "1005", ",", "2458", ",", "1262", ",", "\n", "2940", ",", "2209", ",", "1968", ",", "1216", ",", "2465", ",", "904", ",", "1127", ",", "1634", ",", "810", ",", "1782", ",", "1079", ",", "\n", "158", ",", "1607", ",", "2760", ",", "1195", ",", "2801", ",", "1688", ",", "2910", ",", "2503", ",", "2441", ",", "2373", ",", "2845", ",", "\n", "739", ",", "2115", ",", "117", ",", "388", ",", "703", ",", "1698", ",", "128", ",", "2108", ",", "2059", ",", "583", ",", "2048", ",", "\n", "2485", ",", "1", ",", "1857", ",", "1695", ",", "2230", ",", "1271", ",", "2901", ",", "395", ",", "2560", ",", "1534", ",", "1154", ",", "\n", "2515", ",", "916", ",", "526", ",", "715", ",", "1854", ",", "619", ",", "637", ",", "1198", ",", "754", ",", "123", ",", "93", ",", "\n", "1285", ",", "2774", ",", "1218", ",", "1035", ",", "2362", ",", "1950", ",", "750", ",", "1311", ",", "2542", ",", "991", ",", "2383", ",", "\n", "1284", ",", "2765", ",", "892", ",", "1653", ",", "1382", ",", "2379", ",", "354", ",", "254", "]", "\n", "\n", "# TODO: fix permutation", "\n", "\n", "# custom permutation that only considers files that are in the directory", "\n", "import", "os", "\n", "file_names", "=", "os", ".", "listdir", "(", "\n", "\"/fastdata/Smiths_LKA_Weapons_Down/len_8/\"", ")", "# '/fastdata/Smiths_LKA_WeaponsDown/len_8/'", "\n", "ending", "=", "'_label.npy'", "\n", "permutation", "=", "[", "]", "\n", "for", "file_name", "in", "file_names", ":", "\n", "            ", "if", "ending", "in", "file_name", ":", "\n", "                ", "permutation", ".", "append", "(", "file_name", "[", ":", "-", "len", "(", "ending", ")", "]", ")", "\n", "", "", "self", ".", "permute", "=", "permutation", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.FilePermutation.__getitem__": [[689, 696], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Returns the permuteded index\n        :param index: (int) Input index\n        :return: (int) New index\n        \"\"\"", "\n", "return", "self", ".", "permute", "[", "index", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union_bounding_box": [[12, 68], ["torch.tensor", "torch.tensor", "pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "torch.from_numpy().to", "torch.from_numpy().to", "prediction.view.view", "torch.abs", "torch.abs", "torch.prod", "torch.prod", "torch.abs", "torch.abs", "torch.prod", "torch.prod", "torch.max", "torch.max", "torch.prod", "torch.prod", "torch.max", "torch.max", "label.cpu().numpy", "coordinates.cpu().numpy", "offset.to", "offset.to", "torch.max", "torch.max", "torch.min", "torch.min", "torch.zeros().to", "torch.zeros().to", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "iou.cpu", "torch.abs.cpu", "torch.max.cpu", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.min", "torch.min", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.min", "torch.min", "torch.max", "torch.max", "label.cpu", "coordinates.cpu", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "intersection_over_union_bounding_box", "(", "prediction", ":", "torch", ".", "Tensor", ",", "coordinates", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ",", "\n", "threshold", ":", "float", "=", "0.5", ",", "\n", "offset", ":", "torch", ".", "Tensor", "=", "torch", ".", "tensor", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Calculates the intersection over union of the predicted bounding box.\n    Works only with one batch!\n    :param prediction: (torch.tensor) Raw prediction of the O-Net (samples)\n    :param coordinates: (torch.tensor) Input coordinates of the O-Net (samples, 3)\n    :param label: (torch.tensor) High resolution label including only ones (samples, 3)\n    :param threshold: (float) Threshold for prediction (default=0.5)\n    :param offset: (torch.Tensor) Bounding box offset used and added to the predicted bounding box\n    :return: (torch.tensor) Intersection over union value\n    \"\"\"", "\n", "# Init kd tree", "\n", "kd_tree", "=", "KDTree", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "leafsize", "=", "16", ")", "\n", "# Estimate which coordinates are weapons", "\n", "dist_coordinates_to_label", ",", "_", "=", "kd_tree", ".", "query", "(", "coordinates", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "del", "_", "# Help the python garbage collector", "\n", "dist_coordinates_to_label", "=", "torch", ".", "from_numpy", "(", "dist_coordinates_to_label", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "# Estimate which coordinates belongs to a weapon", "\n", "coordinates_label", "=", "coordinates", "[", "dist_coordinates_to_label", "==", "0.0", "]", "# 1 if weapon 0 if not", "\n", "if", "coordinates", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "1", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "# Get max and min coordinates for bounding box", "\n", "", "max_coordinates_label", "=", "torch", ".", "max", "(", "coordinates_label", ",", "dim", "=", "0", ")", "[", "0", "]", "+", "offset", ".", "to", "(", "\n", "coordinates_label", ".", "device", ")", "# Index 0 to get values", "\n", "min_coordinates_label", "=", "torch", ".", "min", "(", "coordinates_label", ",", "dim", "=", "0", ")", "[", "0", "]", "-", "offset", ".", "to", "(", "\n", "coordinates_label", ".", "device", ")", "# Index 0 to get values", "\n", "# print('\\n', max_coordinates_label, min_coordinates_label)", "\n", "# Apply threshold", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ")", "\n", "prediction", "=", "(", "prediction", ">", "threshold", ")", ".", "float", "(", ")", "\n", "if", "coordinates", "[", "prediction", "==", "1.0", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "# Get max and min of prediction", "\n", "", "max_coordinates_prediction", "=", "torch", ".", "max", "(", "coordinates", "[", "prediction", "==", "1.0", "]", ",", "dim", "=", "0", ")", "[", "0", "]", "# Index 0 to get values", "\n", "min_coordinates_prediction", "=", "torch", ".", "min", "(", "coordinates", "[", "prediction", "==", "1.0", "]", ",", "dim", "=", "0", ")", "[", "0", "]", "# Index 0 to get values", "\n", "# print('\\n', max_coordinates_prediction, min_coordinates_prediction)", "\n", "# Calc volume of label bounding box", "\n", "edge_sizes_label", "=", "torch", ".", "abs", "(", "max_coordinates_label", "-", "min_coordinates_label", ")", "\n", "bounding_box_label_volume", "=", "torch", ".", "prod", "(", "edge_sizes_label", ")", "\n", "# Calc volume of prediction bounding box", "\n", "edge_size_prediction", "=", "torch", ".", "abs", "(", "max_coordinates_prediction", "-", "min_coordinates_prediction", ")", "\n", "bounding_box_prediction_volume", "=", "torch", ".", "prod", "(", "edge_size_prediction", ")", "\n", "# Calc coordinates of intersecting bounding box", "\n", "overlap", "=", "torch", ".", "max", "(", "torch", ".", "zeros", "(", "max_coordinates_prediction", ".", "shape", ")", ".", "to", "(", "prediction", ".", "device", ")", ",", "\n", "torch", ".", "min", "(", "max_coordinates_prediction", ",", "max_coordinates_label", ")", "-", "torch", ".", "max", "(", "\n", "min_coordinates_prediction", ",", "min_coordinates_label", ")", ")", "\n", "# Calc intersection volume", "\n", "intersection", "=", "torch", ".", "prod", "(", "overlap", ")", "\n", "# Calc intersection over union by: intersection / (volume label + volume prediction - intersection)", "\n", "iou", "=", "intersection", "/", "(", "bounding_box_prediction_volume", "+", "bounding_box_label_volume", "-", "intersection", "+", "+", "1e-9", ")", "\n", "# Calc error", "\n", "bounding_box_error", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "max_coordinates_prediction", "-", "max_coordinates_label", ")", ",", "\n", "torch", ".", "abs", "(", "min_coordinates_prediction", "-", "min_coordinates_label", ")", ")", "\n", "return", "iou", ".", "cpu", "(", ")", ",", "edge_size_prediction", ".", "cpu", "(", ")", ",", "bounding_box_error", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.intersection_over_union": [[70, 100], ["pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "torch.from_numpy().to", "torch.from_numpy().to", "prediction.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "label.cpu().numpy", "coordinates.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "label.cpu", "coordinates.cpu"], "function", ["None"], ["", "def", "intersection_over_union", "(", "prediction", ":", "torch", ".", "tensor", ",", "coordinates", ":", "torch", ".", "tensor", ",", "label", ":", "torch", ".", "tensor", ",", "\n", "threshold", ":", "float", "=", "0.5", ")", "->", "torch", ".", "tensor", ":", "\n", "    ", "\"\"\"\n    Calculates the intersection over union for a given prediction and label.\n    Works only with one batch!\n    :param prediction: (torch.tensor) Raw prediction of the O-Net (samples)\n    :param coordinates: (torch.tensor) Input coordinates of the O-Net (samples, 3)\n    :param label: (torch.tensor) High resolution label including only ones (samples, 3)\n    :param threshold: (float) Threshold for prediction (default=0.5)\n    :return: (torch.tensor) Intersection over union value\n    \"\"\"", "\n", "# Init kd tree", "\n", "kd_tree", "=", "KDTree", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "leafsize", "=", "16", ")", "\n", "# Estimate which coordinates are weapons", "\n", "dist_coordinates_to_label", ",", "_", "=", "kd_tree", ".", "query", "(", "coordinates", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "del", "_", "# Help the python garbage collector", "\n", "dist_coordinates_to_label", "=", "torch", ".", "from_numpy", "(", "dist_coordinates_to_label", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "# Estimate which coordinates belongs to a weapon", "\n", "coordinates_label", "=", "(", "dist_coordinates_to_label", "==", "0.0", ")", ".", "float", "(", ")", "# 1 if weapon 0 if not", "\n", "# Reshape prediction to one dimension", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ")", "\n", "# Apply threshold", "\n", "prediction", "=", "(", "prediction", ">", "threshold", ")", ".", "float", "(", ")", "\n", "# Calc intersect and union", "\n", "sum_of_prediction_and_coordinates_label", "=", "prediction", "+", "coordinates_label", "\n", "intersection", "=", "torch", ".", "sum", "(", "(", "sum_of_prediction_and_coordinates_label", "==", "2", ")", ".", "float", "(", ")", ")", "\n", "union", "=", "torch", ".", "sum", "(", "(", "sum_of_prediction_and_coordinates_label", ">=", "1", ")", ".", "float", "(", ")", ")", "\n", "# Calc iou", "\n", "iou", "=", "intersection", "/", "(", "union", "+", "1e-9", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_tensor_size_mb": [[102, 109], ["tensor.nelement", "tensor.element_size"], "function", ["None"], ["", "def", "get_tensor_size_mb", "(", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Method that calculates the megabyte needed for a tensor to be stored. Takes into account if tensor is on CPU or GPU.\n    :param tensor: (torch.Tensor) Input tensor\n    :return: (int) Tensor size in megabyte\n    \"\"\"", "\n", "return", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "*", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.precision": [[111, 140], ["pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "torch.from_numpy().to", "torch.from_numpy().to", "prediction.view.view", "label.cpu().numpy", "coordinates.cpu().numpy", "torch.sum", "torch.sum", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "label.cpu", "coordinates.cpu"], "function", ["None"], ["", "def", "precision", "(", "prediction", ":", "torch", ".", "Tensor", ",", "coordinates", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ",", "\n", "threshold", ":", "float", "=", "0.5", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "'''\n    Method calculates teh precision metric\n    :param prediction: (torch.Tensor) Prediction\n    :param coordinates: (torch.Tensor) Coordinates used\n    :param label: (torch.Tensor) Label\n    :param threshold: (float) Threshold utilized\n    :return: (torch.Tensor) Precision value\n    '''", "\n", "# Init kd tree", "\n", "kd_tree", "=", "KDTree", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "leafsize", "=", "16", ")", "\n", "# Estimate which coordinates are weapons", "\n", "dist_coordinates_to_label", ",", "_", "=", "kd_tree", ".", "query", "(", "coordinates", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "del", "_", "# Help the python garbage collector", "\n", "dist_coordinates_to_label", "=", "torch", ".", "from_numpy", "(", "dist_coordinates_to_label", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "# Estimate which coordinates belongs to a weapon", "\n", "coordinates_label", "=", "(", "dist_coordinates_to_label", "==", "0.0", ")", ".", "float", "(", ")", "# 1 if weapon 0 if not", "\n", "# Reshape prediction to one dimension", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ")", "\n", "# Apply threshold", "\n", "prediction", "=", "(", "prediction", ">", "threshold", ")", ".", "float", "(", ")", "\n", "# Calc true positives", "\n", "tp", "=", "(", "(", "(", "prediction", "==", "1.0", ")", ".", "float", "(", ")", "+", "(", "coordinates_label", "==", "1.0", ")", ".", "float", "(", ")", ")", "==", "2.0", ")", ".", "float", "(", ")", "\n", "# Calc False positives", "\n", "fp", "=", "(", "(", "(", "prediction", "==", "1.0", ")", ".", "float", "(", ")", "+", "(", "coordinates_label", "==", "0.0", ")", ".", "float", "(", ")", ")", "==", "2.0", ")", ".", "float", "(", ")", "\n", "# Calc precision", "\n", "precision", "=", "torch", ".", "sum", "(", "tp", ")", "/", "(", "torch", ".", "sum", "(", "tp", "+", "fp", ")", "+", "1e-9", ")", "\n", "return", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.recall": [[142, 171], ["pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "torch.from_numpy().to", "torch.from_numpy().to", "prediction.view.view", "label.cpu().numpy", "coordinates.cpu().numpy", "torch.sum", "torch.sum", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "label.cpu", "coordinates.cpu"], "function", ["None"], ["", "def", "recall", "(", "prediction", ":", "torch", ".", "Tensor", ",", "coordinates", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ",", "\n", "threshold", ":", "float", "=", "0.5", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "'''\n    Method calculates teh recall metric\n    :param prediction: (torch.Tensor) Prediction\n    :param coordinates: (torch.Tensor) Coordinates used\n    :param label: (torch.Tensor) Label\n    :param threshold: (float) Threshold utilized\n    :return: (torch.Tensor) Recall value\n    '''", "\n", "# Init kd tree", "\n", "kd_tree", "=", "KDTree", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "leafsize", "=", "16", ")", "\n", "# Estimate which coordinates are weapons", "\n", "dist_coordinates_to_label", ",", "_", "=", "kd_tree", ".", "query", "(", "coordinates", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "del", "_", "# Help the python garbage collector", "\n", "dist_coordinates_to_label", "=", "torch", ".", "from_numpy", "(", "dist_coordinates_to_label", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "# Estimate which coordinates belongs to a weapon", "\n", "coordinates_label", "=", "(", "dist_coordinates_to_label", "==", "0.0", ")", ".", "float", "(", ")", "# 1 if weapon 0 if not", "\n", "# Reshape prediction to one dimension", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ")", "\n", "# Apply threshold", "\n", "prediction", "=", "(", "prediction", ">", "threshold", ")", ".", "float", "(", ")", "\n", "# Calc true positives", "\n", "tp", "=", "(", "(", "(", "prediction", "==", "1.0", ")", ".", "float", "(", ")", "+", "(", "coordinates_label", "==", "1.0", ")", ".", "float", "(", ")", ")", "==", "2.0", ")", ".", "float", "(", ")", "\n", "# Calc False negatives", "\n", "fn", "=", "(", "(", "(", "prediction", "==", "0.0", ")", ".", "float", "(", ")", "+", "(", "coordinates_label", "==", "1.0", ")", ".", "float", "(", ")", ")", "==", "2.0", ")", ".", "float", "(", ")", "\n", "# Calc precision", "\n", "precision", "=", "torch", ".", "sum", "(", "tp", ")", "/", "(", "torch", ".", "sum", "(", "tp", "+", "fn", ")", "+", "1e-9", ")", "\n", "return", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_activation": [[173, 197], ["torch.Sequential", "torch.ReLU", "torch.Sequential", "torch.LeakyReLU", "torch.Sequential", "torch.ELU", "torch.Sequential", "torch.PReLU", "torch.Sequential", "torch.SELU", "torch.Sequential", "torch.Sigmoid", "torch.Sequential", "RuntimeError"], "function", ["None"], ["", "def", "get_activation", "(", "activation", ":", "str", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "\"\"\"\n    Method to return different types of activation functions\n    :param activation: (str) Type of activation ('relu', 'leaky relu', 'elu', 'prlu', 'selu', 'sigmoid', 'identity')\n    :return: (nn.Sequential) Activation function\n    \"\"\"", "\n", "assert", "activation", "in", "[", "'relu'", ",", "'leaky relu'", ",", "'elu'", ",", "'prelu'", ",", "'selu'", ",", "'sigmoid'", ",", "'identity'", "]", ",", "'Activation {} is not available!'", ".", "format", "(", "activation", ")", "\n", "if", "activation", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'leaky relu'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'elu'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "ELU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "PReLU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "SELU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "elif", "activation", "==", "'identity'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Activation {} is not available!'", ".", "format", "(", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_3d": [[199, 216], ["torch.Sequential", "torch.BatchNorm3d", "torch.Sequential", "torch.InstanceNorm3d", "torch.Identity", "RuntimeError"], "function", ["None"], ["", "", "def", "get_normalization_3d", "(", "normalization", ":", "str", ",", "channels", ":", "int", ",", "affine", ":", "bool", "=", "True", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "\"\"\"\n    Method to return different types of 3D normalization operations\n    :param normalization: (str) Type of normalization ('batchnorm', 'instancenorm')\n    :param channels: (int) Number of channels to use\n    :return: (nn.Sequential) Normalization operation\n    \"\"\"", "\n", "assert", "normalization", "in", "[", "'batchnorm'", ",", "'instancenorm'", ",", "'none'", "]", ",", "'Normalization {} is not available!'", ".", "format", "(", "normalization", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm3d", "(", "channels", ",", "affine", "=", "affine", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "InstanceNorm3d", "(", "channels", ",", "affine", "=", "affine", ")", ")", "\n", "", "elif", "normalization", "==", "'none'", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Normalization {} is not available!'", ".", "format", "(", "normalization", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_normalization_1d": [[218, 238], ["torch.Sequential", "torch.BatchNorm1d", "torch.Sequential", "ModelParts.InstanceNorm1d", "ModelParts.ConditionalBatchNorm1d", "torch.Sequential", "RuntimeError"], "function", ["None"], ["", "", "def", "get_normalization_1d", "(", "normalization", ":", "str", ",", "channels", ":", "int", ",", "channels_latent", ":", "int", "=", "None", ",", "affine", ":", "bool", "=", "True", ")", "->", "Union", "[", "\n", "nn", ".", "Sequential", ",", "nn", ".", "Module", "]", ":", "\n", "    ", "\"\"\"\n    Method to return different types of 1D normalization operations\n    :param normalization: (str) Type of normalization ('batchnorm', 'instancenorm')\n    :param channels: (int) Number of channels to use\n    :return: (nn.Sequential) Normalization operation\n    \"\"\"", "\n", "assert", "normalization", "in", "[", "'batchnorm'", ",", "'instancenorm'", ",", "'cbatchnorm'", ",", "'none'", "]", ",", "'Normalization {} is not available!'", ".", "format", "(", "normalization", ")", "\n", "if", "normalization", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "affine", "=", "affine", ")", ")", "\n", "", "elif", "normalization", "==", "'instancenorm'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "ModelParts", ".", "InstanceNorm1d", "(", ")", ")", "\n", "", "elif", "normalization", "==", "'cbatchnorm'", ":", "\n", "        ", "return", "ModelParts", ".", "ConditionalBatchNorm1d", "(", "channels_latent", ",", "channels", ")", "\n", "", "elif", "normalization", "==", "'none'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Normalization {} is not available!'", ".", "format", "(", "normalization", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_downsampling_3d": [[240, 262], ["torch.Sequential", "torch.MaxPool3d", "torch.Sequential", "torch.AvgPool3d", "torch.Sequential", "torch.Conv3d", "torch.Sequential", "RuntimeError"], "function", ["None"], ["", "", "def", "get_downsampling_3d", "(", "downsampling", ":", "str", ",", "factor", ":", "int", "=", "2", ",", "channels", ":", "int", "=", "0", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "\"\"\"\n    Method to return different types of 3D downsampling operations\n    :param downsampling: (str) Type of donwsnapling ('maxpool', 'averagepool', 'convolution', 'none')\n    :param factor: (int) Factor of downsampling\n    :param channels: (int) Number of channels (only for convolution)\n    :return: (nn.Sequential) Downsampling operation\n    \"\"\"", "\n", "assert", "downsampling", "in", "[", "'maxpool'", ",", "'averagepool'", ",", "'convolution'", ",", "'none'", "]", ",", "'Downsampling {} is not available'", ".", "format", "(", "downsampling", ")", "\n", "if", "downsampling", "==", "'maxpool'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "factor", ",", "stride", "=", "factor", ")", ")", "\n", "", "elif", "downsampling", "==", "'averagepool'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "factor", ",", "stride", "=", "factor", ")", ")", "\n", "", "elif", "downsampling", "==", "'convolution'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "kernel_size", "=", "factor", ",", "stride", "=", "factor", ",", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", ")", "\n", "", "elif", "downsampling", "==", "'none'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Downsampling {} is not available'", ".", "format", "(", "downsampling", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.parse_to_list": [[264, 284], ["isinstance", "len"], "function", ["None"], ["", "", "def", "parse_to_list", "(", "\n", "possible_list", ":", "Union", "[", "int", ",", "float", ",", "bool", ",", "str", ",", "Tuple", "[", "int", "]", ",", "List", "[", "Union", "[", "int", ",", "float", ",", "bool", ",", "str", ",", "Tuple", "[", "int", "]", "]", "]", "]", ",", "\n", "length", ":", "int", ",", "name", ":", "str", "=", "''", ")", "->", "List", "[", "Union", "[", "int", ",", "float", ",", "bool", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Function checks if parameter possible list is as list or a primitive data type.\n    If a primitive data type is present a list with the desired length including the primitive variable in each\n    element is returned.\n    Examples:   possible_list=True, length=3            ->  [True, True, True]\n                possible_list=[3, 4, 5, 6], length=4    ->  [3, 4, 5, 6]\n    :param possible_list:\n    :param length:\n    :param name:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "possible_list", ",", "list", ")", ":", "\n", "        ", "assert", "len", "(", "possible_list", ")", "==", "length", ",", "'Length of {} list has to match with the number of blocks'", ".", "format", "(", "name", ")", "\n", "return", "possible_list", "\n", "", "else", ":", "\n", "        ", "return", "[", "possible_list", "]", "*", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.many_to_one_collate_fn_sample": [[286, 292], ["torch.stack", "torch.stack", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "many_to_one_collate_fn_sample", "(", "batch", ")", ":", "\n", "    ", "volumes", "=", "torch", ".", "stack", "(", "[", "elm", "[", "0", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "elm", "[", "1", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "[", "elm", "[", "2", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "volumes", ",", "coords", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.many_to_one_collate_fn_sample_down": [[294, 301], ["torch.stack", "torch.stack", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "many_to_one_collate_fn_sample_down", "(", "batch", ")", ":", "\n", "    ", "volumes", "=", "torch", ".", "stack", "(", "[", "elm", "[", "0", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "elm", "[", "1", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "[", "elm", "[", "2", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "low_volumes", "=", "torch", ".", "stack", "(", "[", "elm", "[", "3", "]", "for", "elm", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "volumes", ",", "coords", ",", "labels", ",", "low_volumes", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.draw_test": [[303, 388], ["os.path.join", "locs.cpu().numpy().astype", "actual[].cpu().numpy().astype", "numpy.array", "os.getcwd", "os.path.exists", "os.mkdir", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "locs.cpu().numpy", "actual[].cpu().numpy", "os.path.join", "f.write", "os.path.join", "f.write", "locs.cpu", "actual[].cpu", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "draw_test", "(", "locs", ",", "actual", ",", "volume", ",", "side_len", ":", "int", ",", "batch_index", ":", "int", ",", "draw_out_path", ":", "str", "=", "'obj'", ")", "->", "None", ":", "\n", "    ", "draw_out_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "draw_out_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "draw_out_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "draw_out_path", ")", "\n", "\n", "", "if", "batch_index", "%", "25", "!=", "0", ":", "\n", "        ", "return", "\n", "\n", "", "to_write", "=", "locs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "short", ")", "\n", "# Only each 10th as meshlab crashes otherwise", "\n", "to_write_act", "=", "actual", "[", ":", ":", "10", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "short", ")", "# actual[::10,:]", "\n", "# Mean (shape) centering", "\n", "mean", "=", "np", ".", "array", "(", "[", "volume", ".", "shape", "[", "2", "]", "*", "side_len", "/", "2", ",", "volume", ".", "shape", "[", "3", "]", "*", "side_len", "/", "2", ",", "volume", ".", "shape", "[", "4", "]", "*", "side_len", "/", "2", "]", ")", "\n", "to_write_act", "=", "to_write_act", "-", "mean", "\n", "to_write", "=", "to_write", "-", "mean", "# np.mean(to_write, axis=0)", "\n", "\n", "# print(locs.shape, to_write.shape, actual.shape, to_write_act.shape)", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "draw_out_path", ",", "str", "(", "batch_index", ")", "+", "'_outfile_pred.obj'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "to_write", ":", "\n", "            ", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "line", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "2", "]", ")", "+", "\n", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"1.0\"", "+", "\"\\n\"", ")", "\n", "# for line in to_write_act:", "\n", "#     f.write(\"v \" + \" \" + str(line[0]) + \" \" + str(line[1]) + \" \" + str(line[2]) + ", "\n", "#     \" \" + \"0.19\" + \" \" + \"0.8\" + \" \" + \"0.19\" + \"\\n\")", "\n", "\n", "# Corners of volume", "\n", "", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "\n", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "draw_out_path", ",", "str", "(", "batch_index", ")", "+", "'_outfile_label.obj'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "# for line in to_write:", "\n", "#     f.write(\"v \" + \" \" + str(line[0]) + \" \" + str(line[1]) + \" \" + str(line[2]) + ", "\n", "#         \" \" + \"0.5\" + \" \" + \"0.5\" + \" \" + \"1.0\" + \"\\n\")", "\n", "        ", "for", "line", "in", "to_write_act", ":", "\n", "            ", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "line", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "2", "]", ")", "+", "\n", "\" \"", "+", "\"0.19\"", "+", "\" \"", "+", "\"0.8\"", "+", "\" \"", "+", "\"0.19\"", "+", "\"\\n\"", ")", "\n", "\n", "# Corners of volume", "\n", "", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "2", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "\n", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "\"0\"", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "3", "]", "*", "side_len", ")", "+", "\" \"", "+", "str", "(", "volume", ".", "shape", "[", "4", "]", "*", "side_len", ")", "+", "\n", "\" \"", "+", "\"1.0\"", "+", "\" \"", "+", "\"0.5\"", "+", "\" \"", "+", "\"0.5\"", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Misc.get_number_of_network_parameters": [[390, 398], ["network.train", "sum", "p.numel", "network.parameters"], "function", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.ModelWrapper.OccupancyNetworkWrapper.train"], ["", "", "def", "get_number_of_network_parameters", "(", "network", ":", "nn", ".", "Module", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Method estimates the number of learnable parameters in a given network\n    :param network: (nn.Module) Network\n    :return: (int) Number of learnable parameters\n    \"\"\"", "\n", "network", ".", "train", "(", ")", "\n", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "network", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__init__": [[12, 39], ["int", "Misc.FilePermutation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target_path_volume", ":", "str", ",", "target_path_label", ":", "str", ",", "length", ":", "int", ",", "dim_max", ":", "int", "=", "640", ",", "\n", "npoints", ":", "int", "=", "2", "**", "10", ",", "side_len", ":", "int", "=", "32", ",", "\n", "sampling", ":", "str", "=", "'one'", ",", "offset", ":", "int", "=", "0", ",", "test", ":", "bool", "=", "False", ",", "share_box", ":", "float", "=", "0.6", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Constructor method\n        :param target_path_volume: (str)\n        :param target_path_label: (str)\n        :param length: (int)\n        :param dim_max: (int)\n        :param npoints: (int)\n        :param side_len: (int)\n        :param sampling: (str)\n        :param offset: (int)\n        :param share_box: (float)\n        :param test: (bool)\n        \"\"\"", "\n", "self", ".", "npoints", "=", "npoints", "\n", "self", ".", "side_len", "=", "side_len", "\n", "self", ".", "dim_max", "=", "int", "(", "dim_max", "/", "side_len", ")", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "target_path_volume", "=", "target_path_volume", "\n", "self", ".", "target_path_label", "=", "target_path_label", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "index_wrapper", "=", "Misc", ".", "FilePermutation", "(", ")", "\n", "self", ".", "share_box", "=", "share_box", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__getitem__": [[40, 109], ["numpy.load", "numpy.load", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.concatenate", "pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "numpy.expand_dims().astype", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "str", "str", "numpy.expand_dims", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.concatenate", "pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "numpy.expand_dims().astype", "numpy.concatenate", "numpy.concatenate", "int", "int", "int", "numpy.ones", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.choice", "int", "int", "int", "numpy.expand_dims", "numpy.ones", "numpy.load.astype", "int", "numpy.random.choice", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "torch", ".", "tensor", "]", ":", "\n", "        ", "\"\"\"\n        Getter method\n        :param index: (int) Index\n        :return: (Tuple[torch.tensor]) Batch of volume, coordinates and label\n        \"\"\"", "\n", "# Calc index", "\n", "index", "=", "index", "+", "self", ".", "offset", "\n", "index", "=", "self", ".", "index_wrapper", "[", "index", "]", "\n", "# Load volume and label", "\n", "volume_n", "=", "np", ".", "load", "(", "self", ".", "target_path_volume", "+", "str", "(", "index", ")", "+", "\".npy\"", ")", "\n", "label_n", "=", "np", ".", "load", "(", "self", ".", "target_path_label", "+", "str", "(", "index", ")", "+", "\"_label.npy\"", ")", "\n", "\n", "sampling_shapes_tc", "=", "[", "0", ",", "volume_n", ".", "shape", "[", "1", "]", "*", "self", ".", "side_len", ",", "volume_n", ".", "shape", "[", "2", "]", "*", "self", ".", "side_len", ",", "\n", "volume_n", ".", "shape", "[", "3", "]", "*", "self", ".", "side_len", "]", "\n", "\n", "if", "self", ".", "sampling", "==", "'default'", ":", "\n", "# Mixed Coords", "\n", "            ", "x_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "1", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", ")", ",", "1", ")", ")", "\n", "y_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "2", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", ")", ",", "1", ")", ")", "\n", "z_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "3", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", ")", ",", "1", ")", ")", "\n", "coords_zero", "=", "np", ".", "concatenate", "(", "(", "x_n", ",", "y_n", ",", "z_n", ")", ",", "axis", "=", "1", ")", "\n", "kd_tree", "=", "KDTree", "(", "label_n", ",", "leafsize", "=", "16", ")", "\n", "dist", ",", "_", "=", "kd_tree", ".", "query", "(", "coords_zero", ",", "k", "=", "1", ")", "\n", "labels_zero", "=", "np", ".", "expand_dims", "(", "dist", "==", "0", ",", "axis", "=", "1", ")", ".", "astype", "(", "float", ")", "\n", "\n", "coords", "=", "coords_zero", "\n", "labels", "=", "labels_zero", "\n", "\n", "", "elif", "self", ".", "sampling", "==", "'one_fast'", ":", "\n", "# Coords with one as label", "\n", "            ", "coords_one", "=", "label_n", "[", "np", ".", "random", ".", "choice", "(", "label_n", ".", "shape", "[", "0", "]", ",", "int", "(", "self", ".", "npoints", "*", "self", ".", "share_box", ")", ",", "replace", "=", "False", ")", ",", "\n", ":", "]", "\n", "\n", "# Mixed Coords", "\n", "x_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "1", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "y_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "2", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "z_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "3", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "coords_zero", "=", "np", ".", "concatenate", "(", "(", "x_n", ",", "y_n", ",", "z_n", ")", ",", "axis", "=", "1", ")", "\n", "\n", "coords", "=", "np", ".", "concatenate", "(", "(", "coords_one", ",", "coords_zero", ")", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "ones", "(", "(", "coords_one", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "coords_zero", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "elif", "self", ".", "sampling", "==", "'one'", ":", "\n", "# Coords with one as label", "\n", "            ", "coords_one", "=", "label_n", "[", "np", ".", "random", ".", "choice", "(", "label_n", ".", "shape", "[", "0", "]", ",", "int", "(", "self", ".", "npoints", "*", "self", ".", "share_box", ")", ",", "replace", "=", "False", ")", ",", "\n", ":", "]", "\n", "\n", "# Mixed Coords", "\n", "x_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "1", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "y_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "2", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "z_n", "=", "np", ".", "random", ".", "randint", "(", "sampling_shapes_tc", "[", "3", "]", ",", "size", "=", "(", "int", "(", "self", ".", "npoints", "*", "(", "1", "-", "self", ".", "share_box", ")", ")", ",", "1", ")", ")", "\n", "coords_zero", "=", "np", ".", "concatenate", "(", "(", "x_n", ",", "y_n", ",", "z_n", ")", ",", "axis", "=", "1", ")", "\n", "kd_tree", "=", "KDTree", "(", "label_n", ",", "leafsize", "=", "16", ")", "\n", "dist", ",", "_", "=", "kd_tree", ".", "query", "(", "coords_zero", ",", "k", "=", "1", ")", "\n", "labels_zero", "=", "np", ".", "expand_dims", "(", "dist", "==", "0", ",", "axis", "=", "1", ")", ".", "astype", "(", "float", ")", "\n", "\n", "coords", "=", "np", ".", "concatenate", "(", "(", "coords_one", ",", "coords_zero", ")", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "ones", "(", "(", "coords_one", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "labels_zero", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# print(\"Access time\", t.stop())", "\n", "", "if", "self", ".", "test", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "volume_n", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "coords", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "\n", "labels", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label_n", ".", "astype", "(", "int", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "volume_n", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "coords", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "\n", "labels", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__len__": [[110, 116], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the length of the whole dataset\n        :return: (int) Length of the dataset\n        \"\"\"", "\n", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.get_side_len": [[117, 123], ["None"], "methods", ["None"], ["", "def", "get_side_len", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        ?????\n        :return: (int)\n        \"\"\"", "\n", "return", "self", ".", "side_len", "\n", "\n"]], "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.write_obj": [[124, 149], ["[].cpu().numpy", "numpy.max", "open", "range", "open", "[].cpu().numpy", "range", "[].cpu", "range", "f.write", "range", "[].cpu", "f.write", "Datasets.WeaponDataset.__getitem__", "str", "Datasets.WeaponDataset.__getitem__", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__getitem__", "home.repos.pwc.inspect_result.christophreich1996_3d_baggage_segmentation.None.Datasets.WeaponDataset.__getitem__"], ["", "def", "write_obj", "(", "self", ",", "index", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        ???\n        :param index: (int) Index\n        \"\"\"", "\n", "vol", "=", "self", ".", "__getitem__", "(", "index", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "maximum", "=", "np", ".", "max", "(", "vol", ")", "\n", "vol", "=", "vol", "/", "maximum", "\n", "vol", "[", "vol", "-", "0.15", "<", "0", "]", "=", "0", "\n", "\n", "with", "open", "(", "'outfile_org.obj'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "range", "(", "vol", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "vol", ".", "shape", "[", "2", "]", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "vol", ".", "shape", "[", "3", "]", ")", ":", "\n", "                        ", "color", "=", "vol", "[", "0", "]", "[", "i", "]", "[", "j", "]", "[", "k", "]", "\n", "if", "color", "==", "0", ":", "\n", "                            ", "continue", "\n", "", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "i", "*", "self", ".", "side_len", ")", "+", "\" \"", "+", "str", "(", "j", "*", "self", ".", "side_len", ")", "+", "\" \"", "+", "str", "(", "\n", "k", "*", "self", ".", "side_len", ")", "+", "\n", "\" \"", "+", "str", "(", "color", ")", "+", "\" \"", "+", "str", "(", "0.5", ")", "+", "\" \"", "+", "str", "(", "0.5", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "", "with", "open", "(", "'outfile_labels.obj'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "label", "=", "self", ".", "__getitem__", "(", "index", ")", "[", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"v \"", "+", "\" \"", "+", "str", "(", "label", "[", "i", "]", "[", "0", "]", ")", "+", "\" \"", "+", "str", "(", "label", "[", "i", "]", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "label", "[", "i", "]", "[", "2", "]", ")", "+", "\n", "\" \"", "+", "str", "(", "0", ")", "+", "\" \"", "+", "str", "(", "0", ")", "+", "\" \"", "+", "str", "(", "1", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "", ""]]}