{"home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.__init__": [[13, 24], ["torch.Module.__init__", "metric_provider.MetricProvider._get_metric"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider._get_metric"], ["    ", "def", "__init__", "(", "self", ",", "metric", ":", "str", "=", "\"mse\"", ")", ":", "\n", "        ", "\"\"\"Helper class to use metric.\n\n        Args:\n            metric (str): Metric to use for evaluation.\n        \"\"\"", "\n", "super", "(", "MetricProvider", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_metric", "=", "self", ".", "_get_metric", "(", "metric", ")", "if", "metric", "else", "None", "\n", "self", ".", "eval_fn", "=", "self", ".", "masked_eval_fn", "\n", "self", ".", "metric_name", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider._get_metric": [[25, 33], ["metric.lower"], "methods", ["None"], ["", "def", "_get_metric", "(", "self", ",", "metric", ":", "str", ")", ":", "\n", "        ", "\"\"\"Factory method to return metric.\n\n        Args:\n            metric (str): Metric to use for evaluation.\n        \"\"\"", "\n", "\n", "return", "{", "\"mae\"", ":", "self", ".", "MAE", ",", "\"mse\"", ":", "self", ".", "MSE", ",", "\"ccc\"", ":", "self", ".", "CCC", "}", "[", "metric", ".", "lower", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.masked_eval_fn": [[34, 59], ["enumerate", "metric_provider.MetricProvider._metric", "batch_preds.append", "batch_labs.append"], "methods", ["None"], ["", "def", "masked_eval_fn", "(", "\n", "self", ",", "\n", "predictions", ":", "np", ".", "array", ",", "\n", "labels", ":", "np", ".", "array", ",", "\n", "masks", ":", "list", ",", "\n", "take_last_frame", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Method to compute the masked metric evaluation.\n\n        Args:\n            predictions (np.array): Model predictions.\n            labels (np.array): Data labels.\n            masks (list): List of the frames to consider in each batch.\n        \"\"\"", "\n", "\n", "dtype", "=", "predictions", "[", "0", "]", ".", "dtype", "\n", "\n", "batch_preds", "=", "[", "]", "\n", "batch_labs", "=", "[", "]", "\n", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "batch_preds", ".", "append", "(", "predictions", "[", "i", "]", "[", ":", "m", "]", ")", "\n", "batch_labs", ".", "append", "(", "labels", "[", "i", "]", "[", ":", "m", "]", ")", "\n", "\n", "", "return", "self", ".", "_metric", "(", "batch_preds", ",", "batch_labs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.create_mask": [[60, 70], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "tensor_like", ",", "seq_lens", ",", "take_last_frame", ")", ":", "\n", "        ", "if", "seq_lens", "is", "not", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "tensor_like", ",", "device", "=", "tensor_like", ".", "device", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "seq_lens", ")", ":", "\n", "                ", "mframe", "=", "m", "-", "1", "if", "take_last_frame", "else", "range", "(", "m", ")", "\n", "mask", "[", "i", ",", "mframe", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "ones_like", "(", "tensor_like", ",", "device", "=", "tensor_like", ".", "device", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.MAE": [[71, 76], ["metric_provider.MetricProvider.create_mask", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.create_mask"], ["", "def", "MAE", "(", "self", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "mask", ",", "take_last_frame", ")", ":", "\n", "\n", "        ", "mask", "=", "self", ".", "create_mask", "(", "y_true", ",", "mask", ",", "take_last_frame", ")", "\n", "\n", "return", "(", "mask", "*", "torch", ".", "abs", "(", "y_pred", "-", "y_true", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.MSE": [[77, 84], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "MSE", "(", "\n", "self", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "mask", "=", "None", ",", "take_last_frame", "=", "1", "\n", ")", ":", "\n", "\n", "        ", "mse", "=", "torch", ".", "mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ")", "\n", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.metric_provider.MetricProvider.CCC": [[85, 112], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "CCC", "(", "\n", "self", ",", "\n", "y_pred", ":", "torch", ".", "tensor", ",", "\n", "y_true", ":", "torch", ".", "tensor", ",", "\n", "seq_lens", "=", "None", ",", "\n", "take_last_frame", "=", "1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Concordance Correlation Coefficient (CCC) metric.\n\n        Args:\n            predictions (list): Model predictions.\n            labels (list): Data labels.\n        \"\"\"", "\n", "\n", "y_true_mean", "=", "torch", ".", "mean", "(", "y_true", ")", "\n", "y_pred_mean", "=", "torch", ".", "mean", "(", "y_pred", ")", "\n", "\n", "y_true_var", "=", "torch", ".", "var", "(", "y_true", ",", "unbiased", "=", "False", ")", "\n", "y_pred_var", "=", "torch", ".", "var", "(", "y_pred", ",", "unbiased", "=", "False", ")", "\n", "\n", "mean_cent_prod", "=", "torch", ".", "mean", "(", "(", "y_pred", "-", "y_pred_mean", ")", "*", "(", "y_true", "-", "y_true_mean", ")", ")", "\n", "\n", "ccc", "=", "(", "2", "*", "mean_cent_prod", ")", "/", "(", "\n", "y_pred_var", "+", "y_true_var", "+", "(", "y_pred_mean", "-", "y_true_mean", ")", "**", "2", "\n", ")", "\n", "\n", "return", "ccc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.__init__": [[24, 86], ["data_provider.get_dataloader", "data_provider.get_dataloader", "model.Model", "argparse.Namespace", "torch.AdamW", "torch.AdamW", "torch.AdamW", "pathlib.Path", "train.Train.base_dir.mkdir", "train.Train.get_logger", "logging.info", "losses.Losses", "train.Train.model.parameters", "train.Train.model.cuda", "train.Train.load_checkpoint", "metric_provider.MetricProvider"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader", "home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.get_logger", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.load_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "dataset_params", ":", "dict", ",", "network_params", ":", "dict", ",", "train_params", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Performs the training of the model.\n\n        Args:\n          dataset_params (dict): the parameters to load the daset.\n              'class'      (str): The dataset class to provide.\n              'train_path' (str): The path to the training csv file.\n              'valid_path' (str): The path to the validation csv file.\n              'batch_size' (int): Batch size to use during training.\n\n          network_params (dict): the parameters to load the network. Depend on the network used.\n                'network_type' (str)  : The network type to use.\n                 *args, **kwargs.     : The parameters of the network.\n\n          train_params (dict): Training parameters.\n                'number_of_epochs' (int)  : Number of epochs to train model.\n                'lr'               (float): learning rate of the model.\n                'loss_name'        (str)  : The loss to use. Only one value 'cross_entropy_loss',\n                'base_dir'         (str)  : The directory to save best model/logs.\n                'eval_name'        (str)  : The evaluation metric to use. Only one value:'accuracy',\n                'use_gpu'          (bool) : Whether to use GPU.\n                'log_path'         (str)  : Path to save log file.\n                'nepochs2stop'     (int)  : If model has not improved for `nepochs2stop`, then stop training.\n        \"\"\"", "\n", "\n", "self", ".", "train_dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "\n", "dataset_params", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "dataset_params", "[", "\"train\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "valid_dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "1", ",", "shuffle", "=", "False", ",", "**", "dataset_params", "[", "\"valid\"", "]", "\n", ")", "\n", "\n", "model_input_size", "=", "self", ".", "train_dataset", ".", "dataset", ".", "num_input_features", "\n", "self", ".", "model", "=", "Model", "(", "model_input_size", ",", "**", "network_params", ")", "\n", "\n", "self", ".", "train_params", "=", "Namespace", "(", "**", "train_params", ")", "\n", "\n", "self", ".", "loss_fn", "=", "Losses", "(", "self", ".", "train_params", ".", "loss_name", ")", ".", "loss_fn", "\n", "\n", "self", ".", "metric2track", "=", "self", ".", "train_params", ".", "metric2track", "\n", "self", ".", "eval_fns", "=", "{", "\n", "eval_name", ":", "MetricProvider", "(", "eval_name", ")", ".", "_metric", "\n", "for", "eval_name", "in", "self", ".", "train_params", ".", "eval_names", "\n", "}", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "train_params", ".", "lr", ")", "\n", "\n", "self", ".", "base_dir", "=", "Path", "(", "self", ".", "train_params", ".", "base_dir", ")", "\n", "self", ".", "base_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "use_gpu", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "self", ".", "train_params", ".", "log_path", ")", "\n", "logging", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "model_path", ":", "\n", "            ", "self", ".", "load_checkpoint", "(", "self", ".", "train_params", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.load_checkpoint": [[87, 106], ["logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Train.model.load_state_dict", "pathlib.Path().exists", "Exception", "str", "str", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "", "def", "load_checkpoint", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "\"\"\"Loads model parameters (state_dict) from file_path.\n            If optimizer is provided, loads state_dict of\n            optimizer assuming it is present in checkpoint.\n\n        Args:\n            checkpoint (str): Filename which needs to be loaded\n            model (torch.nn.Module): Model for which the parameters are loaded\n            optimizer (torch.optim): Optional: resume optimizer from checkpoint\n        \"\"\"", "\n", "\n", "logging", ".", "info", "(", "\"Restoring model from [{}]\"", ".", "format", "(", "str", "(", "ckpt_path", ")", ")", ")", "\n", "\n", "if", "not", "Path", "(", "ckpt_path", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"File doesn't exist [{}]\"", ".", "format", "(", "str", "(", "ckpt_path", ")", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "str", "(", "ckpt_path", ")", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ",", "strict", "=", "False", ")", "\n", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.get_logger": [[107, 128], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger().addHandler", "logging.getLogger"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "log_path", ":", "str", ")", ":", "\n", "        ", "\"\"\"Creates the logger to log output.\n\n        Args:\n          log_path (str): Path to save log file.\n        \"\"\"", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "\"%(asctime)s %(name)-4s %(levelname)-4s: %(message)s\"", ",", "\n", "datefmt", "=", "\"%d-%m-%y %H:%M\"", ",", "\n", "filename", "=", "log_path", ",", "\n", "filemode", "=", "\"w\"", ",", "\n", ")", "\n", "\n", "# define a Handler which writes INFO messages or higher to the sys.stderr", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# add the handler to the root logger", "\n", "logging", ".", "getLogger", "(", "\"\"", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.start": [[129, 165], ["logging.info", "float", "train.Train.model_dir.mkdir", "range", "logging.info", "train.Train.perform_train_epoch", "logging.info", "float", "train.Train.save_model", "logging.root.removeHandler", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.Train.perform_eval_epoch", "logging.info", "train.Train.save_model"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.perform_train_epoch", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.save_model", "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.perform_eval_epoch", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.save_model"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Starting Training\"", ")", "\n", "\n", "improved", "=", "0", "\n", "best_score", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "self", ".", "model_dir", "=", "self", ".", "base_dir", "/", "\"model\"", "\n", "self", ".", "model_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "train_params", ".", "number_of_epochs", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"Epoch: {epoch+1}/{self.train_params.number_of_epochs}\"", ")", "\n", "\n", "train_score", "=", "self", ".", "perform_train_epoch", "(", ")", "\n", "\n", "# Evaluate for one epoch on training and validation sets", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "valid_score", "=", "self", ".", "perform_eval_epoch", "(", "self", ".", "valid_dataset", ",", "\"Validation\"", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"\"", ")", "\n", "\n", "total_score", "=", "float", "(", "valid_score", ")", "\n", "if", "total_score", ">", "best_score", ":", "\n", "                ", "logging", ".", "info", "(", "\"New best score. Saving model...\"", ")", "\n", "improved", "=", "0", "\n", "best_score", "=", "total_score", "\n", "self", ".", "save_model", "(", "True", ",", "epoch", ",", "train_score", ",", "total_score", ")", "\n", "\n", "", "improved", "+=", "1", "\n", "self", ".", "save_model", "(", "False", ",", "epoch", ",", "train_score", ",", "valid_score", ")", "\n", "\n", "if", "improved", ">", "self", ".", "train_params", ".", "nepochs2stop", ":", "\n", "                ", "break", "\n", "\n", "# Remove all handlers associated with the root logger object.", "\n", "", "", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "            ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.save_model": [[166, 184], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Train.model.state_dict", "train.Train.optimizer.state_dict", "str", "numpy.savetxt", "numpy.array"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "best_model", ":", "bool", ",", "epoch", ",", "train_score", ",", "valid_score", ")", ":", "\n", "        ", "model_name", "=", "\"best_model\"", "if", "best_model", "else", "\"last_model\"", "\n", "\n", "save_dict", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"model_state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer_state_dict\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"valid_score\"", ":", "valid_score", ",", "\n", "\"train_score\"", ":", "train_score", ",", "\n", "}", "\n", "\n", "torch", ".", "save", "(", "save_dict", ",", "str", "(", "self", ".", "model_dir", "/", "f\"{model_name}.pth.tar\"", ")", ")", "\n", "\n", "if", "best_model", ":", "\n", "            ", "np", ".", "savetxt", "(", "\n", "f\"{self.train_params.base_dir}/best_score.txt\"", ",", "\n", "np", ".", "array", "(", "[", "valid_score", "]", ")", ",", "\n", "fmt", "=", "\"%f\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.perform_train_epoch": [[186, 280], ["train.Train.model.train", "collections.defaultdict", "collections.defaultdict", "enumerate", "enumerate", "enumerate", "mean_scores.items", "logging.info", "print", "numpy.array", "str", "print", "train.Train.optimizer.zero_grad", "train.Train.model", "enumerate", "len", "batch_loss.backward", "train.Train.optimizer.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "collections.defaultdict", "train.Train.eval_fns.items", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "batch_data.cuda.cuda.cuda", "batch_gt.cuda.cuda.cuda", "train.Train.loss_fn", "enumerate", "train.Train.eval_fns.items", "eval_fn", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "eval_performace.items", "enumerate", "len", "predictions[].append", "ground_truth[].append", "range", "batch_preds[].reshape", "batch_gt[].reshape", "label_name.values"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.train"], ["", "", "def", "perform_train_epoch", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "label_names", "=", "self", ".", "train_dataset", ".", "dataset", ".", "label_names", "\n", "loss_name", "=", "self", ".", "train_params", ".", "loss_name", "\n", "take_last_frame", "=", "self", ".", "train_params", ".", "take_last_frame", "\n", "\n", "eval_scores", "=", "{", "str", "(", "x", ")", ":", "[", "]", "for", "x", "in", "label_names", "}", "\n", "total_iter", ",", "total_loss_score", "=", "0", ",", "0", "\n", "\n", "predictions", "=", "defaultdict", "(", "list", ")", "\n", "ground_truth", "=", "defaultdict", "(", "list", ")", "\n", "for", "n_iter", ",", "(", "batch_data", ",", "batch_gt", ",", "mask", ",", "f", ")", "in", "enumerate", "(", "self", ".", "train_dataset", ")", ":", "\n", "            ", "print", "(", "f\"Iter:{n_iter+1}/{len(self.train_dataset)}\"", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "use_gpu", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "batch_gt", "=", "batch_gt", ".", "cuda", "(", ")", "\n", "\n", "", "batch_preds", "=", "self", ".", "model", "(", "batch_data", ")", "\n", "\n", "batch_loss_pred", "=", "0", "\n", "for", "l", ",", "label_name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "                ", "pred_loss", "=", "self", ".", "loss_fn", "(", "\n", "batch_preds", "[", "...", ",", "l", "]", ",", "batch_gt", "[", "...", ",", "l", "]", ",", "mask", ",", "take_last_frame", "\n", ")", "\n", "\n", "batch_loss_pred", "+=", "pred_loss", "\n", "\n", "", "batch_loss_pred", "/=", "len", "(", "label_names", ")", "\n", "\n", "batch_loss", "=", "batch_loss_pred", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "n_iter", "%", "self", ".", "train_params", ".", "save_summary_steps", "==", "0", ":", "\n", "                ", "total_loss_score", "+=", "batch_loss", "\n", "eval_score", ",", "batch_loss", "=", "0", ",", "0", "\n", "\n", "for", "l", ",", "name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "                    ", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ")", ":", "\n", "                        ", "mframe", "=", "m", "-", "1", "if", "take_last_frame", "else", "range", "(", "m", ")", "\n", "predictions", "[", "name", "]", ".", "append", "(", "\n", "batch_preds", "[", "i", ",", "mframe", ",", "l", "]", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "ground_truth", "[", "name", "]", ".", "append", "(", "\n", "batch_gt", "[", "i", ",", "mframe", ",", "l", "]", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "total_iter", "+=", "1", "\n", "\n", "", "", "total_loss_score", "/=", "total_iter", "\n", "\n", "for", "l", ",", "name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "            ", "predictions", "[", "name", "]", "=", "torch", ".", "cat", "(", "predictions", "[", "name", "]", ")", "\n", "ground_truth", "[", "name", "]", "=", "torch", ".", "cat", "(", "ground_truth", "[", "name", "]", ")", "\n", "\n", "# Compute evaluation performance", "\n", "", "eval_performace", "=", "{", "\n", "name", ":", "defaultdict", "(", "float", ")", "for", "name", ",", "_", "in", "self", ".", "eval_fns", ".", "items", "(", ")", "\n", "}", "\n", "for", "l", ",", "label_name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "            ", "for", "eval_name", ",", "eval_fn", "in", "self", ".", "eval_fns", ".", "items", "(", ")", ":", "\n", "                ", "score_dim", "=", "eval_fn", "(", "predictions", "[", "label_name", "]", ",", "ground_truth", "[", "label_name", "]", ")", "\n", "eval_performace", "[", "eval_name", "]", "[", "label_name", "]", "=", "score_dim", "\n", "\n", "# Compute mean scores", "\n", "", "", "mean_scores", "=", "{", "\n", "eval_name", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "tensor", "(", "[", "label_score", "for", "label_score", "in", "label_name", ".", "values", "(", ")", "]", ")", "\n", ")", "\n", "for", "eval_name", ",", "label_name", "in", "eval_performace", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# Print mean scores", "\n", "eval_scores_print", "=", "\"Eval Performance: \"", "\n", "for", "eval_name", ",", "mean_score", "in", "mean_scores", ".", "items", "(", ")", ":", "\n", "            ", "eval_scores_print", "+=", "f\"{eval_name}: {mean_score}  \"", "\n", "\n", "", "loss_print", "=", "f\"Loss ({self.train_params.loss_name}): {total_loss_score}\"", "\n", "logging", ".", "info", "(", "f\"Training Results: {loss_print} - {eval_scores_print}\"", ")", "\n", "\n", "print", "(", "f\"Training Results: {loss_print} - {eval_scores_print}\"", ")", "\n", "score_to_return", "=", "mean_scores", "[", "self", ".", "metric2track", "]", "\n", "\n", "return", "np", ".", "array", "(", "score_to_return", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.train.Train.perform_eval_epoch": [[281, 351], ["train.Train.model.eval", "collections.defaultdict", "collections.defaultdict", "enumerate", "enumerate", "enumerate", "mean_scores.items", "print", "logging.info", "numpy.array", "str", "print", "train.Train.model", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "collections.defaultdict", "train.Train.eval_fns.items", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "batch_data.cuda.cuda.cuda", "batch_gt.cuda.cuda.cuda", "enumerate", "train.Train.eval_fns.items", "eval_fn", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "eval_performace.items", "predictions[].append", "ground_truth[].append", "len", "range", "batch_preds[].reshape", "batch_gt[].reshape", "label_scores.values"], "methods", ["None"], ["", "def", "perform_eval_epoch", "(", "self", ",", "dataset", ":", "DataLoader", ",", "task", ":", "str", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "label_names", "=", "self", ".", "train_dataset", ".", "dataset", ".", "label_names", "\n", "eval_scores", "=", "{", "str", "(", "x", ")", ":", "[", "]", "for", "x", "in", "label_names", "}", "\n", "take_last_frame", "=", "self", ".", "train_params", ".", "take_last_frame", "\n", "\n", "total_iter", "=", "0", "\n", "\n", "predictions", "=", "defaultdict", "(", "list", ")", "\n", "ground_truth", "=", "defaultdict", "(", "list", ")", "\n", "for", "n_iter", ",", "(", "batch_data", ",", "batch_gt", ",", "mask", ",", "_", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "print", "(", "f\"Iter:{n_iter+1}/{len(dataset)}\"", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "use_gpu", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "batch_gt", "=", "batch_gt", ".", "cuda", "(", ")", "\n", "\n", "", "batch_preds", "=", "self", ".", "model", "(", "batch_data", ")", "\n", "\n", "for", "l", ",", "name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "                ", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ")", ":", "\n", "                    ", "mframe", "=", "m", "-", "1", "if", "take_last_frame", "else", "range", "(", "m", ")", "\n", "predictions", "[", "name", "]", ".", "append", "(", "\n", "batch_preds", "[", "i", ",", "mframe", ",", "l", "]", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "ground_truth", "[", "name", "]", ".", "append", "(", "\n", "batch_gt", "[", "i", ",", "mframe", ",", "l", "]", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "total_iter", "+=", "1", "\n", "\n", "# Concat predictions/gt", "\n", "", "for", "l", ",", "name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "            ", "predictions", "[", "name", "]", "=", "torch", ".", "cat", "(", "predictions", "[", "name", "]", ")", "\n", "ground_truth", "[", "name", "]", "=", "torch", ".", "cat", "(", "ground_truth", "[", "name", "]", ")", "\n", "\n", "# Compute evaluation performance per metric", "\n", "", "eval_performace", "=", "{", "\n", "name", ":", "defaultdict", "(", "float", ")", "for", "name", ",", "_", "in", "self", ".", "eval_fns", ".", "items", "(", ")", "\n", "}", "\n", "for", "l", ",", "label_name", "in", "enumerate", "(", "label_names", ")", ":", "\n", "            ", "for", "eval_name", ",", "eval_fn", "in", "self", ".", "eval_fns", ".", "items", "(", ")", ":", "\n", "                ", "score_dim", "=", "eval_fn", "(", "predictions", "[", "label_name", "]", ",", "ground_truth", "[", "label_name", "]", ")", "\n", "eval_performace", "[", "eval_name", "]", "[", "label_name", "]", "=", "score_dim", "\n", "\n", "# Compute mean scores", "\n", "", "", "mean_scores", "=", "{", "\n", "eval_name", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "tensor", "(", "[", "label_score", "for", "label_score", "in", "label_scores", ".", "values", "(", ")", "]", ")", "\n", ")", "\n", "for", "eval_name", ",", "label_scores", "in", "eval_performace", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# Print mean scores", "\n", "eval_scores_print", "=", "\"Eval Performance: \"", "\n", "for", "eval_name", ",", "mean_score", "in", "mean_scores", ".", "items", "(", ")", ":", "\n", "            ", "eval_scores_print", "+=", "f\"{eval_name}: {mean_score}  \"", "\n", "\n", "", "print", "(", "f\"Validation Results: {eval_scores_print}\"", ")", "\n", "logging", ".", "info", "(", "f\"{task} Results: {eval_scores_print}\"", ")", "\n", "\n", "score_to_return", "=", "mean_scores", "[", "self", ".", "metric2track", "]", "\n", "\n", "return", "np", ".", "array", "(", "score_to_return", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.model.Model.__init__": [[13, 39], ["torch.Module.__init__", "model.Model.cnn_block", "torch.MaxPool1d", "torch.MaxPool1d", "model.Model.cnn_block", "torch.MaxPool1d", "torch.MaxPool1d", "model.Model.cnn_block", "torch.MaxPool1d", "torch.MaxPool1d", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "model.Model.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.cnn_block", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.cnn_block", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.cnn_block", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", "=", "256", ",", "num_layers", "=", "2", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn_block1", "=", "self", ".", "cnn_block", "(", "\n", "in_channels", "=", "1", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "3", "\n", ")", "\n", "self", ".", "mp1", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "10", ",", "stride", "=", "10", ")", "\n", "\n", "self", ".", "cnn_block2", "=", "self", ".", "cnn_block", "(", "\n", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "6", ",", "stride", "=", "1", ",", "padding", "=", "2", "\n", ")", "\n", "self", ".", "mp2", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", "\n", "\n", "self", ".", "cnn_block3", "=", "self", ".", "cnn_block", "(", "\n", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "6", ",", "stride", "=", "1", ",", "padding", "=", "2", "\n", ")", "\n", "self", ".", "mp3", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "512", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "10", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.model.Model.reset_parameters": [[40, 44], ["list", "model.Model.modules", "model.Model._init_weights"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN._init_weights"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize parameters of the model.\"\"\"", "\n", "for", "m", "in", "list", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "self", ".", "_init_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.model.Model._init_weights": [[45, 59], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.zeros_", "torch.init.zeros_", "type", "m.named_parameters", "type", "type", "torch.init.zeros_", "torch.init.zeros_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_"], "methods", ["None"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\"Helper method to initialize the parameters of the model\n        with Kaiming uniform initialization.\n        \"\"\"", "\n", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv1d", "or", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "if", "type", "(", "m", ")", "==", "nn", ".", "LSTM", ":", "\n", "            ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"bias\"", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.model.Model.cnn_block": [[60, 65], ["torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "", "", "def", "cnn_block", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.model.Model.forward": [[67, 87], ["x.view.view.view", "model.Model.cnn_block1", "model.Model.mp1", "model.Model.cnn_block2", "model.Model.mp2", "model.Model.cnn_block3", "model.Model.mp3", "model.Model.view", "model.Model.rnn.flatten_parameters", "model.Model.rnn", "model.Model.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "seq_length", ",", "t", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "batch_size", "*", "seq_length", ",", "1", ",", "t", ")", "\n", "\n", "cnn_out1", "=", "self", ".", "cnn_block1", "(", "x", ")", "\n", "mp_out1", "=", "self", ".", "mp1", "(", "cnn_out1", ")", "\n", "\n", "cnn_out2", "=", "self", ".", "cnn_block2", "(", "mp_out1", ")", "\n", "mp_out2", "=", "self", ".", "mp2", "(", "cnn_out2", ")", "\n", "\n", "cnn_out3", "=", "self", ".", "cnn_block3", "(", "mp_out2", ")", "\n", "mp_out3", "=", "self", ".", "mp3", "(", "cnn_out3", ")", "\n", "audio_out", "=", "mp_out3", ".", "view", "(", "batch_size", ",", "seq_length", ",", "-", "1", ")", "\n", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "rnn_out", ",", "_", "=", "self", ".", "rnn", "(", "audio_out", ")", "\n", "\n", "predictions", "=", "self", ".", "linear", "(", "rnn_out", ")", "\n", "\n", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.perform_training.main": [[74, 77], ["train.Train", "train.Train.start"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.start"], ["def", "main", "(", "dataset_params", ",", "network_params", ",", "train_params", ")", ":", "\n", "    ", "trainer", "=", "Train", "(", "dataset_params", ",", "network_params", ",", "train_params", ")", "\n", "trainer", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.perform_training.save_arguments": [[79, 85], ["open", "json.dump", "pathlib.Path", "str", "pathlib.Path"], "function", ["None"], ["", "def", "save_arguments", "(", "args", ")", ":", "\n", "    ", "(", "Path", "(", "args", ".", "base_dir", ")", "/", "\"train\"", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "cmd_args_path", "=", "Path", "(", "args", ".", "base_dir", ")", "/", "\"train\"", "/", "\"cmd_args.txt\"", "\n", "with", "open", "(", "str", "(", "cmd_args_path", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.__init__": [[25, 73], ["data_provider.get_dataloader", "model.Model", "argparse.Namespace", "torch.AdamW", "torch.AdamW", "torch.AdamW", "evaluation.Evaluation.get_logger", "logging.info", "evaluation.Evaluation.load_model", "evaluation.Evaluation._params_to_train", "losses.Losses", "evaluation.Evaluation.model.parameters", "evaluation.Evaluation.model.cuda", "metric_provider.MetricProvider"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.get_logger", "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.load_model", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation._params_to_train"], ["    ", "def", "__init__", "(", "self", ",", "dataset_params", ",", "network_params", ",", "params", ")", ":", "\n", "        ", "\"\"\"Performs the evaluation of the model.\n\n        Args:\n          dataset_params (dict): the parameters to load the daset.\n              'class'      (str): The dataset class to provide.\n              'test'       (str): The path to the test csv file.\n              'batch_size' (int): Batch size to use during training.\n\n          network_params (dict): the parameters to load the network. Depend on the network used.\n\n          params (dict): Training parameters.\n                'model_path'       (str)  : The directory to save best model/logs.\n                'eval_name'        (str)  : The evaluation metric to use. Only one value:'accuracy',\n                'use_gpu'          (bool) : Whether to use GPU.\n                'log_path'         (str)  : Path to save log file.\n        \"\"\"", "\n", "\n", "self", ".", "dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "\n", "dataset_params", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "**", "dataset_params", "[", "\"test\"", "]", ",", "\n", ")", "\n", "\n", "model_input_size", "=", "self", ".", "dataset", ".", "dataset", ".", "num_input_features", "\n", "self", ".", "model", "=", "Model", "(", "model_input_size", ",", "**", "network_params", ")", "\n", "\n", "self", ".", "params", "=", "Namespace", "(", "**", "params", ")", "\n", "self", ".", "eval_fns", "=", "{", "\n", "eval_name", ":", "MetricProvider", "(", "eval_name", ")", ".", "_metric", "\n", "for", "eval_name", "in", "self", ".", "params", ".", "eval_names", "\n", "}", "\n", "self", ".", "loss_fn", "=", "Losses", "(", "self", ".", "params", ".", "loss_name", ")", ".", "loss_fn", "\n", "self", ".", "optimizer", "=", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "params", ".", "lr", ")", "\n", "self", ".", "label_names", "=", "self", ".", "dataset", ".", "dataset", ".", "label_names", "\n", "\n", "self", ".", "n_support", "=", "self", ".", "dataset", ".", "dataset", ".", "n_support", "\n", "self", ".", "n_query", "=", "self", ".", "dataset", ".", "dataset", ".", "n_query", "\n", "\n", "if", "self", ".", "params", ".", "use_gpu", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "self", ".", "params", ".", "log_path", ")", "\n", "logging", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "self", ".", "load_model", "(", "self", ".", "params", ".", "use_gpu", ")", "\n", "self", ".", "_params_to_train", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation._params_to_train": [[74, 84], ["enumerate", "model.rnn.parameters", "model.linear.parameters", "model.children", "layer.parameters"], "methods", ["None"], ["", "def", "_params_to_train", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "model", ".", "children", "(", ")", ")", ":", "\n", "            ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "param", "in", "model", ".", "rnn", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "param", "in", "model", ".", "linear", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.load_model": [[85, 97], ["logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "evaluation.Evaluation.model.load_state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "pathlib.Path().exists", "Exception", "str", "str", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "", "def", "load_model", "(", "self", ",", "use_gpu", ")", ":", "\n", "        ", "\"\"\"Loads model parameters (state_dict) from file_path.\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "not", "use_gpu", "else", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "logging", ".", "info", "(", "f\"Loading model parameter from {str(self.params.model_path)}\"", ")", "\n", "\n", "if", "not", "Path", "(", "self", ".", "params", ".", "model_path", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "f\"No model exists in path : {str(self.params.model_path)}\"", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "str", "(", "self", ".", "params", ".", "model_path", ")", ",", "map_location", "=", "device", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.get_logger": [[98, 119], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger().addHandler", "logging.getLogger"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "log_path", ")", ":", "\n", "        ", "\"\"\"Creates the logger to log output.\n\n        Args:\n          log_path (str): Path to save log file.\n        \"\"\"", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "\"%(asctime)s %(name)-4s %(levelname)-4s: %(message)s\"", ",", "\n", "datefmt", "=", "\"%d-%m-%y %H:%M\"", ",", "\n", "filename", "=", "log_path", ",", "\n", "filemode", "=", "\"w\"", ",", "\n", ")", "\n", "\n", "# define a Handler which writes INFO messages or higher to the sys.stderr", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# add the handler to the root logger", "\n", "logging", ".", "getLogger", "(", "\"\"", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.start": [[120, 128], ["logging.info", "evaluation.Evaluation.perform_few_shot", "logging.root.removeHandler"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.perform_few_shot"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Starting Evaluation\"", ")", "\n", "\n", "self", ".", "perform_few_shot", "(", "self", ".", "dataset", ")", "\n", "\n", "# Remove all handlers associated with the root logger object.", "\n", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "            ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.save_predictions": [[129, 135], ["pathlib.Path", "open", "json.dump", "str"], "methods", ["None"], ["", "", "def", "save_predictions", "(", "self", ",", "predictions", ")", ":", "\n", "\n", "        ", "save_preds_path", "=", "Path", "(", "self", ".", "params", ".", "base_dir", ")", "/", "\"predictions.json\"", "\n", "\n", "with", "open", "(", "str", "(", "save_preds_path", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.perform_few_shot": [[136, 176], ["evaluation.Evaluation.model.train", "collections.defaultdict", "enumerate", "evaluation.Evaluation.save_predictions", "str", "print", "evaluation.Evaluation.optimizer.zero_grad", "evaluation.Evaluation.model", "evaluation.Evaluation._get_support_query", "evaluation.Evaluation.train_model", "evaluation.Evaluation.model", "enumerate", "batch_data.cuda.cuda.cuda", "batch_gt.cuda.cuda.cuda", "enumerate", "predictions[].append", "len", "range", "batch_preds[].reshape().data.cpu().numpy().astype().tolist", "batch_preds[].reshape().data.cpu().numpy().astype", "pathlib.Path", "batch_preds[].reshape().data.cpu().numpy", "batch_preds[].reshape().data.cpu", "batch_preds[].reshape"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.train", "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.save_predictions", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation._get_support_query", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.train_model"], ["", "", "def", "perform_few_shot", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "loss_name", "=", "self", ".", "params", ".", "loss_name", "\n", "take_last_frame", "=", "self", ".", "params", ".", "take_last_frame", "\n", "\n", "eval_scores", "=", "{", "str", "(", "x", ")", ":", "[", "]", "for", "x", "in", "self", ".", "label_names", "}", "\n", "predictions", "=", "defaultdict", "(", "list", ")", "\n", "for", "n_iter", ",", "(", "batch_data", ",", "batch_gt", ",", "mask", ",", "filenames", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "print", "(", "f\"Iter:{n_iter+1}/{len(dataset)}\"", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "params", ".", "use_gpu", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "batch_gt", "=", "batch_gt", ".", "cuda", "(", ")", "\n", "\n", "", "batch_preds", "=", "self", ".", "model", "(", "batch_data", ")", "\n", "batch_support", "=", "self", ".", "_get_support_query", "(", "batch_preds", ",", "mask", ",", "batch_gt", ")", "\n", "\n", "self", ".", "train_model", "(", "batch_support", ")", "\n", "batch_preds_query", "=", "self", ".", "model", "(", "batch_data", "[", "-", "self", ".", "n_query", ":", ",", "...", "]", ")", "\n", "\n", "query_filenames", "=", "filenames", "[", "-", "self", ".", "n_query", ":", "]", "\n", "query_mask", "=", "mask", "[", "-", "self", ".", "n_query", ":", "]", "\n", "for", "l", ",", "name", "in", "enumerate", "(", "query_filenames", ")", ":", "\n", "                ", "for", "i", ",", "m", "in", "enumerate", "(", "query_mask", ")", ":", "\n", "                    ", "mframe", "=", "m", "-", "1", "if", "take_last_frame", "else", "range", "(", "m", ")", "\n", "predictions", "[", "Path", "(", "name", ")", ".", "name", "]", ".", "append", "(", "\n", "batch_preds", "[", "i", ",", "mframe", ",", ":", "]", "\n", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", ".", "data", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "", "", "self", ".", "save_predictions", "(", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation.train_model": [[177, 191], ["enumerate", "len", "batch_loss.backward", "evaluation.Evaluation.optimizer.step", "batch_loss.item", "evaluation.Evaluation.loss_fn"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "batch_support", ")", ":", "\n", "        ", "batch_preds", ",", "batch_gt", "=", "batch_support", "[", "0", "]", ",", "batch_support", "[", "1", "]", "\n", "\n", "batch_loss", "=", "0", "\n", "for", "l", ",", "label_name", "in", "enumerate", "(", "self", ".", "label_names", ")", ":", "\n", "            ", "pred_loss", "=", "self", ".", "loss_fn", "(", "batch_preds", "[", "...", ",", "l", "]", ",", "batch_gt", "[", "...", ",", "l", "]", ")", "\n", "batch_loss", "+=", "pred_loss", "\n", "\n", "", "batch_loss", "/=", "len", "(", "self", ".", "label_names", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "batch_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.evaluation.Evaluation._get_support_query": [[192, 212], ["len", "range", "list", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "support_preds.append", "support_gt.append"], "methods", ["None"], ["", "def", "_get_support_query", "(", "self", ",", "batch_preds", ",", "masks", ",", "batch_gt", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_preds", ")", "\n", "\n", "n_support", "=", "self", ".", "n_support", "\n", "n_query", "=", "self", ".", "n_query", "\n", "num_subjects", "=", "batch_size", "//", "(", "n_support", "+", "n_query", ")", "\n", "\n", "total_samples_subject", "=", "n_support", "+", "n_query", "\n", "support_preds", ",", "support_gt", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_subjects", ")", ":", "\n", "            ", "ss", "=", "i", "*", "total_samples_subject", "\n", "\n", "sup_inds", "=", "list", "(", "range", "(", "ss", ",", "ss", "+", "n_support", ")", ")", "\n", "for", "s", "in", "sup_inds", ":", "\n", "                ", "m", "=", "masks", "[", "s", "]", "\n", "support_preds", ".", "append", "(", "batch_preds", "[", "s", ",", "m", "-", "1", ",", ":", "]", ")", "\n", "support_gt", ".", "append", "(", "batch_gt", "[", "s", ",", "m", "-", "1", ",", ":", "]", ")", "\n", "\n", "", "", "return", "[", "torch", ".", "stack", "(", "support_preds", ")", ",", "torch", ".", "stack", "(", "support_gt", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.__init__": [[14, 25], ["torch.Module.__init__", "losses.Losses._get_loss"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses._get_loss"], ["    ", "def", "__init__", "(", "self", ",", "loss", ":", "str", "=", "\"mse\"", ")", ":", "\n", "        ", "\"\"\"Initialize loss object class.\n\n        Args:\n          loss (str): Loss function to use\n        \"\"\"", "\n", "super", "(", "Losses", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_loss", "=", "self", ".", "_get_loss", "(", "loss", ")", "if", "loss", "else", "None", "\n", "self", ".", "loss_fn", "=", "self", ".", "_loss", "\n", "self", ".", "loss_name", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses._get_loss": [[26, 34], ["loss.lower"], "methods", ["None"], ["", "def", "_get_loss", "(", "self", ",", "loss", ":", "str", ")", ":", "\n", "        ", "\"\"\"Factory method to provide the loss function.\n\n        Args:\n          loss (str): Name of loss function to use.\n        \"\"\"", "\n", "\n", "return", "{", "\"mae\"", ":", "self", ".", "mae", ",", "\"mse\"", ":", "self", ".", "mse", "}", "[", "loss", ".", "lower", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.create_mask": [[35, 46], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "tensor_like", ",", "take_last_frame", ",", "seq_lens", "=", "None", ")", ":", "\n", "        ", "if", "seq_lens", "is", "not", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "tensor_like", ",", "device", "=", "tensor_like", ".", "device", ")", "\n", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "seq_lens", ")", ":", "\n", "                ", "mframe", "=", "m", "-", "1", "if", "take_last_frame", "else", "range", "(", "m", ")", "\n", "mask", "[", "i", ",", "mframe", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "ones_like", "(", "tensor_like", ",", "device", "=", "tensor_like", ".", "device", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.mae": [[47, 59], ["losses.Losses.create_mask", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.create_mask"], ["", "def", "mae", "(", "\n", "self", ",", "\n", "y_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "seq_lens", "=", "None", ",", "\n", "take_last_frame", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "mask", "=", "self", ".", "create_mask", "(", "y_true", ",", "take_last_frame", ",", "seq_lens", ")", "\n", "mae", "=", "torch", ".", "sum", "(", "mask", "*", "torch", ".", "abs", "(", "y_pred", "-", "y_true", ")", ")", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.mse": [[60, 72], ["losses.Losses.create_mask", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.losses.Losses.create_mask"], ["", "def", "mse", "(", "\n", "self", ",", "\n", "y_pred", ":", "torch", ".", "Tensor", ",", "\n", "y_true", ":", "torch", ".", "Tensor", ",", "\n", "seq_lens", "=", "None", ",", "\n", "take_last_frame", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "mask", "=", "self", ".", "create_mask", "(", "y_true", ",", "take_last_frame", ",", "seq_lens", ")", "\n", "mse", "=", "torch", ".", "sum", "(", "mask", "*", "(", "y_pred", "-", "y_true", ")", "**", "2", ")", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "\n", "return", "mse", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.perform_evaluation.main": [[55, 58], ["evaluation.Evaluation", "evaluation.Evaluation.start"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.start"], ["def", "main", "(", "dataset_params", ",", "network_params", ",", "eval_params", ")", ":", "\n", "    ", "evaluation", "=", "Evaluation", "(", "dataset_params", ",", "network_params", ",", "eval_params", ")", "\n", "evaluation", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.perform_evaluation.save_arguments": [[60, 67], ["open", "json.dump", "pathlib.Path", "str", "pathlib.Path"], "function", ["None"], ["", "def", "save_arguments", "(", "args", ")", ":", "\n", "    ", "(", "Path", "(", "args", ".", "base_dir", ")", "/", "\"eval\"", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "cmd_args_path", "=", "Path", "(", "args", ".", "base_dir", ")", "/", "\"eval\"", "/", "\"cmd_args.txt\"", "\n", "\n", "with", "open", "(", "str", "(", "cmd_args_path", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-FewShot.create_splits.create_splits": [[31, 51], ["numpy.loadtxt", "collections.defaultdict", "enumerate", "collections.defaultdict.items", "str", "split2files[].append", "numpy.savetxt", "numpy.hstack", "numpy.array", "split.lower"], "function", ["None"], ["def", "create_splits", "(", "data_path", ",", "save_path", ")", ":", "\n", "\n", "    ", "data_info", "=", "np", ".", "loadtxt", "(", "str", "(", "data_path", ")", ",", "dtype", "=", "str", ",", "delimiter", "=", "\",\"", ")", "\n", "\n", "split2files", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "data_info", "[", "1", ":", "]", ")", ":", "\n", "        ", "filename", "=", "x", "[", "0", "]", "[", "1", ":", "-", "1", "]", "+", "\".wav\"", "\n", "split", "=", "x", "[", "1", "]", "\n", "gt", "=", "x", "[", "5", ":", "]", "\n", "if", "\"Test\"", "in", "x", "[", "1", "]", ":", "\n", "            ", "continue", "\n", "", "split2files", "[", "split", "]", ".", "append", "(", "np", ".", "hstack", "(", "[", "filename", ",", "gt", "]", ")", ")", "\n", "\n", "# Writing csv files", "\n", "", "for", "split", ",", "data", "in", "split2files", ".", "items", "(", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "\n", "save_path", "/", "f\"exvo_{split.lower()}.csv\"", ",", "\n", "np", ".", "array", "(", "data", ")", ",", "\n", "delimiter", "=", "\",\"", ",", "\n", "fmt", "=", "\"%s\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset.__init__": [[21, 47], ["pathlib.Path", "int", "train_dataset.TrainDataset._get_num_files"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset._get_num_files"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "csv_path", ":", "Path", ",", "\n", "data_path", ":", "Path", ",", "\n", "label_names", ":", "np", ".", "array", "=", "None", ",", "\n", "sr", ":", "int", "=", "16000", ",", "\n", "take_last_frame", ":", "bool", "=", "False", ",", "\n", "is_training", ":", "bool", "=", "True", ",", "\n", "window_size", ":", "float", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Creates an instance of the data to use\n\n        Args:\n          csv_path (Path)   : Path to csv file.\n          sr (int): Sampling rate of the signal.\n        \"\"\"", "\n", "\n", "self", ".", "label_names", "=", "label_names", "\n", "self", ".", "csv_path", "=", "csv_path", "\n", "\n", "self", ".", "wav_folder", "=", "Path", "(", "data_path", ")", "\n", "\n", "self", ".", "num_input_features", "=", "int", "(", "window_size", "*", "sr", ")", "\n", "self", ".", "num_files", "=", "self", ".", "_get_num_files", "(", ")", "\n", "\n", "self", ".", "sr", "=", "sr", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset._get_num_files": [[48, 54], ["open", "str"], "methods", ["None"], ["", "def", "_get_num_files", "(", "self", ")", ":", "\n", "        ", "num_rows", "=", "0", "\n", "for", "row", "in", "open", "(", "str", "(", "self", ".", "csv_path", ")", ")", ":", "\n", "            ", "num_rows", "+=", "1", "\n", "\n", "", "return", "num_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset.frame": [[55, 76], ["F.pad.unfold", "int", "numpy.abs", "numpy.abs", "F.pad"], "methods", ["None"], ["", "def", "frame", "(", "\n", "self", ",", "signal", ",", "frame_length", ",", "frame_step", ",", "pad_end", "=", "False", ",", "pad_value", "=", "0", ",", "axis", "=", "-", "1", "\n", ")", ":", "\n", "        ", "\"\"\"Equivalent of tf.signal.frame\n        code from: https://discuss.pytorch.org/t/pytorch-equivalent-to-tf-signal-frame/123239/2\n        \"\"\"", "\n", "signal_length", "=", "signal", ".", "shape", "[", "axis", "]", "\n", "\n", "if", "pad_end", ":", "\n", "            ", "frames_overlap", "=", "frame_length", "-", "frame_step", "\n", "rest_samples", "=", "np", ".", "abs", "(", "signal_length", "-", "frames_overlap", ")", "%", "np", ".", "abs", "(", "\n", "frame_length", "-", "frames_overlap", "\n", ")", "\n", "pad_size", "=", "int", "(", "frame_length", "-", "rest_samples", ")", "\n", "if", "pad_size", "!=", "0", ":", "\n", "                ", "pad_axis", "=", "[", "0", "]", "*", "signal", ".", "ndim", "\n", "pad_axis", "[", "axis", "]", "=", "pad_size", "\n", "signal", "=", "F", ".", "pad", "(", "signal", ",", "pad_axis", ",", "\"constant\"", ",", "pad_value", ")", "\n", "", "", "frames", "=", "signal", ".", "unfold", "(", "axis", ",", "frame_length", ",", "frame_step", ")", "\n", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset.__len__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_files", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset._get_signal": [[80, 112], ["pandas.read_csv", "numpy.array().reshape", "pd_array[].astype", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "torchaudio.load", "torchaudio.transforms.Resample", "torchaudio.transforms.Resample.reshape", "str", "torch.abs().max", "torch.abs().max", "torch.abs().max", "torch.abs().max", "torchaudio.transforms.Resample.reshape.view", "int", "numpy.array", "torchaudio.transforms.Resample.", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "def", "_get_signal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pd_array", "=", "pd", ".", "read_csv", "(", "\n", "str", "(", "self", ".", "csv_path", ")", ",", "header", "=", "None", ",", "skiprows", "=", "int", "(", "idx", ")", ",", "nrows", "=", "1", "\n", ")", "\n", "pd_array", "=", "np", ".", "array", "(", "pd_array", ")", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", "data_file", "=", "pd_array", "[", "0", "]", "\n", "gt", "=", "pd_array", "[", "1", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt", "=", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n", "audio_file_path", "=", "str", "(", "self", ".", "wav_folder", "/", "data_file", ")", "\n", "\n", "# audio: (num_channels x time)", "\n", "audio", ",", "sr", "=", "torchaudio", ".", "load", "(", "audio_file_path", ")", "\n", "\n", "# audio: (time) - assume mono", "\n", "audio", "=", "audio", "[", "0", "]", "\n", "\n", "resampler", "=", "torchaudio", ".", "transforms", ".", "Resample", "(", "sr", ",", "self", ".", "sr", ")", "\n", "raw_wav", "=", "resampler", "(", "audio", ")", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", "\n", "raw_wav", "/=", "torch", ".", "abs", "(", "raw_wav", ")", ".", "max", "(", ")", "+", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "return", "(", "\n", "raw_wav", ".", "view", "(", "\n", "-", "1", ",", "\n", ")", ",", "\n", "data_file", ",", "\n", "gt", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset.process_audio": [[114, 133], ["train_dataset.TrainDataset.frame", "len", "F.pad"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.frame"], ["", "def", "process_audio", "(", "self", ",", "raw_wav", ":", "np", ".", "array", ")", ":", "\n", "        ", "\"\"\"Split waveform to frames.\n\n        Args:\n          raw_wav : The raw waveform.\n\n        Returns:\n          The framed waveform of dims [seq_len, self.num_input_features]\n        \"\"\"", "\n", "\n", "if", "len", "(", "raw_wav", ")", "<", "1600", ":", "\n", "# Pad wav to have equal size frames", "\n", "            ", "pad_size", "=", "(", "\n", "self", ".", "num_input_features", "-", "raw_wav", ".", "shape", "[", "0", "]", "%", "self", ".", "num_input_features", "\n", ")", "\n", "# Dims: [signal_length]", "\n", "raw_wav", "=", "F", ".", "pad", "(", "raw_wav", ",", "(", "0", ",", "pad_size", ")", ")", "\n", "\n", "", "return", "self", ".", "frame", "(", "raw_wav", ",", "frame_length", "=", "1600", ",", "frame_step", "=", "1600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.train_dataset.TrainDataset.__getitem__": [[134, 153], ["train_dataset.TrainDataset._get_signal", "train_dataset.TrainDataset.process_audio", "torch.repeat_interleave.unsqueeze", "torch.repeat_interleave.unsqueeze", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave.type", "torch.repeat_interleave.type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset._get_signal", "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.process_audio"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "torch", ".", "tensor", ")", ":", "\n", "\n", "        ", "raw_wav", ",", "data_file", ",", "gt", "=", "self", ".", "_get_signal", "(", "idx", ")", "\n", "\n", "# Dim: torch.Size([num_wav_samples]) -> torch.Size([seq_len, self.num_input_features])", "\n", "prosessed_audio", "=", "self", ".", "process_audio", "(", "raw_wav", ")", "\n", "\n", "gt", "=", "gt", ".", "unsqueeze", "(", "0", ")", "\n", "# Dim: torch.Size([1, 10]) -> torch.Size([seq_len, 10])", "\n", "gt", "=", "torch", ".", "repeat_interleave", "(", "\n", "gt", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "torch", ".", "tensor", "(", "[", "prosessed_audio", ".", "shape", "[", "0", "]", "]", ")", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "seq_len", "=", "200", "\n", "if", "prosessed_audio", ".", "shape", "[", "0", "]", ">", "seq_len", ":", "\n", "            ", "prosessed_audio", "=", "prosessed_audio", "[", ":", "seq_len", "]", "\n", "gt", "=", "gt", "[", ":", "seq_len", "]", "\n", "\n", "", "return", "[", "prosessed_audio", "]", ",", "[", "gt", "]", ",", "data_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.__init__": [[22, 47], ["json.load", "pathlib.Path", "int", "len", "open", "str"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "json_path", ":", "Path", ",", "\n", "data_path", ":", "Path", ",", "\n", "n_support", ":", "int", "=", "2", ",", "\n", "n_query", ":", "int", "=", "1", ",", "\n", "label_names", ":", "np", ".", "array", "=", "None", ",", "\n", "sr", ":", "int", "=", "16000", ",", "\n", "window_size", ":", "float", "=", "0.1", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "n_query", "=", "n_query", "\n", "self", ".", "n_support", "=", "n_support", "\n", "\n", "self", ".", "label_names", "=", "label_names", "\n", "self", ".", "files_path", "=", "json", ".", "load", "(", "open", "(", "str", "(", "json_path", ")", ",", "\"r\"", ")", ")", "\n", "\n", "self", ".", "wav_folder", "=", "Path", "(", "data_path", ")", "\n", "\n", "self", ".", "num_input_features", "=", "int", "(", "window_size", "*", "sr", ")", "\n", "num_files", "=", "len", "(", "self", ".", "files_path", ")", "\n", "\n", "self", ".", "len_wav_files", "=", "num_files", "\n", "self", ".", "sr", "=", "sr", "\n", "self", ".", "nfiles", "=", "num_files", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.frame": [[48, 70], ["torch.pad.unfold", "int", "numpy.abs", "numpy.abs", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "frame", "(", "\n", "self", ",", "signal", ",", "frame_length", ",", "frame_step", ",", "pad_end", "=", "False", ",", "pad_value", "=", "0", ",", "axis", "=", "-", "1", "\n", ")", ":", "\n", "        ", "\"\"\"Equivalent of tf.signal.frame\n        code from: https://discuss.pytorch.org/t/pytorch-equivalent-to-tf-signal-frame/123239/2\n        \"\"\"", "\n", "signal_length", "=", "signal", ".", "shape", "[", "axis", "]", "\n", "\n", "if", "pad_end", ":", "\n", "            ", "frames_overlap", "=", "frame_length", "-", "frame_step", "\n", "rest_samples", "=", "np", ".", "abs", "(", "signal_length", "-", "frames_overlap", ")", "%", "np", ".", "abs", "(", "\n", "frame_length", "-", "frames_overlap", "\n", ")", "\n", "pad_size", "=", "int", "(", "frame_length", "-", "rest_samples", ")", "\n", "if", "pad_size", "!=", "0", ":", "\n", "                ", "pad_axis", "=", "[", "0", "]", "*", "signal", ".", "ndim", "\n", "pad_axis", "[", "axis", "]", "=", "pad_size", "\n", "signal", "=", "F", ".", "pad", "(", "signal", ",", "pad_axis", ",", "\"constant\"", ",", "pad_value", ")", "\n", "\n", "", "", "frames", "=", "signal", ".", "unfold", "(", "axis", ",", "frame_length", ",", "frame_step", ")", "\n", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.__len__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset._get_subject_files": [[74, 93], ["numpy.array.extend", "numpy.array", "subject_files_selected[].astype", "sorted", "audio_file_paths.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "list", "range", "str", "test_dataset.TestDataset.files_path.keys"], "methods", ["None"], ["", "def", "_get_subject_files", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "subject_selected", "=", "sorted", "(", "list", "(", "self", ".", "files_path", ".", "keys", "(", ")", ")", ")", "[", "idx", "]", "\n", "subject_files", "=", "self", ".", "files_path", "[", "subject_selected", "]", "\n", "\n", "# Select support/query sets", "\n", "subject_files_selected", "=", "[", "subject_files", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "n_support", ")", "]", "\n", "subject_files_selected", ".", "extend", "(", "subject_files", "[", "-", "self", ".", "n_query", ":", "]", ")", "\n", "subject_files_selected", "=", "np", ".", "array", "(", "subject_files_selected", ")", "\n", "\n", "# Replace postfix of audio files to 'wav'", "\n", "audio_files", "=", "subject_files_selected", "[", ":", ",", "0", "]", "\n", "gts", "=", "subject_files_selected", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "audio_file_paths", "=", "[", "]", "\n", "for", "x", "in", "audio_files", ":", "\n", "            ", "audio_file_paths", ".", "append", "(", "str", "(", "self", ".", "wav_folder", "/", "x", ")", ")", "\n", "\n", "", "return", "audio_file_paths", ",", "torch", ".", "tensor", "(", "gts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset._get_signal": [[94, 108], ["test_dataset.TestDataset._get_subject_files", "torchaudio.load", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torchaudio.transforms.Resample", "torchaudio.transforms.Resample.reshape", "audio_signals.append", "torchaudio.transforms.Resample."], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset._get_subject_files", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "def", "_get_signal", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data_files", ",", "ground_truths", "=", "self", ".", "_get_subject_files", "(", "idx", ")", "\n", "\n", "audio_signals", "=", "[", "]", "\n", "for", "x", "in", "data_files", ":", "\n", "            ", "audio", ",", "sr", "=", "torchaudio", ".", "load", "(", "x", ")", "\n", "audio", "=", "torch", ".", "mean", "(", "audio", ",", "axis", "=", "0", ")", "\n", "resampler", "=", "torchaudio", ".", "transforms", ".", "Resample", "(", "sr", ",", "self", ".", "sr", ")", "\n", "raw_wav", "=", "resampler", "(", "audio", ")", ".", "reshape", "(", "\n", "-", "1", ",", "\n", ")", "\n", "audio_signals", ".", "append", "(", "raw_wav", ")", "\n", "\n", "", "return", "audio_signals", ",", "data_files", ",", "ground_truths", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.process_audio": [[109, 126], ["torch.pad", "torch.pad", "torch.pad", "test_dataset.TestDataset.frame"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.frame"], ["", "def", "process_audio", "(", "self", ",", "raw_wav", ":", "np", ".", "array", ")", ":", "\n", "        ", "\"\"\"Split waveform to frames.\n\n        Args:\n          raw_wav : The raw waveform.\n\n        Returns:\n          The framed waveform of dims [seq_len, self.num_input_features]\n        \"\"\"", "\n", "\n", "# Pad wav to have equal size frames", "\n", "pad_size", "=", "self", ".", "num_input_features", "-", "raw_wav", ".", "shape", "[", "0", "]", "%", "self", ".", "num_input_features", "\n", "\n", "# Dims: [signal_length]", "\n", "raw_wav", "=", "F", ".", "pad", "(", "raw_wav", ",", "(", "0", ",", "pad_size", ")", ")", "\n", "\n", "return", "self", ".", "frame", "(", "raw_wav", ",", "frame_length", "=", "1600", ",", "frame_step", "=", "1600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset.__getitem__": [[127, 148], ["test_dataset.TestDataset._get_signal", "zip", "test_dataset.TestDataset.process_audio", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "prosessed_audios.append", "rep_ground_truth.append", "torch.repeat_interleave.type().view", "torch.repeat_interleave.type().view", "torch.repeat_interleave.type().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.repeat_interleave.type", "torch.repeat_interleave.type", "torch.repeat_interleave.type"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.test_dataset.TestDataset._get_signal", "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.process_audio"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "torch", ".", "tensor", ")", ":", "\n", "\n", "        ", "audio_signals", ",", "data_file", ",", "gts", "=", "self", ".", "_get_signal", "(", "idx", ")", "\n", "\n", "# Dim: torch.Size([num_wav_samples]) -> torch.Size([seq_len, self.num_input_features])", "\n", "prosessed_audios", "=", "[", "]", "\n", "rep_ground_truth", "=", "[", "]", "\n", "for", "x", ",", "gt", "in", "zip", "(", "*", "[", "audio_signals", ",", "gts", "]", ")", ":", "\n", "            ", "prosessed_audio", "=", "self", ".", "process_audio", "(", "x", ")", "\n", "\n", "# Dim: torch.Size([1, 48]) -> torch.Size([seq_len, 48])", "\n", "gt", "=", "torch", ".", "repeat_interleave", "(", "\n", "gt", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "prosessed_audio", ".", "shape", "[", "0", "]", "]", ")", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "\n", "prosessed_audios", ".", "append", "(", "prosessed_audio", ")", "\n", "rep_ground_truth", ".", "append", "(", "gt", ")", "\n", "\n", "", "return", "prosessed_audios", ",", "rep_ground_truth", ",", "data_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.collate_fn": [[9, 29], ["zip", "torch.nn.utils.rnn.pad_sequence", "torch.Tensor", "len"], "function", ["None"], ["from", "pathlib", "import", "Path", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "torch", ".", "nn", ".", "utils", ".", "rnn", "import", "pad_sequence", "\n", "from", ".", "get_dataset", "import", "get_dataset", "\n", "from", "itertools", "import", "chain", "\n", "\n", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"\"\"Pad batch tensors to have equal length.\n\n    Args:\n      batch (list): Data to pad.\n\n    Returns:\n      padded_seq (torch.Tensor): Batched data tensors.\n      gt (torch.Tensor): Ground truth values.\n      num_seqs_per_sample (list): Number of sequences of each batch tensor.\n      data_file (str): File names.\n    \"\"\"", "\n", "\n", "data", ",", "ground_truth", ",", "filenames", "=", "zip", "(", "*", "batch", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader": [[31, 43], ["torch.utils.data.DataLoader", "datasets.LoadRawData"], "function", ["None"], ["seqs_to_pad", ",", "gt", "=", "[", "]", ",", "[", "]", "\n", "num_seqs_per_sample", "=", "[", "]", "\n", "for", "i", ",", "subject_wavs", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "for", "j", ",", "audio", "in", "enumerate", "(", "subject_wavs", ")", ":", "\n", "            ", "seqs_to_pad", ".", "append", "(", "audio", ")", "\n", "num_seqs_per_sample", ".", "append", "(", "len", "(", "audio", ")", ")", "\n", "gt", ".", "append", "(", "ground_truth", "[", "i", "]", "[", "j", "]", ")", "\n", "\n", "", "", "padded_seqs", "=", "pad_sequence", "(", "seqs_to_pad", ",", "batch_first", "=", "True", ")", "\n", "gt", "=", "pad_sequence", "(", "gt", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "padded_seqs", ",", "gt", ",", "num_seqs_per_sample", ",", "list", "(", "chain", ".", "from_iterable", "(", "filenames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.get_dataset.get_dataset": [[12, 14], ["None"], "function", ["None"], ["def", "get_dataset", "(", "class_name", ":", "str", ")", ":", "\n", "    ", "return", "{", "\"train_dataset\"", ":", "TrainDataset", ",", "\"test_dataset\"", ":", "TestDataset", "}", "[", "class_name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.__init__": [[16, 30], ["list", "pathlib.Path().glob", "str", "pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "files_path", ":", "str", ",", "\n", "ext", ":", "str", "=", "'wav'", ",", "\n", ")", ":", "\n", "        ", "\"\"\" Creates an instance of the data to use\n        \n        Args:\n          files_path : Path to test files.\n          sr         : Sampling rate of the signal.\n        \"\"\"", "\n", "self", ".", "base_path", "=", "files_path", "\n", "files_path", "=", "list", "(", "Path", "(", "files_path", ")", ".", "glob", "(", "f'*.{ext}'", ")", ")", "\n", "self", ".", "files_path", "=", "[", "str", "(", "x", ")", "for", "x", "in", "files_path", "]", "\n", "self", ".", "num_input_features", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.process_audio": [[34, 59], ["torch.pad", "torch.pad", "torch.pad", "int", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "wav_frames.append", "len"], "methods", ["None"], ["", "def", "process_audio", "(", "self", ",", "raw_wav", ":", "np", ".", "array", ")", ":", "\n", "        ", "\"\"\" Split waveform to frames.\n        \n        Args:\n          raw_wav : The raw waveform.\n        \n        Returns:\n          The framed waveform.\n        \"\"\"", "\n", "\n", "# Pad wav to have equal size frames", "\n", "pad_size", "=", "self", ".", "num_input_features", "-", "raw_wav", ".", "shape", "[", "0", "]", "%", "self", ".", "num_input_features", "\n", "raw_wav", "=", "F", ".", "pad", "(", "raw_wav", ",", "(", "0", ",", "pad_size", ")", ")", "\n", "\n", "# Count number of frames ", "\n", "self", ".", "num_frames", "=", "int", "(", "len", "(", "raw_wav", ")", "/", "self", ".", "num_input_features", ")", "\n", "\n", "wav_frames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_frames", "+", "1", ")", ":", "\n", "            ", "start_frame", "=", "(", "i", "-", "1", ")", "*", "self", ".", "num_input_features", "\n", "end_frame", "=", "i", "*", "self", ".", "num_input_features", "\n", "\n", "wav_frames", ".", "append", "(", "raw_wav", "[", "start_frame", ":", "end_frame", "]", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "wav_frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.__getitem__": [[60, 72], ["torchaudio.load", "torchaudio.transforms.Resample", "torchaudio.transforms.Resample.reshape", "datasets.LoadRawData.process_audio", "torchaudio.transforms.Resample.reshape.max", "torchaudio.transforms.Resample.", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.data_provider.datasets.LoadRawData.process_audio"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "torch", ".", "tensor", ")", ":", "\n", "\n", "        ", "data_file", "=", "self", ".", "files_path", "[", "idx", "]", "\n", "\n", "audio", ",", "sr", "=", "torchaudio", ".", "load", "(", "data_file", ")", "\n", "resampler", "=", "torchaudio", ".", "transforms", ".", "Resample", "(", "sr", ",", "16000", ")", "\n", "raw_wav", "=", "resampler", "(", "audio", ")", ".", "reshape", "(", "-", "1", ",", ")", "\n", "raw_wav", "/=", "(", "raw_wav", ".", "max", "(", ")", "+", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", ")", "\n", "\n", "prosessed_audio", "=", "self", ".", "process_audio", "(", "raw_wav", ")", "\n", "\n", "return", "prosessed_audio", ",", "data_file", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.frechet_distance.calculate_frechet_distance": [[24, 78], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\" From https://github.com/mseitzer/pytorch-fid/blob/master/src/pytorch_fid/fid_score.py \"\"\"", "\n", "\n", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "\n", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.load_model": [[14, 27], ["print", "classifier.models.AudioRNNModel", "torch.load", "classifier.models.AudioRNNModel.load_state_dict", "pathlib.Path().exists", "Exception", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["def", "load_model", "(", "device", ")", ":", "\n", "    ", "\"\"\"Loads model parameters (state_dict) from file_path.\"\"\"", "\n", "\n", "print", "(", "f'Loading model parameter from {MODEL_PATH}'", ")", "\n", "\n", "model", "=", "AudioRNNModel", "(", "1600", ",", "10", ")", "\n", "\n", "if", "not", "Path", "(", "MODEL_PATH", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'No model exists in path : {MODEL_PATH}'", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "MODEL_PATH", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.load_activation_statistics": [[28, 36], ["os.path.join", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "def", "load_activation_statistics", "(", "name", ")", ":", "\n", "    ", "base_path", "=", "\"./fid/\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "name", ")", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "mu", "=", "dict", "[", "\"mu\"", "]", "\n", "sigma", "=", "dict", "[", "\"sigma\"", "]", "\n", "", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.compute_activation_statistics": [[37, 41], ["numpy.mean", "numpy.cov"], "function", ["None"], ["", "def", "compute_activation_statistics", "(", "preds", ")", ":", "\n", "    ", "mu", "=", "np", ".", "mean", "(", "preds", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "preds", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.get_activation_statistics": [[42, 70], ["classifier.data_provider.get_dataloader", "len", "utils.load_model", "model.to.to", "model.to.eval", "numpy.zeros", "tqdm.tqdm", "utils.compute_activation_statistics", "torch.cuda.is_available", "torch.device", "torch.device", "enumerate", "batch_data.cuda.cuda", "model.to.", "range", "predictions[].detach().cpu().numpy", "predictions[].detach().cpu", "predictions[].detach"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader", "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.load_model", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.compute_activation_statistics"], ["", "def", "get_activation_statistics", "(", "path", ",", "batch_size", ")", ":", "\n", "    ", "dataset_params", "=", "{", "\n", "\"files_path\"", ":", "path", ",", "\n", "\"ext\"", ":", "\"wav\"", ",", "\n", "}", "\n", "\n", "dataset", "=", "get_dataloader", "(", "batch_size", ",", "shuffle", "=", "False", ",", "**", "dataset_params", ")", "\n", "num_samples", "=", "len", "(", "dataset", ".", "dataset", ".", "files_path", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "model", "=", "load_model", "(", "device", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "256", ")", ")", "\n", "\n", "for", "n_iter", ",", "(", "batch_data", ",", "mask", ",", "filenames", ")", "in", "tqdm", "(", "enumerate", "(", "dataset", ")", ")", ":", "\n", "        ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "predictions", "=", "model", "(", "batch_data", ")", "\n", "for", "sample", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "curr", "=", "n_iter", "*", "batch_size", "+", "sample", "\n", "if", "curr", ">=", "num_samples", ":", "\n", "                ", "break", "\n", "\n", "", "preds", "[", "curr", "]", "=", "predictions", "[", "sample", ",", "mask", "[", "sample", "]", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "mu", ",", "sigma", "=", "compute_activation_statistics", "(", "preds", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.get_fid": [[71, 76], ["utils.load_activation_statistics", "utils.load_activation_statistics", "frechet_distance.calculate_frechet_distance"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.load_activation_statistics", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.utils.load_activation_statistics", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-Generate.frechet_distance.calculate_frechet_distance"], ["", "def", "get_fid", "(", "name1", ",", "name2", ")", ":", "\n", "    ", "mu1", ",", "sigma1", "=", "load_activation_statistics", "(", "name1", ")", "\n", "mu2", ",", "sigma2", "=", "load_activation_statistics", "(", "name2", ")", "\n", "fid", "=", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", "\n", "return", "fid", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.AddNoise.__init__": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "strength", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "strength", "=", "strength", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.AddNoise.__call__": [[38, 40], ["numpy.random.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", "=", "None", ")", ":", "\n", "        ", "return", "wav_data", "+", "np", ".", "random", ".", "randn", "(", "*", "wav_data", ".", "shape", ")", "*", "self", ".", "strength", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.Shifting.__init__": [[44, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shift_max", "=", "0.2", ",", "shift_direction", "=", "'random'", ")", ":", "\n", "        ", "\"\"\"\n        random shift in direction 'shift_direction' up to shift_max seconds \n        \"\"\"", "\n", "self", ".", "shift_max", "=", "shift_max", "\n", "self", ".", "shift_direction", "=", "shift_direction", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.Shifting.__call__": [[51, 72], ["numpy.random.randint", "numpy.mean", "numpy.zeros", "int", "numpy.random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", ")", ":", "\n", "        ", "shift", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "int", "(", "sr", "*", "self", ".", "shift_max", ")", ")", "\n", "\n", "if", "self", ".", "shift_direction", "==", "'random'", ":", "\n", "            ", "if", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", ":", "\n", "                ", "shift_direction", "=", "'right'", "\n", "", "else", ":", "\n", "                ", "shift_direction", "=", "'left'", "\n", "", "", "else", ":", "\n", "            ", "shift_direction", "=", "self", ".", "shift_direction", "\n", "\n", "", "pad", "=", "np", ".", "mean", "(", "wav_data", ")", "\n", "out", "=", "np", ".", "zeros", "(", "wav_data", ".", "shape", ")", "\n", "if", "shift_direction", "==", "'right'", ":", "\n", "            ", "out", "[", "shift", ":", "]", "=", "wav_data", "[", ":", "-", "shift", "]", "\n", "out", "[", ":", "shift", "]", "=", "pad", "\n", "", "else", ":", "\n", "            ", "out", "[", ":", "-", "shift", "]", "=", "wav_data", "[", "shift", ":", "]", "\n", "out", "[", "-", "shift", ":", "]", "=", "pad", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ChangePitch.__init__": [[76, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_pitch", "=", "3", ")", ":", "\n", "        ", "self", ".", "max_pitch", "=", "max_pitch", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ChangePitch.__call__": [[79, 83], ["pyrubberband.pyrb.pitch_shift", "numpy.random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", ")", ":", "\n", "        ", "pitch_increase", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "*", "self", ".", "max_pitch", "\n", "out", "=", "pyrb", ".", "pitch_shift", "(", "wav_data", ",", "sr", ",", "pitch_increase", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ChangeSpeed.__init__": [[87, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_speed_change", "=", "0.2", ",", "direction", "=", "'random'", ")", ":", "\n", "        ", "self", ".", "max_speed", "=", "max_speed_change", "\n", "self", ".", "direction", "=", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ChangeSpeed.__call__": [[91, 106], ["pyrubberband.pyrb.time_stretch", "float", "float", "numpy.random.uniform", "float", "ValueError", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", ")", ":", "\n", "\n", "        ", "if", "self", ".", "direction", "==", "'random'", ":", "\n", "            ", "speed", "=", "float", "(", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "*", "self", ".", "max_speed", ")", "\n", "\n", "", "elif", "self", ".", "direction", "==", "'down'", ":", "\n", "            ", "speed", "=", "float", "(", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "0.0", ")", "*", "self", ".", "max_speed", ")", "\n", "", "elif", "self", ".", "direction", "==", "'up'", ":", "\n", "            ", "speed", "=", "float", "(", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "*", "self", ".", "max_speed", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unknown direction \"{}\"'", ".", "format", "(", "self", ".", "direction", ")", ")", "\n", "\n", "", "out", "=", "pyrb", ".", "time_stretch", "(", "wav_data", ",", "sr", ",", "1.0", "+", "speed", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.Compose.__init__": [[110, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "# transforms is list of transform functions", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.Compose.__call__": [[114, 120], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", ")", ":", "\n", "        ", "out", "=", "wav_data", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "out", "=", "t", "(", "out", ",", "sr", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.RandomTransform.__init__": [[124, 127], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.RandomTransform.__call__": [[128, 138], ["numpy.random.randint", "len", "numpy.random.permutation", "t", "range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", ")", ":", "\n", "\n", "        ", "n_transforms", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "transforms", ")", ")", "\n", "list_transforms", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "self", ".", "transforms", ")", ")", ")", "[", ":", "n_transforms", "]", "\n", "\n", "out", "=", "wav_data", "\n", "for", "idx", "in", "list_transforms", ":", "\n", "            ", "t", "=", "self", ".", "transforms", "[", "idx", "]", "\n", "out", "=", "t", "(", "out", ",", "sr", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ToTensor.__init__": [[142, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "True", ")", ":", "\n", "        ", "self", ".", "requires_grad", "=", "requires_grad", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.transforms.ToTensor.__call__": [[146, 149], ["torch.tensor().unsqueeze", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "wav_data", ",", "sr", "=", "None", ")", ":", "\n", "        ", "out", "=", "torch", ".", "tensor", "(", "wav_data", ",", "requires_grad", "=", "self", ".", "requires_grad", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.exvo_dataset.ICMLExVo.__init__": [[23, 37], ["torch.Dataset.__init__", "exvo_dataset.ICMLExVo.create_wav_dataframe", "exvo_dataset.ICMLExVo.wav_df.query"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.loaders.exvo_dataset.ICMLExVo.create_wav_dataframe"], ["    ", "def", "__init__", "(", "self", ",", "wav_path", ",", "csv_path", ",", "emotion", "=", "\"All\"", ",", "country", "=", "\"All\"", ",", "sample_rate", "=", "16000", ",", "transforms", "=", "None", ",", "check_data", "=", "False", ",", "query", "=", "None", ")", ":", "\n", "        ", "super", "(", "ICMLExVo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "wav_path", "=", "wav_path", "\n", "self", ".", "csv_path", "=", "csv_path", "\n", "self", ".", "emotion", "=", "emotion", "\n", "self", ".", "country", "=", "country", "\n", "self", ".", "wav_df", "=", "self", ".", "create_wav_dataframe", "(", ")", "\n", "\n", "if", "query", ":", "\n", "            ", "self", ".", "wav_df", "=", "self", ".", "wav_df", ".", "query", "(", "query", ")", "\n", "", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "check_data", "=", "check_data", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.exvo_dataset.ICMLExVo.create_wav_dataframe": [[38, 62], ["pandas.read_csv", "print", "print", "df[].apply", "df.reset_index.reset_index.reset_index", "print", "file_id.replace.replace.replace", "file_id.replace.replace.replace", "Exception", "Exception", "len", "len", "len"], "methods", ["None"], ["", "def", "create_wav_dataframe", "(", "self", ")", ":", "\n", "        ", "df", "=", "pandas", ".", "read_csv", "(", "self", ".", "csv_path", ")", "\n", "if", "self", ".", "emotion", "!=", "\"All\"", ":", "\n", "            ", "if", "self", ".", "emotion", "not", "in", "df", ".", "columns", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid emotion\"", ")", "\n", "", "df", "=", "df", "[", "df", "[", "self", ".", "emotion", "]", "==", "1", "]", "\n", "", "print", "(", "f\"Found {len(df)} samples for emotion {self.emotion}.\"", ")", "\n", "\n", "if", "self", ".", "country", "!=", "\"All\"", ":", "\n", "            ", "df", "=", "df", "[", "df", "[", "\"Country\"", "]", "==", "self", ".", "country", "]", "\n", "if", "df", ".", "empty", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid country\"", ")", "\n", "", "", "print", "(", "f\"Of those, found {len(df)} samples from {self.country}.\"", ")", "\n", "\n", "# Make sure file_ids match file names by padding with 0s", "\n", "def", "parse_file_id", "(", "file_id", ")", ":", "\n", "            ", "file_id", "=", "file_id", ".", "replace", "(", "\"[\"", ",", "\"\"", ")", "\n", "file_id", "=", "file_id", ".", "replace", "(", "\"]\"", ",", "\"\"", ")", "\n", "return", "file_id", "\n", "\n", "", "df", "[", "\"File_ID\"", "]", "=", "df", "[", "\"File_ID\"", "]", ".", "apply", "(", "parse_file_id", ")", "\n", "df", "=", "df", ".", "reset_index", "(", ")", "\n", "print", "(", "f\"Training on {len(df)} samples.\"", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.exvo_dataset.ICMLExVo.__getitem__": [[63, 72], ["os.path.join", "soundfile.read", "data.mean.mean.mean"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "wav_path", ",", "self", ".", "wav_df", ".", "iloc", "[", "idx", "]", "[", "\"File_ID\"", "]", "+", "\".wav\"", ")", "\n", "data", ",", "sr", "=", "soundfile", ".", "read", "(", "file_path", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Stereo to mono", "\n", "if", "data", ".", "ndim", "==", "2", ":", "\n", "            ", "data", "=", "data", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "", "return", "data", ",", "self", ".", "sample_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.exvo_dataset.ICMLExVo.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "wav_df", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.__init__": [[39, 68], ["torch.Dataset.__init__", "torchaudio.transforms.MelSpectrogram", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "librosa.filters.mel"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "stft_hopsize", "=", "128", ",", "mel_channels", "=", "128", ",", "sample_rate", "=", "16000", ",", "\n", "transforms", "=", "None", ",", "pad_length", "=", "512", ",", "logmag", "=", "True", ",", "n_samples", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "\n", "        ", "super", "(", "MELDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "wav_db", "=", "dataset", "\n", "self", ".", "stft_hopsize", "=", "stft_hopsize", "\n", "self", ".", "mel_channels", "=", "mel_channels", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "n_fft", "=", "4", "*", "mel_channels", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "pad_length", "=", "pad_length", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "logmag", "=", "logmag", "\n", "\n", "# Todo: We can add data augmentation or cleaning techniques here", "\n", "self", ".", "melspec", "=", "torchaudio", ".", "transforms", ".", "MelSpectrogram", "(", "sample_rate", ",", "\n", "hop_length", "=", "stft_hopsize", ",", "\n", "n_fft", "=", "self", ".", "n_fft", ",", "\n", "n_mels", "=", "self", ".", "mel_channels", ")", "\n", "# Patch to mel filters to make it invertable with librosa", "\n", "self", ".", "melspec", ".", "mel_scale", ".", "fb", "=", "torch", ".", "tensor", "(", "\n", "librosa", ".", "filters", ".", "mel", "(", "sr", "=", "sample_rate", ",", "n_mels", "=", "self", ".", "mel_channels", ",", "n_fft", "=", "self", ".", "n_fft", ",", "norm", "=", "1", ")", ".", "T", "\n", ")", "\n", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "mels", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.mel2audio": [[69, 74], ["librosa.feature.inverse.mel_to_audio", "numpy.exp"], "methods", ["None"], ["", "def", "mel2audio", "(", "self", ",", "mel", ")", ":", "\n", "        ", "if", "self", ".", "logmag", ":", "\n", "            ", "mel", "=", "np", ".", "exp", "(", "2.0", "*", "mel", ")", "-", "1e-6", "\n", "", "return", "librosa", ".", "feature", ".", "inverse", ".", "mel_to_audio", "(", "mel", ",", "sr", "=", "self", ".", "sample_rate", ",", "n_fft", "=", "self", ".", "n_fft", ",", "\n", "hop_length", "=", "self", ".", "stft_hopsize", ",", "norm", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.audio2mel": [[75, 80], ["mel_dataset.MELDataset.melspec().detach", "mel_dataset.MELDataset.melspec", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "audio2mel", "(", "self", ",", "audio", ")", ":", "\n", "        ", "mel", "=", "self", ".", "melspec", "(", "audio", ")", ".", "detach", "(", ")", "\n", "if", "self", ".", "logmag", ":", "\n", "            ", "mel", "=", "torch", ".", "log", "(", "mel", "+", "1e-6", ")", "/", "2.0", "\n", "", "return", "mel", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.__getitem__": [[81, 99], ["mel_dataset.MELDataset.audio2mel", "pad_tensor.detach", "mel_dataset.MELDataset.transforms().astype", "loaders.transforms.ToTensor", "mel_dataset.pad_tensor", "mel_dataset.MELDataset.transforms", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.audio2mel", "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.pad_tensor"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", ",", "sr", "=", "self", ".", "wav_db", "[", "idx", "]", "\n", "\n", "# Todo: Parametrize this or resample when not true", "\n", "assert", "sr", "==", "self", ".", "sample_rate", ",", "f'{self.sample_rate} Hz Audio only. Got:{sr}'", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "transforms", "(", "data", ",", "sr", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "data", "=", "ToTensor", "(", "requires_grad", "=", "False", ")", "(", "data", ")", "\n", "\n", "mel", "=", "self", ".", "audio2mel", "(", "data", ")", "\n", "\n", "# truncate or pad", "\n", "if", "mel", ".", "shape", "[", "-", "1", "]", ">=", "self", ".", "pad_length", ":", "\n", "            ", "mel", "=", "mel", "[", ":", ",", ":", ",", ":", "self", ".", "pad_length", "]", "\n", "", "else", ":", "\n", "            ", "mel", "=", "pad_tensor", "(", "mel", ",", "self", ".", "pad_length", ",", "-", "1", ",", "pad_val", "=", "np", ".", "log", "(", "1e-6", ")", "/", "2.0", ")", "\n", "", "return", "mel", ".", "detach", "(", ")", "\n", "# return self.mels[idx]", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.MELDataset.__len__": [[101, 105], ["len", "min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n_samples", ":", "\n", "            ", "return", "min", "(", "self", ".", "n_samples", ",", "len", "(", "self", ".", "wav_db", ")", ")", "\n", "", "return", "len", "(", "self", ".", "wav_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.PadCollate.__init__": [[132, 139], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", "=", "0", ",", "padval", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            dim - the dimension to be padded (dimension of time in sequences)\n        \"\"\"", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "padval", "=", "padval", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.PadCollate.pad_tensor": [[140, 154], ["list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vec.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "pad_tensor", "(", "self", ",", "vec", ",", "pad", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            vec - tensor to pad\n            pad - the size to pad to\n            dim - dimension to pad\n\n        return:\n            a new tensor padded to 'pad' in dimension 'dim'\n        \"\"\"", "\n", "dim", "=", "self", ".", "dim", "\n", "pad_size", "=", "list", "(", "vec", ".", "shape", ")", "\n", "pad_size", "[", "dim", "]", "=", "pad", "-", "vec", ".", "size", "(", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "[", "vec", ",", "torch", ".", "ones", "(", "*", "pad_size", ")", "*", "self", ".", "padval", "]", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.PadCollate.__call__": [[155, 172], ["max", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.requires_grad_", "torch.stack.requires_grad_", "mel_dataset.PadCollate.pad_tensor"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.pad_tensor"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            batch - list of (tensor, label)\n\n        reutrn:\n            xs - a tensor of all examples in 'batch' after padding\n            ys - a LongTensor of all labels in batch\n        \"\"\"", "\n", "# find longest sequence", "\n", "max_len", "=", "max", "(", "[", "x", ".", "shape", "[", "self", ".", "dim", "]", "for", "x", "in", "batch", "]", ")", "\n", "# pad according to max_len", "\n", "batch", "=", "[", "self", ".", "pad_tensor", "(", "x", ",", "pad", "=", "max_len", ")", "for", "x", "in", "batch", "]", "\n", "# stack all", "\n", "x", "=", "torch", ".", "stack", "(", "batch", ",", "dim", "=", "0", ")", "\n", "x", ".", "requires_grad_", "(", "False", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.loaders.mel_dataset.pad_tensor": [[111, 124], ["list", "torch.cat", "torch.cat", "vec.size", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "def", "pad_tensor", "(", "vec", ",", "pad", ",", "dim", ",", "pad_val", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    args:\n        vec - tensor to pad\n        pad - the size to pad to\n        dim - dimension to pad\n\n    return:\n        a new tensor padded to 'pad' in dimension 'dim'\n    \"\"\"", "\n", "pad_size", "=", "list", "(", "vec", ".", "shape", ")", "\n", "pad_size", "[", "dim", "]", "=", "pad", "-", "vec", ".", "size", "(", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "[", "vec", ",", "torch", ".", "ones", "(", "*", "pad_size", ")", "*", "pad_val", "]", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.__init__": [[17, 47], ["classifier.data_provider.get_dataloader", "classifier.models.AudioRNNModel", "argparse.Namespace", "evaluation.Evaluation.load_model", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "evaluation.Evaluation.model.cuda"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.data_provider.dataloader.get_dataloader", "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.load_model"], ["from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "data_provider", "import", "get_dataloader", "\n", "from", "model", "import", "Model", "\n", "from", "metric_provider", "import", "MetricProvider", "\n", "from", "collections", "import", "defaultdict", "\n", "\n", "\n", "class", "Evaluation", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_params", ",", "network_params", ",", "params", ")", ":", "\n", "        ", "\"\"\"Performs the evaluation of the model.\n\n        Args:\n          dataset_params (dict): the parameters to load the daset.\n              'class'      (str): The dataset class to provide.\n              'test'       (str): The path to the test csv file.\n              'batch_size' (int): Batch size to use during training.\n\n          network_params (dict): the parameters to load the network. Depend on the network used.\n\n          params (dict): Training parameters.\n                'model_path'       (str)  : The directory to save best model/logs.\n                'eval_name'        (str)  : The evaluation metric to use. Only one value:'accuracy',\n                'use_gpu'          (bool) : Whether to use GPU.\n                'log_path'         (str)  : Path to save log file.\n        \"\"\"", "\n", "\n", "self", ".", "dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "\n", "dataset_params", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "**", "dataset_params", "[", "\"test\"", "]", ",", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.load_model": [[48, 59], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "evaluation.Evaluation.model.load_state_dict", "pathlib.Path().exists", "Exception", "str", "str", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], [")", "\n", "\n", "model_input_size", "=", "self", ".", "dataset", ".", "dataset", ".", "num_input_features", "\n", "self", ".", "model", "=", "Model", "(", "model_input_size", ",", "**", "network_params", ")", "\n", "\n", "self", ".", "params", "=", "Namespace", "(", "**", "params", ")", "\n", "self", ".", "eval_fns", "=", "{", "\n", "eval_name", ":", "MetricProvider", "(", "eval_name", ")", ".", "_metric", "\n", "for", "eval_name", "in", "self", ".", "params", ".", "eval_names", "\n", "}", "\n", "self", ".", "loss_fn", "=", "Losses", "(", "self", ".", "params", ".", "loss_name", ")", ".", "loss_fn", "\n", "self", ".", "optimizer", "=", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "params", ".", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.start": [[60, 62], ["evaluation.Evaluation.perform_eval_epoch"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.perform_eval_epoch"], ["self", ".", "label_names", "=", "self", ".", "dataset", ".", "dataset", ".", "label_names", "\n", "\n", "self", ".", "n_support", "=", "self", ".", "dataset", ".", "dataset", ".", "n_support", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.save_predictions": [[63, 71], ["print", "pathlib.Path", "open", "json.dump", "str"], "methods", ["None"], ["self", ".", "n_query", "=", "self", ".", "dataset", ".", "dataset", ".", "n_query", "\n", "\n", "if", "self", ".", "params", ".", "use_gpu", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "self", ".", "params", ".", "log_path", ")", "\n", "logging", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "self", ".", "load_model", "(", "self", ".", "params", ".", "use_gpu", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.perform_eval_epoch": [[72, 92], ["evaluation.Evaluation.model.eval", "enumerate", "evaluation.Evaluation.save_predictions", "print", "evaluation.Evaluation.model", "enumerate", "batch_data.cuda.cuda.cuda", "zip", "predictions[].data.cpu().numpy", "predictions[].data.cpu().numpy.astype().tolist", "len", "predictions[].data.cpu", "predictions[].data.cpu().numpy.astype"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.save_predictions"], ["self", ".", "_params_to_train", "(", "self", ".", "model", ")", "\n", "\n", "", "def", "_params_to_train", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "model", ".", "children", "(", ")", ")", ":", "\n", "            ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "param", "in", "model", ".", "rnn", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "param", "in", "model", ".", "linear", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "def", "load_model", "(", "self", ",", "use_gpu", ")", ":", "\n", "        ", "\"\"\"Loads model parameters (state_dict) from file_path.\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "not", "use_gpu", "else", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "logging", ".", "info", "(", "f\"Loading model parameter from {str(self.params.model_path)}\"", ")", "\n", "\n", "if", "not", "Path", "(", "self", ".", "params", ".", "model_path", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "f\"No model exists in path : {str(self.params.model_path)}\"", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.classifier.perform_evaluation.main": [[27, 30], ["evaluation.Evaluation", "evaluation.Evaluation.start"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.classifier.evaluation.Evaluation.start"], ["\"--base_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"experiments/\"", ",", "\n", "help", "=", "\"Directory to save model/logs (default experiments).\"", ",", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.MelSpecNet.__init__": [[19, 41], ["torch.Module.__init__", "model_provider.MelSpecNet._get_model_and_out_size", "torchvision.transforms.Normalize", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "list", "network.children"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.MelSpecNet._get_model_and_out_size"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", "=", "None", ",", "\n", "video_net", ":", "str", "=", "'resnet18'", ",", "\n", "num_classes", ":", "int", "=", "6", ")", ":", "\n", "        ", "\"\"\" Creates the network architecture.\n        \n        Args:\n          video_net : The name of the network to use.\n        \"\"\"", "\n", "\n", "super", "(", "MelSpecNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "network", ",", "fc_inp_size", "=", "self", ".", "_get_model_and_out_size", "(", "video_net", ")", "\n", "network", "=", "list", "(", "network", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "network", ")", "\n", "\n", "self", ".", "preds", "=", "nn", ".", "Linear", "(", "fc_inp_size", ",", "num_classes", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.MelSpecNet._get_model_and_out_size": [[42, 53], ["network"], "methods", ["None"], ["", "def", "_get_model_and_out_size", "(", "self", ",", "video_net", ":", "str", ")", ":", "\n", "        ", "(", "network", ",", "num_out_features", ")", "=", "{", "\n", "'resnet18'", ":", "(", "models", ".", "resnet18", ",", "512", ")", ",", "\n", "'resnet34'", ":", "(", "models", ".", "resnet34", ",", "512", ")", ",", "\n", "'resnet50'", ":", "(", "models", ".", "resnet50", ",", "2048", ")", ",", "\n", "'vgg11'", ":", "(", "models", ".", "vgg11", ",", "25088", ")", ",", "\n", "'vgg13'", ":", "(", "models", ".", "vgg13", ",", "25088", ")", ",", "\n", "'vgg16'", ":", "(", "models", ".", "vgg16", ",", "25088", ")", ",", "\n", "}", "[", "video_net", "]", "\n", "\n", "return", "network", "(", "pretrained", "=", "True", ")", ",", "num_out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.MelSpecNet.forward": [[54, 69], ["model_provider.MelSpecNet.permute", "model_provider.MelSpecNet.view", "model_provider.MelSpecNet.normalize", "model_provider.MelSpecNet.network", "cnn_out.view.view.view", "model_provider.MelSpecNet.preds"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "tensor", ")", ":", "\n", "        ", "bs", ",", "sl", ",", "c", "=", "x", ".", "shape", "\n", "\n", "# bs, c, sl", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "bs", ",", "3", ",", "128", ",", "sl", ")", "\n", "\n", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "\n", "cnn_out", "=", "self", ".", "network", "(", "x", ")", "\n", "cnn_out", "=", "cnn_out", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "\n", "output", "=", "self", ".", "preds", "(", "cnn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.__init__": [[73, 118], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "len", "torch.ModuleList", "torch.ModuleList", "zip", "torch.Sequential", "torch.Sequential", "int", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "model_provider.CNN.reset_parameters", "op_params.keys", "torch.ModuleList.extend", "numpy.floor", "model_provider.CNN.cnn_block", "numpy.floor", "op_params.values", "mp_params.values"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.reset_parameters", "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.cnn_block"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "op_params", ":", "dict", ",", "\n", "mp_params", ":", "dict", ",", "\n", "rnn_params", ":", "dict", ",", "\n", "num_classes", ":", "int", "=", "6", ",", "\n", "act_fn_name", ":", "str", "=", "'leaky_relu'", ")", ":", "\n", "        ", "\"\"\" Creates the network architecture.\n        \n        Args:\n          input_size (int): The input dimensionality of the data.\n          hidden_unit_layers (list): List with the number of neurons at each layer.\n          num_classes (int): Number of output classes to predict.\n          act_fn (str): Activation function to use in the network.\n        \"\"\"", "\n", "\n", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "act_fn", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "num_layers", "=", "len", "(", "op_params", ".", "keys", "(", ")", ")", "\n", "\n", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "channel_size", "=", "1", "\n", "layer_input_size", "=", "input_size", "\n", "for", "op_par", ",", "mp_par", "in", "zip", "(", "*", "[", "op_params", ".", "values", "(", ")", ",", "mp_params", ".", "values", "(", ")", "]", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "\n", "self", ".", "cnn_block", "(", "act_fn", ",", "op_par", ",", "mp_par", ")", "\n", ")", "\n", "# Compute convolution output", "\n", "num_out_feats", "=", "np", ".", "floor", "(", "\n", "(", "layer_input_size", "-", "op_par", "[", "'kernel_size'", "]", "+", "2", "*", "op_par", "[", "'padding'", "]", ")", "+", "1", ")", "\n", "\n", "# Compute max pooling output", "\n", "num_out_feats", "=", "np", ".", "floor", "(", "(", "num_out_feats", "-", "mp_par", "[", "'kernel_size'", "]", ")", "/", "mp_par", "[", "'stride'", "]", ")", "+", "1", "\n", "layer_input_size", "=", "num_out_feats", "\n", "\n", "", "self", ".", "cnn_net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "rnn_params", "[", "'input_size'", "]", "=", "int", "(", "layer_input_size", "*", "op_par", "[", "'out_channels'", "]", ")", "\n", "self", ".", "rnn_net", "=", "nn", ".", "GRU", "(", "**", "rnn_params", ")", "\n", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "fc_inp_size", "=", "rnn_params", "[", "'hidden_size'", "]", "\n", "self", ".", "preds", "=", "nn", ".", "Linear", "(", "fc_inp_size", ",", "num_outs", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.cnn_block": [[119, 125], ["torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["None"], ["", "def", "cnn_block", "(", "self", ",", "act_fn", ",", "op_params", ",", "mp_params", ")", ":", "\n", "        ", "return", "[", "nn", ".", "Conv1d", "(", "**", "op_params", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "op_params", "[", "'out_channels'", "]", ")", ",", "\n", "#                 nn.Dropout(p=0.2),", "\n", "act_fn", ",", "\n", "nn", ".", "MaxPool1d", "(", "**", "mp_params", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.reset_parameters": [[126, 130], ["list", "model_provider.CNN.modules", "model_provider.CNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN._init_weights"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize parameters of the model.\"\"\"", "\n", "for", "m", "in", "list", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "self", ".", "_init_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN._init_weights": [[131, 145], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.zeros_", "torch.init.zeros_", "type", "m.named_parameters", "type", "type", "torch.init.zeros_", "torch.init.zeros_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_"], "methods", ["None"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\" Helper method to initialize the parameters of the model \n            with Kaiming uniform initialization.\n        \"\"\"", "\n", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv1d", "or", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "if", "type", "(", "m", ")", "==", "nn", ".", "GRU", ":", "\n", "            ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.CNN.forward": [[146, 162], ["x.view.view.view", "model_provider.CNN.cnn_net", "model_provider.CNN.view", "model_provider.CNN.rnn_net", "model_provider.CNN.preds", "model_provider.CNN.view", "rnn_out.reshape"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "tensor", ")", ":", "\n", "        ", "'''\n            x (batch_size, seq_len, nchannels, nfeatures)\n        '''", "\n", "bs", ",", "sl", ",", "c", ",", "t", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "t", ")", "\n", "output", "=", "self", ".", "cnn_net", "(", "x", ")", "\n", "\n", "cnn_out", "=", "output", ".", "view", "(", "bs", ",", "sl", ",", "-", "1", ")", "\n", "\n", "rnn_out", ",", "_", "=", "self", ".", "rnn_net", "(", "cnn_out", ")", "\n", "\n", "output", "=", "self", ".", "preds", "(", "rnn_out", ".", "reshape", "(", "bs", "*", "sl", ",", "-", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "bs", ",", "sl", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.models.model_provider.get_model": [[10, 15], ["None"], "function", ["None"], ["def", "get_model", "(", "network_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'melspec'", ":", "MelSpecNet", ",", "\n", "'e2e'", ":", "AudioRNNModel", "\n", "}", "[", "network_name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base.__init__": [[9, 36], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "zip", "torch.Sequential", "torch.Sequential", "torch.ModuleList.extend", "torch.ModuleList.extend", "conv_layers_args.values", "maxpool_layers_args.values", "base.Base._conv_block", "max_pool_op"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base._conv_block"], ["def", "__init__", "(", "self", ",", "\n", "conv_layers_args", ":", "dict", ",", "\n", "maxpool_layers_args", ":", "dict", ",", "\n", "conv_op", ":", "nn", "=", "nn", ".", "Conv1d", ",", "\n", "max_pool_op", ":", "nn", "=", "nn", ".", "MaxPool1d", ",", "\n", "activ_fn", ":", "nn", "=", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "normalize", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\" Audio model.\n        \n        Args:\n            conv_layers_args (dict): parameters of convolutions layers.\n            maxpool_layers_args (dict): parameters of max pool layer layers.\n            conv_op (nn): convolution operation to use (default `nn.Conv1d`).\n            max_pool_op (nn): max pooling operation to use (default `nn.MaxPool1d`).\n            activ_fn (nn) : Activation function to use (default `nn.Relu()`).\n            normalize (bool): Use batch normalization after convolution operation (default `False`).\n        \"\"\"", "\n", "\n", "super", "(", "Base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_op", "=", "conv_op", "\n", "network_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "conv_args", ",", "mp_args", "in", "zip", "(", "*", "[", "conv_layers_args", ".", "values", "(", ")", ",", "maxpool_layers_args", ".", "values", "(", ")", "]", ")", ":", "\n", "            ", "network_layers", ".", "extend", "(", "[", "self", ".", "_conv_block", "(", "conv_args", ",", "activ_fn", ",", "normalize", ")", "]", ")", "\n", "network_layers", ".", "extend", "(", "[", "max_pool_op", "(", "**", "mp_args", ")", "]", ")", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "network_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base._num_out_features": [[37, 58], ["len", "enumerate", "int", "zip", "numpy.floor", "numpy.floor", "conv_args.values", "mp_args.values"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_num_out_features", "(", "cls", ",", "input_size", ":", "int", ",", "conv_args", ":", "dict", ",", "mp_args", ":", "dict", ")", ":", "\n", "        ", "\"\"\" Number of features extracted from Convolution Neural Network.\n        \n        Args:\n            input_size (int): Number of samples of the frame.\n            conv_args (dict): parameters of convolutions layers.\n            mp_args (dict): parameters of max pool layer layers.\n        \"\"\"", "\n", "\n", "layer_input", "=", "input_size", "\n", "num_layers", "=", "len", "(", "conv_args", ")", "\n", "for", "i", ",", "(", "conv_arg", ",", "mp_arg", ")", "in", "enumerate", "(", "zip", "(", "*", "[", "conv_args", ".", "values", "(", ")", ",", "mp_args", ".", "values", "(", ")", "]", ")", ")", ":", "\n", "# number of features in the convolution output", "\n", "            ", "layer_input", "=", "np", ".", "floor", "(", "\n", "(", "layer_input", "-", "conv_arg", "[", "'kernel_size'", "]", "+", "2", "*", "conv_arg", "[", "'padding'", "]", ")", "/", "conv_arg", "[", "'stride'", "]", "+", "1", ")", "\n", "\n", "layer_input", "=", "np", ".", "floor", "(", "\n", "(", "layer_input", "-", "mp_arg", "[", "'kernel_size'", "]", ")", "/", "mp_arg", "[", "'stride'", "]", "+", "1", ")", "\n", "\n", "", "return", "int", "(", "layer_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base._conv_block": [[59, 76], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "base.Base.conv_op", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["None"], ["", "def", "_conv_block", "(", "self", ",", "conv_args", ":", "dict", ",", "activ_fn", ":", "nn", ",", "normalize", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\" Convolution block.\n        \n        Args:\n            conv_args (dict): parameters of convolution layer.\n            activ_fn (nn): Activation function to use (default `nn.Relu()`).\n            normalize (bool): Use batch normalization after convolution \n                              operation (default `False`).\n        \"\"\"", "\n", "\n", "layer", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_op", "(", "**", "conv_args", ")", "]", ")", "\n", "\n", "if", "normalize", ":", "\n", "            ", "layer", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "conv_args", "[", "'out_channels'", "]", ")", ")", "\n", "\n", "", "layer", ".", "append", "(", "activ_fn", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base.forward": [[77, 84], ["base.Base.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Forwards pass.\n        \n        Args:\n            x (BS x 1 x T)\n        \"\"\"", "\n", "return", "self", ".", "network", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_rnn_model.AudioRNNModel.__init__": [[12, 30], ["torch.Module.__init__", "audio_model.AudioModel", "audio_rnn_model.AudioRNNModel._get_rnn_model", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_rnn_model.AudioRNNModel._get_rnn_model"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "num_outs", ":", "int", ")", ":", "\n", "        ", "\"\"\" Convolutional recurrent neural network model.\n        \n        Args:\n            input_size (int): Input size to the model. \n            num_outs (int): Number of output values of the model.\n        \"\"\"", "\n", "\n", "super", "(", "AudioRNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "audio_network", "=", "AudioModel", "(", "input_size", "=", "input_size", ")", "\n", "self", ".", "audio_model", "=", "audio_network", ".", "model", "\n", "num_out_features", "=", "audio_network", ".", "num_features", "\n", "self", ".", "rnn", ",", "r1_num_out_features", "=", "self", ".", "_get_rnn_model", "(", "num_out_features", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "r1_num_out_features", ",", "num_outs", ")", "\n", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_rnn_model.AudioRNNModel._get_rnn_model": [[31, 42], ["rnn.RNN"], "methods", ["None"], ["", "def", "_get_rnn_model", "(", "self", ",", "input_size", ":", "int", ")", ":", "\n", "        ", "\"\"\" Builder method to get RNN instace.\"\"\"", "\n", "\n", "rnn_args", "=", "{", "\n", "'input_size'", ":", "input_size", ",", "\n", "'hidden_size'", ":", "256", ",", "\n", "'num_layers'", ":", "2", ",", "\n", "'batch_first'", ":", "True", "\n", "}", "\n", "\n", "return", "RNN", "(", "rnn_args", ",", "'lstm'", ")", ",", "rnn_args", "[", "'hidden_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_rnn_model.AudioRNNModel.forward": [[43, 58], ["x.view.view.view", "audio_rnn_model.AudioRNNModel.audio_model", "audio_out.view.view.view", "audio_rnn_model.AudioRNNModel.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x ((torch.Tensor) - BS x S x x T)\n        \"\"\"", "\n", "\n", "batch_size", ",", "seq_length", ",", "t", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "batch_size", "*", "seq_length", ",", "1", ",", "t", ")", "\n", "\n", "audio_out", "=", "self", ".", "audio_model", "(", "x", ")", "\n", "audio_out", "=", "audio_out", ".", "view", "(", "batch_size", ",", "seq_length", ",", "-", "1", ")", "\n", "\n", "rnn_out", ",", "_", "=", "self", ".", "rnn", "(", "audio_out", ")", "\n", "\n", "return", "rnn_out", "\n", "# reshaped_rnn = rnn_out.reshape(batch_size*seq_length, -1)", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.emo18.Emo18.__init__": [[10, 23], ["torch.Module.__init__", "emo18.Emo18.build_audio_model"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.audio.emo18.Emo18.build_audio_model"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ":", "int", ")", ":", "\n", "        ", "\"\"\" Speech emotion recognition model proposed in:\n        \n        `Tzirakis, P., Zhang, J., and Schuller, BW. \"End-to-end speech emotion recognition \n        using deep neural networks.\" In 2018 IEEE international conference on acoustics, speech \n        and signal processing (ICASSP), (pp. 5089-5093). IEEE.`\n        \n        Args:\n            input_size (int): Input size to the model. \n        \"\"\"", "\n", "\n", "super", "(", "Emo18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", ",", "self", ".", "num_features", "=", "self", ".", "build_audio_model", "(", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.emo18.Emo18.build_audio_model": [[24, 65], ["in_channels.extend", "len", "base.Base", "base.Base._num_out_features", "len", "range", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.audio.base.Base._num_out_features"], ["", "def", "build_audio_model", "(", "self", ",", "input_size", ":", "int", ")", ":", "\n", "        ", "\"\"\" Build the audio model: 3 blocks of convolution + max-pooling.\n        \n        Args:\n          input_size (int): Input size of frame.\n        \"\"\"", "\n", "\n", "out_channels", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "in_channels", "=", "[", "1", "]", "\n", "in_channels", ".", "extend", "(", "[", "x", "for", "x", "in", "out_channels", "[", ":", "-", "1", "]", "]", ")", "\n", "kernel_size", "=", "[", "8", ",", "6", ",", "6", "]", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "padding", "=", "(", "(", "np", ".", "array", "(", "kernel_size", ")", "-", "1", ")", "//", "2", ")", ".", "tolist", "(", ")", "\n", "\n", "num_layers", "=", "len", "(", "in_channels", ")", "\n", "conv_args", "=", "{", "\n", "f'layer{i}'", ":", "\n", "{", "\n", "'in_channels'", ":", "in_channels", "[", "i", "]", ",", "\n", "'out_channels'", ":", "out_channels", "[", "i", "]", ",", "\n", "'kernel_size'", ":", "kernel_size", "[", "i", "]", ",", "\n", "'stride'", ":", "stride", "[", "i", "]", ",", "\n", "'padding'", ":", "padding", "[", "i", "]", "\n", "}", "\n", "for", "i", "in", "range", "(", "num_layers", ")", "\n", "}", "\n", "\n", "kernel_size", "=", "[", "10", ",", "8", ",", "8", "]", "\n", "stride", "=", "[", "10", ",", "8", ",", "8", "]", "\n", "maxpool_args", "=", "{", "f'layer{i}'", ":", "{", "\n", "'kernel_size'", ":", "kernel_size", "[", "i", "]", ",", "\n", "'stride'", ":", "stride", "[", "i", "]", "\n", "}", "for", "i", "in", "range", "(", "num_layers", ")", "\n", "}", "\n", "\n", "audio_model", "=", "Base", "(", "conv_args", ",", "maxpool_args", ",", "normalize", "=", "True", ")", "\n", "conv_red_size", "=", "Base", ".", "_num_out_features", "(", "input_size", ",", "conv_args", ",", "maxpool_args", ")", "\n", "num_layers", "=", "len", "(", "in_channels", ")", "-", "1", "\n", "num_out_features", "=", "conv_red_size", "*", "conv_args", "[", "f'layer{num_layers}'", "]", "[", "'out_channels'", "]", "\n", "\n", "return", "audio_model", ",", "num_out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.emo18.Emo18.forward": [[66, 72], ["emo18.Emo18.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        Args:\n            x (BS x 1 x T)\n        '''", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_model.AudioModel.__init__": [[9, 22], ["torch.Module.__init__", "emo18.Emo18"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Audio network model.\n        \n        Args:\n            model_name (str): Name of audio model to use.\n            pretrain (bool): Whether to use pretrain model (default `False`).\n        \"\"\"", "\n", "\n", "super", "(", "AudioModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "Emo18", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_features", "=", "self", ".", "model", ".", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.audio.audio_model.AudioModel.forward": [[23, 30], ["audio_model.AudioModel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Forward pass\n        \n        Args:\n            x (BS x S x 1 x T)\n        \"\"\"", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.rnn.rnn.RNN.__init__": [[7, 20], ["torch.Module.__init__", "rnn.RNN._get_rnn"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.humeai_competitions.rnn.rnn.RNN._get_rnn"], ["    ", "def", "__init__", "(", "self", ",", "\n", "arch_args", ":", "dict", ",", "\n", "arch", ":", "str", "=", "'lstm'", ")", ":", "\n", "        ", "\"\"\" Initialize RNN instance.\n        \n        Args:\n            arch_args (dict): arguments of the architecture.\n               keys: input_size, hidden_size, num_layers\n            arch (str): lstm or gru (default `lstm`).\n        \"\"\"", "\n", "\n", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "self", ".", "_get_rnn", "(", "arch", ",", "arch_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.rnn.rnn.RNN._get_rnn": [[21, 28], ["None"], "methods", ["None"], ["", "def", "_get_rnn", "(", "self", ",", "arch", ",", "arch_args", ")", ":", "\n", "        ", "\"\"\" Factory method to get RNN instance.\"\"\"", "\n", "\n", "return", "{", "\n", "'lstm'", ":", "nn", ".", "LSTM", ",", "\n", "'gru'", ":", "nn", ".", "GRU", "\n", "}", "[", "arch", "]", "(", "**", "arch_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.rnn.rnn.RNN.forward": [[29, 38], ["rnn.RNN.rnn.flatten_parameters", "rnn.RNN.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n        \n        Args:\n            x (BS x C x T)\n        \"\"\"", "\n", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "return", "self", ".", "rnn", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.models.MultiTask.__init__": [[11, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dimensions", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "share_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dimensions", ",", "128", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n", "self", ".", "emotion_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "32", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "32", ",", "10", ")", "\n", ")", "\n", "\n", "self", ".", "age_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "32", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "country_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "32", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "32", ",", "4", ")", "\n", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.33", ",", "-", "0.33", ",", "-", "0.33", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.models.MultiTask.forward": [[37, 43], ["models.MultiTask.share_layer", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.MultiTask.age_layer", "models.MultiTask.country_layer", "models.MultiTask.emotion_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h_shared", "=", "self", ".", "share_layer", "(", "x", ")", "\n", "emotion", "=", "torch", ".", "sigmoid", "(", "self", ".", "emotion_layer", "(", "h_shared", ")", ")", "\n", "age", "=", "self", ".", "age_layer", "(", "h_shared", ")", "\n", "country", "=", "self", ".", "country_layer", "(", "h_shared", ")", "\n", "return", "[", "emotion", ",", "country", ",", "age", "]", ",", "self", ".", "logsigma", "\n", "", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.main.baseline": [[63, 184], ["print", "models.MultiTask().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print", "utils.EarlyStopping", "range", "MultiTask().to.", "enumerate", "print", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit_transform", "torch.max", "torch.max", "torch.max", "utils.EvalMetrics.UAR", "print", "utils.EvalMetrics.MAE", "print", "torch.save", "torch.save", "torch.save", "torch.MSELoss", "torch.CrossEntropyLoss", "MultiTask().to.parameters", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "train.train", "loss_res.append", "train.validation", "print", "val_loss_res.append", "utils.EarlyStopping.", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "val_pred[].cpu", "classes.index", "utils.EvalMetrics.CCC", "print", "val_result.append", "val_pred[].detach().numpy", "scipy.stats.hmean", "print", "seaborn.lineplot", "seaborn.lineplot", "matplotlib.pyplot.legend", "matplotlib.pyplot.title", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.savefig", "matplotlib.pyplot.clf", "MultiTask().to.state_dict", "numpy.round", "models.MultiTask", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "loss.item", "train.validation.item", "train.validation.item", "print", "[].flatten().detach().numpy", "print", "numpy.mean", "X[].astype", "X[].astype", "torch.from_numpy().to.size", "torch.from_numpy().to.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.round", "numpy.round", "numpy.round", "val_pred[].detach", "numpy.round", "numpy.round", "numpy.mean", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "X[].astype", "[].flatten().detach", "j.capitalize", "numpy.mean", "numpy.std", "numpy.round", "numpy.mean", "loss.item", "train.validation.item", "[].flatten"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.UAR", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.MAE", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.train", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.validation", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.CCC"], ["def", "baseline", "(", "\n", "plot_loss", ",", "\n", "timestamp", ",", "\n", "classes", ",", "\n", "feature_type", ",", "\n", "X", ",", "\n", "emo_y", ",", "\n", "age_y", ",", "\n", "country_y", ",", "\n", "feat_dimensions", ",", "\n", "num_epochs", ",", "\n", "lr", ",", "\n", "bs", ",", "\n", "es_patience", ",", "\n", "seed", ",", "\n", "store_name", ",", "\n", ")", ":", "\n", "    ", "print", "(", "f\"Running experiments with {feature_type}\"", ")", "\n", "lmse", ",", "lclass", "=", "nn", ".", "MSELoss", "(", ")", ",", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "es_delta", "=", "0.1", "\n", "val_result", ",", "loss_res", ",", "val_loss_res", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "model", "=", "MultiTask", "(", "feat_dimensions", ")", ".", "to", "(", "dev", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0.0001", ")", "\n", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "X", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "dev", ")", "\n", "val_inputs", "=", "torch", ".", "from_numpy", "(", "X", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "dev", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "f\"Seed {seed} | {lr} | Batch Size {bs} | Epochs {num_epochs}\"", ")", "\n", "\n", "es", "=", "EarlyStopping", "(", "patience", "=", "es_patience", ",", "verbose", "=", "False", ",", "delta", "=", "es_delta", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "train_permutation", "=", "torch", ".", "randperm", "(", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "val_permutation", "=", "torch", ".", "randperm", "(", "val_inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "age_mae", ",", "country_uar", ",", "y_country", ",", "age_ccc", ",", "train_val", ",", "loss", "=", "train", "(", "\n", "X", "[", "0", "]", ",", "\n", "optimizer", ",", "\n", "lmse", ",", "\n", "lclass", ",", "\n", "model", ",", "\n", "epoch", ",", "\n", "inputs", ",", "\n", "train_permutation", ",", "\n", "emo_y", "[", "0", "]", ",", "\n", "age_y", "[", "0", "]", ",", "\n", "country_y", "[", "0", "]", ",", "\n", "bs", ",", "\n", ")", "\n", "loss_res", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "val_loss", "=", "validation", "(", "\n", "lmse", ",", "\n", "lclass", ",", "\n", "model", ",", "\n", "epoch", ",", "\n", "val_inputs", ",", "\n", "val_permutation", ",", "\n", "emo_y", "[", "1", "]", ",", "\n", "age_y", "[", "1", "]", ",", "\n", "country_y", "[", "1", "]", ",", "\n", "bs", ",", "\n", ")", "\n", "print", "(", "\n", "f\"{epoch+1}/{num_epochs}\\tEmoCCC: {np.round(np.mean(train_val),3)}\\tCountryUAR: {np.round(country_uar,3)}\\t AgeMAE: {np.round(age_mae,3)}\\tTrainLoss: {np.round(loss.item(),3)} \\tValLoss: {np.round(val_loss.item(),3)}\"", "\n", ")", "\n", "val_loss_res", ".", "append", "(", "val_loss", ".", "item", "(", ")", ")", "\n", "\n", "es", "(", "val_loss", ".", "item", "(", ")", ",", "model", ")", "\n", "if", "es", ".", "early_stop", ":", "\n", "            ", "print", "(", "f\"Early stopping {epoch}\"", ")", "\n", "break", "\n", "\n", "", "", "val_pred", ",", "logsigma", "=", "model", "(", "torch", ".", "from_numpy", "(", "X", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "dev", ")", ")", "\n", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "val_pred", ")", ":", "\n", "        ", "val_pred", "[", "index", "]", "=", "val_pred", "[", "index", "]", ".", "cpu", "(", ")", "\n", "", "for", "j", "in", "classes", ":", "\n", "        ", "identifier", "=", "classes", ".", "index", "(", "j", ")", "\n", "ccc_val", "=", "EvalMetrics", ".", "CCC", "(", "\n", "emo_y", "[", "1", "]", ".", "iloc", "[", ":", ",", "identifier", "]", ",", "\n", "val_pred", "[", "0", "]", "[", ":", ",", "identifier", "]", ".", "flatten", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", ")", "\n", "print", "(", "f\"Val CCC \\t {j.capitalize()}: \\t {ccc_val}\"", ",", "flush", "=", "True", ")", "\n", "val_result", ".", "append", "(", "ccc_val", ")", "\n", "", "print", "(", "\n", "f\"------\\nEmotion Mean CCC: {np.round(np.mean(val_result),4)}\\nSTD: {np.round(np.std(val_result),4)}\"", "\n", ")", "\n", "\n", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "val_country", "=", "le", ".", "fit_transform", "(", "country_y", "[", "1", "]", ")", "\n", "y_country", "=", "torch", ".", "max", "(", "val_pred", "[", "1", "]", ",", "1", ")", "\n", "country_uar", "=", "EvalMetrics", ".", "UAR", "(", "country_y", "[", "1", "]", ",", "y_country", ".", "indices", ")", "\n", "print", "(", "f\"Country UAR: {np.round(country_uar,4)}\"", ")", "\n", "\n", "age_mae", "=", "EvalMetrics", ".", "MAE", "(", "age_y", "[", "1", "]", ",", "val_pred", "[", "2", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "inverted_mae", "=", "1", "/", "age_mae", "\n", "print", "(", "f\"Age MAE: {np.round(age_mae,4)}\\n~MAE: {np.round(inverted_mae,4)}\\n------\"", ")", "\n", "try", ":", "\n", "        ", "val_hmean_score", "=", "hmean", "(", "[", "np", ".", "mean", "(", "val_result", ")", ",", "country_uar", ",", "inverted_mae", "]", ")", "\n", "print", "(", "f\"HMean: {np.round(val_hmean_score,4)}\\n------\"", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"HMean not possible\"", ")", "\n", "\n", "", "if", "plot_loss", ":", "\n", "        ", "sns", ".", "lineplot", "(", "data", "=", "loss_res", ")", "\n", "sns", ".", "lineplot", "(", "data", "=", "val_loss_res", ")", "\n", "plt", ".", "legend", "(", "[", "\"Train\"", ",", "\"Val\"", "]", ")", "\n", "plt", ".", "title", "(", "f\"Loss, No Epochs {epoch+1}\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Epoch No.\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Combined Loss\"", ")", "\n", "plt", ".", "savefig", "(", "f\"plots/{timestamp}_{num_epochs}_{lr}_{bs}_{store_name}_{seed}.png\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f\"tmp/{timestamp}_{store_name}_model_{seed}.pth\"", ")", "\n", "\n", "return", "(", "\n", "model", ",", "\n", "np", ".", "round", "(", "val_hmean_score", ",", "4", ")", ",", "\n", "[", "np", ".", "mean", "(", "val_result", ")", ",", "country_uar", ",", "inverted_mae", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.main.store_predictions": [[187, 237], ["print", "models.MultiTask().to", "MultiTask().to.load_state_dict", "MultiTask().to.", "enumerate", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit_transform", "torch.max", "torch.max", "torch.max", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "torch.load", "torch.load", "torch.load", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "test_pred[].cpu", "list", "test_pred[].flatten().detach().numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "models.MultiTask", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "test_pred[].flatten().detach", "str", "X[].astype", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "[].detach", "test_pred[].flatten"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load"], ["", "def", "store_predictions", "(", "\n", "feat_dimensions", ",", "\n", "X", ",", "\n", "team_name", ",", "\n", "labels", ",", "\n", "classes", ",", "\n", "seed", ",", "\n", "timestamp", ",", "\n", "feature_type", ",", "\n", "country_y", ",", "\n", "test_filename_group", ",", "\n", "store_name", ",", "\n", ")", ":", "\n", "    ", "print", "(", "f\"Predicting on the test set...\"", ")", "\n", "submission_no", "=", "1", "# change manually", "\n", "\n", "model", "=", "MultiTask", "(", "feat_dimensions", ")", ".", "to", "(", "dev", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f\"tmp/{timestamp}_{store_name}_model_{seed}.pth\"", ")", ")", "\n", "\n", "file_ids", "=", "test_filename_group", "\n", "test_pred", ",", "logsigma", "=", "model", "(", "torch", ".", "from_numpy", "(", "X", "[", "2", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "dev", ")", ")", "\n", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "test_pred", ")", ":", "\n", "        ", "test_pred", "[", "index", "]", "=", "test_pred", "[", "index", "]", ".", "cpu", "(", ")", "\n", "", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "\n", "test_country", "=", "le", ".", "fit_transform", "(", "country_y", "[", "2", "]", ")", "\n", "y_country_pred", "=", "torch", ".", "max", "(", "test_pred", "[", "1", "]", ",", "1", ")", "\n", "\n", "dict_info", "=", "{", "\n", "\"File_ID\"", ":", "list", "(", "file_ids", ".", "values", ")", ",", "\n", "\"Country\"", ":", "y_country_pred", "[", "1", "]", ",", "\n", "\"Age\"", ":", "test_pred", "[", "2", "]", ".", "flatten", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"Awe\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Excitement\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Amusement\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "2", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Awkwardness\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "3", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Fear\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "4", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Horror\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "5", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Distress\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "6", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Triumph\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "7", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Sadness\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "8", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Surprise\"", ":", "np", ".", "array", "(", "test_pred", "[", "0", "]", "[", ":", ",", "9", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "}", "\n", "\n", "prediction_csv", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "dict_info", ")", "\n", "\n", "prediction_csv", ".", "to_csv", "(", "\n", "f\"preds/ExVo-Multi_{team_name}_{str(submission_no)}_{seed}_{store_name}.csv\"", ",", "\n", "index", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.main.main": [[240, 378], ["pandas.read_csv", "time.strftime", "pathlib.Path", "pathlib.Path", "pathlib.Path", "sklearn.preprocessing.StandardScaler", "utils.Processing.normalise", "random.sample", "numpy.max", "numpy.argmax", "print", "print", "pathlib.Path.is_file", "pathlib.Path.mkdir", "pathlib.Path.is_file", "pathlib.Path.mkdir", "pathlib.Path.is_file", "pathlib.Path.mkdir", "feature_type.replace", "os.path.exists", "dataloader.Dataloader.create", "dataloader.Dataloader.load", "print", "main.baseline", "hmean_list.append", "ccc_list.append", "uar_list.append", "mae_list.append", "numpy.std", "pandas.DataFrame", "pd.DataFrame.to_csv", "main.store_predictions", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "len"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.Processing.normalise", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.create", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.main.baseline", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.main.store_predictions"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_dir", "=", "args", ".", "directory", "\n", "labels", "=", "pd", ".", "read_csv", "(", "f\"{data_dir}{args.labels}\"", ")", "\n", "feature_type", "=", "args", ".", "features", "\n", "plot_loss", "=", "args", ".", "pltloss", "\n", "timestamp", "=", "time", ".", "strftime", "(", "\"%d%m%Y-%H%M%S\"", ")", "\n", "targets", "=", "[", "\n", "\"Awe\"", ",", "\n", "\"Excitement\"", ",", "\n", "\"Amusement\"", ",", "\n", "\"Awkwardness\"", ",", "\n", "\"Fear\"", ",", "\n", "\"Horror\"", ",", "\n", "\"Distress\"", ",", "\n", "\"Triumph\"", ",", "\n", "\"Sadness\"", ",", "\n", "\"Surprise\"", ",", "\n", "\"Age\"", ",", "\n", "\"Country\"", ",", "\n", "]", "\n", "classes", "=", "targets", "[", ":", "10", "]", "\n", "\n", "plot_folder", "=", "Path", "(", "\"plots/\"", ")", "\n", "if", "not", "plot_folder", ".", "is_file", "(", ")", ":", "\n", "        ", "plot_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "pred_folder", "=", "Path", "(", "\"preds/\"", ")", "\n", "if", "not", "pred_folder", ".", "is_file", "(", ")", ":", "\n", "        ", "pred_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "results_folder", "=", "Path", "(", "\"results/\"", ")", "\n", "if", "not", "results_folder", ".", "is_file", "(", ")", ":", "\n", "        ", "results_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "# DataLoader", "\n", "", "if", "\"/\"", "in", "feature_type", ":", "\n", "        ", "store_name", "=", "feature_type", ".", "replace", "(", "\"/\"", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "        ", "store_name", "=", "feature_type", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "f\"tmp/{store_name}_train_X.csv\"", ")", ":", "\n", "        ", "X", ",", "high", ",", "age", ",", "country", ",", "feat_dimensions", ",", "test_filename_group", "=", "Dataloader", ".", "create", "(", "\n", "labels", ",", "\n", "True", ",", "\n", "data_dir", ",", "\n", "feature_type", ",", "\n", "targets", "[", ":", "10", "]", ",", "\n", "targets", "[", "10", "]", ",", "\n", "targets", "[", "11", "]", ",", "\n", "store_name", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "X", ",", "high", ",", "age", ",", "country", ",", "feat_dimensions", ",", "test_filename_group", "=", "Dataloader", ".", "load", "(", "\n", "feature_type", ",", "store_name", "\n", ")", "\n", "\n", "# Scale Data", "\n", "", "scaler", "=", "StandardScaler", "(", ")", "\n", "\n", "X", ",", "emo_y", ",", "age_y", ",", "country_y", "=", "Processing", ".", "normalise", "(", "scaler", ",", "X", ",", "high", ",", "age", ",", "country", ")", "\n", "\n", "hmean_list", ",", "ccc_list", ",", "uar_list", ",", "mae_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "seed_list", "=", "[", "101", ",", "102", ",", "103", ",", "104", ",", "105", ",", "106", "]", "\n", "seed_list", "=", "random", ".", "sample", "(", "seed_list", ",", "args", ".", "n_seeds", ")", "\n", "for", "seed", "in", "seed_list", ":", "\n", "        ", "print", "(", "f\"Running Model for {len(seed_list)} seeds\"", ")", "\n", "model", ",", "hmean", ",", "metrics", "=", "baseline", "(", "\n", "plot_loss", ",", "\n", "timestamp", ",", "\n", "classes", ",", "\n", "feature_type", ",", "\n", "X", ",", "\n", "emo_y", ",", "\n", "age_y", ",", "\n", "country_y", ",", "\n", "feat_dimensions", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "learningrate", ",", "\n", "args", ".", "batchsize", ",", "\n", "args", ".", "patience", ",", "\n", "seed", ",", "\n", "store_name", ",", "\n", ")", "\n", "if", "args", ".", "store_pred", ":", "\n", "            ", "store_predictions", "(", "\n", "feat_dimensions", ",", "\n", "X", ",", "\n", "args", ".", "teamname", ",", "\n", "labels", ",", "\n", "classes", ",", "\n", "seed", ",", "\n", "timestamp", ",", "\n", "feature_type", ",", "\n", "country_y", ",", "\n", "test_filename_group", ",", "\n", "store_name", ",", "\n", ")", "\n", "\n", "", "hmean_list", ".", "append", "(", "hmean", ")", "\n", "ccc_list", ".", "append", "(", "metrics", "[", "0", "]", ")", "\n", "uar_list", ".", "append", "(", "metrics", "[", "1", "]", ")", "\n", "mae_list", ".", "append", "(", "metrics", "[", "2", "]", ")", "\n", "\n", "", "max_hmean", "=", "np", ".", "max", "(", "hmean_list", ")", "\n", "max_index_hmean", "=", "np", ".", "argmax", "(", "hmean_list", ")", "\n", "seed_best", ",", "std_hmean", "=", "seed_list", "[", "max_index_hmean", "]", ",", "np", ".", "std", "(", "hmean_list", ")", "\n", "ccc_best", ",", "uar_best", ",", "mae_best", "=", "(", "\n", "ccc_list", "[", "max_index_hmean", "]", ",", "\n", "uar_list", "[", "max_index_hmean", "]", ",", "\n", "mae_list", "[", "max_index_hmean", "]", ",", "\n", ")", "\n", "\n", "print", "(", "\n", "f\"Harmonic Mean, Validation Best with seed [{seed_best}]: {max_hmean}, STD: {np.round(std_hmean,4)}\"", "\n", ")", "\n", "print", "(", "\n", "f\"For this Harmonic Mean, CCC {np.round(ccc_best,4)} | UAR {np.round(uar_best,4)} | MAE {np.round(mae_best,4)}\"", "\n", ")", "\n", "\n", "if", "args", ".", "save_csv", ":", "\n", "        ", "dict_results", "=", "{", "\n", "\"Timestamp\"", ":", "timestamp", ",", "\n", "\"Feature Type\"", ":", "feature_type", ",", "\n", "\"Learning Rate\"", ":", "args", ".", "learningrate", ",", "\n", "\"Batch Size\"", ":", "args", ".", "batchsize", ",", "\n", "\"Max HMean\"", ":", "max_hmean", ",", "\n", "\"Std HMean\"", ":", "std_hmean", ",", "\n", "\"Seed\"", ":", "seed_best", ",", "\n", "\"n_seeds\"", ":", "args", ".", "n_seeds", ",", "\n", "f\"CCC_{seed_best}\"", ":", "ccc_best", ",", "\n", "f\"UAR_{seed_best}\"", ":", "uar_best", ",", "\n", "f\"MAE_{seed_best}\"", ":", "mae_best", ",", "\n", "}", "\n", "results_csv", "=", "pd", ".", "DataFrame", "(", "[", "dict_results", "]", ")", "\n", "results_csv", ".", "to_csv", "(", "\n", "f\"results/{timestamp}_{store_name}_{args.learningrate}_{args.batchsize}_results.csv\"", ",", "\n", "index", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.train": [[19, 104], ["range", "model", "enumerate", "torch.max", "sklearn.metrics.recall_score", "sklearn.metrics.mean_absolute_error", "utils.EvalMetrics.CCC", "inputs[].to", "model", "model", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit_transform", "torch.from_numpy", "torch.from_numpy", "lclass", "lmse", "sum", "sum.backward", "optimizer.step", "optimizer.zero_grad", "torch.from_numpy().to", "train_pred[].cpu", "classes.index", "utils.EvalMetrics.CCC", "train_val.append", "torch.from_numpy.cpu", "torch.max.indices.cpu", "torch.from_numpy.cpu", "train_pred[].detach().numpy", "torch.from_numpy.cpu", "train_pred[].flatten().detach().numpy", "inputs.size", "classes.index", "torch.from_numpy", "targets[].to", "lmse", "numpy.array", "numpy.array", "train_pred[].to", "train_country[].to", "train_pred[].type().to", "train_age[].to", "[].flatten().detach().numpy", "numpy.array", "[].to", "torch.from_numpy", "train_pred[].detach", "train_pred[].flatten().detach", "train_y.iloc[].astype", "train_pred[].type", "range", "train_X.astype", "[].flatten().detach", "train_pred[].flatten", "[].flatten", "torch.exp"], "function", ["home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.CCC", "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.CCC"], ["from", "metric_provider", "import", "MetricProvider", "\n", "from", "collections", "import", "defaultdict", "\n", "\n", "\n", "class", "Train", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_params", ":", "dict", ",", "network_params", ":", "dict", ",", "train_params", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Performs the training of the model.\n\n        Args:\n          dataset_params (dict): the parameters to load the daset.\n              'class'      (str): The dataset class to provide.\n              'train_path' (str): The path to the training csv file.\n              'valid_path' (str): The path to the validation csv file.\n              'batch_size' (int): Batch size to use during training.\n\n          network_params (dict): the parameters to load the network. Depend on the network used.\n                'network_type' (str)  : The network type to use.\n                 *args, **kwargs.     : The parameters of the network.\n\n          train_params (dict): Training parameters.\n                'number_of_epochs' (int)  : Number of epochs to train model.\n                'lr'               (float): learning rate of the model.\n                'loss_name'        (str)  : The loss to use. Only one value 'cross_entropy_loss',\n                'base_dir'         (str)  : The directory to save best model/logs.\n                'eval_name'        (str)  : The evaluation metric to use. Only one value:'accuracy',\n                'use_gpu'          (bool) : Whether to use GPU.\n                'log_path'         (str)  : Path to save log file.\n                'nepochs2stop'     (int)  : If model has not improved for `nepochs2stop`, then stop training.\n        \"\"\"", "\n", "\n", "self", ".", "train_dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "\n", "dataset_params", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "dataset_params", "[", "\"train\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "valid_dataset", "=", "get_dataloader", "(", "\n", "dataset_params", "[", "\"class\"", "]", ",", "1", ",", "shuffle", "=", "False", ",", "**", "dataset_params", "[", "\"valid\"", "]", "\n", ")", "\n", "\n", "model_input_size", "=", "self", ".", "train_dataset", ".", "dataset", ".", "num_input_features", "\n", "self", ".", "model", "=", "Model", "(", "model_input_size", ",", "**", "network_params", ")", "\n", "\n", "self", ".", "train_params", "=", "Namespace", "(", "**", "train_params", ")", "\n", "\n", "self", ".", "loss_fn", "=", "Losses", "(", "self", ".", "train_params", ".", "loss_name", ")", ".", "loss_fn", "\n", "\n", "self", ".", "metric2track", "=", "self", ".", "train_params", ".", "metric2track", "\n", "self", ".", "eval_fns", "=", "{", "\n", "eval_name", ":", "MetricProvider", "(", "eval_name", ")", ".", "_metric", "\n", "for", "eval_name", "in", "self", ".", "train_params", ".", "eval_names", "\n", "}", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "train_params", ".", "lr", ")", "\n", "\n", "self", ".", "base_dir", "=", "Path", "(", "self", ".", "train_params", ".", "base_dir", ")", "\n", "self", ".", "base_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "use_gpu", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "logger", "=", "self", ".", "get_logger", "(", "self", ".", "train_params", ".", "log_path", ")", "\n", "logging", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "if", "self", ".", "train_params", ".", "model_path", ":", "\n", "            ", "self", ".", "load_checkpoint", "(", "self", ".", "train_params", ".", "model_path", ")", "\n", "\n", "", "", "def", "load_checkpoint", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "\"\"\"Loads model parameters (state_dict) from file_path.\n            If optimizer is provided, loads state_dict of\n            optimizer assuming it is present in checkpoint.\n\n        Args:\n            checkpoint (str): Filename which needs to be loaded\n            model (torch.nn.Module): Model for which the parameters are loaded\n            optimizer (torch.optim): Optional: resume optimizer from checkpoint\n        \"\"\"", "\n", "\n", "logging", ".", "info", "(", "\"Restoring model from [{}]\"", ".", "format", "(", "str", "(", "ckpt_path", ")", ")", ")", "\n", "\n", "if", "not", "Path", "(", "ckpt_path", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"File doesn't exist [{}]\"", ".", "format", "(", "str", "(", "ckpt_path", ")", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "str", "(", "ckpt_path", ")", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.train.validation": [[106, 160], ["model", "model", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit_transform", "torch.from_numpy", "torch.from_numpy", "lclass", "lmse", "sum", "classes.index", "torch.from_numpy", "torch.from_numpy.to", "lmse", "numpy.array", "numpy.array", "val_pred[].to", "torch.from_numpy.to", "val_pred[].type().to", "torch.from_numpy.to", "numpy.array", "[].to", "val_y.iloc[].astype", "val_pred[].type", "range", "torch.exp"], "function", ["None"], ["\n", "", "def", "get_logger", "(", "self", ",", "log_path", ":", "str", ")", ":", "\n", "        ", "\"\"\"Creates the logger to log output.\n\n        Args:\n          log_path (str): Path to save log file.\n        \"\"\"", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "\"%(asctime)s %(name)-4s %(levelname)-4s: %(message)s\"", ",", "\n", "datefmt", "=", "\"%d-%m-%y %H:%M\"", ",", "\n", "filename", "=", "log_path", ",", "\n", "filemode", "=", "\"w\"", ",", "\n", ")", "\n", "\n", "# define a Handler which writes INFO messages or higher to the sys.stderr", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "# add the handler to the root logger", "\n", "logging", ".", "getLogger", "(", "\"\"", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Starting Training\"", ")", "\n", "\n", "improved", "=", "0", "\n", "best_score", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "self", ".", "model_dir", "=", "self", ".", "base_dir", "/", "\"model\"", "\n", "self", ".", "model_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "train_params", ".", "number_of_epochs", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"Epoch: {epoch+1}/{self.train_params.number_of_epochs}\"", ")", "\n", "\n", "train_score", "=", "self", ".", "perform_train_epoch", "(", ")", "\n", "\n", "# Evaluate for one epoch on training and validation sets", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "valid_score", "=", "self", ".", "perform_eval_epoch", "(", "self", ".", "valid_dataset", ",", "\"Validation\"", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"\"", ")", "\n", "\n", "total_score", "=", "float", "(", "valid_score", ")", "\n", "if", "total_score", ">", "best_score", ":", "\n", "                ", "logging", ".", "info", "(", "\"New best score. Saving model...\"", ")", "\n", "improved", "=", "0", "\n", "best_score", "=", "total_score", "\n", "self", ".", "save_model", "(", "True", ",", "epoch", ",", "train_score", ",", "total_score", ")", "\n", "\n", "", "improved", "+=", "1", "\n", "self", ".", "save_model", "(", "False", ",", "epoch", ",", "train_score", ",", "valid_score", ")", "\n", "\n", "if", "improved", ">", "self", ".", "train_params", ".", "nepochs2stop", ":", "\n", "                ", "break", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.create": [[18, 148], ["print", "pathlib.Path", "tqdm.tqdm.tqdm", "pandas.DataFrame", "print", "pathlib.Path.is_file", "pathlib.Path.mkdir", "glob.glob.glob", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "train_X_group.to_csv", "val_X_group.to_csv", "test_X_group.to_csv", "train_y_group.to_csv", "val_y_group.to_csv", "test_y_group.to_csv", "train_age_group.to_csv", "val_age_group.to_csv", "test_age_group.to_csv", "train_country_group.to_csv", "val_country_group.to_csv", "test_country_group.to_csv", "pandas.DataFrame.to_csv", "open", "csv.reader", "enumerate", "numpy.vstack", "numpy.vstack", "numpy.vstack", "filename.split", "labels[].str.contains", "train_y.append", "train_age.append", "train_country.append", "row[].replace", "val_y.append", "val_age.append", "val_country.append", "train_X.append", "test_y.append", "test_age.append", "test_country.append", "test_filename.append", "val_X.append", "test_X.append"], "methods", ["None"], ["\n", "\n", "data", ",", "ground_truth", ",", "filenames", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "seqs_to_pad", ",", "gt", "=", "[", "]", ",", "[", "]", "\n", "num_seqs_per_sample", "=", "[", "]", "\n", "for", "i", ",", "subject_wavs", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "for", "j", ",", "audio", "in", "enumerate", "(", "subject_wavs", ")", ":", "\n", "            ", "seqs_to_pad", ".", "append", "(", "audio", ")", "\n", "num_seqs_per_sample", ".", "append", "(", "len", "(", "audio", ")", ")", "\n", "gt", ".", "append", "(", "ground_truth", "[", "i", "]", "[", "j", "]", ")", "\n", "\n", "", "", "padded_seqs", "=", "pad_sequence", "(", "seqs_to_pad", ",", "batch_first", "=", "True", ")", "\n", "gt", "=", "pad_sequence", "(", "gt", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "padded_seqs", ",", "gt", ",", "num_seqs_per_sample", ",", "list", "(", "chain", ".", "from_iterable", "(", "filenames", ")", ")", "\n", "\n", "\n", "", "def", "get_dataloader", "(", "dataset_class", ":", "str", ",", "batch_size", ":", "int", ",", "shuffle", ":", "bool", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Returns the dataloader.\n\n    Args:\n      dataset_name (str): Name of the dataset to use.\n      batch_size (int): The batch size to load.\n      shuffle (bool): Whether to shuffle the data.\n    \"\"\"", "\n", "DatasetClass", "=", "get_dataset", "(", "dataset_class", ")", "\n", "\n", "return", "DataLoader", "(", "\n", "DatasetClass", "(", "**", "kwargs", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.dataloader.Dataloader.load": [[149, 194], ["print", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.Processing.normalise": [[13, 35], ["scaler.fit_transform", "scaler.transform", "scaler.transform", "pandas.DataFrame", "high[].astype", "high[].astype", "high[].astype", "age[].astype", "age[].astype", "age[].astype", "pandas.DataFrame"], "methods", ["None"], ["\n", "def", "load_model", "(", "device", ")", ":", "\n", "    ", "\"\"\"Loads model parameters (state_dict) from file_path.\"\"\"", "\n", "\n", "print", "(", "f'Loading model parameter from {MODEL_PATH}'", ")", "\n", "\n", "model", "=", "AudioRNNModel", "(", "1600", ",", "10", ")", "\n", "\n", "if", "not", "Path", "(", "MODEL_PATH", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'No model exists in path : {MODEL_PATH}'", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "MODEL_PATH", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "return", "model", "\n", "\n", "", "def", "load_activation_statistics", "(", "name", ")", ":", "\n", "    ", "base_path", "=", "\"./fid/\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "name", ")", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "mu", "=", "dict", "[", "\"mu\"", "]", "\n", "sigma", "=", "dict", "[", "\"sigma\"", "]", "\n", "", "return", "mu", ",", "sigma", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.CCC": [[39, 46], ["numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "round", "numpy.nansum", "numpy.nansum", "len", "len"], "methods", ["None"], ["sigma", "=", "np", ".", "cov", "(", "preds", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n", "", "def", "get_activation_statistics", "(", "path", ",", "batch_size", ")", ":", "\n", "    ", "dataset_params", "=", "{", "\n", "\"files_path\"", ":", "path", ",", "\n", "\"ext\"", ":", "\"wav\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.MAE": [[47, 49], ["sklearn.metrics.mean_absolute_error"], "methods", ["None"], ["\n", "dataset", "=", "get_dataloader", "(", "batch_size", ",", "shuffle", "=", "False", ",", "**", "dataset_params", ")", "\n", "num_samples", "=", "len", "(", "dataset", ".", "dataset", ".", "files_path", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.MSE": [[50, 52], ["sklearn.metrics.mean_squared_error"], "methods", ["None"], ["\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "model", "=", "load_model", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EvalMetrics.UAR": [[53, 55], ["sklearn.metrics.recall_score"], "methods", ["None"], ["model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__init__": [[59, 74], ["None"], "methods", ["None"], ["        ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "predictions", "=", "model", "(", "batch_data", ")", "\n", "for", "sample", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "curr", "=", "n_iter", "*", "batch_size", "+", "sample", "\n", "if", "curr", ">=", "num_samples", ":", "\n", "                ", "break", "\n", "\n", "", "preds", "[", "curr", "]", "=", "predictions", "[", "sample", ",", "mask", "[", "sample", "]", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "mu", ",", "sigma", "=", "compute_activation_statistics", "(", "preds", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n", "", "def", "get_fid", "(", "name1", ",", "name2", ")", ":", "\n", "    ", "mu1", ",", "sigma1", "=", "load_activation_statistics", "(", "name1", ")", "\n", "mu2", ",", "sigma2", "=", "load_activation_statistics", "(", "name2", ")", "\n", "fid", "=", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", "\n"]], "home.repos.pwc.inspect_result.humeai_competitions.ExVo-MultiTask.utils.EarlyStopping.__call__": [[75, 87], ["utils.EarlyStopping.trace_func"], "methods", ["None"], ["return", "fid", "", "", ""]]}