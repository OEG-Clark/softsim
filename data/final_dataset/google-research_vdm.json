{"home.repos.pwc.inspect_result.google-research_vdm.None.main.main": [[38, 65], ["absl.logging.warning", "absl.logging.info", "jax.process_index", "absl.logging.set_verbosity", "absl.logging.set_verbosity", "jax.process_index", "jax.process_count", "vdm.experiment_vdm.Experiment_VDM", "os.path.join", "absl.logging.info", "vdm.experiment_vdm.Experiment_VDM.train_and_evaluate", "vdm.utils.get_workdir", "vdm.experiment_vdm.Experiment_VDM.evaluate", "Exception"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.train_and_evaluate", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_workdir", "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.evaluate"], ["def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "\n", "if", "jax", ".", "process_index", "(", ")", "==", "0", ":", "\n", "    ", "logging", ".", "set_verbosity", "(", "FLAGS", ".", "log_level", ")", "\n", "", "else", ":", "\n", "    ", "logging", ".", "set_verbosity", "(", "\"error\"", ")", "\n", "", "logging", ".", "warning", "(", "\"=== Start of main() ===\"", ")", "\n", "\n", "# Hide any GPUs from TensorFlow. Otherwise TF might reserve memory and make", "\n", "# it unavailable to JAX. (Not necessary with TPU.)", "\n", "#tf.config.experimental.set_visible_devices([], \"GPU\")", "\n", "\n", "logging", ".", "info", "(", "\"JAX process: %d / %d\"", ",", "\n", "jax", ".", "process_index", "(", ")", ",", "jax", ".", "process_count", "(", ")", ")", "\n", "#logging.info(\"JAX devices: %r\", jax.devices())", "\n", "\n", "if", "FLAGS", ".", "model", "==", "\"vdm\"", ":", "\n", "    ", "experiment", "=", "vdm", ".", "experiment_vdm", ".", "Experiment_VDM", "(", "FLAGS", ".", "config", ")", "\n", "\n", "", "if", "FLAGS", ".", "mode", "==", "\"train\"", ":", "\n", "    ", "workdir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "workdir", ",", "get_workdir", "(", ")", ")", "\n", "logging", ".", "info", "(", "\"Training at workdir: \"", "+", "FLAGS", ".", "workdir", ")", "\n", "experiment", ".", "train_and_evaluate", "(", "workdir", ")", "\n", "", "elif", "FLAGS", ".", "mode", "==", "\"eval\"", ":", "\n", "    ", "experiment", ".", "evaluate", "(", "FLAGS", ".", "workdir", ",", "FLAGS", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "\"Unknown FLAGS.mode\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment_vdm.Experiment_VDM.get_model_and_params": [[28, 38], ["vdm.model_vdm.VDMConfig", "vdm.model_vdm.VDM", "jax.zeros", "jax.zeros", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "vdm.model_vdm.VDM.init", "jax.zeros", "jax.zeros"], "methods", ["None"], ["def", "get_model_and_params", "(", "self", ",", "rng", ":", "PRNGKey", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "config", "=", "vdm", ".", "model_vdm", ".", "VDMConfig", "(", "**", "config", ".", "model", ")", "\n", "model", "=", "vdm", ".", "model_vdm", ".", "VDM", "(", "config", ")", "\n", "\n", "inputs", "=", "{", "\"images\"", ":", "jnp", ".", "zeros", "(", "(", "2", ",", "32", ",", "32", ",", "3", ")", ",", "\"uint8\"", ")", "}", "\n", "inputs", "[", "\"conditioning\"", "]", "=", "jnp", ".", "zeros", "(", "(", "2", ",", ")", ")", "\n", "rng1", ",", "rng2", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "params", "=", "model", ".", "init", "(", "{", "\"params\"", ":", "rng1", ",", "\"sample\"", ":", "rng2", "}", ",", "**", "inputs", ")", "\n", "return", "model", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment_vdm.Experiment_VDM.loss_fn": [[39, 71], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "experiment_vdm.Experiment_VDM.state.apply_fn", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.mean", "jax.mean", "jax.mean", "jax.mean", "jax.mean", "jax.mean", "numpy.prod", "numpy.log"], "methods", ["None"], ["", "def", "loss_fn", "(", "self", ",", "params", ",", "inputs", ",", "rng", ",", "is_train", ")", "->", "Tuple", "[", "float", ",", "Any", "]", ":", "\n", "    ", "rng", ",", "sample_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "rngs", "=", "{", "\"sample\"", ":", "sample_rng", "}", "\n", "if", "is_train", ":", "\n", "      ", "rng", ",", "dropout_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "rngs", "[", "\"dropout\"", "]", "=", "dropout_rng", "\n", "\n", "# sample time steps, with antithetic sampling", "\n", "", "outputs", "=", "self", ".", "state", ".", "apply_fn", "(", "\n", "variables", "=", "{", "'params'", ":", "params", "}", ",", "\n", "**", "inputs", ",", "\n", "rngs", "=", "rngs", ",", "\n", "deterministic", "=", "not", "is_train", ",", "\n", ")", "\n", "\n", "rescale_to_bpd", "=", "1.", "/", "(", "np", ".", "prod", "(", "inputs", "[", "\"images\"", "]", ".", "shape", "[", "1", ":", "]", ")", "*", "np", ".", "log", "(", "2.", ")", ")", "\n", "bpd_latent", "=", "jnp", ".", "mean", "(", "outputs", ".", "loss_klz", ")", "*", "rescale_to_bpd", "\n", "bpd_recon", "=", "jnp", ".", "mean", "(", "outputs", ".", "loss_recon", ")", "*", "rescale_to_bpd", "\n", "bpd_diff", "=", "jnp", ".", "mean", "(", "outputs", ".", "loss_diff", ")", "*", "rescale_to_bpd", "\n", "bpd", "=", "bpd_recon", "+", "bpd_latent", "+", "bpd_diff", "\n", "scalar_dict", "=", "{", "\n", "\"bpd\"", ":", "bpd", ",", "\n", "\"bpd_latent\"", ":", "bpd_latent", ",", "\n", "\"bpd_recon\"", ":", "bpd_recon", ",", "\n", "\"bpd_diff\"", ":", "bpd_diff", ",", "\n", "\"var0\"", ":", "outputs", ".", "var_0", ",", "\n", "\"var\"", ":", "outputs", ".", "var_1", ",", "\n", "}", "\n", "img_dict", "=", "{", "\"inputs\"", ":", "inputs", "[", "\"images\"", "]", "}", "\n", "metrics", "=", "{", "\"scalars\"", ":", "scalar_dict", ",", "\"images\"", ":", "img_dict", "}", "\n", "\n", "return", "bpd", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment_vdm.Experiment_VDM.sample_fn": [[72, 107], ["jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.zeros", "jax.zeros", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.lax.fori_loop", "jax.lax.fori_loop", "jax.lax.fori_loop", "jax.lax.fori_loop", "experiment_vdm.Experiment_VDM.state.apply_fn", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "experiment_vdm.Experiment_VDM.state.apply_fn"], "methods", ["None"], ["", "def", "sample_fn", "(", "self", ",", "*", ",", "dummy_inputs", ",", "rng", ",", "params", ")", ":", "\n", "    ", "rng", "=", "jax", ".", "random", ".", "fold_in", "(", "rng", ",", "jax", ".", "lax", ".", "axis_index", "(", "'batch'", ")", ")", "\n", "\n", "if", "self", ".", "model", ".", "config", ".", "sm_n_timesteps", ">", "0", ":", "\n", "      ", "T", "=", "self", ".", "model", ".", "config", ".", "sm_n_timesteps", "\n", "", "else", ":", "\n", "      ", "T", "=", "1000", "\n", "\n", "", "conditioning", "=", "jnp", ".", "zeros", "(", "(", "dummy_inputs", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "# sample z_0 from the diffusion model", "\n", "rng", ",", "sample_rng", "=", "jax", ".", "random", ".", "split", "(", "rng", ")", "\n", "z_init", "=", "jax", ".", "random", ".", "normal", "(", "sample_rng", ",", "dummy_inputs", ".", "shape", ")", "\n", "\n", "def", "body_fn", "(", "i", ",", "z_t", ")", ":", "\n", "      ", "return", "self", ".", "state", ".", "apply_fn", "(", "\n", "variables", "=", "{", "'params'", ":", "params", "}", ",", "\n", "i", "=", "i", ",", "\n", "T", "=", "T", ",", "\n", "z_t", "=", "z_t", ",", "\n", "conditioning", "=", "conditioning", ",", "\n", "rng", "=", "rng", ",", "\n", "method", "=", "self", ".", "model", ".", "sample", ",", "\n", ")", "\n", "\n", "", "z_0", "=", "jax", ".", "lax", ".", "fori_loop", "(", "\n", "lower", "=", "0", ",", "upper", "=", "T", ",", "body_fun", "=", "body_fn", ",", "init_val", "=", "z_init", ")", "\n", "\n", "samples", "=", "self", ".", "state", ".", "apply_fn", "(", "\n", "variables", "=", "{", "'params'", ":", "params", "}", ",", "\n", "z_0", "=", "z_0", ",", "\n", "method", "=", "self", ".", "model", ".", "generate_x", ",", "\n", ")", "\n", "\n", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset": [[26, 92], ["jax.random.fold_in", "jax.random.split", "jax.process_index", "dataset.create_train_dataset", "dataset.create_eval_dataset", "iter", "iter", "dataset.create_train_dataset", "dataset.create_eval_dataset", "dataset.create_train_dataset", "dataset.create_eval_dataset", "dataset.create_train_dataset", "dataset.create_eval_dataset", "Exception"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_train_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_eval_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_train_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_eval_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_train_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_eval_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_train_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_eval_dataset"], ["def", "create_dataset", "(", "config", ",", "data_rng", ")", ":", "\n", "    ", "data_rng", "=", "jax", ".", "random", ".", "fold_in", "(", "data_rng", ",", "jax", ".", "process_index", "(", ")", ")", "\n", "rng1", ",", "rng2", "=", "jax", ".", "random", ".", "split", "(", "data_rng", ")", "\n", "if", "config", ".", "data", ".", "dataset", "==", "'cifar10'", ":", "\n", "      ", "_", ",", "train_ds", "=", "create_train_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_train", ",", "\n", "config", ".", "training", ".", "substeps", ",", "\n", "rng1", ",", "\n", "_preprocess_cifar10", ")", "\n", "\n", "_", ",", "eval_ds", "=", "create_eval_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_eval", ",", "\n", "'test'", ",", "\n", "rng2", ",", "\n", "_preprocess_cifar10", ")", "\n", "\n", "", "elif", "config", ".", "data", ".", "dataset", "==", "'cifar10_aug'", ":", "\n", "      ", "_", ",", "train_ds", "=", "create_train_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_train", ",", "\n", "config", ".", "training", ".", "substeps", ",", "\n", "rng1", ",", "\n", "_preprocess_cifar10_augment", ")", "\n", "\n", "_", ",", "eval_ds", "=", "create_eval_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_eval", ",", "\n", "'test'", ",", "\n", "rng2", ",", "\n", "_preprocess_cifar10", ")", "\n", "\n", "", "elif", "config", ".", "data", ".", "dataset", "==", "'cifar10_aug_with_channel'", ":", "\n", "      ", "_", ",", "train_ds", "=", "create_train_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_train", ",", "\n", "config", ".", "training", ".", "substeps", ",", "\n", "rng1", ",", "\n", "_preprocess_cifar10_augment_with_channel_flip", ")", "\n", "\n", "_", ",", "eval_ds", "=", "create_eval_dataset", "(", "\n", "'cifar10'", ",", "\n", "config", ".", "training", ".", "batch_size_eval", ",", "\n", "'test'", ",", "\n", "rng2", ",", "\n", "_preprocess_cifar10", ")", "\n", "\n", "", "elif", "config", ".", "data", ".", "dataset", "==", "'imagenet32'", ":", "\n", "      ", "_", ",", "train_ds", "=", "create_train_dataset", "(", "\n", "'downsampled_imagenet/32x32'", ",", "\n", "config", ".", "training", ".", "batch_size_train", ",", "\n", "config", ".", "training", ".", "substeps", ",", "\n", "rng1", ",", "\n", "_preprocess_cifar10", ")", "\n", "\n", "_", ",", "eval_ds", "=", "create_eval_dataset", "(", "\n", "'downsampled_imagenet/32x32'", ",", "\n", "config", ".", "training", ".", "batch_size_eval", ",", "\n", "'validation'", ",", "\n", "rng2", ",", "\n", "_preprocess_cifar10", ")", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "\"Unrecognized config.data.dataset\"", ")", "\n", "\n", "", "return", "iter", "(", "train_ds", ")", ",", "iter", "(", "eval_ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_train_dataset": [[93, 124], ["tensorflow_datasets.builder", "tfds.builder.download_and_prepare", "clu.deterministic_data.get_read_instruction_for_host", "clu.deterministic_data.create_dataset", "ValueError", "jax.device_count", "jax.local_device_count", "jax.device_count", "jax.device_count", "dataset._preprocess_cifar10", "dataset._preprocess_cifar10_augment", "dataset._preprocess_cifar10_augment_with_channel_flip", "dataset._preprocess_cifar10"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10_augment", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10_augment_with_channel_flip", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10"], ["", "def", "create_train_dataset", "(", "\n", "task", ":", "str", ",", "\n", "batch_size", ":", "int", ",", "\n", "substeps", ":", "int", ",", "\n", "data_rng", ",", "\n", "preprocess_fn", ")", "->", "Tuple", "[", "tfds", ".", "core", ".", "DatasetInfo", ",", "tf", ".", "data", ".", "Dataset", "]", ":", "\n", "  ", "\"\"\"Create datasets for training.\"\"\"", "\n", "# Compute batch size per device from global batch size..", "\n", "if", "batch_size", "%", "jax", ".", "device_count", "(", ")", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Batch size ({batch_size}) must be divisible by \"", "\n", "f\"the number of devices ({jax.device_count()}).\"", ")", "\n", "", "per_device_batch_size", "=", "batch_size", "//", "jax", ".", "device_count", "(", ")", "\n", "\n", "dataset_builder", "=", "tfds", ".", "builder", "(", "task", ")", "\n", "dataset_builder", ".", "download_and_prepare", "(", ")", "\n", "\n", "train_split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "\n", "\"train\"", ",", "dataset_builder", ".", "info", ".", "splits", "[", "\"train\"", "]", ".", "num_examples", ")", "\n", "batch_dims", "=", "[", "jax", ".", "local_device_count", "(", ")", ",", "substeps", ",", "per_device_batch_size", "]", "\n", "\n", "train_ds", "=", "deterministic_data", ".", "create_dataset", "(", "\n", "dataset_builder", ",", "\n", "split", "=", "train_split", ",", "\n", "num_epochs", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_dims", "=", "batch_dims", ",", "\n", "preprocess_fn", "=", "preprocess_fn", ",", "\n", "prefetch_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ",", "\n", "rng", "=", "data_rng", ")", "\n", "\n", "return", "dataset_builder", ".", "info", ",", "train_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_eval_dataset": [[126, 154], ["tensorflow_datasets.builder", "clu.deterministic_data.get_read_instruction_for_host", "clu.deterministic_data.create_dataset", "ValueError", "jax.device_count", "jax.local_device_count", "jax.device_count", "jax.device_count", "dataset._preprocess_cifar10", "dataset._preprocess_cifar10", "dataset._preprocess_cifar10", "dataset._preprocess_cifar10"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10"], ["", "def", "create_eval_dataset", "(", "\n", "task", ":", "str", ",", "\n", "batch_size", ":", "int", ",", "\n", "subset", ":", "str", ",", "\n", "data_rng", ",", "\n", "preprocess_fn", ")", "->", "Tuple", "[", "tfds", ".", "core", ".", "DatasetInfo", ",", "tf", ".", "data", ".", "Dataset", "]", ":", "\n", "  ", "if", "batch_size", "%", "jax", ".", "device_count", "(", ")", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Batch size ({batch_size}) must be divisible by \"", "\n", "f\"the number of devices ({jax.device_count()}).\"", ")", "\n", "", "per_device_batch_size", "=", "batch_size", "//", "jax", ".", "device_count", "(", ")", "\n", "\n", "dataset_builder", "=", "tfds", ".", "builder", "(", "task", ")", "\n", "\n", "eval_split", "=", "deterministic_data", ".", "get_read_instruction_for_host", "(", "\n", "subset", ",", "dataset_builder", ".", "info", ".", "splits", "[", "subset", "]", ".", "num_examples", ")", "\n", "batch_dims", "=", "[", "jax", ".", "local_device_count", "(", ")", ",", "per_device_batch_size", "]", "\n", "\n", "eval_ds", "=", "deterministic_data", ".", "create_dataset", "(", "\n", "dataset_builder", ",", "\n", "split", "=", "eval_split", ",", "\n", "num_epochs", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_dims", "=", "batch_dims", ",", "\n", "preprocess_fn", "=", "preprocess_fn", ",", "\n", "prefetch_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ",", "\n", "rng", "=", "data_rng", ")", "\n", "\n", "return", "dataset_builder", ".", "info", ",", "eval_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10": [[156, 160], ["tensorflow.zeros"], "function", ["None"], ["", "def", "_preprocess_cifar10", "(", "features", ")", ":", "\n", "  ", "\"\"\"Helper to extract images from dict.\"\"\"", "\n", "conditioning", "=", "tf", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "return", "{", "\"images\"", ":", "features", "[", "\"image\"", "]", ",", "\"conditioning\"", ":", "conditioning", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10_augment": [[162, 190], ["tensorflow.cast", "tensorflow.image.flip_left_right", "tensorflow.where", "tensorflow.random.uniform", "tensorflow.cast", "tensorflow.image.rot90", "tensorflow.where", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.math.ceil", "tensorflow.random.uniform", "tensorflow.transpose", "tensorflow.random.shuffle", "tensorflow.transpose", "tensorflow.where", "tensorflow.random.uniform"], "function", ["None"], ["", "def", "_preprocess_cifar10_augment", "(", "features", ")", ":", "\n", "  ", "img", "=", "features", "[", "'image'", "]", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "'float32'", ")", "\n", "\n", "# random left/right flip", "\n", "_img", "=", "tf", ".", "image", ".", "flip_left_right", "(", "img", ")", "\n", "aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "aug", ",", "_img", ",", "img", ")", "\n", "\n", "# random 90 degree rotations", "\n", "u", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", "\n", "k", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "ceil", "(", "3.", "*", "u", ")", ",", "tf", ".", "int32", ")", "\n", "_img", "=", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "k", ")", "\n", "_aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "_aug", ",", "_img", ",", "img", ")", "\n", "aug", "=", "aug", "|", "_aug", "\n", "\n", "if", "False", ":", "\n", "    ", "_img", "=", "tf", ".", "transpose", "(", "img", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "_img", "=", "tf", ".", "random", ".", "shuffle", "(", "_img", ")", "\n", "_img", "=", "tf", ".", "transpose", "(", "_img", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "_aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "_aug", ",", "_img", ",", "img", ")", "\n", "aug", "=", "aug", "|", "_aug", "\n", "\n", "", "aug", "=", "tf", ".", "cast", "(", "aug", ",", "'uint8'", ")", "\n", "\n", "return", "{", "'images'", ":", "img", ",", "'conditioning'", ":", "aug", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.dataset._preprocess_cifar10_augment_with_channel_flip": [[192, 220], ["tensorflow.cast", "tensorflow.image.flip_left_right", "tensorflow.where", "tensorflow.random.uniform", "tensorflow.cast", "tensorflow.image.rot90", "tensorflow.where", "tensorflow.transpose", "tensorflow.random.shuffle", "tensorflow.transpose", "tensorflow.where", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.math.ceil", "tensorflow.random.uniform", "tensorflow.random.uniform"], "function", ["None"], ["", "def", "_preprocess_cifar10_augment_with_channel_flip", "(", "features", ")", ":", "\n", "  ", "img", "=", "features", "[", "'image'", "]", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "'float32'", ")", "\n", "\n", "# random left/right flip", "\n", "_img", "=", "tf", ".", "image", ".", "flip_left_right", "(", "img", ")", "\n", "aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "aug", ",", "_img", ",", "img", ")", "\n", "\n", "# random 90 degree rotations", "\n", "u", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", "\n", "k", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "ceil", "(", "3.", "*", "u", ")", ",", "tf", ".", "int32", ")", "\n", "_img", "=", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "k", ")", "\n", "_aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "_aug", ",", "_img", ",", "img", ")", "\n", "aug", "=", "aug", "|", "_aug", "\n", "\n", "# random color channel flips", "\n", "_img", "=", "tf", ".", "transpose", "(", "img", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "_img", "=", "tf", ".", "random", ".", "shuffle", "(", "_img", ")", "\n", "_img", "=", "tf", ".", "transpose", "(", "_img", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "_aug", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ")", ">", "0.5", "\n", "img", "=", "tf", ".", "where", "(", "_aug", ",", "_img", ",", "img", ")", "\n", "aug", "=", "aug", "|", "_aug", "\n", "\n", "aug", "=", "tf", ".", "cast", "(", "aug", ",", "'uint8'", ")", "\n", "\n", "return", "{", "'images'", ":", "img", ",", "'conditioning'", ":", "aug", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.__init__": [[46, 101], ["vdm.with_verbosity", "vdm.with_verbosity", "vdm.with_verbosity", "absl.logging.warning", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "vdm.create_dataset", "vdm.create_dataset", "vdm.create_dataset", "absl.logging.warning", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "experiment.Experiment.get_model_and_params", "clu.parameter_overview.log_parameter_overview", "absl.logging.info", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "vdm.train_state.TrainState.create", "experiment.Experiment.get_lr_schedule", "experiment.Experiment.config.get", "absl.logging.info", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "functools.partial", "functools.partial", "jax.pmap", "jax.pmap", "jax.pmap", "jax.pmap", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "functools.partial", "jax.pmap", "jax.pmap", "jax.pmap", "jax.pmap", "functools.partial", "vdm.dist", "vdm.dist", "vdm.dist", "absl.logging.info", "clu.checkpoint.Checkpoint", "clu.checkpoint.Checkpoint.get_latest_checkpoint_to_restore_from", "clu.checkpoint.Checkpoint.restore_dict", "experiment.restore_partial", "jax.random.PRNGKey", "jax.random.PRNGKey", "jax.random.PRNGKey", "jax.random.PRNGKey", "next"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.with_verbosity", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.with_verbosity", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.with_verbosity", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.dataset.create_dataset", "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.get_model_and_params", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create", "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.get_lr_schedule", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.dist", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.dist", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.dist", "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.restore_partial"], ["def", "__init__", "(", "self", ",", "config", ":", "ml_collections", ".", "ConfigDict", ")", ":", "\n", "    ", "self", ".", "config", "=", "config", "\n", "\n", "# Set seed before initializing model.", "\n", "seed", "=", "config", ".", "training", ".", "seed", "\n", "self", ".", "rng", "=", "utils", ".", "with_verbosity", "(", "\"ERROR\"", ",", "lambda", ":", "jax", ".", "random", ".", "PRNGKey", "(", "seed", ")", ")", "\n", "\n", "# initialize dataset", "\n", "logging", ".", "warning", "(", "'=== Initializing dataset ==='", ")", "\n", "self", ".", "rng", ",", "data_rng", "=", "jax", ".", "random", ".", "split", "(", "self", ".", "rng", ")", "\n", "self", ".", "train_iter", ",", "self", ".", "eval_iter", "=", "dataset", ".", "create_dataset", "(", "config", ",", "data_rng", ")", "\n", "\n", "# initialize model", "\n", "logging", ".", "warning", "(", "'=== Initializing model ==='", ")", "\n", "self", ".", "rng", ",", "model_rng", "=", "jax", ".", "random", ".", "split", "(", "self", ".", "rng", ")", "\n", "self", ".", "model", ",", "params", "=", "self", ".", "get_model_and_params", "(", "model_rng", ")", "\n", "parameter_overview", ".", "log_parameter_overview", "(", "params", ")", "\n", "\n", "# initialize train state", "\n", "logging", ".", "info", "(", "'=== Initializing train state ==='", ")", "\n", "self", ".", "state", "=", "vdm", ".", "train_state", ".", "TrainState", ".", "create", "(", "\n", "apply_fn", "=", "self", ".", "model", ".", "apply", ",", "\n", "variables", "=", "params", ",", "\n", "optax_optimizer", "=", "self", ".", "get_optimizer", ")", "\n", "self", ".", "lr_schedule", "=", "self", ".", "get_lr_schedule", "(", ")", "\n", "\n", "# Restore from checkpoint", "\n", "ckpt_restore_dir", "=", "self", ".", "config", ".", "get", "(", "'ckpt_restore_dir'", ",", "'None'", ")", "\n", "if", "ckpt_restore_dir", "!=", "'None'", ":", "\n", "      ", "ckpt_restore", "=", "checkpoint", ".", "Checkpoint", "(", "ckpt_restore_dir", ")", "\n", "checkpoint_to_restore", "=", "ckpt_restore", ".", "get_latest_checkpoint_to_restore_from", "(", ")", "\n", "assert", "checkpoint_to_restore", "\n", "state_restore_dict", "=", "ckpt_restore", ".", "restore_dict", "(", "checkpoint_to_restore", ")", "\n", "self", ".", "state", "=", "restore_partial", "(", "self", ".", "state", ",", "state_restore_dict", ")", "\n", "del", "state_restore_dict", ",", "ckpt_restore", ",", "checkpoint_to_restore", "\n", "\n", "# initialize train/eval step", "\n", "", "logging", ".", "info", "(", "'=== Initializing train/eval step ==='", ")", "\n", "self", ".", "rng", ",", "train_rng", "=", "jax", ".", "random", ".", "split", "(", "self", ".", "rng", ")", "\n", "self", ".", "p_train_step", "=", "functools", ".", "partial", "(", "self", ".", "train_step", ",", "train_rng", ")", "\n", "self", ".", "p_train_step", "=", "functools", ".", "partial", "(", "jax", ".", "lax", ".", "scan", ",", "self", ".", "p_train_step", ")", "\n", "self", ".", "p_train_step", "=", "jax", ".", "pmap", "(", "self", ".", "p_train_step", ",", "\"batch\"", ")", "\n", "\n", "self", ".", "rng", ",", "eval_rng", ",", "sample_rng", "=", "jax", ".", "random", ".", "split", "(", "self", ".", "rng", ",", "3", ")", "\n", "self", ".", "p_eval_step", "=", "functools", ".", "partial", "(", "self", ".", "eval_step", ",", "eval_rng", ")", "\n", "self", ".", "p_eval_step", "=", "jax", ".", "pmap", "(", "self", ".", "p_eval_step", ",", "\"batch\"", ")", "\n", "self", ".", "p_sample", "=", "functools", ".", "partial", "(", "\n", "self", ".", "sample_fn", ",", "\n", "dummy_inputs", "=", "next", "(", "self", ".", "eval_iter", ")", "[", "\"images\"", "]", "[", "0", "]", ",", "\n", "rng", "=", "sample_rng", ",", "\n", ")", "\n", "self", ".", "p_sample", "=", "utils", ".", "dist", "(", "\n", "self", ".", "p_sample", ",", "accumulate", "=", "'concat'", ",", "axis_name", "=", "'batch'", ")", "\n", "\n", "logging", ".", "info", "(", "'=== Done with Experiment.__init__ ==='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.get_lr_schedule": [[102, 126], ["optax.linear_schedule", "optax.linear_schedule", "optax.join_schedules"], "methods", ["None"], ["", "def", "get_lr_schedule", "(", "self", ")", ":", "\n", "    ", "learning_rate", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "config_train", "=", "self", ".", "config", ".", "training", "\n", "# Create learning rate schedule", "\n", "warmup_fn", "=", "optax", ".", "linear_schedule", "(", "\n", "init_value", "=", "0.0", ",", "\n", "end_value", "=", "learning_rate", ",", "\n", "transition_steps", "=", "config_train", ".", "num_steps_lr_warmup", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "optimizer", ".", "lr_decay", ":", "\n", "      ", "decay_fn", "=", "optax", ".", "linear_schedule", "(", "\n", "init_value", "=", "learning_rate", ",", "\n", "end_value", "=", "0", ",", "\n", "transition_steps", "=", "config_train", ".", "num_steps_train", "-", "config_train", ".", "num_steps_lr_warmup", ",", "\n", ")", "\n", "schedule_fn", "=", "optax", ".", "join_schedules", "(", "\n", "schedules", "=", "[", "warmup_fn", ",", "decay_fn", "]", ",", "boundaries", "=", "[", "\n", "config_train", ".", "num_steps_lr_warmup", "]", "\n", ")", "\n", "", "else", ":", "\n", "      ", "schedule_fn", "=", "warmup_fn", "\n", "\n", "", "return", "schedule_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.get_optimizer": [[127, 153], ["flax.traverse_util.flatten_dict", "flax.traverse_util.flatten_dict", "flax.traverse_util.flatten_dict", "flax.traverse_util.flatten_dict", "flax.core.frozen_dict.FrozenDict", "flax.core.frozen_dict.FrozenDict", "optax.adamw", "hasattr", "Exception", "flax.core.frozen_dict.unfreeze", "flax.core.frozen_dict.unfreeze", "flax.traverse_util.unflatten_dict", "flax.traverse_util.unflatten_dict", "flax.traverse_util.unflatten_dict", "flax.traverse_util.unflatten_dict", "optax.clip_by_global_norm", "optax.chain"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.clip_by_global_norm"], ["", "def", "get_optimizer", "(", "self", ",", "lr", ":", "float", ")", "->", "base", ".", "GradientTransformation", ":", "\n", "    ", "\"\"\"Get an optax optimizer. Can be overided. \"\"\"", "\n", "config", "=", "self", ".", "config", ".", "optimizer", "\n", "\n", "def", "decay_mask_fn", "(", "params", ")", ":", "\n", "      ", "flat_params", "=", "flax", ".", "traverse_util", ".", "flatten_dict", "(", "unfreeze", "(", "params", ")", ")", "\n", "flat_mask", "=", "{", "\n", "path", ":", "(", "path", "[", "-", "1", "]", "!=", "\"bias\"", "and", "path", "[", "-", "2", ":", "]", "\n", "not", "in", "[", "(", "\"layer_norm\"", ",", "\"scale\"", ")", ",", "(", "\"final_layer_norm\"", ",", "\"scale\"", ")", "]", ")", "\n", "for", "path", "in", "flat_params", "\n", "}", "\n", "return", "FrozenDict", "(", "flax", ".", "traverse_util", ".", "unflatten_dict", "(", "flat_mask", ")", ")", "\n", "\n", "", "if", "config", ".", "name", "==", "\"adamw\"", ":", "\n", "      ", "optimizer", "=", "optax", ".", "adamw", "(", "\n", "learning_rate", "=", "lr", ",", "\n", "mask", "=", "decay_mask_fn", ",", "\n", "**", "config", ".", "args", ",", "\n", ")", "\n", "if", "hasattr", "(", "config", ",", "\"gradient_clip_norm\"", ")", ":", "\n", "        ", "clip", "=", "optax", ".", "clip_by_global_norm", "(", "config", ".", "gradient_clip_norm", ")", "\n", "optimizer", "=", "optax", ".", "chain", "(", "clip", ",", "optimizer", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "'Unknow optimizer.'", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.get_model_and_params": [[154, 158], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_model_and_params", "(", "self", ",", "rng", ":", "PRNGKey", ")", ":", "\n", "    ", "\"\"\"Return the model and initialized parameters.\"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.sample_fn": [[159, 163], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample_fn", "(", "self", ",", "*", ",", "dummy_inputs", ",", "rng", ",", "params", ")", "->", "chex", ".", "Array", ":", "\n", "    ", "\"\"\"Generate a batch of samples in [0, 255]. \"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.loss_fn": [[164, 168], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "loss_fn", "(", "self", ",", "params", ",", "batch", ",", "rng", ",", "is_train", ")", "->", "Tuple", "[", "float", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Loss function and metrics.\"\"\"", "\n", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.train_and_evaluate": [[169, 269], ["absl.logging.warning", "absl.logging.info", "absl.logging.info", "os.path.join", "clu.checkpoint.MultihostCheckpoint", "clu.checkpoint.MultihostCheckpoint.get_latest_checkpoint_to_restore_from", "int", "flax.replicate", "flax.replicate", "vdm.create_custom_writer", "vdm.create_custom_writer", "vdm.create_custom_writer", "clu.periodic_actions.ReportProgress", "clu.checkpoint.MultihostCheckpoint.restore_or_initialize", "jax.process_index", "jax.process_index", "jax.process_index", "jax.process_index", "vdm.create_custom_writer.write_hparams", "jax.process_index", "jax.process_index", "jax.process_index", "jax.process_index", "clu.metric_writers.ensure_flushes", "absl.logging.info", "dict", "absl.logging.log_first_n", "int", "clu.periodic_actions.Profile", "jax.profiler.StepTraceAnnotation", "jax.profiler.StepTraceAnnotation", "jax.profiler.StepTraceAnnotation", "jax.profiler.StepTraceAnnotation", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "experiment.Experiment.p_train_step", "h", "absl.logging.debug", "flax.unreplicate", "flax.unreplicate", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "vdm.create_custom_writer.write_scalars", "absl.logging.debug", "next", "float", "clu.periodic_actions.ReportProgress.timed", "range", "vdm.get_metrics", "vdm.get_metrics", "vdm.get_metrics", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "vdm.create_custom_writer.write_scalars", "flax.unreplicate", "flax.unreplicate", "experiment.Experiment.p_sample", "experiment.Experiment.astype", "vdm.create_custom_writer.write_images", "clu.periodic_actions.ReportProgress.timed", "clu.checkpoint.MultihostCheckpoint.save", "x.mean", "experiment.Experiment.eval_iter.next", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "experiment.Experiment.p_eval_step", "jax.tree_map.append", "jax.tree_map.append", "vdm.generate_image_grids", "vdm.generate_image_grids", "vdm.generate_image_grids", "flax.unreplicate", "flax.unreplicate", "flax.replicate", "flax.replicate"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.create_custom_writer", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.create_custom_writer", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.create_custom_writer", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_hparams", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_scalars", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_scalars", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_images", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids"], ["", "def", "train_and_evaluate", "(", "self", ",", "workdir", ":", "str", ")", ":", "\n", "    ", "logging", ".", "warning", "(", "'=== Experiment.train_and_evaluate() ==='", ")", "\n", "logging", ".", "info", "(", "'Workdir: '", "+", "workdir", ")", "\n", "\n", "#if jax.process_index() == 0:", "\n", "#  if not tf.io.gfile.exists(workdir):", "\n", "#    tf.io.gfile.mkdir(workdir)", "\n", "\n", "config", "=", "self", ".", "config", ".", "training", "\n", "logging", ".", "info", "(", "'num_steps_train=%d'", ",", "config", ".", "num_steps_train", ")", "\n", "\n", "# Get train state", "\n", "state", "=", "self", ".", "state", "\n", "\n", "# Set up checkpointing of the model and the input pipeline.", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "workdir", ",", "'checkpoints'", ")", "\n", "ckpt", "=", "checkpoint", ".", "MultihostCheckpoint", "(", "checkpoint_dir", ",", "max_to_keep", "=", "5", ")", "\n", "checkpoint_to_restore", "=", "ckpt", ".", "get_latest_checkpoint_to_restore_from", "(", ")", "\n", "if", "checkpoint_to_restore", ":", "\n", "      ", "state", "=", "ckpt", ".", "restore_or_initialize", "(", "state", ",", "checkpoint_to_restore", ")", "\n", "", "initial_step", "=", "int", "(", "state", ".", "step", ")", "\n", "\n", "# Distribute training.", "\n", "state", "=", "flax_utils", ".", "replicate", "(", "state", ")", "\n", "\n", "# Create logger/writer", "\n", "writer", "=", "utils", ".", "create_custom_writer", "(", "workdir", ",", "jax", ".", "process_index", "(", ")", ")", "\n", "if", "initial_step", "==", "0", ":", "\n", "      ", "writer", ".", "write_hparams", "(", "dict", "(", "self", ".", "config", ")", ")", "\n", "\n", "", "hooks", "=", "[", "]", "\n", "report_progress", "=", "periodic_actions", ".", "ReportProgress", "(", "\n", "num_train_steps", "=", "config", ".", "num_steps_train", ",", "writer", "=", "writer", ")", "\n", "if", "jax", ".", "process_index", "(", ")", "==", "0", ":", "\n", "      ", "hooks", "+=", "[", "report_progress", "]", "\n", "if", "config", ".", "profile", ":", "\n", "        ", "hooks", "+=", "[", "periodic_actions", ".", "Profile", "(", "num_profile_steps", "=", "5", ",", "\n", "logdir", "=", "workdir", ")", "]", "\n", "\n", "", "", "step", "=", "initial_step", "\n", "substeps", "=", "config", ".", "substeps", "\n", "\n", "with", "metric_writers", ".", "ensure_flushes", "(", "writer", ")", ":", "\n", "      ", "logging", ".", "info", "(", "'=== Start of training ==='", ")", "\n", "# the step count starts from 1 to num_steps_train", "\n", "while", "step", "<", "config", ".", "num_steps_train", ":", "\n", "        ", "is_last_step", "=", "step", "+", "substeps", ">=", "config", ".", "num_steps_train", "\n", "# One training step", "\n", "with", "jax", ".", "profiler", ".", "StepTraceAnnotation", "(", "'train'", ",", "step_num", "=", "step", ")", ":", "\n", "          ", "batch", "=", "jax", ".", "tree_map", "(", "jnp", ".", "asarray", ",", "next", "(", "self", ".", "train_iter", ")", ")", "\n", "state", ",", "_train_metrics", "=", "self", ".", "p_train_step", "(", "state", ",", "batch", ")", "\n", "\n", "# Quick indication that training is happening.", "\n", "", "logging", ".", "log_first_n", "(", "\n", "logging", ".", "WARNING", ",", "'Finished training step %d.'", ",", "3", ",", "step", ")", "\n", "for", "h", "in", "hooks", ":", "\n", "          ", "h", "(", "step", ")", "\n", "\n", "", "new_step", "=", "int", "(", "state", ".", "step", "[", "0", "]", ")", "\n", "assert", "new_step", "==", "step", "+", "substeps", "\n", "step", "=", "new_step", "\n", "\n", "if", "step", "%", "config", ".", "steps_per_logging", "==", "0", "or", "is_last_step", ":", "\n", "          ", "logging", ".", "debug", "(", "'=== Writing scalars ==='", ")", "\n", "metrics", "=", "flax_utils", ".", "unreplicate", "(", "_train_metrics", "[", "'scalars'", "]", ")", "\n", "\n", "def", "avg_over_substeps", "(", "x", ")", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "0", "]", "==", "substeps", "\n", "return", "float", "(", "x", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n", "", "metrics", "=", "jax", ".", "tree_map", "(", "avg_over_substeps", ",", "metrics", ")", "\n", "writer", ".", "write_scalars", "(", "step", ",", "metrics", ")", "\n", "\n", "", "if", "step", "%", "config", ".", "steps_per_eval", "==", "0", "or", "is_last_step", "or", "step", "==", "1000", ":", "\n", "          ", "logging", ".", "debug", "(", "'=== Running eval ==='", ")", "\n", "with", "report_progress", ".", "timed", "(", "'eval'", ")", ":", "\n", "            ", "eval_metrics", "=", "[", "]", "\n", "for", "eval_step", "in", "range", "(", "config", ".", "num_steps_eval", ")", ":", "\n", "              ", "batch", "=", "self", ".", "eval_iter", ".", "next", "(", ")", "\n", "batch", "=", "jax", ".", "tree_map", "(", "jnp", ".", "asarray", ",", "batch", ")", "\n", "metrics", "=", "self", ".", "p_eval_step", "(", "\n", "state", ".", "ema_params", ",", "batch", ",", "flax_utils", ".", "replicate", "(", "eval_step", ")", ")", "\n", "eval_metrics", ".", "append", "(", "metrics", "[", "'scalars'", "]", ")", "\n", "\n", "# average over eval metrics", "\n", "", "eval_metrics", "=", "utils", ".", "get_metrics", "(", "eval_metrics", ")", "\n", "eval_metrics", "=", "jax", ".", "tree_map", "(", "jnp", ".", "mean", ",", "eval_metrics", ")", "\n", "writer", ".", "write_scalars", "(", "step", ",", "eval_metrics", ")", "\n", "\n", "# print out a batch of images", "\n", "metrics", "=", "flax_utils", ".", "unreplicate", "(", "metrics", ")", "\n", "images", "=", "metrics", "[", "'images'", "]", "\n", "samples", "=", "self", ".", "p_sample", "(", "params", "=", "state", ".", "ema_params", ")", "\n", "samples", "=", "utils", ".", "generate_image_grids", "(", "samples", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "images", "[", "'samples'", "]", "=", "samples", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "writer", ".", "write_images", "(", "step", ",", "images", ")", "\n", "\n", "", "", "if", "step", "%", "config", ".", "steps_per_save", "==", "0", "or", "is_last_step", ":", "\n", "          ", "with", "report_progress", ".", "timed", "(", "'checkpoint'", ")", ":", "\n", "            ", "ckpt", ".", "save", "(", "flax_utils", ".", "unreplicate", "(", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.evaluate": [[270, 307], ["absl.logging.info", "clu.checkpoint.Checkpoint", "clu.checkpoint.Checkpoint.restore_dict", "flax.core.FrozenDict", "flax.core.FrozenDict", "flax.core.FrozenDict", "flax.core.FrozenDict", "int", "flax.replicate", "flax.replicate", "os.path.join", "tensorflow.io.gfile.makedirs", "clu.metric_writers.create_default_writer", "range", "vdm.get_metrics", "vdm.get_metrics", "vdm.get_metrics", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "clu.metric_writers.create_default_writer.write_scalars", "experiment.Experiment.p_sample", "clu.metric_writers.create_default_writer.write_images", "experiment.Experiment.eval_iter.next", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "experiment.Experiment.p_eval_step", "jax.tree_map.append", "jax.tree_map.append", "vdm.generate_image_grids", "vdm.generate_image_grids", "vdm.generate_image_grids", "experiment.Experiment.astype", "flax.replicate", "flax.replicate", "jax.process_index", "jax.process_index", "jax.process_index", "jax.process_index"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_scalars", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_images", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids"], ["", "", "", "", "", "def", "evaluate", "(", "self", ",", "logdir", ",", "checkpoint_dir", ")", ":", "\n", "    ", "\"\"\"Perform one evaluation.\"\"\"", "\n", "logging", ".", "info", "(", "'=== Experiment.evaluate() ==='", ")", "\n", "\n", "ckpt", "=", "checkpoint", ".", "Checkpoint", "(", "checkpoint_dir", ")", "\n", "state_dict", "=", "ckpt", ".", "restore_dict", "(", ")", "\n", "params", "=", "flax", ".", "core", ".", "FrozenDict", "(", "state_dict", "[", "'ema_params'", "]", ")", "\n", "step", "=", "int", "(", "state_dict", "[", "'step'", "]", ")", "\n", "\n", "# Distribute training.", "\n", "params", "=", "flax_utils", ".", "replicate", "(", "params", ")", "\n", "\n", "eval_logdir", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'eval'", ")", "\n", "tf", ".", "io", ".", "gfile", ".", "makedirs", "(", "eval_logdir", ")", "\n", "writer", "=", "metric_writers", ".", "create_default_writer", "(", "\n", "eval_logdir", ",", "just_logging", "=", "jax", ".", "process_index", "(", ")", ">", "0", ")", "\n", "\n", "eval_metrics", "=", "[", "]", "\n", "\n", "for", "eval_step", "in", "range", "(", "self", ".", "config", ".", "training", ".", "num_steps_eval", ")", ":", "\n", "      ", "batch", "=", "self", ".", "eval_iter", ".", "next", "(", ")", "\n", "batch", "=", "jax", ".", "tree_map", "(", "jnp", ".", "asarray", ",", "batch", ")", "\n", "metrics", "=", "self", ".", "p_eval_step", "(", "\n", "params", ",", "batch", ",", "flax_utils", ".", "replicate", "(", "eval_step", ")", ")", "\n", "eval_metrics", ".", "append", "(", "metrics", "[", "'scalars'", "]", ")", "\n", "\n", "# average over eval metrics", "\n", "", "eval_metrics", "=", "utils", ".", "get_metrics", "(", "eval_metrics", ")", "\n", "eval_metrics", "=", "jax", ".", "tree_map", "(", "jnp", ".", "mean", ",", "eval_metrics", ")", "\n", "\n", "writer", ".", "write_scalars", "(", "step", ",", "eval_metrics", ")", "\n", "\n", "# sample a batch of images", "\n", "samples", "=", "self", ".", "p_sample", "(", "params", "=", "params", ")", "\n", "samples", "=", "utils", ".", "generate_image_grids", "(", "samples", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "samples", "=", "{", "'samples'", ":", "samples", ".", "astype", "(", "np", ".", "uint8", ")", "}", "\n", "writer", ".", "write_images", "(", "step", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.train_step": [[308, 330], ["jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.value_and_grad", "jax.value_and_grad", "jax.value_and_grad", "jax.value_and_grad", "jax.value_and_grad.", "jax.value_and_grad.", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "experiment.Experiment.lr_schedule", "state.apply_gradients", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "metrics[].items", "vdm.generate_image_grids", "vdm.generate_image_grids", "vdm.generate_image_grids"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.apply_gradients", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids"], ["", "def", "train_step", "(", "self", ",", "base_rng", ",", "state", ",", "batch", ")", ":", "\n", "    ", "rng", "=", "jax", ".", "random", ".", "fold_in", "(", "base_rng", ",", "jax", ".", "lax", ".", "axis_index", "(", "'batch'", ")", ")", "\n", "rng", "=", "jax", ".", "random", ".", "fold_in", "(", "rng", ",", "state", ".", "step", ")", "\n", "\n", "grad_fn", "=", "jax", ".", "value_and_grad", "(", "self", ".", "loss_fn", ",", "has_aux", "=", "True", ")", "\n", "(", "_", ",", "metrics", ")", ",", "grads", "=", "grad_fn", "(", "state", ".", "params", ",", "batch", ",", "rng", "=", "rng", ",", "is_train", "=", "True", ")", "\n", "grads", "=", "jax", ".", "lax", ".", "pmean", "(", "grads", ",", "\"batch\"", ")", "\n", "\n", "learning_rate", "=", "self", ".", "lr_schedule", "(", "state", ".", "step", ")", "\n", "new_state", "=", "state", ".", "apply_gradients", "(", "\n", "grads", "=", "grads", ",", "lr", "=", "learning_rate", ",", "ema_rate", "=", "self", ".", "config", ".", "optimizer", ".", "ema_rate", ")", "\n", "\n", "metrics", "[", "'scalars'", "]", "=", "jax", ".", "tree_map", "(", "\n", "lambda", "x", ":", "jax", ".", "lax", ".", "pmean", "(", "x", ",", "axis_name", "=", "\"batch\"", ")", ",", "metrics", "[", "'scalars'", "]", ")", "\n", "metrics", "[", "'scalars'", "]", "=", "{", "\"train_\"", "+", "\n", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "metrics", "[", "'scalars'", "]", ".", "items", "(", ")", "}", "\n", "\n", "metrics", "[", "'images'", "]", "=", "jax", ".", "tree_map", "(", "\n", "lambda", "x", ":", "utils", ".", "generate_image_grids", "(", "x", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "metrics", "[", "'images'", "]", ")", "\n", "\n", "return", "new_state", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.eval_step": [[331, 348], ["jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "jax.random.fold_in", "experiment.Experiment.loss_fn", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "jax.lax.pmean", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "jax.lax.axis_index", "metrics[].items", "vdm.generate_image_grids", "vdm.generate_image_grids", "vdm.generate_image_grids"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.experiment.Experiment.loss_fn", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids", "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids"], ["", "def", "eval_step", "(", "self", ",", "base_rng", ",", "params", ",", "batch", ",", "eval_step", "=", "0", ")", ":", "\n", "    ", "rng", "=", "jax", ".", "random", ".", "fold_in", "(", "base_rng", ",", "jax", ".", "lax", ".", "axis_index", "(", "'batch'", ")", ")", "\n", "rng", "=", "jax", ".", "random", ".", "fold_in", "(", "rng", ",", "eval_step", ")", "\n", "\n", "_", ",", "metrics", "=", "self", ".", "loss_fn", "(", "params", ",", "batch", ",", "rng", "=", "rng", ",", "is_train", "=", "False", ")", "\n", "\n", "# summarize metrics", "\n", "metrics", "[", "'scalars'", "]", "=", "jax", ".", "lax", ".", "pmean", "(", "\n", "metrics", "[", "'scalars'", "]", ",", "axis_name", "=", "\"batch\"", ")", "\n", "metrics", "[", "'scalars'", "]", "=", "{", "\n", "\"eval_\"", "+", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "metrics", "[", "'scalars'", "]", ".", "items", "(", ")", "}", "\n", "\n", "metrics", "[", "'images'", "]", "=", "jax", ".", "tree_map", "(", "\n", "lambda", "x", ":", "utils", ".", "generate_image_grids", "(", "x", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "metrics", "[", "'images'", "]", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.copy_dict": [[350, 359], ["dict1.keys", "isinstance", "isinstance", "experiment.copy_dict"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.experiment.copy_dict"], ["", "", "def", "copy_dict", "(", "dict1", ",", "dict2", ")", ":", "\n", "  ", "if", "not", "isinstance", "(", "dict1", ",", "dict", ")", ":", "\n", "    ", "assert", "not", "isinstance", "(", "dict2", ",", "dict", ")", "\n", "return", "dict2", "\n", "", "for", "key", "in", "dict1", ".", "keys", "(", ")", ":", "\n", "    ", "if", "key", "in", "dict2", ":", "\n", "      ", "dict1", "[", "key", "]", "=", "copy_dict", "(", "dict1", "[", "key", "]", ",", "dict2", "[", "key", "]", ")", "\n", "\n", "", "", "return", "dict1", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.experiment.restore_partial": [[361, 367], ["flax.serialization.to_state_dict", "flax.serialization.to_state_dict", "experiment.copy_dict", "flax.serialization.from_state_dict", "flax.serialization.from_state_dict"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.experiment.copy_dict"], ["", "def", "restore_partial", "(", "state", ",", "state_restore_dict", ")", ":", "\n", "  ", "state_dict", "=", "flax", ".", "serialization", ".", "to_state_dict", "(", "state", ")", "\n", "state_dict", "=", "copy_dict", "(", "state_dict", ",", "state_restore_dict", ")", "\n", "state", "=", "flax", ".", "serialization", ".", "from_state_dict", "(", "state", ",", "state_dict", ")", "\n", "\n", "return", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.apply_gradients": [[69, 100], ["train_state.TrainState.tx_fn", "train_state.TrainState.update", "optax.apply_updates", "jax.tree_multimap", "train_state.TrainState.replace"], "methods", ["None"], ["def", "apply_gradients", "(", "self", ",", "*", ",", "grads", ",", "lr", ",", "ema_rate", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Updates `step`, `params`, `opt_state` and `**kwargs` in return value.\n\n    Note that internally this function calls `.tx.update()` followed by a call\n    to `optax.apply_updates()` to update `params` and `opt_state`.\n\n    Args:\n      grads: Gradients that have the same pytree structure as `.params`.\n      **kwargs: Additional dataclass attributes that should be `.replace()`-ed.\n\n    Returns:\n      An updated instance of `self` with `step` incremented by one, `params`\n      and `opt_state` updated by applying `grads`, and additional attributes\n      replaced as specified by `kwargs`.\n    \"\"\"", "\n", "tx", "=", "self", ".", "tx_fn", "(", "lr", ")", "\n", "updates", ",", "new_opt_state", "=", "tx", ".", "update", "(", "\n", "grads", ",", "self", ".", "opt_state", ",", "self", ".", "params", ")", "\n", "new_params", "=", "optax", ".", "apply_updates", "(", "self", ".", "params", ",", "updates", ")", "\n", "new_ema_params", "=", "jax", ".", "tree_multimap", "(", "\n", "lambda", "x", ",", "y", ":", "x", "+", "(", "1.", "-", "ema_rate", ")", "*", "(", "y", "-", "x", ")", ",", "\n", "self", ".", "ema_params", ",", "\n", "new_params", ",", "\n", ")", "\n", "\n", "return", "self", ".", "replace", "(", "\n", "step", "=", "self", ".", "step", "+", "1", ",", "\n", "params", "=", "new_params", ",", "\n", "ema_params", "=", "new_ema_params", ",", "\n", "opt_state", "=", "new_opt_state", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.train_state.TrainState.create": [[102, 117], ["optax_optimizer().init", "copy.deepcopy", "_class", "optax_optimizer"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create", "(", "_class", ",", "*", ",", "apply_fn", ",", "variables", ",", "optax_optimizer", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a new instance with `step=0` and initialized `opt_state`.\"\"\"", "\n", "# _class is the TrainState class", "\n", "params", "=", "variables", "[", "\"params\"", "]", "\n", "opt_state", "=", "optax_optimizer", "(", "1.", ")", ".", "init", "(", "params", ")", "\n", "ema_params", "=", "copy", ".", "deepcopy", "(", "params", ")", "\n", "return", "_class", "(", "\n", "step", "=", "0", ",", "\n", "apply_fn", "=", "apply_fn", ",", "\n", "params", "=", "params", ",", "\n", "ema_params", "=", "ema_params", ",", "\n", "tx_fn", "=", "optax_optimizer", ",", "\n", "opt_state", "=", "opt_state", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.VDM.setup": [[61, 72], ["model_vdm.EncDec", "model_vdm.ScoreUNet", "model_vdm.NoiseSchedule_NNet", "model_vdm.NoiseSchedule_FixedLinear", "model_vdm.NoiseSchedule_Scalar", "Exception"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "    ", "self", ".", "encdec", "=", "EncDec", "(", "self", ".", "config", ")", "\n", "self", ".", "score_model", "=", "ScoreUNet", "(", "self", ".", "config", ")", "\n", "if", "self", ".", "config", ".", "gamma_type", "==", "'learnable_nnet'", ":", "\n", "      ", "self", ".", "gamma", "=", "NoiseSchedule_NNet", "(", "self", ".", "config", ")", "\n", "", "elif", "self", ".", "config", ".", "gamma_type", "==", "'fixed'", ":", "\n", "      ", "self", ".", "gamma", "=", "NoiseSchedule_FixedLinear", "(", "self", ".", "config", ")", "\n", "", "elif", "self", ".", "config", ".", "gamma_type", "==", "'learnable_scalar'", ":", "\n", "      ", "self", ".", "gamma", "=", "NoiseSchedule_Scalar", "(", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "\"Unknown self.var_model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.VDM.__call__": [[73, 136], ["model_vdm.VDM.encdec.encode", "jax.random.normal", "model_vdm.VDM.make_rng", "model_vdm.VDM.gamma", "jax.random.normal", "model_vdm.VDM.score_model", "jax.numpy.sum", "model_vdm.VDMOutput", "model_vdm.VDM.gamma", "model_vdm.VDM.gamma", "flax.linen.sigmoid", "flax.linen.sigmoid", "model_vdm.VDM.make_rng", "model_vdm.VDM.encdec.logprob", "jax.numpy.square", "jax.numpy.sum", "jax.random.uniform", "jax.numpy.mod", "jax.random.uniform", "flax.linen.sigmoid", "model_vdm.VDM.make_rng", "jax.numpy.square", "jax.jvp", "model_vdm.VDM.gamma", "jax.numpy.sqrt", "jax.numpy.sqrt", "jax.numpy.exp", "jax.numpy.ceil", "jax.numpy.sqrt", "jax.numpy.sqrt", "jax.numpy.arange", "jax.numpy.ones_like", "jax.numpy.expm1", "jax.numpy.log"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.encode", "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.logprob"], ["", "", "def", "__call__", "(", "self", ",", "images", ",", "conditioning", ",", "deterministic", ":", "bool", "=", "True", ")", ":", "\n", "    ", "g_0", ",", "g_1", "=", "self", ".", "gamma", "(", "0.", ")", ",", "self", ".", "gamma", "(", "1.", ")", "\n", "var_0", ",", "var_1", "=", "nn", ".", "sigmoid", "(", "g_0", ")", ",", "nn", ".", "sigmoid", "(", "g_1", ")", "\n", "x", "=", "images", "\n", "n_batch", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "# encode", "\n", "f", "=", "self", ".", "encdec", ".", "encode", "(", "x", ")", "\n", "\n", "# 1. RECONSTRUCTION LOSS", "\n", "# add noise and reconstruct", "\n", "eps_0", "=", "jax", ".", "random", ".", "normal", "(", "self", ".", "make_rng", "(", "\"sample\"", ")", ",", "shape", "=", "f", ".", "shape", ")", "\n", "z_0", "=", "jnp", ".", "sqrt", "(", "1.", "-", "var_0", ")", "*", "f", "+", "jnp", ".", "sqrt", "(", "var_0", ")", "*", "eps_0", "\n", "z_0_rescaled", "=", "f", "+", "jnp", ".", "exp", "(", "0.5", "*", "g_0", ")", "*", "eps_0", "# = z_0/sqrt(1-var)", "\n", "loss_recon", "=", "-", "self", ".", "encdec", ".", "logprob", "(", "x", ",", "z_0_rescaled", ",", "g_0", ")", "\n", "\n", "# 2. LATENT LOSS", "\n", "# KL z1 with N(0,1) prior", "\n", "mean1_sqr", "=", "(", "1.", "-", "var_1", ")", "*", "jnp", ".", "square", "(", "f", ")", "\n", "loss_klz", "=", "0.5", "*", "jnp", ".", "sum", "(", "mean1_sqr", "+", "var_1", "-", "jnp", ".", "log", "(", "var_1", ")", "-", "1.", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "# 3. DIFFUSION LOSS", "\n", "# sample time steps", "\n", "rng1", "=", "self", ".", "make_rng", "(", "\"sample\"", ")", "\n", "if", "self", ".", "config", ".", "antithetic_time_sampling", ":", "\n", "      ", "t0", "=", "jax", ".", "random", ".", "uniform", "(", "rng1", ")", "\n", "t", "=", "jnp", ".", "mod", "(", "t0", "+", "jnp", ".", "arange", "(", "0.", ",", "1.", ",", "step", "=", "1.", "/", "n_batch", ")", ",", "1.", ")", "\n", "", "else", ":", "\n", "      ", "t", "=", "jax", ".", "random", ".", "uniform", "(", "rng1", ",", "shape", "=", "(", "n_batch", ",", ")", ")", "\n", "\n", "# discretize time steps if we're working with discrete time", "\n", "", "T", "=", "self", ".", "config", ".", "sm_n_timesteps", "\n", "if", "T", ">", "0", ":", "\n", "      ", "t", "=", "jnp", ".", "ceil", "(", "t", "*", "T", ")", "/", "T", "\n", "\n", "# sample z_t", "\n", "", "g_t", "=", "self", ".", "gamma", "(", "t", ")", "\n", "var_t", "=", "nn", ".", "sigmoid", "(", "g_t", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "eps", "=", "jax", ".", "random", ".", "normal", "(", "self", ".", "make_rng", "(", "\"sample\"", ")", ",", "shape", "=", "f", ".", "shape", ")", "\n", "z_t", "=", "jnp", ".", "sqrt", "(", "1.", "-", "var_t", ")", "*", "f", "+", "jnp", ".", "sqrt", "(", "var_t", ")", "*", "eps", "\n", "# compute predicted noise", "\n", "eps_hat", "=", "self", ".", "score_model", "(", "z_t", ",", "g_t", ",", "conditioning", ",", "deterministic", ")", "\n", "# compute MSE of predicted noise", "\n", "loss_diff_mse", "=", "jnp", ".", "sum", "(", "jnp", ".", "square", "(", "eps", "-", "eps_hat", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "if", "T", "==", "0", ":", "\n", "# loss for infinite depth T, i.e. continuous time", "\n", "      ", "_", ",", "g_t_grad", "=", "jax", ".", "jvp", "(", "self", ".", "gamma", ",", "(", "t", ",", ")", ",", "(", "jnp", ".", "ones_like", "(", "t", ")", ",", ")", ")", "\n", "loss_diff", "=", ".5", "*", "g_t_grad", "*", "loss_diff_mse", "\n", "", "else", ":", "\n", "# loss for finite depth T, i.e. discrete time", "\n", "      ", "s", "=", "t", "-", "(", "1.", "/", "T", ")", "\n", "g_s", "=", "self", ".", "gamma", "(", "s", ")", "\n", "loss_diff", "=", ".5", "*", "T", "*", "jnp", ".", "expm1", "(", "g_t", "-", "g_s", ")", "*", "loss_diff_mse", "\n", "\n", "# End of diffusion loss computation", "\n", "\n", "", "return", "VDMOutput", "(", "\n", "loss_recon", "=", "loss_recon", ",", "\n", "loss_klz", "=", "loss_klz", ",", "\n", "loss_diff", "=", "loss_diff", ",", "\n", "var_0", "=", "var_0", ",", "\n", "var_1", "=", "var_1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.VDM.sample": [[138, 160], ["jax.random.fold_in", "jax.random.normal", "model_vdm.VDM.score_model", "flax.linen.sigmoid", "flax.linen.sigmoid", "jax.numpy.sqrt", "model_vdm.VDM.gamma", "model_vdm.VDM.gamma", "jax.numpy.expm1", "flax.linen.sigmoid", "jax.numpy.ones", "jax.numpy.sqrt", "jax.numpy.sqrt", "flax.linen.sigmoid", "flax.linen.sigmoid"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "i", ",", "T", ",", "z_t", ",", "conditioning", ",", "rng", ")", ":", "\n", "    ", "rng_body", "=", "jax", ".", "random", ".", "fold_in", "(", "rng", ",", "i", ")", "\n", "eps", "=", "jax", ".", "random", ".", "normal", "(", "rng_body", ",", "z_t", ".", "shape", ")", "\n", "\n", "t", "=", "(", "T", "-", "i", ")", "/", "T", "\n", "s", "=", "(", "T", "-", "i", "-", "1", ")", "/", "T", "\n", "\n", "g_s", ",", "g_t", "=", "self", ".", "gamma", "(", "s", ")", ",", "self", ".", "gamma", "(", "t", ")", "\n", "eps_hat", "=", "self", ".", "score_model", "(", "\n", "z_t", ",", "\n", "g_t", "*", "jnp", ".", "ones", "(", "(", "z_t", ".", "shape", "[", "0", "]", ",", ")", ",", "g_t", ".", "dtype", ")", ",", "\n", "conditioning", ",", "\n", "deterministic", "=", "True", ")", "\n", "a", "=", "nn", ".", "sigmoid", "(", "-", "g_s", ")", "\n", "b", "=", "nn", ".", "sigmoid", "(", "-", "g_t", ")", "\n", "c", "=", "-", "jnp", ".", "expm1", "(", "g_s", "-", "g_t", ")", "\n", "sigma_t", "=", "jnp", ".", "sqrt", "(", "nn", ".", "sigmoid", "(", "g_t", ")", ")", "\n", "\n", "z_s", "=", "jnp", ".", "sqrt", "(", "nn", ".", "sigmoid", "(", "-", "g_s", ")", "/", "nn", ".", "sigmoid", "(", "-", "g_t", ")", ")", "*", "(", "z_t", "-", "sigma_t", "*", "c", "*", "eps_hat", ")", "+", "jnp", ".", "sqrt", "(", "(", "1.", "-", "a", ")", "*", "c", ")", "*", "eps", "\n", "\n", "return", "z_s", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.VDM.generate_x": [[161, 177], ["model_vdm.VDM.gamma", "flax.linen.sigmoid", "model_vdm.VDM.encdec.decode", "jax.numpy.sqrt", "model_vdm.VDM.make_rng", "jax.random.categorical", "jax.numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.decode"], ["", "def", "generate_x", "(", "self", ",", "z_0", ")", ":", "\n", "    ", "g_0", "=", "self", ".", "gamma", "(", "0.", ")", "\n", "\n", "var_0", "=", "nn", ".", "sigmoid", "(", "g_0", ")", "\n", "z_0_rescaled", "=", "z_0", "/", "jnp", ".", "sqrt", "(", "1.", "-", "var_0", ")", "\n", "\n", "logits", "=", "self", ".", "encdec", ".", "decode", "(", "z_0_rescaled", ",", "g_0", ")", "\n", "\n", "# get output samples", "\n", "if", "self", ".", "config", ".", "sample_softmax", ":", "\n", "      ", "out_rng", "=", "self", ".", "make_rng", "(", "\"sample\"", ")", "\n", "samples", "=", "jax", ".", "random", ".", "categorical", "(", "out_rng", ",", "logits", ")", "\n", "", "else", ":", "\n", "      ", "samples", "=", "jnp", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.__call__": [[185, 189], ["model_vdm.EncDec.encode", "model_vdm.EncDec.decode"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.encode", "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.decode"], ["def", "__call__", "(", "self", ",", "x", ",", "g_0", ")", ":", "\n", "# For initialization purposes", "\n", "    ", "h", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "h", ",", "g_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.encode": [[190, 197], ["x.round.round.round"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "# This transforms x from discrete values (0, 1, ...)", "\n", "# to the domain (-1,1).", "\n", "# Rounding here just a safeguard to ensure the input is discrete", "\n", "# (although typically, x is a discrete variable such as uint8)", "\n", "    ", "x", "=", "x", ".", "round", "(", ")", "\n", "return", "2", "*", "(", "(", "x", "+", ".5", ")", "/", "self", ".", "config", ".", "vocab_size", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.decode": [[198, 210], ["jax.numpy.repeat", "jax.numpy.exp", "jax.nn.log_softmax", "jax.numpy.arange", "model_vdm.EncDec.encode().transpose", "jax.numpy.square", "model_vdm.EncDec.encode"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.encode"], ["", "def", "decode", "(", "self", ",", "z", ",", "g_0", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "# Logits are exact if there are no dependencies between dimensions of x", "\n", "x_vals", "=", "jnp", ".", "arange", "(", "0", ",", "config", ".", "vocab_size", ")", "[", ":", ",", "None", "]", "\n", "x_vals", "=", "jnp", ".", "repeat", "(", "x_vals", ",", "3", ",", "1", ")", "\n", "x_vals", "=", "self", ".", "encode", "(", "x_vals", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "[", "None", ",", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "inv_stdev", "=", "jnp", ".", "exp", "(", "-", "0.5", "*", "g_0", "[", "...", ",", "None", "]", ")", "\n", "logits", "=", "-", "0.5", "*", "jnp", ".", "square", "(", "(", "z", "[", "...", ",", "None", "]", "-", "x_vals", ")", "*", "inv_stdev", ")", "\n", "\n", "logprobs", "=", "jax", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.logprob": [[211, 217], ["x.round().astype.round().astype.round().astype", "jax.nn.one_hot", "model_vdm.EncDec.decode", "jax.numpy.sum", "x.round().astype.round().astype.round"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.EncDec.decode"], ["", "def", "logprob", "(", "self", ",", "x", ",", "z", ",", "g_0", ")", ":", "\n", "    ", "x", "=", "x", ".", "round", "(", ")", ".", "astype", "(", "'int32'", ")", "\n", "x_onehot", "=", "jax", ".", "nn", ".", "one_hot", "(", "x", ",", "self", ".", "config", ".", "vocab_size", ")", "\n", "logprobs", "=", "self", ".", "decode", "(", "z", ",", "g_0", ")", "\n", "logprob", "=", "jnp", ".", "sum", "(", "x_onehot", "*", "logprobs", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "return", "logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.ScoreUNet.__call__": [[225, 296], ["jax.numpy.isscalar", "model_vdm.get_timestep_embedding", "jax.numpy.concatenate", "flax.linen.swish", "flax.linen.swish", "range", "range", "flax.linen.normalization.GroupNorm", "flax.linen.swish", "jax.numpy.isscalar", "jax.numpy.concatenate", "flax.linen.Conv", "model_vdm.ResnetBlock", "hs.append", "model_vdm.AttnBlock", "model_vdm.ResnetBlock", "flax.linen.normalization.GroupNorm.", "flax.linen.Conv", "len", "len", "jax.numpy.ones", "len", "jax.numpy.tile", "flax.linen.Dense", "flax.linen.Dense", "model_vdm.Base2FourierFeatures", "ResnetBlock.", "model_vdm.ResnetBlock", "model_vdm.ResnetBlock", "ResnetBlock.", "model_vdm.AttnBlock", "jax.numpy.concatenate", "model_vdm.AttnBlock", "hs.pop"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.get_timestep_embedding"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "z", ",", "g_t", ",", "conditioning", ",", "deterministic", "=", "True", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "# Compute conditioning vector based on 'g_t' and 'conditioning'", "\n", "n_embd", "=", "self", ".", "config", ".", "sm_n_embd", "\n", "\n", "lb", "=", "config", ".", "gamma_min", "\n", "ub", "=", "config", ".", "gamma_max", "\n", "t", "=", "(", "g_t", "-", "lb", ")", "/", "(", "ub", "-", "lb", ")", "# ---> [0,1]", "\n", "\n", "assert", "jnp", ".", "isscalar", "(", "t", ")", "or", "len", "(", "t", ".", "shape", ")", "==", "0", "or", "len", "(", "t", ".", "shape", ")", "==", "1", "\n", "if", "jnp", ".", "isscalar", "(", "t", ")", ":", "\n", "      ", "t", "=", "jnp", ".", "ones", "(", "(", "z", ".", "shape", "[", "0", "]", ",", ")", ",", "z", ".", "dtype", ")", "*", "t", "\n", "", "elif", "len", "(", "t", ".", "shape", ")", "==", "0", ":", "\n", "      ", "t", "=", "jnp", ".", "tile", "(", "t", "[", "None", "]", ",", "z", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "temb", "=", "get_timestep_embedding", "(", "t", ",", "n_embd", ")", "\n", "cond", "=", "jnp", ".", "concatenate", "(", "[", "temb", ",", "conditioning", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "cond", "=", "nn", ".", "swish", "(", "nn", ".", "Dense", "(", "features", "=", "n_embd", "*", "4", ",", "name", "=", "'dense0'", ")", "(", "cond", ")", ")", "\n", "cond", "=", "nn", ".", "swish", "(", "nn", ".", "Dense", "(", "features", "=", "n_embd", "*", "4", ",", "name", "=", "'dense1'", ")", "(", "cond", ")", ")", "\n", "\n", "# Concatenate Fourier features to input", "\n", "if", "config", ".", "with_fourier_features", ":", "\n", "      ", "z_f", "=", "Base2FourierFeatures", "(", "start", "=", "6", ",", "stop", "=", "8", ",", "step", "=", "1", ")", "(", "z", ")", "\n", "h", "=", "jnp", ".", "concatenate", "(", "[", "z", ",", "z_f", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "h", "=", "z", "\n", "\n", "# Linear projection of input", "\n", "", "h", "=", "nn", ".", "Conv", "(", "features", "=", "n_embd", ",", "kernel_size", "=", "(", "\n", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'conv_in'", ")", "(", "h", ")", "\n", "hs", "=", "[", "h", "]", "\n", "\n", "# Downsampling", "\n", "for", "i_block", "in", "range", "(", "self", ".", "config", ".", "sm_n_layer", ")", ":", "\n", "      ", "block", "=", "ResnetBlock", "(", "config", ",", "out_ch", "=", "n_embd", ",", "name", "=", "f'down.block_{i_block}'", ")", "\n", "h", "=", "block", "(", "hs", "[", "-", "1", "]", ",", "cond", ",", "deterministic", ")", "[", "0", "]", "\n", "if", "config", ".", "with_attention", ":", "\n", "        ", "h", "=", "AttnBlock", "(", "num_heads", "=", "1", ",", "name", "=", "f'down.attn_{i_block}'", ")", "(", "h", ")", "\n", "", "hs", ".", "append", "(", "h", ")", "\n", "\n", "# Middle", "\n", "", "h", "=", "hs", "[", "-", "1", "]", "\n", "h", "=", "ResnetBlock", "(", "config", ",", "name", "=", "'mid.block_1'", ")", "(", "h", ",", "cond", ",", "deterministic", ")", "[", "0", "]", "\n", "h", "=", "AttnBlock", "(", "num_heads", "=", "1", ",", "name", "=", "'mid.attn_1'", ")", "(", "h", ")", "\n", "h", "=", "ResnetBlock", "(", "config", ",", "name", "=", "'mid.block_2'", ")", "(", "h", ",", "cond", ",", "deterministic", ")", "[", "0", "]", "\n", "\n", "# Upsampling", "\n", "for", "i_block", "in", "range", "(", "self", ".", "config", ".", "sm_n_layer", "+", "1", ")", ":", "\n", "      ", "b", "=", "ResnetBlock", "(", "config", ",", "out_ch", "=", "n_embd", ",", "name", "=", "f'up.block_{i_block}'", ")", "\n", "h", "=", "b", "(", "jnp", ".", "concatenate", "(", "[", "h", ",", "hs", ".", "pop", "(", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "cond", ",", "deterministic", ")", "[", "0", "]", "\n", "if", "config", ".", "with_attention", ":", "\n", "        ", "h", "=", "AttnBlock", "(", "num_heads", "=", "1", ",", "name", "=", "f'up.attn_{i_block}'", ")", "(", "h", ")", "\n", "\n", "", "", "assert", "not", "hs", "\n", "\n", "# Predict noise", "\n", "normalize", "=", "nn", ".", "normalization", ".", "GroupNorm", "(", ")", "\n", "h", "=", "nn", ".", "swish", "(", "normalize", "(", "h", ")", ")", "\n", "eps_pred", "=", "nn", ".", "Conv", "(", "\n", "features", "=", "z", ".", "shape", "[", "-", "1", "]", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel_init", "=", "nn", ".", "initializers", ".", "zeros", ",", "\n", "name", "=", "'conv_out'", ")", "(", "h", ")", "\n", "\n", "# Base measure", "\n", "eps_pred", "+=", "z", "\n", "\n", "return", "eps_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.NoiseSchedule_Scalar.setup": [[331, 336], ["model_vdm.NoiseSchedule_Scalar.param", "model_vdm.NoiseSchedule_Scalar.param", "model_vdm.constant_init", "model_vdm.constant_init"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.constant_init", "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.constant_init"], ["def", "setup", "(", "self", ")", ":", "\n", "    ", "init_bias", "=", "self", ".", "config", ".", "gamma_min", "\n", "init_scale", "=", "self", ".", "config", ".", "gamma_max", "-", "init_bias", "\n", "self", ".", "w", "=", "self", ".", "param", "(", "'w'", ",", "constant_init", "(", "init_scale", ")", ",", "(", "1", ",", ")", ")", "\n", "self", ".", "b", "=", "self", ".", "param", "(", "'b'", ",", "constant_init", "(", "init_bias", ")", ",", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.NoiseSchedule_Scalar.__call__": [[337, 340], ["abs"], "methods", ["None"], ["", "@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "t", ")", ":", "\n", "    ", "return", "self", ".", "b", "+", "abs", "(", "self", ".", "w", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.NoiseSchedule_FixedLinear.__call__": [[345, 349], ["None"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "t", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "return", "config", ".", "gamma_min", "+", "(", "config", ".", "gamma_max", "-", "config", ".", "gamma_min", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.NoiseSchedule_NNet.setup": [[356, 371], ["flax.linen.initializers.normal", "model_vdm.DenseMonotone", "model_vdm.DenseMonotone", "model_vdm.DenseMonotone", "model_vdm.constant_init", "model_vdm.constant_init"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.constant_init", "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.constant_init"], ["def", "setup", "(", "self", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "n_out", "=", "1", "\n", "kernel_init", "=", "nn", ".", "initializers", ".", "normal", "(", ")", "\n", "\n", "init_bias", "=", "self", ".", "config", ".", "gamma_min", "\n", "init_scale", "=", "self", ".", "config", ".", "gamma_max", "-", "init_bias", "\n", "\n", "self", ".", "l1", "=", "DenseMonotone", "(", "n_out", ",", "\n", "kernel_init", "=", "constant_init", "(", "init_scale", ")", ",", "\n", "bias_init", "=", "constant_init", "(", "init_bias", ")", ")", "\n", "if", "self", ".", "nonlinear", ":", "\n", "      ", "self", ".", "l2", "=", "DenseMonotone", "(", "self", ".", "n_features", ",", "kernel_init", "=", "kernel_init", ")", "\n", "self", ".", "l3", "=", "DenseMonotone", "(", "n_out", ",", "kernel_init", "=", "kernel_init", ",", "use_bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.NoiseSchedule_NNet.__call__": [[372, 390], ["model_vdm.NoiseSchedule_NNet.l1", "jax.numpy.squeeze", "jax.numpy.isscalar", "jax.numpy.isscalar", "jax.numpy.reshape", "model_vdm.NoiseSchedule_NNet.l2", "len", "len", "len", "jax.numpy.ones", "model_vdm.NoiseSchedule_NNet.l3", "flax.linen.sigmoid"], "methods", ["None"], ["", "", "@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "t", ",", "det_min_max", "=", "False", ")", ":", "\n", "    ", "assert", "jnp", ".", "isscalar", "(", "t", ")", "or", "len", "(", "t", ".", "shape", ")", "==", "0", "or", "len", "(", "t", ".", "shape", ")", "==", "1", "\n", "\n", "if", "jnp", ".", "isscalar", "(", "t", ")", "or", "len", "(", "t", ".", "shape", ")", "==", "0", ":", "\n", "      ", "t", "=", "t", "*", "jnp", ".", "ones", "(", "(", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "      ", "t", "=", "jnp", ".", "reshape", "(", "t", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "h", "=", "self", ".", "l1", "(", "t", ")", "\n", "if", "self", ".", "nonlinear", ":", "\n", "      ", "_h", "=", "2.", "*", "(", "t", "-", ".5", ")", "# scale input to [-1, +1]", "\n", "_h", "=", "self", ".", "l2", "(", "_h", ")", "\n", "_h", "=", "2", "*", "(", "nn", ".", "sigmoid", "(", "_h", ")", "-", ".5", ")", "# more stable than jnp.tanh(h)", "\n", "_h", "=", "self", ".", "l3", "(", "_h", ")", "/", "self", ".", "n_features", "\n", "h", "+=", "_h", "\n", "\n", "", "return", "jnp", ".", "squeeze", "(", "h", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.DenseMonotone.__call__": [[401, 416], ["jax.numpy.asarray", "model_vdm.DenseMonotone.param", "abs", "jax.lax.dot_general", "jax.numpy.asarray", "model_vdm.DenseMonotone.param", "jax.numpy.asarray"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "inputs", "=", "jnp", ".", "asarray", "(", "inputs", ",", "self", ".", "dtype", ")", "\n", "kernel", "=", "self", ".", "param", "(", "'kernel'", ",", "\n", "self", ".", "kernel_init", ",", "\n", "(", "inputs", ".", "shape", "[", "-", "1", "]", ",", "self", ".", "features", ")", ")", "\n", "kernel", "=", "abs", "(", "jnp", ".", "asarray", "(", "kernel", ",", "self", ".", "dtype", ")", ")", "\n", "y", "=", "jax", ".", "lax", ".", "dot_general", "(", "inputs", ",", "kernel", ",", "\n", "(", "(", "(", "inputs", ".", "ndim", "-", "1", ",", ")", ",", "(", "0", ",", ")", ")", ",", "(", "(", ")", ",", "(", ")", ")", ")", ",", "\n", "precision", "=", "self", ".", "precision", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "bias", "=", "self", ".", "param", "(", "'bias'", ",", "self", ".", "bias_init", ",", "(", "self", ".", "features", ",", ")", ")", "\n", "bias", "=", "jnp", ".", "asarray", "(", "bias", ",", "self", ".", "dtype", ")", "\n", "y", "=", "y", "+", "bias", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.ResnetBlock.__call__": [[425, 466], ["flax.linen.normalization.GroupNorm", "flax.linen.normalization.GroupNorm", "nonlinearity", "nonlinearity", "jax.numpy.concatenate", "flax.linen.normalization.GroupNorm.", "flax.linen.Conv", "flax.linen.normalization.GroupNorm.", "flax.linen.Dropout", "flax.linen.Conv", "flax.linen.Dense", "len", "flax.linen.Dense"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ",", "cond", ",", "deterministic", ":", "bool", ",", "enc", "=", "None", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "nonlinearity", "=", "nn", ".", "swish", "\n", "normalize1", "=", "nn", ".", "normalization", ".", "GroupNorm", "(", ")", "\n", "normalize2", "=", "nn", ".", "normalization", ".", "GroupNorm", "(", ")", "\n", "\n", "if", "enc", "is", "not", "None", ":", "\n", "      ", "x", "=", "jnp", ".", "concatenate", "(", "[", "x", ",", "enc", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "B", ",", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "# pylint: disable=invalid-name", "\n", "out_ch", "=", "C", "if", "self", ".", "out_ch", "is", "None", "else", "self", ".", "out_ch", "\n", "\n", "h", "=", "x", "\n", "h", "=", "nonlinearity", "(", "normalize1", "(", "h", ")", ")", "\n", "h", "=", "nn", ".", "Conv", "(", "\n", "features", "=", "out_ch", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "'conv1'", ")", "(", "h", ")", "\n", "\n", "# add in conditioning", "\n", "if", "cond", "is", "not", "None", ":", "\n", "      ", "assert", "cond", ".", "shape", "[", "0", "]", "==", "B", "and", "len", "(", "cond", ".", "shape", ")", "==", "2", "\n", "h", "+=", "nn", ".", "Dense", "(", "\n", "features", "=", "out_ch", ",", "use_bias", "=", "False", ",", "kernel_init", "=", "nn", ".", "initializers", ".", "zeros", ",", "\n", "name", "=", "'cond_proj'", ")", "(", "cond", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "", "h", "=", "nonlinearity", "(", "normalize2", "(", "h", ")", ")", "\n", "h", "=", "nn", ".", "Dropout", "(", "rate", "=", "config", ".", "sm_pdrop", ")", "(", "h", ",", "deterministic", "=", "deterministic", ")", "\n", "h", "=", "nn", ".", "Conv", "(", "\n", "features", "=", "out_ch", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "kernel_init", "=", "nn", ".", "initializers", ".", "zeros", ",", "\n", "name", "=", "'conv2'", ")", "(", "h", ")", "\n", "\n", "if", "C", "!=", "out_ch", ":", "\n", "      ", "x", "=", "nn", ".", "Dense", "(", "features", "=", "out_ch", ",", "name", "=", "'nin_shortcut'", ")", "(", "x", ")", "\n", "\n", "", "assert", "x", ".", "shape", "==", "h", ".", "shape", "\n", "x", "=", "x", "+", "h", "\n", "return", "x", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.AttnBlock.__call__": [[473, 508], ["flax.linen.normalization.GroupNorm", "flax.linen.normalization.GroupNorm.", "model_vdm.dot_product_attention", "flax.linen.Dense", "flax.linen.Dense", "flax.linen.Dense", "model_vdm.dot_product_attention", "flax.linen.Dense", "flax.linen.DenseGeneral", "flax.linen.DenseGeneral", "flax.linen.DenseGeneral", "flax.linen.DenseGeneral"], "methods", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.dot_product_attention", "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.dot_product_attention"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "# pylint: disable=invalid-name,unused-variable", "\n", "assert", "C", "%", "self", ".", "num_heads", "==", "0", "\n", "\n", "normalize", "=", "nn", ".", "normalization", ".", "GroupNorm", "(", ")", "\n", "\n", "h", "=", "normalize", "(", "x", ")", "\n", "if", "self", ".", "num_heads", "==", "1", ":", "\n", "      ", "q", "=", "nn", ".", "Dense", "(", "features", "=", "C", ",", "name", "=", "'q'", ")", "(", "h", ")", "\n", "k", "=", "nn", ".", "Dense", "(", "features", "=", "C", ",", "name", "=", "'k'", ")", "(", "h", ")", "\n", "v", "=", "nn", ".", "Dense", "(", "features", "=", "C", ",", "name", "=", "'v'", ")", "(", "h", ")", "\n", "h", "=", "dot_product_attention", "(", "\n", "q", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ",", "\n", "k", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ",", "\n", "v", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ",", "\n", "axis", "=", "(", "1", ",", "2", ")", ")", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "h", "=", "nn", ".", "Dense", "(", "\n", "features", "=", "C", ",", "kernel_init", "=", "nn", ".", "initializers", ".", "zeros", ",", "name", "=", "'proj_out'", ")", "(", "h", ")", "\n", "", "else", ":", "\n", "      ", "head_dim", "=", "C", "//", "self", ".", "num_heads", "\n", "q", "=", "nn", ".", "DenseGeneral", "(", "features", "=", "(", "self", ".", "num_heads", ",", "head_dim", ")", ",", "name", "=", "'q'", ")", "(", "h", ")", "\n", "k", "=", "nn", ".", "DenseGeneral", "(", "features", "=", "(", "self", ".", "num_heads", ",", "head_dim", ")", ",", "name", "=", "'k'", ")", "(", "h", ")", "\n", "v", "=", "nn", ".", "DenseGeneral", "(", "features", "=", "(", "self", ".", "num_heads", ",", "head_dim", ")", ",", "name", "=", "'v'", ")", "(", "h", ")", "\n", "assert", "q", ".", "shape", "==", "k", ".", "shape", "==", "v", ".", "shape", "==", "(", "\n", "B", ",", "H", ",", "W", ",", "self", ".", "num_heads", ",", "head_dim", ")", "\n", "h", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "h", "=", "nn", ".", "DenseGeneral", "(", "\n", "features", "=", "C", ",", "\n", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ",", "\n", "kernel_init", "=", "nn", ".", "initializers", ".", "zeros", ",", "\n", "name", "=", "'proj_out'", ")", "(", "h", ")", "\n", "\n", "", "assert", "h", ".", "shape", "==", "x", ".", "shape", "\n", "return", "x", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.Base2FourierFeatures.__call__": [[623, 636], ["range", "jax.numpy.tile", "jax.numpy.repeat", "jax.numpy.concatenate", "len", "jax.numpy.sin", "jax.numpy.cos", "jax.numpy.asarray"], "methods", ["None"], ["@", "nn", ".", "compact", "\n", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "freqs", "=", "range", "(", "self", ".", "start", ",", "self", ".", "stop", ",", "self", ".", "step", ")", "\n", "\n", "# Create Base 2 Fourier features", "\n", "w", "=", "2.", "**", "(", "jnp", ".", "asarray", "(", "freqs", ",", "dtype", "=", "inputs", ".", "dtype", ")", ")", "*", "2", "*", "jnp", ".", "pi", "\n", "w", "=", "jnp", ".", "tile", "(", "w", "[", "None", ",", ":", "]", ",", "(", "1", ",", "inputs", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Compute features", "\n", "h", "=", "jnp", ".", "repeat", "(", "inputs", ",", "len", "(", "freqs", ")", ",", "axis", "=", "-", "1", ")", "\n", "h", "=", "w", "*", "h", "\n", "h", "=", "jnp", ".", "concatenate", "(", "[", "jnp", ".", "sin", "(", "h", ")", ",", "jnp", ".", "cos", "(", "h", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.get_timestep_embedding": [[298, 324], ["jax.numpy.exp", "jax.numpy.concatenate", "len", "numpy.log", "jax.lax.pad", "jax.numpy.arange", "timesteps.astype", "jax.numpy.sin", "jax.numpy.cos", "dtype"], "function", ["None"], ["", "", "def", "get_timestep_embedding", "(", "timesteps", ",", "embedding_dim", ":", "int", ",", "dtype", "=", "jnp", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Build sinusoidal embeddings (from Fairseq).\n\n  This matches the implementation in tensor2tensor, but differs slightly\n  from the description in Section 3.5 of \"Attention Is All You Need\".\n\n  Args:\n    timesteps: jnp.ndarray: generate embedding vectors at these timesteps\n    embedding_dim: int: dimension of the embeddings to generate\n    dtype: data type of the generated embeddings\n\n  Returns:\n    embedding vectors with shape `(len(timesteps), embedding_dim)`\n  \"\"\"", "\n", "assert", "len", "(", "timesteps", ".", "shape", ")", "==", "1", "\n", "timesteps", "*=", "1000.", "\n", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "np", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "jnp", ".", "exp", "(", "jnp", ".", "arange", "(", "half_dim", ",", "dtype", "=", "dtype", ")", "*", "-", "emb", ")", "\n", "emb", "=", "timesteps", ".", "astype", "(", "dtype", ")", "[", ":", ",", "None", "]", "*", "emb", "[", "None", ",", ":", "]", "\n", "emb", "=", "jnp", ".", "concatenate", "(", "[", "jnp", ".", "sin", "(", "emb", ")", ",", "jnp", ".", "cos", "(", "emb", ")", "]", ",", "axis", "=", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "# zero pad", "\n", "    ", "emb", "=", "jax", ".", "lax", ".", "pad", "(", "emb", ",", "dtype", "(", "0", ")", ",", "(", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "1", ",", "0", ")", ")", ")", "\n", "", "assert", "emb", ".", "shape", "==", "(", "timesteps", ".", "shape", "[", "0", "]", ",", "embedding_dim", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.constant_init": [[392, 396], ["jax.numpy.ones"], "function", ["None"], ["", "", "def", "constant_init", "(", "value", ",", "dtype", "=", "'float32'", ")", ":", "\n", "  ", "def", "_init", "(", "key", ",", "shape", ",", "dtype", "=", "dtype", ")", ":", "\n", "    ", "return", "value", "*", "jnp", ".", "ones", "(", "shape", ",", "dtype", ")", "\n", "", "return", "_init", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm.dot_product_attention": [[510, 609], ["tuple", "key.astype.transpose", "query.transpose.transpose", "value.transpose.transpose", "key.astype.astype", "tuple", "jax.lax.dot_general", "tuple", "jax.nn.softmax", "attn_weights.astype.astype", "jax.lax.dot_general", "model_vdm._invert_perm", "y.transpose.transpose", "tuple", "isinstance", "numpy.delete", "query.transpose.astype", "numpy.sqrt", "range", "range", "range", "range", "ValueError", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm._invert_perm"], ["", "", "def", "dot_product_attention", "(", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "dtype", "=", "jnp", ".", "float32", ",", "\n", "bias", "=", "None", ",", "\n", "axis", "=", "None", ",", "\n", "# broadcast_dropout=True,", "\n", "# dropout_rng=None,", "\n", "# dropout_rate=0.,", "\n", "# deterministic=False,", "\n", "precision", "=", "None", ")", ":", "\n", "  ", "\"\"\"Computes dot-product attention given query, key, and value.\n\n  This is the core function for applying attention based on\n  https://arxiv.org/abs/1706.03762. It calculates the attention weights given\n  query and key and combines the values using the attention weights. This\n  function supports multi-dimensional inputs.\n\n\n  Args:\n    query: queries for calculating attention with shape of `[batch_size, dim1,\n      dim2, ..., dimN, num_heads, mem_channels]`.\n    key: keys for calculating attention with shape of `[batch_size, dim1, dim2,\n      ..., dimN, num_heads, mem_channels]`.\n    value: values to be used in attention with shape of `[batch_size, dim1,\n      dim2,..., dimN, num_heads, value_channels]`.\n    dtype: the dtype of the computation (default: float32)\n    bias: bias for the attention weights. This can be used for incorporating\n      autoregressive mask, padding mask, proximity bias.\n    axis: axises over which the attention is applied.\n    broadcast_dropout: bool: use a broadcasted dropout along batch dims.\n    dropout_rng: JAX PRNGKey: to be used for dropout\n    dropout_rate: dropout rate\n    deterministic: bool, deterministic or not (to apply dropout)\n    precision: numerical precision of the computation see `jax.lax.Precision`\n      for details.\n\n  Returns:\n    Output of shape `[bs, dim1, dim2, ..., dimN,, num_heads, value_channels]`.\n  \"\"\"", "\n", "assert", "key", ".", "shape", "[", ":", "-", "1", "]", "==", "value", ".", "shape", "[", ":", "-", "1", "]", "\n", "assert", "(", "query", ".", "shape", "[", "0", ":", "1", "]", "==", "key", ".", "shape", "[", "0", ":", "1", "]", "and", "\n", "query", ".", "shape", "[", "-", "1", "]", "==", "key", ".", "shape", "[", "-", "1", "]", ")", "\n", "assert", "query", ".", "dtype", "==", "key", ".", "dtype", "==", "value", ".", "dtype", "\n", "input_dtype", "=", "query", ".", "dtype", "\n", "\n", "if", "axis", "is", "None", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "1", ",", "key", ".", "ndim", "-", "2", ")", ")", "\n", "", "if", "not", "isinstance", "(", "axis", ",", "Iterable", ")", ":", "\n", "    ", "axis", "=", "(", "axis", ",", ")", "\n", "", "assert", "key", ".", "ndim", "==", "query", ".", "ndim", "\n", "assert", "key", ".", "ndim", "==", "value", ".", "ndim", "\n", "for", "ax", "in", "axis", ":", "\n", "    ", "if", "not", "(", "query", ".", "ndim", ">=", "3", "and", "1", "<=", "ax", "<", "query", ".", "ndim", "-", "2", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Attention axis must be between the batch '", "\n", "'axis and the last-two axes.'", ")", "\n", "", "", "depth", "=", "query", ".", "shape", "[", "-", "1", "]", "\n", "n", "=", "key", ".", "ndim", "\n", "# batch_dims is  <bs, <non-attention dims>, num_heads>", "\n", "batch_dims", "=", "tuple", "(", "np", ".", "delete", "(", "range", "(", "n", ")", ",", "axis", "+", "(", "n", "-", "1", ",", ")", ")", ")", "\n", "# q & k -> (bs, <non-attention dims>, num_heads, <attention dims>, channels)", "\n", "qk_perm", "=", "batch_dims", "+", "axis", "+", "(", "n", "-", "1", ",", ")", "\n", "key", "=", "key", ".", "transpose", "(", "qk_perm", ")", "\n", "query", "=", "query", ".", "transpose", "(", "qk_perm", ")", "\n", "# v -> (bs, <non-attention dims>, num_heads, channels, <attention dims>)", "\n", "v_perm", "=", "batch_dims", "+", "(", "n", "-", "1", ",", ")", "+", "axis", "\n", "value", "=", "value", ".", "transpose", "(", "v_perm", ")", "\n", "\n", "key", "=", "key", ".", "astype", "(", "dtype", ")", "\n", "query", "=", "query", ".", "astype", "(", "dtype", ")", "/", "np", ".", "sqrt", "(", "depth", ")", "\n", "batch_dims_t", "=", "tuple", "(", "range", "(", "len", "(", "batch_dims", ")", ")", ")", "\n", "attn_weights", "=", "jax", ".", "lax", ".", "dot_general", "(", "\n", "query", ",", "\n", "key", ",", "(", "(", "(", "n", "-", "1", ",", ")", ",", "(", "n", "-", "1", ",", ")", ")", ",", "(", "batch_dims_t", ",", "batch_dims_t", ")", ")", ",", "\n", "precision", "=", "precision", ")", "\n", "\n", "# apply attention bias: masking, droput, proximity bias, ect.", "\n", "if", "bias", "is", "not", "None", ":", "\n", "    ", "attn_weights", "=", "attn_weights", "+", "bias", "\n", "\n", "# normalize the attention weights", "\n", "", "norm_dims", "=", "tuple", "(", "range", "(", "attn_weights", ".", "ndim", "-", "len", "(", "axis", ")", ",", "attn_weights", ".", "ndim", ")", ")", "\n", "attn_weights", "=", "jax", ".", "nn", ".", "softmax", "(", "attn_weights", ",", "axis", "=", "norm_dims", ")", "\n", "assert", "attn_weights", ".", "dtype", "==", "dtype", "\n", "attn_weights", "=", "attn_weights", ".", "astype", "(", "input_dtype", ")", "\n", "\n", "# compute the new values given the attention weights", "\n", "assert", "attn_weights", ".", "dtype", "==", "value", ".", "dtype", "\n", "wv_contracting_dims", "=", "(", "norm_dims", ",", "range", "(", "value", ".", "ndim", "-", "len", "(", "axis", ")", ",", "value", ".", "ndim", ")", ")", "\n", "y", "=", "jax", ".", "lax", ".", "dot_general", "(", "\n", "attn_weights", ",", "\n", "value", ",", "(", "wv_contracting_dims", ",", "(", "batch_dims_t", ",", "batch_dims_t", ")", ")", ",", "\n", "precision", "=", "precision", ")", "\n", "\n", "# back to (bs, dim1, dim2, ..., dimN, num_heads, channels)", "\n", "perm_inv", "=", "_invert_perm", "(", "qk_perm", ")", "\n", "y", "=", "y", ".", "transpose", "(", "perm_inv", ")", "\n", "assert", "y", ".", "dtype", "==", "input_dtype", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.model_vdm._invert_perm": [[611, 616], ["enumerate", "tuple", "len"], "function", ["None"], ["", "def", "_invert_perm", "(", "perm", ")", ":", "\n", "  ", "perm_inv", "=", "[", "0", "]", "*", "len", "(", "perm", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "perm", ")", ":", "\n", "    ", "perm_inv", "[", "j", "]", "=", "i", "\n", "", "return", "tuple", "(", "perm_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_scalars": [[174, 184], ["sorted", "absl.logging.info", "scalars.keys", "absl.logging.info", "numpy.array().item", "isinstance", "numpy.array"], "methods", ["None"], ["  ", "def", "write_scalars", "(", "self", ",", "step", ":", "int", ",", "scalars", ":", "Mapping", "[", "str", ",", "metric_writers", ".", "interface", ".", "Scalar", "]", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "scalars", ".", "keys", "(", ")", ")", "\n", "if", "step", "==", "1", ":", "\n", "      ", "logging", ".", "info", "(", "\"%s\"", ",", "\", \"", ".", "join", "(", "[", "\"Step\"", "]", "+", "keys", ")", ")", "\n", "", "values", "=", "[", "scalars", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "# Convert jax DeviceArrays and numpy ndarrays to python native type", "\n", "values", "=", "[", "np", ".", "array", "(", "v", ")", ".", "item", "(", ")", "for", "v", "in", "values", "]", "\n", "# Print floats", "\n", "values", "=", "[", "f\"{v:.4f}\"", "if", "isinstance", "(", "v", ",", "float", ")", "else", "f\"{v}\"", "for", "v", "in", "values", "]", "\n", "logging", ".", "info", "(", "\"%d, %s\"", ",", "step", ",", "\", \"", ".", "join", "(", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_texts": [[185, 187], ["absl.logging.info"], "methods", ["None"], ["", "def", "write_texts", "(", "self", ",", "step", ":", "int", ",", "texts", ":", "Mapping", "[", "str", ",", "str", "]", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"[%d] Got texts: %s.\"", ",", "step", ",", "texts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_hparams": [[188, 190], ["absl.logging.info", "pprint.pformat"], "methods", ["None"], ["", "def", "write_hparams", "(", "self", ",", "hparams", ":", "Mapping", "[", "str", ",", "Any", "]", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Hyperparameters:\\n%s\"", ",", "pformat", "(", "hparams", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.CustomLoggingWriter.write_images": [[191, 194], ["absl.logging.info", "images.items"], "methods", ["None"], ["", "def", "write_images", "(", "self", ",", "step", ":", "int", ",", "images", ":", "Mapping", "[", "str", ",", "Any", "]", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"[%d] Got images: %s.\"", ",", "step", ",", "\n", "{", "k", ":", "v", ".", "shape", "for", "k", ",", "v", "in", "images", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_workdir": [[38, 57], ["config_list.append", "range", "os.path.join", "time.strftime", "len", "argv[].startswith", "argv[].split", "config_file.split", "argv[].startswith", "argv[].startswith", "argv[].startswith", "argv[].split", "config_list.append", "cfg.isnumeric", "len"], "function", ["None"], ["def", "get_workdir", "(", ")", ":", "\n", "  ", "argv", "=", "sys", ".", "argv", "\n", "config_list", "=", "[", "]", "\n", "config_list", ".", "append", "(", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "argv", ")", ")", ":", "\n", "    ", "if", "argv", "[", "i", "]", ".", "startswith", "(", "'--config='", ")", ":", "\n", "      ", "config_file", "=", "argv", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "config_file", "=", "config_file", ".", "split", "(", "'.py'", ")", "[", "0", "]", "\n", "", "elif", "argv", "[", "i", "]", ".", "startswith", "(", "'--workdir='", ")", "or", "argv", "[", "i", "]", ".", "startswith", "(", "'--config.ckpt_restore_dir='", ")", ":", "\n", "      ", "continue", "\n", "", "elif", "argv", "[", "i", "]", ".", "startswith", "(", "'--config'", ")", ":", "\n", "      ", "cfgs", "=", "argv", "[", "i", "]", ".", "split", "(", "'.'", ")", "\n", "cfg", "=", "cfgs", "[", "-", "1", "]", "\n", "if", "cfg", ".", "isnumeric", "(", ")", "or", "len", "(", "cfg", ")", "==", "0", ":", "\n", "        ", "cfg", "=", "cfgs", "[", "-", "2", "]", "+", "'.'", "+", "cfgs", "[", "-", "1", "]", "\n", "", "config_list", ".", "append", "(", "cfg", ")", "\n", "", "", "workdir", "=", "\"-\"", ".", "join", "(", "config_list", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "config_file", ",", "workdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.dist": [[59, 83], ["functools.partial", "functools.partial", "fn", "jax.device_get", "jax.device_get", "functools.partial", "jax.tree_map", "jax.tree_map", "flax.jax_utils.unreplicate", "NotImplementedError", "utils.dist.pmapped_fn"], "function", ["None"], ["", "def", "dist", "(", "fn", ",", "accumulate", ":", "str", ",", "axis_name", "=", "'batch'", ")", ":", "\n", "  ", "\"\"\"Wrap a function in pmap and device_get(unreplicate(.)) its return value.\"\"\"", "\n", "\n", "if", "accumulate", "==", "'concat'", ":", "\n", "    ", "accumulate_fn", "=", "functools", ".", "partial", "(", "\n", "allgather_and_reshape", ",", "axis_name", "=", "axis_name", ")", "\n", "", "elif", "accumulate", "==", "'mean'", ":", "\n", "    ", "accumulate_fn", "=", "functools", ".", "partial", "(", "\n", "jax", ".", "lax", ".", "pmean", ",", "axis_name", "=", "axis_name", ")", "\n", "", "elif", "accumulate", "==", "'none'", ":", "\n", "    ", "accumulate_fn", "=", "None", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "(", "accumulate", ")", "\n", "\n", "", "@", "functools", ".", "partial", "(", "jax", ".", "pmap", ",", "axis_name", "=", "axis_name", ")", "\n", "def", "pmapped_fn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "out", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "out", "if", "accumulate_fn", "is", "None", "else", "jax", ".", "tree_map", "(", "accumulate_fn", ",", "out", ")", "\n", "\n", "", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "jax", ".", "device_get", "(", "\n", "flax", ".", "jax_utils", ".", "unreplicate", "(", "pmapped_fn", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.allgather_and_reshape": [[85, 90], ["jax.lax.all_gather", "jax.lax.all_gather", "jax.lax.all_gather.reshape"], "function", ["None"], ["", "def", "allgather_and_reshape", "(", "x", ",", "axis_name", "=", "'batch'", ")", ":", "\n", "  ", "\"\"\"Allgather and merge the newly inserted axis w/ the original batch axis.\"\"\"", "\n", "y", "=", "jax", ".", "lax", ".", "all_gather", "(", "x", ",", "axis_name", "=", "axis_name", ")", "\n", "assert", "y", ".", "shape", "[", "1", ":", "]", "==", "x", ".", "shape", "\n", "return", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", "*", "x", ".", "shape", "[", "0", "]", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.generate_image_grids": [[92, 113], ["int", "utils.generate_image_grids.image_grid"], "function", ["None"], ["", "def", "generate_image_grids", "(", "images", ":", "chex", ".", "Array", ")", ":", "\n", "  ", "\"\"\"Simple helper to generate a single image from a mini batch.\"\"\"", "\n", "\n", "def", "image_grid", "(", "nrow", ",", "ncol", ",", "imagevecs", ",", "imshape", ")", ":", "\n", "    ", "images", "=", "iter", "(", "imagevecs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imshape", ")", ")", "\n", "return", "jnp", ".", "squeeze", "(", "\n", "jnp", ".", "vstack", "(", "[", "\n", "jnp", ".", "hstack", "(", "[", "next", "(", "images", ")", "\n", "for", "_", "in", "range", "(", "ncol", ")", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "for", "_", "in", "range", "(", "nrow", ")", "\n", "]", ")", ")", "\n", "\n", "", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "grid_size", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "batch_size", ")", ")", ")", "\n", "\n", "image_shape", "=", "images", ".", "shape", "[", "1", ":", "]", "\n", "return", "image_grid", "(", "\n", "nrow", "=", "grid_size", ",", "\n", "ncol", "=", "grid_size", ",", "\n", "imagevecs", "=", "images", "[", "0", ":", "grid_size", "**", "2", "]", ",", "\n", "imshape", "=", "image_shape", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.clip_by_global_norm": [[116, 122], ["utils.global_norm", "jax.minimum", "jax.tree_map", "jax.tree_map"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.global_norm"], ["", "def", "clip_by_global_norm", "(", "pytree", ",", "clip_norm", ",", "use_norm", "=", "None", ")", ":", "\n", "  ", "if", "use_norm", "is", "None", ":", "\n", "    ", "use_norm", "=", "global_norm", "(", "pytree", ")", "\n", "assert", "use_norm", ".", "shape", "==", "(", ")", "# pylint: disable=g-explicit-bool-comparison", "\n", "", "scale", "=", "clip_norm", "*", "jnp", ".", "minimum", "(", "1.0", "/", "use_norm", ",", "1.0", "/", "clip_norm", ")", "\n", "return", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", "*", "scale", ",", "pytree", ")", ",", "use_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.global_norm": [[124, 127], ["jax.sqrt", "jax.sum", "jax.asarray", "jax.sum", "jax.square", "jax.tree_leaves", "jax.tree_leaves"], "function", ["None"], ["", "def", "global_norm", "(", "pytree", ")", ":", "\n", "  ", "return", "jnp", ".", "sqrt", "(", "jnp", ".", "sum", "(", "jnp", ".", "asarray", "(", "\n", "[", "jnp", ".", "sum", "(", "jnp", ".", "square", "(", "x", ")", ")", "for", "x", "in", "jax", ".", "tree_leaves", "(", "pytree", ")", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.apply_ema": [[129, 131], ["jax.tree_multimap", "jax.tree_multimap"], "function", ["None"], ["", "def", "apply_ema", "(", "decay", ",", "avg", ",", "new", ")", ":", "\n", "  ", "return", "jax", ".", "tree_multimap", "(", "lambda", "a", ",", "b", ":", "decay", "*", "a", "+", "(", "1.", "-", "decay", ")", "*", "b", ",", "avg", ",", "new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.get_metrics": [[136, 142], ["jax.tree_map", "jax.tree_map", "jax.device_get", "jax.device_get", "utils.stack_forest"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.None.utils.stack_forest"], ["def", "get_metrics", "(", "device_metrics", ")", ":", "\n", "# We select the first element of x in order to get a single copy of a", "\n", "# device-replicated metric.", "\n", "  ", "_device_metrics", "=", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "device_metrics", ")", "\n", "metrics_np", "=", "jax", ".", "device_get", "(", "_device_metrics", ")", "\n", "return", "stack_forest", "(", "metrics_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.stack_forest": [[144, 147], ["jax.tree_multimap", "jax.tree_multimap", "numpy.stack"], "function", ["None"], ["", "def", "stack_forest", "(", "forest", ")", ":", "\n", "  ", "stack_args", "=", "lambda", "*", "args", ":", "np", ".", "stack", "(", "args", ")", "\n", "return", "jax", ".", "tree_multimap", "(", "stack_args", ",", "*", "forest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.average_appended_metrics": [[149, 154], ["metrics[].keys", "numpy.mean", "range", "len"], "function", ["None"], ["", "def", "average_appended_metrics", "(", "metrics", ")", ":", "\n", "  ", "ks", "=", "metrics", "[", "0", "]", ".", "keys", "(", ")", "\n", "result", "=", "{", "k", ":", "np", ".", "mean", "(", "[", "metrics", "[", "i", "]", "[", "k", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metrics", ")", ")", "]", ")", "for", "k", "in", "ks", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.create_custom_writer": [[159, 171], ["clu.metric_writers.multi_writer.MultiWriter", "utils.CustomLoggingWriter", "clu.metric_writers.summary_writer.SummaryWriter", "clu.metric_writers.async_writer.AsyncMultiWriter", "clu.metric_writers.async_writer.AsyncWriter", "utils.CustomLoggingWriter", "utils.CustomLoggingWriter"], "function", ["None"], ["def", "create_custom_writer", "(", "logdir", ":", "str", ",", "process_index", ":", "int", ",", "\n", "asynchronous", "=", "True", ")", "->", "MetricWriter", ":", "\n", "  ", "\"\"\"Adapted from clu.metric_writers.__init__\"\"\"", "\n", "if", "process_index", ">", "0", ":", "\n", "    ", "if", "asynchronous", ":", "\n", "      ", "return", "AsyncWriter", "(", "CustomLoggingWriter", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "CustomLoggingWriter", "(", ")", "\n", "", "", "writers", "=", "[", "CustomLoggingWriter", "(", ")", ",", "SummaryWriter", "(", "logdir", ")", "]", "\n", "if", "asynchronous", ":", "\n", "    ", "return", "AsyncMultiWriter", "(", "writers", ")", "\n", "", "return", "MultiWriter", "(", "writers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.None.utils.with_verbosity": [[199, 205], ["absl.logging.get_verbosity", "absl.logging.set_verbosity", "fn", "absl.logging.set_verbosity"], "function", ["None"], ["def", "with_verbosity", "(", "temporary_verbosity_level", ",", "fn", ")", ":", "\n", "  ", "old_verbosity_level", "=", "logging", ".", "get_verbosity", "(", ")", "\n", "logging", ".", "set_verbosity", "(", "temporary_verbosity_level", ")", "\n", "result", "=", "fn", "(", ")", "\n", "logging", ".", "set_verbosity", "(", "old_verbosity_level", ")", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet64.d": [[19, 22], ["ml_collections.ConfigDict"], "function", ["None"], ["def", "d", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Helper of creating a config dict.\"\"\"", "\n", "return", "ml_collections", ".", "ConfigDict", "(", "initial_dictionary", "=", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet64.get_config": [[24, 83], ["ml_collections.ConfigDict", "imagenet64.d", "imagenet64.d", "imagenet64.d", "imagenet64.d", "imagenet64.d"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d"], ["", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Get the hyperparameters for the model\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "exp_name", "=", "\"exp_vdm\"", "\n", "config", ".", "model_type", "=", "\"model_vdm\"", "\n", "config", ".", "ckpt_restore_dir", "=", "'None'", "\n", "\n", "config", ".", "data", "=", "d", "(", "\n", "dataset", "=", "'imagenet64'", ",", "# cifar10/cifar10_aug/imagenet32/imagenet64", "\n", "ignore_cache", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "model", "=", "d", "(", "\n", "vocab_size", "=", "256", ",", "\n", "sample_softmax", "=", "False", ",", "\n", "antithetic_time_sampling", "=", "True", ",", "\n", "with_fourier_features", "=", "True", ",", "\n", "with_attention", "=", "False", ",", "\n", "\n", "# configurations of the noise schedule", "\n", "gamma_type", "=", "'learnable_scalar'", ",", "# learnable_scalar / learnable_nnet / fixed", "\n", "gamma_min", "=", "-", "13.3", ",", "\n", "gamma_max", "=", "5.", ",", "\n", "\n", "# configurations of the score model", "\n", "sm_n_timesteps", "=", "0", ",", "\n", "sm_n_embd", "=", "256", ",", "\n", "sm_n_layer", "=", "64", ",", "\n", "sm_pdrop", "=", "0.1", ",", "\n", ")", "\n", "\n", "config", ".", "training", "=", "d", "(", "\n", "seed", "=", "1", ",", "\n", "substeps", "=", "1000", ",", "\n", "num_steps_lr_warmup", "=", "100", ",", "\n", "num_steps_train", "=", "10_000_000", ",", "\n", "num_steps_eval", "=", "100", ",", "\n", "batch_size_train", "=", "128", ",", "\n", "batch_size_eval", "=", "128", ",", "\n", "steps_per_logging", "=", "1000", ",", "\n", "steps_per_eval", "=", "10_000", ",", "\n", "steps_per_save", "=", "10_000", ",", "\n", "profile", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "optimizer", "=", "d", "(", "\n", "name", "=", "'adamw'", ",", "\n", "args", "=", "d", "(", "\n", "b1", "=", "0.9", ",", "\n", "b2", "=", "0.99", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", ")", ",", "\n", "learning_rate", "=", "2e-4", ",", "\n", "lr_decay", "=", "False", ",", "\n", "ema_rate", "=", "0.9999", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10_aug_paper.d": [[19, 22], ["ml_collections.ConfigDict"], "function", ["None"], ["def", "d", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Helper of creating a config dict.\"\"\"", "\n", "return", "ml_collections", ".", "ConfigDict", "(", "initial_dictionary", "=", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10_aug_paper.get_config": [[24, 83], ["ml_collections.ConfigDict", "cifar10_aug_paper.d", "cifar10_aug_paper.d", "cifar10_aug_paper.d", "cifar10_aug_paper.d", "cifar10_aug_paper.d"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d"], ["", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Get the hyperparameters for the model\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "exp_name", "=", "\"exp_vdm\"", "\n", "config", ".", "model_type", "=", "\"model_vdm\"", "\n", "config", ".", "ckpt_restore_dir", "=", "'None'", "\n", "\n", "config", ".", "data", "=", "d", "(", "\n", "dataset", "=", "'cifar10_aug'", ",", "# cifar10/cifar10_aug/cifar10_aug_with_channel", "\n", "ignore_cache", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "model", "=", "d", "(", "\n", "vocab_size", "=", "256", ",", "\n", "sample_softmax", "=", "False", ",", "\n", "antithetic_time_sampling", "=", "True", ",", "\n", "with_fourier_features", "=", "True", ",", "\n", "with_attention", "=", "True", ",", "\n", "\n", "# configurations of the noise schedule", "\n", "gamma_type", "=", "'learnable_nnet'", ",", "# learnable_scalar / learnable_nnet / fixed", "\n", "gamma_min", "=", "-", "13.3", ",", "\n", "gamma_max", "=", "5.", ",", "\n", "\n", "# configurations of the score model", "\n", "sm_n_timesteps", "=", "0", ",", "\n", "sm_n_embd", "=", "256", ",", "\n", "sm_n_layer", "=", "32", ",", "\n", "sm_pdrop", "=", "0.05", ",", "\n", ")", "\n", "\n", "config", ".", "training", "=", "d", "(", "\n", "seed", "=", "1", ",", "\n", "substeps", "=", "10", ",", "\n", "num_steps_lr_warmup", "=", "100", ",", "\n", "num_steps_train", "=", "100_000_000", ",", "\n", "num_steps_eval", "=", "100", ",", "\n", "batch_size_train", "=", "1024", ",", "\n", "batch_size_eval", "=", "1024", ",", "\n", "steps_per_logging", "=", "1000", ",", "\n", "steps_per_eval", "=", "10_000", ",", "\n", "steps_per_save", "=", "10_000", ",", "\n", "profile", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "optimizer", "=", "d", "(", "\n", "name", "=", "'adamw'", ",", "\n", "args", "=", "d", "(", "\n", "b1", "=", "0.9", ",", "\n", "b2", "=", "0.99", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", ")", ",", "\n", "learning_rate", "=", "2e-4", ",", "\n", "lr_decay", "=", "False", ",", "\n", "ema_rate", "=", "0.9999", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10_aug.d": [[19, 22], ["ml_collections.ConfigDict"], "function", ["None"], ["def", "d", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Helper of creating a config dict.\"\"\"", "\n", "return", "ml_collections", ".", "ConfigDict", "(", "initial_dictionary", "=", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10_aug.get_config": [[24, 83], ["ml_collections.ConfigDict", "cifar10_aug.d", "cifar10_aug.d", "cifar10_aug.d", "cifar10_aug.d", "cifar10_aug.d"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d"], ["", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Get the hyperparameters for the model\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "exp_name", "=", "\"exp_vdm\"", "\n", "config", ".", "model_type", "=", "\"model_vdm\"", "\n", "config", ".", "ckpt_restore_dir", "=", "'None'", "\n", "\n", "config", ".", "data", "=", "d", "(", "\n", "dataset", "=", "'cifar10_aug'", ",", "# cifar10/cifar10_aug/cifar10_aug_with_channel", "\n", "ignore_cache", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "model", "=", "d", "(", "\n", "vocab_size", "=", "256", ",", "\n", "sample_softmax", "=", "False", ",", "\n", "antithetic_time_sampling", "=", "True", ",", "\n", "with_fourier_features", "=", "True", ",", "\n", "with_attention", "=", "False", ",", "#True in paper version", "\n", "\n", "# configurations of the noise schedule", "\n", "gamma_type", "=", "'learnable_nnet'", ",", "# learnable_scalar / learnable_nnet / fixed", "\n", "gamma_min", "=", "-", "13.3", ",", "\n", "gamma_max", "=", "5.", ",", "\n", "\n", "# configurations of the score model", "\n", "sm_n_timesteps", "=", "0", ",", "\n", "sm_n_embd", "=", "256", ",", "\n", "sm_n_layer", "=", "32", ",", "\n", "sm_pdrop", "=", "0.05", ",", "\n", ")", "\n", "\n", "config", ".", "training", "=", "d", "(", "\n", "seed", "=", "1", ",", "\n", "substeps", "=", "10", ",", "\n", "num_steps_lr_warmup", "=", "100", ",", "\n", "num_steps_train", "=", "100_000_000", ",", "\n", "num_steps_eval", "=", "100", ",", "\n", "batch_size_train", "=", "768", ",", "#1024 in paper version", "\n", "batch_size_eval", "=", "1024", ",", "\n", "steps_per_logging", "=", "1000", ",", "\n", "steps_per_eval", "=", "10_000", ",", "\n", "steps_per_save", "=", "10_000", ",", "\n", "profile", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "optimizer", "=", "d", "(", "\n", "name", "=", "'adamw'", ",", "\n", "args", "=", "d", "(", "\n", "b1", "=", "0.9", ",", "\n", "b2", "=", "0.99", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", ")", ",", "\n", "learning_rate", "=", "1e-4", ",", "#2e-4 in paper version", "\n", "lr_decay", "=", "False", ",", "\n", "ema_rate", "=", "0.9999", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10.d": [[19, 22], ["ml_collections.ConfigDict"], "function", ["None"], ["def", "d", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Helper of creating a config dict.\"\"\"", "\n", "return", "ml_collections", ".", "ConfigDict", "(", "initial_dictionary", "=", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.configs.cifar10.get_config": [[24, 83], ["ml_collections.ConfigDict", "cifar10.d", "cifar10.d", "cifar10.d", "cifar10.d", "cifar10.d"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d"], ["", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Get the hyperparameters for the model\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "exp_name", "=", "\"exp_vdm\"", "\n", "config", ".", "model_type", "=", "\"model_vdm\"", "\n", "config", ".", "ckpt_restore_dir", "=", "'None'", "\n", "\n", "config", ".", "data", "=", "d", "(", "\n", "dataset", "=", "'cifar10'", ",", "# cifar10/cifar10_aug", "\n", "ignore_cache", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "model", "=", "d", "(", "\n", "vocab_size", "=", "256", ",", "\n", "sample_softmax", "=", "False", ",", "\n", "antithetic_time_sampling", "=", "True", ",", "\n", "with_fourier_features", "=", "True", ",", "\n", "with_attention", "=", "False", ",", "\n", "\n", "# configurations of the noise schedule", "\n", "gamma_type", "=", "'learnable_scalar'", ",", "# learnable_scalar / learnable_nnet / fixed", "\n", "gamma_min", "=", "-", "13.3", ",", "\n", "gamma_max", "=", "5.", ",", "\n", "\n", "# configurations of the score model", "\n", "sm_n_timesteps", "=", "0", ",", "\n", "sm_n_embd", "=", "128", ",", "\n", "sm_n_layer", "=", "32", ",", "\n", "sm_pdrop", "=", "0.1", ",", "\n", ")", "\n", "\n", "config", ".", "training", "=", "d", "(", "\n", "seed", "=", "1", ",", "\n", "substeps", "=", "1000", ",", "\n", "num_steps_lr_warmup", "=", "100", ",", "\n", "num_steps_train", "=", "10_000_000", ",", "\n", "num_steps_eval", "=", "100", ",", "\n", "batch_size_train", "=", "128", ",", "\n", "batch_size_eval", "=", "128", ",", "\n", "steps_per_logging", "=", "1000", ",", "\n", "steps_per_eval", "=", "10_000", ",", "\n", "steps_per_save", "=", "10_000", ",", "\n", "profile", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "optimizer", "=", "d", "(", "\n", "name", "=", "'adamw'", ",", "\n", "args", "=", "d", "(", "\n", "b1", "=", "0.9", ",", "\n", "b2", "=", "0.99", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", ")", ",", "\n", "learning_rate", "=", "2e-4", ",", "\n", "lr_decay", "=", "False", ",", "\n", "ema_rate", "=", "0.9999", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d": [[19, 22], ["ml_collections.ConfigDict"], "function", ["None"], ["def", "d", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Helper of creating a config dict.\"\"\"", "\n", "return", "ml_collections", ".", "ConfigDict", "(", "initial_dictionary", "=", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.get_config": [[24, 83], ["ml_collections.ConfigDict", "imagenet32.d", "imagenet32.d", "imagenet32.d", "imagenet32.d", "imagenet32.d"], "function", ["home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d", "home.repos.pwc.inspect_result.google-research_vdm.configs.imagenet32.d"], ["", "def", "get_config", "(", ")", ":", "\n", "  ", "\"\"\"Get the hyperparameters for the model\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "exp_name", "=", "\"exp_vdm\"", "\n", "config", ".", "model_type", "=", "\"model_vdm\"", "\n", "config", ".", "ckpt_restore_dir", "=", "'None'", "\n", "\n", "config", ".", "data", "=", "d", "(", "\n", "dataset", "=", "'imagenet32'", ",", "# cifar10/cifar10_aug/imagenet32", "\n", "ignore_cache", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "model", "=", "d", "(", "\n", "vocab_size", "=", "256", ",", "\n", "sample_softmax", "=", "False", ",", "\n", "antithetic_time_sampling", "=", "True", ",", "\n", "with_fourier_features", "=", "True", ",", "\n", "with_attention", "=", "False", ",", "\n", "\n", "# configurations of the noise schedule", "\n", "gamma_type", "=", "'learnable_scalar'", ",", "# learnable_scalar / learnable_nnet / fixed", "\n", "gamma_min", "=", "-", "13.3", ",", "\n", "gamma_max", "=", "5.", ",", "\n", "\n", "# configurations of the score model", "\n", "sm_n_timesteps", "=", "0", ",", "\n", "sm_n_embd", "=", "256", ",", "\n", "sm_n_layer", "=", "32", ",", "\n", "sm_pdrop", "=", "0.1", ",", "\n", ")", "\n", "\n", "config", ".", "training", "=", "d", "(", "\n", "seed", "=", "1", ",", "\n", "substeps", "=", "1000", ",", "\n", "num_steps_lr_warmup", "=", "100", ",", "\n", "num_steps_train", "=", "10_000_000", ",", "\n", "num_steps_eval", "=", "100", ",", "\n", "batch_size_train", "=", "128", ",", "\n", "batch_size_eval", "=", "128", ",", "\n", "steps_per_logging", "=", "1000", ",", "\n", "steps_per_eval", "=", "10_000", ",", "\n", "steps_per_save", "=", "10_000", ",", "\n", "profile", "=", "False", ",", "\n", ")", "\n", "\n", "config", ".", "optimizer", "=", "d", "(", "\n", "name", "=", "'adamw'", ",", "\n", "args", "=", "d", "(", "\n", "b1", "=", "0.9", ",", "\n", "b2", "=", "0.99", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", ")", ",", "\n", "learning_rate", "=", "2e-4", ",", "\n", "lr_decay", "=", "False", ",", "\n", "ema_rate", "=", "0.9999", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "", ""]]}