{"home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice": [[42, 46], ["None"], "function", ["None"], ["def", "_slice", "(", "_x", ",", "n", ",", "dim", ")", ":", "\n", "    ", "if", "_x", ".", "ndim", "==", "3", ":", "\n", "        ", "return", "_x", "[", ":", ",", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "", "return", "_x", "[", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.zipp": [[49, 52], ["params.iteritems", "tparams[].set_value"], "function", ["None"], ["", "def", "zipp", "(", "params", ",", "tparams", ")", ":", "\n", "    ", "for", "kk", ",", "vv", "in", "params", ".", "iteritems", "(", ")", ":", "\n", "        ", "tparams", "[", "kk", "]", ".", "set_value", "(", "vv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.unzip": [[55, 60], ["collections.OrderedDict", "zipped.iteritems", "vv.get_value"], "function", ["None"], ["", "", "def", "unzip", "(", "zipped", ")", ":", "\n", "    ", "new_params", "=", "OrderedDict", "(", ")", "\n", "for", "kk", ",", "vv", "in", "zipped", ".", "iteritems", "(", ")", ":", "\n", "        ", "new_params", "[", "kk", "]", "=", "vv", ".", "get_value", "(", ")", "\n", "", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.itemlist": [[63, 65], ["tparams.iteritems"], "function", ["None"], ["", "def", "itemlist", "(", "tparams", ")", ":", "\n", "    ", "return", "[", "vv", "for", "kk", ",", "vv", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.dropout_layer": [[68, 75], ["theano.switch", "trng.binomial"], "function", ["None"], ["", "def", "dropout_layer", "(", "state_before", ",", "use_noise", ",", "trng", ")", ":", "\n", "    ", "proj", "=", "tensor", ".", "switch", "(", "\n", "use_noise", ",", "\n", "state_before", "*", "trng", ".", "binomial", "(", "state_before", ".", "shape", ",", "p", "=", "0.5", ",", "n", "=", "1", ",", "\n", "dtype", "=", "state_before", ".", "dtype", ")", ",", "\n", "state_before", "*", "0.5", ")", "\n", "return", "proj", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p": [[78, 80], ["None"], "function", ["None"], ["", "def", "_p", "(", "pp", ",", "name", ")", ":", "\n", "    ", "return", "'%s_%s'", "%", "(", "pp", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.init_tparams": [[83, 88], ["collections.OrderedDict", "params.iteritems", "theano.shared", "theano.shared"], "function", ["None"], ["", "def", "init_tparams", "(", "params", ")", ":", "\n", "    ", "tparams", "=", "OrderedDict", "(", ")", "\n", "for", "kk", ",", "pp", "in", "params", ".", "iteritems", "(", ")", ":", "\n", "        ", "tparams", "[", "kk", "]", "=", "theano", ".", "shared", "(", "params", "[", "kk", "]", ",", "name", "=", "kk", ")", "\n", "", "return", "tparams", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.load_params": [[91, 100], ["numpy.load", "params.iteritems", "warnings.warn"], "function", ["None"], ["", "def", "load_params", "(", "path", ",", "params", ")", ":", "\n", "    ", "pp", "=", "numpy", ".", "load", "(", "path", ")", "\n", "for", "kk", ",", "vv", "in", "params", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "kk", "not", "in", "pp", ":", "\n", "            ", "warnings", ".", "warn", "(", "'%s is not in the archive'", "%", "kk", ")", "\n", "continue", "\n", "", "params", "[", "kk", "]", "=", "pp", "[", "kk", "]", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.get_layer": [[102, 105], ["eval", "eval"], "function", ["None"], ["", "def", "get_layer", "(", "name", ")", ":", "\n", "    ", "fns", "=", "layers", "[", "name", "]", "\n", "return", "(", "eval", "(", "fns", "[", "0", "]", ")", ",", "eval", "(", "fns", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight": [[108, 112], ["numpy.linalg.svd", "u.astype", "numpy.random.randn"], "function", ["None"], ["", "def", "ortho_weight", "(", "ndim", ",", "scale", "=", "0.01", ")", ":", "\n", "    ", "W", "=", "scale", "*", "numpy", ".", "random", ".", "randn", "(", "ndim", ",", "ndim", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "W", ")", "\n", "return", "u", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector": [[114, 117], ["V.astype", "numpy.random.randn"], "function", ["None"], ["", "def", "norm_vector", "(", "nin", ",", "scale", "=", "0.01", ")", ":", "\n", "    ", "V", "=", "scale", "*", "numpy", ".", "random", ".", "randn", "(", "nin", ")", "\n", "return", "V", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight": [[119, 127], ["ortho_weight.astype", "mixer.ortho_weight", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight"], ["", "def", "norm_weight", "(", "nin", ",", "nout", "=", "None", ",", "scale", "=", "0.01", ",", "ortho", "=", "True", ")", ":", "\n", "    ", "if", "nout", "is", "None", ":", "\n", "        ", "nout", "=", "nin", "\n", "", "if", "nout", "==", "nin", "and", "ortho", ":", "\n", "        ", "W", "=", "ortho_weight", "(", "nin", ")", "\n", "", "else", ":", "\n", "        ", "W", "=", "scale", "*", "numpy", ".", "random", ".", "randn", "(", "nin", ",", "nout", ")", "\n", "", "return", "W", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh": [[129, 131], ["theano.tanh"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "return", "tensor", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.linear": [[133, 135], ["None"], "function", ["None"], ["", "def", "linear", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate": [[137, 180], ["sum", "range", "range", "theano.zeros", "range", "range", "theano.set_subtensor", "slice", "slice", "slice"], "function", ["None"], ["", "def", "concatenate", "(", "tensor_list", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Alternative implementation of `theano.tensor.concatenate`.\n    This function does exactly the same thing, but contrary to Theano's own\n    implementation, the gradient is implemented on the GPU.\n    Backpropagating through `theano.tensor.concatenate` yields slowdowns\n    because the inverse operation (splitting) needs to be done on the CPU.\n    This implementation does not have that problem.\n    :usage:\n        >>> x, y = theano.tensor.matrices('x', 'y')\n        >>> c = concatenate([x, y], axis=1)\n    :parameters:\n        - tensor_list : list\n            list of Theano tensor expressions that should be concatenated.\n        - axis : int\n            the tensors will be joined along this axis.\n    :returns:\n        - out : tensor\n            the concatenated tensor expression.\n    \"\"\"", "\n", "concat_size", "=", "sum", "(", "tt", ".", "shape", "[", "axis", "]", "for", "tt", "in", "tensor_list", ")", "\n", "\n", "output_shape", "=", "(", ")", "\n", "for", "k", "in", "range", "(", "axis", ")", ":", "\n", "        ", "output_shape", "+=", "(", "tensor_list", "[", "0", "]", ".", "shape", "[", "k", "]", ",", ")", "\n", "", "output_shape", "+=", "(", "concat_size", ",", ")", "\n", "for", "k", "in", "range", "(", "axis", "+", "1", ",", "tensor_list", "[", "0", "]", ".", "ndim", ")", ":", "\n", "        ", "output_shape", "+=", "(", "tensor_list", "[", "0", "]", ".", "shape", "[", "k", "]", ",", ")", "\n", "\n", "", "out", "=", "tensor", ".", "zeros", "(", "output_shape", ",", "dtype", "=", "tensor_list", "[", "0", "]", ".", "dtype", ")", "\n", "offset", "=", "0", "\n", "for", "tt", "in", "tensor_list", ":", "\n", "        ", "indices", "=", "(", ")", "\n", "for", "k", "in", "range", "(", "axis", ")", ":", "\n", "            ", "indices", "+=", "(", "slice", "(", "None", ")", ",", ")", "\n", "", "indices", "+=", "(", "slice", "(", "offset", ",", "offset", "+", "tt", ".", "shape", "[", "axis", "]", ")", ",", ")", "\n", "for", "k", "in", "range", "(", "axis", "+", "1", ",", "tensor_list", "[", "0", "]", ".", "ndim", ")", ":", "\n", "            ", "indices", "+=", "(", "slice", "(", "None", ")", ",", ")", "\n", "\n", "", "out", "=", "tensor", ".", "set_subtensor", "(", "out", "[", "indices", "]", ",", "tt", ")", "\n", "offset", "+=", "tt", ".", "shape", "[", "axis", "]", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_fflayer": [[183, 193], ["mixer.norm_weight", "numpy.zeros().astype", "mixer._p", "mixer._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_fflayer", "(", "options", ",", "params", ",", "prefix", "=", "'ff'", ",", "nin", "=", "None", ",", "nout", "=", "None", ",", "\n", "ortho", "=", "True", ",", "scale", "=", "0.01", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'dim_proj'", "]", "\n", "", "if", "nout", "is", "None", ":", "\n", "        ", "nout", "=", "options", "[", "'dim_proj'", "]", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", "=", "norm_weight", "(", "nin", ",", "nout", ",", "scale", "=", "scale", ",", "ortho", "=", "ortho", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "nout", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.fflayer": [[195, 200], ["eval", "theano.dot", "mixer._p", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "fflayer", "(", "tparams", ",", "state_below", ",", "options", ",", "prefix", "=", "'rconv'", ",", "\n", "activ", "=", "'lambda x: tensor.tanh(x)'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "eval", "(", "activ", ")", "(", "\n", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_ffflayer": [[203, 216], ["mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_ffflayer", "(", "options", ",", "params", ",", "prefix", "=", "'fff'", ",", "nin1", "=", "None", ",", "nin2", "=", "None", ",", "nout", "=", "None", ",", "\n", "ortho", "=", "True", ",", "scale1", "=", "0.01", ",", "scale2", "=", "0.01", ")", ":", "\n", "    ", "if", "nin1", "is", "None", ":", "\n", "        ", "nin1", "=", "options", "[", "'dim_proj'", "]", "\n", "", "if", "nin2", "is", "None", ":", "\n", "        ", "nin2", "=", "options", "[", "'dim_proj'", "]", "\n", "", "if", "nout", "is", "None", ":", "\n", "        ", "nout", "=", "options", "[", "'dim_proj'", "]", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", "=", "norm_weight", "(", "nin1", ",", "nout", ",", "scale", "=", "scale1", ",", "ortho", "=", "ortho", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", "=", "norm_weight", "(", "nin2", ",", "nout", ",", "scale", "=", "scale2", ",", "ortho", "=", "ortho", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "nout", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ffflayer": [[218, 224], ["eval", "theano.dot", "theano.dot", "mixer._p", "mixer._p", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "ffflayer", "(", "tparams", ",", "state_below1", ",", "state_below2", ",", "options", ",", "prefix", "=", "'rconv'", ",", "\n", "activ", "=", "'lambda x: tensor.tanh(x)'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "eval", "(", "activ", ")", "(", "\n", "tensor", ".", "dot", "(", "state_below1", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "\n", "tensor", ".", "dot", "(", "state_below2", ",", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", ")", "+", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_gru": [[227, 255], ["numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "numpy.zeros", "mixer.ortho_weight", "mixer.ortho_weight", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_gru", "(", "options", ",", "params", ",", "prefix", "=", "'gru'", ",", "nin", "=", "None", ",", "dim", "=", "None", ")", ":", "\n", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'dim_proj'", "]", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "options", "[", "'rnn_dim'", "]", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "W", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "nin", ",", "dim", ")", ",", "\n", "norm_weight", "(", "nin", ",", "dim", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", "=", "W", "\n", "params", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for gates", "\n", "U", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim", ")", ",", "\n", "ortho_weight", "(", "dim", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", "=", "U", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx", "=", "norm_weight", "(", "nin", ",", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", "=", "Wx", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux", "=", "ortho_weight", "(", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "=", "Ux", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.gru_layer": [[257, 341], ["theano.alloc", "theano.alloc", "theano.dot", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.dot", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "gru_layer", "(", "tparams", ",", "state_below", ",", "options", ",", "prefix", "=", "'gru'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "init_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "one_step", ":", "\n", "        ", "assert", "init_state", ",", "'previous state must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "state_belowx", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_", "=", "state_below_", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx", "=", "state_belowx", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "state_below_", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "\n", "state_belowx", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "\n", "", "else", ":", "\n", "# projected x to hidden state proposal", "\n", "        ", "state_below_", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "\n", "# projected x to gates", "\n", "state_belowx", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state", "is", "None", ":", "\n", "        ", "init_state", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim", ")", "\n", "\n", "# step function to be used by scan", "\n", "", "def", "_step", "(", "m_", ",", "x_", ",", "xx_", ",", "h_", ",", "U", ",", "Ux", ")", ":", "\n", "        ", "preact", "=", "tensor", ".", "dot", "(", "h_", ",", "U", ")", "\n", "preact", "+=", "x_", "\n", "preact", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact", ")", "\n", "\n", "# reset and update gates", "\n", "r", "=", "_slice", "(", "preact", ",", "0", ",", "dim", ")", "\n", "u", "=", "_slice", "(", "preact", ",", "1", ",", "dim", ")", "\n", "\n", "# compute the hidden state proposal", "\n", "preactx", "=", "tensor", ".", "dot", "(", "h_", ",", "Ux", ")", "\n", "preactx", "*=", "r", "\n", "preactx", "+=", "xx_", "\n", "\n", "# hidden state proposal", "\n", "h", "=", "tensor", ".", "tanh", "(", "preactx", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h", "=", "u", "*", "h_", "+", "(", "1.", "-", "u", ")", "*", "h", "\n", "h", "=", "m_", "[", ":", ",", "None", "]", "*", "h", "+", "(", "1.", "-", "m_", ")", "[", ":", ",", "None", "]", "*", "h_", "\n", "\n", "return", "h", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_", ",", "state_belowx", "]", "\n", "\n", "shared_vars", "=", "[", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "init_state", "]", ",", "\n", "non_sequences", "=", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_gru_decoder": [[344, 364], ["mixer.param_init_gru", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_gru", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_gru_decoder", "(", "options", ",", "params", ",", "prefix", "=", "'gru_decoder'", ",", "nin", "=", "None", ",", "\n", "dim", "=", "None", ",", "dimctx", "=", "None", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'dim'", "]", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "options", "[", "'dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'dim'", "]", "\n", "\n", "", "params", "=", "param_init_gru", "(", "options", ",", "params", ",", "prefix", ",", "nin", "=", "nin", ",", "dim", "=", "dim", ")", "\n", "\n", "# context to GRU gates", "\n", "Wc", "=", "norm_weight", "(", "dimctx", ",", "dim", "*", "2", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wc'", ")", "]", "=", "Wc", "\n", "\n", "# context to hidden proposal", "\n", "Wcx", "=", "norm_weight", "(", "dimctx", ",", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wcx'", ")", "]", "=", "Wcx", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.gru_decoder": [[366, 449], ["theano.dot", "theano.dot", "theano.alloc", "theano.alloc", "theano.dot", "theano.dot", "theano.dot", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.dot", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "gru_decoder", "(", "tparams", ",", "state_below", ",", "options", ",", "prefix", "=", "'gru_decoder'", ",", "\n", "mask", "=", "None", ",", "context", "=", "None", ",", "one_step", "=", "False", ",", "\n", "init_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state", ",", "'previous state must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "==", "3", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "# initial/previous state", "\n", "if", "init_state", "is", "None", ":", "\n", "        ", "init_state", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim", ")", "\n", "\n", "", "assert", "context", ".", "ndim", "==", "2", ",", "'Context must be 2-d: #sample x dim'", "\n", "# projected context to GRU gates", "\n", "pctx_", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wc'", ")", "]", ")", "\n", "# projected context to hidden state proposal", "\n", "pctxx_", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wcx'", ")", "]", ")", "\n", "\n", "# projected x to hidden state proposal", "\n", "state_below_", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "\n", "# projected x to gates", "\n", "state_belowx", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "# arguments    | sequences | outputs-info| non-seqs", "\n", "def", "_step", "(", "m_", ",", "x_", ",", "xx_", ",", "h_", ",", "pctx_", ",", "pctxx_", ",", "U", ",", "Ux", ")", ":", "\n", "        ", "preact", "=", "tensor", ".", "dot", "(", "h_", ",", "U", ")", "\n", "preact", "+=", "x_", "\n", "preact", "+=", "pctx_", "\n", "preact", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact", ")", "\n", "\n", "# reset and update gates", "\n", "r", "=", "_slice", "(", "preact", ",", "0", ",", "dim", ")", "\n", "u", "=", "_slice", "(", "preact", ",", "1", ",", "dim", ")", "\n", "\n", "# compute the hidden state proposal", "\n", "preactx", "=", "tensor", ".", "dot", "(", "h_", ",", "Ux", ")", "\n", "preactx", "*=", "r", "\n", "preactx", "+=", "xx_", "\n", "preactx", "+=", "pctxx_", "\n", "\n", "# hidden state proposal", "\n", "h", "=", "tensor", ".", "tanh", "(", "preactx", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h", "=", "u", "*", "h_", "+", "(", "1.", "-", "u", ")", "*", "h", "\n", "h", "=", "m_", "[", ":", ",", "None", "]", "*", "h", "+", "(", "1.", "-", "m_", ")", "[", ":", ",", "None", "]", "*", "h_", "\n", "\n", "return", "h", "\n", "# prepare scan arguments", "\n", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_", ",", "state_belowx", "]", "\n", "\n", "shared_vars", "=", "[", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state", ",", "pctx_", ",", "pctxx_", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "init_state", "]", ",", "\n", "non_sequences", "=", "[", "pctx_", ",", "pctxx_", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_gru_cond_decoder": [[452, 493], ["mixer.param_init_gru", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_gru", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_gru_cond_decoder", "(", "options", ",", "params", ",", "prefix", "=", "'gru_cond_decoder'", ",", "\n", "nin", "=", "None", ",", "dim", "=", "None", ",", "dimctx", "=", "None", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'dim'", "]", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "options", "[", "'dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'dim'", "]", "\n", "\n", "", "params", "=", "param_init_gru", "(", "options", ",", "params", ",", "prefix", ",", "nin", "=", "nin", ",", "dim", "=", "dim", ")", "\n", "\n", "# context to LSTM", "\n", "Wc", "=", "norm_weight", "(", "dimctx", ",", "dim", "*", "2", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wc'", ")", "]", "=", "Wc", "\n", "\n", "Wcx", "=", "norm_weight", "(", "dimctx", ",", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wcx'", ")", "]", "=", "Wcx", "\n", "\n", "# attention: prev -> hidden", "\n", "Wi_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wi_att'", ")", "]", "=", "Wi_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wc_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wc_att'", ")", "]", "=", "Wc_att", "\n", "\n", "# attention: LSTM -> hidden", "\n", "Wd_att", "=", "norm_weight", "(", "dim", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wd_att'", ")", "]", "=", "Wd_att", "\n", "\n", "# attention: hidden bias", "\n", "b_att", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "b_att", "\n", "\n", "# attention:", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_tt'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.gru_cond_decoder": [[495, 617], ["theano.dot", "theano.alloc", "theano.alloc", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.dot", "theano.dot", "theano.nnet.sigmoid", "mixer._slice"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice"], ["", "def", "gru_cond_decoder", "(", "tparams", ",", "state_below", ",", "options", ",", "prefix", "=", "'gru_cond_decoder'", ",", "\n", "mask", "=", "None", ",", "context", "=", "None", ",", "one_step", "=", "False", ",", "init_state", "=", "None", ",", "\n", "context_mask", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-d: #annotation x #sample x dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state", ",", "'previous state must be provided'", "\n", "\n", "", "nsteps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "==", "3", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "# sampling or beamsearch", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wcx'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "# initial/previous state", "\n", "if", "init_state", "is", "None", ":", "\n", "        ", "init_state", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim", ")", "\n", "\n", "# projected context", "\n", "", "pctx_", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wc_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "def", "_slice", "(", "_x", ",", "n", ",", "dim", ")", ":", "\n", "        ", "if", "_x", ".", "ndim", "==", "3", ":", "\n", "            ", "return", "_x", "[", ":", ",", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "", "return", "_x", "[", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "\n", "# projected x into hidden state proposal", "\n", "", "state_belowx", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "\n", "# projected x into gru gates", "\n", "state_below_", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "\n", "# projected x into attention module", "\n", "state_belowc", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wi_att'", ")", "]", ")", "\n", "\n", "# step function to be used by scan", "\n", "# arguments    | sequences      |  outputs-info   | non-seqs ...", "\n", "def", "_step_slice", "(", "m_", ",", "x_", ",", "xx_", ",", "xc_", ",", "h_", ",", "ctx_", ",", "alpha_", ",", "pctx_", ",", "cc_", ",", "\n", "U", ",", "Wc", ",", "Wd_att", ",", "U_att", ",", "c_tt", ",", "Ux", ",", "Wcx", ")", ":", "\n", "\n", "# attention", "\n", "# project previous hidden state", "\n", "        ", "pstate_", "=", "tensor", ".", "dot", "(", "h_", ",", "Wd_att", ")", "\n", "\n", "# add projected context", "\n", "pctx__", "=", "pctx_", "+", "pstate_", "[", "None", ",", ":", ",", ":", "]", "\n", "\n", "# add projected previous output", "\n", "pctx__", "+=", "xc_", "\n", "pctx__", "=", "tensor", ".", "tanh", "(", "pctx__", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "pctx__", ",", "U_att", ")", "+", "c_tt", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# conpute the weighted averages - current context to gru", "\n", "ctx_", "=", "(", "cc_", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "# conditional gru layer computations", "\n", "preact", "=", "tensor", ".", "dot", "(", "h_", ",", "U", ")", "\n", "preact", "+=", "x_", "\n", "preact", "+=", "tensor", ".", "dot", "(", "ctx_", ",", "Wc", ")", "\n", "preact", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact", ")", "\n", "\n", "# reset and update gates", "\n", "r", "=", "_slice", "(", "preact", ",", "0", ",", "dim", ")", "\n", "u", "=", "_slice", "(", "preact", ",", "1", ",", "dim", ")", "\n", "\n", "preactx", "=", "tensor", ".", "dot", "(", "h_", ",", "Ux", ")", "\n", "preactx", "*=", "r", "\n", "preactx", "+=", "xx_", "\n", "preactx", "+=", "tensor", ".", "dot", "(", "ctx_", ",", "Wcx", ")", "\n", "\n", "# hidden state proposal, leaky integrate and obtain next hidden state", "\n", "h", "=", "tensor", ".", "tanh", "(", "preactx", ")", "\n", "h", "=", "u", "*", "h_", "+", "(", "1.", "-", "u", ")", "*", "h", "\n", "h", "=", "m_", "[", ":", ",", "None", "]", "*", "h", "+", "(", "1.", "-", "m_", ")", "[", ":", ",", "None", "]", "*", "h_", "\n", "\n", "return", "h", ",", "ctx_", ",", "alpha", ".", "T", "\n", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_", ",", "state_belowx", ",", "state_belowc", "]", "\n", "_step", "=", "_step_slice", "\n", "\n", "shared_vars", "=", "[", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wd_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_tt'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wcx'", ")", "]", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "\n", "seqs", "+", "[", "init_state", ",", "None", ",", "None", ",", "pctx_", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "init_state", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "non_sequences", "=", "[", "pctx_", ",", "\n", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "nsteps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_two_layer_gru_decoder": [[619, 714], ["numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "numpy.concatenate", "mixer.norm_weight", "numpy.concatenate", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "numpy.zeros", "mixer.ortho_weight", "mixer.ortho_weight", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "numpy.zeros", "mixer.ortho_weight", "mixer.ortho_weight", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_two_layer_gru_decoder", "(", "options", ",", "params", ",", "\n", "prefix", "=", "'two_layer_gru_decoder'", ",", "\n", "nin", "=", "None", ",", "\n", "dim_char", "=", "None", ",", "\n", "dim_word", "=", "None", ",", "\n", "dimctx", "=", "None", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'n_words'", "]", "\n", "", "if", "dim_char", "is", "None", ":", "\n", "        ", "dim_char", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dim_word", "is", "None", ":", "\n", "        ", "dim_word", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'enc_dim'", "]", "*", "2", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "W_xc", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "nin", ",", "dim_char", ")", ",", "\n", "norm_weight", "(", "nin", ",", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "=", "W_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for gates", "\n", "U_cc", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim_char", ")", ",", "\n", "ortho_weight", "(", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", "=", "U_cc", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "=", "Wx_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", "=", "Ux_cc", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "W_cw", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dim_char", ",", "dim_word", ")", ",", "\n", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", "=", "W_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for gates", "\n", "U_ww", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim_word", ")", ",", "\n", "ortho_weight", "(", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", "=", "U_ww", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", "=", "Wx_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", "=", "Ux_ww", "\n", "\n", "# context to GRU gates: char-level", "\n", "W_ctxc", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dimctx", ",", "dim_char", ")", ",", "\n", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", "=", "W_ctxc", "\n", "\n", "# context to hidden proposal: char-level", "\n", "Wx_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", "=", "Wx_ctxc", "\n", "\n", "# context to GRU gates: word-level", "\n", "W_ctxw", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dimctx", ",", "dim_word", ")", ",", "\n", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", "=", "W_ctxw", "\n", "\n", "# context to hidden proposal: word-level", "\n", "Wx_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", "=", "Wx_ctxw", "\n", "\n", "# attention: prev -> hidden", "\n", "Winp_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "=", "Winp_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wctx_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", "=", "Wctx_att", "\n", "\n", "# attention: decoder -> hidden", "\n", "Wdec_att", "=", "norm_weight", "(", "dim_word", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", "=", "Wdec_att", "\n", "\n", "# attention: hidden bias", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# attention", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.two_layer_gru_decoder": [[716, 882], ["theano.alloc", "theano.dot", "theano.alloc", "theano.alloc", "theano.dot", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.tanh", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "two_layer_gru_decoder", "(", "tparams", ",", "state_below", ",", "options", ",", "\n", "prefix", "=", "'two_layer_gru_decoder'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "\n", "context", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "init_state_char", "=", "None", ",", "init_state_word", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-D: #annotation x #sample x #dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state_char", ",", "'previous state must be provided'", "\n", "assert", "init_state_word", ",", "'previous state must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim_char", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ".", "shape", "[", "1", "]", "\n", "dim_word", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "state_belowx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_emb", "=", "state_below_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx_emb", "=", "state_belowx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowctx_emb", "=", "state_belowctx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "state_below_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "state_belowx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", ")", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state_char", "is", "None", ":", "\n", "        ", "init_state_char", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_char", ")", "\n", "", "if", "init_state_word", "is", "None", ":", "\n", "        ", "init_state_word", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_word", ")", "\n", "\n", "# projected context", "\n", "", "proj_ctx", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "def", "_step", "(", "m_t", ",", "\n", "state_below_emb_t", ",", "\n", "state_belowx_emb_t", ",", "\n", "state_belowctx_emb_t", ",", "\n", "h_c_tm1", ",", "h_w_tm1", ",", "\n", "ctx_t", ",", "\n", "alpha_t", ",", "\n", "proj_ctx_all", ",", "\n", "context", ",", "\n", "U_cc", ",", "Ux_cc", ",", "\n", "W_cw", ",", "Wx_cw", ",", "U_ww", ",", "Ux_ww", ",", "b_w", ",", "bx_w", ",", "\n", "W_ctxc", ",", "Wx_ctxc", ",", "W_ctxw", ",", "Wx_ctxw", ",", "\n", "Wdec_att", ",", "\n", "U_att", ",", "c_att", ")", ":", "\n", "# ~~ attention ~~ #", "\n", "# project previous hidden states", "\n", "        ", "proj_state", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Wdec_att", ")", "\n", "\n", "# add projected context", "\n", "proj_ctx", "=", "proj_ctx_all", "+", "proj_state", "[", "None", ",", ":", ",", ":", "]", "+", "state_belowctx_emb_t", "\n", "proj_h", "=", "tensor", ".", "tanh", "(", "proj_ctx", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "proj_h", ",", "U_att", ")", "+", "c_att", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "#alpha = tensor.exp(alpha)", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# compute the weighted averages - current context to GRU", "\n", "ctx_t", "=", "(", "context", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "# compute char-level", "\n", "preact_c", "=", "tensor", ".", "dot", "(", "h_c_tm1", ",", "U_cc", ")", "+", "state_below_emb_t", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxc", ")", "\n", "preact_c", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_c", ")", "\n", "\n", "# update gates", "\n", "r_c", "=", "_slice", "(", "preact_c", ",", "0", ",", "dim_char", ")", "\n", "u_c", "=", "_slice", "(", "preact_c", ",", "1", ",", "dim_char", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_c", "=", "tensor", ".", "dot", "(", "h_c_tm1", ",", "Ux_cc", ")", "*", "r_c", "+", "state_belowx_emb_t", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxc", ")", "\n", "\n", "# hidden state proposal", "\n", "h_c", "=", "tensor", ".", "tanh", "(", "preactx_c", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h_c_t", "=", "u_c", "*", "h_c_tm1", "+", "(", "1.", "-", "u_c", ")", "*", "h_c", "\n", "h_c_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_c_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_c_tm1", "\n", "\n", "# compute char-level", "\n", "preact_w", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "U_ww", ")", "+", "tensor", ".", "dot", "(", "h_c_t", ",", "W_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxw", ")", "+", "b_w", "\n", "preact_w", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_w", ")", "\n", "\n", "# update gates", "\n", "r_w", "=", "_slice", "(", "preact_w", ",", "0", ",", "dim_char", ")", "\n", "u_w", "=", "_slice", "(", "preact_w", ",", "1", ",", "dim_char", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_w", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Ux_ww", ")", "*", "r_w", "+", "tensor", ".", "dot", "(", "h_c_t", ",", "Wx_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxw", ")", "+", "bx_w", "\n", "\n", "# hidden state proposal", "\n", "h_w", "=", "tensor", ".", "tanh", "(", "preactx_w", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h_w_t", "=", "u_w", "*", "h_w_tm1", "+", "(", "1.", "-", "u_w", ")", "*", "h_w", "\n", "h_w_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_w_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_w_tm1", "\n", "\n", "return", "h_c_t", ",", "h_w_t", ",", "ctx_t", ",", "alpha", ".", "T", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_emb", ",", "state_belowx_emb", ",", "state_belowctx_emb", "]", "\n", "\n", "shared_vars", "=", "[", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", ",", "\n", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state_char", ",", "init_state_word", ",", "\n", "None", ",", "None", ",", "\n", "proj_ctx", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "\n", "init_state_char", ",", "\n", "init_state_word", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "proj_ctx", ",", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_two_layer_gru_decoder_both": [[885, 982], ["numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "numpy.concatenate", "mixer.norm_weight", "numpy.concatenate", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "numpy.zeros", "mixer.ortho_weight", "mixer.ortho_weight", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "numpy.zeros", "mixer.ortho_weight", "mixer.ortho_weight", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer.norm_weight", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.concatenate", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_two_layer_gru_decoder_both", "(", "options", ",", "params", ",", "\n", "prefix", "=", "'two_layer_gru_decoder_both'", ",", "\n", "nin", "=", "None", ",", "\n", "dim_char", "=", "None", ",", "\n", "dim_word", "=", "None", ",", "\n", "dimctx", "=", "None", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'n_words'", "]", "\n", "", "if", "dim_char", "is", "None", ":", "\n", "        ", "dim_char", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dim_word", "is", "None", ":", "\n", "        ", "dim_word", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'enc_dim'", "]", "*", "2", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "W_xc", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "nin", ",", "dim_char", ")", ",", "\n", "norm_weight", "(", "nin", ",", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "=", "W_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for gates", "\n", "U_cc", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim_char", ")", ",", "\n", "ortho_weight", "(", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", "=", "U_cc", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "=", "Wx_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", "=", "Ux_cc", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "W_cw", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dim_char", ",", "dim_word", ")", ",", "\n", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", "=", "W_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for gates", "\n", "U_ww", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim_word", ")", ",", "\n", "ortho_weight", "(", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", "=", "U_ww", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", "=", "Wx_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", "=", "Ux_ww", "\n", "\n", "# context to GRU gates: char-level", "\n", "W_ctxc", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dimctx", ",", "dim_char", ")", ",", "\n", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", "=", "W_ctxc", "\n", "\n", "# context to hidden proposal: char-level", "\n", "Wx_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", "=", "Wx_ctxc", "\n", "\n", "# context to GRU gates: word-level", "\n", "W_ctxw", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "dimctx", ",", "dim_word", ")", ",", "\n", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", "=", "W_ctxw", "\n", "\n", "# context to hidden proposal: word-level", "\n", "Wx_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", "=", "Wx_ctxw", "\n", "\n", "# attention: prev -> hidden", "\n", "Winp_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "=", "Winp_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wctx_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", "=", "Wctx_att", "\n", "\n", "# attention: decoder -> hidden", "\n", "Wdecc_att", "=", "norm_weight", "(", "dim_char", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdecc_att'", ")", "]", "=", "Wdecc_att", "\n", "Wdecw_att", "=", "norm_weight", "(", "dim_word", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdecw_att'", ")", "]", "=", "Wdecw_att", "\n", "\n", "# attention: hidden bias", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# attention", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.two_layer_gru_decoder_both": [[984, 1151], ["theano.alloc", "theano.dot", "theano.alloc", "theano.alloc", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.tanh", "theano.nnet.sigmoid", "mixer._slice", "mixer._slice", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._slice", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "two_layer_gru_decoder_both", "(", "tparams", ",", "state_below", ",", "options", ",", "\n", "prefix", "=", "'two_layer_gru_decoder_both'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "\n", "context", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "init_state_char", "=", "None", ",", "init_state_word", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-D: #annotation x #sample x #dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state_char", ",", "'previous state must be provided'", "\n", "assert", "init_state_word", ",", "'previous state must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim_char", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ".", "shape", "[", "1", "]", "\n", "dim_word", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "state_belowx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_emb", "=", "state_below_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx_emb", "=", "state_belowx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowctx_emb", "=", "state_belowctx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "state_below_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "state_belowx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", ")", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state_char", "is", "None", ":", "\n", "        ", "init_state_char", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_char", ")", "\n", "", "if", "init_state_word", "is", "None", ":", "\n", "        ", "init_state_word", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_word", ")", "\n", "\n", "# projected context", "\n", "", "proj_ctx", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "def", "_step", "(", "m_t", ",", "\n", "state_below_emb_t", ",", "\n", "state_belowx_emb_t", ",", "\n", "state_belowctx_emb_t", ",", "\n", "h_c_tm1", ",", "h_w_tm1", ",", "\n", "ctx_t", ",", "\n", "alpha_t", ",", "\n", "proj_ctx_all", ",", "\n", "context", ",", "\n", "U_cc", ",", "Ux_cc", ",", "\n", "W_cw", ",", "Wx_cw", ",", "U_ww", ",", "Ux_ww", ",", "b_w", ",", "bx_w", ",", "\n", "W_ctxc", ",", "Wx_ctxc", ",", "W_ctxw", ",", "Wx_ctxw", ",", "\n", "Wdecc_att", ",", "Wdecw_att", ",", "\n", "U_att", ",", "c_att", ")", ":", "\n", "# ~~ attention ~~ #", "\n", "# project previous hidden states", "\n", "        ", "proj_state", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Wdecw_att", ")", "+", "tensor", ".", "dot", "(", "h_c_tm1", ",", "Wdecc_att", ")", "\n", "\n", "# add projected context", "\n", "proj_ctx", "=", "proj_ctx_all", "+", "proj_state", "[", "None", ",", ":", ",", ":", "]", "+", "state_belowctx_emb_t", "\n", "proj_h", "=", "tensor", ".", "tanh", "(", "proj_ctx", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "proj_h", ",", "U_att", ")", "+", "c_att", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "#alpha = tensor.exp(alpha)", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# compute the weighted averages - current context to GRU", "\n", "ctx_t", "=", "(", "context", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "# compute char-level", "\n", "preact_c", "=", "tensor", ".", "dot", "(", "h_c_tm1", ",", "U_cc", ")", "+", "state_below_emb_t", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxc", ")", "\n", "preact_c", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_c", ")", "\n", "\n", "# update gates", "\n", "r_c", "=", "_slice", "(", "preact_c", ",", "0", ",", "dim_char", ")", "\n", "u_c", "=", "_slice", "(", "preact_c", ",", "1", ",", "dim_char", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_c", "=", "tensor", ".", "dot", "(", "h_c_tm1", ",", "Ux_cc", ")", "*", "r_c", "+", "state_belowx_emb_t", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxc", ")", "\n", "\n", "# hidden state proposal", "\n", "h_c", "=", "tensor", ".", "tanh", "(", "preactx_c", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h_c_t", "=", "u_c", "*", "h_c_tm1", "+", "(", "1.", "-", "u_c", ")", "*", "h_c", "\n", "h_c_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_c_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_c_tm1", "\n", "\n", "# compute char-level", "\n", "preact_w", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "U_ww", ")", "+", "tensor", ".", "dot", "(", "h_c_t", ",", "W_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxw", ")", "+", "b_w", "\n", "preact_w", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_w", ")", "\n", "\n", "# update gates", "\n", "r_w", "=", "_slice", "(", "preact_w", ",", "0", ",", "dim_char", ")", "\n", "u_w", "=", "_slice", "(", "preact_w", ",", "1", ",", "dim_char", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_w", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Ux_ww", ")", "*", "r_w", "+", "tensor", ".", "dot", "(", "h_c_t", ",", "Wx_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxw", ")", "+", "bx_w", "\n", "\n", "# hidden state proposal", "\n", "h_w", "=", "tensor", ".", "tanh", "(", "preactx_w", ")", "\n", "\n", "# leaky integrate and obtain next hidden state", "\n", "h_w_t", "=", "u_w", "*", "h_w_tm1", "+", "(", "1.", "-", "u_w", ")", "*", "h_w", "\n", "h_w_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_w_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_w_tm1", "\n", "\n", "return", "h_c_t", ",", "h_w_t", ",", "ctx_t", ",", "alpha", ".", "T", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_emb", ",", "state_belowx_emb", ",", "state_belowctx_emb", "]", "\n", "\n", "shared_vars", "=", "[", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdecc_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdecw_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", ",", "\n", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state_char", ",", "init_state_word", ",", "\n", "None", ",", "None", ",", "\n", "proj_ctx", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "\n", "init_state_char", ",", "\n", "init_state_word", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "proj_ctx", ",", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_biscale_decoder": [[1153, 1268], ["mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.norm_vector", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.ortho_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_biscale_decoder", "(", "options", ",", "params", ",", "\n", "prefix", "=", "'biscale_decoder'", ",", "\n", "nin", "=", "None", ",", "\n", "dim_char", "=", "None", ",", "\n", "dim_word", "=", "None", ",", "\n", "dimctx", "=", "None", ",", "\n", "scalar_bound", "=", "False", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'n_words'", "]", "\n", "", "if", "dim_char", "is", "None", ":", "\n", "        ", "dim_char", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dim_word", "is", "None", ":", "\n", "        ", "dim_word", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'enc_dim'", "]", "*", "2", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "W_xc", "=", "norm_vector", "(", "nin", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "=", "W_xc", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_cc", "=", "norm_vector", "(", "dim_char", ")", "\n", "U_wc", "=", "norm_vector", "(", "dim_char", ")", "\n", "", "else", ":", "\n", "        ", "U_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "U_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", "=", "U_cc", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", "=", "U_wc", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "=", "Wx_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", "=", "Ux_cc", "\n", "Ux_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", "=", "Ux_wc", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_cw", "=", "norm_vector", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", "=", "W_cw", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_ww", "=", "norm_vector", "(", "dim_word", ")", "\n", "", "else", ":", "\n", "        ", "U_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", "=", "U_ww", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", "=", "Wx_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", "=", "Ux_ww", "\n", "\n", "# context to GRU gates: char-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxc", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", "=", "W_ctxc", "\n", "\n", "# context to hidden proposal: char-level", "\n", "Wx_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", "=", "Wx_ctxc", "\n", "\n", "# context to GRU gates: word-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxw", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", "=", "W_ctxw", "\n", "\n", "# context to hidden proposal: word-level", "\n", "Wx_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", "=", "Wx_ctxw", "\n", "\n", "# attention: prev -> hidden", "\n", "Winp_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "=", "Winp_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wctx_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", "=", "Wctx_att", "\n", "\n", "# attention: decoder -> hidden", "\n", "Wdec_att", "=", "norm_weight", "(", "dim_word", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", "=", "Wdec_att", "\n", "\n", "# attention: hidden bias", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# attention", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.biscale_decoder": [[1270, 1471], ["theano.alloc", "theano.dot", "theano.dot", "theano.alloc().astype", "theano.alloc().astype", "theano.dot", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.nnet.sigmoid", "theano.tanh", "theano.nnet.sigmoid", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "biscale_decoder", "(", "tparams", ",", "state_below", ",", "options", ",", "\n", "prefix", "=", "'biscale_decoder'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "\n", "context", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "init_state_char", "=", "None", ",", "init_state_word", "=", "None", ",", "\n", "init_bound_char", "=", "None", ",", "init_bound_word", "=", "None", ",", "\n", "scalar_bound", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-D: #annotation x #sample x #dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state_char", ",", "'previous state must be provided'", "\n", "assert", "init_state_word", ",", "'previous state must be provided'", "\n", "assert", "init_bound_char", ",", "'previous bound must be provided'", "\n", "assert", "init_bound_word", ",", "'previous bound must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim_char", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ".", "shape", "[", "1", "]", "\n", "dim_word", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_emb", "=", "state_below_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx_emb", "=", "state_belowx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowctx_emb", "=", "state_belowctx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "state_below_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", ")", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", ")", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state_char", "is", "None", ":", "\n", "        ", "init_state_char", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_char", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_state_word", "is", "None", ":", "\n", "        ", "init_state_word", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_word", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "zeros_like", "(", "init_state_char", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_word", "=", "tensor", ".", "zeros_like", "(", "init_state_word", ")", "\n", "\n", "# projected context", "\n", "", "", "proj_ctx", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "def", "_step", "(", "m_t", ",", "\n", "state_below_emb_t", ",", "\n", "state_belowx_emb_t", ",", "\n", "state_belowctx_emb_t", ",", "\n", "h_c_tm1", ",", "h_w_tm1", ",", "\n", "bd_c_tm1", ",", "bd_w_tm1", ",", "\n", "ctx_t", ",", "\n", "alpha_t", ",", "\n", "proj_ctx_all", ",", "\n", "context", ",", "\n", "U_cc", ",", "Ux_cc", ",", "U_wc", ",", "Ux_wc", ",", "\n", "W_cw", ",", "Wx_cw", ",", "U_ww", ",", "Ux_ww", ",", "b_w", ",", "bx_w", ",", "\n", "W_ctxc", ",", "Wx_ctxc", ",", "W_ctxw", ",", "Wx_ctxw", ",", "\n", "Wdec_att", ",", "\n", "U_att", ",", "c_att", ")", ":", "\n", "# ~~ attention ~~ #", "\n", "# project previous hidden states", "\n", "        ", "proj_state", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Wdec_att", ")", "\n", "\n", "# add projected context", "\n", "proj_ctx", "=", "proj_ctx_all", "+", "proj_state", "[", "None", ",", ":", ",", ":", "]", "+", "state_belowctx_emb_t", "\n", "proj_h", "=", "tensor", ".", "tanh", "(", "proj_ctx", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "proj_h", ",", "U_att", ")", "+", "c_att", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "#alpha = tensor.exp(alpha)", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# compute the weighted averages - current context to GRU", "\n", "ctx_t", "=", "(", "context", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_tm1", "=", "bd_c_tm1", "[", ":", ",", "None", "]", "\n", "bd_w_tm1", "=", "bd_w_tm1", "[", ":", ",", "None", "]", "\n", "\n", "# compute char-level", "\n", "", "preact_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "U_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "U_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxc", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "preact_c", "=", "preact_c", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "\n", "# update gates", "\n", "", "bd_c_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_c", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "Ux_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "Ux_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxc", ")", "+", "state_belowx_emb_t", "\n", "h_c_t", "=", "tensor", ".", "tanh", "(", "preactx_c", ")", "\n", "h_c_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_c_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_c_tm1", "\n", "\n", "# compute word-level", "\n", "preact_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "U_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "W_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxw", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_w", "+=", "b_w", "[", ":", ",", "None", "]", "\n", "preact_w", "=", "preact_w", ".", "T", "\n", "", "else", ":", "\n", "            ", "preact_w", "+=", "b_w", "\n", "\n", "# update gates for word-level", "\n", "", "bd_w_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_w", ")", "\n", "\n", "# compute the hidden state proposal: word-level", "\n", "preactx_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "Ux_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "Wx_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxw", ")", "+", "bx_w", "\n", "h_w_t", "=", "tensor", ".", "tanh", "(", "preactx_w", ")", "\n", "h_w_t", "=", "bd_c_t", "*", "h_w_t", "+", "(", "1.", "-", "bd_c_t", ")", "*", "h_w_tm1", "\n", "h_w_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_w_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_w_tm1", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_t", "=", "bd_c_t", ".", "flatten", "(", ")", "\n", "bd_w_t", "=", "bd_w_t", ".", "flatten", "(", ")", "\n", "\n", "", "return", "h_c_t", ",", "h_w_t", ",", "bd_c_t", ",", "bd_w_t", ",", "ctx_t", ",", "alpha", ".", "T", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_emb", ",", "state_belowx_emb", ",", "state_belowctx_emb", "]", "\n", "\n", "shared_vars", "=", "[", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", ",", "\n", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state_char", ",", "init_state_word", ",", "\n", "init_bound_char", ",", "init_bound_word", ",", "\n", "None", ",", "None", ",", "\n", "proj_ctx", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "\n", "init_state_char", ",", "\n", "init_state_word", ",", "\n", "init_bound_char", ",", "\n", "init_bound_word", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "proj_ctx", ",", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_biscale_decoder_attc": [[1473, 1588], ["mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.norm_vector", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.ortho_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_biscale_decoder_attc", "(", "options", ",", "params", ",", "\n", "prefix", "=", "'biscale_decoder_attc'", ",", "\n", "nin", "=", "None", ",", "\n", "dim_char", "=", "None", ",", "\n", "dim_word", "=", "None", ",", "\n", "dimctx", "=", "None", ",", "\n", "scalar_bound", "=", "False", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'n_words'", "]", "\n", "", "if", "dim_char", "is", "None", ":", "\n", "        ", "dim_char", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dim_word", "is", "None", ":", "\n", "        ", "dim_word", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'enc_dim'", "]", "*", "2", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "W_xc", "=", "norm_vector", "(", "nin", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "=", "W_xc", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_cc", "=", "norm_vector", "(", "dim_char", ")", "\n", "U_wc", "=", "norm_vector", "(", "dim_char", ")", "\n", "", "else", ":", "\n", "        ", "U_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "U_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", "=", "U_cc", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", "=", "U_wc", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "=", "Wx_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", "=", "Ux_cc", "\n", "Ux_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", "=", "Ux_wc", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_cw", "=", "norm_vector", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", "=", "W_cw", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_ww", "=", "norm_vector", "(", "dim_word", ")", "\n", "", "else", ":", "\n", "        ", "U_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", "=", "U_ww", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", "=", "Wx_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", "=", "Ux_ww", "\n", "\n", "# context to GRU gates: char-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxc", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", "=", "W_ctxc", "\n", "\n", "# context to hidden proposal: char-level", "\n", "Wx_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", "=", "Wx_ctxc", "\n", "\n", "# context to GRU gates: word-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxw", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", "=", "W_ctxw", "\n", "\n", "# context to hidden proposal: word-level", "\n", "Wx_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", "=", "Wx_ctxw", "\n", "\n", "# attention: prev -> hidden", "\n", "Winp_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "=", "Winp_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wctx_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", "=", "Wctx_att", "\n", "\n", "# attention: decoder -> hidden", "\n", "Wdec_att", "=", "norm_weight", "(", "dim_char", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", "=", "Wdec_att", "\n", "\n", "# attention: hidden bias", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# attention", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.biscale_decoder_attc": [[1590, 1791], ["theano.alloc", "theano.dot", "theano.dot", "theano.alloc().astype", "theano.alloc().astype", "theano.dot", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.nnet.sigmoid", "theano.tanh", "theano.nnet.sigmoid", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "biscale_decoder_attc", "(", "tparams", ",", "state_below", ",", "options", ",", "\n", "prefix", "=", "'biscale_decoder_attc'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "\n", "context", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "init_state_char", "=", "None", ",", "init_state_word", "=", "None", ",", "\n", "init_bound_char", "=", "None", ",", "init_bound_word", "=", "None", ",", "\n", "scalar_bound", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-D: #annotation x #sample x #dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state_char", ",", "'previous state must be provided'", "\n", "assert", "init_state_word", ",", "'previous state must be provided'", "\n", "assert", "init_bound_char", ",", "'previous bound must be provided'", "\n", "assert", "init_bound_word", ",", "'previous bound must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim_char", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ".", "shape", "[", "1", "]", "\n", "dim_word", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_emb", "=", "state_below_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx_emb", "=", "state_belowx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowctx_emb", "=", "state_belowctx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "state_below_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", ")", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", ")", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state_char", "is", "None", ":", "\n", "        ", "init_state_char", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_char", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_state_word", "is", "None", ":", "\n", "        ", "init_state_word", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_word", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "zeros_like", "(", "init_state_char", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_word", "=", "tensor", ".", "zeros_like", "(", "init_state_word", ")", "\n", "\n", "# projected context", "\n", "", "", "proj_ctx", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "def", "_step", "(", "m_t", ",", "\n", "state_below_emb_t", ",", "\n", "state_belowx_emb_t", ",", "\n", "state_belowctx_emb_t", ",", "\n", "h_c_tm1", ",", "h_w_tm1", ",", "\n", "bd_c_tm1", ",", "bd_w_tm1", ",", "\n", "ctx_t", ",", "\n", "alpha_t", ",", "\n", "proj_ctx_all", ",", "\n", "context", ",", "\n", "U_cc", ",", "Ux_cc", ",", "U_wc", ",", "Ux_wc", ",", "\n", "W_cw", ",", "Wx_cw", ",", "U_ww", ",", "Ux_ww", ",", "b_w", ",", "bx_w", ",", "\n", "W_ctxc", ",", "Wx_ctxc", ",", "W_ctxw", ",", "Wx_ctxw", ",", "\n", "Wdec_att", ",", "\n", "U_att", ",", "c_att", ")", ":", "\n", "# ~~ attention ~~ #", "\n", "# project previous hidden states", "\n", "        ", "proj_state", "=", "tensor", ".", "dot", "(", "h_c_tm1", ",", "Wdec_att", ")", "\n", "\n", "# add projected context", "\n", "proj_ctx", "=", "proj_ctx_all", "+", "proj_state", "[", "None", ",", ":", ",", ":", "]", "+", "state_belowctx_emb_t", "\n", "proj_h", "=", "tensor", ".", "tanh", "(", "proj_ctx", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "proj_h", ",", "U_att", ")", "+", "c_att", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "#alpha = tensor.exp(alpha)", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# compute the weighted averages - current context to GRU", "\n", "ctx_t", "=", "(", "context", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_tm1", "=", "bd_c_tm1", "[", ":", ",", "None", "]", "\n", "bd_w_tm1", "=", "bd_w_tm1", "[", ":", ",", "None", "]", "\n", "\n", "# compute char-level", "\n", "", "preact_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "U_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "U_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxc", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "preact_c", "=", "preact_c", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "\n", "# update gates", "\n", "", "bd_c_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_c", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "Ux_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "Ux_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxc", ")", "+", "state_belowx_emb_t", "\n", "h_c_t", "=", "tensor", ".", "tanh", "(", "preactx_c", ")", "\n", "h_c_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_c_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_c_tm1", "\n", "\n", "# compute word-level", "\n", "preact_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "U_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "W_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxw", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_w", "+=", "b_w", "[", ":", ",", "None", "]", "\n", "preact_w", "=", "preact_w", ".", "T", "\n", "", "else", ":", "\n", "            ", "preact_w", "+=", "b_w", "\n", "\n", "# update gates for word-level", "\n", "", "bd_w_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_w", ")", "\n", "\n", "# compute the hidden state proposal: word-level", "\n", "preactx_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "Ux_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "Wx_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxw", ")", "+", "bx_w", "\n", "h_w_t", "=", "tensor", ".", "tanh", "(", "preactx_w", ")", "\n", "h_w_t", "=", "bd_c_t", "*", "h_w_t", "+", "(", "1.", "-", "bd_c_t", ")", "*", "h_w_tm1", "\n", "h_w_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_w_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_w_tm1", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_t", "=", "bd_c_t", ".", "flatten", "(", ")", "\n", "bd_w_t", "=", "bd_w_t", ".", "flatten", "(", ")", "\n", "\n", "", "return", "h_c_t", ",", "h_w_t", ",", "bd_c_t", ",", "bd_w_t", ",", "ctx_t", ",", "alpha", ".", "T", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_emb", ",", "state_belowx_emb", ",", "state_belowctx_emb", "]", "\n", "\n", "shared_vars", "=", "[", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdec_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", ",", "\n", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state_char", ",", "init_state_word", ",", "\n", "init_bound_char", ",", "init_bound_word", ",", "\n", "None", ",", "None", ",", "\n", "proj_ctx", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "\n", "init_state_char", ",", "\n", "init_state_word", ",", "\n", "init_bound_char", ",", "\n", "init_bound_word", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "proj_ctx", ",", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.param_init_biscale_decoder_both": [[1793, 1910], ["mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.ortho_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.norm_vector", "mixer.ortho_weight", "mixer.ortho_weight", "mixer.norm_vector", "numpy.zeros().astype", "mixer.norm_weight", "numpy.zeros().astype", "mixer.norm_vector", "mixer.ortho_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer.norm_vector", "mixer.norm_weight", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros", "mixer._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.ortho_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_vector", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.norm_weight", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "param_init_biscale_decoder_both", "(", "options", ",", "params", ",", "\n", "prefix", "=", "'biscale_decoder_both'", ",", "\n", "nin", "=", "None", ",", "\n", "dim_char", "=", "None", ",", "\n", "dim_word", "=", "None", ",", "\n", "dimctx", "=", "None", ",", "\n", "scalar_bound", "=", "False", ")", ":", "\n", "    ", "if", "nin", "is", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'n_words'", "]", "\n", "", "if", "dim_char", "is", "None", ":", "\n", "        ", "dim_char", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dim_word", "is", "None", ":", "\n", "        ", "dim_word", "=", "options", "[", "'dec_dim'", "]", "\n", "", "if", "dimctx", "is", "None", ":", "\n", "        ", "dimctx", "=", "options", "[", "'enc_dim'", "]", "*", "2", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "W_xc", "=", "norm_vector", "(", "nin", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "=", "W_xc", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_cc", "=", "norm_vector", "(", "dim_char", ")", "\n", "U_wc", "=", "norm_vector", "(", "dim_char", ")", "\n", "", "else", ":", "\n", "        ", "U_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "U_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", "=", "U_cc", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", "=", "U_wc", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_xc", "=", "norm_weight", "(", "nin", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "=", "Wx_xc", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_char", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_cc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", "=", "Ux_cc", "\n", "Ux_wc", "=", "ortho_weight", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", "=", "Ux_wc", "\n", "\n", "# embedding to gates transformation weights, biases", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_cw", "=", "norm_vector", "(", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "        ", "W_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", "=", "W_cw", "\n", "\n", "# recurrent transformation weights for gates", "\n", "if", "scalar_bound", ":", "\n", "        ", "U_ww", "=", "norm_vector", "(", "dim_word", ")", "\n", "", "else", ":", "\n", "        ", "U_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", "=", "U_ww", "\n", "\n", "# embedding to hidden state proposal weights, biases", "\n", "Wx_cw", "=", "norm_weight", "(", "dim_char", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", "=", "Wx_cw", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim_word", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# recurrent transformation weights for hidden state proposal", "\n", "Ux_ww", "=", "ortho_weight", "(", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", "=", "Ux_ww", "\n", "\n", "# context to GRU gates: char-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxc", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", "=", "W_ctxc", "\n", "\n", "# context to hidden proposal: char-level", "\n", "Wx_ctxc", "=", "norm_weight", "(", "dimctx", ",", "dim_char", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", "=", "Wx_ctxc", "\n", "\n", "# context to GRU gates: word-level", "\n", "if", "scalar_bound", ":", "\n", "        ", "W_ctxw", "=", "norm_vector", "(", "dimctx", ")", "\n", "", "else", ":", "\n", "        ", "W_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "", "params", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", "=", "W_ctxw", "\n", "\n", "# context to hidden proposal: word-level", "\n", "Wx_ctxw", "=", "norm_weight", "(", "dimctx", ",", "dim_word", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", "=", "Wx_ctxw", "\n", "\n", "# attention: prev -> hidden", "\n", "Winp_att", "=", "norm_weight", "(", "nin", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "=", "Winp_att", "\n", "\n", "# attention: context -> hidden", "\n", "Wctx_att", "=", "norm_weight", "(", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", "=", "Wctx_att", "\n", "\n", "# attention: decoder -> hidden", "\n", "Wdecc_att", "=", "norm_weight", "(", "dim_char", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdecc_att'", ")", "]", "=", "Wdecc_att", "\n", "Wdecw_att", "=", "norm_weight", "(", "dim_word", ",", "dimctx", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wdecw_att'", ")", "]", "=", "Wdecw_att", "\n", "\n", "# attention: hidden bias", "\n", "params", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dimctx", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# attention", "\n", "U_att", "=", "norm_weight", "(", "dimctx", ",", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", "=", "U_att", "\n", "c_att", "=", "numpy", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", "=", "c_att", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.biscale_decoder_both": [[1912, 2114], ["theano.alloc", "theano.dot", "theano.dot", "theano.alloc().astype", "theano.alloc().astype", "theano.dot", "theano.tanh", "tensor.exp.reshape", "theano.exp", "theano.nnet.sigmoid", "theano.tanh", "theano.nnet.sigmoid", "theano.tanh", "mixer.gru_layer._step"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.tanh"], ["", "def", "biscale_decoder_both", "(", "tparams", ",", "state_below", ",", "options", ",", "\n", "prefix", "=", "'biscale_decoder_both'", ",", "\n", "mask", "=", "None", ",", "one_step", "=", "False", ",", "\n", "context", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "init_state_char", "=", "None", ",", "init_state_word", "=", "None", ",", "\n", "init_bound_char", "=", "None", ",", "init_bound_word", "=", "None", ",", "\n", "scalar_bound", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "assert", "context", ",", "'Context must be provided'", "\n", "assert", "context", ".", "ndim", "==", "3", ",", "'Context must be 3-D: #annotation x #sample x #dim'", "\n", "\n", "if", "one_step", ":", "\n", "        ", "assert", "init_state_char", ",", "'previous state must be provided'", "\n", "assert", "init_state_word", ",", "'previous state must be provided'", "\n", "assert", "init_bound_char", ",", "'previous bound must be provided'", "\n", "assert", "init_bound_word", ",", "'previous bound must be provided'", "\n", "\n", "", "n_steps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "in", "[", "2", ",", "3", "]", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "elif", "state_below", ".", "ndim", "==", "1", ":", "\n", "        ", "if", "not", "one_step", ":", "\n", "            ", "raise", "ValueError", "(", "'if state_below.ndim is 1, one_step shoud also be 1'", ")", "\n", "", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "# mask", "\n", "", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "dim_char", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ".", "shape", "[", "1", "]", "\n", "dim_word", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state_below", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "state_below_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", "[", "state_below", ".", "flatten", "(", ")", "]", "\n", "if", "state_below", ".", "ndim", "==", "2", ":", "\n", "            ", "state_below_emb", "=", "state_below_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowx_emb", "=", "state_belowx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "state_belowctx_emb", "=", "state_belowctx_emb", ".", "reshape", "(", "(", "n_steps", ",", "n_samples", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "state_below_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W_xc'", ")", "]", ")", "\n", "if", "scalar_bound", ":", "\n", "            ", "state_below_emb", "+=", "tensor", ".", "addbroadcast", "(", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "state_below_emb", "+=", "tparams", "[", "_p", "(", "prefix", ",", "'b_c'", ")", "]", "\n", "", "state_belowx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_xc'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx_c'", ")", "]", "\n", "state_belowctx_emb", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Winp_att'", ")", "]", ")", "\n", "\n", "# initial/previous state", "\n", "", "if", "init_state_char", "is", "None", ":", "\n", "        ", "init_state_char", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_char", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_state_word", "is", "None", ":", "\n", "        ", "init_state_word", "=", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim_word", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "scalar_bound", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "alloc", "(", "0", ",", "n_samples", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "init_bound_char", "is", "None", ":", "\n", "            ", "init_bound_char", "=", "tensor", ".", "zeros_like", "(", "init_state_char", ")", "\n", "", "if", "init_bound_word", "is", "None", ":", "\n", "            ", "init_bound_word", "=", "tensor", ".", "zeros_like", "(", "init_state_word", ")", "\n", "\n", "# projected context", "\n", "", "", "proj_ctx", "=", "tensor", ".", "dot", "(", "context", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wctx_att'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b_att'", ")", "]", "\n", "\n", "# step function to be used by scan", "\n", "def", "_step", "(", "m_t", ",", "\n", "state_below_emb_t", ",", "\n", "state_belowx_emb_t", ",", "\n", "state_belowctx_emb_t", ",", "\n", "h_c_tm1", ",", "h_w_tm1", ",", "\n", "bd_c_tm1", ",", "bd_w_tm1", ",", "\n", "ctx_t", ",", "\n", "alpha_t", ",", "\n", "proj_ctx_all", ",", "\n", "context", ",", "\n", "U_cc", ",", "Ux_cc", ",", "U_wc", ",", "Ux_wc", ",", "\n", "W_cw", ",", "Wx_cw", ",", "U_ww", ",", "Ux_ww", ",", "b_w", ",", "bx_w", ",", "\n", "W_ctxc", ",", "Wx_ctxc", ",", "W_ctxw", ",", "Wx_ctxw", ",", "\n", "Wdecc_att", ",", "Wdecw_att", ",", "\n", "U_att", ",", "c_att", ")", ":", "\n", "# ~~ attention ~~ #", "\n", "# project previous hidden states", "\n", "        ", "proj_state", "=", "tensor", ".", "dot", "(", "h_w_tm1", ",", "Wdecw_att", ")", "+", "tensor", ".", "dot", "(", "h_c_tm1", ",", "Wdecc_att", ")", "\n", "\n", "# add projected context", "\n", "proj_ctx", "=", "proj_ctx_all", "+", "proj_state", "[", "None", ",", ":", ",", ":", "]", "+", "state_belowctx_emb_t", "\n", "proj_h", "=", "tensor", ".", "tanh", "(", "proj_ctx", ")", "\n", "\n", "# compute alignment weights", "\n", "alpha", "=", "tensor", ".", "dot", "(", "proj_h", ",", "U_att", ")", "+", "c_att", "\n", "alpha", "=", "alpha", ".", "reshape", "(", "[", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", "]", ")", "\n", "alpha", "=", "tensor", ".", "exp", "(", "alpha", "-", "alpha", ".", "max", "(", "0", ")", ")", "\n", "#alpha = tensor.exp(alpha)", "\n", "if", "context_mask", ":", "\n", "            ", "alpha", "=", "alpha", "*", "context_mask", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# compute the weighted averages - current context to GRU", "\n", "ctx_t", "=", "(", "context", "*", "alpha", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_tm1", "=", "bd_c_tm1", "[", ":", ",", "None", "]", "\n", "bd_w_tm1", "=", "bd_w_tm1", "[", ":", ",", "None", "]", "\n", "\n", "# compute char-level", "\n", "", "preact_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "U_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "U_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxc", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "preact_c", "=", "preact_c", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "preact_c", "+=", "state_below_emb_t", "\n", "\n", "# update gates", "\n", "", "bd_c_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_c", ")", "\n", "\n", "# compute the hidden state proposal: char-level", "\n", "preactx_c", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_c_tm1", ")", "*", "h_c_tm1", ",", "Ux_cc", ")", "+", "tensor", ".", "dot", "(", "bd_c_tm1", "*", "h_w_tm1", ",", "Ux_wc", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxc", ")", "+", "state_belowx_emb_t", "\n", "h_c_t", "=", "tensor", ".", "tanh", "(", "preactx_c", ")", "\n", "h_c_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_c_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_c_tm1", "\n", "\n", "# compute word-level", "\n", "preact_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "U_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "W_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "W_ctxw", ")", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "preact_w", "+=", "b_w", "[", ":", ",", "None", "]", "\n", "preact_w", "=", "preact_w", ".", "T", "\n", "", "else", ":", "\n", "            ", "preact_w", "+=", "b_w", "\n", "\n", "# update gates for word-level", "\n", "", "bd_w_t", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "preact_w", ")", "\n", "\n", "# compute the hidden state proposal: word-level", "\n", "preactx_w", "=", "tensor", ".", "dot", "(", "(", "1", "-", "bd_w_tm1", ")", "*", "h_w_tm1", ",", "Ux_ww", ")", "+", "tensor", ".", "dot", "(", "bd_c_t", "*", "h_c_t", ",", "Wx_cw", ")", "+", "tensor", ".", "dot", "(", "ctx_t", ",", "Wx_ctxw", ")", "+", "bx_w", "\n", "h_w_t", "=", "tensor", ".", "tanh", "(", "preactx_w", ")", "\n", "h_w_t", "=", "bd_c_t", "*", "h_w_t", "+", "(", "1.", "-", "bd_c_t", ")", "*", "h_w_tm1", "\n", "h_w_t", "=", "m_t", "[", ":", ",", "None", "]", "*", "h_w_t", "+", "(", "1.", "-", "m_t", ")", "[", ":", ",", "None", "]", "*", "h_w_tm1", "\n", "\n", "if", "scalar_bound", ":", "\n", "            ", "bd_c_t", "=", "bd_c_t", ".", "flatten", "(", ")", "\n", "bd_w_t", "=", "bd_w_t", ".", "flatten", "(", ")", "\n", "\n", "", "return", "h_c_t", ",", "h_w_t", ",", "bd_c_t", ",", "bd_w_t", ",", "ctx_t", ",", "alpha", ".", "T", "\n", "\n", "# prepare scan arguments", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_emb", ",", "state_belowx_emb", ",", "state_belowctx_emb", "]", "\n", "\n", "shared_vars", "=", "[", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_cc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_wc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_cw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux_ww'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'b_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'bx_w'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxc'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'W_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wx_ctxw'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdecc_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Wdecw_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'U_att'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'c_att'", ")", "]", ",", "\n", "]", "\n", "\n", "if", "one_step", ":", "\n", "        ", "rval", "=", "_step", "(", "*", "(", "seqs", "+", "[", "init_state_char", ",", "init_state_word", ",", "\n", "init_bound_char", ",", "init_bound_word", ",", "\n", "None", ",", "None", ",", "\n", "proj_ctx", ",", "context", "]", "+", "shared_vars", ")", ")", "\n", "", "else", ":", "\n", "        ", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "\n", "init_state_char", ",", "\n", "init_state_word", ",", "\n", "init_bound_char", ",", "\n", "init_bound_word", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ")", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "proj_ctx", ",", "context", "]", "+", "shared_vars", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "n_steps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.gradient_clipping": [[2117, 2132], ["theano.sqrt", "theano.or_", "zip", "theano.isnan", "theano.isinf", "tparams.values", "new_grads.append", "theano.lt", "theano.switch"], "function", ["None"], ["", "def", "gradient_clipping", "(", "grads", ",", "tparams", ",", "clip_c", "=", "10", ")", ":", "\n", "    ", "g2", "=", "0.", "\n", "for", "g", "in", "grads", ":", "\n", "        ", "g2", "+=", "(", "g", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "g2", "=", "tensor", ".", "sqrt", "(", "g2", ")", "\n", "not_finite", "=", "tensor", ".", "or_", "(", "tensor", ".", "isnan", "(", "g2", ")", ",", "tensor", ".", "isinf", "(", "g2", ")", ")", "\n", "new_grads", "=", "[", "]", "\n", "\n", "for", "p", ",", "g", "in", "zip", "(", "tparams", ".", "values", "(", ")", ",", "grads", ")", ":", "\n", "        ", "new_grads", ".", "append", "(", "tensor", ".", "switch", "(", "g2", ">", "clip_c", ",", "\n", "g", "*", "(", "clip_c", "/", "g2", ")", ",", "\n", "g", ")", ")", "\n", "\n", "", "return", "new_grads", ",", "not_finite", ",", "tensor", ".", "lt", "(", "clip_c", ",", "g2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.adam": [[2134, 2177], ["collections.OrderedDict", "collections.OrderedDict", "numpy.float32", "tparams.items", "mixer.init_tparams", "zip", "theano.function", "theano.function", "theano.shared", "theano.shared", "theano.function", "theano.function", "theano.function", "theano.function", "mixer.load_params", "tparams.items", "tparams.iteritems", "zip", "p.get_value", "p.get_value", "theano.sqrt", "p.get_value", "mixer._p", "mixer._p", "theano.sqrt", "mixer._p", "mixer._p", "mixer._p", "mixer._p"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.init_tparams", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.load_params", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer._p"], ["", "def", "adam", "(", "lr", ",", "tparams", ",", "grads", ",", "inp", ",", "cost", ",", "not_finite", "=", "None", ",", "clipped", "=", "None", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "eps", "=", "1e-8", ",", "file_name", "=", "None", ")", ":", "\n", "    ", "gshared", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "0.", ",", "name", "=", "'%s_grad'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "\n", "gsup", "=", "[", "(", "gs", ",", "g", ")", "for", "gs", ",", "g", "in", "zip", "(", "gshared", ",", "grads", ")", "]", "\n", "\n", "if", "not_finite", "is", "not", "None", "and", "clipped", "is", "not", "None", ":", "\n", "        ", "f_grad_shared", "=", "theano", ".", "function", "(", "inp", ",", "[", "cost", ",", "not_finite", ",", "clipped", "]", ",", "updates", "=", "gsup", ",", "profile", "=", "profile", ")", "\n", "", "else", ":", "\n", "        ", "f_grad_shared", "=", "theano", ".", "function", "(", "inp", ",", "cost", ",", "updates", "=", "gsup", ",", "profile", "=", "profile", ")", "\n", "\n", "", "updates", "=", "OrderedDict", "(", ")", "\n", "optparams", "=", "OrderedDict", "(", ")", "\n", "optparams", "[", "'i'", "]", "=", "numpy", ".", "float32", "(", "0.", ")", "\n", "\n", "for", "k", ",", "p", "in", "tparams", ".", "items", "(", ")", ":", "\n", "        ", "optparams", "[", "_p", "(", "k", ",", "'m'", ")", "]", "=", "p", ".", "get_value", "(", ")", "*", "0.", "\n", "optparams", "[", "_p", "(", "k", ",", "'v'", ")", "]", "=", "p", ".", "get_value", "(", ")", "*", "0.", "\n", "\n", "", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "optparams", "=", "load_params", "(", "file_name", ",", "optparams", ")", "\n", "\n", "", "toptparams", "=", "init_tparams", "(", "optparams", ")", "\n", "\n", "i_t", "=", "toptparams", "[", "'i'", "]", "+", "1.", "\n", "fix1", "=", "b1", "**", "i_t", "\n", "fix2", "=", "b2", "**", "i_t", "\n", "lr_t", "=", "lr", "*", "tensor", ".", "sqrt", "(", "1.", "-", "fix2", ")", "/", "(", "1.", "-", "fix1", ")", "\n", "\n", "for", "(", "k", ",", "p", ")", ",", "g", "in", "zip", "(", "tparams", ".", "items", "(", ")", ",", "gshared", ")", ":", "\n", "        ", "m_t", "=", "b1", "*", "toptparams", "[", "_p", "(", "k", ",", "'m'", ")", "]", "+", "(", "1.", "-", "b1", ")", "*", "g", "\n", "v_t", "=", "b2", "*", "toptparams", "[", "_p", "(", "k", ",", "'v'", ")", "]", "+", "(", "1.", "-", "b2", ")", "*", "g", "**", "2", "\n", "g_t", "=", "lr_t", "*", "m_t", "/", "(", "tensor", ".", "sqrt", "(", "v_t", ")", "+", "eps", ")", "\n", "p_t", "=", "p", "-", "g_t", "\n", "updates", "[", "toptparams", "[", "_p", "(", "k", ",", "'m'", ")", "]", "]", "=", "m_t", "\n", "updates", "[", "toptparams", "[", "_p", "(", "k", ",", "'v'", ")", "]", "]", "=", "v_t", "\n", "updates", "[", "p", "]", "=", "p_t", "\n", "", "updates", "[", "toptparams", "[", "'i'", "]", "]", "=", "i_t", "\n", "f_update", "=", "theano", ".", "function", "(", "[", "lr", "]", ",", "[", "]", ",", "updates", "=", "updates", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "profile", "=", "profile", ")", "\n", "\n", "return", "f_grad_shared", ",", "f_update", ",", "toptparams", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.adadelta": [[2179, 2208], ["theano.function", "theano.function", "theano.function", "theano.function", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "tparams.iteritems", "tparams.iteritems", "tparams.iteritems", "zip", "zip", "zip", "zip", "zip", "p.get_value", "numpy.float32", "p.get_value", "numpy.float32", "p.get_value", "numpy.float32", "theano.sqrt", "mixer.itemlist", "theano.sqrt"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.itemlist"], ["", "def", "adadelta", "(", "lr", ",", "tparams", ",", "grads", ",", "inp", ",", "cost", ")", ":", "\n", "    ", "zipped_grads", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_grad'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "running_up2", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_rup2'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "running_grads2", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_rgrad2'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "\n", "zgup", "=", "[", "(", "zg", ",", "g", ")", "for", "zg", ",", "g", "in", "zip", "(", "zipped_grads", ",", "grads", ")", "]", "\n", "rg2up", "=", "[", "(", "rg2", ",", "0.95", "*", "rg2", "+", "0.05", "*", "(", "g", "**", "2", ")", ")", "\n", "for", "rg2", ",", "g", "in", "zip", "(", "running_grads2", ",", "grads", ")", "]", "\n", "\n", "f_grad_shared", "=", "theano", ".", "function", "(", "inp", ",", "cost", ",", "updates", "=", "zgup", "+", "rg2up", ",", "\n", "profile", "=", "profile", ")", "\n", "\n", "updir", "=", "[", "-", "tensor", ".", "sqrt", "(", "ru2", "+", "1e-6", ")", "/", "tensor", ".", "sqrt", "(", "rg2", "+", "1e-6", ")", "*", "zg", "\n", "for", "zg", ",", "ru2", ",", "rg2", "in", "\n", "zip", "(", "zipped_grads", ",", "running_up2", ",", "running_grads2", ")", "]", "\n", "ru2up", "=", "[", "(", "ru2", ",", "0.95", "*", "ru2", "+", "0.05", "*", "(", "ud", "**", "2", ")", ")", "\n", "for", "ru2", ",", "ud", "in", "zip", "(", "running_up2", ",", "updir", ")", "]", "\n", "param_up", "=", "[", "(", "p", ",", "p", "+", "ud", ")", "for", "p", ",", "ud", "in", "zip", "(", "itemlist", "(", "tparams", ")", ",", "updir", ")", "]", "\n", "\n", "f_update", "=", "theano", ".", "function", "(", "[", "lr", "]", ",", "[", "]", ",", "updates", "=", "ru2up", "+", "param_up", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "profile", "=", "profile", ")", "\n", "\n", "return", "f_grad_shared", ",", "f_update", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.rmsprop": [[2210, 2244], ["theano.function", "theano.function", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.function", "theano.function", "theano.function", "theano.function", "theano.shared", "theano.shared", "tparams.iteritems", "tparams.iteritems", "tparams.iteritems", "zip", "zip", "zip", "tparams.iteritems", "zip", "zip", "p.get_value", "numpy.float32", "p.get_value", "numpy.float32", "p.get_value", "numpy.float32", "p.get_value", "numpy.float32", "mixer.itemlist", "theano.sqrt"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.itemlist"], ["", "def", "rmsprop", "(", "lr", ",", "tparams", ",", "grads", ",", "inp", ",", "cost", ",", "not_finite", "=", "None", ",", "clipped", "=", "None", ",", "mom", "=", "0.9", ",", "sec_mom", "=", "0.95", ",", "eps", "=", "1e-4", ")", ":", "\n", "\n", "    ", "zipped_grads", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_grad'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "running_grads", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_rgrad'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "running_grads2", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_rgrad2'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "\n", "zgup", "=", "[", "(", "zg", ",", "g", ")", "for", "zg", ",", "g", "in", "zip", "(", "zipped_grads", ",", "grads", ")", "]", "\n", "rgup", "=", "[", "(", "rg", ",", "sec_mom", "*", "rg", "+", "(", "1.", "-", "sec_mom", ")", "*", "g", ")", "for", "rg", ",", "g", "in", "zip", "(", "running_grads", ",", "grads", ")", "]", "\n", "rg2up", "=", "[", "(", "rg2", ",", "sec_mom", "*", "rg2", "+", "(", "1.", "-", "sec_mom", ")", "*", "g", "**", "2", ")", "\n", "for", "rg2", ",", "g", "in", "zip", "(", "running_grads2", ",", "grads", ")", "]", "\n", "\n", "if", "not_finite", "is", "not", "None", "or", "clipped", "is", "not", "None", ":", "\n", "        ", "f_grad_shared", "=", "theano", ".", "function", "(", "inp", ",", "[", "cost", ",", "not_finite", ",", "clipped", "]", ",", "updates", "=", "zgup", "+", "rgup", "+", "rg2up", ",", "profile", "=", "profile", ")", "\n", "", "else", ":", "\n", "        ", "f_grad_shared", "=", "theano", ".", "function", "(", "inp", ",", "cost", ",", "updates", "=", "zgup", "+", "rgup", "+", "rg2up", ",", "profile", "=", "profile", ")", "\n", "\n", "", "updir", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "numpy", ".", "float32", "(", "0.", ")", ",", "\n", "name", "=", "'%s_updir'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "updir_new", "=", "[", "(", "ud", ",", "mom", "*", "ud", "-", "lr", "*", "zg", "/", "tensor", ".", "sqrt", "(", "rg2", "-", "rg", "**", "2", "+", "eps", ")", ")", "\n", "for", "ud", ",", "zg", ",", "rg", ",", "rg2", "in", "zip", "(", "updir", ",", "zipped_grads", ",", "running_grads", ",", "\n", "running_grads2", ")", "]", "\n", "param_up", "=", "[", "(", "p", ",", "p", "+", "udn", "[", "1", "]", ")", "\n", "for", "p", ",", "udn", "in", "zip", "(", "itemlist", "(", "tparams", ")", ",", "updir_new", ")", "]", "\n", "f_update", "=", "theano", ".", "function", "(", "[", "lr", "]", ",", "[", "]", ",", "updates", "=", "updir_new", "+", "param_up", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "profile", "=", "profile", ")", "\n", "\n", "return", "f_grad_shared", ",", "f_update", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.sgd": [[2246, 2258], ["theano.function", "theano.function", "theano.function", "theano.function", "theano.shared", "theano.shared", "tparams.iteritems", "zip", "zip", "p.get_value", "mixer.itemlist"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.mixer.itemlist"], ["", "def", "sgd", "(", "lr", ",", "tparams", ",", "grads", ",", "x", ",", "mask", ",", "y", ",", "cost", ")", ":", "\n", "    ", "gshared", "=", "[", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "0.", ",", "name", "=", "'%s_grad'", "%", "k", ")", "\n", "for", "k", ",", "p", "in", "tparams", ".", "iteritems", "(", ")", "]", "\n", "gsup", "=", "[", "(", "gs", ",", "g", ")", "for", "gs", ",", "g", "in", "zip", "(", "gshared", ",", "grads", ")", "]", "\n", "\n", "f_grad_shared", "=", "theano", ".", "function", "(", "[", "x", ",", "mask", ",", "y", "]", ",", "cost", ",", "updates", "=", "gsup", ",", "\n", "profile", "=", "profile", ")", "\n", "\n", "pup", "=", "[", "(", "p", ",", "p", "-", "lr", "*", "g", ")", "for", "p", ",", "g", "in", "zip", "(", "itemlist", "(", "tparams", ")", ",", "gshared", ")", "]", "\n", "f_update", "=", "theano", ".", "function", "(", "[", "lr", "]", ",", "[", "]", ",", "updates", "=", "pup", ",", "profile", "=", "profile", ")", "\n", "\n", "return", "f_grad_shared", ",", "f_update", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.__init__": [[21, 59], ["data_iterator.fopen", "open", "cPickle.load", "data_iterator.fopen", "open", "cPickle.load"], "methods", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen"], ["def", "__init__", "(", "self", ",", "\n", "source", ",", "source_dict", ",", "\n", "target", "=", "None", ",", "target_dict", "=", "None", ",", "\n", "source_word_level", "=", "0", ",", "\n", "target_word_level", "=", "0", ",", "\n", "batch_size", "=", "128", ",", "\n", "job_id", "=", "0", ",", "\n", "sort_size", "=", "20", ",", "\n", "n_words_source", "=", "-", "1", ",", "\n", "n_words_target", "=", "-", "1", ",", "\n", "shuffle_per_epoch", "=", "False", ")", ":", "\n", "        ", "self", ".", "source_file", "=", "source", "\n", "self", ".", "target_file", "=", "target", "\n", "self", ".", "source", "=", "fopen", "(", "source", ",", "'r'", ")", "\n", "with", "open", "(", "source_dict", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "source_dict", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "self", ".", "target", "=", "fopen", "(", "target", ",", "'r'", ")", "\n", "if", "target_dict", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "target_dict", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "target_dict", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "target", "=", "None", "\n", "\n", "", "self", ".", "source_word_level", "=", "source_word_level", "\n", "self", ".", "target_word_level", "=", "target_word_level", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "n_words_source", "=", "n_words_source", "\n", "self", ".", "n_words_target", "=", "n_words_target", "\n", "self", ".", "shuffle_per_epoch", "=", "shuffle_per_epoch", "\n", "\n", "self", ".", "source_buffer", "=", "[", "]", "\n", "self", ".", "target_buffer", "=", "[", "]", "\n", "self", ".", "k", "=", "batch_size", "*", "sort_size", "\n", "\n", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "job_id", "=", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.__iter__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset": [[63, 81], ["data_iterator.TextIterator.source.close", "data_iterator.TextIterator.source.seek", "data_iterator.TextIterator.shuffle", "data_iterator.fopen", "data_iterator.TextIterator.target.close", "data_iterator.TextIterator.shuffle", "data_iterator.fopen", "data_iterator.fopen", "data_iterator.TextIterator.target.seek"], "methods", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.shuffle", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.shuffle", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle_per_epoch", ":", "\n", "# close current files", "\n", "            ", "self", ".", "source", ".", "close", "(", ")", "\n", "if", "self", ".", "target", "is", "None", ":", "\n", "                ", "self", ".", "shuffle", "(", "[", "self", ".", "source_file", "]", ")", "\n", "self", ".", "source", "=", "fopen", "(", "self", ".", "source_file", "+", "'.reshuf_%d'", "%", "self", ".", "job_id", ",", "'r'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "target", ".", "close", "(", ")", "\n", "# shuffle *original* source files,", "\n", "self", ".", "shuffle", "(", "[", "self", ".", "source_file", ",", "self", ".", "target_file", "]", ")", "\n", "# open newly 're-shuffled' file as input", "\n", "self", ".", "source", "=", "fopen", "(", "self", ".", "source_file", "+", "'.reshuf_%d'", "%", "self", ".", "job_id", ",", "'r'", ")", "\n", "self", ".", "target", "=", "fopen", "(", "self", ".", "target_file", "+", "'.reshuf_%d'", "%", "self", ".", "job_id", ",", "'r'", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "source", ".", "seek", "(", "0", ")", "\n", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "                ", "self", ".", "target", ".", "seek", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.shuffle": [[82, 103], ["tempfile.mkstemp", "open", "open.close", "open", "open.readlines", "random.shuffle", "os.remove", "open", "ff.close", "open", "l.strip().split", "enumerate", "ff.close", "l.strip", "ff.readline().strip", "l.strip", "ff.readline"], "methods", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.shuffle"], ["", "", "", "@", "staticmethod", "\n", "def", "shuffle", "(", "files", ")", ":", "\n", "        ", "tf_os", ",", "tpath", "=", "mkstemp", "(", ")", "\n", "tf", "=", "open", "(", "tpath", ",", "'w'", ")", "\n", "fds", "=", "[", "open", "(", "ff", ")", "for", "ff", "in", "files", "]", "\n", "for", "l", "in", "fds", "[", "0", "]", ":", "\n", "            ", "lines", "=", "[", "l", ".", "strip", "(", ")", "]", "+", "[", "ff", ".", "readline", "(", ")", ".", "strip", "(", ")", "for", "ff", "in", "fds", "[", "1", ":", "]", "]", "\n", "print", ">>", "tf", ",", "\"|||\"", ".", "join", "(", "lines", ")", "\n", "", "[", "ff", ".", "close", "(", ")", "for", "ff", "in", "fds", "]", "\n", "tf", ".", "close", "(", ")", "\n", "tf", "=", "open", "(", "tpath", ",", "'r'", ")", "\n", "lines", "=", "tf", ".", "readlines", "(", ")", "\n", "random", ".", "shuffle", "(", "lines", ")", "\n", "fds", "=", "[", "open", "(", "ff", "+", "'.reshuf'", ",", "'w'", ")", "for", "ff", "in", "files", "]", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "s", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'|||'", ")", "\n", "for", "ii", ",", "fd", "in", "enumerate", "(", "fds", ")", ":", "\n", "                ", "print", ">>", "fd", ",", "s", "[", "ii", "]", "\n", "", "", "[", "ff", ".", "close", "(", ")", "for", "ff", "in", "fds", "]", "\n", "os", ".", "remove", "(", "tpath", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.next": [[104, 207], ["data_iterator.TextIterator.reset", "len", "xrange", "len", "len", "data_iterator.TextIterator.source.readline", "data_iterator.TextIterator.source_buffer.append", "numpy.array", "numpy.array.argsort", "numpy.array", "numpy.array.argsort", "data_iterator.TextIterator.reset", "len", "data_iterator.TextIterator.reset", "source.append", "data_iterator.TextIterator.reset", "len", "data_iterator.TextIterator.reset", "list.strip().split", "list.strip", "list", "data_iterator.TextIterator.target.readline", "data_iterator.TextIterator.target_buffer.append", "len", "len", "data_iterator.TextIterator.source_buffer.pop", "data_iterator.TextIterator.target_buffer.pop", "target.append", "len", "len", "len", "list.decode", "list.strip().split", "list.strip", "list", "len", "len", "list.strip", "list.decode", "list.strip"], "methods", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.reset"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "end_of_data", ":", "\n", "            ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "source", "=", "[", "]", "\n", "target", "=", "[", "]", "\n", "\n", "# fill buffer, if it's empty", "\n", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "source_buffer", ")", "==", "len", "(", "self", ".", "target_buffer", ")", ",", "'Buffer size mismatch!'", "\n", "\n", "", "if", "len", "(", "self", ".", "source_buffer", ")", "==", "0", ":", "\n", "            ", "for", "k_", "in", "xrange", "(", "self", ".", "k", ")", ":", "\n", "                ", "ss", "=", "self", ".", "source", ".", "readline", "(", ")", "\n", "\n", "if", "ss", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "source_word_level", ":", "\n", "                    ", "ss", "=", "ss", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "                    ", "ss", "=", "ss", ".", "strip", "(", ")", "\n", "ss", "=", "list", "(", "ss", ".", "decode", "(", "'utf8'", ")", ")", "\n", "\n", "", "self", ".", "source_buffer", ".", "append", "(", "ss", ")", "\n", "\n", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "                    ", "tt", "=", "self", ".", "target", ".", "readline", "(", ")", "\n", "\n", "if", "tt", "==", "\"\"", ":", "\n", "                        ", "break", "\n", "\n", "", "if", "self", ".", "target_word_level", ":", "\n", "                        ", "tt", "=", "tt", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "                        ", "tt", "=", "tt", ".", "strip", "(", ")", "\n", "tt", "=", "list", "(", "tt", ".", "decode", "(", "'utf8'", ")", ")", "\n", "\n", "", "self", ".", "target_buffer", ".", "append", "(", "tt", ")", "\n", "\n", "", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "# sort by target buffer", "\n", "                ", "tlen", "=", "numpy", ".", "array", "(", "[", "len", "(", "t", ")", "for", "t", "in", "self", ".", "target_buffer", "]", ")", "\n", "tidx", "=", "tlen", ".", "argsort", "(", ")", "\n", "_sbuf", "=", "[", "self", ".", "source_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "_tbuf", "=", "[", "self", ".", "target_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "self", ".", "target_buffer", "=", "_tbuf", "\n", "", "else", ":", "\n", "                ", "slen", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "source_buffer", "]", ")", "\n", "sidx", "=", "slen", ".", "argsort", "(", ")", "\n", "_sbuf", "=", "[", "self", ".", "source_buffer", "[", "i", "]", "for", "i", "in", "sidx", "]", "\n", "\n", "", "self", ".", "source_buffer", "=", "_sbuf", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "self", ".", "source_buffer", ")", "==", "0", "or", "len", "(", "self", ".", "target_buffer", ")", "==", "0", ":", "\n", "                ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "", "", "elif", "len", "(", "self", ".", "source_buffer", ")", "==", "0", ":", "\n", "            ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "try", ":", "\n", "# actual work here", "\n", "            ", "while", "True", ":", "\n", "# read from source file and map to word index", "\n", "                ", "try", ":", "\n", "                    ", "ss_", "=", "self", ".", "source_buffer", ".", "pop", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "                    ", "break", "\n", "", "ss", "=", "[", "self", ".", "source_dict", "[", "w", "]", "if", "w", "in", "self", ".", "source_dict", "else", "1", "for", "w", "in", "ss_", "]", "\n", "if", "self", ".", "n_words_source", ">", "0", ":", "\n", "                    ", "ss", "=", "[", "w", "if", "w", "<", "self", ".", "n_words_source", "else", "1", "for", "w", "in", "ss", "]", "\n", "", "source", ".", "append", "(", "ss", ")", "\n", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "# read from target file and map to word index", "\n", "                    ", "tt_", "=", "self", ".", "target_buffer", ".", "pop", "(", ")", "\n", "tt", "=", "[", "self", ".", "target_dict", "[", "w", "]", "if", "w", "in", "self", ".", "target_dict", "else", "1", "for", "w", "in", "tt_", "]", "\n", "if", "self", ".", "n_words_target", ">", "0", ":", "\n", "                        ", "tt", "=", "[", "w", "if", "w", "<", "self", ".", "n_words_target", "else", "1", "for", "w", "in", "tt", "]", "\n", "", "target", ".", "append", "(", "tt", ")", "\n", "\n", "", "if", "len", "(", "source", ")", ">=", "self", ".", "batch_size", ":", "\n", "                    ", "break", "\n", "", "", "", "except", "IOError", ":", "\n", "            ", "self", ".", "end_of_data", "=", "True", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "source", ")", "<=", "0", "or", "len", "(", "target", ")", "<=", "0", ":", "\n", "                ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "", "return", "source", ",", "target", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "source", ")", "<=", "0", ":", "\n", "                ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "", "return", "source", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.fopen": [[13, 17], ["filename.endswith", "open", "gzip.open"], "function", ["None"], ["def", "fopen", "(", "filename", ",", "mode", "=", "'r'", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "'.gz'", ")", ":", "\n", "        ", "return", "gzip", ".", "open", "(", "filename", ",", "mode", ")", "\n", "", "return", "open", "(", "filename", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.preprocess.shuffle.main": [[10, 38], ["tempfile.mkstemp", "open", "open.close", "open", "open.readlines", "random.shuffle", "os.remove", "open", "ff.close", "open", "l.strip().split", "enumerate", "ff.close", "l.strip", "ff.readline().strip", "l.strip", "ff.readline"], "function", ["home.repos.pwc.inspect_result.nyu-dl_dl4mt-cdec.None.data_iterator.TextIterator.shuffle"], ["def", "main", "(", "files", ")", ":", "\n", "\n", "    ", "tf_os", ",", "tpath", "=", "mkstemp", "(", ")", "\n", "tf", "=", "open", "(", "tpath", ",", "'w'", ")", "\n", "\n", "fds", "=", "[", "open", "(", "ff", ")", "for", "ff", "in", "files", "]", "\n", "\n", "for", "l", "in", "fds", "[", "0", "]", ":", "\n", "        ", "lines", "=", "[", "l", ".", "strip", "(", ")", "]", "+", "[", "ff", ".", "readline", "(", ")", ".", "strip", "(", ")", "for", "ff", "in", "fds", "[", "1", ":", "]", "]", "\n", "print", ">>", "tf", ",", "\"|||\"", ".", "join", "(", "lines", ")", "\n", "\n", "", "[", "ff", ".", "close", "(", ")", "for", "ff", "in", "fds", "]", "\n", "tf", ".", "close", "(", ")", "\n", "\n", "tf", "=", "open", "(", "tpath", ",", "'r'", ")", "\n", "lines", "=", "tf", ".", "readlines", "(", ")", "\n", "random", ".", "shuffle", "(", "lines", ")", "\n", "\n", "fds", "=", "[", "open", "(", "ff", "+", "'.shuf'", ",", "'w'", ")", "for", "ff", "in", "files", "]", "\n", "\n", "for", "l", "in", "lines", ":", "\n", "        ", "s", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'|||'", ")", "\n", "for", "ii", ",", "fd", "in", "enumerate", "(", "fds", ")", ":", "\n", "            ", "print", ">>", "fd", ",", "s", "[", "ii", "]", "\n", "\n", "", "", "[", "ff", ".", "close", "(", ")", "for", "ff", "in", "fds", "]", "\n", "\n", "os", ".", "remove", "(", "tpath", ")", "\n", "\n"]]}