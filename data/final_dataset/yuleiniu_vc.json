{"home.repos.pwc.inspect_result.yuleiniu_vc.None.config.Model_Config.__init__": [[34, 75], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets the default model and training hyperparameters.\"\"\"", "\n", "# Supervised/unsupervised learning", "\n", "self", ".", "is_supervised", "=", "FLAGS", ".", "supervised", "\n", "\n", "# LSTM input and output dimensionality, respectively.", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "lstm_dim", "=", "1000", "\n", "\n", "# Sequence maximum length and vocabulary length.", "\n", "self", ".", "L", "=", "20", "\n", "self", ".", "num_vocab", "=", "72704", "\n", "\n", "# Visual and spatial feature dimensionality", "\n", "self", ".", "vis_dim", "=", "4096", "\n", "self", ".", "spa_dim", "=", "5", "\n", "\n", "# Encoder, decoder and regularizer embedding dimensionality, respectively.", "\n", "self", ".", "enc_dim", "=", "512", "\n", "self", ".", "dec_dim", "=", "512", "\n", "self", ".", "reg_dim", "=", "512", "\n", "\n", "# Training hyperparameters.", "\n", "# If True, the dropout applied to LSTM variables.", "\n", "self", ".", "lstm_dropout", "=", "False", "\n", "\n", "# Hyperparameters for learning rate and Momentum optimizer", "\n", "self", ".", "start_lr", "=", "0.01", "\n", "self", ".", "lr_decay_step", "=", "FLAGS", ".", "lr_decay_step", "\n", "self", ".", "lr_decay_rate", "=", "0.1", "\n", "self", ".", "momentum", "=", "0.95", "\n", "self", ".", "max_iter", "=", "FLAGS", ".", "max_iter", "\n", "\n", "# If not None, clip gradients to this value.", "\n", "self", ".", "clip_gradients", "=", "10.0", "\n", "\n", "# Weight decay for regularization.", "\n", "self", ".", "weight_decay", "=", "0.0005", "\n", "\n", "# Decay for averaging loss and accuracy .", "\n", "self", ".", "avg_decay", "=", "0.99", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.__init__": [[78, 94], ["config.File_Config.setup"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.setup"], ["def", "__init__", "(", "self", ",", "model", "=", "'vc'", ")", ":", "\n", "        ", "\"\"\"Sets the data path.\"\"\"", "\n", "# Dataset type.", "\n", "self", ".", "dataset", "=", "FLAGS", ".", "dataset", "# refcoco/refcoco+/refcocog", "\n", "\n", "# If True, print loading information. ", "\n", "self", ".", "info_print", "=", "True", "\n", "\n", "# Model type", "\n", "self", ".", "model", "=", "model", "\n", "\n", "# Set checkpoint (only useful in evaluation)", "\n", "self", ".", "checkpoint", "=", "FLAGS", ".", "checkpoint", "\n", "\n", "# Set split type for different datasets.", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_split": [[95, 102], ["None"], "methods", ["None"], ["", "def", "set_split", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "dataset", "in", "[", "'refcoco'", ",", "'refcoco+'", ",", "'refcocog'", "]", ",", "\"Dataset should be refcoco/refcoco+/refcocog\"", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'refcoco'", ",", "'refcoco+'", "]", ":", "\n", "            ", "self", ".", "split", "=", "'unc'", "\n", "", "else", ":", "\n", "            ", "self", ".", "split", "=", "'google'", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_log_options": [[103, 117], ["os.path.join"], "methods", ["None"], ["", "", "def", "set_log_options", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set tensorflow log and snapshot options.\"\"\"", "\n", "# Set snapshot and log options", "\n", "if", "FLAGS", ".", "supervised", ":", "\n", "            ", "self", ".", "log_dir", "=", "'./tflog/%s/'", "%", "self", ".", "dataset", "\n", "self", ".", "snapshot_dir", "=", "'./tfmodel/%s/'", "%", "self", ".", "dataset", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_dir", "=", "'./tflog/%s_un/'", "%", "self", ".", "dataset", "\n", "self", ".", "snapshot_dir", "=", "'./tfmodel/%s_un/'", "%", "self", ".", "dataset", "\n", "", "self", ".", "log_interval", "=", "FLAGS", ".", "log_interval", "\n", "\n", "self", ".", "snapshot_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "snapshot_dir", ",", "'iter_%d.tfmodel'", ")", "\n", "self", ".", "snapshot_start", "=", "FLAGS", ".", "snapshot_start", "\n", "self", ".", "snapshot_interval", "=", "FLAGS", ".", "snapshot_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_init_params": [[118, 124], ["None"], "methods", ["None"], ["", "def", "set_init_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set initialization parameters.\"\"\"", "\n", "self", ".", "num_vocab", "=", "72704", "\n", "self", ".", "embed_dim", "=", "300", "\n", "self", ".", "vocab_file", "=", "FLAGS", ".", "vocab_file", "\n", "self", ".", "wordembed_params", "=", "FLAGS", ".", "wordembed_params", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.setup": [[125, 130], ["config.File_Config.set_split", "config.File_Config.set_log_options", "config.File_Config.set_init_params"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_split", "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_log_options", "home.repos.pwc.inspect_result.yuleiniu_vc.None.config.File_Config.set_init_params"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set tensorflow log directory and so on.\"\"\"", "\n", "self", ".", "set_split", "(", ")", "\n", "self", ".", "set_log_options", "(", ")", "\n", "self", ".", "set_init_params", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.build_vocab": [[34, 68], ["sentToTokens.items", "sum", "print", "sum", "print", "print", "print", "sentToTokens.items", "word2count.itervalues", "vocab.append", "word2count.items", "word2count.items", "len", "word2count.get", "len", "len", "len", "len"], "function", ["None"], ["def", "build_vocab", "(", "refer", ",", "params", ")", ":", "\n", "\t", "\"\"\"\n  \tremove bad words, and return final sentences (sent_id --> final)\n  \t\"\"\"", "\n", "count_thr", "=", "params", "[", "'word_count_threshold'", "]", "\n", "sentToTokens", "=", "refer", ".", "sentToTokens", "\n", "\n", "# count up the number of words", "\n", "word2count", "=", "{", "}", "\n", "for", "sent_id", ",", "tokens", "in", "sentToTokens", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "wd", "in", "tokens", ":", "\n", "\t\t\t", "word2count", "[", "wd", "]", "=", "word2count", ".", "get", "(", "wd", ",", "0", ")", "+", "1", "\n", "\n", "# print some stats", "\n", "", "", "total_words", "=", "sum", "(", "word2count", ".", "itervalues", "(", ")", ")", "\n", "print", "(", "'total words: %s'", "%", "total_words", ")", "\n", "bad_words", "=", "[", "w", "for", "w", ",", "n", "in", "word2count", ".", "items", "(", ")", "if", "n", "<=", "count_thr", "]", "\n", "vocab", "=", "[", "w", "for", "w", ",", "n", "in", "word2count", ".", "items", "(", ")", "if", "n", ">", "count_thr", "]", "\n", "bad_count", "=", "sum", "(", "[", "word2count", "[", "w", "]", "for", "w", "in", "bad_words", "]", ")", "\n", "print", "(", "'number of good words: %d'", "%", "len", "(", "vocab", ")", ")", "\n", "print", "(", "'number of bad words: %d/%d = %.2f%%'", "%", "(", "len", "(", "bad_words", ")", ",", "len", "(", "word2count", ")", ",", "len", "(", "bad_words", ")", "*", "100.0", "/", "len", "(", "word2count", ")", ")", ")", "\n", "print", "(", "'number of UNKs in sentences: %d/%d = %.2f%%'", "%", "(", "bad_count", ",", "total_words", ",", "bad_count", "*", "100.0", "/", "total_words", ")", ")", "\n", "\n", "# add UNK", "\n", "if", "bad_count", ">", "0", ":", "\n", "\t\t", "vocab", ".", "append", "(", "'UNK'", ")", "\n", "\n", "# lets now produce final tokens", "\n", "", "sentToFinal", "=", "{", "}", "\n", "for", "sent_id", ",", "tokens", "in", "sentToTokens", ".", "items", "(", ")", ":", "\n", "\t\t", "final", "=", "[", "w", "if", "word2count", "[", "w", "]", ">", "count_thr", "else", "'UNK'", "for", "w", "in", "tokens", "]", "\n", "sentToFinal", "[", "sent_id", "]", "=", "final", "\n", "\n", "", "return", "vocab", ",", "sentToFinal", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.check_sentLength": [[70, 83], ["sentToFinal.items", "max", "print", "print", "sum", "range", "len", "sent_lengths.keys", "sent_lengths.values", "sent_lengths.get", "print", "sent_lengths.get", "sent_lengths.get", "sent_lengths.get"], "function", ["None"], ["", "def", "check_sentLength", "(", "sentToFinal", ")", ":", "\n", "\t", "sent_lengths", "=", "{", "}", "\n", "for", "sent_id", ",", "tokens", "in", "sentToFinal", ".", "items", "(", ")", ":", "\n", "\t\t", "nw", "=", "len", "(", "tokens", ")", "\n", "sent_lengths", "[", "nw", "]", "=", "sent_lengths", ".", "get", "(", "nw", ",", "0", ")", "+", "1", "\n", "", "max_len", "=", "max", "(", "sent_lengths", ".", "keys", "(", ")", ")", "\n", "print", "(", "'max length of sentence in raw data is %d'", "%", "max_len", ")", "\n", "print", "(", "'sentence length distribution (count, number of words):'", ")", "\n", "sum_len", "=", "sum", "(", "sent_lengths", ".", "values", "(", ")", ")", "\n", "acc", "=", "0", "# accumulative distribution", "\n", "for", "i", "in", "range", "(", "max_len", "+", "1", ")", ":", "\n", "\t\t", "acc", "+=", "sent_lengths", ".", "get", "(", "i", ",", "0", ")", "\n", "print", "(", "'%2d: %10d %.3f%% %.3f%%'", "%", "(", "i", ",", "sent_lengths", ".", "get", "(", "i", ",", "0", ")", ",", "sent_lengths", ".", "get", "(", "i", ",", "0", ")", "*", "100.0", "/", "sum_len", ",", "acc", "*", "100.0", "/", "sum_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.encode_captions": [[85, 112], ["len", "numpy.zeros", "numpy.zeros", "max", "enumerate", "len"], "function", ["None"], ["", "", "def", "encode_captions", "(", "sentences", ",", "wtoi", ",", "params", ")", ":", "\n", "\t", "\"\"\"\n\tseqz is zero-padded in the end, for language model learning.\n\tzseq is zero-padded in the begining, for embedding model learning.\n\t\"\"\"", "\n", "max_length", "=", "params", "[", "'max_length'", "]", "\n", "if", "max_length", "==", "None", ":", "\n", "\t\t", "if", "params", "[", "'dataset'", "]", "in", "[", "'refcoco'", ",", "'refclef'", ",", "'refcoco+'", "]", ":", "\n", "\t\t\t", "max_length", "=", "10", "\n", "", "elif", "params", "[", "'dataset'", "]", "==", "'refcocog'", ":", "\n", "\t\t\t", "max_length", "=", "20", "\n", "# encode seqz and zseq", "\n", "", "", "M", "=", "len", "(", "sentences", ")", "\n", "seqz_L", "=", "np", ".", "zeros", "(", "(", "M", ",", "max_length", ")", ",", "dtype", "=", "'uint32'", ")", "\n", "zseq_L", "=", "np", ".", "zeros", "(", "(", "M", ",", "max_length", ")", ",", "dtype", "=", "'uint32'", ")", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "\t\t", "h5_id", "=", "sent", "[", "'h5_id'", "]", "\n", "# encode seqz", "\n", "tokens", "=", "sent", "[", "'tokens'", "]", "\n", "start_ix", "=", "max", "(", "max_length", "-", "len", "(", "tokens", ")", ",", "0", ")", "\n", "for", "j", ",", "w", "in", "enumerate", "(", "tokens", ")", ":", "\n", "\t\t\t", "if", "j", "<", "max_length", ":", "\n", "\t\t\t\t", "zseq_L", "[", "h5_id", "-", "1", ",", "start_ix", "+", "j", "]", "=", "wtoi", "[", "w", "]", "\n", "seqz_L", "[", "h5_id", "-", "1", ",", "j", "]", "=", "wtoi", "[", "w", "]", "\n", "# return ", "\n", "", "", "", "return", "seqz_L", ",", "zseq_L", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.check_encoded_labels": [[114, 129], ["print", "seqz_L[].tolist", "print", "zseq_L[].tolist", "print", "print", "print", "print"], "function", ["None"], ["", "def", "check_encoded_labels", "(", "sentences", ",", "seqz_L", ",", "zseq_L", ",", "itow", ")", ":", "\n", "\t", "for", "sent", "in", "sentences", ":", "\n", "# print gd-truth", "\n", "\t\t", "print", "(", "'gd : %s'", "%", "(", "' '", ".", "join", "(", "sent", "[", "'tokens'", "]", ")", ")", ")", "\n", "# decode seqz and zseq ", "\n", "h5_id", "=", "sent", "[", "'h5_id'", "]", "\n", "seqz", "=", "seqz_L", "[", "h5_id", "-", "1", "]", ".", "tolist", "(", ")", "\n", "sent", "=", "' '", ".", "join", "(", "[", "itow", "[", "w", "]", "for", "w", "in", "seqz", "if", "w", "!=", "0", "]", ")", "\n", "print", "(", "'seqz: %s'", "%", "sent", ")", "\n", "zseq", "=", "zseq_L", "[", "h5_id", "-", "1", "]", ".", "tolist", "(", ")", "\n", "sent", "=", "' '", ".", "join", "(", "[", "itow", "[", "w", "]", "for", "w", "in", "zseq", "if", "w", "!=", "0", "]", ")", "\n", "print", "(", "'zseq: %s'", "%", "sent", ")", "\n", "print", "(", "seqz", ")", "\n", "print", "(", "zseq", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.prepare_json": [[131, 174], ["refer.Refs.items", "print", "refer.Imgs.items", "print", "print", "sentToFinal.items", "print", "len", "len"], "function", ["None"], ["", "", "def", "prepare_json", "(", "refer", ",", "sentToFinal", ",", "params", ")", ":", "\n", "# prepare refs = [{ref_id, ann_id, image_id, split, category_id, sent_ids}]", "\n", "\t", "refs", "=", "[", "]", "\n", "for", "ref_id", ",", "ref", "in", "refer", ".", "Refs", ".", "items", "(", ")", ":", "\n", "\t\t", "box", "=", "refer", ".", "refToAnn", "[", "ref_id", "]", "[", "'bbox'", "]", "\n", "refs", "+=", "[", "{", "'ref_id'", ":", "ref_id", ",", "'split'", ":", "ref", "[", "'split'", "]", ",", "'category_id'", ":", "ref", "[", "'category_id'", "]", ",", "'ann_id'", ":", "ref", "[", "'ann_id'", "]", ",", "\n", "'sent_ids'", ":", "ref", "[", "'sent_ids'", "]", ",", "'box'", ":", "box", ",", "'image_id'", ":", "ref", "[", "'image_id'", "]", "}", "]", "\n", "", "print", "(", "'There in all %s refs.'", "%", "len", "(", "refs", ")", ")", "\n", "\n", "# prepare images = [{'image_id', 'width', 'height', 'file_name', 'ref_ids', 'ann_ids', 'h5_id'}]", "\n", "images", "=", "[", "]", "\n", "h5_id", "=", "0", "\n", "for", "image_id", ",", "image", "in", "refer", ".", "Imgs", ".", "items", "(", ")", ":", "\n", "\t\t", "h5_id", "+=", "1", "# lua 1-based", "\n", "width", "=", "image", "[", "'width'", "]", "\n", "height", "=", "image", "[", "'height'", "]", "\n", "file_name", "=", "image", "[", "'file_name'", "]", "\n", "ref_ids", "=", "[", "ref", "[", "'ref_id'", "]", "for", "ref", "in", "refer", ".", "imgToRefs", "[", "image_id", "]", "]", "\n", "ann_ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "refer", ".", "imgToAnns", "[", "image_id", "]", "]", "\n", "images", "+=", "[", "{", "'image_id'", ":", "image_id", ",", "'height'", ":", "height", ",", "'width'", ":", "width", ",", "'file_name'", ":", "file_name", ",", "'ref_ids'", ":", "ref_ids", ",", "'ann_ids'", ":", "ann_ids", ",", "'h5_id'", ":", "h5_id", "}", "]", "\n", "", "print", "(", "'There are in all %d images.'", "%", "h5_id", ")", "\n", "\n", "# prepare anns appeared in images, anns = [{ann_id, category_id, image_id, box, h5_id}]", "\n", "anns", "=", "[", "]", "\n", "h5_id", "=", "0", "\n", "for", "image_id", "in", "refer", ".", "Imgs", ":", "\n", "\t\t", "ann_ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "refer", ".", "imgToAnns", "[", "image_id", "]", "]", "\n", "for", "ann_id", "in", "ann_ids", ":", "\n", "\t\t\t", "h5_id", "+=", "1", "# lua 1-based", "\n", "ann", "=", "refer", ".", "Anns", "[", "ann_id", "]", "\n", "anns", "+=", "[", "{", "'ann_id'", ":", "ann_id", ",", "'category_id'", ":", "ann", "[", "'category_id'", "]", ",", "'box'", ":", "ann", "[", "'bbox'", "]", ",", "'image_id'", ":", "image_id", ",", "'h5_id'", ":", "h5_id", "}", "]", "\n", "", "", "print", "(", "'There are in all %d anns within the %d images.'", "%", "(", "h5_id", ",", "len", "(", "images", ")", ")", ")", "\n", "\n", "# prepare sentences = [{sent_id, tokens}]", "\n", "sentences", "=", "[", "]", "\n", "h5_id", "=", "0", "\n", "for", "sent_id", ",", "tokens", "in", "sentToFinal", ".", "items", "(", ")", ":", "\n", "\t\t", "h5_id", "=", "h5_id", "+", "1", "# lua 1-based", "\n", "sentences", "+=", "[", "{", "'sent_id'", ":", "sent_id", ",", "'tokens'", ":", "tokens", ",", "'sent'", ":", "' '", ".", "join", "(", "tokens", ")", ",", "'h5_id'", ":", "h5_id", "}", "]", "\n", "", "print", "(", "'There are in all %d sentences to be written into hdf5 file.'", "%", "h5_id", ")", "\n", "\n", "# return", "\n", "return", "refs", ",", "images", ",", "anns", ",", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.main": [[176, 221], ["sys.path.insert", "REFER", "prepro.build_vocab", "prepro.check_sentLength", "prepro.prepare_json", "json.dump", "print", "h5py.File", "prepro.encode_captions", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "print", "os.isdir", "os.mkdir", "os.mkdir", "os.isdir", "os.mkdir", "os.mkdir", "os.join", "open", "os.join", "os.join", "os.join", "enumerate", "enumerate", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.build_vocab", "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.check_sentLength", "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.prepare_json", "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepro.encode_captions"], ["", "def", "main", "(", "params", ")", ":", "\n", "\n", "# dataset_splitBy", "\n", "\t", "data_root", ",", "dataset", ",", "splitBy", "=", "params", "[", "'data_root'", "]", ",", "params", "[", "'dataset'", "]", ",", "params", "[", "'splitBy'", "]", "\n", "\n", "# mkdir and write json file", "\n", "if", "not", "osp", ".", "isdir", "(", "'./data/raw'", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "'./data/raw'", ")", "\n", "", "if", "not", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "'./data/raw'", ",", "dataset", "+", "'_'", "+", "splitBy", ")", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "'./data/raw'", ",", "dataset", "+", "'_'", "+", "splitBy", ")", ")", "\n", "\n", "# load refer", "\n", "", "sys", ".", "path", ".", "insert", "(", "0", ",", "osp", ".", "join", "(", "ROOT_DIR", ",", "'submodule/refer'", ")", ")", "\n", "from", "refer", "import", "REFER", "\n", "refer", "=", "REFER", "(", "data_root", ",", "dataset", ",", "splitBy", ")", "\n", "\n", "# create vocab", "\n", "vocab", ",", "sentToFinal", "=", "build_vocab", "(", "refer", ",", "params", ")", "\n", "itow", "=", "{", "i", "+", "1", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "vocab", ")", "}", "# lua 1-based", "\n", "wtoi", "=", "{", "w", ":", "i", "+", "1", "for", "i", ",", "w", "in", "enumerate", "(", "vocab", ")", "}", "# lua 1-based", "\n", "\n", "# check sentence length", "\n", "check_sentLength", "(", "sentToFinal", ")", "\n", "\n", "# prepare refs, images, anns, sentences", "\n", "# and write json", "\n", "refs", ",", "images", ",", "anns", ",", "sentences", "=", "prepare_json", "(", "refer", ",", "sentToFinal", ",", "params", ")", "\n", "json", ".", "dump", "(", "{", "'refs'", ":", "refs", ",", "\n", "'images'", ":", "images", ",", "\n", "'anns'", ":", "anns", ",", "\n", "'sentences'", ":", "sentences", ",", "\n", "'ix_to_word'", ":", "itow", ",", "\n", "'word_to_ix'", ":", "wtoi", ",", "\n", "'ix_to_cat'", ":", "refer", ".", "Cats", "\n", "}", ",", "\n", "open", "(", "osp", ".", "join", "(", "'./data/raw'", ",", "dataset", "+", "'_'", "+", "splitBy", ",", "params", "[", "'output_json'", "]", ")", ",", "'w'", ")", ")", "\n", "print", "(", "'%s written.'", "%", "osp", ".", "join", "(", "'./data/raw'", ",", "params", "[", "'output_json'", "]", ")", ")", "\n", "\n", "# write h5 file which contains /sentences", "\n", "f", "=", "h5py", ".", "File", "(", "osp", ".", "join", "(", "'./data/raw'", ",", "dataset", "+", "'_'", "+", "splitBy", ",", "params", "[", "'output_h5'", "]", ")", ",", "'w'", ")", "\n", "seqz_L", ",", "zseq_L", "=", "encode_captions", "(", "sentences", ",", "wtoi", ",", "params", ")", "\n", "f", ".", "create_dataset", "(", "\"seqz_labels\"", ",", "dtype", "=", "'uint32'", ",", "data", "=", "seqz_L", ")", "\n", "f", ".", "create_dataset", "(", "\"zseq_labels\"", ",", "dtype", "=", "'uint32'", ",", "data", "=", "zseq_L", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'%s writtern.'", "%", "osp", ".", "join", "(", "'./data/raw'", ",", "params", "[", "'output_h5'", "]", ")", ")", "\n", "# check_encoded_labels(sentences, seqz_L, zseq_L, itow)", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.check_dir": [[15, 19], ["os.path.isdir", "os.makedirs", "print"], "function", ["None"], ["def", "check_dir", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "print", "(", "'Creating %s'", "%", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.init_word_embed": [[20, 28], ["numpy.load", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.assign"], "function", ["None"], ["", "", "def", "init_word_embed", "(", "config", ")", ":", "\n", "    ", "\"\"\"Initialize word embedding matrix.\"\"\"", "\n", "embedding_mat_val", "=", "np", ".", "load", "(", "config", ".", "wordembed_params", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'vc'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'lstm'", ",", "reuse", "=", "True", ")", ":", "\n", "            ", "embedding_mat", "=", "tf", ".", "get_variable", "(", "\"embedding_mat\"", ",", "[", "config", ".", "num_vocab", ",", "config", ".", "embed_dim", "]", ")", "\n", "init_we", "=", "tf", ".", "assign", "(", "embedding_mat", ",", "embedding_mat_val", ")", "\n", "", "", "return", "[", "init_we", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.main": [[29, 108], ["config.Model_Config", "config.File_Config", "vc_model.VC_Model", "vc_model.VC_Model.build", "util.DataReader.DataReader", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.run", "train.init_word_embed", "tf.Session.run", "train.check_dir", "train.check_dir", "tensorflow.summary.FileWriter", "tensorflow.train.Saver", "tf.Session.run", "range", "tensorflow.global_variables_initializer", "tensorflow.get_default_graph", "util.DataReader.DataReader.get_batch", "print", "tf.Session.run", "print", "tf.summary.FileWriter.add_summary", "tf.train.Saver.save"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build", "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.init_word_embed", "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.check_dir", "home.repos.pwc.inspect_result.yuleiniu_vc.None.train.check_dir", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.get_batch"], ["", "def", "main", "(", "unused_argv", ")", ":", "\n", "# Initialize configs and parameters    ", "\n", "    ", "model_config", "=", "config", ".", "Model_Config", "(", ")", "\n", "file_config", "=", "config", ".", "File_Config", "(", ")", "\n", "max_iter", "=", "model_config", ".", "max_iter", "\n", "snapshot_dir", "=", "file_config", ".", "snapshot_dir", "\n", "snapshot_file", "=", "file_config", ".", "snapshot_file", "\n", "snapshot_start", "=", "file_config", ".", "snapshot_start", "\n", "snapshot_interval", "=", "file_config", ".", "snapshot_interval", "\n", "log_dir", "=", "file_config", ".", "log_dir", "\n", "log_interval", "=", "file_config", ".", "log_interval", "\n", "\n", "# Set up model", "\n", "model", "=", "VC_Model", "(", "model_config", ",", "mode", "=", "'train'", ")", "\n", "model", ".", "build", "(", ")", "\n", "\n", "# Set up datareader", "\n", "reader", "=", "DataReader", "(", "file_config", ")", "\n", "\n", "# Set up session", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "# Initialize word embedding matrix.", "\n", "init_we", "=", "init_word_embed", "(", "file_config", ")", "\n", "sess", ".", "run", "(", "*", "init_we", ")", "\n", "\n", "# Check whether log and snapshot directories exist.", "\n", "check_dir", "(", "log_dir", ")", "\n", "check_dir", "(", "snapshot_dir", ")", "\n", "\n", "# log writer", "\n", "log_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ",", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "# snapshot saver", "\n", "snapshot_saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "cls_loss_avg", "=", "0", "\n", "acc_avg", "=", "0", "\n", "initial_iter", "=", "sess", ".", "run", "(", "model", ".", "global_step", ")", "\n", "for", "n_iter", "in", "range", "(", "initial_iter", ",", "max_iter", ")", ":", "\n", "# Read one batch", "\n", "        ", "batch", "=", "reader", ".", "get_batch", "(", "split", "=", "'train'", ")", "\n", "text_seq", "=", "batch", "[", "'text_zseq_batch'", "]", "\n", "im_id", "=", "batch", "[", "'im_id'", "]", "\n", "vis_feat", "=", "batch", "[", "'vis_batch'", "]", "\n", "visdif_feat", "=", "batch", "[", "'visdif_batch'", "]", "\n", "spa_feat", "=", "batch", "[", "'spa_batch'", "]", "\n", "label_val", "=", "batch", "[", "'label_batch'", "]", "\n", "\n", "print", "(", "'\\tthis batch: image %d, with %d sentences x %d proposal boxes = %d scores'", "%", "\n", "(", "im_id", ",", "text_seq", ".", "shape", "[", "1", "]", ",", "vis_feat", ".", "shape", "[", "0", "]", ",", "\n", "text_seq", ".", "shape", "[", "1", "]", "*", "vis_feat", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "scores_trn", ",", "cls_loss", ",", "reg_loss", ",", "acc", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "model", ".", "scores", ",", "model", ".", "cls_loss", ",", "model", ".", "reg_loss", ",", "model", ".", "accuracy", ",", "\n", "model", ".", "summary_op", ",", "model", ".", "ops", "]", ",", "\n", "feed_dict", "=", "{", "model", ".", "text_seqs", ":", "text_seq", ",", "\n", "model", ".", "region_vis_feat", ":", "vis_feat", ",", "\n", "model", ".", "region_visdif_feat", ":", "visdif_feat", ",", "\n", "model", ".", "region_spatial_feat", ":", "spa_feat", ",", "\n", "model", ".", "labels", ":", "label_val", "\n", "}", ")", "\n", "\n", "cls_loss_avg", "=", "0.99", "*", "cls_loss_avg", "+", "0.01", "*", "cls_loss", "\n", "acc_avg", "=", "0.99", "*", "acc_avg", "+", "0.01", "*", "acc", "\n", "print", "(", "'\\titer = %d, cls_loss (cur) = %f, cls_loss (avg) = %f, acc (cur) = %f, acc (avg) = %f'", "%", "\n", "(", "n_iter", ",", "cls_loss", ",", "cls_loss_avg", ",", "acc", ",", "acc_avg", ")", ")", "\n", "\n", "# Save log", "\n", "if", "(", "(", "n_iter", "+", "1", ")", "%", "log_interval", ")", "==", "0", ":", "\n", "            ", "log_writer", ".", "add_summary", "(", "summary", ",", "n_iter", ")", "\n", "# save snapshot", "\n", "", "if", "(", "(", "n_iter", "+", "1", ")", ">", "snapshot_start", ")", "&", "(", "(", "(", "n_iter", "+", "1", ")", "%", "snapshot_interval", ")", "==", "0", ")", ":", "\n", "            ", "snapshot_saver", ".", "save", "(", "sess", ",", "snapshot_file", "%", "(", "n_iter", "+", "1", ")", ",", "write_meta_graph", "=", "False", ")", "\n", "", "if", "n_iter", ">=", "max_iter", ":", "\n", "            ", "break", "\n", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.__init__": [[18, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "mode", ")", ":", "\n", "        ", "\"\"\"Basic setup.\n        Args:\n            config: Object containing configuration parameters.\n            mode: \"train\", \"eval\" or \"inference\".\n        \"\"\"", "\n", "assert", "mode", "in", "[", "\"train\"", ",", "\"eval\"", ",", "\"inference\"", "]", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "is_supervised", "=", "config", ".", "is_supervised", "\n", "\n", "self", ".", "keys", "=", "'vc'", "\n", "\n", "# A float32 Tensor with shape [batch_size, visual_length].", "\n", "self", ".", "region_visual_feat", "=", "None", "\n", "\n", "# A float32 Tensor with shape [batch_size, spatial_length].", "\n", "self", ".", "region_spatial_feat", "=", "None", "\n", "\n", "# An int32 Tensor with shape [padded_length, batch_size].", "\n", "self", ".", "text_seqs", "=", "None", "\n", "\n", "# A float32 scalar Tensor; the total loss for the trainer to optimize.", "\n", "self", ".", "total_loss", "=", "None", "\n", "\n", "# Global step Tensor.", "\n", "self", ".", "global_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_inputs": [[46, 73], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.concat"], "methods", ["None"], ["", "def", "build_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\" Input batch.\n        \n        Outputs:            \n            self.text_seqs\n            self.region_visual_feat\n            self.region_spatial_feat\n            self.labels\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'inputs'", ")", ":", "\n", "            ", "self", ".", "text_seqs", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "self", ".", "config", ".", "L", ",", "None", "]", ",", "\n", "name", "=", "\"text_seqs\"", ")", "\n", "self", ".", "region_vis_feat", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "config", ".", "vis_dim", "]", ",", "\n", "name", "=", "\"region_vis_feat\"", ")", "\n", "self", ".", "region_visdif_feat", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "config", ".", "vis_dim", "]", ",", "\n", "name", "=", "\"region_visdif_feat\"", ")", "\n", "self", ".", "region_spatial_feat", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "config", ".", "spa_dim", "]", ",", "\n", "name", "=", "\"region_spatial_feat\"", ")", "\n", "self", ".", "labels", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "\"labels\"", ")", "\n", "\n", "self", ".", "region_visual_feat", "=", "tf", ".", "concat", "(", "[", "self", ".", "region_vis_feat", ",", "self", ".", "region_visdif_feat", "]", ",", "\n", "axis", "=", "1", ",", "\n", "name", "=", "\"region_visual_feat\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_text_feature": [[74, 124], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.concat", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape", "tensorflow.ones", "tensorflow.python.ops.nn.dropout", "tensorflow.convert_to_tensor", "tensorflow.not_equal"], "methods", ["None"], ["", "", "def", "build_text_feature", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate text feature using bidirectional LSTM\n        \n        Outputs:\n            self.text_bilstm_feat\n            self.text_word_embed_feat\n            self.word_is_not_pad\n        \"\"\"", "\n", "num_vocab", "=", "self", ".", "config", ".", "num_vocab", "\n", "embed_dim", "=", "self", ".", "config", ".", "embed_dim", "\n", "lstm_dim", "=", "self", ".", "config", ".", "lstm_dim", "\n", "\n", "text_seq", "=", "self", ".", "text_seqs", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'lstm'", ")", ":", "\n", "            ", "L", "=", "tf", ".", "shape", "(", "text_seq", ")", "[", "0", "]", "#seq length", "\n", "N1", "=", "tf", ".", "shape", "(", "text_seq", ")", "[", "1", "]", "#batch size", "\n", "\n", "# Word embedding", "\n", "embedding_mat", "=", "tf", ".", "get_variable", "(", "name", "=", "\"embedding_mat\"", ",", "shape", "=", "[", "num_vocab", ",", "embed_dim", "]", ")", "\n", "text_word_embed_feat", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding_mat", ",", "text_seq", ")", "# [L, N1, embed_dim]", "\n", "\n", "# Encode the sentence into a vector representation, using the final", "\n", "# hidden states in a two-layer bidirectional LSTM network", "\n", "seq_length", "=", "tf", ".", "ones", "(", "to_T", "(", "[", "N1", "]", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "L", "\n", "lstm_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "lstm_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs1_raw", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", "=", "lstm_cell", ",", "\n", "cell_bw", "=", "lstm_cell", ",", "\n", "inputs", "=", "text_word_embed_feat", ",", "\n", "sequence_length", "=", "seq_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "time_major", "=", "True", ",", "\n", "scope", "=", "\"bidirectional_lstm1\"", ")", "\n", "outputs1", "=", "tf", ".", "concat", "(", "outputs1_raw", ",", "axis", "=", "2", ")", "\n", "lstm_cell2", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "lstm_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs2_raw", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", "=", "lstm_cell2", ",", "\n", "cell_bw", "=", "lstm_cell2", ",", "\n", "inputs", "=", "outputs1", ",", "\n", "sequence_length", "=", "seq_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "time_major", "=", "True", ",", "\n", "scope", "=", "\"bidirectional_lstm2\"", ")", "\n", "outputs2", "=", "tf", ".", "concat", "(", "outputs2_raw", ",", "axis", "=", "2", ")", "\n", "text_bilstm_feat", "=", "tf", ".", "concat", "(", "[", "outputs1", ",", "outputs2", "]", ",", "axis", "=", "2", ")", "\n", "if", "self", ".", "config", ".", "lstm_dropout", ":", "\n", "                ", "text_bilstm_feat", "=", "drop", "(", "text_bilstm_feat", ",", "0.5", ")", "\n", "\n", "", "self", ".", "text_bilstm_feat", "=", "text_bilstm_feat", "\n", "self", ".", "text_word_embed_feat", "=", "text_word_embed_feat", "\n", "self", ".", "word_is_not_pad", "=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "text_seq", ",", "0", ")", "[", "...", ",", "tf", ".", "newaxis", "]", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_encoder": [[125, 225], ["tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "text_bilstm_feat.get_shape().as_list", "text_word_embed_feat.get_shape().as_list", "region_spatial_feat.get_shape().as_list", "region_visual_feat.get_shape().as_list", "tensorflow.variable_scope", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reduce_sum", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reduce_sum", "util.cnn.fc_layer", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.concat", "util.cnn.fc_layer", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.tile", "tensorflow.concat", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "text_bilstm_feat.get_shape", "text_word_embed_feat.get_shape", "region_spatial_feat.get_shape", "region_visual_feat.get_shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer"], ["", "", "def", "build_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\" Encoder, context estimated score\n        \n        Outputs:            \n            self.enc_visual_feat\n            self.enc_spatial_feat\n            self.enc_score\n        \"\"\"", "\n", "# text and region features", "\n", "text_bilstm_feat", "=", "self", ".", "text_bilstm_feat", "\n", "text_word_embed_feat", "=", "self", ".", "text_word_embed_feat", "\n", "word_is_not_pad", "=", "self", ".", "word_is_not_pad", "\n", "region_visual_feat", "=", "self", ".", "region_visual_feat", "\n", "region_spatial_feat", "=", "self", ".", "region_spatial_feat", "\n", "enc_dim", "=", "self", ".", "config", ".", "enc_dim", "\n", "\n", "# Tensor dimensionality", "\n", "L", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "0", "]", "\n", "N1", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "1", "]", "\n", "N2", "=", "tf", ".", "shape", "(", "region_spatial_feat", ")", "[", "0", "]", "\n", "D1", "=", "text_bilstm_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# lstm_dim*4", "\n", "D2", "=", "text_word_embed_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# embed_dim", "\n", "D3", "=", "region_spatial_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# spatial_dim", "\n", "D4", "=", "region_visual_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# visual_dim", "\n", "\n", "region_feat", "=", "tf", ".", "concat", "(", "[", "region_visual_feat", ",", "region_spatial_feat", "]", ",", "axis", "=", "1", ")", "# shape: [N2, D3+D4]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "# 1. language-vision association between single RoI and the expression, represented by y^{c1} in the paper", "\n", "            ", "word_attention_single_score", "=", "fc", "(", "'word_attention_single'", ",", "tf", ".", "reshape", "(", "text_bilstm_feat", ",", "[", "-", "1", ",", "D1", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [L*N1, 1]", "\n", "word_attention_single_score", "=", "tf", ".", "reshape", "(", "word_attention_single_score", ",", "[", "L", ",", "N1", ",", "1", "]", ")", "\n", "word_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "word_attention_single_score", ",", "dim", "=", "0", ")", "*", "word_is_not_pad", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "word_prob", "/", "tf", ".", "reduce_sum", "(", "word_prob", ",", "0", ",", "keep_dims", "=", "True", ")", "# shape: [L, N1, 1]", "\n", "word_feat_single", "=", "tf", ".", "reduce_sum", "(", "word_prob", "*", "text_word_embed_feat", ",", "axis", "=", "0", ")", "# shape: [N1, D2]", "\n", "\n", "# 2. language-vision association between pairwise RoI and the expression, represented by y^{c2} in the paper", "\n", "word_attention_pairwise_score", "=", "fc", "(", "'word_attention_pairwise'", ",", "tf", ".", "reshape", "(", "text_bilstm_feat", ",", "[", "-", "1", ",", "D1", "]", ")", ",", "output_dim", "=", "1", ")", "#shape: [L*N1, 1]", "\n", "word_attention_pairwise_score", "=", "tf", ".", "reshape", "(", "word_attention_pairwise_score", ",", "[", "L", ",", "N1", ",", "1", "]", ")", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "word_attention_pairwise_score", ",", "dim", "=", "0", ")", "*", "word_is_not_pad", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "word_prob", "/", "tf", ".", "reduce_sum", "(", "word_prob", ",", "0", ",", "keep_dims", "=", "True", ")", "#shape: [L, N1, 1]", "\n", "word_feat_pairwise", "=", "tf", ".", "reduce_sum", "(", "word_prob", "*", "text_word_embed_feat", ",", "axis", "=", "0", ")", "# shape: [N1, D2]", "\n", "\n", "# 3. context estimated score between single RoI and the expression", "\n", "region_embed", "=", "fc", "(", "'region_visual_spatial_embed'", ",", "region_feat", ",", "output_dim", "=", "D2", ")", "# shape: [N2, D2]", "\n", "region_embed", "=", "region_embed", "[", "tf", ".", "newaxis", ",", "...", "]", "#shape: [1, N2, D2]", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_single", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "dim", "=", "2", ")", "#shape: [N1, N2, D2]", "\n", "single_score", "=", "fc", "(", "'single_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [N1*N2, 1]", "\n", "single_score", "=", "tf", ".", "reshape", "(", "single_score", ",", "[", "N1", ",", "N2", ",", "1", "]", ")", "#shape[N1, N2, 1]", "\n", "\n", "# 4. context estimated score between pairwise RoI and the expression", "\n", "region_spatial_tile1", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "region_spatial_feat", ",", "[", "N2", ",", "1", ",", "D3", "]", ")", ",", "[", "1", ",", "N2", ",", "1", "]", ")", "#shape: [N2, N2, D3]", "\n", "region_spatial_tile2", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "region_spatial_feat", ",", "[", "1", ",", "N2", ",", "D3", "]", ")", ",", "[", "N2", ",", "1", ",", "1", "]", ")", "#shape: [N2, N2, D3]", "\n", "region_spatial_concat", "=", "tf", ".", "concat", "(", "[", "region_spatial_tile1", ",", "region_spatial_tile2", "]", ",", "axis", "=", "2", ")", "#shape: [N2, N2, D3*2]", "\n", "region_embed", "=", "fc", "(", "'region_spatial_embed'", ",", "tf", ".", "reshape", "(", "region_spatial_concat", ",", "[", "-", "1", ",", "D3", "*", "2", "]", ")", ",", "output_dim", "=", "D2", ")", "#shape: [N2*N2, D2]", "\n", "region_embed", "=", "region_embed", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_pairwise", ",", "[", "N1", ",", "1", ",", "1", ",", "D2", "]", ")", ",", "3", ")", "#shape: [N1, N2, N2, D2]", "\n", "pairwise_score", "=", "fc", "(", "'pairwise_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ")", "#shape: [N1*N2*N2, 1]", "\n", "pairwise_score", "=", "tf", ".", "reshape", "(", "pairwise_score", ",", "[", "N1", ",", "N2", ",", "N2", "]", ")", "# note that the semantic meaning of N2 and N2 swapped.", "\n", "pairwise_score", "=", "tf", ".", "transpose", "(", "pairwise_score", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "# though it does not affect the result", "\n", "\n", "# 5. add single score and pairwise score", "\n", "alpha1", "=", "tf", ".", "get_variable", "(", "\"scale_alpha1\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "alpha2", "=", "tf", ".", "get_variable", "(", "\"scale_alpha2\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "single_score", "=", "single_score", "*", "alpha1", "\n", "pairwise_score", "=", "pairwise_score", "*", "alpha2", "\n", "score", "=", "single_score", "+", "pairwise_score", "# shape: [N1, N2, N2]", "\n", "score", "=", "tf", ".", "reshape", "(", "score", ",", "[", "-", "1", ",", "N2", "]", ")", "\n", "score", "=", "tf", ".", "nn", ".", "softmax", "(", "score", ")", "# shape: [N1*N2, N2]            ", "\n", "\n", "# 6. get softmax region feature, aka, the psudo object", "\n", "score", "=", "score", "[", "...", ",", "tf", ".", "newaxis", "]", "# shape: [N1*N2, N2, 1]", "\n", "z_spatial_feat", "=", "region_spatial_feat", "[", "tf", ".", "newaxis", ",", "...", "]", "# shape: [1, N2, D3]", "\n", "z_visual_feat", "=", "region_visual_feat", "[", "tf", ".", "newaxis", ",", "...", "]", "# shape, [1, N2, D4]", "\n", "z_spatial_feat", "=", "tf", ".", "reduce_sum", "(", "z_spatial_feat", "*", "score", ",", "axis", "=", "1", ")", "# shape: [N1*N2, D3]", "\n", "z_visual_feat", "=", "tf", ".", "reduce_sum", "(", "z_visual_feat", "*", "score", ",", "axis", "=", "1", ")", "# shape: [N1*N2, D4]", "\n", "z_spatial_feat", "=", "tf", ".", "reshape", "(", "z_spatial_feat", ",", "[", "N1", ",", "N2", ",", "D3", "]", ")", "\n", "z_visual_feat", "=", "tf", ".", "reshape", "(", "z_visual_feat", ",", "[", "N1", ",", "N2", ",", "D4", "]", ")", "\n", "z_region_feat", "=", "tf", ".", "concat", "(", "[", "z_visual_feat", ",", "z_spatial_feat", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# 7. get the p(z|x) for the KL divergence", "\n", "# context estimated score between single RoI and the expression", "\n", "region_embed", "=", "fc", "(", "'region_visual_spatial_embed'", ",", "tf", ".", "reshape", "(", "z_region_feat", ",", "[", "-", "1", ",", "D3", "+", "D4", "]", ")", ",", "output_dim", "=", "D2", ",", "reuse", "=", "True", ")", "# shape: [N1*N2, D2]", "\n", "region_embed", "=", "tf", ".", "reshape", "(", "region_embed", ",", "[", "N1", ",", "N2", ",", "D2", "]", ")", "#shape: [N1, N2, D2]", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_single", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "2", ")", "#shape: [N1, N2, D2]", "\n", "single_score", "=", "fc", "(", "'single_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ",", "reuse", "=", "True", ")", "# shape: [N1*N2, 1]", "\n", "single_score", "=", "tf", ".", "reshape", "(", "single_score", ",", "[", "N1", ",", "N2", "]", ")", "# shape: [N1, N2]", "\n", "# context estimated score between pairwise RoI and the expression", "\n", "region_spatial_sub", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "region_spatial_feat", ",", "[", "1", ",", "N2", ",", "D3", "]", ")", ",", "[", "N1", ",", "1", ",", "1", "]", ")", "# shape: [N1, N2, D3]", "\n", "region_spatial_concat", "=", "tf", ".", "concat", "(", "[", "region_spatial_sub", ",", "z_spatial_feat", "]", ",", "axis", "=", "2", ")", "# shape: [N1, N2, D3*2]", "\n", "region_embed", "=", "fc", "(", "'region_spatial_embed'", ",", "tf", ".", "reshape", "(", "region_spatial_concat", ",", "[", "-", "1", ",", "D3", "*", "2", "]", ")", ",", "output_dim", "=", "D2", ",", "reuse", "=", "True", ")", "# shape: [N2*N2, D2]", "\n", "region_embed", "=", "tf", ".", "reshape", "(", "region_embed", ",", "[", "N1", ",", "N2", ",", "D2", "]", ")", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_pairwise", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "2", ")", "# shape: [N1, N2, D2]", "\n", "pairwise_score", "=", "fc", "(", "'pairwise_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ",", "reuse", "=", "True", ")", "# shape: [N1*N2, 1]", "\n", "pairwise_score", "=", "tf", ".", "reshape", "(", "pairwise_score", ",", "[", "N1", ",", "N2", "]", ")", "# shape: [N1, N2]", "\n", "5", "# add single score and pairwise score", "\n", "z_score", "=", "single_score", "*", "alpha1", "+", "pairwise_score", "*", "alpha2", "\n", "\n", "self", ".", "enc_visual_feat", "=", "z_visual_feat", "\n", "self", ".", "enc_spatial_feat", "=", "z_spatial_feat", "\n", "self", ".", "enc_score", "=", "z_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_decoder": [[226, 287], ["tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "text_bilstm_feat.get_shape().as_list", "text_word_embed_feat.get_shape().as_list", "region_spatial_feat.get_shape().as_list", "region_visual_feat.get_shape().as_list", "tensorflow.variable_scope", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reduce_sum", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reduce_sum", "util.cnn.fc_layer", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.tile", "tensorflow.concat", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "text_bilstm_feat.get_shape", "text_word_embed_feat.get_shape", "region_spatial_feat.get_shape", "region_visual_feat.get_shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer"], ["", "", "def", "build_decoder", "(", "self", ")", ":", "\n", "        ", "\"\"\" referent grounding score\n        \"\"\"", "\n", "# text and region features", "\n", "text_bilstm_feat", "=", "self", ".", "text_bilstm_feat", "\n", "text_word_embed_feat", "=", "self", ".", "text_word_embed_feat", "\n", "word_is_not_pad", "=", "self", ".", "word_is_not_pad", "\n", "region_visual_feat", "=", "self", ".", "region_visual_feat", "\n", "region_spatial_feat", "=", "self", ".", "region_spatial_feat", "\n", "enc_spatial_feat", "=", "self", ".", "enc_spatial_feat", "\n", "dec_dim", "=", "self", ".", "config", ".", "dec_dim", "\n", "\n", "# Tensor dimensionality", "\n", "L", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "0", "]", "\n", "N1", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "1", "]", "\n", "N2", "=", "tf", ".", "shape", "(", "region_spatial_feat", ")", "[", "0", "]", "\n", "D1", "=", "text_bilstm_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# lstm_dim*4", "\n", "D2", "=", "text_word_embed_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# embed_dim", "\n", "D3", "=", "region_spatial_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# spatial_dim", "\n", "D4", "=", "region_visual_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# visual_dim", "\n", "\n", "region_feat", "=", "tf", ".", "concat", "(", "[", "region_visual_feat", ",", "region_spatial_feat", "]", ",", "axis", "=", "1", ")", "# shape: [N2, D3+D4]", "\n", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "\n", "# 1. language-vision association between single RoI and the expression, represented by y^{r1} in the paper", "\n", "            ", "word_attention_single_score", "=", "fc", "(", "'word_attention_single'", ",", "tf", ".", "reshape", "(", "text_bilstm_feat", ",", "[", "-", "1", ",", "D1", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [L*N1, 1]", "\n", "word_attention_single_score", "=", "tf", ".", "reshape", "(", "word_attention_single_score", ",", "[", "L", ",", "N1", ",", "1", "]", ")", "\n", "word_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "word_attention_single_score", ",", "dim", "=", "0", ")", "*", "word_is_not_pad", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "word_prob", "/", "tf", ".", "reduce_sum", "(", "word_prob", ",", "0", ",", "keep_dims", "=", "True", ")", "# shape: [L, N1, 1]", "\n", "word_feat_single", "=", "tf", ".", "reduce_sum", "(", "word_prob", "*", "text_word_embed_feat", ",", "axis", "=", "0", ")", "# shape: [N1, D2]", "\n", "\n", "# 2. language-vision association between single RoI and the expression, represented by y^{r2} in the paper", "\n", "word_attention_pairwise_score", "=", "fc", "(", "'word_attention_pairwise'", ",", "tf", ".", "reshape", "(", "text_bilstm_feat", ",", "[", "-", "1", ",", "D1", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [L*N1, 1]", "\n", "word_attention_pairwise_score", "=", "tf", ".", "reshape", "(", "word_attention_pairwise_score", ",", "[", "L", ",", "N1", ",", "1", "]", ")", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "word_attention_pairwise_score", ",", "dim", "=", "0", ")", "*", "word_is_not_pad", "# shape: [L, N1, 1]", "\n", "word_prob", "=", "word_prob", "/", "tf", ".", "reduce_sum", "(", "word_prob", ",", "0", ",", "keep_dims", "=", "True", ")", "# shape: [L, N1, 1]", "\n", "word_feat_pairwise", "=", "tf", ".", "reduce_sum", "(", "word_prob", "*", "text_word_embed_feat", ",", "axis", "=", "0", ")", "# shape: [N1, D2]", "\n", "\n", "# 3. single region score: given every z region, check other region sub score induced by the z region", "\n", "region_embed", "=", "fc", "(", "'region_visual_spatial_embed'", ",", "region_feat", ",", "output_dim", "=", "D2", ")", "# shape: [N2, D2]", "\n", "region_embed", "=", "region_embed", "[", "tf", ".", "newaxis", ",", "...", "]", "# shape: [1, N2, D2]", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_single", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "2", ")", "# shape: [N1, N2, D2]", "\n", "single_score", "=", "fc", "(", "'single_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [N1*N2, 1]", "\n", "single_score", "=", "tf", ".", "reshape", "(", "single_score", ",", "[", "N1", ",", "N2", "]", ")", "# shape: [N1, N2]", "\n", "\n", "# 4. pairwise region score: given every z region, check their relations to other regions.", "\n", "region_spatial_tile", "=", "tf", ".", "tile", "(", "region_spatial_feat", "[", "tf", ".", "newaxis", ",", "...", "]", ",", "[", "N1", ",", "1", ",", "1", "]", ")", "# shape: [N1, N2, D3]", "\n", "region_spatial_concat", "=", "tf", ".", "concat", "(", "[", "region_spatial_tile", ",", "enc_spatial_feat", "]", ",", "axis", "=", "2", ")", "# shape: [N1, N2, D3*2]", "\n", "region_embed", "=", "fc", "(", "'region_spatial_embed'", ",", "tf", ".", "reshape", "(", "region_spatial_concat", ",", "[", "-", "1", ",", "D3", "*", "2", "]", ")", ",", "output_dim", "=", "D2", ")", "# shape: [N1*N2, D2]", "\n", "region_embed", "=", "tf", ".", "reshape", "(", "region_embed", ",", "[", "N1", ",", "N2", ",", "D2", "]", ")", "\n", "mm_feat_norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "*", "tf", ".", "reshape", "(", "word_feat_pairwise", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "2", ")", "# shape: [N1, N2, D2]", "\n", "pairwise_score", "=", "fc", "(", "'pairwise_score'", ",", "tf", ".", "reshape", "(", "mm_feat_norm", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [N1*N2, 1]", "\n", "pairwise_score", "=", "tf", ".", "reshape", "(", "pairwise_score", ",", "[", "N1", ",", "N2", "]", ")", "\n", "\n", "# 5. add single score and pairwise score", "\n", "alpha1", "=", "tf", ".", "get_variable", "(", "\"scale_alpha1\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "alpha2", "=", "tf", ".", "get_variable", "(", "\"scale_alpha2\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1", ")", ")", "\n", "single_score", "=", "single_score", "*", "alpha1", "\n", "pairwise_score", "=", "pairwise_score", "*", "alpha2", "\n", "score", "=", "single_score", "+", "pairwise_score", "# shape: [N1, N2]", "\n", "\n", "self", ".", "localization_score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_regulizer": [[288, 325], ["tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "text_bilstm_feat.get_shape().as_list", "text_word_embed_feat.get_shape().as_list", "region_spatial_feat.get_shape().as_list", "region_visual_feat.get_shape().as_list", "tensorflow.variable_scope", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reduce_sum", "util.cnn.fc_layer", "tensorflow.nn.l2_normalize", "util.cnn.fc_layer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reshape", "text_bilstm_feat.get_shape", "text_word_embed_feat.get_shape", "region_spatial_feat.get_shape", "region_visual_feat.get_shape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer"], ["", "", "def", "build_regulizer", "(", "self", ")", ":", "\n", "        ", "\"\"\" context regularization score\n        \"\"\"", "\n", "# text and region features", "\n", "text_bilstm_feat", "=", "self", ".", "text_bilstm_feat", "\n", "text_word_embed_feat", "=", "self", ".", "text_word_embed_feat", "\n", "word_is_not_pad", "=", "self", ".", "word_is_not_pad", "\n", "region_visual_feat", "=", "self", ".", "region_visual_feat", "\n", "region_spatial_feat", "=", "self", ".", "region_spatial_feat", "\n", "reg_dim", "=", "self", ".", "config", ".", "reg_dim", "\n", "\n", "# Tensor dimensionality", "\n", "L", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "0", "]", "\n", "N1", "=", "tf", ".", "shape", "(", "text_bilstm_feat", ")", "[", "1", "]", "\n", "N2", "=", "tf", ".", "shape", "(", "region_spatial_feat", ")", "[", "0", "]", "\n", "D1", "=", "text_bilstm_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# lstm_dim*4", "\n", "D2", "=", "text_word_embed_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# embed_dim", "\n", "D3", "=", "region_spatial_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# spatial_dim", "\n", "D4", "=", "region_visual_feat", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# visual_dim", "\n", "\n", "region_feat", "=", "tf", ".", "concat", "(", "[", "region_visual_feat", ",", "region_spatial_feat", "]", ",", "axis", "=", "1", ")", "# shape: [N2, D3+D4]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'regularizer'", ")", ":", "\n", "# 1. language-vision association between single RoI and the expression, represented by y^{g} in the paper", "\n", "            ", "word_obj_attention_score", "=", "fc", "(", "'word_attention_obj'", ",", "tf", ".", "reshape", "(", "text_bilstm_feat", ",", "[", "-", "1", ",", "D1", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [L*N1, 1]", "\n", "word_obj_attention_score", "=", "tf", ".", "reshape", "(", "word_obj_attention_score", ",", "[", "L", ",", "N1", ",", "1", "]", ")", "\n", "word_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "word_obj_attention_score", ",", "dim", "=", "0", ")", "*", "word_is_not_pad", "#shape: [L, N1, 1]", "\n", "word_prob", "=", "word_prob", "/", "tf", ".", "reduce_sum", "(", "word_prob", ",", "0", ",", "keep_dims", "=", "True", ")", "#shape: [L, N1, 1]", "\n", "word_obj_feat", "=", "tf", ".", "reduce_sum", "(", "word_prob", "*", "text_word_embed_feat", ",", "axis", "=", "0", ")", "#shape: [N1, D2]", "\n", "\n", "# 2. single score for subject", "\n", "region_embed", "=", "fc", "(", "'region_obj_embed'", ",", "region_feat", ",", "output_dim", "=", "D2", ")", "#shape: [N2, D2]", "\n", "mm_feat", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "region_embed", "[", "tf", ".", "newaxis", ",", "...", "]", "*", "tf", ".", "reshape", "(", "word_obj_feat", ",", "[", "N1", ",", "1", ",", "D2", "]", ")", ",", "dim", "=", "2", ")", "#shape: [N1, N2, D2]", "\n", "score", "=", "fc", "(", "'single_score'", ",", "tf", ".", "reshape", "(", "mm_feat", ",", "[", "-", "1", ",", "D2", "]", ")", ",", "output_dim", "=", "1", ")", "# shape: [N1*N2, 1]", "\n", "score", "=", "tf", ".", "reshape", "(", "score", ",", "[", "N1", ",", "N2", "]", ")", "#shape[N1, N2]", "\n", "\n", "self", ".", "prior_score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_model": [[326, 336], ["vc_model.VC_Model.build_text_feature", "vc_model.VC_Model.build_encoder", "vc_model.VC_Model.build_decoder", "vc_model.VC_Model.build_regulizer", "tensorflow.argmax"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_text_feature", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_encoder", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_decoder", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_regulizer"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Builds encoder, decoder and regulazier.\"\"\"", "\n", "self", ".", "build_text_feature", "(", ")", "\n", "self", ".", "build_encoder", "(", ")", "\n", "self", ".", "build_decoder", "(", ")", "\n", "self", ".", "build_regulizer", "(", ")", "\n", "\n", "# final score = localization_score - enc_score + prior_score", "\n", "self", ".", "scores", "=", "self", ".", "localization_score", "-", "self", ".", "enc_score", "+", "self", ".", "prior_score", "\n", "self", ".", "preds", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.evaluate": [[337, 340], ["util.tf_eval_tools.compute_accuracy"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.eval_tools.compute_accuracy"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluation.\"\"\"", "\n", "self", ".", "accuracy", "=", "compute_accuracy", "(", "self", ".", "region_spatial_feat", ",", "self", ".", "preds", ",", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_summary": [[341, 356], ["tensorflow.summary.merge_all", "tensorflow.variable_scope", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.variable_scope", "tensorflow.summary.scalar"], "methods", ["None"], ["", "def", "setup_summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set up summaries, such as loss, accuracy, and learning rate.\"\"\"", "\n", "\n", "# Summary collection", "\n", "with", "tf", ".", "variable_scope", "(", "'loss'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'cls_loss'", ",", "self", ".", "cls_loss_avg", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'reg_loss'", ",", "self", ".", "reg_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "self", ".", "learning_rate", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'accuracy'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'acc_trn'", ",", "self", ".", "accuracy_avg", ")", "\n", "\n", "# Add to update_ops collection.", "\n", "", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary_op", "=", "summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.is_training": [[357, 360], ["None"], "methods", ["None"], ["", "def", "is_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns true if the model is built for training mode.\"\"\"", "\n", "return", "self", ".", "mode", "==", "\"train\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_global_step": [[361, 370], ["tensorflow.Variable"], "methods", ["None"], ["", "def", "setup_global_step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up the global step Tensor.\"\"\"", "\n", "global_step", "=", "tf", ".", "Variable", "(", "\n", "initial_value", "=", "0", ",", "\n", "name", "=", "\"global_step\"", ",", "\n", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", ",", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ")", "\n", "\n", "self", ".", "global_step", "=", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_loss": [[371, 393], ["tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.add_n", "tensorflow.log", "tensorflow.reduce_max", "tensorflow.nn.l2_loss", "tensorflow.maximum", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "setup_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up loss.\"\"\"", "\n", "# Classification loss", "\n", "if", "self", ".", "is_supervised", ":", "\n", "            ", "cls_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "labels", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "cls_loss", "=", "-", "tf", ".", "log", "(", "tf", ".", "reduce_max", "(", "tf", ".", "maximum", "(", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ")", ",", "eps", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "cls_loss", "=", "tf", ".", "reduce_mean", "(", "cls_loss", ")", "\n", "\n", "# Regularization Loss", "\n", "train_var_list", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "reg_var_list", "=", "[", "var", "for", "var", "in", "train_var_list", "if", "\n", "(", "var", ".", "name", "[", "-", "9", ":", "-", "2", "]", "==", "'weights'", "or", "var", ".", "name", "[", "-", "8", ":", "-", "2", "]", "==", "'Matrix'", ")", "]", "\n", "reg_loss", "=", "self", ".", "config", ".", "weight_decay", "*", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "for", "var", "in", "reg_var_list", "]", ")", "\n", "\n", "total_loss", "=", "cls_loss", "+", "reg_loss", "\n", "\n", "self", ".", "cls_loss", "=", "cls_loss", "\n", "self", ".", "reg_loss", "=", "reg_loss", "\n", "self", ".", "total_loss", "=", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_train_op": [[394, 419], ["tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "tensorflow.trainable_variables", "tensorflow.train.MomentumOptimizer.compute_gradients", "tensorflow.train.MomentumOptimizer.apply_gradients", "tensorflow.add_to_collection", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "setup_train_op", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up the optimizer and train op.\"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "# Learning_rate", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "learning_rate", "=", "config", ".", "start_lr", ",", "\n", "global_step", "=", "self", ".", "global_step", ",", "\n", "decay_steps", "=", "config", ".", "lr_decay_step", ",", "\n", "decay_rate", "=", "config", ".", "lr_decay_rate", ",", "staircase", "=", "True", ")", "\n", "\n", "# Optimizer", "\n", "solver", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", "=", "learning_rate", ",", "momentum", "=", "config", ".", "momentum", ")", "\n", "\n", "# Compute gradients", "\n", "train_var_list", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads_and_vars", "=", "solver", ".", "compute_gradients", "(", "self", ".", "total_loss", ",", "var_list", "=", "train_var_list", ")", "\n", "# Clip gradient by L2 norm (set maximum L2 norm to 10).", "\n", "grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "g", ",", "clip_norm", "=", "config", ".", "clip_gradients", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads_and_vars", "]", "\n", "# Apply gradients.", "\n", "solver_op", "=", "solver", ".", "apply_gradients", "(", "grads_and_vars", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n", "# Add to update_ops collection.", "\n", "tf", ".", "add_to_collection", "(", "self", ".", "keys", ",", "solver_op", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_update_op": [[420, 441], ["tensorflow.Variable", "tensorflow.assign_add", "tensorflow.add_to_collection", "tensorflow.Variable", "tensorflow.assign_add", "tensorflow.add_to_collection"], "methods", ["None"], ["", "def", "setup_update_op", "(", "self", ")", ":", "\n", "# Average classification loss", "\n", "        ", "cls_loss_avg", "=", "tf", ".", "Variable", "(", "initial_value", "=", "0", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'cls_loss_avg'", ")", "\n", "cls_loss_op", "=", "tf", ".", "assign_add", "(", "cls_loss_avg", ",", "\n", "(", "1", "-", "self", ".", "config", ".", "avg_decay", ")", "*", "(", "self", ".", "cls_loss", "-", "cls_loss_avg", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "self", ".", "keys", ",", "cls_loss_op", ")", "\n", "\n", "# Average accuracy", "\n", "accuracy_avg", "=", "tf", ".", "Variable", "(", "initial_value", "=", "0", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "'accuracy_avg'", ")", "\n", "accuracy_op", "=", "tf", ".", "assign_add", "(", "accuracy_avg", ",", "\n", "(", "1", "-", "self", ".", "config", ".", "avg_decay", ")", "*", "(", "self", ".", "accuracy", "-", "accuracy_avg", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "self", ".", "keys", ",", "accuracy_op", ")", "\n", "\n", "self", ".", "cls_loss_avg", "=", "cls_loss_avg", "\n", "self", ".", "accuracy_avg", "=", "accuracy_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_ops": [[442, 451], ["vc_model.VC_Model.setup_loss", "vc_model.VC_Model.setup_train_op", "vc_model.VC_Model.setup_update_op", "tensorflow.group", "tensorflow.get_collection"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_loss", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_train_op", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_update_op"], ["", "def", "setup_ops", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets up all train_ops.\"\"\"", "\n", "self", ".", "setup_loss", "(", ")", "\n", "self", ".", "setup_train_op", "(", ")", "\n", "self", ".", "setup_update_op", "(", ")", "\n", "\n", "# Group all ops", "\n", "ops", "=", "tf", ".", "group", "(", "*", "tf", ".", "get_collection", "(", "self", ".", "keys", ")", ")", "\n", "self", ".", "ops", "=", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build": [[453, 462], ["tensorflow.variable_scope", "vc_model.VC_Model.build_inputs", "vc_model.VC_Model.build_model", "vc_model.VC_Model.evaluate", "vc_model.VC_Model.setup_global_step", "vc_model.VC_Model.is_training", "vc_model.VC_Model.setup_ops", "vc_model.VC_Model.setup_summary"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_inputs", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build_model", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.evaluate", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_global_step", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.is_training", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_ops", "home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.setup_summary"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'vc'", ")", ":", "\n", "            ", "self", ".", "build_inputs", "(", ")", "\n", "self", ".", "build_model", "(", ")", "\n", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "setup_global_step", "(", ")", "\n", "if", "self", ".", "is_training", "(", ")", ":", "\n", "                ", "self", ".", "setup_ops", "(", ")", "\n", "self", ".", "setup_summary", "(", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.test.main": [[17, 80], ["config.Model_Config", "config.File_Config", "vc_model.VC_Model", "vc_model.VC_Model.build", "util.DataReader.DataReader", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.run", "tensorflow.train.Saver", "tf.train.Saver.restore", "tensorflow.global_variables_initializer", "tqdm.trange", "print", "util.DataReader.DataReader.get_batch", "tf.Session.run", "numpy.argmax", "range", "len", "len", "util.ciou.iou_bboxes"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.None.vc_model.VC_Model.build", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.get_batch", "home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.iou_bboxes"], ["def", "main", "(", "unused_argv", ")", ":", "\n", "# Initialize configs and parameters    ", "\n", "    ", "model_config", "=", "config", ".", "Model_Config", "(", ")", "\n", "file_config", "=", "config", ".", "File_Config", "(", ")", "\n", "checkpoint", "=", "file_config", ".", "checkpoint", "\n", "#    assert os.path.exists(checkpoint + '.*'), \"checkpoint doesn't exist.\"", "\n", "\n", "# Set up model", "\n", "model", "=", "VC_Model", "(", "model_config", ",", "mode", "=", "'eval'", ")", "\n", "model", ".", "build", "(", ")", "\n", "\n", "# Set up datareader", "\n", "reader", "=", "DataReader", "(", "file_config", ")", "\n", "\n", "# Set up session", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "# Load parameters from checkpoint", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "\n", "# Set up evaluation splits", "\n", "if", "file_config", ".", "dataset", "in", "[", "'refcoco'", ",", "'refcoco+'", "]", ":", "\n", "        ", "test_split", "=", "[", "'testA'", ",", "'testB'", "]", "\n", "", "elif", "file_config", ".", "dataset", "==", "'refcocog'", ":", "\n", "        ", "test_split", "=", "[", "'val'", "]", "\n", "\n", "", "for", "split", "in", "test_split", ":", "\n", "        ", "num_correct", "=", "0", "\n", "num_total", "=", "0", "\n", "num_batch", "=", "reader", ".", "num_batch", "[", "split", "]", "\n", "for", "n_iter", "in", "tqdm", ".", "trange", "(", "num_batch", ")", ":", "\n", "# Read one batch", "\n", "            ", "batch", "=", "reader", ".", "get_batch", "(", "split", "=", "split", ",", "shuffle", "=", "False", ",", "echo", "=", "False", ")", "\n", "text_zseq", "=", "batch", "[", "'text_zseq_batch'", "]", "\n", "vis_feat", "=", "batch", "[", "'vis_batch'", "]", "\n", "visdif_feat", "=", "batch", "[", "'visdif_batch'", "]", "\n", "spa_feat", "=", "batch", "[", "'spa_batch'", "]", "\n", "label_val", "=", "batch", "[", "'label_batch'", "]", "\n", "\n", "scores_val", "=", "sess", ".", "run", "(", "model", ".", "scores", ",", "\n", "feed_dict", "=", "{", "model", ".", "text_seqs", ":", "text_zseq", ",", "\n", "model", ".", "region_vis_feat", ":", "vis_feat", ",", "\n", "model", ".", "region_visdif_feat", ":", "visdif_feat", ",", "\n", "model", ".", "region_spatial_feat", ":", "spa_feat", "\n", "}", ")", "\n", "\n", "predicts", "=", "np", ".", "argmax", "(", "scores_val", ",", "axis", "=", "1", ")", "\n", "labels", "=", "batch", "[", "'label_batch'", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                ", "gt_bbox", "=", "batch", "[", "'coco_bboxes'", "]", "[", "labels", "[", "i", "]", "]", "\n", "pred_bbox", "=", "batch", "[", "'coco_bboxes'", "]", "[", "predicts", "[", "i", "]", "]", "\n", "iou", "=", "ciou", ".", "iou_bboxes", "(", "pred_bbox", ",", "gt_bbox", ")", "\n", "if", "iou", ">=", "thresh_iou", ":", "\n", "                    ", "num_correct", "+=", "1", "\n", "", "", "num_total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "accuracy", "=", "num_correct", "/", "num_total", "\n", "print", "(", "\"%s overall_accuracy: %f\"", "%", "(", "split", ",", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.None.prepare_data.main": [[12, 23], ["config.File_Config", "os.path.exists", "print", "util.DataReader.DataReader", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "main", "(", "unused_argv", ")", ":", "\n", "# Data Params", "\n", "    ", "file_config", "=", "config", ".", "File_Config", "(", ")", "\n", "# Set up datareader", "\n", "vis_feat_path", "=", "'./data/vis_feats/%s_ann_vis_feats.pkl'", "%", "file_config", ".", "dataset", "\n", "if", "os", ".", "path", ".", "exists", "(", "vis_feat_path", ")", ":", "\n", "        ", "print", "(", "'Data prepared.'", ")", "\n", "", "else", ":", "\n", "        ", "if", "~", "os", ".", "path", ".", "exists", "(", "'./data/vis_feats'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./data/vis_feats/'", ")", "\n", "", "reader", "=", "DataReader", "(", "file_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.rnn.lstm_layer": [[8, 100], ["seq_bottom.get_shape().as_list", "numpy.prod", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.static_rnn", "seq_bottom.get_shape", "tensorflow.contrib.rnn.DropoutWrapper", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.reshape", "numpy.prod", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.split", "tensorflow.concat", "tensorflow.concat", "const_bottom.get_shape().as_list", "const_bottom.get_shape"], "function", ["None"], ["def", "lstm_layer", "(", "name", ",", "seq_bottom", ",", "const_bottom", ",", "output_dim", ",", "num_layers", "=", "1", ",", "\n", "forget_bias", "=", "0.0", ",", "apply_dropout", "=", "False", ",", "keep_prob", "=", "0.5", ",", "\n", "concat_output", "=", "True", ",", "sequence_length", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar LSTM layer to the `LSTMLayer` in Caffe\n    ----\n    Args:\n        seq_bottom : the underlying sequence input of size [T, N, D_in], where\n            D_in is the input dimension, T is num_steps and N is batch_size.\n        const_bottom : the constant bottom concatenated to each time step,\n            having shape [N, D_const]. This can be *None*. If it is None,\n            then this input is ignored.\n        output_dim : the number of hidden units in the LSTM unit and also the\n            final output dimension, i.e. D_out.\n        num_layers : the number of stacked LSTM layers.\n        forget_bias : forget gate bias in LSTM unit.\n        apply_dropout, keep_prob: dropout applied to the output of each LSTM\n            unit.\n        concat_output : if True, concatenate the ouputs (as is done in Caffe)\n        sequence_length : (Optional) Tensor of size [N], contains length of each\n                          sequence.\n\n    Returns:\n        output : a Tensor of [T, N, D_out] (if concat_output is True) or\n                 a list of T Tensors of [N, D_out] (if concat_output is False),\n                 where D_out is output_dim, T is num_steps and N is batch_size\n    \"\"\"", "\n", "\n", "# input shape is [T, N, D_in]", "\n", "input_shape", "=", "seq_bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "# the number of time steps to unroll", "\n", "num_steps", "=", "input_shape", "[", "0", "]", "\n", "# batch size (i.e. N)", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", "[", "2", ":", "]", ")", "\n", "\n", "# The actual parameter variable names are as follows (`name` is the name", "\n", "# variable here, and Cell0, Cell1, ... are num_layers stacked LSTM cells):", "\n", "#   `name`/RNN/MultiRNNCell/Cell0/BasicLSTMCell/Linear/Matrix", "\n", "#   `name`/RNN/MultiRNNCell/Cell0/BasicLSTMCell/Linear/Bias", "\n", "#   `name`/RNN/MultiRNNCell/Cell1/BasicLSTMCell/Linear/Matrix", "\n", "#   `name`/RNN/MultiRNNCell/Cell1/BasicLSTMCell/Linear/Bias", "\n", "# where Cell1 is on top of Cell0, taking Cell0's hidden states as inputs.", "\n", "#", "\n", "# For Cell0, the weight matrix ('BasicLSTMCell/Linear/Matrix') has shape", "\n", "# [D_in+D_const+D_out, 4*D_out], and bias has shape [4*D_out].", "\n", "# For Cell1, Cell2, ..., the weight matrix ('BasicLSTMCell/Linear/Matrix')", "\n", "# has shape [D_out*2, 4*D_out], and bias has shape [4*D_out].", "\n", "# In the weight matrix, the first D_in+D_const rows (in Cell0) or D_out rows", "\n", "# (in Cell1, Cell2, ...) are bottom input weights, and the rest D_out rows", "\n", "# are state weights, i.e. *inputs are before states in weight matrix*", "\n", "#", "\n", "# The gate order in 4*D_out are i, j (i.e. g), f, o, where", "\n", "# i = input_gate, j = new_input, f = forget_gate, o = output_gate", "\n", "# *this gate order is different from the i, f, o, g order in Caffe LSTM*", "\n", "#", "\n", "# Other details in tensorflow/python/ops/rnn_cell.py", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# the basic LSTM cell", "\n", "        ", "lstm_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "output_dim", ",", "forget_bias", ",", "\n", "state_is_tuple", "=", "True", ")", "\n", "\n", "# Apply dropout if specified.", "\n", "if", "apply_dropout", "and", "keep_prob", "<", "1", ":", "\n", "            ", "lstm_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "\n", "lstm_cell", ",", "output_keep_prob", "=", "keep_prob", ")", "\n", "", "if", "num_layers", ">", "1", ":", "\n", "            ", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "[", "lstm_cell", "]", "*", "num_layers", ",", "\n", "state_is_tuple", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "cell", "=", "lstm_cell", "\n", "\n", "# Split along time dimension and flatten each component.", "\n", "# `inputs` is a list.", "\n", "", "inputs", "=", "[", "tf", ".", "reshape", "(", "input_", ",", "[", "-", "1", ",", "input_dim", "]", ")", "\n", "for", "input_", "in", "tf", ".", "split", "(", "seq_bottom", ",", "num_steps", ",", "axis", "=", "0", ")", "]", "\n", "# Add constant input to each time step.", "\n", "if", "not", "const_bottom", "is", "None", ":", "\n", "# Flatten const_bottom into shape [N, D_const] and concatenate.", "\n", "            ", "const_dim", "=", "np", ".", "prod", "(", "const_bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "const_input_", "=", "tf", ".", "reshape", "(", "const_bottom", ",", "[", "-", "1", ",", "const_dim", "]", ")", "\n", "inputs", "=", "[", "tf", ".", "concat", "(", "[", "input_", ",", "const_input_", "]", ",", "axis", "=", "0", ")", "\n", "for", "input_", "in", "inputs", "]", "\n", "\n", "# Create the Recurrent Network and collect `outputs`. `states` are", "\n", "# ignored.", "\n", "", "outputs", ",", "_", "=", "tf", ".", "contrib", ".", "rnn", ".", "static_rnn", "(", "cell", ",", "inputs", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "sequence_length", "=", "sequence_length", ")", "\n", "if", "concat_output", ":", "\n", "# Concat the outputs into [T, N, D_out].", "\n", "            ", "outputs", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", ",", "\n", "[", "num_steps", ",", "-", "1", ",", "output_dim", "]", ")", "\n", "", "", "return", "outputs", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_area": [[7, 19], ["tensorflow.slice", "tensorflow.slice", "tensorflow.reduce_prod", "tensorflow.maximum", "tensorflow.subtract"], "function", ["None"], ["def", "compute_area", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Calculates area of the given box\n    Input:\n        bbox: bounding boxes, [N_batch, (x1, y1, x2, y2)]     \n    Output:\n        area: [N_batch, (area)]  \n    \"\"\"", "\n", "tl", "=", "tf", ".", "slice", "(", "bbox", ",", "begin", "=", "[", "0", ",", "0", "]", ",", "size", "=", "[", "-", "1", ",", "2", "]", ")", "# top left", "\n", "br", "=", "tf", ".", "slice", "(", "bbox", ",", "begin", "=", "[", "0", ",", "2", "]", ",", "size", "=", "[", "-", "1", ",", "2", "]", ")", "# bottom right", "\n", "area", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "subtract", "(", "br", ",", "tl", ")", ",", "axis", "=", "1", ")", "\n", "area", "=", "tf", ".", "maximum", "(", "area", ",", "0", ")", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_iou": [[20, 49], ["tensorflow.slice", "tensorflow.slice", "tf_eval_tools.compute_area", "tf_eval_tools.compute_area", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.maximum", "tensorflow.cast", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.divide"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_area", "home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_area"], ["", "def", "compute_iou", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "    ", "\"\"\"Calculates IoU of the given box\n    Input:\n        bbox_det: detected bounding boxes, [N_batch, (x1, y1, x2, y2, ...)]\n        bbox_gt: ground truth bounding boxes [N_batch, (x1, y1, x2, y2, ...)]        \n    Output:\n        IoU: [N_batch, (IoU)]    \n    \"\"\"", "\n", "\n", "# bbox should be [N_batch, (x1, y1, x2, y2)]", "\n", "bbox1", "=", "tf", ".", "slice", "(", "bbox1", ",", "begin", "=", "[", "0", ",", "0", "]", ",", "size", "=", "[", "-", "1", ",", "4", "]", ")", "\n", "bbox2", "=", "tf", ".", "slice", "(", "bbox2", ",", "begin", "=", "[", "0", ",", "0", "]", ",", "size", "=", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "# Compute area", "\n", "area1", "=", "compute_area", "(", "bbox1", ")", "\n", "area2", "=", "compute_area", "(", "bbox2", ")", "\n", "\n", "bbox_min", "=", "tf", ".", "minimum", "(", "bbox1", ",", "bbox2", ")", "\n", "bbox_max", "=", "tf", ".", "maximum", "(", "bbox1", ",", "bbox2", ")", "\n", "x1_min", ",", "y1_min", ",", "x2_min", ",", "y2_min", "=", "tf", ".", "unstack", "(", "bbox_min", ",", "axis", "=", "1", ")", "\n", "x1_max", ",", "y1_max", ",", "x2_max", ",", "y2_max", "=", "tf", ".", "unstack", "(", "bbox_max", ",", "axis", "=", "1", ")", "\n", "\n", "# Compute intersection, union, IoU", "\n", "intersection", "=", "tf", ".", "maximum", "(", "x2_min", "-", "x1_max", ",", "0", ")", "*", "tf", ".", "maximum", "(", "y2_min", "-", "y1_max", ",", "0", ")", "\n", "union", "=", "area1", "+", "area2", "-", "intersection", "\n", "IoU", "=", "tf", ".", "maximum", "(", "tf", ".", "divide", "(", "intersection", ",", "union", ")", ",", "0", ")", "\n", "IoU", "=", "tf", ".", "cast", "(", "IoU", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_accuracy": [[50, 74], ["tensorflow.gather", "tensorflow.gather", "tf_eval_tools.compute_iou", "tensorflow.constant", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.greater_equal"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.tf_eval_tools.compute_iou"], ["", "def", "compute_accuracy", "(", "bbox", ",", "preds", ",", "labels", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Calculates accuracy\n    Input:\n        bbox: bounding boxes, [N_batch, (x1, y1, x2, y2, ...)]\n        preds: predictions, [N_batch, (preds)]\n        labels: labels, [N_batch, (labels)]\n        threshold: IoU threshold, float\n    Output:\n        acc: [N_batch, (acc)]    \n    \"\"\"", "\n", "\n", "# Gather predicted and ground-truth bounding box.", "\n", "bbox_pred", "=", "tf", ".", "gather", "(", "bbox", ",", "preds", ")", "\n", "bbox_gt", "=", "tf", ".", "gather", "(", "bbox", ",", "labels", ")", "\n", "\n", "# Compute IoU", "\n", "IoU", "=", "compute_iou", "(", "bbox_pred", ",", "bbox_gt", ")", "\n", "\n", "# Compute IoU>threshold", "\n", "threshold_ph", "=", "tf", ".", "constant", "(", "threshold", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "acc", "=", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "IoU", ",", "threshold", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "acc", "=", "tf", ".", "reduce_mean", "(", "acc", ")", "\n", "\n", "return", "acc", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.MyEncoder.default": [[19, 28], ["isinstance", "int", "isinstance", "float", "isinstance", "obj.tolist", "super().default"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.io.MyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "np", ".", "integer", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "floating", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "MyEncoder", ",", "self", ")", ".", "default", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.load_str_list": [[7, 12], ["open", "f.readlines"], "function", ["None"], ["def", "load_str_list", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "str_list", "=", "f", ".", "readlines", "(", ")", "\n", "", "str_list", "=", "[", "s", "[", ":", "-", "1", "]", "for", "s", "in", "str_list", "]", "\n", "return", "str_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.save_str_list": [[13, 17], ["open", "f.writelines"], "function", ["None"], ["", "def", "save_str_list", "(", "str_list", ",", "filename", ")", ":", "\n", "    ", "str_list", "=", "[", "s", "+", "'\\n'", "for", "s", "in", "str_list", "]", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "str_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.load_json": [[29, 32], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.save_json": [[33, 36], ["open", "json.dump"], "function", ["None"], ["", "", "def", "save_json", "(", "json_obj", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "json_obj", ",", "f", ",", "separators", "=", "(", "',\\n'", ",", "':\\n'", ")", ",", "cls", "=", "MyEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.load_numpy_obj": [[37, 39], ["numpy.load"], "function", ["None"], ["", "", "def", "load_numpy_obj", "(", "filename", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "filename", ")", "[", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.save_numpy_obj": [[40, 42], ["numpy.save", "numpy.array"], "function", ["None"], ["", "def", "save_numpy_obj", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "return", "np", ".", "save", "(", "filename", ",", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "object", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.load_refclef_gt_mask": [[43, 47], ["scipy.loadmat"], "function", ["None"], ["", "def", "load_refclef_gt_mask", "(", "mask_path", ")", ":", "\n", "    ", "mat", "=", "sio", ".", "loadmat", "(", "mask_path", ")", "\n", "mask", "=", "(", "mat", "[", "'segimg_t'", "]", "==", "0", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.io.load_proposal_mask": [[48, 52], ["scipy.loadmat", "mask.transpose"], "function", ["None"], ["", "def", "load_proposal_mask", "(", "mask_path", ")", ":", "\n", "    ", "mat", "=", "sio", ".", "loadmat", "(", "mask_path", ")", "\n", "mask", "=", "mat", "[", "'mask'", "]", "\n", "return", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_conv5": [[17, 55], ["tensorflow.variable_scope", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.pooling_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.pooling_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.pooling_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.pooling_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer", "util.cnn.conv_relu_layer"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.pooling_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.pooling_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.pooling_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.pooling_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer"], ["def", "vgg_conv5", "(", "input_batch", ",", "name", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# layer 1", "\n", "        ", "conv1_1", "=", "conv_relu", "(", "'conv1_1'", ",", "input_batch", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "64", ")", "\n", "conv1_2", "=", "conv_relu", "(", "'conv1_2'", ",", "conv1_1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "64", ")", "\n", "pool1", "=", "pool", "(", "'pool1'", ",", "conv1_2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# layer 2", "\n", "conv2_1", "=", "conv_relu", "(", "'conv2_1'", ",", "pool1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "128", ")", "\n", "conv2_2", "=", "conv_relu", "(", "'conv2_2'", ",", "conv2_1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "128", ")", "\n", "pool2", "=", "pool", "(", "'pool2'", ",", "conv2_2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# layer 3", "\n", "conv3_1", "=", "conv_relu", "(", "'conv3_1'", ",", "pool2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "256", ")", "\n", "conv3_2", "=", "conv_relu", "(", "'conv3_2'", ",", "conv3_1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "256", ")", "\n", "conv3_3", "=", "conv_relu", "(", "'conv3_3'", ",", "conv3_2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "256", ")", "\n", "pool3", "=", "pool", "(", "'pool3'", ",", "conv3_3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# layer 4", "\n", "conv4_1", "=", "conv_relu", "(", "'conv4_1'", ",", "pool3", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "conv4_2", "=", "conv_relu", "(", "'conv4_2'", ",", "conv4_1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "conv4_3", "=", "conv_relu", "(", "'conv4_3'", ",", "conv4_2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "pool4", "=", "pool", "(", "'pool4'", ",", "conv4_3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# layer 5", "\n", "conv5_1", "=", "conv_relu", "(", "'conv5_1'", ",", "pool4", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "conv5_2", "=", "conv_relu", "(", "'conv5_2'", ",", "conv5_1", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "conv5_3", "=", "conv_relu", "(", "'conv5_3'", ",", "conv5_2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "output_dim", "=", "512", ")", "\n", "", "return", "conv5_3", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_roi_fc7_from_conv5": [[56, 68], ["tensorflow.variable_scope", "util.roi_pooling.roi_pool", "util.cnn.fc_relu_layer", "util.cnn.fc_relu_layer", "tensorflow.python.ops.nn.dropout", "tensorflow.python.ops.nn.dropout"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_relu_layer", "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_relu_layer"], ["", "def", "vgg_roi_fc7_from_conv5", "(", "conv5", ",", "roi_batch", ",", "name", ",", "apply_dropout", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# ROI Pooling", "\n", "        ", "roi_pool5", ",", "_", "=", "roi_pool", "(", "conv5", ",", "roi_batch", ",", "pooled_height", "=", "7", ",", "pooled_width", "=", "7", ",", "\n", "spatial_scale", "=", "1.", "/", "16", ",", "name", "=", "'roi_pool5'", ")", "\n", "# layer 6", "\n", "fc6", "=", "fc_relu", "(", "'fc6'", ",", "roi_pool5", ",", "output_dim", "=", "4096", ")", "\n", "if", "apply_dropout", ":", "fc6", "=", "drop", "(", "fc6", ",", "0.5", ")", "\n", "# layer 7", "\n", "fc7", "=", "fc_relu", "(", "'fc7'", ",", "fc6", ",", "output_dim", "=", "4096", ")", "\n", "if", "apply_dropout", ":", "fc7", "=", "drop", "(", "fc7", ",", "0.5", ")", "\n", "", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_roi_fc7": [[69, 73], ["fastrcnn_vgg_net.vgg_conv5", "fastrcnn_vgg_net.vgg_roi_fc7_from_conv5"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_conv5", "home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_roi_fc7_from_conv5"], ["", "def", "vgg_roi_fc7", "(", "input_batch", ",", "roi_batch", ",", "name", ",", "apply_dropout", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "conv5", "=", "vgg_conv5", "(", "input_batch", ",", "name", ",", "reuse", "=", "reuse", ")", "\n", "fc7", "=", "vgg_roi_fc7_from_conv5", "(", "conv5", ",", "roi_batch", ",", "name", ",", "apply_dropout", ",", "reuse", "=", "reuse", ")", "\n", "return", "fc7", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.load_vocab_dict_from_file": [[9, 20], ["Exception", "open", "io.open", "range", "w.strip", "w.strip", "len", "f.readlines", "f.readlines"], "function", ["None"], ["def", "load_vocab_dict_from_file", "(", "dict_file", ",", "pad_at_first", "=", "True", ")", ":", "\n", "    ", "if", "(", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ")", ":", "\n", "        ", "with", "open", "(", "dict_file", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "words", "=", "[", "w", ".", "strip", "(", ")", "for", "w", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "with", "io", ".", "open", "(", "dict_file", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "words", "=", "[", "w", ".", "strip", "(", ")", "for", "w", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "if", "pad_at_first", "and", "words", "[", "0", "]", "!=", "'<pad>'", ":", "\n", "        ", "raise", "Exception", "(", "\"The first word needs to be <pad> in the word list.\"", ")", "\n", "", "vocab_dict", "=", "{", "words", "[", "n", "]", ":", "n", "for", "n", "in", "range", "(", "len", "(", "words", ")", ")", "}", "\n", "return", "vocab_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.sentence2vocab_indices": [[23, 34], ["isinstance", "SENTENCE_SPLIT_REGEX.split", "sentence.decode.decode", "sentence.decode.strip", "w.lower().replace", "len", "w.lower", "len", "w.strip"], "function", ["None"], ["def", "sentence2vocab_indices", "(", "sentence", ",", "vocab_dict", ")", ":", "\n", "    ", "if", "isinstance", "(", "sentence", ",", "bytes", ")", ":", "\n", "        ", "sentence", "=", "sentence", ".", "decode", "(", ")", "\n", "", "words", "=", "SENTENCE_SPLIT_REGEX", ".", "split", "(", "sentence", ".", "strip", "(", ")", ")", "\n", "words", "=", "[", "w", ".", "lower", "(", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "for", "w", "in", "words", "if", "len", "(", "w", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "# remove .", "\n", "if", "len", "(", "words", ")", ">", "0", "and", "(", "words", "[", "-", "1", "]", "==", "'.'", "or", "words", "[", "-", "1", "]", "==", "'?'", ")", ":", "\n", "        ", "words", "=", "words", "[", ":", "-", "1", "]", "\n", "", "vocab_indices", "=", "[", "(", "vocab_dict", "[", "w", "]", "if", "w", "in", "vocab_dict", "else", "vocab_dict", "[", "UNK_IDENTIFIER", "]", ")", "\n", "for", "w", "in", "words", "]", "\n", "return", "vocab_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.preprocess_vocab_indices": [[36, 49], ["len", "len", "len", "len"], "function", ["None"], ["def", "preprocess_vocab_indices", "(", "vocab_indices", ",", "vocab_dict", ",", "T", ",", "mode", "=", "'zseq'", ")", ":", "\n", "# Truncate long sentences", "\n", "    ", "assert", "mode", "in", "[", "'zseq'", ",", "'seqz'", "]", ",", "\"preprocess_vocab_indices mode should be zseq/seqz\"", "\n", "if", "len", "(", "vocab_indices", ")", ">", "T", ":", "\n", "        ", "vocab_indices", "=", "vocab_indices", "[", ":", "T", "]", "\n", "", "if", "len", "(", "vocab_indices", ")", "<", "T", ":", "\n", "        ", "if", "mode", "==", "'zseq'", ":", "\n", "# Pad short sentences at the beginning with the special symbol '<pad>'", "\n", "            ", "vocab_indices", "=", "[", "vocab_dict", "[", "PAD_IDENTIFIER", "]", "]", "*", "(", "T", "-", "len", "(", "vocab_indices", ")", ")", "+", "vocab_indices", "\n", "", "else", ":", "\n", "# Pad short sentences at the end with the special symbol '<pad>'", "\n", "            ", "vocab_indices", "=", "vocab_indices", "+", "[", "vocab_dict", "[", "PAD_IDENTIFIER", "]", "]", "*", "(", "T", "-", "len", "(", "vocab_indices", ")", ")", "\n", "", "", "return", "vocab_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.preprocess_sentence": [[50, 53], ["text_processing.sentence2vocab_indices", "text_processing.preprocess_vocab_indices"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.sentence2vocab_indices", "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.preprocess_vocab_indices"], ["", "def", "preprocess_sentence", "(", "sentence", ",", "vocab_dict", ",", "T", ",", "mode", "=", "'zseq'", ")", ":", "\n", "    ", "vocab_indices", "=", "sentence2vocab_indices", "(", "sentence", ",", "vocab_dict", ")", "\n", "return", "preprocess_vocab_indices", "(", "vocab_indices", ",", "vocab_dict", ",", "T", ",", "mode", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.eval_tools.compute_accuracy": [[9, 24], ["numpy.logical_not", "numpy.sum", "numpy.sum", "numpy.logical_xor", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.isnan", "numpy.isnan", "numpy.isnan"], "function", ["None"], ["def", "compute_accuracy", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "is_pos", "=", "(", "labels", "!=", "0", ")", "\n", "is_neg", "=", "np", ".", "logical_not", "(", "is_pos", ")", "\n", "num_pos", "=", "np", ".", "sum", "(", "is_pos", ")", "\n", "num_neg", "=", "np", ".", "sum", "(", "is_neg", ")", "\n", "num_all", "=", "num_pos", "+", "num_neg", "\n", "\n", "is_correct", "=", "np", ".", "logical_xor", "(", "scores", "<", "0", ",", "is_pos", ")", "\n", "accuracy_all", "=", "np", ".", "sum", "(", "is_correct", ")", "/", "num_all", "\n", "accuracy_pos", "=", "np", ".", "sum", "(", "is_correct", "[", "is_pos", "]", ")", "/", "num_pos", "\n", "accuracy_neg", "=", "np", ".", "sum", "(", "is_correct", "[", "is_neg", "]", ")", "/", "num_neg", "\n", "accuracy_all", "=", "0", "if", "np", ".", "isnan", "(", "accuracy_all", ")", "else", "accuracy_all", "\n", "accuracy_pos", "=", "0", "if", "np", ".", "isnan", "(", "accuracy_pos", ")", "else", "accuracy_pos", "\n", "accuracy_neg", "=", "0", "if", "np", ".", "isnan", "(", "accuracy_neg", ")", "else", "accuracy_neg", "\n", "return", "accuracy_all", ",", "accuracy_pos", ",", "accuracy_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.eval_tools.compute_bbox_iou": [[26, 47], ["isinstance", "np.array.reshape", "isinstance", "np.array.reshape", "numpy.all", "numpy.all", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.array", "numpy.array", "numpy.maximum", "numpy.maximum", "numpy.all", "numpy.all"], "function", ["None"], ["", "def", "compute_bbox_iou", "(", "bboxes", ",", "target", ")", ":", "\n", "    ", "if", "isinstance", "(", "bboxes", ",", "list", ")", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "", "bboxes", "=", "bboxes", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "        ", "target", "=", "np", ".", "array", "(", "target", ")", "\n", "", "target", "=", "target", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "A_bboxes", "=", "(", "bboxes", "[", "...", ",", "2", "]", "-", "bboxes", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "bboxes", "[", "...", ",", "3", "]", "-", "bboxes", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "A_target", "=", "(", "target", "[", "...", ",", "2", "]", "-", "target", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "target", "[", "...", ",", "3", "]", "-", "target", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "assert", "(", "np", ".", "all", "(", "A_bboxes", ">=", "0", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "A_target", ">=", "0", ")", ")", "\n", "I_x1", "=", "np", ".", "maximum", "(", "bboxes", "[", "...", ",", "0", "]", ",", "target", "[", "...", ",", "0", "]", ")", "\n", "I_y1", "=", "np", ".", "maximum", "(", "bboxes", "[", "...", ",", "1", "]", ",", "target", "[", "...", ",", "1", "]", ")", "\n", "I_x2", "=", "np", ".", "minimum", "(", "bboxes", "[", "...", ",", "2", "]", ",", "target", "[", "...", ",", "2", "]", ")", "\n", "I_y2", "=", "np", ".", "minimum", "(", "bboxes", "[", "...", ",", "3", "]", ",", "target", "[", "...", ",", "3", "]", ")", "\n", "A_I", "=", "np", ".", "maximum", "(", "I_x2", "-", "I_x1", "+", "1", ",", "0", ")", "*", "np", ".", "maximum", "(", "I_y2", "-", "I_y1", "+", "1", ",", "0", ")", "\n", "IoUs", "=", "A_I", "/", "(", "A_bboxes", "+", "A_target", "-", "A_I", ")", "\n", "assert", "(", "np", ".", "all", "(", "0", "<=", "IoUs", ")", "and", "np", ".", "all", "(", "IoUs", "<=", "1", ")", ")", "\n", "return", "IoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.eval_tools.compute_bboxes_iou_mat": [[48, 76], ["isinstance", "np.array.reshape", "isinstance", "np.array.reshape", "numpy.all", "numpy.all", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.array", "numpy.array", "numpy.maximum", "numpy.maximum", "numpy.all", "numpy.all"], "function", ["None"], ["", "def", "compute_bboxes_iou_mat", "(", "bboxes1", ",", "bboxes2", ")", ":", "\n", "    ", "\"\"\"\n    bboxes1 is N1 x 4, bboxes 2 is N2 x 4, both [xmin, ymin, xmax, ymax] format,\n      0-indexed, including xmax and ymax\n\n    Returns a N1 x N2 matrix of IoU between boxes in bboxes1 and bboxes2\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "bboxes1", ",", "list", ")", ":", "\n", "        ", "bboxes1", "=", "np", ".", "array", "(", "bboxes1", ")", "\n", "", "bboxes1", "=", "bboxes1", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "4", ")", ")", "\n", "\n", "if", "isinstance", "(", "bboxes2", ",", "list", ")", ":", "\n", "        ", "bboxes2", "=", "np", ".", "array", "(", "bboxes2", ")", "\n", "", "bboxes2", "=", "bboxes2", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "4", ")", ")", "\n", "\n", "A_bboxes1", "=", "(", "bboxes1", "[", "...", ",", "2", "]", "-", "bboxes1", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "bboxes1", "[", "...", ",", "3", "]", "-", "bboxes1", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "A_bboxes2", "=", "(", "bboxes2", "[", "...", ",", "2", "]", "-", "bboxes2", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "bboxes2", "[", "...", ",", "3", "]", "-", "bboxes2", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "assert", "(", "np", ".", "all", "(", "A_bboxes1", ">=", "0", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "A_bboxes2", ">=", "0", ")", ")", "\n", "I_x1", "=", "np", ".", "maximum", "(", "bboxes1", "[", "...", ",", "0", "]", ",", "bboxes2", "[", "...", ",", "0", "]", ")", "\n", "I_y1", "=", "np", ".", "maximum", "(", "bboxes1", "[", "...", ",", "1", "]", ",", "bboxes2", "[", "...", ",", "1", "]", ")", "\n", "I_x2", "=", "np", ".", "minimum", "(", "bboxes1", "[", "...", ",", "2", "]", ",", "bboxes2", "[", "...", ",", "2", "]", ")", "\n", "I_y2", "=", "np", ".", "minimum", "(", "bboxes1", "[", "...", ",", "3", "]", ",", "bboxes2", "[", "...", ",", "3", "]", ")", "\n", "A_I", "=", "np", ".", "maximum", "(", "I_x2", "-", "I_x1", "+", "1", ",", "0", ")", "*", "np", ".", "maximum", "(", "I_y2", "-", "I_y1", "+", "1", ",", "0", ")", "\n", "IoUs", "=", "A_I", "/", "(", "A_bboxes1", "+", "A_bboxes2", "-", "A_I", ")", "\n", "assert", "(", "np", ".", "all", "(", "0", "<=", "IoUs", ")", "and", "np", ".", "all", "(", "IoUs", "<=", "1", ")", ")", "\n", "return", "IoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.eval_tools.compute_mask_IU": [[78, 83], ["numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_or"], "function", ["None"], ["", "def", "compute_mask_IU", "(", "masks", ",", "target", ")", ":", "\n", "    ", "assert", "(", "target", ".", "shape", "[", "-", "2", ":", "]", "==", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "I", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "masks", ",", "target", ")", ")", "\n", "U", "=", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "masks", ",", "target", ")", ")", "\n", "return", "I", ",", "U", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.__init__": [[26, 105], ["util.text_processing.load_vocab_dict_from_file", "DataReader.DataReader.to_dict", "DataReader.DataReader.to_dict", "DataReader.DataReader.to_dict", "DataReader.DataReader.to_dict", "list", "list", "list", "DataReader.DataReader.print_info", "DataReader.DataReader.print_info", "DataReader.DataReader.print_info", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.print_info", "DataReader.DataReader.print_info", "DataReader.DataReader.fetch_spa_feat", "DataReader.DataReader.fetch_vis_feat", "DataReader.DataReader.print_info", "DataReader.DataReader.print_info", "open", "json.load", "DataReader.DataReader.refs.keys", "DataReader.DataReader.anns.keys", "DataReader.DataReader.images.keys", "DataReader.DataReader.key_to_key", "DataReader.DataReader.key_to_key", "DataReader.DataReader.fetch_nn_ids", "DataReader.DataReader.print_info", "DataReader.DataReader.fetch_spadif_feat", "DataReader.DataReader.fetch_visdif_feat", "DataReader.DataReader.get_split_ids", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.load_vocab_dict_from_file", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.to_dict", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.to_dict", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.to_dict", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.to_dict", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_spa_feat", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_vis_feat", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_nn_ids", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_spadif_feat", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_visdif_feat", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.get_split_ids"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "\n", "use_category", "=", "True", ")", ":", "\n", "\n", "        ", "option", "=", "'%s_%s'", "%", "(", "config", ".", "dataset", ",", "config", ".", "split", ")", "\n", "data_path", "=", "'./data/raw/%s/data.json'", "%", "option", "\n", "vis_feat_path", "=", "'./data/vis_feats/%s_ann_vis_feats.pkl'", "%", "config", ".", "dataset", "\n", "vocab_file", "=", "'./data/word_embedding/vocabulary_72700.txt'", "\n", "info_print", "=", "config", ".", "info_print", "\n", "\n", "# load data ", "\n", "self", ".", "use_category", "=", "use_category", "\n", "self", ".", "info_print", "=", "info_print", "\n", "with", "open", "(", "data_path", ")", "as", "data_file", ":", "\n", "            ", "self", ".", "data", "=", "json", ".", "load", "(", "data_file", ")", "\n", "", "self", ".", "vis_feat_path", "=", "vis_feat_path", "\n", "self", ".", "vocab_dict", "=", "text_processing", ".", "load_vocab_dict_from_file", "(", "vocab_file", ")", "\n", "\n", "# index to word", "\n", "self", ".", "ix_to_word", "=", "self", ".", "data", "[", "'ix_to_word'", "]", "\n", "self", ".", "word_to_ix", "=", "self", ".", "data", "[", "'word_to_ix'", "]", "\n", "\n", "# restruct refs, anns, images to dictionary", "\n", "self", ".", "refs", "=", "self", ".", "to_dict", "(", "'refs'", ",", "'ref_id'", ")", "\n", "self", ".", "anns", "=", "self", ".", "to_dict", "(", "'anns'", ",", "'ann_id'", ")", "\n", "self", ".", "sents", "=", "self", ".", "to_dict", "(", "'sentences'", ",", "'sent_id'", ")", "\n", "self", ".", "images", "=", "self", ".", "to_dict", "(", "'images'", ",", "'image_id'", ")", "\n", "\n", "# collect ref_ids, ann_ids, image_ids", "\n", "self", ".", "ref_ids", "=", "list", "(", "self", ".", "refs", ".", "keys", "(", ")", ")", "\n", "self", ".", "ann_ids", "=", "list", "(", "self", ".", "anns", ".", "keys", "(", ")", ")", "\n", "self", ".", "image_ids", "=", "list", "(", "self", ".", "images", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "print_info", "(", "'We have %d images.'", "%", "len", "(", "self", ".", "image_ids", ")", ")", "\n", "self", ".", "print_info", "(", "'We have %d anns.'", "%", "len", "(", "self", ".", "ann_ids", ")", ")", "\n", "self", ".", "print_info", "(", "'We have %d refs.'", "%", "len", "(", "self", ".", "ref_ids", ")", ")", "\n", "\n", "# collect ref_to_ann, ref_to_sents, ann_to_image, image_to_anns, etc", "\n", "self", ".", "ref_to_ann", "=", "self", ".", "key_to_key", "(", "'ref'", ",", "'ann_id'", ")", "\n", "if", "use_category", ":", "\n", "            ", "self", ".", "ref_to_cat", "=", "self", ".", "key_to_key", "(", "'ref'", ",", "'category_id'", ")", "\n", "", "self", ".", "ref_to_image", "=", "self", ".", "key_to_key", "(", "'ref'", ",", "'image_id'", ")", "\n", "self", ".", "ref_to_sents", "=", "self", ".", "key_to_key", "(", "'ref'", ",", "'sent_ids'", ")", "\n", "self", ".", "ann_to_image", "=", "self", ".", "key_to_key", "(", "'ann'", ",", "'image_id'", ")", "\n", "if", "use_category", ":", "\n", "            ", "self", ".", "ann_to_cat", "=", "self", ".", "key_to_key", "(", "'ann'", ",", "'category_id'", ")", "\n", "", "self", ".", "ann_to_box", "=", "self", ".", "key_to_key", "(", "'ann'", ",", "'box'", ")", "\n", "self", ".", "image_to_anns", "=", "self", ".", "key_to_key", "(", "'image'", ",", "'ann_ids'", ")", "\n", "self", ".", "image_to_refs", "=", "self", ".", "key_to_key", "(", "'image'", ",", "'ref_ids'", ")", "\n", "self", ".", "print_info", "(", "'Mapping finished.'", ")", "\n", "\n", "# collect visual and spatial features", "\n", "self", ".", "print_info", "(", "'Collecting visual and spatial features...'", ")", "\n", "self", ".", "ann_spa_feats", "=", "self", ".", "fetch_spa_feat", "(", ")", "# spatial feature", "\n", "self", ".", "ann_vis_feats", "=", "self", ".", "fetch_vis_feat", "(", ")", "# visual feature", "\n", "\n", "# collect same/different type(category) anns set", "\n", "if", "use_category", ":", "\n", "            ", "self", ".", "st_anns", ",", "self", ".", "dt_anns", "=", "self", ".", "fetch_nn_ids", "(", ")", "\n", "\n", "# collect dif features", "\n", "", "if", "use_category", ":", "\n", "            ", "self", ".", "print_info", "(", "'Calculating dif features...'", ")", "\n", "self", ".", "ann_spadif_feats", "=", "self", ".", "fetch_spadif_feat", "(", ")", "# spadif feature", "\n", "self", ".", "ann_visdif_feats", "=", "self", ".", "fetch_visdif_feat", "(", ")", "# visdif feature", "\n", "\n", "# collect train/val split ids", "\n", "", "self", ".", "print_info", "(", "'Splitting image ids...'", ")", "\n", "self", ".", "image_split_ids", "=", "{", "}", "\n", "self", ".", "batch_list", "=", "{", "}", "\n", "self", ".", "num_batch", "=", "{", "}", "\n", "self", ".", "epoch", "=", "{", "}", "\n", "split_list", "=", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'testA'", ",", "'testB'", "]", "\n", "for", "split", "in", "split_list", ":", "\n", "            ", "self", ".", "image_split_ids", "[", "split", "]", "=", "self", ".", "get_split_ids", "(", "split", ")", "\n", "self", ".", "batch_list", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "num_batch", "[", "split", "]", "=", "len", "(", "self", ".", "image_split_ids", "[", "split", "]", ")", "\n", "self", ".", "epoch", "[", "split", "]", "=", "-", "1", "\n", "\n", "", "self", ".", "print_info", "(", "'Initialization finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info": [[106, 109], ["print"], "methods", ["None"], ["", "def", "print_info", "(", "self", ",", "info", ")", ":", "\n", "        ", "if", "self", ".", "info_print", ":", "\n", "            ", "print", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.to_dict": [[110, 115], ["None"], "methods", ["None"], ["", "", "def", "to_dict", "(", "self", ",", "attr", ",", "key", ")", ":", "\n", "        ", "dictionary", "=", "{", "}", "\n", "for", "x", "in", "self", ".", "data", "[", "attr", "]", ":", "\n", "            ", "dictionary", "[", "x", "[", "key", "]", "]", "=", "x", "\n", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_key_ids": [[116, 126], ["key_ids.append", "key_ids.append"], "methods", ["None"], ["", "def", "fetch_key_ids", "(", "self", ",", "key", ",", "split", "=", "None", ")", ":", "\n", "        ", "key_ids", "=", "[", "]", "\n", "if", "split", "==", "None", ":", "\n", "            ", "for", "dt", "in", "self", ".", "data", "[", "key", "+", "'s'", "]", ":", "\n", "                ", "key_ids", ".", "append", "(", "dt", "[", "key", "+", "'_id'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "dt", "in", "self", ".", "data", "[", "key", "+", "'s'", "]", ":", "\n", "                ", "if", "dt", "[", "'split'", "]", "==", "split", ":", "\n", "                    ", "key_ids", ".", "append", "(", "dt", "[", "key", "+", "'_id'", "]", ")", "\n", "", "", "", "return", "key_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.key_to_key": [[127, 132], ["None"], "methods", ["None"], ["", "def", "key_to_key", "(", "self", ",", "key1", ",", "key2", ")", ":", "\n", "        ", "dictionary", "=", "{", "}", "\n", "for", "dt", "in", "self", ".", "data", "[", "key1", "+", "'s'", "]", ":", "\n", "            ", "dictionary", "[", "dt", "[", "key1", "+", "'_id'", "]", "]", "=", "dt", "[", "key2", "]", "\n", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_nn_ids": [[134, 152], ["DataReader.DataReader.sort_nn_ids", "DataReader.DataReader.sort_nn_ids", "st_list.append", "dt_list.append"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.sort_nn_ids", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.sort_nn_ids"], ["", "def", "fetch_nn_ids", "(", "self", ")", ":", "\n", "        ", "ann_to_image", "=", "self", ".", "ann_to_image", "\n", "ann_to_cat", "=", "self", ".", "ann_to_cat", "\n", "image_to_anns", "=", "self", ".", "image_to_anns", "\n", "st_anns", ",", "dt_anns", "=", "{", "}", ",", "{", "}", "# same/different type anns", "\n", "for", "ann_id", "in", "self", ".", "ann_ids", ":", "\n", "            ", "image_id", "=", "ann_to_image", "[", "ann_id", "]", "\n", "candidates", "=", "image_to_anns", "[", "image_id", "]", "\n", "st_list", ",", "dt_list", "=", "[", "]", ",", "[", "]", "\n", "for", "other_id", "in", "candidates", ":", "\n", "                ", "if", "(", "ann_id", "!=", "other_id", ")", "&", "(", "ann_to_image", "[", "ann_id", "]", "==", "ann_to_image", "[", "other_id", "]", ")", ":", "\n", "                    ", "if", "ann_to_cat", "[", "ann_id", "]", "==", "ann_to_cat", "[", "other_id", "]", ":", "\n", "                        ", "st_list", ".", "append", "(", "other_id", ")", "\n", "", "else", ":", "\n", "                        ", "dt_list", ".", "append", "(", "other_id", ")", "\n", "", "", "", "st_anns", "[", "ann_id", "]", ",", "_", "=", "self", ".", "sort_nn_ids", "(", "ann_id", ",", "st_list", ")", "\n", "dt_anns", "[", "ann_id", "]", ",", "_", "=", "self", ".", "sort_nn_ids", "(", "ann_id", ",", "dt_list", ")", "\n", "", "return", "st_anns", ",", "dt_anns", "\n", "", "def", "sort_nn_ids", "(", "self", ",", "ann_id", ",", "other_ids", ",", "order", "=", "'ascending'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.sort_nn_ids": [[152, 162], ["DataReader.DataReader.fetch_ann_box_feat", "numpy.argsort().tolist", "numpy.sort().tolist", "DataReader.DataReader.fetch_ann_box_feat", "numpy.sqrt", "numpy.sort().tolist.append", "numpy.argsort", "numpy.sort"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_ann_box_feat", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_ann_box_feat"], ["", "def", "sort_nn_ids", "(", "self", ",", "ann_id", ",", "other_ids", ",", "order", "=", "'ascending'", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "_", "=", "self", ".", "fetch_ann_box_feat", "(", "ann_id", ")", "\n", "distance", "=", "[", "]", "\n", "for", "other_id", "in", "other_ids", ":", "\n", "            ", "ox1", ",", "oy1", ",", "ox2", ",", "oy2", ",", "_", "=", "self", ".", "fetch_ann_box_feat", "(", "other_id", ")", "\n", "dis", "=", "np", ".", "sqrt", "(", "(", "(", "x1", "+", "x2", "-", "ox1", "-", "ox2", ")", "/", "2", ")", "**", "2", "+", "(", "(", "y1", "+", "y2", "-", "oy1", "-", "oy2", ")", "/", "2", ")", "**", "2", ")", "\n", "distance", ".", "append", "(", "dis", ")", "\n", "", "dist_index", "=", "np", ".", "argsort", "(", "distance", ")", ".", "tolist", "(", ")", "\n", "distance", "=", "np", ".", "sort", "(", "distance", ")", ".", "tolist", "(", ")", "\n", "return", "[", "other_ids", "[", "x", "]", "for", "x", "in", "dist_index", "]", ",", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_spa_feat": [[164, 170], ["DataReader.DataReader.print_info", "DataReader.DataReader.fetch_ann_spa_feat"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_ann_spa_feat"], ["", "def", "fetch_spa_feat", "(", "self", ")", ":", "\n", "        ", "self", ".", "print_info", "(", "'Collecting spatial features...'", ")", "\n", "ann_spa_feats", "=", "{", "}", "\n", "for", "ann_id", "in", "self", ".", "ann_ids", ":", "\n", "            ", "ann_spa_feats", "[", "ann_id", "]", "=", "self", ".", "fetch_ann_spa_feat", "(", "ann_id", ")", "\n", "", "return", "ann_spa_feats", "\n", "", "def", "fetch_ann_spa_feat", "(", "self", ",", "ann_id", ",", "min_size", "=", "600", ",", "max_size", "=", "1000", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_ann_spa_feat": [[170, 190], ["max", "max", "min", "util.im_processing.rectify_bboxes", "numpy.zeros", "util.spatial_feat.spatial_feature_from_bbox", "max", "int", "int", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.rectify_bboxes", "home.repos.pwc.inspect_result.yuleiniu_vc.util.spatial_feat.spatial_feature_from_bbox"], ["", "def", "fetch_ann_spa_feat", "(", "self", ",", "ann_id", ",", "min_size", "=", "600", ",", "max_size", "=", "1000", ")", ":", "\n", "# return x1, y1, x2, y2, area", "\n", "        ", "image_id", "=", "self", ".", "ann_to_image", "[", "ann_id", "]", "\n", "W", ",", "H", "=", "self", ".", "images", "[", "image_id", "]", "[", "'width'", "]", ",", "self", ".", "images", "[", "image_id", "]", "[", "'height'", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "self", ".", "ann_to_box", "[", "ann_id", "]", "\n", "x2", "=", "max", "(", "x1", "+", "1", ",", "x1", "+", "w", "-", "1", ")", "\n", "y2", "=", "max", "(", "y1", "+", "1", ",", "y1", "+", "h", "-", "1", ")", "\n", "area", "=", "w", "*", "h", "\n", "\n", "# scale", "\n", "scale", "=", "min", "(", "max", "(", "min_size", "/", "H", ",", "min_size", "/", "W", ")", ",", "max_size", "/", "H", ",", "max_size", "/", "W", ")", "\n", "new_h", ",", "new_w", "=", "int", "(", "scale", "*", "H", ")", ",", "int", "(", "scale", "*", "W", ")", "\n", "region_bboxes", "=", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "]", ",", "np", ".", "float32", ")", "*", "scale", "\n", "region_bboxes", "=", "im_processing", ".", "rectify_bboxes", "(", "region_bboxes", ",", "height", "=", "new_h", ",", "width", "=", "new_w", ")", "\n", "\n", "bbox_batch", "=", "np", ".", "zeros", "(", "(", "len", "(", "region_bboxes", ")", ",", "5", ")", ",", "np", ".", "float32", ")", "\n", "bbox_batch", "[", ":", ",", "1", ":", "5", "]", "=", "region_bboxes", "\n", "spatial_batch", "=", "spatial_feature_from_bbox", "(", "region_bboxes", ",", "im_h", "=", "new_h", ",", "im_w", "=", "new_w", ")", "\n", "\n", "return", "spatial_batch", "[", "0", "]", "\n", "", "def", "fetch_ann_box_feat", "(", "self", ",", "ann_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_ann_box_feat": [[190, 199], ["max", "max"], "methods", ["None"], ["", "def", "fetch_ann_box_feat", "(", "self", ",", "ann_id", ")", ":", "\n", "# return x1, y1, x2, y2, area", "\n", "        ", "image_id", "=", "self", ".", "ann_to_image", "[", "ann_id", "]", "\n", "W", ",", "H", "=", "self", ".", "images", "[", "image_id", "]", "[", "'width'", "]", ",", "self", ".", "images", "[", "image_id", "]", "[", "'height'", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "self", ".", "ann_to_box", "[", "ann_id", "]", "\n", "x2", "=", "max", "(", "x1", "+", "1", ",", "x1", "+", "w", "-", "1", ")", "\n", "y2", "=", "max", "(", "y1", "+", "1", ",", "y1", "+", "h", "-", "1", ")", "\n", "area", "=", "w", "*", "h", "\n", "return", "x1", "/", "W", ",", "y1", "/", "H", ",", "x2", "/", "W", ",", "y2", "/", "H", ",", "area", "/", "(", "W", "*", "H", ")", "\n", "", "def", "fetch_vis_feat", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_vis_feat": [[199, 206], ["os.path.isfile", "DataReader.DataReader.extract_ann_vis_feat", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.extract_ann_vis_feat"], ["", "def", "fetch_vis_feat", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "vis_feat_path", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "vis_feat_path", ",", "'rb'", ")", "as", "input", ":", "\n", "                ", "ann_vis_feats", "=", "pickle", ".", "load", "(", "input", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "else", ":", "\n", "            ", "ann_vis_feats", "=", "self", ".", "extract_ann_vis_feat", "(", ")", "\n", "", "return", "ann_vis_feats", "\n", "# extract and save vis_feat", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.extract_ann_vis_feat": [[207, 244], ["DataReader.DataReader.print_info", "DataReader.DataReader.print_info", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "util.fastrcnn_vgg_net.vgg_roi_fc7", "DataReader.DataReader.load_vgg", "tqdm.trange", "len", "os.path.join", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "DataReader.DataReader.img_box_modify", "sess.run", "range", "open", "pickle.dump", "tensorflow.ConfigProto", "numpy.tile", "box.append", "len", "img_path.split", "tensorflow.GPUOptions"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.print_info", "home.repos.pwc.inspect_result.yuleiniu_vc.util.fastrcnn_vgg_net.vgg_roi_fc7", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.load_vgg", "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.img_box_modify"], ["", "def", "extract_ann_vis_feat", "(", "self", ")", ":", "\n", "        ", "self", ".", "print_info", "(", "'Extracting visual features...'", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", ")", ")", "as", "sess", ":", "\n", "# load tensorflow vgg model", "\n", "            ", "img_batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", "\n", "box_batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "5", "]", ")", "\n", "vgg_feat", "=", "fastrcnn_vgg_net", ".", "vgg_roi_fc7", "(", "img_batch", ",", "box_batch", ",", "\"vgg_local\"", ",", "apply_dropout", "=", "False", ")", "\n", "self", ".", "load_vgg", "(", "sess", ")", "# load pretrained cnn model", "\n", "ann_vis_feats", "=", "{", "}", "\n", "#for img_id in self.image_ids:", "\n", "for", "i", "in", "tqdm", ".", "trange", "(", "len", "(", "self", ".", "image_ids", ")", ")", ":", "\n", "                ", "img_id", "=", "self", ".", "image_ids", "[", "i", "]", "\n", "# load image", "\n", "img_path", "=", "self", ".", "images", "[", "img_id", "]", "[", "'file_name'", "]", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "IMG_PATH", ",", "img_path", ".", "split", "(", "'_'", ")", "[", "1", "]", ",", "img_path", ")", "\n", "img", "=", "skimage", ".", "io", ".", "imread", "(", "img_name", ")", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "                    ", "img", "=", "np", ".", "tile", "(", "img", "[", "...", ",", "np", ".", "newaxis", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "\n", "# image to anns and box", "\n", "", "ann_ids", "=", "self", ".", "image_to_anns", "[", "img_id", "]", "\n", "box", "=", "[", "]", "\n", "for", "ann_id", "in", "ann_ids", ":", "\n", "                    ", "box", ".", "append", "(", "self", ".", "ann_to_box", "[", "ann_id", "]", ")", "\n", "\n", "# modify img and box", "\n", "", "img", ",", "box", "=", "self", ".", "img_box_modify", "(", "img", ",", "box", ")", "\n", "\n", "# visual feature extraction", "\n", "vis_feat", "=", "sess", ".", "run", "(", "vgg_feat", ",", "feed_dict", "=", "{", "img_batch", ":", "img", ",", "box_batch", ":", "box", "}", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ann_ids", ")", ")", ":", "\n", "                    ", "ann_vis_feats", "[", "ann_ids", "[", "i", "]", "]", "=", "vis_feat", "[", "i", "]", "\n", "# save vis_feat     ", "\n", "", "", "with", "open", "(", "self", ".", "vis_feat_path", ",", "'wb'", ")", "as", "output", ":", "\n", "                ", "pickle", ".", "dump", "(", "ann_vis_feats", ",", "output", ")", "\n", "", "", "self", ".", "print_info", "(", "'Visual feature extracted.'", ")", "\n", "return", "ann_vis_feats", "\n", "", "def", "fetch_visdif_feat", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_visdif_feat": [[244, 260], ["tqdm.trange", "len", "len", "numpy.zeros", "numpy.zeros", "enumerate", "sklearn.preprocessing.normalize", "numpy.mean", "len", "len", "len"], "methods", ["None"], ["", "def", "fetch_visdif_feat", "(", "self", ")", ":", "\n", "        ", "ann_visdif_feats", "=", "{", "}", "\n", "for", "i", "in", "tqdm", ".", "trange", "(", "len", "(", "self", ".", "ann_ids", ")", ")", ":", "\n", "            ", "ann_id", "=", "self", ".", "ann_ids", "[", "i", "]", "\n", "ann_vis_feat", "=", "self", ".", "ann_vis_feats", "[", "ann_id", "]", "\n", "other_ids", "=", "self", ".", "st_anns", "[", "ann_id", "]", "\n", "if", "len", "(", "other_ids", ")", "==", "0", ":", "\n", "                ", "vis_dif_feat", "=", "np", ".", "zeros", "(", "[", "len", "(", "ann_vis_feat", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "vis_dif_feats", "=", "np", ".", "zeros", "(", "[", "len", "(", "other_ids", ")", ",", "len", "(", "ann_vis_feat", ")", "]", ")", "\n", "for", "j", ",", "other_id", "in", "enumerate", "(", "other_ids", ")", ":", "\n", "                    ", "vis_dif_feats", "[", "j", "]", "=", "ann_vis_feat", "-", "self", ".", "ann_vis_feats", "[", "other_id", "]", "# vis_dif: ai-aj", "\n", "", "vis_dif_feats", "=", "normalize", "(", "vis_dif_feats", ")", "# (ai-aj)/|ai-aj|", "\n", "vis_dif_feat", "=", "np", ".", "mean", "(", "vis_dif_feats", ",", "axis", "=", "0", ")", "\n", "", "ann_visdif_feats", "[", "ann_id", "]", "=", "vis_dif_feat", "\n", "", "return", "ann_visdif_feats", "\n", "", "def", "fetch_spadif_feat", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.fetch_spadif_feat": [[260, 280], ["tqdm.trange", "len", "numpy.zeros", "enumerate", "numpy.array"], "methods", ["None"], ["", "def", "fetch_spadif_feat", "(", "self", ")", ":", "\n", "        ", "ann_spadif_feats", "=", "{", "}", "\n", "for", "i", "in", "tqdm", ".", "trange", "(", "len", "(", "self", ".", "ann_ids", ")", ")", ":", "\n", "            ", "ann_id", "=", "self", ".", "ann_ids", "[", "i", "]", "\n", "ann_spa_feat", "=", "self", ".", "ann_spa_feats", "[", "ann_id", "]", "# [x1/w, y1/h, x2/w, y2/h, (w*h)/(W*H)]", "\n", "ann_w", ",", "ann_h", "=", "self", ".", "ann_to_box", "[", "ann_id", "]", "[", "2", ":", "4", "]", "# w, h", "\n", "other_ids", "=", "self", ".", "st_anns", "[", "ann_id", "]", "\n", "# vis_dif", "\n", "spa_dif_feat", "=", "np", ".", "zeros", "(", "[", "25", "]", ")", "\n", "for", "j", ",", "other_id", "in", "enumerate", "(", "other_ids", ")", ":", "\n", "                ", "if", "j", ">=", "5", ":", "\n", "                    ", "break", "\n", "", "other_spa_feat", "=", "self", ".", "ann_spa_feats", "[", "other_id", "]", "\n", "other_w", ",", "other_h", "=", "self", ".", "ann_to_box", "[", "other_id", "]", "[", "2", ":", "4", "]", "\n", "other_spa_feat", "=", "other_spa_feat", "*", "np", ".", "array", "(", "[", "other_w", "/", "ann_w", ",", "other_h", "/", "ann_h", ",", "other_w", "/", "ann_w", ",", "other_h", "/", "ann_h", ",", "1", "]", ")", "\n", "spa_dif_feat_tmp", "=", "ann_spa_feat", "-", "other_spa_feat", "# spa:dif", "\n", "spa_dif_feat_tmp", "[", "4", "]", "=", "other_spa_feat", "[", "4", "]", "/", "ann_spa_feat", "[", "4", "]", "\n", "spa_dif_feat", "[", "(", "j", "*", "5", ")", ":", "(", "j", "*", "5", "+", "5", ")", "]", "=", "spa_dif_feat_tmp", "\n", "", "ann_spadif_feats", "[", "ann_id", "]", "=", "spa_dif_feat", "\n", "", "return", "ann_spadif_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.get_split_ids": [[282, 292], ["image_ids.append"], "methods", ["None"], ["", "def", "get_split_ids", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "# train", "\n", "        ", "image_ids", "=", "[", "]", "\n", "for", "image_id", "in", "self", ".", "image_ids", ":", "\n", "            ", "for", "ref_id", "in", "self", ".", "image_to_refs", "[", "image_id", "]", ":", "\n", "                ", "ref", "=", "self", ".", "refs", "[", "ref_id", "]", "\n", "if", "ref", "[", "'split'", "]", "==", "split", ":", "\n", "                    ", "image_ids", ".", "append", "(", "image_id", ")", "\n", "break", "\n", "", "", "", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.img_box_modify": [[293, 316], ["numpy.zeros", "min", "skimage.img_as_float", "skimage.img_as_float", "skimage.img_as_float", "skimage.img_as_float", "im_processed[].astype", "util.im_processing.rectify_bboxes", "max", "int", "int", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "len"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.rectify_bboxes"], ["", "def", "img_box_modify", "(", "self", ",", "im", ",", "box", ",", "min_size", "=", "600", ",", "max_size", "=", "1000", ")", ":", "\n", "# box[x1, y1, w, h] -> [batch_index(0), x1, y1, x2, y2]", "\n", "\n", "# For each ROI R = [batch_index x1 y1 x2 y2]: max pool over R", "\n", "        ", "bbox_batch", "=", "np", ".", "zeros", "(", "(", "len", "(", "box", ")", ",", "5", ")", ",", "np", ".", "float32", ")", "\n", "bbox_batch", "[", ":", ",", "1", ":", "5", "]", "=", "box", "\n", "bbox_batch", "[", ":", ",", "3", ":", "5", "]", "=", "bbox_batch", "[", ":", ",", "3", ":", "5", "]", "+", "bbox_batch", "[", ":", ",", "1", ":", "3", "]", "-", "1", "# x2 = x1+w-1", "\n", "\n", "# calculate the resize scaling factor", "\n", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "# make the short size equal to min_size but also the long size no bigger than max_size", "\n", "scale", "=", "min", "(", "max", "(", "min_size", "/", "im_h", ",", "min_size", "/", "im_w", ")", ",", "max_size", "/", "im_h", ",", "max_size", "/", "im_w", ")", "\n", "\n", "# resize and process the image", "\n", "new_h", ",", "new_w", "=", "int", "(", "scale", "*", "im_h", ")", ",", "int", "(", "scale", "*", "im_w", ")", "\n", "im_resized", "=", "skimage", ".", "img_as_float", "(", "skimage", ".", "transform", ".", "resize", "(", "im", ",", "[", "new_h", ",", "new_w", "]", ")", ")", "\n", "im_processed", "=", "im_resized", "*", "255", "-", "im_mean", "\n", "im_batch", "=", "im_processed", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# resize and process the box", "\n", "bbox_batch", "[", ":", ",", "1", ":", "]", "=", "im_processing", ".", "rectify_bboxes", "(", "bbox_batch", "[", ":", ",", "1", ":", "]", "*", "scale", ",", "height", "=", "new_h", ",", "width", "=", "new_w", ")", "\n", "\n", "return", "im_batch", ",", "bbox_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.load_vgg": [[317, 335], ["numpy.load", "numpy.load.close", "sess.run", "tensorflow.variable_scope", "tensorflow.group", "tensorflow.assign", "tensorflow.assign", "tensorflow.get_variable", "tensorflow.get_variable"], "methods", ["None"], ["", "def", "load_vgg", "(", "self", ",", "sess", ")", ":", "\n", "# Initialize CNN Parameters", "\n", "        ", "convnet_params", "=", "'./data/models/fasterrcnn_vgg_coco_params.npz'", "\n", "convnet_layers", "=", "[", "'conv1_1'", ",", "'conv1_2'", ",", "'conv2_1'", ",", "'conv2_2'", ",", "\n", "'conv3_1'", ",", "'conv3_2'", ",", "'conv3_3'", ",", "\n", "'conv4_1'", ",", "'conv4_2'", ",", "'conv4_3'", ",", "\n", "'conv5_1'", ",", "'conv5_2'", ",", "'conv5_3'", ",", "'fc6'", ",", "'fc7'", "]", "\n", "processed_params", "=", "np", ".", "load", "(", "convnet_params", ")", "\n", "processed_W", "=", "processed_params", "[", "'processed_W'", "]", "[", "(", ")", "]", "#hw", "\n", "processed_B", "=", "processed_params", "[", "'processed_B'", "]", "[", "(", ")", "]", "\n", "init_ops", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'vgg_local'", ",", "reuse", "=", "True", ")", ":", "\n", "            ", "for", "l_name", "in", "convnet_layers", ":", "\n", "                ", "assign_W", "=", "tf", ".", "assign", "(", "tf", ".", "get_variable", "(", "l_name", "+", "'/weights'", ")", ",", "processed_W", "[", "l_name", "]", ")", "\n", "assign_B", "=", "tf", ".", "assign", "(", "tf", ".", "get_variable", "(", "l_name", "+", "'/biases'", ")", ",", "processed_B", "[", "l_name", "]", ")", "\n", "init_ops", "+=", "[", "assign_W", ",", "assign_B", "]", "\n", "", "", "processed_params", ".", "close", "(", ")", "\n", "sess", ".", "run", "(", "tf", ".", "group", "(", "*", "init_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.DataReader.DataReader.get_batch": [[336, 402], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "batch_list.pop", "coco_bboxes.append", "vis_batch.append", "spa_batch.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "print", "category_batch.append", "visdif_batch.append", "spadif_batch.append", "random.shuffle", "coco_ann_ids.append", "label_batch.append", "questions.append", "text_zseq_batch.append", "text_seqz_batch.append", "ann_ids.index", "util.text_processing.preprocess_sentence", "util.text_processing.preprocess_sentence", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.preprocess_sentence", "home.repos.pwc.inspect_result.yuleiniu_vc.util.text_processing.preprocess_sentence"], ["", "def", "get_batch", "(", "self", ",", "split", "=", "'train'", ",", "shuffle", "=", "True", ",", "echo", "=", "True", ",", "image_id", "=", "None", ")", ":", "\n", "        ", "if", "image_id", "==", "None", ":", "\n", "            ", "batch_list", "=", "self", ".", "batch_list", "[", "split", "]", "[", ":", "]", "\n", "if", "len", "(", "batch_list", ")", "==", "0", ":", "\n", "                ", "batch_list", "=", "self", ".", "image_split_ids", "[", "split", "]", "[", ":", "]", "\n", "self", ".", "epoch", "[", "split", "]", "+=", "1", "\n", "if", "shuffle", ":", "\n", "                    ", "random", ".", "shuffle", "(", "batch_list", ")", "\n", "", "", "if", "echo", ":", "\n", "                ", "print", "(", "'data reader: epoch = %d, batch = %d / %d'", "%", "(", "self", ".", "epoch", "[", "split", "]", ",", "len", "(", "self", ".", "image_split_ids", "[", "split", "]", ")", "-", "len", "(", "batch_list", ")", ",", "len", "(", "self", ".", "image_split_ids", "[", "split", "]", ")", ")", ")", "\n", "", "image_id", "=", "batch_list", ".", "pop", "(", "0", ")", "\n", "self", ".", "batch_list", "[", "split", "]", "=", "batch_list", "\n", "", "ann_ids", "=", "self", ".", "image_to_anns", "[", "image_id", "]", "\n", "batch", "=", "{", "}", "\n", "batch", "[", "'im_id'", "]", "=", "image_id", "\n", "# coco_bboxes, category_batch", "\n", "coco_bboxes", "=", "[", "]", "\n", "vis_batch", "=", "[", "]", "\n", "spa_batch", "=", "[", "]", "\n", "if", "self", ".", "use_category", ":", "\n", "            ", "category_batch", "=", "[", "]", "\n", "visdif_batch", "=", "[", "]", "\n", "spadif_batch", "=", "[", "]", "\n", "", "for", "ann_id", "in", "self", ".", "image_to_anns", "[", "image_id", "]", ":", "\n", "            ", "coco_bboxes", ".", "append", "(", "self", ".", "ann_to_box", "[", "ann_id", "]", ")", "\n", "vis_batch", ".", "append", "(", "self", ".", "ann_vis_feats", "[", "ann_id", "]", ")", "\n", "spa_batch", ".", "append", "(", "self", ".", "ann_spa_feats", "[", "ann_id", "]", ")", "\n", "if", "self", ".", "use_category", ":", "\n", "                ", "category_batch", ".", "append", "(", "self", ".", "ann_to_cat", "[", "ann_id", "]", ")", "\n", "visdif_batch", ".", "append", "(", "self", ".", "ann_visdif_feats", "[", "ann_id", "]", ")", "\n", "spadif_batch", ".", "append", "(", "self", ".", "ann_spadif_feats", "[", "ann_id", "]", ")", "\n", "", "", "batch", "[", "'coco_bboxes'", "]", "=", "np", ".", "array", "(", "coco_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "[", "'vis_batch'", "]", "=", "np", ".", "array", "(", "vis_batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "[", "'spa_batch'", "]", "=", "np", ".", "array", "(", "spa_batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "self", ".", "use_category", ":", "\n", "            ", "batch", "[", "'category_batch'", "]", "=", "np", ".", "array", "(", "category_batch", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "batch", "[", "'visdif_batch'", "]", "=", "np", ".", "array", "(", "visdif_batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "[", "'spadif_batch'", "]", "=", "np", ".", "array", "(", "spadif_batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# coco_ann_ids, label_batch", "\n", "", "coco_ann_ids", "=", "[", "]", "\n", "label_batch", "=", "[", "]", "\n", "questions", "=", "[", "]", "\n", "text_zseq_batch", "=", "[", "]", "# zero + seq for comprehension", "\n", "text_seqz_batch", "=", "[", "]", "# seq + zero for generation", "\n", "for", "ref_id", "in", "self", ".", "image_to_refs", "[", "image_id", "]", ":", "\n", "            ", "ref", "=", "self", ".", "refs", "[", "ref_id", "]", "\n", "ann_id", "=", "self", ".", "ref_to_ann", "[", "ref_id", "]", "\n", "if", "ref", "[", "'split'", "]", "==", "split", ":", "\n", "                ", "for", "sent_id", "in", "ref", "[", "'sent_ids'", "]", ":", "\n", "                    ", "sent", "=", "self", ".", "sents", "[", "sent_id", "]", "[", "'sent'", "]", "\n", "# refine sentence", "\n", "coco_ann_ids", ".", "append", "(", "ann_id", ")", "\n", "label_batch", ".", "append", "(", "ann_ids", ".", "index", "(", "ann_id", ")", ")", "\n", "questions", ".", "append", "(", "sent", ")", "\n", "text_zseq_batch", ".", "append", "(", "\n", "text_processing", ".", "preprocess_sentence", "(", "sent", ",", "self", ".", "vocab_dict", ",", "T", "=", "20", ",", "mode", "=", "'zseq'", ")", ")", "\n", "text_seqz_batch", ".", "append", "(", "\n", "text_processing", ".", "preprocess_sentence", "(", "sent", ",", "self", ".", "vocab_dict", ",", "T", "=", "20", ",", "mode", "=", "'seqz'", ")", ")", "\n", "", "", "", "text_zseq_batch", "=", "np", ".", "array", "(", "text_zseq_batch", ",", "dtype", "=", "np", ".", "int32", ")", ".", "T", "\n", "text_seqz_batch", "=", "np", ".", "array", "(", "text_seqz_batch", ",", "dtype", "=", "np", ".", "int32", ")", ".", "T", "\n", "batch", "[", "'coco_ann_ids'", "]", "=", "coco_ann_ids", "\n", "batch", "[", "'label_batch'", "]", "=", "np", ".", "array", "(", "label_batch", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "batch", "[", "'questions'", "]", "=", "questions", "\n", "batch", "[", "'text_zseq_batch'", "]", "=", "np", ".", "array", "(", "text_zseq_batch", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "batch", "[", "'text_seqz_batch'", "]", "=", "np", ".", "array", "(", "text_seqz_batch", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.iou_bboxes": [[11, 26], ["max", "max", "ciou.area_bbox", "ciou.area_bbox", "ciou.area_bbox", "min", "min"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.area_bbox", "home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.area_bbox", "home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.area_bbox"], ["def", "iou_bboxes", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "  ", "\"\"\"Standard intersection over Union ratio between two bounding boxes.\"\"\"", "\n", "bbox_ov_x", "=", "max", "(", "bbox1", "[", "0", "]", ",", "bbox2", "[", "0", "]", ")", "\n", "bbox_ov_y", "=", "max", "(", "bbox1", "[", "1", "]", ",", "bbox2", "[", "1", "]", ")", "\n", "bbox_ov_w", "=", "min", "(", "bbox1", "[", "0", "]", "+", "bbox1", "[", "2", "]", "-", "1", ",", "bbox2", "[", "0", "]", "+", "bbox2", "[", "2", "]", "-", "1", ")", "-", "bbox_ov_x", "+", "1", "\n", "bbox_ov_h", "=", "min", "(", "bbox1", "[", "1", "]", "+", "bbox1", "[", "3", "]", "-", "1", ",", "bbox2", "[", "1", "]", "+", "bbox2", "[", "3", "]", "-", "1", ")", "-", "bbox_ov_y", "+", "1", "\n", "\n", "area1", "=", "area_bbox", "(", "bbox1", ")", "\n", "area2", "=", "area_bbox", "(", "bbox2", ")", "\n", "area_o", "=", "area_bbox", "(", "[", "bbox_ov_x", ",", "bbox_ov_y", ",", "bbox_ov_w", ",", "bbox_ov_h", "]", ")", "\n", "area_u", "=", "area1", "+", "area2", "-", "area_o", "\n", "if", "area_u", "<", "0.000001", ":", "\n", "    ", "return", "0.0", "\n", "", "else", ":", "\n", "    ", "return", "area_o", "/", "area_u", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.ciou.area_bbox": [[27, 32], ["float", "float"], "function", ["None"], ["", "", "def", "area_bbox", "(", "bbox", ")", ":", "\n", "  ", "\"\"\"Return the area of a bounding box.\"\"\"", "\n", "if", "bbox", "[", "2", "]", "<=", "0", "or", "bbox", "[", "3", "]", "<=", "0", ":", "\n", "    ", "return", "0.0", "\n", "", "return", "float", "(", "bbox", "[", "2", "]", ")", "*", "float", "(", "bbox", "[", "3", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.loss.weighed_logistic_loss": [[6, 14], ["tensorflow.reduce_mean", "tensorflow.nn.weighted_cross_entropy_with_logits"], "function", ["None"], ["def", "weighed_logistic_loss", "(", "scores", ",", "labels", ",", "pos_loss_mult", "=", "1.0", ",", "neg_loss_mult", "=", "1.0", ")", ":", "\n", "# Apply different weights to loss of positive samples and negative samples", "\n", "# positive samples have label 1 while negative samples have label 0", "\n", "# Classification loss as the average of weighed per-score loss", "\n", "    ", "cls_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "\n", "scores", ",", "labels", ",", "pos_loss_mult", "/", "neg_loss_mult", ")", ")", "*", "neg_loss_mult", "\n", "\n", "return", "cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.loss.top1_ranking_loss": [[15, 28], ["tensorflow.transpose", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.gather", "tensorflow.nn.relu", "tensorflow.cast", "tensorflow.shape"], "function", ["None"], ["", "def", "top1_ranking_loss", "(", "scores", ",", "labels", ",", "margin", "=", "0", ")", ":", "\n", "# input scores and labels has same shape as in", "\n", "# tf.nn.sparse_softmax_cross_entropy_with_logits", "\n", "# loss is \\sum_i max(0, margin + score[i] - score[label])", "\n", "\n", "# we want to do scores[:, labels], but that's not available in tensorflow", "\n", "# so we transpose and get scores_t[labels]", "\n", "    ", "scores_t", "=", "tf", ".", "transpose", "(", "scores", ")", "\n", "gt_scores", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "scores_t", ",", "labels", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "loss_sum", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "margin", "+", "scores", "-", "gt_scores", ")", ")", "\n", "# average within a batch", "\n", "loss_avg", "=", "tf", ".", "div", "(", "loss_sum", ",", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "scores", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", ")", "\n", "return", "loss_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.loss.l2_regularization_loss": [[29, 33], ["tensorflow.nn.l2_loss", "tensorflow.add_n"], "function", ["None"], ["", "def", "l2_regularization_loss", "(", "variables", ",", "weight_decay", ")", ":", "\n", "    ", "l2_losses", "=", "[", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "for", "var", "in", "variables", "]", "\n", "total_l2_loss", "=", "weight_decay", "*", "tf", ".", "add_n", "(", "l2_losses", ")", "\n", "return", "total_l2_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.visualize.print_bbox": [[6, 13], ["numpy.array().reshape", "matplotlib.plot", "numpy.array"], "function", ["None"], ["def", "print_bbox", "(", "bboxes", ",", "style", "=", "'r-'", ")", ":", "\n", "    ", "\"\"\"A utility function to help visualizing boxes.\"\"\"", "\n", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "        ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bbox", "\n", "plt", ".", "plot", "(", "[", "xmin", ",", "xmax", ",", "xmax", ",", "xmin", ",", "xmin", "]", ",", "\n", "[", "ymin", ",", "ymin", ",", "ymax", ",", "ymax", ",", "ymin", "]", ",", "style", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.spatial_feat.spatial_feature_from_bbox": [[7, 27], ["isinstance", "np.array.reshape", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.zeros", "numpy.array"], "function", ["None"], ["def", "spatial_feature_from_bbox", "(", "bboxes", ",", "im_h", ",", "im_w", ")", ":", "\n", "# Generate 5-dimensional spatial features from the image", "\n", "# [xmin, ymin, xmax, ymax, S] where S is the area of the box", "\n", "    ", "if", "isinstance", "(", "bboxes", ",", "list", ")", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "", "bboxes", "=", "bboxes", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "# Check the size of the bounding boxes", "\n", "assert", "(", "np", ".", "all", "(", "bboxes", "[", ":", ",", "0", ":", "2", "]", ">=", "0", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "bboxes", "[", ":", ",", "0", "]", "<=", "bboxes", "[", ":", ",", "2", "]", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "bboxes", "[", ":", ",", "1", "]", "<=", "bboxes", "[", ":", ",", "3", "]", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "bboxes", "[", ":", ",", "2", "]", "<=", "im_w", ")", ")", "\n", "assert", "(", "np", ".", "all", "(", "bboxes", "[", ":", ",", "3", "]", "<=", "im_h", ")", ")", "\n", "\n", "feats", "=", "np", ".", "zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "5", ")", ")", "\n", "feats", "[", ":", ",", "0", "]", "=", "bboxes", "[", ":", ",", "0", "]", "*", "2.0", "/", "im_w", "-", "1", "# x1", "\n", "feats", "[", ":", ",", "1", "]", "=", "bboxes", "[", ":", ",", "1", "]", "*", "2.0", "/", "im_h", "-", "1", "# y1", "\n", "feats", "[", ":", ",", "2", "]", "=", "bboxes", "[", ":", ",", "2", "]", "*", "2.0", "/", "im_w", "-", "1", "# x2", "\n", "feats", "[", ":", ",", "3", "]", "=", "bboxes", "[", ":", ",", "3", "]", "*", "2.0", "/", "im_h", "-", "1", "# y2", "\n", "feats", "[", ":", ",", "4", "]", "=", "(", "feats", "[", ":", ",", "2", "]", "-", "feats", "[", ":", ",", "0", "]", ")", "*", "(", "feats", "[", ":", ",", "3", "]", "-", "feats", "[", ":", ",", "1", "]", ")", "# S", "\n", "return", "feats", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.rectify_bboxes": [[6, 14], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["def", "rectify_bboxes", "(", "bboxes", ",", "height", ",", "width", ")", ":", "\n", "    ", "bboxes", "=", "np", ".", "maximum", "(", "bboxes", ",", "0", ")", "\n", "bboxes", "[", ":", ",", "2", ":", "4", "]", "=", "np", ".", "maximum", "(", "bboxes", "[", ":", ",", "0", ":", "2", "]", ",", "bboxes", "[", ":", ",", "2", ":", "4", "]", ")", "\n", "bboxes", "[", ":", ",", "0", "]", "=", "np", ".", "minimum", "(", "bboxes", "[", ":", ",", "0", "]", ",", "width", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "1", "]", "=", "np", ".", "minimum", "(", "bboxes", "[", ":", ",", "1", "]", ",", "height", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "2", "]", "=", "np", ".", "minimum", "(", "bboxes", "[", ":", ",", "2", "]", ",", "width", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "3", "]", "=", "np", ".", "minimum", "(", "bboxes", "[", ":", ",", "3", "]", ",", "height", "-", "1", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.resize_and_pad": [[15, 32], ["min", "int", "int", "int", "int", "skimage.transform.resize", "numpy.round", "numpy.round", "numpy.zeros", "numpy.zeros", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "resize_and_pad", "(", "im", ",", "input_h", ",", "input_w", ")", ":", "\n", "# Resize and pad im to input_h x input_w size", "\n", "    ", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "min", "(", "input_h", "/", "im_h", ",", "input_w", "/", "im_w", ")", "\n", "resized_h", "=", "int", "(", "np", ".", "round", "(", "im_h", "*", "scale", ")", ")", "\n", "resized_w", "=", "int", "(", "np", ".", "round", "(", "im_w", "*", "scale", ")", ")", "\n", "pad_h", "=", "int", "(", "np", ".", "floor", "(", "input_h", "-", "resized_h", ")", "/", "2", ")", "\n", "pad_w", "=", "int", "(", "np", ".", "floor", "(", "input_w", "-", "resized_w", ")", "/", "2", ")", "\n", "\n", "resized_im", "=", "skimage", ".", "transform", ".", "resize", "(", "im", ",", "[", "resized_h", ",", "resized_w", "]", ")", "\n", "if", "im", ".", "ndim", ">", "2", ":", "\n", "        ", "new_im", "=", "np", ".", "zeros", "(", "(", "input_h", ",", "input_w", ",", "im", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "resized_im", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "new_im", "=", "np", ".", "zeros", "(", "(", "input_h", ",", "input_w", ")", ",", "dtype", "=", "resized_im", ".", "dtype", ")", "\n", "", "new_im", "[", "pad_h", ":", "pad_h", "+", "resized_h", ",", "pad_w", ":", "pad_w", "+", "resized_w", ",", "...", "]", "=", "resized_im", "\n", "\n", "return", "new_im", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.resize_and_crop": [[33, 50], ["max", "int", "int", "int", "int", "skimage.transform.resize", "numpy.round", "numpy.round", "numpy.zeros", "numpy.zeros", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "resize_and_crop", "(", "im", ",", "input_h", ",", "input_w", ")", ":", "\n", "# Resize and crop im to input_h x input_w size", "\n", "    ", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "max", "(", "input_h", "/", "im_h", ",", "input_w", "/", "im_w", ")", "\n", "resized_h", "=", "int", "(", "np", ".", "round", "(", "im_h", "*", "scale", ")", ")", "\n", "resized_w", "=", "int", "(", "np", ".", "round", "(", "im_w", "*", "scale", ")", ")", "\n", "crop_h", "=", "int", "(", "np", ".", "floor", "(", "resized_h", "-", "input_h", ")", "/", "2", ")", "\n", "crop_w", "=", "int", "(", "np", ".", "floor", "(", "resized_w", "-", "input_w", ")", "/", "2", ")", "\n", "\n", "resized_im", "=", "skimage", ".", "transform", ".", "resize", "(", "im", ",", "[", "resized_h", ",", "resized_w", "]", ")", "\n", "if", "im", ".", "ndim", ">", "2", ":", "\n", "        ", "new_im", "=", "np", ".", "zeros", "(", "(", "input_h", ",", "input_w", ",", "im", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "resized_im", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "new_im", "=", "np", ".", "zeros", "(", "(", "input_h", ",", "input_w", ")", ",", "dtype", "=", "resized_im", ".", "dtype", ")", "\n", "", "new_im", "[", "...", "]", "=", "resized_im", "[", "crop_h", ":", "crop_h", "+", "input_h", ",", "crop_w", ":", "crop_w", "+", "input_w", ",", "...", "]", "\n", "\n", "return", "new_im", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.crop_bboxes_subtract_mean": [[51, 67], ["isinstance", "np.array.reshape", "skimage.img_as_ubyte", "numpy.zeros", "range", "numpy.array", "skimage.img_as_ubyte", "skimage.transform.resize"], "function", ["None"], ["", "def", "crop_bboxes_subtract_mean", "(", "im", ",", "bboxes", ",", "crop_size", ",", "image_mean", ")", ":", "\n", "    ", "if", "isinstance", "(", "bboxes", ",", "list", ")", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "", "bboxes", "=", "bboxes", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "im", "=", "skimage", ".", "img_as_ubyte", "(", "im", ")", "\n", "num_bbox", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "imcrop_batch", "=", "np", ".", "zeros", "(", "(", "num_bbox", ",", "crop_size", ",", "crop_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "n_bbox", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bboxes", "[", "n_bbox", "]", "\n", "# crop and resize", "\n", "imcrop", "=", "im", "[", "ymin", ":", "ymax", "+", "1", ",", "xmin", ":", "xmax", "+", "1", ",", ":", "]", "\n", "imcrop_batch", "[", "n_bbox", ",", "...", "]", "=", "skimage", ".", "img_as_ubyte", "(", "\n", "skimage", ".", "transform", ".", "resize", "(", "imcrop", ",", "[", "crop_size", ",", "crop_size", "]", ")", ")", "\n", "", "imcrop_batch", "-=", "image_mean", "\n", "return", "imcrop_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.bboxes_from_masks": [[68, 79], ["numpy.zeros", "range", "numpy.nonzero", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "bboxes_from_masks", "(", "masks", ")", ":", "\n", "    ", "if", "masks", ".", "ndim", "==", "2", ":", "\n", "        ", "masks", "=", "masks", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "num_mask", "=", "masks", ".", "shape", "[", "0", "]", "\n", "bboxes", "=", "np", ".", "zeros", "(", "(", "num_mask", ",", "4", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "n_mask", "in", "range", "(", "num_mask", ")", ":", "\n", "        ", "idx", "=", "np", ".", "nonzero", "(", "masks", "[", "n_mask", "]", ")", "\n", "xmin", ",", "xmax", "=", "np", ".", "min", "(", "idx", "[", "1", "]", ")", ",", "np", ".", "max", "(", "idx", "[", "1", "]", ")", "\n", "ymin", ",", "ymax", "=", "np", ".", "min", "(", "idx", "[", "0", "]", ")", ",", "np", ".", "max", "(", "idx", "[", "0", "]", ")", "\n", "bboxes", "[", "n_mask", ",", ":", "]", "=", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", "\n", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.crop_masks_subtract_mean": [[80, 101], ["skimage.img_as_ubyte", "im_processing.bboxes_from_masks", "numpy.zeros", "range", "skimage.img_as_ubyte.copy", "skimage.img_as_ubyte", "image_mean.astype", "skimage.transform.resize"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.im_processing.bboxes_from_masks"], ["", "def", "crop_masks_subtract_mean", "(", "im", ",", "masks", ",", "crop_size", ",", "image_mean", ")", ":", "\n", "    ", "if", "masks", ".", "ndim", "==", "2", ":", "\n", "        ", "masks", "=", "masks", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "num_mask", "=", "masks", ".", "shape", "[", "0", "]", "\n", "\n", "im", "=", "skimage", ".", "img_as_ubyte", "(", "im", ")", "\n", "bboxes", "=", "bboxes_from_masks", "(", "masks", ")", "\n", "imcrop_batch", "=", "np", ".", "zeros", "(", "(", "num_mask", ",", "crop_size", ",", "crop_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "n_mask", "in", "range", "(", "num_mask", ")", ":", "\n", "        ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bboxes", "[", "n_mask", "]", "\n", "\n", "# crop and resize", "\n", "im_masked", "=", "im", ".", "copy", "(", ")", "\n", "mask", "=", "masks", "[", "n_mask", ",", "...", ",", "np", ".", "newaxis", "]", "\n", "im_masked", "*=", "mask", "\n", "im_masked", "+=", "image_mean", ".", "astype", "(", "np", ".", "uint8", ")", "*", "(", "1", "-", "mask", ")", "\n", "imcrop", "=", "im_masked", "[", "ymin", ":", "ymax", "+", "1", ",", "xmin", ":", "xmax", "+", "1", ",", ":", "]", "\n", "imcrop_batch", "[", "n_mask", ",", "...", "]", "=", "skimage", ".", "img_as_ubyte", "(", "skimage", ".", "transform", ".", "resize", "(", "imcrop", ",", "[", "224", ",", "224", "]", ")", ")", "\n", "\n", "", "imcrop_batch", "-=", "image_mean", "\n", "return", "imcrop_batch", "\n", "", ""]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_layer": [[7, 36], ["tensorflow.nn.conv2d", "bottom.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.contrib.layers.xavier_initializer_conv2d", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.add_to_collection", "bottom.get_shape", "tensorflow.nn.l2_loss"], "function", ["None"], ["def", "conv_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", "=", "'SAME'", ",", "\n", "bias_term", "=", "True", ",", "weights_initializer", "=", "None", ",", "biases_initializer", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "# input has shape [batch, in_height, in_width, in_channels]", "\n", "    ", "input_dim", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# weights and biases variables", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# initialize the variables", "\n", "        ", "if", "weights_initializer", "is", "None", ":", "\n", "            ", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer_conv2d", "(", ")", "\n", "", "if", "bias_term", "and", "biases_initializer", "is", "None", ":", "\n", "            ", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", "\n", "\n", "# filter has shape [filter_height, filter_width, in_channels, out_channels]", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "\"weights\"", ",", "\n", "[", "kernel_size", ",", "kernel_size", ",", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "weights_initializer", ")", "\n", "if", "bias_term", ":", "\n", "            ", "biases", "=", "tf", ".", "get_variable", "(", "\"biases\"", ",", "output_dim", ",", "\n", "initializer", "=", "biases_initializer", ")", "\n", "", "if", "not", "reuse", ":", "\n", "            ", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "weights", ")", ")", "\n", "\n", "", "", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "bottom", ",", "filter", "=", "weights", ",", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "if", "bias_term", ":", "\n", "        ", "conv", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_relu_layer": [[37, 43], ["cnn.conv_layer", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.conv_layer"], ["", "def", "conv_relu_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", "=", "'SAME'", ",", "\n", "bias_term", "=", "True", ",", "weights_initializer", "=", "None", ",", "biases_initializer", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "conv", "=", "conv_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", ",", "\n", "bias_term", ",", "weights_initializer", ",", "biases_initializer", ",", "reuse", "=", "reuse", ")", "\n", "relu", "=", "tf", ".", "nn", ".", "relu", "(", "conv", ")", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.deconv_layer": [[44, 76], ["bottom.get_shape().as_list", "tensorflow.nn.conv2d_transpose", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.bias_add", "bottom.get_shape", "tensorflow.contrib.layers.xavier_initializer_conv2d", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["None"], ["", "def", "deconv_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", "=", "'SAME'", ",", "\n", "bias_term", "=", "True", ",", "weights_initializer", "=", "None", ",", "biases_initializer", "=", "None", ")", ":", "\n", "# input_shape is [batch, in_height, in_width, in_channels]", "\n", "    ", "input_shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "batch_size", ",", "input_height", ",", "input_width", ",", "input_dim", "=", "input_shape", "\n", "output_shape", "=", "[", "batch_size", ",", "input_height", "*", "stride", ",", "input_width", "*", "stride", ",", "output_dim", "]", "\n", "\n", "# weights and biases variables", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# initialize the variables", "\n", "        ", "if", "weights_initializer", "is", "None", ":", "\n", "            ", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer_conv2d", "(", ")", "\n", "", "if", "bias_term", "and", "biases_initializer", "is", "None", ":", "\n", "            ", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", "\n", "\n", "# filter has shape [filter_height, filter_width, out_channels, in_channels]", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "\"weights\"", ",", "\n", "[", "kernel_size", ",", "kernel_size", ",", "output_dim", ",", "input_dim", "]", ",", "\n", "initializer", "=", "weights_initializer", ")", "\n", "if", "bias_term", ":", "\n", "            ", "biases", "=", "tf", ".", "get_variable", "(", "\"biases\"", ",", "output_dim", ",", "\n", "initializer", "=", "biases_initializer", ")", "\n", "", "if", "not", "reuse", ":", "\n", "            ", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "weights", ")", ")", "\n", "\n", "", "", "deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "bottom", ",", "filter", "=", "weights", ",", "\n", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "if", "bias_term", ":", "\n", "        ", "deconv", "=", "tf", ".", "nn", ".", "bias_add", "(", "deconv", ",", "biases", ")", "\n", "", "return", "deconv", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.deconv_relu_layer": [[77, 83], ["cnn.deconv_layer", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.deconv_layer"], ["", "def", "deconv_relu_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", "=", "'SAME'", ",", "\n", "bias_term", "=", "True", ",", "weights_initializer", "=", "None", ",", "biases_initializer", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "deconv", "=", "deconv_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ",", "output_dim", ",", "padding", ",", "\n", "bias_term", ",", "weights_initializer", ",", "biases_initializer", ",", "reuse", "=", "reuse", ")", "\n", "relu", "=", "tf", ".", "nn", ".", "relu", "(", "deconv", ")", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.pooling_layer": [[84, 88], ["tensorflow.nn.max_pool"], "function", ["None"], ["", "def", "pooling_layer", "(", "name", ",", "bottom", ",", "kernel_size", ",", "stride", ")", ":", "\n", "    ", "pool", "=", "tf", ".", "nn", ".", "max_pool", "(", "bottom", ",", "ksize", "=", "[", "1", ",", "kernel_size", ",", "kernel_size", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "name", "=", "name", ")", "\n", "return", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer": [[89, 122], ["bottom.get_shape().as_list", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.xw_plus_b", "tensorflow.matmul", "bottom.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["None"], ["", "def", "fc_layer", "(", "name", ",", "bottom", ",", "output_dim", ",", "bias_term", "=", "True", ",", "weights_initializer", "=", "None", ",", "\n", "biases_initializer", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "# flatten bottom input", "\n", "# input has shape [batch, in_height, in_width, in_channels]", "\n", "    ", "shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "input_dim", "=", "1", "\n", "for", "d", "in", "shape", "[", "1", ":", "]", ":", "\n", "        ", "input_dim", "*=", "d", "\n", "", "flat_bottom", "=", "tf", ".", "reshape", "(", "bottom", ",", "[", "-", "1", ",", "input_dim", "]", ")", "\n", "\n", "# weights and biases variables", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# initialize the variables", "\n", "        ", "if", "weights_initializer", "is", "None", ":", "\n", "            ", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "if", "bias_term", "and", "biases_initializer", "is", "None", ":", "\n", "            ", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", "\n", "\n", "# weights has shape [input_dim, output_dim]", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "\"weights\"", ",", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "weights_initializer", ")", "\n", "if", "bias_term", ":", "\n", "            ", "biases", "=", "tf", ".", "get_variable", "(", "\"biases\"", ",", "output_dim", ",", "\n", "initializer", "=", "biases_initializer", ")", "\n", "", "if", "not", "reuse", ":", "\n", "            ", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "weights", ")", ")", "\n", "\n", "", "", "if", "bias_term", ":", "\n", "        ", "fc", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "flat_bottom", ",", "weights", ",", "biases", ")", "\n", "", "else", ":", "\n", "        ", "fc", "=", "tf", ".", "matmul", "(", "flat_bottom", ",", "weights", ")", "\n", "", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_relu_layer": [[123, 129], ["cnn.fc_layer", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.fc_layer"], ["", "def", "fc_relu_layer", "(", "name", ",", "bottom", ",", "output_dim", ",", "bias_term", "=", "True", ",", "\n", "weights_initializer", "=", "None", ",", "biases_initializer", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "fc", "=", "fc_layer", "(", "name", ",", "bottom", ",", "output_dim", ",", "bias_term", ",", "weights_initializer", ",", "\n", "biases_initializer", ",", "reuse", "=", "reuse", ")", "\n", "relu", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.yuleiniu_vc.util.cnn.bn_layer": [[130, 164], ["bottom.get_shape().as_list", "tensorflow.variable_scope", "list", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.moments", "moving_averages.assign_moving_average", "moving_averages.assign_moving_average", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.convert_to_tensor", "control_flow_ops.cond", "tensorflow.nn.batch_normalization", "bottom.get_shape", "range", "len"], "function", ["None"], ["", "def", "bn_layer", "(", "name", ",", "bottom", ",", "is_training", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "BN_OPS_COLLECTION", "=", "'bn_ops'", "\n", "BN_DECAY", "=", "0.9997", "\n", "BN_EPSILON", "=", "0.001", "\n", "\n", "shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "params_shape", "=", "shape", "[", "-", "1", ":", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "axis", "=", "list", "(", "range", "(", "len", "(", "shape", ")", "-", "1", ")", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "params_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", ")", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "'gamma'", ",", "params_shape", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", ")", "\n", "moving_mean", "=", "tf", ".", "get_variable", "(", "'moving_mean'", ",", "params_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", ",", "\n", "trainable", "=", "False", ")", "\n", "moving_variance", "=", "tf", ".", "get_variable", "(", "'moving_variance'", ",", "params_shape", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "bottom", ",", "axis", ")", "\n", "update_moving_mean", "=", "moving_averages", ".", "assign_moving_average", "(", "moving_mean", ",", "mean", ",", "BN_DECAY", ")", "\n", "update_moving_variance", "=", "moving_averages", ".", "assign_moving_average", "(", "moving_variance", ",", "variance", ",", "BN_DECAY", ")", "\n", "tf", ".", "add_to_collection", "(", "BN_OPS_COLLECTION", ",", "update_moving_mean", ")", "\n", "tf", ".", "add_to_collection", "(", "BN_OPS_COLLECTION", ",", "update_moving_variance", ")", "\n", "\n", "train_tensor", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ",", "dtype", "=", "'bool'", ",", "name", "=", "'is_training'", ")", "\n", "mean", ",", "variance", "=", "control_flow_ops", ".", "cond", "(", "train_tensor", ",", "\n", "lambda", ":", "(", "mean", ",", "variance", ")", ",", "\n", "lambda", ":", "(", "moving_mean", ",", "moving_variance", ")", ")", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "bottom", ",", "mean", ",", "variance", ",", "beta", ",", "gamma", ",", "BN_EPSILON", ")", "\n", "", "return", "x", "", "", ""]]}