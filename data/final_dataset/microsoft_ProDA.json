{"home.repos.pwc.inspect_result.microsoft_ProDA.None.calc_prototype.Class_Features.__init__": [[73, 77], ["numpy.zeros", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numbers", "=", "19", ")", ":", "\n", "        ", "self", ".", "class_numbers", "=", "numbers", "\n", "self", ".", "class_features", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "class_numbers", ")", "]", "\n", "self", ".", "num", "=", "np", ".", "zeros", "(", "numbers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.calc_prototype.Class_Features.calculate_mean_vector_by_output": [[78, 100], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.argmax", "model.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "model.process_label.float", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label"], ["", "def", "calculate_mean_vector_by_output", "(", "self", ",", "feat_cls", ",", "outputs", ",", "model", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "model", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "outputs_pred", "=", "outputs_argmax", "\n", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "\n", "# if (torch.sum(outputs_pred[n][t] * labels_expanded[n][t]).item() < 30):", "\n", "#     continue", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "# self.update_cls_feature(vector=s, id=t)", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.calc_prototype.Class_Features.calculate_mean_vector": [[101, 127], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.argmax", "model.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "model.process_label.float", "model.process_label", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label"], ["", "def", "calculate_mean_vector", "(", "self", ",", "feat_cls", ",", "outputs", ",", "labels_val", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "model", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "if", "labels_val", "is", "None", ":", "\n", "            ", "outputs_pred", "=", "outputs_argmax", "\n", "", "else", ":", "\n", "            ", "labels_expanded", "=", "model", ".", "process_label", "(", "labels_val", ")", "\n", "outputs_pred", "=", "labels_expanded", "*", "outputs_argmax", "\n", "", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "\n", "# if (torch.sum(outputs_pred[n][t] * labels_expanded[n][t]).item() < 30):", "\n", "#     continue", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "# self.update_cls_feature(vector=s, id=t)", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.calc_prototype.calc_prototype": [[19, 71], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "calc_prototype.Class_Features", "range", "torch.save", "torch.save", "torch.save", "models.adaptation_modelv2.CustomModel", "tqdm.tqdm", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "data.create_dataset.source_train_loader.next", "source_data[].to", "source_data[].to", "data_i[].to", "data_i[].to", "adaptation_modelv2.CustomModel.eval", "os.path.dirname", "os.path.dirname", "torch.no_grad", "torch.no_grad", "torch.no_grad", "source_data[].to.size", "source_data[].to.reshape().float", "torch.interpolate", "calc_prototype.Class_Features.calculate_mean_vector", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "calc_prototype.Class_Features.calculate_mean_vector", "range", "adaptation_modelv2.CustomModel.BaseNet_DP", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "adaptation_modelv2.CustomModel.BaseNet_DP", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "source_data[].to.reshape", "vectors[].detach().cpu().numpy", "vectors[].detach().cpu", "out[].size", "vectors[].detach().cpu", "vectors[].detach", "vectors[].detach"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.create_dataset", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.update_objective_SingleVector", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.update_objective_SingleVector"], ["def", "calc_prototype", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "\n", "", "class_features", "=", "Class_Features", "(", "numbers", "=", "opt", ".", "n_class", ")", "\n", "\n", "# begin training", "\n", "model", ".", "iter", "=", "0", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "epochs", ")", ":", "\n", "        ", "for", "data_i", "in", "tqdm", "(", "datasets", ".", "target_train_loader", ")", ":", "\n", "            ", "model", ".", "iter", "+=", "1", "\n", "i", "=", "model", ".", "iter", "\n", "source_data", "=", "datasets", ".", "source_train_loader", ".", "next", "(", ")", "\n", "images", "=", "source_data", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "source_data", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "target_image", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "target_label", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "if", "opt", ".", "source", ":", "#source", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "                        ", "out", "=", "model", ".", "BaseNet_DP", "(", "images", ",", "ssl", "=", "True", ")", "\n", "", "batch", ",", "w", ",", "h", "=", "labels", ".", "size", "(", ")", "\n", "newlabels", "=", "labels", ".", "reshape", "(", "[", "batch", ",", "1", ",", "w", ",", "h", "]", ")", ".", "float", "(", ")", "\n", "newlabels", "=", "F", ".", "interpolate", "(", "newlabels", ",", "size", "=", "out", "[", "'feat'", "]", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "vectors", ",", "ids", "=", "class_features", ".", "calculate_mean_vector", "(", "out", "[", "'feat'", "]", ",", "out", "[", "'out'", "]", ",", "newlabels", ",", "model", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "                        ", "model", ".", "update_objective_SingleVector", "(", "ids", "[", "t", "]", ",", "vectors", "[", "t", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'mean'", ")", "\n", "", "", "", "else", ":", "#target", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "                        ", "out", "=", "model", ".", "BaseNet_DP", "(", "target_image", ",", "ssl", "=", "True", ")", "\n", "", "vectors", ",", "ids", "=", "class_features", ".", "calculate_mean_vector", "(", "out", "[", "'feat'", "]", ",", "out", "[", "'out'", "]", ",", "model", "=", "model", ")", "\n", "#vectors, ids = class_features.calculate_mean_vector_by_output(feat_cls, output, model)", "\n", "for", "t", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "                        ", "model", ".", "update_objective_SingleVector", "(", "ids", "[", "t", "]", ",", "vectors", "[", "t", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'mean'", ")", "\n", "\n", "", "", "", "", "", "if", "opt", ".", "source", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "\"prototypes_on_{}_from_{}\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "\"prototypes_on_{}_from_{}\"", ".", "format", "(", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "objective_vectors", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.calc_prototype.get_logger": [[128, 137], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.test": [[20, 35], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "generate_pseudo_label.validation", "models.adaptation_modelv2.CustomModel", "adaptation_modelv2.CustomModel.BaseNet.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.create_dataset", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validation"], ["def", "test", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", "\n", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "model", ".", "BaseNet", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.validation": [[36, 42], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generate_pseudo_label.validate"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validate"], ["", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "opt", ")", ":", "\n", "    ", "_k", "=", "-", "1", "\n", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "datasets", ".", "target_train_loader", ",", "device", ",", "model", ",", "opt", ")", "\n", "#validate(datasets.target_valid_loader, device, model, opt)", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.label2rgb": [[44, 51], ["range", "torch.stack().float", "torch.stack().float", "torch.stack().float", "func", "torch.stack().float.append", "label[].cpu().numpy", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.stack", "torch.stack", "torch.stack", "label[].cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "label2rgb", "(", "func", ",", "label", ")", ":", "\n", "    ", "rgbs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rgb", "=", "func", "(", "label", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rgbs", ".", "append", "(", "torch", ".", "from_numpy", "(", "rgb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "rgbs", "=", "torch", ".", "stack", "(", "rgbs", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "rgbs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.validate": [[52, 86], ["os.path.join", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "tqdm.tqdm", "os.path.exists", "os.makedirs", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.softmax", "range", "out[].max", "range", "os.path.basename", "numpy.save", "model.BaseNet_DP", "torch.interpolate", "torch.interpolate", "label2rgb().float", "os.path.basename", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "numpy.save", "os.path.join", "threshold_arg[].cpu().numpy", "utils.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "os.path.join", "os.path.join", "os.path.join", "confidence[].cpu().numpy().astype", "os.path.basename.replace", "utils.fliplr", "generate_pseudo_label.label2rgb", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.basename.replace", "threshold_arg[].cpu", "data_i[].to.size", "data_i[].to.size", "pseudo[].cpu().numpy().astype", "pseudo_rgb[].permute().cpu().numpy().astype", "confidence[].cpu().numpy", "pseudo[].cpu().numpy", "pseudo_rgb[].permute().cpu().numpy", "confidence[].cpu", "pseudo[].cpu", "pseudo_rgb[].permute().cpu", "pseudo_rgb[].permute"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.utils.fliplr", "home.repos.pwc.inspect_result.microsoft_ProDA.None.utils.fliplr", "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.label2rgb"], ["", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "opt", ")", ":", "\n", "    ", "ori_LP", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "opt", ".", "save_path", ",", "opt", ".", "name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ori_LP", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ori_LP", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "filename", "=", "data_i", "[", "'img_path'", "]", "\n", "\n", "out", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "\n", "if", "opt", ".", "soft", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "softmax", "(", "out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "for", "k", "in", "range", "(", "labels_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "name", "=", "os", ".", "path", ".", "basename", "(", "filename", "[", "k", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ".", "replace", "(", "'.png'", ",", "'.npy'", ")", ")", ",", "threshold_arg", "[", "k", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "opt", ".", "flip", ":", "\n", "                ", "flip_out", "=", "model", ".", "BaseNet_DP", "(", "fliplr", "(", "images_val", ")", ")", "\n", "flip_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "sm", "(", "flip_out", "[", "'out'", "]", ")", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "sm", "(", "out", "[", "'out'", "]", ")", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "out", "[", "'out'", "]", "=", "(", "out", "[", "'out'", "]", "+", "fliplr", "(", "flip_out", "[", "'out'", "]", ")", ")", "/", "2", "\n", "\n", "", "confidence", ",", "pseudo", "=", "out", "[", "'out'", "]", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "#entropy = -(out['out']*torch.log(out['out']+1e-6)).sum(1, keepdim=True)", "\n", "pseudo_rgb", "=", "label2rgb", "(", "valid_loader", ".", "dataset", ".", "decode_segmap", ",", "pseudo", ")", ".", "float", "(", ")", "*", "255", "\n", "for", "k", "in", "range", "(", "labels_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "name", "=", "os", ".", "path", ".", "basename", "(", "filename", "[", "k", "]", ")", "\n", "Image", ".", "fromarray", "(", "pseudo", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ")", ")", "\n", "Image", ".", "fromarray", "(", "pseudo_rgb", "[", "k", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", "[", ":", "-", "4", "]", "+", "'_color.png'", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ".", "replace", "(", "'.png'", ",", "'_conf.npy'", ")", ")", ",", "confidence", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "#np.save(os.path.join(ori_LP, name.replace('.png', '_entropy.npy')), entropy[k, 0].cpu().numpy().astype(np.float16))", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.generate_pseudo_label.get_logger": [[88, 97], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.__init__": [[11, 14], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore._fast_hist": [[15, 22], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ",", "\n", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.update": [[23, 27], ["zip", "metrics.runningScore._fast_hist", "lt.flatten", "lp.flatten"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore._fast_hist"], ["", "def", "update", "(", "self", ",", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "            ", "self", ".", "confusion_matrix", "+=", "self", ".", "_fast_hist", "(", "\n", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "self", ".", "n_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.get_scores": [[29, 54], ["numpy.nanmean", "numpy.nanmean", "dict", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "zip", "numpy.diag", "range", "numpy.diag", "hist.sum", "hist.sum"], "methods", ["None"], ["", "", "def", "get_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns accuracy score evaluation result.\n            - overall accuracy\n            - mean accuracy\n            - mean IU\n            - fwavacc\n        \"\"\"", "\n", "hist", "=", "self", ".", "confusion_matrix", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "self", ".", "n_classes", ")", ",", "iu", ")", ")", "\n", "\n", "return", "(", "\n", "{", "\n", "\"Overall Acc: \\t\"", ":", "acc", ",", "\n", "\"Mean Acc : \\t\"", ":", "acc_cls", ",", "\n", "\"FreqW Acc : \\t\"", ":", "fwavacc", ",", "\n", "\"Mean IoU : \\t\"", ":", "mean_iu", ",", "\n", "}", ",", "\n", "cls_iu", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.reset": [[56, 58], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ",", "self", ".", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.__init__": [[63, 65], ["metrics.averageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.reset": [[66, 71], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.update": [[72, 77], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.train.train": [[21, 104], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "metrics.runningScore", "metrics.averageMeter", "os.path.join", "range", "models.adaptation_modelv2.CustomModel", "torch.load", "torch.load", "torch.load", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "data_i[].to", "data_i[].to", "data_i[].to", "data.create_dataset.source_train_loader.next", "source_data[].to", "source_data[].to", "source_data[].to", "time.time", "adaptation_modelv2.CustomModel.train", "adaptation_modelv2.CustomModel.optimizer_zerograd", "metrics.averageMeter.update", "adaptation_modelv2.CustomModel.scheduler_step", "os.path.dirname", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_i[].to", "data_i[].to", "adaptation_modelv2.CustomModel.freeze_bn_apply", "adaptation_modelv2.CustomModel.step_adv", "print", "logger.info", "metrics.averageMeter.reset", "train.validation", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "logger.info", "data_i.keys", "data_i.keys", "adaptation_modelv2.CustomModel.step", "adaptation_modelv2.CustomModel.step_distillation", "time.time", "fmt_str.format", "fmt_str.format", "fmt_str.format"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.create_dataset", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.optimizer_zerograd", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.update", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.scheduler_step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.freeze_bn_apply", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step_adv", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validation", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step_distillation"], ["def", "train", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "\n", "# Setup Metrics", "\n", "", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "time_meter", "=", "averageMeter", "(", ")", "\n", "\n", "# load category anchors", "\n", "if", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "        ", "objective_vectors", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "'prototypes_on_{}_from_{}'", ".", "format", "(", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", ")", "\n", "model", ".", "objective_vectors", "=", "torch", ".", "Tensor", "(", "objective_vectors", ")", ".", "to", "(", "0", ")", "\n", "\n", "# begin training", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_current_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "model", ".", "iter", "=", "0", "\n", "start_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "opt", ".", "epochs", ")", ":", "\n", "        ", "for", "data_i", "in", "datasets", ".", "target_train_loader", ":", "\n", "            ", "target_image", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "target_imageS", "=", "data_i", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "target_params", "=", "data_i", "[", "'params'", "]", "\n", "target_image_full", "=", "data_i", "[", "'img_full'", "]", ".", "to", "(", "device", ")", "\n", "target_weak_params", "=", "data_i", "[", "'weak_params'", "]", "\n", "\n", "target_lp", "=", "data_i", "[", "'lp'", "]", ".", "to", "(", "device", ")", "if", "'lp'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "target_lpsoft", "=", "data_i", "[", "'lpsoft'", "]", ".", "to", "(", "device", ")", "if", "'lpsoft'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "source_data", "=", "datasets", ".", "source_train_loader", ".", "next", "(", ")", "\n", "\n", "model", ".", "iter", "+=", "1", "\n", "i", "=", "model", ".", "iter", "\n", "images", "=", "source_data", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "source_data", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "source_imageS", "=", "source_data", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "source_params", "=", "source_data", "[", "'params'", "]", "\n", "\n", "start_ts", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "train", "(", "logger", "=", "logger", ")", "\n", "if", "opt", ".", "freeze_bn", ":", "\n", "                ", "model", ".", "freeze_bn_apply", "(", ")", "\n", "", "model", ".", "optimizer_zerograd", "(", ")", "\n", "\n", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                ", "loss_GTA", ",", "loss_G", ",", "loss_D", "=", "model", ".", "step_adv", "(", "images", ",", "labels", ",", "target_image", ",", "source_imageS", ",", "source_params", ")", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                ", "loss", ",", "loss_CTS", ",", "loss_consist", "=", "model", ".", "step", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ",", "\n", "target_lpsoft", ",", "target_image_full", ",", "target_weak_params", ")", "\n", "", "else", ":", "\n", "                ", "loss_GTA", ",", "loss", "=", "model", ".", "step_distillation", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ")", "\n", "\n", "", "time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_ts", ")", "\n", "\n", "#print(i)", "\n", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "print_interval", "==", "0", ":", "\n", "                ", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss_G: {:.4f}  loss_D: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss_G", ",", "loss_D", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss: {:.4f}  loss_CTS: {:.4f}  loss_consist: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss", ",", "loss_CTS", ",", "loss_consist", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "else", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "print", "(", "print_str", ")", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "time_meter", ".", "reset", "(", ")", "\n", "\n", "# evaluation", "\n", "", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "val_interval", "==", "0", ":", "\n", "                ", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", "=", "model", ".", "iter", ",", "opt", "=", "opt", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "logger", ".", "info", "(", "'Best iou until now is {}'", ".", "format", "(", "model", ".", "best_iou", ")", ")", "\n", "\n", "", "model", ".", "scheduler_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.train.validation": [[105, 166], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "running_metrics_val.get_scores", "score.items", "class_iou.items", "running_metrics_val.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.validate", "print", "logger.info", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.path.join", "torch.save", "torch.save", "torch.save", "param_group.get", "net.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.get_scores", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validate", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.get"], ["", "", "", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", ",", "opt", "=", "None", ")", ":", "\n", "    ", "iters", "=", "iters", "\n", "_k", "=", "-", "1", "\n", "for", "v", "in", "model", ".", "optimizers", ":", "\n", "        ", "_k", "+=", "1", "\n", "for", "param_group", "in", "v", ".", "param_groups", ":", "\n", "            ", "_learning_rate", "=", "param_group", ".", "get", "(", "'lr'", ")", "\n", "", "logger", ".", "info", "(", "\"learning rate is {} for {} net\"", ".", "format", "(", "_learning_rate", ",", "model", ".", "nets", "[", "_k", "]", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "val_datset", "=", "datasets", ".", "target_valid_loader", "\n", "#val_datset = datasets.target_train_loader", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "val_datset", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "state", "=", "{", "}", "\n", "_k", "=", "-", "1", "\n", "for", "net", "in", "model", ".", "nets", ":", "\n", "        ", "_k", "+=", "1", "\n", "new_state", "=", "{", "\n", "\"model_state\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "#\"optimizer_state\": model.optimizers[_k].state_dict(),", "\n", "#\"scheduler_state\": model.schedulers[_k].state_dict(),  ", "\n", "\"objective_vectors\"", ":", "model", ".", "objective_vectors", ",", "\n", "}", "\n", "state", "[", "net", ".", "__class__", ".", "__name__", "]", "=", "new_state", "\n", "", "state", "[", "'iter'", "]", "=", "iters", "+", "1", "\n", "state", "[", "'best_iou'", "]", "=", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_current_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n", "if", "score", "[", "\"Mean IoU : \\t\"", "]", ">=", "model", ".", "best_iou", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "best_iou", "=", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "state", "=", "{", "}", "\n", "_k", "=", "-", "1", "\n", "for", "net", "in", "model", ".", "nets", ":", "\n", "            ", "_k", "+=", "1", "\n", "new_state", "=", "{", "\n", "\"model_state\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "#\"optimizer_state\": model.optimizers[_k].state_dict(),", "\n", "#\"scheduler_state\": model.schedulers[_k].state_dict(),     ", "\n", "\"objective_vectors\"", ":", "model", ".", "objective_vectors", ",", "\n", "}", "\n", "state", "[", "net", ".", "__class__", ".", "__name__", "]", "=", "new_state", "\n", "", "state", "[", "'iter'", "]", "=", "iters", "+", "1", "\n", "state", "[", "'best_iou'", "]", "=", "model", ".", "best_iou", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_best_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "return", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.train.validate": [[167, 181], ["tqdm.tqdm", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.interpolate", "[].cpu().numpy", "data_i[].to.data.cpu().numpy", "running_metrics_val.update", "[].cpu", "data_i[].to.data.cpu", "data_i[].to.size", "F.interpolate.data.max"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.update"], ["", "", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", ":", "\n", "    ", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "\n", "outputs", "=", "F", ".", "interpolate", "(", "out", "[", "'out'", "]", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "#val_loss = loss_fn(input=outputs, target=labels_val)", "\n", "\n", "pred", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "labels_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "running_metrics_val", ".", "update", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.parser_train.parser_": [[7, 73], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "parser_", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'/mnt/blob'", ",", "help", "=", "'root path'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'deeplabv2'", ",", "help", "=", "'deeplabv2'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'gta2city'", ",", "help", "=", "'pretrain source model'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_bn'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "84", ")", "\n", "parser", ".", "add_argument", "(", "'--train_iters'", ",", "type", "=", "int", ",", "default", "=", "90000", ")", "\n", "parser", ".", "add_argument", "(", "'--moving_prototype'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn'", ",", "type", "=", "str", ",", "default", "=", "'sync_bn'", ",", "help", "=", "'sync_bn|bn|gn|adabn'", ")", "\n", "#training", "\n", "parser", ".", "add_argument", "(", "'--no_resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1337", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "type", "=", "str", ",", "default", "=", "'stage1'", ",", "help", "=", "'warm_up|stage1|stage2|stage3'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "action", "=", "'store_true'", ")", "\n", "#model", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "type", "=", "str", ",", "default", "=", "'pretrained/warmup/from_gta5_to_cityscapes_on_deeplab101_best_model_warmup.pkl'", ",", "help", "=", "'resume model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use ema model'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'add extra bn for ema model'", ")", "\n", "parser", ".", "add_argument", "(", "\"--student_init\"", ",", "default", "=", "'stage1'", ",", "type", "=", "str", ",", "help", "=", "\"stage1|imagenet|simclr\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--proto_momentum\"", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_clr\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"if true, add a bn layer for the output of simclr model\"", ")", "\n", "#data", "\n", "parser", ".", "add_argument", "(", "'--src_dataset'", ",", "type", "=", "str", ",", "default", "=", "'gta5'", ",", "help", "=", "'gta5|synthia'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_dataset'", ",", "type", "=", "str", ",", "default", "=", "'cityscapes'", ",", "help", "=", "'cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--src_rootpath'", ",", "type", "=", "str", ",", "default", "=", "'Dataset/GTA5'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_rootpath'", ",", "type", "=", "str", ",", "default", "=", "'Dataset/cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_LP'", ",", "type", "=", "str", ",", "default", "=", "'Pseudo/pretrain_warmup/LP0.95'", ",", "help", "=", "'path of probability-based PLA'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_soft'", ",", "type", "=", "str", ",", "default", "=", "'Pseudo/pretrain_warmup_soft/LP0.0'", ",", "help", "=", "'soft pseudo label for rectification'", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_thred\"", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--used_save_pseudo'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if True used saved pseudo label'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_droplast'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "int", ",", "default", "=", "2200", ",", "help", "=", "'resize long size'", ")", "\n", "parser", ".", "add_argument", "(", "'--rcrop'", ",", "type", "=", "str", ",", "default", "=", "'896,512'", ",", "help", "=", "'rondom crop size'", ")", "\n", "parser", ".", "add_argument", "(", "'--hflip'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'random flip probility'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "19", ",", "help", "=", "'19|16|13'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "#loss", "\n", "parser", ".", "add_argument", "(", "'--gan'", ",", "type", "=", "str", ",", "default", "=", "'LS'", ",", "help", "=", "'Vanilla|LS'", ")", "\n", "parser", ".", "add_argument", "(", "'--adv'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'loss weight of adv loss, only use when stage=warm_up'", ")", "\n", "parser", ".", "add_argument", "(", "'--S_pseudo_src'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'loss weight of pseudo label for strong augmentation of source'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"if true, use symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce_alpha\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "\"loss weight for symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce_beta\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "\"loss weight for symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--regular_w\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "'loss weight for regular term'", ")", "\n", "parser", ".", "add_argument", "(", "\"--regular_type\"", ",", "default", "=", "'MRKLD'", ",", "type", "=", "str", ",", "help", "=", "'MRENT|MRKLD'", ")", "\n", "parser", ".", "add_argument", "(", "'--proto_consistW'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'loss weight for proto_consist'", ")", "\n", "parser", ".", "add_argument", "(", "\"--distillation\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "\"kl loss weight\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--S_pseudo'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'loss weight of pseudo label for strong augmentation'", ")", "\n", "\n", "#print", "\n", "parser", ".", "add_argument", "(", "'--print_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'print loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'validate model iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--noshuffle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not use shuffle'", ")", "\n", "parser", ".", "add_argument", "(", "'--noaug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not use data augmentation'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--proto_rectify'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--proto_temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "#stage2", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "default", "=", "-", "1", ",", "type", "=", "float", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.parser_train.relative_path_to_absolute_path": [[74, 83], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "opt.rcrop.split", "opt.rcrop.split"], "function", ["None"], ["", "def", "relative_path_to_absolute_path", "(", "opt", ")", ":", "\n", "    ", "opt", ".", "rcrop", "=", "[", "int", "(", "opt", ".", "rcrop", ".", "split", "(", "','", ")", "[", "0", "]", ")", ",", "int", "(", "opt", ".", "rcrop", ".", "split", "(", "','", ")", "[", "1", "]", ")", "]", "\n", "opt", ".", "resume_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "opt", ".", "resume_path", ")", "\n", "opt", ".", "src_rootpath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "src_rootpath", ")", "\n", "opt", ".", "tgt_rootpath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "tgt_rootpath", ")", "\n", "opt", ".", "path_LP", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "opt", ".", "path_LP", ")", "\n", "opt", ".", "path_soft", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "opt", ".", "path_soft", ")", "\n", "opt", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "'logs'", ",", "opt", ".", "name", ")", "\n", "return", "opt", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.test": [[18, 35], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "data.create_dataset", "metrics.runningScore", "test.validation", "models.adaptation_modelv2.CustomModel", "adaptation_modelv2.CustomModel.BaseNet.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.create_dataset", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validation"], ["def", "test", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", "\n", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "model", ".", "BaseNet", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "\n", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validation": [[36, 55], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "running_metrics_val.get_scores", "score.items", "class_iou.items", "running_metrics_val.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "test.validate", "print", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.runningScore.get_scores", "home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validate"], ["", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", ":", "\n", "    ", "_k", "=", "-", "1", "\n", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "datasets", ".", "target_valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.validate": [[56, 69], ["torch.nn.Softmax", "torch.nn.Softmax", "tqdm.tqdm", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.interpolate", "[].cpu().numpy", "data_i[].to.data.cpu().numpy", "running_metrics_val.update", "[].cpu", "data_i[].to.data.cpu", "data_i[].to.size", "F.interpolate.data.max"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", ":", "\n", "    ", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "outs", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "#outputs = F.interpolate(sm(outs['out']), size=images_val.size()[2:], mode='bilinear', align_corners=True)", "\n", "outputs", "=", "F", ".", "interpolate", "(", "outs", "[", "'out'", "]", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "pred", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "labels_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "running_metrics_val", ".", "update", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.test.get_logger": [[70, 79], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.utils.get_logger": [[11, 22], ["logging.getLogger", "[].replace", "ts.replace().replace.replace().replace", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "ts.replace().replace.replace", "str().split", "str", "datetime.datetime.now"], "function", ["None"], ["def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run_{}.log'", ".", "format", "(", "ts", ")", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.None.utils.fliplr": [[23, 28], ["torch.arange().long().cuda", "img.index_select", "torch.arange().long", "torch.arange", "img.size"], "function", ["None"], ["", "def", "fliplr", "(", "img", ")", ":", "\n", "    ", "'''flip horizontal'''", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator.__init__": [[14, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator.forward": [[24, 35], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_low.__init__": [[41, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_low", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_low.forward": [[50, 59], ["discriminator.FCDiscriminator_low.conv1", "discriminator.FCDiscriminator_low.relu", "discriminator.FCDiscriminator_low.conv2", "discriminator.FCDiscriminator_low.relu", "discriminator.FCDiscriminator_low.conv3", "discriminator.FCDiscriminator_low.leaky_relu", "discriminator.FCDiscriminator_low.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_out.__init__": [[65, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_out", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_out.forward": [[75, 86], ["discriminator.FCDiscriminator_out.conv1", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv2", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv3", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv4", "discriminator.FCDiscriminator_out.leaky_relu", "discriminator.FCDiscriminator_out.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_class.__init__": [[115, 128], ["torch.Module.__init__", "discriminator.FCDiscriminator_class.DISCRIMINATOR"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["", "", "def", "__init__", "(", "self", ",", "inplanes", ",", "midplanes", ",", "planes", "=", "32", ")", ":", "\n", "        ", "'''\n        midplanes: channel size after reduction\n        '''", "\n", "\n", "super", "(", "FCDiscriminator_class", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplanes", "\n", "self", ".", "midplanes", "=", "midplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "source_unique", "=", "[", "]", "\n", "self", ".", "target_unique", "=", "[", "]", "\n", "self", ".", "common_unique", "=", "[", "]", "\n", "self", ".", "discriminator", "=", "self", ".", "DISCRIMINATOR", "(", "inplanes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_class.forward": [[148, 152], ["discriminator.FCDiscriminator_class.discriminator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "discriminator", "(", "x", ")", "\n", "pass", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_class.calc_common_unique": [[188, 196], ["range", "discriminator.FCDiscriminator_class.common_unique.append"], "methods", ["None"], ["", "def", "calc_common_unique", "(", "self", ",", "source_unique", ",", "target_unique", ")", ":", "\n", "        ", "self", ".", "source_unique", "=", "source_unique", "\n", "self", ".", "target_unique", "=", "target_unique", "\n", "self", ".", "common_unique", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "(", "i", "in", "self", ".", "source_unique", ")", "and", "(", "i", "in", "self", ".", "target_unique", ")", ":", "\n", "                ", "self", ".", "common_unique", ".", "append", "(", "i", ")", "\n", "", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.discriminator.FCDiscriminator_class.calc_valid_unique": [[197, 202], ["range", "discriminator.FCDiscriminator_class.valid_unique.append"], "methods", ["None"], ["", "def", "calc_valid_unique", "(", "self", ",", "classes_list", ")", ":", "\n", "        ", "self", ".", "valid_unique", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "(", "i", "in", "classes_list", ")", ":", "\n", "                ", "self", ".", "valid_unique", ".", "append", "(", "i", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.BasicBlock.__init__": [[32, 41], ["torch.Module.__init__", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.conv3x3", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.BasicBlock.forward": [[42, 59], ["deeplabv2.BasicBlock.conv1", "deeplabv2.BasicBlock.bn1", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.conv2", "deeplabv2.BasicBlock.bn2", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Bottleneck.__init__": [[64, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn1.parameters():", "\n", "#     i.requires_grad = False", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn2.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn3.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Bottleneck.forward": [[85, 106], ["deeplabv2.Bottleneck.conv1", "deeplabv2.Bottleneck.bn1", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv2", "deeplabv2.Bottleneck.bn2", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv3", "deeplabv2.Bottleneck.bn3", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Classifier_Module.__init__": [[109, 118], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplabv2.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Classifier_Module.forward": [[119, 124], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.SEBlock.__init__": [[126, 134], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplanes", ",", "inplanes", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inplanes", "//", "r", ",", "inplanes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.SEBlock.forward": [[135, 140], ["deeplabv2.SEBlock.global_pool", "xx.view.view.view", "deeplabv2.SEBlock.se().unsqueeze().unsqueeze", "x.mul", "xx.view.view.size", "xx.view.view.size", "deeplabv2.SEBlock.se().unsqueeze", "deeplabv2.SEBlock.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "global_pool", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "xx", ".", "size", "(", "1", ")", ")", "\n", "se_weight", "=", "self", ".", "se", "(", "xx", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", ".", "mul", "(", "se_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Classifier_Module2.__init__": [[142, 196], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "deeplabv2.Classifier_Module2.conv2d_list.append", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv2.Classifier_Module2.conv2d_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv2.SEBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "isinstance", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "droprate", "=", "0.1", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "super", "(", "Classifier_Module2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "#self.conv2d_list.append(", "\n", "#    nn.BatchNorm2d(inplanes))", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "#nn.ReflectionPad2d(padding),", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "SEBlock", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Dropout2d", "(", "droprate", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "\n", "##########init#######", "\n", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "bottleneck", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "head", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Classifier_Module2.forward": [[197, 212], ["range", "deeplabv2.Classifier_Module2.bottleneck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv2.Classifier_Module2.head", "len"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "get_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", ")", ",", "1", ")", "\n", "", "out", "=", "self", ".", "bottleneck", "(", "out", ")", "\n", "if", "get_feat", ":", "\n", "            ", "out_dict", "=", "{", "}", "\n", "out", "=", "self", ".", "head", "[", "0", "]", "(", "out", ")", "\n", "out_dict", "[", "'feat'", "]", "=", "out", "\n", "out", "=", "self", ".", "head", "[", "1", "]", "(", "out", ")", "\n", "out_dict", "[", "'out'", "]", "=", "out", "\n", "return", "out_dict", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "head", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.__init__": [[214, 244], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_pred_layer", "deeplabv2.ResNet101.modules", "BatchNorm", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_layer", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_layer", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_layer", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_layer", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "BatchNorm", ",", "bn_clr", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "bn_clr", "=", "bn_clr", "\n", "super", "(", "ResNet101", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn1.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "#self.layer5 = self._make_pred_layer(Classifier_Module, 2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module2", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "self", ".", "bn_pretrain", "=", "BatchNorm", "(", "2048", ",", "affine", "=", "affine_par", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_layer": [[247, 263], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "# for i in downsample._modules['1'].parameters():", "\n", "#     i.requires_grad = False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101._make_pred_layer": [[264, 266], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.forward": [[267, 291], ["deeplabv2.ResNet101.size", "deeplabv2.ResNet101.conv1", "deeplabv2.ResNet101.bn1", "deeplabv2.ResNet101.relu", "deeplabv2.ResNet101.maxpool", "deeplabv2.ResNet101.layer1", "deeplabv2.ResNet101.layer2", "deeplabv2.ResNet101.layer3", "deeplabv2.ResNet101.layer4", "deeplabv2.ResNet101.layer5", "deeplabv2.ResNet101.bn_pretrain"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ssl", "=", "False", ",", "lbl", "=", "None", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "x", "=", "self", ".", "bn_pretrain", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "layer5", "(", "x", ",", "get_feat", "=", "True", ")", "\n", "# out = dict()", "\n", "# out['feat'] = x", "\n", "# x = self.layer5(x)", "\n", "\n", "# if not ssl:", "\n", "#     x = nn.functional.upsample(x, (h, w), mode='bilinear', align_corners=True)", "\n", "#     if lbl is not None:", "\n", "#         self.loss = self.CrossEntropy2d(x, lbl)    ", "\n", "# out['out'] = x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_1x_lr_params": [[292, 310], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "\n", "        ", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_10x_lr_params": [[311, 321], ["b.append", "range", "b.append", "deeplabv2.ResNet101.layer5.parameters", "len", "deeplabv2.ResNet101.bn_pretrain.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "\n", "        ", "b", "=", "[", "]", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "bn_pretrain", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.optim_parameters": [[322, 325], ["deeplabv2.ResNet101.get_1x_lr_params", "deeplabv2.ResNet101.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_1x_lr_params", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.adjust_learning_rate": [[326, 331], ["len", "float"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "args", ",", "optimizer", ",", "i", ")", ":", "\n", "        ", "lr", "=", "args", ".", "learning_rate", "*", "(", "(", "1", "-", "float", "(", "i", ")", "/", "args", ".", "num_steps", ")", "**", "(", "args", ".", "power", ")", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.CrossEntropy2d": [[332, 348], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "", "def", "CrossEntropy2d", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "255", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "size_average", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.outS": [[15, 21], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.freeze_bn_func": [[349, 354], ["isinstance", "isinstance", "m.__class__.__name__.find"], "function", ["None"], ["", "", "def", "freeze_bn_func", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "__class__", ".", "__name__", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", "or", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab": [[355, 377], ["deeplabv2.ResNet101", "ResNet101.state_dict", "model_zoo.load_url.items", "model.state_dict.update", "ResNet101.load_state_dict", "ResNet101.apply", "torch.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "ResNet101.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.None.metrics.averageMeter.update"], ["", "", "def", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "21", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "None", ",", "initialization", "=", "None", ",", "bn_clr", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet101", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "BatchNorm", ",", "bn_clr", "=", "bn_clr", ")", "\n", "if", "freeze_bn", ":", "\n", "        ", "model", ".", "apply", "(", "freeze_bn_func", ")", "\n", "", "if", "initialization", "is", "None", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "\n", "", "else", ":", "\n", "        ", "pretrain_dict", "=", "torch", ".", "load", "(", "initialization", ")", "[", "'state_dict'", "]", "\n", "", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "state_dict", ":", "\n", "            ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "restore_from", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", ")", "\n", "#model.load_state_dict(checkpoint['ema'])", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.feat_prototype_distance_module.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feat_prototype_distance_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.feat_prototype_distance_module.forward": [[20, 27], ["range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "objective_vectors[].reshape().expand", "objective_vectors[].reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "objective_vectors", ",", "class_numbers", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feat", ".", "shape", "\n", "feat_proto_distance", "=", "-", "torch", ".", "ones", "(", "(", "N", ",", "class_numbers", ",", "H", ",", "W", ")", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "class_numbers", ")", ":", "\n", "#feat_proto_distance[:, i, :, :] = torch.norm(torch.Tensor(self.objective_vectors[i]).reshape(-1,1,1).expand(-1, H, W).to(feat.device) - feat, 2, dim=1,)", "\n", "            ", "feat_proto_distance", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "torch", ".", "norm", "(", "objective_vectors", "[", "0", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "W", ")", "-", "feat", ",", "2", ",", "dim", "=", "1", ",", ")", "\n", "", "return", "feat_proto_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.__init__": [[29, 112], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logger.info", "adaptation_modelv2.CustomModel.nets.extend", "adaptation_modelv2.CustomModel.optimizers.extend", "utils.get_scheduler", "adaptation_modelv2.CustomModel.schedulers.extend", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.nets_DP.append", "models.deeplabv2.Deeplab", "models.discriminator.FCDiscriminator", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.nets.extend", "adaptation_modelv2.CustomModel.nets_DP.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "adaptation_modelv2.CustomModel.optimizers.extend", "utils.get_scheduler", "adaptation_modelv2.CustomModel.schedulers.extend", "optimizer_cls", "optimizer_cls", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.BaseNet_ema.load_state_dict", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.teacher.eval", "adaptation_modelv2.CustomModel.init_device", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "adaptation_modelv2.feat_prototype_distance_module", "adaptation_modelv2.CustomModel.init_device", "NotImplementedError", "models.deeplabv2.Deeplab", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.BaseNet.parameters", "adaptation_modelv2.CustomModel.BaseNet.state_dict().copy", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "os.path.join", "adaptation_modelv2.CustomModel.BaseNet.get_1x_lr_params", "adaptation_modelv2.CustomModel.BaseNet.get_10x_lr_params", "adaptation_modelv2.CustomModel.BaseNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.get_scheduler", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.get_scheduler", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_1x_lr_params", "home.repos.pwc.inspect_result.microsoft_ProDA.models.deeplabv2.ResNet101.get_10x_lr_params"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "isTrain", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "class_numbers", "=", "opt", ".", "n_class", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "best_iou", "=", "-", "100", "\n", "self", ".", "nets", "=", "[", "]", "\n", "self", ".", "nets_DP", "=", "[", "]", "\n", "self", ".", "default_gpu", "=", "0", "\n", "self", ".", "objective_vectors", "=", "torch", ".", "zeros", "(", "[", "self", ".", "class_numbers", ",", "256", "]", ")", "\n", "self", ".", "objective_vectors_num", "=", "torch", ".", "zeros", "(", "[", "self", ".", "class_numbers", "]", ")", "\n", "\n", "if", "opt", ".", "bn", "==", "'sync_bn'", ":", "\n", "            ", "BatchNorm", "=", "SynchronizedBatchNorm2d", "\n", "", "elif", "opt", ".", "bn", "==", "'bn'", ":", "\n", "            ", "BatchNorm", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'batch norm choice {} is not implemented'", ".", "format", "(", "opt", ".", "bn", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "no_resume", ":", "\n", "            ", "restore_from", "=", "None", "\n", "", "else", ":", "\n", "            ", "restore_from", "=", "opt", ".", "resume_path", "\n", "self", ".", "best_iou", "=", "0", "\n", "", "if", "self", ".", "opt", ".", "student_init", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "", "elif", "self", ".", "opt", ".", "student_init", "==", "'simclr'", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ",", "\n", "initialization", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'Code/ProDA'", ",", "'pretrained/simclr/r101_1x_sk0.pth'", ")", ",", "bn_clr", "=", "opt", ".", "bn_clr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "\n", "", "logger", ".", "info", "(", "'the backbone is {}'", ".", "format", "(", "opt", ".", "model_name", ")", ")", "\n", "\n", "self", ".", "nets", ".", "extend", "(", "[", "self", ".", "BaseNet", "]", ")", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "optimizer_cls", "=", "torch", ".", "optim", ".", "SGD", "\n", "optimizer_params", "=", "{", "'lr'", ":", "opt", ".", "lr", ",", "'weight_decay'", ":", "2e-4", ",", "'momentum'", ":", "0.9", "}", "\n", "\n", "if", "self", ".", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "            ", "self", ".", "net_D", "=", "FCDiscriminator", "(", "inplanes", "=", "self", ".", "class_numbers", ")", "\n", "self", ".", "net_D_DP", "=", "self", ".", "init_device", "(", "self", ".", "net_D", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "self", ".", "nets", ".", "extend", "(", "[", "self", ".", "net_D", "]", ")", "\n", "self", ".", "nets_DP", ".", "append", "(", "self", ".", "net_D_DP", ")", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "net_D", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "self", ".", "optimizers", ".", "extend", "(", "[", "self", ".", "optimizer_D", "]", ")", "\n", "self", ".", "DSchedule", "=", "get_scheduler", "(", "self", ".", "optimizer_D", ",", "opt", ")", "\n", "self", ".", "schedulers", ".", "extend", "(", "[", "self", ".", "DSchedule", "]", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "finetune", "or", "self", ".", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "            ", "self", ".", "BaseOpti", "=", "optimizer_cls", "(", "[", "{", "'params'", ":", "self", ".", "BaseNet", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "optimizer_params", "[", "'lr'", "]", "}", ",", "\n", "{", "'params'", ":", "self", ".", "BaseNet", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "optimizer_params", "[", "'lr'", "]", "*", "10", "}", "]", ",", "**", "optimizer_params", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "BaseOpti", "=", "optimizer_cls", "(", "self", ".", "BaseNet", ".", "parameters", "(", ")", ",", "**", "optimizer_params", ")", "\n", "", "self", ".", "optimizers", ".", "extend", "(", "[", "self", ".", "BaseOpti", "]", ")", "\n", "\n", "self", ".", "BaseSchedule", "=", "get_scheduler", "(", "self", ".", "BaseOpti", ",", "opt", ")", "\n", "self", ".", "schedulers", ".", "extend", "(", "[", "self", ".", "BaseSchedule", "]", ")", "\n", "\n", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "self", ".", "BaseNet_ema", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ",", "bn_clr", "=", "opt", ".", "ema_bn", ")", "\n", "self", ".", "BaseNet_ema", ".", "load_state_dict", "(", "self", ".", "BaseNet", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "distillation", ">", "0", ":", "\n", "            ", "self", ".", "teacher", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "opt", ".", "resume_path", ",", "bn_clr", "=", "opt", ".", "ema_bn", ")", "\n", "self", ".", "teacher", ".", "eval", "(", ")", "\n", "self", ".", "teacher_DP", "=", "self", ".", "init_device", "(", "self", ".", "teacher", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n", "\n", "", "self", ".", "adv_source_label", "=", "0", "\n", "self", ".", "adv_target_label", "=", "1", "\n", "if", "self", ".", "opt", ".", "gan", "==", "'Vanilla'", ":", "\n", "            ", "self", ".", "bceloss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "self", ".", "opt", ".", "gan", "==", "'LS'", ":", "\n", "            ", "self", ".", "bceloss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "feat_prototype_distance_DP", "=", "self", ".", "init_device", "(", "feat_prototype_distance_module", "(", ")", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n", "self", ".", "BaseNet_DP", "=", "self", ".", "init_device", "(", "self", ".", "BaseNet", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "self", ".", "nets_DP", ".", "append", "(", "self", ".", "BaseNet_DP", ")", "\n", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "self", ".", "BaseNet_ema_DP", "=", "self", ".", "init_device", "(", "self", ".", "BaseNet_ema", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.calculate_mean_vector": [[113, 142], ["torch.softmax", "torch.softmax", "torch.softmax", "conf.ge", "torch.softmax.argmax", "adaptation_modelv2.CustomModel.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "torch.softmax.max", "adaptation_modelv2.CustomModel.float", "adaptation_modelv2.CustomModel.process_label", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label"], ["", "", "def", "calculate_mean_vector", "(", "self", ",", "feat_cls", ",", "outputs", ",", "labels", "=", "None", ",", "thresh", "=", "None", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "if", "thresh", "is", "None", ":", "\n", "            ", "thresh", "=", "-", "1", "\n", "", "conf", "=", "outputs_softmax", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "mask", "=", "conf", ".", "ge", "(", "thresh", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "self", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "if", "labels", "is", "None", ":", "\n", "            ", "outputs_pred", "=", "outputs_argmax", "\n", "", "else", ":", "\n", "            ", "labels_expanded", "=", "self", ".", "process_label", "(", "labels", ")", "\n", "outputs_pred", "=", "labels_expanded", "*", "outputs_argmax", "\n", "", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", "*", "mask", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "*", "mask", "[", "n", "]", "\n", "# scale = torch.sum(outputs_pred[n][t]) / labels.shape[2] / labels.shape[3] * 2", "\n", "# s = normalisation_pooling()(s, scale)", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step_adv": [[143, 180], ["adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.net_D_DP", "loss_G.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.optimizer_D.zero_grad", "adaptation_modelv2.CustomModel.net_D_DP", "adaptation_modelv2.CustomModel.net_D_DP", "loss_D.backward", "adaptation_modelv2.CustomModel.optimizer_D.step", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.label_strong_T().to", "utils.cross_entropy2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "torch.softmax", "torch.softmax", "torch.softmax", "adaptation_modelv2.CustomModel.bceloss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "adaptation_modelv2.CustomModel.bceloss", "adaptation_modelv2.CustomModel.bceloss", "utils.cross_entropy2d.item", "loss_adv_G.item", "loss_D.item", "source_label.unsqueeze().float", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.interpolate.detach", "torch.interpolate.detach", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.squeeze", "target_x.size", "source_label.unsqueeze", "source_output[].size", "torch.interpolate.clone().float", "source_x.size", "source_x.size", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.interpolate.clone", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "adaptation_modelv2.CustomModel.data.size", "adaptation_modelv2.CustomModel.data.size", "adaptation_modelv2.CustomModel.data.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step_adv", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "source_imageS", ",", "source_params", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "net_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "S_pseudo_src", ">", "0", ":", "\n", "            ", "source_output", "=", "self", ".", "BaseNet_DP", "(", "source_imageS", ")", "\n", "source_label_d4", "=", "F", ".", "interpolate", "(", "source_label", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "size", "=", "source_output", "[", "'out'", "]", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "source_labelS", "=", "self", ".", "label_strong_T", "(", "source_label_d4", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "source_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "loss_", "=", "cross_entropy2d", "(", "input", "=", "source_output", "[", "'out'", "]", ",", "target", "=", "source_labelS", ".", "squeeze", "(", "1", ")", ")", "\n", "loss_GTA", "=", "loss_", "*", "self", ".", "opt", ".", "S_pseudo_src", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_output", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "source_output", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_output", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ",", "size_average", "=", "True", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "target_output", "=", "self", ".", "BaseNet_DP", "(", "target_x", ",", "ssl", "=", "True", ")", "\n", "target_outputUp", "=", "F", ".", "interpolate", "(", "target_output", "[", "'out'", "]", ",", "size", "=", "target_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "target_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "target_outputUp", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_G", "=", "self", ".", "bceloss", "(", "target_D_out", ",", "torch", ".", "FloatTensor", "(", "target_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_source_label", ")", ".", "to", "(", "target_D_out", ".", "device", ")", ")", "*", "self", ".", "opt", ".", "adv", "\n", "loss_G", "=", "loss_adv_G", "+", "loss_GTA", "\n", "loss_G", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "net_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "source_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "source_outputUp", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "target_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "target_outputUp", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_D", "=", "self", ".", "bceloss", "(", "source_D_out", ",", "torch", ".", "FloatTensor", "(", "source_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_source_label", ")", ".", "to", "(", "source_D_out", ".", "device", ")", ")", "+", "self", ".", "bceloss", "(", "target_D_out", ",", "torch", ".", "FloatTensor", "(", "target_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_target_label", ")", ".", "to", "(", "target_D_out", ".", "device", ")", ")", "\n", "loss_D", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "return", "loss_GTA", ".", "item", "(", ")", ",", "loss_adv_G", ".", "item", "(", ")", ",", "loss_D", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step": [[181, 268], ["adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "utils.cross_entropy2d", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to.backward", "torch.Tensor().to.backward", "torch.Tensor().to.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.get_prototype_weight", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.rce", "adaptation_modelv2.CustomModel.regular_loss", "adaptation_modelv2.CustomModel.full2weak", "adaptation_modelv2.CustomModel.feat_prototype_distance", "adaptation_modelv2.CustomModel.label_strong_T", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.objective_vectors.expand", "adaptation_modelv2.CustomModel.feat_prototype_distance_DP", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "adaptation_modelv2.CustomModel.calculate_mean_vector", "range", "zip", "zip", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "utils.cross_entropy2d.item", "torch.kl_div.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptation_modelv2.CustomModel.BaseNet_ema_DP", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "rectified.max", "rectified.sum", "rectified.max", "torch.interpolate().long.reshape", "torch.interpolate().long.reshape().clone", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "adaptation_modelv2.CustomModel.BaseNet_DP", "mask.sum", "ema_out[].detach", "ema_out[].detach", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "adaptation_modelv2.CustomModel.BaseNet.parameters", "adaptation_modelv2.CustomModel.BaseNet_ema.parameters", "adaptation_modelv2.CustomModel.BaseNet.buffers", "adaptation_modelv2.CustomModel.BaseNet_ema.buffers", "buffer_q.data.clone", "source_x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.label_strong_T", "ema_vectors[].detach", "target_lp.unsqueeze().float", "int", "int", "int", "int", "torch.interpolate().long.clone().float", "cluster_arg.clone().float", "torch.interpolate().long.reshape", "param_k.data.clone", "param_q.data.clone", "target_lp.unsqueeze", "torch.interpolate().long.clone", "cluster_arg.clone"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.get_prototype_weight", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.rce", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.regular_loss", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.full2weak", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.feat_prototype_distance", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.update_objective_SingleVector", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "target_imageS", "=", "None", ",", "target_params", "=", "None", ",", "target_lp", "=", "None", ",", "\n", "target_lpsoft", "=", "None", ",", "target_image_full", "=", "None", ",", "target_weak_params", "=", "None", ")", ":", "\n", "\n", "        ", "source_out", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_out", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ")", "\n", "loss_GTA", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lpsoft", ",", "scale_factor", "=", "0.25", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lp", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.25", ")", ".", "long", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "ema_input", "=", "target_image_full", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ema_out", "=", "self", ".", "BaseNet_ema_DP", "(", "ema_input", ")", "\n", "", "ema_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "ema_out", "[", "'feat'", "]", ",", "size", "=", "(", "int", "(", "ema_input", ".", "shape", "[", "2", "]", "/", "4", ")", ",", "int", "(", "ema_input", ".", "shape", "[", "3", "]", "/", "4", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "ema_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "ema_out", "[", "'out'", "]", ",", "size", "=", "(", "int", "(", "ema_input", ".", "shape", "[", "2", "]", "/", "4", ")", ",", "int", "(", "ema_input", ".", "shape", "[", "3", "]", "/", "4", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", "else", "self", ".", "BaseNet_DP", "(", "target_x", ")", "\n", "target_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "target_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'feat'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "batch", ",", "_", ",", "w", ",", "h", "=", "threshold_arg", ".", "shape", "\n", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "            ", "weights", "=", "self", ".", "get_prototype_weight", "(", "ema_out", "[", "'feat'", "]", ",", "target_weak_params", "=", "target_weak_params", ")", "\n", "rectified", "=", "weights", "*", "threshold_arg", "\n", "threshold_arg", "=", "rectified", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "rectified", "=", "rectified", "/", "rectified", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "argmax", "=", "rectified", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "threshold_arg", "[", "argmax", "<", "self", ".", "opt", ".", "train_thred", "]", "=", "250", "\n", "", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", ":", "\n", "            ", "threshold_argS", "=", "self", ".", "label_strong_T", "(", "threshold_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "cluster_argS", "=", "self", ".", "label_strong_T", "(", "cluster_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "threshold_arg", "=", "threshold_argS", "\n", "\n", "", "loss_CTS", "=", "cross_entropy2d", "(", "input", "=", "target_out", "[", "'out'", "]", ",", "target", "=", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ")", "\n", "\n", "if", "self", ".", "opt", ".", "rce", ":", "\n", "            ", "rce", "=", "self", ".", "rce", "(", "target_out", "[", "'out'", "]", ",", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ".", "clone", "(", ")", ")", "\n", "loss_CTS", "=", "self", ".", "opt", ".", "rce_alpha", "*", "loss_CTS", "+", "self", ".", "opt", ".", "rce_beta", "*", "rce", "\n", "\n", "", "if", "self", ".", "opt", ".", "regular_w", ">", "0", ":", "\n", "            ", "regular_loss", "=", "self", ".", "regular_loss", "(", "target_out", "[", "'out'", "]", ")", "\n", "loss_CTS", "=", "loss_CTS", "+", "regular_loss", "*", "self", ".", "opt", ".", "regular_w", "\n", "\n", "", "cluster_argS", "=", "None", "\n", "loss_consist", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "if", "self", ".", "opt", ".", "proto_consistW", ">", "0", ":", "\n", "            ", "ema2weak_feat", "=", "self", ".", "full2weak", "(", "ema_out", "[", "'feat'", "]", ",", "target_weak_params", ")", "#N*256*H*W", "\n", "ema2weak_feat_proto_distance", "=", "self", ".", "feat_prototype_distance", "(", "ema2weak_feat", ")", "#N*19*H*W", "\n", "ema2strong_feat_proto_distance", "=", "self", ".", "label_strong_T", "(", "ema2weak_feat_proto_distance", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", "\n", "mask", "=", "(", "ema2strong_feat_proto_distance", "!=", "250", ")", ".", "float", "(", ")", "\n", "teacher", "=", "F", ".", "softmax", "(", "-", "ema2strong_feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "targetS_out", "=", "target_out", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", "else", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "\n", "targetS_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "targetS_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "targetS_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "targetS_out", "[", "'feat'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "prototype_tmp", "=", "self", ".", "objective_vectors", ".", "expand", "(", "4", ",", "-", "1", ",", "-", "1", ")", "#gpu memory limitation", "\n", "strong_feat_proto_distance", "=", "self", ".", "feat_prototype_distance_DP", "(", "targetS_out", "[", "'feat'", "]", ",", "prototype_tmp", ",", "self", ".", "class_numbers", ")", "\n", "student", "=", "F", ".", "log_softmax", "(", "-", "strong_feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "loss_consist", "=", "F", ".", "kl_div", "(", "student", ",", "teacher", ",", "reduction", "=", "'none'", ")", "\n", "loss_consist", "=", "(", "loss_consist", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "self", ".", "opt", ".", "proto_consistW", "*", "loss_consist", "\n", "\n", "", "loss", "=", "loss", "+", "loss_CTS", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "moving_prototype", ":", "#update prototype", "\n", "            ", "ema_vectors", ",", "ema_ids", "=", "self", ".", "calculate_mean_vector", "(", "ema_out", "[", "'feat'", "]", ".", "detach", "(", ")", ",", "ema_out", "[", "'out'", "]", ".", "detach", "(", ")", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "ema_ids", ")", ")", ":", "\n", "                ", "self", ".", "update_objective_SingleVector", "(", "ema_ids", "[", "t", "]", ",", "ema_vectors", "[", "t", "]", ".", "detach", "(", ")", ",", "start_mean", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "opt", ".", "ema", ":", "#update ema model", "\n", "            ", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "BaseNet", ".", "parameters", "(", ")", ",", "self", ".", "BaseNet_ema", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", "=", "param_k", ".", "data", ".", "clone", "(", ")", "*", "0.999", "+", "param_q", ".", "data", ".", "clone", "(", ")", "*", "(", "1.", "-", "0.999", ")", "\n", "", "for", "buffer_q", ",", "buffer_k", "in", "zip", "(", "self", ".", "BaseNet", ".", "buffers", "(", ")", ",", "self", ".", "BaseNet_ema", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "buffer_k", ".", "data", "=", "buffer_q", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "return", "loss", ".", "item", "(", ")", ",", "loss_CTS", ".", "item", "(", ")", ",", "loss_consist", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.regular_loss": [[269, 277], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax.sum"], "methods", ["None"], ["", "def", "regular_loss", "(", "self", ",", "activation", ")", ":", "\n", "        ", "logp", "=", "F", ".", "log_softmax", "(", "activation", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "regular_type", "==", "'MRENT'", ":", "\n", "            ", "p", "=", "F", ".", "softmax", "(", "activation", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "p", "*", "logp", ")", ".", "sum", "(", ")", "/", "(", "p", ".", "shape", "[", "0", "]", "*", "p", ".", "shape", "[", "2", "]", "*", "p", ".", "shape", "[", "3", "]", ")", "\n", "", "elif", "self", ".", "opt", ".", "regular_type", "==", "'MRKLD'", ":", "\n", "            ", "loss", "=", "-", "logp", ".", "sum", "(", ")", "/", "(", "logp", ".", "shape", "[", "0", "]", "*", "logp", ".", "shape", "[", "1", "]", "*", "logp", ".", "shape", "[", "2", "]", "*", "logp", ".", "shape", "[", "3", "]", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.rce": [[278, 287], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.clamp.permute", "torch.clamp.permute", "torch.clamp.permute", "mask.sum", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "rce", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred", "=", "torch", ".", "clamp", "(", "pred", ",", "min", "=", "1e-7", ",", "max", "=", "1.0", ")", "\n", "mask", "=", "(", "labels", "!=", "250", ")", ".", "float", "(", ")", "\n", "labels", "[", "labels", "==", "250", "]", "=", "self", ".", "class_numbers", "\n", "label_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "labels", ",", "self", ".", "class_numbers", "+", "1", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "label_one_hot", "=", "torch", ".", "clamp", "(", "label_one_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ",", "min", "=", "1e-4", ",", "max", "=", "1.0", ")", "\n", "rce", "=", "-", "(", "torch", ".", "sum", "(", "pred", "*", "torch", ".", "log", "(", "label_one_hot", ")", ",", "dim", "=", "1", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "return", "rce", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step_distillation": [[288, 324], ["adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.rce", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "utils.cross_entropy2d.item", "utils.cross_entropy2d.item", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.reshape", "adaptation_modelv2.CustomModel.reshape().clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptation_modelv2.CustomModel.teacher_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "mask.sum", "source_x.size", "target_lp.unsqueeze().float", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.clone().float", "adaptation_modelv2.CustomModel.reshape", "target_lp.unsqueeze", "adaptation_modelv2.CustomModel.clone"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.rce", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step_distillation", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "target_imageS", "=", "None", ",", "target_params", "=", "None", ",", "target_lp", "=", "None", ")", ":", "\n", "\n", "        ", "source_out", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_out", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ")", "\n", "loss_GTA", ".", "backward", "(", ")", "\n", "\n", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lp", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.25", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", ":", "\n", "            ", "threshold_arg", "=", "self", ".", "label_strong_T", "(", "threshold_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "\n", "", "else", ":", "\n", "            ", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_x", ")", "\n", "", "target_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "batch", ",", "_", ",", "w", ",", "h", "=", "threshold_arg", ".", "shape", "\n", "loss", "=", "cross_entropy2d", "(", "input", "=", "target_out", "[", "'out'", "]", ",", "target", "=", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ",", "size_average", "=", "True", ",", "reduction", "=", "'mean'", ")", "\n", "if", "self", ".", "opt", ".", "rce", ":", "\n", "            ", "rce", "=", "self", ".", "rce", "(", "target_out", "[", "'out'", "]", ",", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ".", "clone", "(", ")", ")", "\n", "loss", "=", "self", ".", "opt", ".", "rce_alpha", "*", "loss", "+", "self", ".", "opt", ".", "rce_beta", "*", "rce", "\n", "\n", "", "if", "self", ".", "opt", ".", "distillation", ">", "0", ":", "\n", "            ", "student", "=", "F", ".", "softmax", "(", "target_out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "teacher_out", "=", "self", ".", "teacher_DP", "(", "target_imageS", ")", "\n", "teacher_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "teacher_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "teacher", "=", "F", ".", "softmax", "(", "teacher_out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss_kd", "=", "F", ".", "kl_div", "(", "student", ",", "teacher", ",", "reduction", "=", "'none'", ")", "\n", "mask", "=", "(", "teacher", "!=", "250", ")", ".", "float", "(", ")", "\n", "loss_kd", "=", "(", "loss_kd", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "self", ".", "opt", ".", "distillation", "*", "loss_kd", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "return", "loss_GTA", ".", "item", "(", ")", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.full2weak": [[325, 339], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tmp.append", "int", "int", "int", "int", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "feat_.index_select.index_select.index_select", "int", "int", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "feat_.index_select.index_select.size"], "methods", ["None"], ["", "def", "full2weak", "(", "self", ",", "feat", ",", "target_weak_params", ")", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "feat", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "h", ",", "w", "=", "target_weak_params", "[", "'RandomSized'", "]", "[", "0", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomSized'", "]", "[", "1", "]", "[", "i", "]", "\n", "feat_", "=", "F", ".", "interpolate", "(", "feat", "[", "i", ":", "i", "+", "1", "]", ",", "size", "=", "[", "int", "(", "h", "/", "4", ")", ",", "int", "(", "w", "/", "4", ")", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "y1", ",", "y2", ",", "x1", ",", "x2", "=", "target_weak_params", "[", "'RandomCrop'", "]", "[", "0", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "1", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "2", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "3", "]", "[", "i", "]", "\n", "y1", ",", "th", ",", "x1", ",", "tw", "=", "int", "(", "y1", "/", "4", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", "/", "4", ")", ",", "int", "(", "x1", "/", "4", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", "/", "4", ")", "\n", "feat_", "=", "feat_", "[", ":", ",", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "if", "target_weak_params", "[", "'RandomHorizontallyFlip'", "]", "[", "i", "]", ":", "\n", "                ", "inv_idx", "=", "torch", ".", "arange", "(", "feat_", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "to", "(", "feat_", ".", "device", ")", "\n", "feat_", "=", "feat_", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "", "tmp", ".", "append", "(", "feat_", ")", "\n", "", "feat", "=", "torch", ".", "cat", "(", "tmp", ",", "0", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.feat_prototype_distance": [[340, 347], ["range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adaptation_modelv2.CustomModel.objective_vectors[].reshape().expand", "adaptation_modelv2.CustomModel.objective_vectors[].reshape"], "methods", ["None"], ["", "def", "feat_prototype_distance", "(", "self", ",", "feat", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feat", ".", "shape", "\n", "feat_proto_distance", "=", "-", "torch", ".", "ones", "(", "(", "N", ",", "self", ".", "class_numbers", ",", "H", ",", "W", ")", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "#feat_proto_distance[:, i, :, :] = torch.norm(torch.Tensor(self.objective_vectors[i]).reshape(-1,1,1).expand(-1, H, W).to(feat.device) - feat, 2, dim=1,)", "\n", "            ", "feat_proto_distance", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "torch", ".", "norm", "(", "self", ".", "objective_vectors", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "W", ")", "-", "feat", ",", "2", ",", "dim", "=", "1", ",", ")", "\n", "", "return", "feat_proto_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.get_prototype_weight": [[348, 356], ["adaptation_modelv2.CustomModel.full2weak", "adaptation_modelv2.CustomModel.feat_prototype_distance", "adaptation_modelv2.CustomModel.min", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.full2weak", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.feat_prototype_distance"], ["", "def", "get_prototype_weight", "(", "self", ",", "feat", ",", "label", "=", "None", ",", "target_weak_params", "=", "None", ")", ":", "\n", "        ", "feat", "=", "self", ".", "full2weak", "(", "feat", ",", "target_weak_params", ")", "\n", "feat_proto_distance", "=", "self", ".", "feat_prototype_distance", "(", "feat", ")", "\n", "feat_nearest_proto_distance", ",", "feat_nearest_proto", "=", "feat_proto_distance", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feat_proto_distance", "=", "feat_proto_distance", "-", "feat_nearest_proto_distance", "\n", "weight", "=", "F", ".", "softmax", "(", "-", "feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.label_strong_T": [[357, 375], ["range", "params.items", "label[].clone().flip", "param[].item", "data.randaugment.affine_sample", "label[].clone", "param[].item", "int", "param[].item", "label[].clone", "isinstance", "int", "int", "int", "int", "param[].item", "[].item", "[].item", "[].item", "[].item"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.affine_sample"], ["", "def", "label_strong_T", "(", "self", ",", "label", ",", "params", ",", "padding", ",", "scale", "=", "1", ")", ":", "\n", "        ", "label", "=", "label", "+", "1", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "(", "Tform", ",", "param", ")", "in", "params", ".", "items", "(", ")", ":", "\n", "                ", "if", "Tform", "==", "'Hflip'", "and", "param", "[", "i", "]", ".", "item", "(", ")", "==", "1", ":", "\n", "                    ", "label", "[", "i", "]", "=", "label", "[", "i", "]", ".", "clone", "(", ")", ".", "flip", "(", "-", "1", ")", "\n", "", "elif", "(", "Tform", "==", "'ShearX'", "or", "Tform", "==", "'ShearY'", "or", "Tform", "==", "'TranslateX'", "or", "Tform", "==", "'TranslateY'", "or", "Tform", "==", "'Rotate'", ")", "and", "param", "[", "i", "]", ".", "item", "(", ")", "!=", "1e4", ":", "\n", "                    ", "v", "=", "int", "(", "param", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "if", "Tform", "==", "'TranslateX'", "or", "Tform", "==", "'TranslateY'", "else", "param", "[", "i", "]", ".", "item", "(", ")", "\n", "label", "[", "i", ":", "i", "+", "1", "]", "=", "affine_sample", "(", "label", "[", "i", ":", "i", "+", "1", "]", ".", "clone", "(", ")", ",", "v", ",", "Tform", ")", "\n", "", "elif", "Tform", "==", "'CutoutAbs'", "and", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "                    ", "x0", "=", "int", "(", "param", "[", "0", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "y0", "=", "int", "(", "param", "[", "1", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "x1", "=", "int", "(", "param", "[", "2", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "y1", "=", "int", "(", "param", "[", "3", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "label", "[", "i", ",", ":", ",", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "=", "0", "\n", "", "", "", "label", "[", "label", "==", "0", "]", "=", "padding", "+", "1", "# for strong augmentation, constant padding", "\n", "label", "=", "label", "-", "1", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.process_label": [[376, 382], ["label.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "pred1.scatter_.scatter_.scatter_", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.where.long", "torch.where.long", "torch.where.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "process_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "w", ",", "h", "=", "label", ".", "size", "(", ")", "\n", "pred1", "=", "torch", ".", "zeros", "(", "batch", ",", "self", ".", "class_numbers", "+", "1", ",", "w", ",", "h", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "id", "=", "torch", ".", "where", "(", "label", "<", "self", ".", "class_numbers", ",", "label", ",", "torch", ".", "Tensor", "(", "[", "self", ".", "class_numbers", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", ")", "\n", "pred1", "=", "pred1", ".", "scatter_", "(", "1", ",", "id", ".", "long", "(", ")", ",", "1", ")", "\n", "return", "pred1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.freeze_bn_apply": [[383, 388], ["net.apply", "net.apply"], "methods", ["None"], ["", "def", "freeze_bn_apply", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "net", ".", "apply", "(", "freeze_bn", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "            ", "net", ".", "apply", "(", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.scheduler_step": [[389, 392], ["scheduler.step"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.step"], ["", "", "def", "scheduler_step", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.optimizer_zerograd": [[393, 396], ["optimizer.zero_grad"], "methods", ["None"], ["", "", "def", "optimizer_zerograd", "(", "self", ")", ":", "\n", "        ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.init_device": [[398, 407], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "models.sync_batchnorm.DataParallelWithCallback.to", "models.sync_batchnorm.DataParallelWithCallback", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "", "def", "init_device", "(", "self", ",", "net", ",", "gpu_id", "=", "None", ",", "whether_DP", "=", "False", ")", ":", "\n", "        ", "gpu_id", "=", "gpu_id", "or", "self", ".", "default_gpu", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu_id", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "# if torch.cuda.is_available():", "\n", "if", "whether_DP", ":", "\n", "#net = DataParallelWithCallback(net, device_ids=[0])", "\n", "            ", "net", "=", "DataParallelWithCallback", "(", "net", ",", "device_ids", "=", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval": [[408, 423], ["net.eval", "net.eval", "net.eval", "logger.info", "logger"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval"], ["", "def", "eval", "(", "self", ",", "net", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"Make specific models eval mode during test time\"\"\"", "\n", "# if issubclass(net, nn.Module) or issubclass(net, BaseModel):", "\n", "if", "net", "==", "None", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "net", ".", "eval", "(", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "                ", "net", ".", "eval", "(", ")", "\n", "", "if", "logger", "!=", "None", ":", "\n", "                ", "logger", ".", "info", "(", "\"Successfully set the model eval mode\"", ")", "\n", "", "", "else", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "if", "logger", "!=", "None", ":", "\n", "                ", "logger", "(", "\"Successfully set {} eval mode\"", ".", "format", "(", "net", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.train": [[424, 433], ["net.train", "net.train", "net.train"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.train"], ["", "def", "train", "(", "self", ",", "net", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "net", "==", "None", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "net", ".", "train", "(", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "                ", "net", ".", "train", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.update_objective_SingleVector": [[434, 451], ["vector.sum().item", "min", "adaptation_modelv2.CustomModel.objective_vectors_num[].item", "min", "NotImplementedError", "vector.sum", "vector.squeeze", "vector.squeeze"], "methods", ["None"], ["", "def", "update_objective_SingleVector", "(", "self", ",", "id", ",", "vector", ",", "name", "=", "'moving_average'", ",", "start_mean", "=", "True", ")", ":", "\n", "        ", "if", "vector", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "if", "start_mean", "and", "self", ".", "objective_vectors_num", "[", "id", "]", ".", "item", "(", ")", "<", "100", ":", "\n", "            ", "name", "=", "'mean'", "\n", "", "if", "name", "==", "'moving_average'", ":", "\n", "            ", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "*", "(", "1", "-", "self", ".", "opt", ".", "proto_momentum", ")", "+", "self", ".", "opt", ".", "proto_momentum", "*", "vector", ".", "squeeze", "(", ")", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "+=", "1", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "=", "min", "(", "self", ".", "objective_vectors_num", "[", "id", "]", ",", "3000", ")", "\n", "", "elif", "name", "==", "'mean'", ":", "\n", "            ", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "*", "self", ".", "objective_vectors_num", "[", "id", "]", "+", "vector", ".", "squeeze", "(", ")", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "+=", "1", "\n", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "/", "self", ".", "objective_vectors_num", "[", "id", "]", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "=", "min", "(", "self", ".", "objective_vectors_num", "[", "id", "]", ",", "3000", ")", "\n", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'no such updating way of objective vectors {}'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.ConstantLR.__init__": [[17, 19], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.ConstantLR.get_lr": [[20, 22], ["None"], "methods", ["None"], ["logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.PolynomialLR.__init__": [[25, 31], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.PolynomialLR.get_lr": [[32, 39], ["max", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.WarmUpLR.__init__": [[41, 48], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.WarmUpLR.get_lr": [[49, 65], ["utils.WarmUpLR.scheduler.get_lr", "float", "KeyError"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.WarmUpLR.get_lr"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.get_scheduler": [[9, 14], ["utils.PolynomialLR"], "function", ["None"], ["import", "torch", "\n", "\n", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.cross_entropy2d": [[66, 86], ["F.interpolate.size", "target.size", "torch.interpolate", "NotImplementedError", "torch.nll_loss", "torch.cross_entropy"], "function", ["None"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.models.utils.freeze_bn": [[87, 93], ["isinstance", "isinstance", "m.eval", "m.__class__.__name__.find"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.models.adaptation_modelv2.CustomModel.eval"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[59, 63], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 45], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.patch_replication_callback": [[65, 89], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.__init__": [[66, 75], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.__getstate__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.__setstate__": [[79, 81], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.register_slave": [[82, 96], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n        Args:\n            identifier: an identifier, usually is the device id.\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.run_master": [[97, 126], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n        Returns: the message to be sent back to the master device.\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.nr_slaves": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[24, 29], ["unittest.TorchTestCase.assertTrue", "unittest.as_numpy", "unittest.as_numpy", "numpy.allclose", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.fmax"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.unittest.as_numpy", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.unittest.as_numpy"], ["    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[173, 178], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[225, 230], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[278, 283], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.RandAugmentPC.__init__": [[212, 218], ["randaugment.my_augment_pool"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.my_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "my_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.RandAugmentPC.__call__": [[219, 227], ["random.choices", "randaugment.CutoutAbs", "numpy.random.uniform", "op", "random.random"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "prob", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "0.8", ")", "\n", "if", "random", ".", "random", "(", ")", "+", "prob", ">=", "1", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "self", ".", "m", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "16", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.RandAugmentMC.__init__": [[230, 236], ["randaugment.fixmatch_augment_pool"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.fixmatch_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "fixmatch_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.RandAugmentMC.__call__": [[237, 257], ["random.random", "img.transpose.transpose.transpose", "random.choices", "randaugment.CutoutAbs", "numpy.random.randint", "random.random", "op", "min"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ",", "type", "=", "'crc'", ")", ":", "\n", "        ", "aug_type", "=", "{", "'Hflip'", ":", "False", ",", "'ShearX'", ":", "1e4", ",", "'ShearY'", ":", "1e4", ",", "'TranslateX'", ":", "1e4", ",", "'TranslateY'", ":", "1e4", ",", "'Rotate'", ":", "1e4", ",", "'CutoutAbs'", ":", "1e4", "}", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "#aug_type.append(['Hflip', True])", "\n", "aug_type", "[", "'Hflip'", "]", "=", "True", "\n", "", "if", "type", "==", "'cr'", "or", "type", "==", "'crc'", ":", "\n", "            ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "                ", "v", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "m", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "img", ",", "params", "=", "op", "(", "img", ",", "v", "=", "v", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "if", "op", ".", "__name__", "in", "[", "'ShearX'", ",", "'ShearY'", ",", "'TranslateX'", ",", "'TranslateY'", ",", "'Rotate'", "]", ":", "\n", "#aug_type.append([op.__name__, params])", "\n", "                        ", "aug_type", "[", "op", ".", "__name__", "]", "=", "params", "\n", "", "", "", "", "if", "type", "==", "'cc'", "or", "type", "==", "'crc'", ":", "\n", "            ", "img", ",", "params", "=", "CutoutAbs", "(", "img", ",", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "//", "3", ")", "\n", "#aug_type.append([CutoutAbs.__name__, params])", "\n", "aug_type", "[", "'CutoutAbs'", "]", "=", "params", "\n", "", "return", "img", ",", "aug_type", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.AutoContrast": [[18, 20], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Brightness": [[22, 25], ["randaugment._float_parameter", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Brightness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Brightness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Brightness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Color": [[27, 30], ["randaugment._float_parameter", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Color", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Color", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Color", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Contrast": [[32, 35], ["randaugment._float_parameter", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Contrast", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Contrast", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Contrast", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Cutout": [[37, 43], ["int", "randaugment.CutoutAbs", "randaugment._float_parameter", "min"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.CutoutAbs", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter"], ["", "def", "Cutout", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "v", "=", "int", "(", "v", "*", "min", "(", "img", ".", "size", ")", ")", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.CutoutAbs": [[45, 59], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "int", "int", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ",", "**", "kwarg", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "h", ")", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "int", "(", "min", "(", "w", ",", "x0", "+", "v", ")", ")", "\n", "y1", "=", "int", "(", "min", "(", "h", ",", "y0", "+", "v", ")", ")", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "# gray", "\n", "color", "=", "(", "127", ",", "127", ",", "127", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", ",", "xy", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Equalize": [[61, 63], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Identity": [[65, 67], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "img", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Invert": [[69, 71], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Posterize": [[73, 76], ["randaugment._int_parameter", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._int_parameter"], ["", "def", "Posterize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Rotate": [[105, 110], ["randaugment._int_parameter", "random.random", "img.rotate"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._int_parameter"], ["", "def", "Rotate", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Sharpness": [[111, 114], ["randaugment._float_parameter", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.ShearX": [[116, 121], ["randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "ShearX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.ShearY": [[123, 128], ["randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.Solarize": [[130, 133], ["randaugment._int_parameter", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._int_parameter"], ["", "def", "Solarize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "256", "-", "v", ")", ",", "256", "-", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.SolarizeAdd": [[135, 145], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "randaugment._int_parameter", "random.random", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._int_parameter"], ["", "def", "SolarizeAdd", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "v", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", ",", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.TranslateX": [[147, 153], ["int", "randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.TranslateY": [[155, 161], ["int", "randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._float_parameter": [[163, 165], ["float"], "function", ["None"], ["", "def", "_float_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "float", "(", "v", ")", "*", "max_v", "/", "PARAMETER_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment._int_parameter": [[167, 169], ["int"], "function", ["None"], ["", "def", "_int_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "int", "(", "v", "*", "max_v", "/", "PARAMETER_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.fixmatch_augment_pool": [[171, 188], ["None"], "function", ["None"], ["", "def", "fixmatch_augment_pool", "(", ")", ":", "\n", "# FixMatch paper", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.3", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.my_augment_pool": [[190, 209], ["None"], "function", ["None"], ["", "def", "my_augment_pool", "(", ")", ":", "\n", "# Test", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Color", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Contrast", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Cutout", ",", "0.2", ",", "0", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Invert", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "SolarizeAdd", ",", "110", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.45", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.45", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.randaugment.affine_sample": [[258, 284], ["torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.affine_grid().to", "torch.grid_sample", "numpy.array().astype", "numpy.array().astype", "torch.Tensor", "torch.Tensor", "torch.affine_grid", "numpy.array", "numpy.array().astype", "tensor.size", "numpy.array", "numpy.array().astype", "numpy.array", "numpy.array().astype", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.array", "numpy.sin", "numpy.array"], "function", ["None"], ["", "", "def", "affine_sample", "(", "tensor", ",", "v", ",", "type", ")", ":", "\n", "# tensor: B*C*H*W", "\n", "# v: scalar, translation param", "\n", "    ", "if", "type", "==", "'Rotate'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "-", "np", ".", "sin", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "cos", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'ShearX'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "v", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'ShearY'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "v", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'TranslateX'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "v", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'TranslateY'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "v", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "H", "=", "tensor", ".", "shape", "[", "2", "]", "\n", "W", "=", "tensor", ".", "shape", "[", "3", "]", "\n", "theta", "[", "0", ",", "1", "]", "=", "theta", "[", "0", ",", "1", "]", "*", "H", "/", "W", "\n", "theta", "[", "1", ",", "0", "]", "=", "theta", "[", "1", ",", "0", "]", "*", "W", "/", "H", "\n", "if", "type", "!=", "'Rotate'", ":", "\n", "        ", "theta", "[", "0", ",", "2", "]", "=", "theta", "[", "0", ",", "2", "]", "*", "2", "/", "H", "+", "theta", "[", "0", ",", "0", "]", "+", "theta", "[", "0", ",", "1", "]", "-", "1", "\n", "theta", "[", "1", ",", "2", "]", "=", "theta", "[", "1", ",", "2", "]", "*", "2", "/", "H", "+", "theta", "[", "1", ",", "0", "]", "+", "theta", "[", "1", ",", "1", "]", "-", "1", "\n", "\n", "", "theta", "=", "torch", ".", "Tensor", "(", "theta", ")", ".", "unsqueeze", "(", "0", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "tensor", ".", "size", "(", ")", ")", ".", "to", "(", "tensor", ".", "device", ")", "\n", "tensor_t", "=", "F", ".", "grid_sample", "(", "tensor", ",", "grid", ",", "mode", "=", "'nearest'", ")", "\n", "return", "tensor_t", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.BaseDataset.__init__": [[24, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class; save the options in the class\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.BaseDataset.modify_commandline_options": [[32, 44], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.BaseDataset.__len__": [[45, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.BaseDataset.__getitem__": [[50, 61], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It ususally contains the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.get_transform": [[63, 103], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Grayscale", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.RandomCrop", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ",", "grayscale", "=", "False", ",", "convert", "=", "True", ",", "crop", "=", "True", ",", "flip", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create a torchvision transformation function\n\n    The type of transformation is defined by option (e.g., [opt.preprocess], [opt.load_size], [opt.crop_size])\n    and can be overwritten by arguments such as [convert], [crop], and [flip]\n\n    Parameters:\n        opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        grayscale (bool)   -- if convert input RGB image to a grayscale image\n        convert (bool)     -- if convert an image to a tensor array betwen [-1, 1]\n        crop    (bool)     -- if apply cropping\n        flip    (bool)     -- if apply horizontal flippling\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "if", "grayscale", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Grayscale", "(", "1", ")", ")", "\n", "", "if", "opt", ".", "preprocess", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'crop'", "and", "crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ")", ")", ")", "\n", "if", "crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "", "elif", "opt", ".", "preprocess", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--preprocess %s is not a valid option.'", "%", "opt", ".", "preprocess", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_flip", "and", "flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "if", "convert", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__adjust": [[105, 130], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "\"\"\"Modify the width and height to be multiple of 4.\n\n    Parameters:\n        img (PIL image) -- input image\n\n    Returns a modified image whose width and height are mulitple of 4.\n\n    the size needs to be a multiple of 4,\n    because going through generator network may change img size\n    and eventually cause size mismatch error\n    \"\"\"", "\n", "ow", ",", "oh", "=", "img", ".", "size", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__scale_width": [[132, 160], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "\"\"\"Resize images so that the width of the output image is the same as a target width\n\n    Parameters:\n        img (PIL image)    -- input image\n        target_width (int) -- target image width\n\n    Returns a modified image whose width matches the target image width;\n\n    the size needs to be a multiple of 4,\n    because going through generator network may change img size\n    and eventually cause size mismatch error\n    \"\"\"", "\n", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.base_dataset.__print_size_warning": [[162, 170], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "\"\"\"Print warning information about image size(only print once)\"\"\"", "\n", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.__init__": [[21, 69], ["data.randaugment.RandAugmentMC", "os.path.join", "os.path.join", "numpy.zeros", "os.listdir", "range", "dict", "imageio.plugins.freeimage.download", "print", "len", "synthia_dataset.Synthia_loader.ids.append", "zip", "len", "Exception", "os.path.join", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "src_rootpath", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "opt", ".", "n_class", "\n", "self", ".", "img_size", "=", "(", "1280", ",", "760", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "#TODO:  calculating the mean value of rgb channels on GTA5", "\n", "self", ".", "image_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'RGB'", ")", "\n", "self", ".", "label_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'GT/LABELS'", ")", "\n", "self", ".", "distribute", "=", "np", ".", "zeros", "(", "self", ".", "n_classes", ",", "dtype", "=", "float", ")", "\n", "ids", "=", "os", ".", "listdir", "(", "self", ".", "image_base_path", ")", "\n", "self", ".", "ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "ids", "[", "i", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "n_classes", "==", "19", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "21", ",", "5", ",", "7", ",", "15", ",", "9", ",", "6", ",", "16", ",", "1", ",", "10", ",", "17", ",", "8", ",", "18", ",", "19", ",", "20", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Wall\"", ",", "\n", "\"Fence\"", ",", "\"Pole\"", ",", "\"Traffic_light\"", ",", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\n", "\"Terrain\"", ",", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\"Car\"", ",", "\n", "\"Truck\"", ",", "\"Bus\"", ",", "\"Train\"", ",", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "", "elif", "self", ".", "n_classes", "==", "16", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "21", ",", "5", ",", "7", ",", "15", ",", "9", ",", "6", ",", "1", ",", "10", ",", "17", ",", "8", ",", "19", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Wall\"", ",", "\n", "\"Fence\"", ",", "\"Pole\"", ",", "\"Traffic_light\"", ",", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\n", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\"Car\"", ",", "\"Bus\"", ",", "\n", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "", "elif", "self", ".", "n_classes", "==", "13", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "15", ",", "9", ",", "6", ",", "1", ",", "10", ",", "17", ",", "8", ",", "19", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Traffic_light\"", ",", "\n", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\n", "\"Car\"", ",", "\"Bus\"", ",", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "\n", "", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "self", ".", "n_classes", ")", ")", ")", "\n", "imageio", ".", "plugins", ".", "freeimage", ".", "download", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "ids", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files found in %s\"", "%", "(", "self", ".", "image_base_path", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found {} images\"", ".", "format", "(", "len", "(", "self", ".", "ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.__getitem__": [[73, 109], ["os.path.join", "PIL.Image.open", "PIL.Image.fromarray", "numpy.asarray.resize", "synthia_dataset.Synthia_loader.resize", "numpy.asarray", "numpy.asarray", "synthia_dataset.Synthia_loader.encode_segmap", "synthia_dataset.Synthia_loader.transform", "numpy.asarray", "numpy.array", "synthia_dataset.Synthia_loader.augmentations", "synthia_dataset.Synthia_loader.randaug", "synthia_dataset.Synthia_loader.transform", "id.split", "imageio.imread", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        \n        param: index\n        \"\"\"", "\n", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "id", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "lbl_path", "=", "id", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "lbl_path", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# lbl = lbl.convert('L')", "\n", "lbl", "=", "np", ".", "asarray", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "_", ",", "_", ",", "_", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'label'", "]", "=", "lbl", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "ids", "[", "index", "]", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.encode_segmap": [[111, 116], ["list", "numpy.ones", "synthia_dataset.Synthia_loader.class_map.items"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "lbl", ")", ":", "\n", "        ", "label_copy", "=", "250", "*", "np", ".", "ones", "(", "lbl", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "self", ".", "class_map", ".", "items", "(", ")", ")", ":", "\n", "            ", "label_copy", "[", "lbl", "==", "k", "]", "=", "v", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.transform": [[132, 164], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "numpy.all", "print", "ValueError", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n\n        img, lbl\n        \"\"\"", "\n", "# img = m.imresize(", "\n", "#     img, self.img_size,", "\n", "# )", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1] # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, self.img_size, \"nearest\", mode='F')", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.synthia_dataset.Synthia_loader.get_cls_num_list": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.__init__": [[51, 92], ["torch.utils.data.randaugment.RandAugmentMC", "os.path.join", "os.path.join", "scipy.loadmat", "scipy.loadmat", "range", "dict", "print", "os.path.join", "numpy.concatenate", "len", "gta5_dataset.GTA5_loader.ids.append", "zip", "len", "Exception", "os.path.join", "range", "len", "str().zfill", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "src_rootpath", "\n", "self", ".", "split", "=", "'all'", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "1914", ",", "1052", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "#TODO:  calculating the mean value of rgb channels on GTA5", "\n", "self", ".", "image_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "self", ".", "label_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'labels'", ")", "\n", "splits", "=", "io", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'split.mat'", ")", ")", "\n", "if", "self", ".", "split", "==", "'all'", ":", "\n", "            ", "ids", "=", "np", ".", "concatenate", "(", "(", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'valIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "ids", "=", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "ids", "=", "splits", "[", "'valIds'", "]", "[", ":", "200", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "ids", "=", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", "\n", "", "self", ".", "ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", ")", "\n", "\n", "\n", "", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "34", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\"bicycle\"", ",", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "ids", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for style=[%s] found in %s\"", "%", "(", "self", ".", "split", ",", "self", ".", "image_base_path", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found {} {} images\"", ".", "format", "(", "len", "(", "self", ".", "ids", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.__getitem__": [[96, 134], ["PIL.Image.open", "PIL.Image.open", "numpy.asarray.resize", "gta5_dataset.GTA5_loader.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5_loader.encode_segmap", "gta5_dataset.GTA5_loader.transform", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "gta5_dataset.GTA5_loader.augmentations", "gta5_dataset.GTA5_loader.randaug", "gta5_dataset.GTA5_loader.transform", "PIL.Image.fromarray", "id.split"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        \n        param: index\n        \"\"\"", "\n", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "if", "self", ".", "split", "!=", "'all'", "and", "self", ".", "split", "!=", "'val'", ":", "\n", "            ", "filename", "=", "'{:05d}.png'", ".", "format", "(", "id", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "filename", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "filename", ")", "\n", "", "else", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "id", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "lbl_path", "=", "id", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "Image", ".", "open", "(", "lbl_path", ")", "\n", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "np", ".", "asarray", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "_", ",", "_", ",", "_", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'label'", "]", "=", "lbl", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "ids", "[", "index", "]", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.encode_segmap": [[136, 142], ["None"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "lbl", ")", ":", "\n", "        ", "for", "_i", "in", "self", ".", "void_classes", ":", "\n", "            ", "lbl", "[", "lbl", "==", "_i", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_i", "in", "self", ".", "valid_classes", ":", "\n", "            ", "lbl", "[", "lbl", "==", "_i", "]", "=", "self", ".", "class_map", "[", "_i", "]", "\n", "", "return", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.decode_segmap": [[143, 157], ["temp.copy", "temp.copy", "temp.copy", "range", "numpy.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.transform": [[158, 187], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "numpy.all", "print", "ValueError", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n\n        img, lbl\n        \"\"\"", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1] # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, self.img_size, \"nearest\", mode='F')", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.gta5_dataset.GTA5_loader.get_cls_num_list": [[188, 202], ["numpy.array"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "np", ".", "array", "(", "[", "16139327127", ",", "4158369631", ",", "8495419275", ",", "927064742", ",", "318109335", ",", "\n", "532432540", ",", "67453231", ",", "40526481", ",", "3818867486", ",", "1081467674", ",", "\n", "6800402117", ",", "182228033", ",", "15360044", ",", "1265024472", ",", "567736474", ",", "\n", "184854135", ",", "32542442", ",", "15832619", ",", "2721193", "]", ")", "\n", "# cls_num_list = np.zeros(self.n_classes, dtype=np.int64)", "\n", "# for n in range(len(self.ids)):", "\n", "#     lbl = Image.open(self.ids[n])", "\n", "#     lbl = lbl.resize(self.img_size, Image.NEAREST)", "\n", "#     lbl = np.asarray(lbl, dtype=np.uint8)", "\n", "#     lbl = self.encode_segmap(np.array(lbl, dtype=np.uint8))", "\n", "#     for i in range(self.n_classes):", "\n", "#         cls_num_list[i] += (lbl == i).sum()", "\n", "return", "cls_num_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.Compose.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "PIL2Numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.Compose.__call__": [[21, 47], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "print", "a", "PIL.Image.fromarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "torch.interpolate", "torch.interpolate", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ")", ":", "\n", "        ", "params", "=", "{", "}", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "Image", ".", "fromarray", "(", "mask1", ",", "mode", "=", "\"L\"", ")", "\n", "", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "lpsoft", "=", "torch", ".", "from_numpy", "(", "lpsoft", ")", "\n", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "", "self", ".", "PIL2Numpy", "=", "True", "\n", "\n", "", "if", "img", ".", "size", "!=", "mask", ".", "size", ":", "\n", "            ", "print", "(", "img", ".", "size", ",", "mask", ".", "size", ")", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "=", "a", "(", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", ")", "\n", "# print(img.size)", "\n", "\n", "", "if", "self", ".", "PIL2Numpy", ":", "\n", "            ", "img", ",", "mask", "=", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "np", ".", "array", "(", "mask1", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomCrop.__init__": [[50, 56], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomCrop.__call__": [[57, 109], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "torch.interpolate", "torch.interpolate", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "lpsoft.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "ImageOps", ".", "expand", "(", "mask1", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "tw", ",", "th", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "th", ",", "tw", "]", ",", "mode", "=", "'bolinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "mask1", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "lpsoft", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "None", ",", "\n", "lpsoft", "\n", ")", "\n", "\n", "", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "params", "[", "'RandomCrop'", "]", "=", "(", "y1", ",", "y1", "+", "th", ",", "x1", ",", "x1", "+", "tw", ")", "\n", "if", "lpsoft", "is", "not", "None", ":", "\n", "            ", "lpsoft", "=", "lpsoft", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask1", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "None", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustGamma.__init__": [[113, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustGamma.__call__": [[116, 119], ["torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "1", "+", "self", ".", "gamma", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustSaturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "        ", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustSaturation.__call__": [[125, 130], ["torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_saturation", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "\n", "1", "+", "self", ".", "saturation", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustHue.__init__": [[133, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "        ", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustHue.__call__": [[136, 140], ["torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "\n", "self", ".", "hue", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustBrightness.__init__": [[143, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "        ", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustBrightness.__call__": [[146, 151], ["torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_brightness", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "\n", "1", "+", "self", ".", "bf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustContrast.__init__": [[153, 155], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.AdjustContrast.__call__": [[156, 161], ["torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_contrast", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "\n", "1", "+", "self", ".", "cf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.CenterCrop.__init__": [[163, 168], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.CenterCrop.__call__": [[169, 178], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomHorizontallyFlip.__init__": [[182, 184], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomHorizontallyFlip.__call__": [[185, 210], ["random.random", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "lpsoft.index_select.index_select.index_select", "img.transpose", "mask.transpose", "mask1.transpose", "img.transpose", "mask.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "lpsoft.index_select.index_select.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "params", "[", "'RandomHorizontallyFlip'", "]", "=", "True", "\n", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "inv_idx", "=", "torch", ".", "arange", "(", "lpsoft", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "# C x H x W", "\n", "lpsoft", "=", "lpsoft", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "None", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "params", "[", "'RandomHorizontallyFlip'", "]", "=", "False", "\n", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomVerticallyFlip.__init__": [[213, 215], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomVerticallyFlip.__call__": [[216, 223], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.FreeScale.__init__": [[226, 228], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.FreeScale.__call__": [[229, 234], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomTranslate.__init__": [[238, 240], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "offset", ")", ":", "\n", "        ", "self", ".", "offset", "=", "offset", "# tuple (delta_x, delta_y)", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomTranslate.__call__": [[241, 281], ["int", "int", "torchvision.crop", "torchvision.pad", "torchvision.affine", "abs", "abs", "abs", "random.random", "random.random", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "x_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "0", "]", ")", "\n", "y_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "1", "]", ")", "\n", "\n", "x_crop_offset", "=", "x_offset", "\n", "y_crop_offset", "=", "y_offset", "\n", "if", "x_offset", "<", "0", ":", "\n", "            ", "x_crop_offset", "=", "0", "\n", "", "if", "y_offset", "<", "0", ":", "\n", "            ", "y_crop_offset", "=", "0", "\n", "\n", "", "cropped_img", "=", "tf", ".", "crop", "(", "img", ",", "\n", "y_crop_offset", ",", "\n", "x_crop_offset", ",", "\n", "img", ".", "size", "[", "1", "]", "-", "abs", "(", "y_offset", ")", ",", "\n", "img", ".", "size", "[", "0", "]", "-", "abs", "(", "x_offset", ")", ")", "\n", "\n", "if", "x_offset", ">=", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "0", ",", "x_offset", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", ">=", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "abs", "(", "y_offset", ")", ",", "x_offset", ",", "0", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "0", ",", "0", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "abs", "(", "y_offset", ")", ",", "0", ",", "0", ")", "\n", "\n", "", "return", "(", "\n", "tf", ".", "pad", "(", "cropped_img", ",", "\n", "padding_tuple", ",", "\n", "padding_mode", "=", "'reflect'", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "-", "x_offset", ",", "-", "y_offset", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "0.0", ",", "\n", "shear", "=", "0.0", ",", "\n", "fillcolor", "=", "250", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomRotate.__init__": [[284, 286], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomRotate.__call__": [[287, 304], ["torchvision.affine", "torchvision.affine", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "tf", ".", "affine", "(", "img", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ",", "\n", "fillcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "shear", "=", "0.0", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "250", ",", "\n", "shear", "=", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.Scale.__init__": [[308, 310], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.Scale.__call__": [[311, 329], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomSizedCrop.__init__": [[386, 388], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomSizedCrop.__call__": [[389, 419], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomSized.__init__": [[422, 426], ["augmentations.Scale", "augmentations.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.RandomSized.__call__": [[427, 449], ["int", "int", "img.resize", "mask.resize", "mask1.resize.resize.resize", "random.uniform", "torch.interpolate", "torch.interpolate", "lpsoft.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "\n", "", "prop", "=", "1.0", "*", "img", ".", "size", "[", "0", "]", "/", "img", ".", "size", "[", "1", "]", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "*", "self", ".", "size", ")", "\n", "#w = self.size", "\n", "h", "=", "int", "(", "w", "/", "prop", ")", "\n", "params", "[", "'RandomSized'", "]", "=", "(", "h", ",", "w", ")", "\n", "# h = int(random.uniform(0.5, 2) * self.size[1])", "\n", "\n", "img", ",", "mask", "=", "(", "\n", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "mask1", "=", "mask1", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "if", "lpsoft", "is", "not", "None", ":", "\n", "            ", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "# return self.crop(*self.scale(img, mask))", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.MyScale": [[331, 349], ["isinstance", "Image.fromarray.resize", "Image.fromarray.resize", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "", "def", "MyScale", "(", "img", ",", "lbl", ",", "size", ")", ":", "\n", "    ", "\"\"\"scale\n\n    img, lbl, longer size\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "assert", "_img", ".", "size", "==", "_lbl", ".", "size", "\n", "# prop = 1.0 * _img.size[0]/_img.size[1]", "\n", "w", ",", "h", "=", "size", "\n", "# h = int(size / prop)", "\n", "_img", "=", "_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "_lbl", "=", "_lbl", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.Flip": [[350, 364], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "random.random", "numpy.array", "numpy.array", "Image.fromarray.transpose", "Image.fromarray.transpose"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "lbl", ",", "prop", ")", ":", "\n", "    ", "\"\"\"\n    flip img and lbl with probablity prop\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "if", "random", ".", "random", "(", ")", "<", "prop", ":", "\n", "        ", "_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "_lbl", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.augmentations.MyRotate": [[365, 384], ["isinstance", "Image.fromarray.rotate", "Image.fromarray.rotate", "PIL.Image.fromarray", "PIL.Image.fromarray", "random.random", "random.random", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "MyRotate", "(", "img", ",", "lbl", ",", "degree", ")", ":", "\n", "    ", "\"\"\"\n    img, lbl, degree\n    randomly rotate clockwise or anti-clockwise\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "_degree", "=", "random", ".", "random", "(", ")", "*", "degree", "\n", "\n", "flags", "=", "-", "1", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "flags", "=", "1", "\n", "", "_img", "=", "_img", ".", "rotate", "(", "_degree", "*", "flags", ")", "\n", "_lbl", "=", "_lbl", ".", "rotate", "(", "_degree", "*", "flags", ")", "\n", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.CustomDatasetDataLoader.__init__": [[61, 117], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "data.DataProvider.DataProvider", "torch.utils.data.DataLoader", "__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "torch.utils.data.DataLoader", "__init__.get_composed_augmentations", "__init__.get_composed_augmentations", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.get_composed_augmentations", "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.get_composed_augmentations"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.CustomDatasetDataLoader.load_data": [[119, 121], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.find_dataset_using_name": [[12, 33], ["importlib.import_module", "importlib.import_module.__dict__.items", "NotImplementedError", "issubclass", "_name.lower", "target_dataset_name.lower"], "function", ["None"], ["from", ".", "replicate", "import", "DataParallelWithCallback", ",", "patch_replication_callback", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.get_option_setter": [[35, 39], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.create_dataset": [[41, 54], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.load_data"], "function", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.CustomDatasetDataLoader.load_data"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.data.__init__.get_composed_augmentations": [[55, 59], ["Compose", "RandomSized", "RandomCrop", "RandomHorizontallyFlip"], "function", ["None"], []], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.__init__": [[72, 133], ["torch.utils.data.randaugment.RandAugmentMC", "numpy.array", "os.path.join", "os.path.join", "sorted", "dict", "print", "cityscapes_dataset.recursive_glob", "dict", "zip", "Exception", "zip", "dict", "range", "range", "range", "zip", "dict", "len", "range", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.recursive_glob"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "\"\"\"__init__\n\n        :param opt: parameters of dataset\n        :param writer: save the result of experiment\n        :param logger: logging file\n        :param augmentations: \n        \"\"\"", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "tgt_rootpath", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "opt", ".", "n_class", "\n", "self", ".", "img_size", "=", "(", "2048", ",", "1024", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "mean_rgb", "[", "'cityscapes'", "]", ")", "\n", "self", ".", "files", "=", "{", "}", "\n", "self", ".", "paired_files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ")", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtFine\"", ",", "self", ".", "split", "\n", ")", "\n", "\n", "self", ".", "files", "=", "sorted", "(", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "\".png\"", ")", ")", "#find all files from rootdir and subfolders with suffix = \".png\"", "\n", "\n", "#self.void_classes = [0, 1, 2, 3, 4, 5, 6, 9, 10, 14, 15, 16, 18, 29, 30, -1]", "\n", "if", "self", ".", "n_classes", "==", "19", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\n", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\n", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "19", ")", ",", "range", "(", "19", ")", ")", ")", "\n", "", "elif", "self", ".", "n_classes", "==", "16", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "25", ",", "26", ",", "28", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\n", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\"bus\"", ",", "\n", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "16", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", ")", ")", "\n", "", "elif", "self", ".", "n_classes", "==", "13", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "25", ",", "26", ",", "28", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\n", "\"car\"", ",", "\"bus\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "13", ")", ",", "[", "0", ",", "1", ",", "2", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", ")", ")", "\n", "\n", "", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "self", ".", "n_classes", ")", ")", ")", "#zip: return tuples", "\n", "\n", "if", "not", "self", ".", "files", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for split=[%s] found in %s\"", "%", "(", "self", ".", "split", ",", "self", ".", "images_base", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.__len__": [[134, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"__len__\"\"\"", "\n", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.__getitem__": [[138, 197], ["cityscapes_dataset.Cityscapes_loader.files[].rstrip", "os.path.join", "PIL.Image.open", "PIL.Image.open", "numpy.array.resize", "cityscapes_dataset.Cityscapes_loader.resize", "numpy.array", "numpy.array", "cityscapes_dataset.Cityscapes_loader.encode_segmap", "numpy.array.copy().astype", "img_full.transpose.transpose.transpose", "cityscapes_dataset.Cityscapes_loader.transform", "torch.from_numpy().float", "numpy.array", "img_full.transpose.transpose.astype", "cityscapes_dataset.Cityscapes_loader.augmentations", "cityscapes_dataset.Cityscapes_loader.randaug", "cityscapes_dataset.Cityscapes_loader.transform", "cityscapes_dataset.Cityscapes_loader.split", "numpy.array.copy", "numpy.load", "os.path.join", "PIL.Image.open", "numpy.array.resize", "numpy.array", "PIL.Image.fromarray", "torch.from_numpy", "input_dict.items", "os.path.basename", "os.path.join", "os.path.basename", "numpy.load", "os.path.basename().replace", "os.path.join", "os.path.basename().replace", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n\n        :param index:\n        \"\"\"", "\n", "img_path", "=", "self", ".", "files", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "annotations_base", ",", "\n", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "\n", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "15", "]", "+", "\"gtFine_labelIds.png\"", ",", "\n", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "Image", ".", "open", "(", "lbl_path", ")", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "img_full", "=", "img", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img_full", "-=", "self", ".", "mean", "\n", "img_full", "=", "img_full", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img_full", "=", "img_full", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "lp", ",", "lpsoft", ",", "weak_params", "=", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "split", "==", "'train'", "and", "self", ".", "opt", ".", "used_save_pseudo", ":", "\n", "            ", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "                ", "lpsoft", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_soft", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ".", "replace", "(", "'.png'", ",", "'.npy'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "lp_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_LP", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "lp", "=", "Image", ".", "open", "(", "lp_path", ")", "\n", "lp", "=", "lp", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "lp", "=", "np", ".", "array", "(", "lp", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "opt", ".", "threshold", ":", "\n", "                    ", "conf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_LP", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ".", "replace", "(", "'.png'", ",", "'_conf.npy'", ")", ")", ")", "\n", "lp", "[", "conf", "<=", "self", ".", "opt", ".", "threshold", "]", "=", "250", "\n", "\n", "", "", "", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "lp", ",", "lpsoft", ",", "weak_params", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ",", "lp", ",", "lpsoft", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl_", ",", "lp", "=", "self", ".", "transform", "(", "img", ",", "lbl", ",", "lp", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'img_full'", "]", "=", "torch", ".", "from_numpy", "(", "img_full", ")", ".", "float", "(", ")", "\n", "input_dict", "[", "'label'", "]", "=", "lbl_", "\n", "input_dict", "[", "'lp'", "]", "=", "lp", "\n", "input_dict", "[", "'lpsoft'", "]", "=", "lpsoft", "\n", "input_dict", "[", "'weak_params'", "]", "=", "weak_params", "#full2weak", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "input_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "input_dict", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.transform": [[198, 240], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "print", "ValueError", "numpy.unique", "numpy.array", "torch.from_numpy().long", "numpy.all", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "torch.from_numpy", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ",", "lp", "=", "None", ",", "check", "=", "True", ")", ":", "\n", "        ", "\"\"\"transform\n\n        :param img:\n        :param lbl:\n        \"\"\"", "\n", "# img = m.imresize(", "\n", "#     img, (self.img_size[0], self.img_size[1])", "\n", "# )  # uint8 with RGB mode", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1]  # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, (self.img_size[0], self.img_size[1]), \"nearest\", mode=\"F\")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "check", "and", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "#todo: understanding the meaning ", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "if", "lp", "is", "not", "None", ":", "\n", "            ", "classes", "=", "np", ".", "unique", "(", "lp", ")", "\n", "lp", "=", "np", ".", "array", "(", "lp", ")", "\n", "# if not np.all(np.unique(lp[lp != self.ignore_index]) < self.n_classes):", "\n", "#     raise ValueError(\"lp Segmentation map contained invalid class values\")", "\n", "\n", "lp", "=", "torch", ".", "from_numpy", "(", "lp", ")", ".", "long", "(", ")", "\n", "\n", "", "return", "img", ",", "lbl", ",", "lp", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.decode_segmap": [[241, 255], ["temp.copy", "temp.copy", "temp.copy", "range", "numpy.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.encode_segmap": [[256, 262], ["list", "numpy.ones", "cityscapes_dataset.Cityscapes_loader.class_map.items"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "label_copy", "=", "250", "*", "np", ".", "ones", "(", "mask", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "self", ".", "class_map", ".", "items", "(", ")", ")", ":", "\n", "            ", "label_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.Cityscapes_loader.get_cls_num_list": [[263, 269], ["numpy.array"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "np", ".", "array", "(", "[", "1557726944", ",", "254364912", ",", "673500400", ",", "18431664", ",", "14431392", ",", "\n", "29361440", ",", "7038112", ",", "7352368", ",", "477239920", ",", "40134240", ",", "\n", "211669120", ",", "36057968", ",", "865184", ",", "264786464", ",", "17128544", ",", "\n", "2385680", ",", "943312", ",", "504112", ",", "2174560", "]", ")", "\n", "return", "cls_num_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.cityscapes_dataset.recursive_glob": [[19, 29], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "\".\"", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir \n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "\n", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "#os.walk: traversal all files in rootdir and its subfolders", "\n", "for", "filename", "in", "filenames", "\n", "if", "filename", ".", "endswith", "(", "suffix", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__init__": [[11, 19], ["DataProvider.DataProvider.build"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.build"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "**", "kw", ")", ":", "\n", "        ", "self", ".", "args", "=", "kw", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "DataLoader", "=", "None", "#data.DataLoader(self.dataset, **self.args)", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "build", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.build": [[20, 23], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "enumerate"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "DataLoader", "=", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "**", "self", ".", "args", ")", "\n", "self", ".", "DataLoader", "=", "enumerate", "(", "self", ".", "DataLoader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__next__": [[24, 41], ["DataProvider.DataProvider.build", "DataProvider.DataProvider.DataLoader.__next__", "DataProvider.DataProvider.build", "DataProvider.DataProvider.DataLoader.__next__"], "methods", ["home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.build", "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.build", "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__next__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "DataLoader", "==", "None", ":", "\n", "            ", "self", ".", "build", "(", ")", "\n", "\n", "", "try", ":", "\n", "            ", "_", ",", "batch", "=", "self", ".", "DataLoader", ".", "__next__", "(", ")", "\n", "# img, label = batch", "\n", "self", ".", "iteration", "+=", "1", "\n", "return", "batch", "\n", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "build", "(", ")", "\n", "_", ",", "batch", "=", "self", ".", "DataLoader", ".", "__next__", "(", ")", "\n", "# img, label = batch", "\n", "return", "batch", "\n", "", "", "next", "=", "__next__", "\n"]], "home.repos.pwc.inspect_result.microsoft_ProDA.data.DataProvider.DataProvider.__iter__": [[43, 45], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "", "", "", ""]]}