{"home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.BasicBlock.__init__": [[21, 28], ["torch.Module.__init__", "extractors.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractors.conv3x3"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.conv3x3", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.BasicBlock.forward": [[29, 44], ["extractors.BasicBlock.conv1", "extractors.BasicBlock.relu", "extractors.BasicBlock.conv2", "extractors.BasicBlock.relu", "extractors.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.Bottleneck.__init__": [[48, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.Bottleneck.forward": [[58, 76], ["extractors.Bottleneck.conv1", "extractors.Bottleneck.relu", "extractors.Bottleneck.conv2", "extractors.Bottleneck.relu", "extractors.Bottleneck.conv3", "extractors.Bottleneck.relu", "extractors.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet.__init__": [[79, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", "=", "(", "3", ",", "4", ",", "23", ",", "3", ")", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet._make_layer": [[99, 113], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.ResNet.forward": [[114, 125], ["extractors.ResNet.conv1", "extractors.ResNet.relu", "extractors.ResNet.maxpool", "extractors.ResNet.layer1", "extractors.ResNet.layer2", "extractors.ResNet.layer3", "extractors.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x_3", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x_3", ")", "\n", "\n", "return", "x", ",", "x_3", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.load_weights_sequential": [[8, 13], ["collections.OrderedDict", "zip", "target.load_state_dict", "target.state_dict().items", "source_state.items", "target.state_dict"], "function", ["None"], ["def", "load_weights_sequential", "(", "target", ",", "source_state", ")", ":", "\n", "    ", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "(", "k1", ",", "v1", ")", ",", "(", "k2", ",", "v2", ")", "in", "zip", "(", "target", ".", "state_dict", "(", ")", ".", "items", "(", ")", ",", "source_state", ".", "items", "(", ")", ")", ":", "\n", "        ", "new_dict", "[", "k1", "]", "=", "v2", "\n", "", "target", ".", "load_state_dict", "(", "new_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.conv3x3": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.resnet18": [[127, 130], ["extractors.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.resnet34": [[131, 134], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.resnet50": [[135, 138], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.resnet101": [[139, 142], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.extractors.resnet152": [[143, 146], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPModule.__init__": [[8, 14], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Conv2d", "torch.nn.ReLU", "pspnet.PSPModule._make_stage", "len"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPModule._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "out_features", "=", "1024", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ")", ":", "\n", "        ", "super", "(", "PSPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_stage", "(", "features", ",", "size", ")", "for", "size", "in", "sizes", "]", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Conv2d", "(", "features", "*", "(", "len", "(", "sizes", ")", "+", "1", ")", ",", "out_features", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPModule._make_stage": [[15, 19], ["torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Sequential"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "features", ",", "size", ")", ":", "\n", "        ", "prior", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "size", ",", "size", ")", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "return", "nn", ".", "Sequential", "(", "prior", ",", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPModule.forward": [[20, 25], ["pspnet.PSPModule.bottleneck", "pspnet.PSPModule.relu", "feats.size", "feats.size", "torch.cat", "torch.nn.functional.upsample", "stage"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "h", ",", "w", "=", "feats", ".", "size", "(", "2", ")", ",", "feats", ".", "size", "(", "3", ")", "\n", "priors", "=", "[", "F", ".", "upsample", "(", "input", "=", "stage", "(", "feats", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "for", "stage", "in", "self", ".", "stages", "]", "+", "[", "feats", "]", "\n", "bottle", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "priors", ",", "1", ")", ")", "\n", "return", "self", ".", "relu", "(", "bottle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPUpsample.__init__": [[28, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Conv2d", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "PSPUpsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPUpsample.forward": [[36, 38], ["pspnet.PSPUpsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPNet.__init__": [[41, 62], ["torch.nn.Module.__init__", "pspnet.PSPModule", "torch.nn.Dropout2d", "pspnet.PSPUpsample", "pspnet.PSPUpsample", "pspnet.PSPUpsample", "torch.nn.Dropout2d", "torch.nn.Sequential", "torch.nn.Sequential", "getattr", "torch.nn.Conv2d", "torch.nn.LogSoftmax", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", "=", "21", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "psp_size", "=", "2048", ",", "deep_features_size", "=", "1024", ",", "backend", "=", "'resnet18'", ",", "\n", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "PSPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feats", "=", "getattr", "(", "extractors", ",", "backend", ")", "(", "pretrained", ")", "\n", "self", ".", "psp", "=", "PSPModule", "(", "psp_size", ",", "1024", ",", "sizes", ")", "\n", "self", ".", "drop_1", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.3", ")", "\n", "\n", "self", ".", "up_1", "=", "PSPUpsample", "(", "1024", ",", "256", ")", "\n", "self", ".", "up_2", "=", "PSPUpsample", "(", "256", ",", "64", ")", "\n", "self", ".", "up_3", "=", "PSPUpsample", "(", "64", ",", "64", ")", "\n", "\n", "self", ".", "drop_2", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.15", ")", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "deep_features_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "n_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.pspnet.PSPNet.forward": [[64, 78], ["pspnet.PSPNet.feats", "pspnet.PSPNet.psp", "pspnet.PSPNet.drop_1", "pspnet.PSPNet.up_1", "pspnet.PSPNet.drop_2", "pspnet.PSPNet.up_2", "pspnet.PSPNet.drop_2", "pspnet.PSPNet.up_3", "pspnet.PSPNet.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", ",", "class_f", "=", "self", ".", "feats", "(", "x", ")", "\n", "p", "=", "self", ".", "psp", "(", "f", ")", "\n", "p", "=", "self", ".", "drop_1", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_1", "(", "p", ")", "\n", "p", "=", "self", ".", "drop_2", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_2", "(", "p", ")", "\n", "p", "=", "self", ".", "drop_2", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_3", "(", "p", ")", "\n", "\n", "return", "self", ".", "final", "(", "p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.transformations.quaternion_matrix": [[6, 31], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "numpy.identity"], "function", ["None"], ["def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.transformations.quaternion_from_matrix": [[33, 116], ["numpy.array", "numpy.empty", "numpy.trace", "numpy.array", "numpy.linalg.eigh", "numpy.negative", "math.sqrt", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "0", ",", "1", ",", "2", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "0", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "0", ",", "1", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "q", "=", "q", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss_refiner.Loss_refine.__init__": [[56, 60], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points_mesh", ",", "sym_list", ")", ":", "\n", "        ", "super", "(", "Loss_refine", ",", "self", ")", ".", "__init__", "(", "True", ")", "\n", "self", ".", "num_pt_mesh", "=", "num_points_mesh", "\n", "self", ".", "sym_list", "=", "sym_list", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss_refiner.Loss_refine.forward": [[62, 64], ["loss_refiner.loss_calculation"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss_refiner.loss_calculation"], ["", "def", "forward", "(", "self", ",", "pred_r", ",", "pred_t", ",", "points", ",", "target", ",", "model_points", ",", "idx", ")", ":", "\n", "        ", "return", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "points", ",", "target", ",", "model_points", ",", "idx", ",", "self", ".", "num_pt_mesh", ",", "self", ".", "sym_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss_refiner.loss_calculation": [[6, 52], ["lib.KNN_CUDA.knn_cuda.KNN", "pred_r.view.view", "pred_t.contiguous().view.view", "pred_r.view.size", "len", "torch.cat().contiguous().view", "base.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "model_points.view().repeat().view.view().repeat().view", "target.view().repeat().view.view().repeat().view", "pred_t.contiguous().view.contiguous().view", "torch.add", "torch.mean", "points.view.view", "ori_base[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "ori_target[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.norm().view", "torch.bmm", "lib.KNN_CUDA.knn_cuda.KNN.", "torch.index_select", "torch.norm", "torch.bmm().contiguous.detach", "torch.bmm().contiguous.detach", "torch.cat().contiguous", "base.contiguous().transpose().contiguous.contiguous().transpose", "model_points.view().repeat().view.view().repeat", "target.view().repeat().view.view().repeat", "pred_t.contiguous().view.contiguous", "inds.view", "ori_base[].view", "t.repeat().contiguous", "torch.bmm", "ori_target[].view", "t.repeat().contiguous", "torch.bmm", "torch.norm", "torch.cat", "base.contiguous().transpose().contiguous.contiguous", "model_points.view().repeat().view.view", "target.view().repeat().view.view", "t.repeat", "t.repeat"], "function", ["None"], ["def", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "points", ",", "target", ",", "model_points", ",", "idx", ",", "num_point_mesh", ",", "sym_list", ")", ":", "\n", "    ", "knn", "=", "KNN", "(", "k", "=", "1", ",", "transpose_mode", "=", "True", ")", "\n", "pred_r", "=", "pred_r", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "pred_t", "=", "pred_t", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "bs", ",", "num_p", ",", "_", "=", "pred_r", ".", "size", "(", ")", "\n", "num_input_points", "=", "len", "(", "points", "[", "0", "]", ")", "\n", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", "\n", "base", "=", "torch", ".", "cat", "(", "(", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "3", ",", "3", ")", "\n", "\n", "ori_base", "=", "base", "\n", "base", "=", "base", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "model_points", "=", "model_points", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "target", "=", "target", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "ori_target", "=", "target", "\n", "pred_t", "=", "pred_t", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "1", ",", "3", ")", "\n", "ori_t", "=", "pred_t", "\n", "\n", "pred", "=", "torch", ".", "add", "(", "torch", ".", "bmm", "(", "model_points", ",", "base", ")", ",", "pred_t", ")", "\n", "\n", "if", "idx", "in", "sym_list", ":", "\n", "        ", "dist", ",", "inds", "=", "knn", "(", "pred", ",", "target", ")", "\n", "pred", "=", "torch", ".", "index_select", "(", "pred", ",", "1", ",", "inds", ".", "view", "(", "-", "1", ")", ")", "\n", "", "dis", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "(", "pred", "-", "target", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "t", "=", "ori_t", "[", "0", "]", "\n", "points", "=", "points", ".", "view", "(", "1", ",", "num_input_points", ",", "3", ")", "\n", "\n", "ori_base", "=", "ori_base", "[", "0", "]", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "bs", "*", "num_input_points", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "bs", "*", "num_input_points", ",", "3", ")", "\n", "new_points", "=", "torch", ".", "bmm", "(", "(", "points", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_target", "=", "ori_target", "[", "0", "]", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "num_point_mesh", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", "\n", "new_target", "=", "torch", ".", "bmm", "(", "(", "new_target", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "del", "knn", "\n", "return", "dis", ",", "new_points", ".", "detach", "(", ")", ",", "new_target", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger": [[3, 16], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "setup_logger", "(", "logger_name", ",", "log_file", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "l", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s : %(message)s'", ")", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "streamHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "addHandler", "(", "streamHandler", ")", "\n", "return", "l", "\n", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.ModifiedResnet.__init__": [[29, 34], ["torch.Module.__init__", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "usegpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModifiedResnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "psp_models", "[", "'resnet18'", ".", "lower", "(", ")", "]", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.ModifiedResnet.forward": [[35, 38], ["network.ModifiedResnet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseNetFeat.__init__": [[40, 53], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ")", ":", "\n", "        ", "super", "(", "PoseNetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "e_conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "e_conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "conv6", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "ap1", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "num_points", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseNetFeat.forward": [[53, 69], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseNetFeat.ap1", "ap_x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network.PoseNetFeat.conv1", "network.PoseNetFeat.e_conv1", "network.PoseNetFeat.conv2", "network.PoseNetFeat.e_conv2", "network.PoseNetFeat.conv5", "network.PoseNetFeat.conv6", "ap_x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv1", "(", "emb", ")", ")", "\n", "pointfeat_1", "=", "torch", ".", "cat", "(", "(", "x", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv2", "(", "emb", ")", ")", "\n", "pointfeat_2", "=", "torch", ".", "cat", "(", "(", "x", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "pointfeat_2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "\n", "ap_x", "=", "self", ".", "ap1", "(", "x", ")", "\n", "\n", "ap_x", "=", "ap_x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_points", ")", "\n", "return", "torch", ".", "cat", "(", "[", "pointfeat_1", ",", "pointfeat_2", ",", "ap_x", "]", ",", "1", ")", "#128 + 256 + 1024", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseNet.__init__": [[72, 92], ["torch.Module.__init__", "network.ModifiedResnet", "network.PoseNetFeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "num_vote", ",", "num_obj", ")", ":", "\n", "        ", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "cnn", "=", "ModifiedResnet", "(", ")", "\n", "self", ".", "feat", "=", "PoseNetFeat", "(", "num_points", ")", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1408", ",", "640", ",", "1", ")", "\n", "self", ".", "conv1_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1408", ",", "640", ",", "1", ")", "\n", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "640", ",", "256", ",", "1", ")", "\n", "self", ".", "conv2_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "640", ",", "256", ",", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "num_obj", "*", "num_vote", "*", "3", ",", "1", ")", "\n", "self", ".", "conv4_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "num_obj", "*", "num_vote", "*", "1", ",", "1", ")", "\n", "\n", "self", ".", "num_vote", "=", "num_vote", "\n", "self", ".", "num_obj", "=", "num_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseNet.forward": [[93, 123], ["network.PoseNet.cnn", "network.PoseNet.size", "network.PoseNet.view", "choose.repeat.repeat.repeat", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "network.PoseNet.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseNet.conv4().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "out_vx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous().permute().contiguous", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "out_cx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous().permute().contiguous", "network.PoseNet.conv1", "network.PoseNet.conv2", "network.PoseNet.conv3", "network.PoseNet.conv1_c", "network.PoseNet.conv2_c", "network.PoseNet.conv3_c", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "x.transpose().contiguous.transpose().contiguous.transpose", "network.PoseNet.conv4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out_vx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous().permute", "out_cx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous().permute", "network.PoseNet.conv4_c", "out_vx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous", "out_cx.contiguous().permute().contiguous.contiguous().permute().contiguous.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "x", ",", "choose", ",", "obj", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "cnn", "(", "img", ")", "\n", "\n", "bs", ",", "di", ",", "_", ",", "_", "=", "out_img", ".", "size", "(", ")", "\n", "\n", "emb", "=", "out_img", ".", "view", "(", "bs", ",", "di", ",", "-", "1", ")", "\n", "choose", "=", "choose", ".", "repeat", "(", "1", ",", "di", ",", "1", ")", "\n", "emb", "=", "torch", ".", "gather", "(", "emb", ",", "2", ",", "choose", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ap_x", "=", "self", ".", "feat", "(", "x", ",", "emb", ")", "\n", "\n", "vx", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "ap_x", ")", ")", "\n", "vx", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "vx", ")", ")", "\n", "vx", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "vx", ")", ")", "\n", "vx", "=", "self", ".", "conv4", "(", "vx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "self", ".", "num_vote", ",", "3", ",", "self", ".", "num_points", ")", "\n", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv1_c", "(", "ap_x", ")", ")", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv2_c", "(", "cx", ")", ")", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv3_c", "(", "cx", ")", ")", "\n", "cx", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv4_c", "(", "cx", ")", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "self", ".", "num_vote", ",", "1", ",", "self", ".", "num_points", ")", "\n", "\n", "b", "=", "0", "\n", "out_vx", "=", "torch", ".", "index_select", "(", "vx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_vx", "=", "out_vx", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "out_cx", "=", "torch", ".", "index_select", "(", "cx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_cx", "=", "out_cx", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "out_vx", ",", "out_cx", ",", "emb", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseRefineNetFeat.__init__": [[126, 139], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ")", ":", "\n", "        ", "super", "(", "PoseRefineNetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "e_conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "e_conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "384", ",", "512", ",", "1", ")", "\n", "self", ".", "conv6", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "ap1", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "num_points", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseRefineNetFeat.forward": [[140, 158], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseRefineNetFeat.ap1", "ap_x.view.view.view", "network.PoseRefineNetFeat.conv1", "network.PoseRefineNetFeat.e_conv1", "network.PoseRefineNetFeat.conv2", "network.PoseRefineNetFeat.e_conv2", "network.PoseRefineNetFeat.conv5", "network.PoseRefineNetFeat.conv6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv1", "(", "emb", ")", ")", "\n", "pointfeat_1", "=", "torch", ".", "cat", "(", "[", "x", ",", "emb", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv2", "(", "emb", ")", ")", "\n", "pointfeat_2", "=", "torch", ".", "cat", "(", "[", "x", ",", "emb", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pointfeat_3", "=", "torch", ".", "cat", "(", "[", "pointfeat_1", ",", "pointfeat_2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "pointfeat_3", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "\n", "ap_x", "=", "self", ".", "ap1", "(", "x", ")", "\n", "\n", "ap_x", "=", "ap_x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "return", "ap_x", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseRefineNet.__init__": [[160, 175], ["torch.Module.__init__", "network.PoseRefineNetFeat", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "num_obj", ")", ":", "\n", "        ", "super", "(", "PoseRefineNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "feat", "=", "PoseRefineNetFeat", "(", "num_points", ")", "\n", "\n", "self", ".", "conv1_r", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "conv1_t", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "\n", "self", ".", "conv2_r", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "128", ")", "\n", "self", ".", "conv2_t", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "128", ")", "\n", "\n", "self", ".", "conv3_r", "=", "torch", ".", "nn", ".", "Linear", "(", "128", ",", "num_obj", "*", "4", ")", "#quaternion", "\n", "self", ".", "conv3_t", "=", "torch", ".", "nn", ".", "Linear", "(", "128", ",", "num_obj", "*", "3", ")", "#translation", "\n", "\n", "self", ".", "num_obj", "=", "num_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.network.PoseRefineNet.forward": [[176, 196], ["x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "network.PoseRefineNet.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseRefineNet.conv3_r().view", "network.PoseRefineNet.conv3_t().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "x.transpose().contiguous.transpose().contiguous.size", "network.PoseRefineNet.conv1_r", "network.PoseRefineNet.conv1_t", "network.PoseRefineNet.conv2_r", "network.PoseRefineNet.conv2_t", "x.transpose().contiguous.transpose().contiguous.transpose", "network.PoseRefineNet.conv3_r", "network.PoseRefineNet.conv3_t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ",", "obj", ")", ":", "\n", "        ", "bs", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ap_x", "=", "self", ".", "feat", "(", "x", ",", "emb", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv1_r", "(", "ap_x", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv1_t", "(", "ap_x", ")", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv2_r", "(", "rx", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv2_t", "(", "tx", ")", ")", "\n", "\n", "rx", "=", "self", ".", "conv3_r", "(", "rx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "4", ")", "\n", "tx", "=", "self", ".", "conv3_t", "(", "tx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "3", ")", "\n", "\n", "b", "=", "0", "\n", "out_rx", "=", "torch", ".", "index_select", "(", "rx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_tx", "=", "torch", ".", "index_select", "(", "tx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "\n", "return", "out_rx", ",", "out_tx", "", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.Loss.__init__": [[57, 61], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points_mesh", ",", "sym_list", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", "True", ")", "\n", "self", ".", "num_pt_mesh", "=", "num_points_mesh", "\n", "self", ".", "sym_list", "=", "sym_list", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.Loss.forward": [[62, 113], ["loss.smooth_l1_loss", "torch.sum", "torch.combinations", "loss.batch_least_square", "loss.calculate_error", "calculate_error.unsqueeze().unsqueeze", "torch.softmax().squeeze().unsqueeze", "torchgeometry.rotation_matrix_to_quaternion", "torch.sum", "torch.sum.view", "pred_r.squeeze.squeeze.size", "torch.cat().contiguous().view", "pred_r.squeeze.squeeze.squeeze", "torch.sum", "target_r.squeeze.squeeze.squeeze", "target_t.squeeze.squeeze.squeeze", "lib.KNN_CUDA.knn_cuda.KNN", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "ori_t.repeat().contiguous().view.repeat().contiguous().view.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "vertex_pred.view", "vertex_gt.view", "points.repeat().view", "torch.arange", "torch.ones().cuda", "torch.cat", "torch.norm().view", "torch.norm", "torch.mm", "lib.KNN_CUDA.knn_cuda.KNN.", "torch.mean", "torch.mean", "torch.bmm().contiguous.detach", "torch.bmm().contiguous.detach", "torch.sum", "model_kp.squeeze", "torch.sum.squeeze", "calculate_error.unsqueeze", "torch.softmax().squeeze", "torch.cat().contiguous", "torch.norm", "torch.transpose", "pred.unsqueeze", "target.unsqueeze", "dist.squeeze", "torch.norm", "torch.unsqueeze", "torch.unsqueeze", "ori_t.repeat().contiguous().view.repeat().contiguous().view.repeat().contiguous", "torch.bmm", "torch.bmm", "points.repeat", "torch.ones", "torch.tensor().cuda().unsqueeze().repeat", "torch.norm", "torch.softmax", "torch.cat", "torch.mm", "torch.eye().cuda", "ori_t.repeat().contiguous().view.repeat().contiguous().view.repeat", "torch.tensor().cuda().unsqueeze", "torch.transpose", "torch.eye", "torch.tensor().cuda", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.smooth_l1_loss", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.batch_least_square", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.calculate_error"], ["", "def", "forward", "(", "self", ",", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "idx", ",", "target_r", ",", "target_t", ")", ":", "\n", "        ", "vertex_loss", "=", "smooth_l1_loss", "(", "vertex_pred", ".", "view", "(", "1", ",", "self", ".", "num_pt_mesh", ",", "-", "1", ")", ",", "vertex_gt", ".", "view", "(", "1", ",", "self", ".", "num_pt_mesh", ",", "-", "1", ")", ")", "\n", "\n", "kp_set", "=", "vertex_pred", "+", "points", ".", "repeat", "(", "1", ",", "1", ",", "9", ")", ".", "view", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ",", "9", ",", "3", ")", "\n", "confidence", "=", "c_pred", "/", "(", "0.00001", "+", "torch", ".", "sum", "(", "c_pred", ",", "1", ")", ")", "\n", "points_pred", "=", "torch", ".", "sum", "(", "confidence", "*", "kp_set", ",", "1", ")", "\n", "\n", "all_index", "=", "torch", ".", "combinations", "(", "torch", ".", "arange", "(", "9", ")", ",", "3", ")", "\n", "all_r", ",", "all_t", "=", "batch_least_square", "(", "model_kp", ".", "squeeze", "(", ")", "[", "all_index", ",", ":", "]", ",", "points_pred", ".", "squeeze", "(", ")", "[", "all_index", ",", ":", "]", ",", "torch", ".", "ones", "(", "[", "all_index", ".", "shape", "[", "0", "]", ",", "3", "]", ")", ".", "cuda", "(", ")", ")", "\n", "all_e", "=", "calculate_error", "(", "all_r", ",", "all_t", ",", "model_points", ",", "points", ")", "\n", "e", "=", "all_e", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "w", "=", "torch", ".", "softmax", "(", "1", "/", "e", ",", "1", ")", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "all_qua", "=", "tgm", ".", "rotation_matrix_to_quaternion", "(", "torch", ".", "cat", "(", "(", "all_r", ",", "torch", ".", "tensor", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "all_index", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ")", "\n", "pred_qua", "=", "torch", ".", "sum", "(", "w", "*", "all_qua", ",", "0", ")", "\n", "pred_r", "=", "pred_qua", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "bs", ",", "num_p", ",", "_", "=", "pred_r", ".", "size", "(", ")", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "pred_r", "=", "torch", ".", "cat", "(", "(", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "3", ",", "3", ")", "\n", "pred_r", "=", "pred_r", ".", "squeeze", "(", ")", "\n", "pred_t", "=", "torch", ".", "sum", "(", "w", "*", "all_t", ",", "0", ")", "\n", "\n", "target_r", "=", "target_r", ".", "squeeze", "(", ")", "\n", "target_t", "=", "target_t", ".", "squeeze", "(", ")", "\n", "pose_loss", "=", "torch", ".", "norm", "(", "pred_t", "-", "target_t", ")", "+", "0.01", "*", "torch", ".", "norm", "(", "torch", ".", "mm", "(", "pred_r", ",", "torch", ".", "transpose", "(", "target_r", ",", "1", ",", "0", ")", ")", "-", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "pred", "=", "torch", ".", "mm", "(", "model_points", "[", "0", "]", ",", "torch", ".", "transpose", "(", "pred_r", ",", "1", ",", "0", ")", ")", "+", "pred_t", "\n", "knn", "=", "KNN", "(", "k", "=", "1", ",", "transpose_mode", "=", "True", ")", "\n", "if", "idx", "in", "self", ".", "sym_list", ":", "\n", "            ", "dist", ",", "inds", "=", "knn", "(", "pred", ".", "unsqueeze", "(", "0", ")", ",", "target", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dis", "=", "torch", ".", "mean", "(", "dist", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "dis", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "pred", "-", "target", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "ori_r", "=", "torch", ".", "unsqueeze", "(", "pred_r", ",", "0", ")", ".", "cuda", "(", ")", "\n", "ori_t", "=", "torch", ".", "unsqueeze", "(", "pred_t", ",", "0", ")", ".", "cuda", "(", ")", "\n", "ori_t", "=", "ori_t", ".", "repeat", "(", "self", ".", "num_pt_mesh", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "self", ".", "num_pt_mesh", ",", "3", ")", "\n", "new_points", "=", "torch", ".", "bmm", "(", "(", "points", "-", "ori_t", ")", ",", "ori_r", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_target", "=", "torch", ".", "bmm", "(", "(", "target", "-", "ori_t", ")", ",", "ori_r", ")", ".", "contiguous", "(", ")", "\n", "\n", "del", "knn", "\n", "\n", "return", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ".", "detach", "(", ")", ",", "new_target", ".", "detach", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.smooth_l1_loss": [[7, 21], ["torch.abs", "torch.sum", "torch.pow", "in_loss.view"], "function", ["None"], ["def", "smooth_l1_loss", "(", "vertex_pred", ",", "vertex_targets", ",", "sigma", "=", "1.0", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "b", ",", "ver_dim", ",", "num_points", "=", "vertex_pred", ".", "shape", "\n", "sigma_2", "=", "sigma", "**", "2", "\n", "vertex_diff", "=", "vertex_pred", "-", "vertex_targets", "\n", "diff", "=", "vertex_diff", "\n", "abs_diff", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "smoothL1_sign", "=", "(", "abs_diff", "<", "1.", "/", "sigma_2", ")", ".", "detach", "(", ")", ".", "float", "(", ")", "\n", "in_loss", "=", "torch", ".", "pow", "(", "diff", ",", "2", ")", "*", "(", "sigma_2", "/", "2.", ")", "*", "smoothL1_sign", "+", "(", "abs_diff", "-", "(", "0.5", "/", "sigma_2", ")", ")", "*", "(", "1.", "-", "smoothL1_sign", ")", "\n", "\n", "if", "normalize", ":", "\n", "        ", "in_loss", "=", "torch", ".", "sum", "(", "in_loss", ".", "view", "(", "b", ",", "-", "1", ")", ",", "1", ")", "/", "(", "ver_dim", "*", "num_points", ")", "\n", "\n", "", "return", "in_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.batch_least_square": [[23, 44], ["torch.mean", "torch.mean", "torch.bmm", "torch_batch_svd.svd", "torch.bmm", "torch.ones().cuda", "torch.bmm", "torch.mean.unsqueeze", "torch.mean.unsqueeze", "torch.transpose", "U.permute", "torch.det", "U.permute", "torch.bmm().squeeze", "torch.ones", "torch.bmm", "torch.mean.unsqueeze"], "function", ["None"], ["", "def", "batch_least_square", "(", "A", ",", "B", ",", "w", ")", ":", "\n", "\n", "    ", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "num", "=", "A", ".", "shape", "[", "0", "]", "\n", "centroid_A", "=", "torch", ".", "mean", "(", "A", ",", "dim", "=", "1", ")", "\n", "centroid_B", "=", "torch", ".", "mean", "(", "B", ",", "dim", "=", "1", ")", "\n", "AA", "=", "A", "-", "centroid_A", ".", "unsqueeze", "(", "1", ")", "\n", "BB", "=", "B", "-", "centroid_B", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "H", "=", "torch", ".", "bmm", "(", "torch", ".", "transpose", "(", "AA", ",", "2", ",", "1", ")", ",", "BB", ")", "\n", "U", ",", "S", ",", "Vt", "=", "svd", "(", "H", ")", "\n", "\n", "R", "=", "torch", ".", "bmm", "(", "Vt", ",", "U", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "i", "=", "torch", ".", "det", "(", "R", ")", "<", "0", "\n", "tmp", "=", "torch", ".", "ones", "(", "[", "num", ",", "3", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "tmp", "[", "i", ",", ":", ",", "2", "]", "=", "-", "1", "\n", "Vt", "=", "Vt", "*", "tmp", "\n", "\n", "R", "=", "torch", ".", "bmm", "(", "Vt", ",", "U", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "t", "=", "centroid_B", "-", "torch", ".", "bmm", "(", "R", ",", "centroid_A", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "R", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.loss.calculate_error": [[46, 53], ["lib.KNN_CUDA.knn_cuda.KNN", "scene_points[].expand", "lib.KNN_CUDA.knn_cuda.KNN.", "torch.mean", "torch.bmm", "t.expand().permute", "dist.squeeze", "model_points[].expand", "r.permute", "t.expand"], "function", ["None"], ["", "def", "calculate_error", "(", "r", ",", "t", ",", "model_points", ",", "scene_points", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "bmm", "(", "model_points", "[", "0", "]", ".", "expand", "(", "r", ".", "shape", "[", "0", "]", ",", "model_points", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "r", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "+", "t", ".", "expand", "(", "model_points", ".", "shape", "[", "1", "]", ",", "r", ".", "shape", "[", "0", "]", ",", "3", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "knn", "=", "KNN", "(", "k", "=", "1", ",", "transpose_mode", "=", "True", ")", "\n", "target", "=", "scene_points", "[", "0", "]", ".", "expand", "(", "r", ".", "shape", "[", "0", "]", ",", "scene_points", ".", "shape", "[", "1", "]", ",", "3", ")", "\n", "dist", ",", "inds", "=", "knn", "(", "pred", ",", "target", ")", "\n", "dis", "=", "torch", ".", "mean", "(", "dist", ".", "squeeze", "(", ")", ",", "1", ")", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_performance": [[52, 58], ["numpy.random.random", "numpy.random.random", "benchmark"], "methods", ["None"], ["    ", "def", "test_knn_cuda_performance", "(", "self", ",", "benchmark", ")", ":", "\n", "        ", "dim", "=", "5", "\n", "k", "=", "100", "\n", "ref", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "224", ",", "dim", ")", ")", "\n", "query", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "224", ",", "dim", ")", ")", "\n", "benchmark", "(", "run_knnCuda", ",", "ref", ",", "query", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_1000": [[59, 61], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_1000", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_100": [[62, 64], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_100", "(", "self", ")", ":", "\n", "        ", "compare", "(", "10", ",", "5", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_10": [[65, 67], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_10", "(", "self", ")", ":", "\n", "        ", "compare", "(", "2", ",", "5", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_1001": [[68, 70], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_1001", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "1001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_101": [[71, 73], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_101", "(", "self", ")", ":", "\n", "        ", "compare", "(", "10", ",", "5", ",", "101", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_11": [[74, 76], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_11", "(", "self", ")", ":", "\n", "        ", "compare", "(", "2", ",", "5", ",", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_300000_50": [[77, 79], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_300000_50", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "30000", ",", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_300001_50": [[80, 82], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_300001_50", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "30001", ",", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_10000": [[83, 85], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_10000", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "10000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.TestKNNCuda.test_knn_cuda_400_5_10001": [[86, 88], ["test_knn_cuda.compare"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare"], ["", "def", "test_knn_cuda_400_5_10001", "(", "self", ")", ":", "\n", "        ", "compare", "(", "400", ",", "5", ",", "10001", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.t2n": [[7, 9], ["t.detach().cpu().numpy", "t.detach().cpu", "t.detach"], "function", ["None"], ["def", "t2n", "(", "t", ")", ":", "\n", "    ", "return", "t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.run_kdtree": [[11, 22], ["range", "numpy.stack", "numpy.stack", "sklearn.neighbors.KDTree", "sklearn.neighbors.KDTree.query", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "run_kdtree", "(", "ref", ",", "query", ",", "k", ")", ":", "\n", "    ", "bs", "=", "ref", ".", "shape", "[", "0", "]", "\n", "D", ",", "I", "=", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "        ", "tree", "=", "KDTree", "(", "ref", "[", "j", "]", ",", "leaf_size", "=", "100", ")", "\n", "d", ",", "i", "=", "tree", ".", "query", "(", "query", "[", "j", "]", ",", "k", "=", "k", ")", "\n", "D", ".", "append", "(", "d", ")", "\n", "I", ".", "append", "(", "i", ")", "\n", "", "D", "=", "np", ".", "stack", "(", "D", ")", "\n", "I", "=", "np", ".", "stack", "(", "I", ")", "\n", "return", "D", ",", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.run_knnCuda": [[24, 30], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "knn_cuda.KNN", "knn_cuda.KNN.", "test_knn_cuda.t2n", "test_knn_cuda.t2n", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.t2n", "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.t2n"], ["", "def", "run_knnCuda", "(", "ref", ",", "query", ",", "k", ")", ":", "\n", "    ", "ref", "=", "torch", ".", "from_numpy", "(", "ref", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "query", "=", "torch", ".", "from_numpy", "(", "query", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "knn", "=", "KNN", "(", "k", ",", "transpose_mode", "=", "True", ")", "\n", "d", ",", "i", "=", "knn", "(", "ref", ",", "query", ")", "\n", "return", "t2n", "(", "d", ")", ",", "t2n", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.compare": [[32, 47], ["range", "numpy.random.random", "numpy.random.random", "test_knn_cuda.run_kdtree", "test_knn_cuda.run_knnCuda", "numpy.testing.assert_almost_equal"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.run_kdtree", "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.test_knn_cuda.run_knnCuda"], ["", "def", "compare", "(", "k", ",", "dim", ",", "n1", ",", "n2", "=", "-", "1", ")", ":", "\n", "    ", "if", "n2", "<", "0", ":", "\n", "        ", "n2", "=", "n1", "\n", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "        ", "ref", "=", "np", ".", "random", ".", "random", "(", "(", "2", ",", "n1", ",", "dim", ")", ")", "\n", "query", "=", "np", ".", "random", ".", "random", "(", "(", "2", ",", "n2", ",", "dim", ")", ")", "\n", "\n", "kd_dist", ",", "kd_idices", "=", "run_kdtree", "(", "ref", ",", "query", ",", "k", ")", "\n", "kn_dist", ",", "kn_idices", "=", "run_knnCuda", "(", "ref", ",", "query", ",", "k", ")", "\n", "\n", "# diff = (kd_idices - kn_idices) != 0", "\n", "# print(kd_dist[diff])", "\n", "# print(kn_dist[diff])", "\n", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "kd_dist", ",", "kn_dist", ",", "decimal", "=", "3", ")", "\n", "# np.testing.assert_array_equal(kd_idices, kn_idices)", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.tests.test_float": [[7, 26], ["torch.manual_seed", "torch.randn().cuda", "torch.randn().cuda.clone", "torch_batch_svd.svd", "loss.backward", "torch.svd", "loss0.backward", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "V.sum", "v.sum", "U[].abs", "u.abs", "S[].abs", "s.abs", "V[].abs", "v.abs", "torch.matmul", "torch.randn", "U.sum", "S.sum", "u.sum", "s.sum", "torch.matmul", "V.transpose", "torch.diag_embed"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward"], ["def", "test_float", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "a", "=", "torch", ".", "randn", "(", "1000000", ",", "9", ",", "3", ")", ".", "cuda", "(", ")", "\n", "b", "=", "a", ".", "clone", "(", ")", "\n", "a", ".", "requires_grad", "=", "True", "\n", "b", ".", "requires_grad", "=", "True", "\n", "\n", "U", ",", "S", ",", "V", "=", "svd", "(", "a", ")", "\n", "loss", "=", "U", ".", "sum", "(", ")", "+", "S", ".", "sum", "(", ")", "+", "V", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "b", "[", "0", "]", ",", "some", "=", "True", ",", "compute_uv", "=", "True", ")", "\n", "loss0", "=", "u", ".", "sum", "(", ")", "+", "s", ".", "sum", "(", ")", "+", "v", ".", "sum", "(", ")", "\n", "loss0", ".", "backward", "(", ")", "\n", "\n", "testing", ".", "assert_allclose", "(", "U", "[", "0", "]", ".", "abs", "(", ")", ",", "u", ".", "abs", "(", ")", ")", "# eigenvectors are only precise up to sign", "\n", "testing", ".", "assert_allclose", "(", "S", "[", "0", "]", ".", "abs", "(", ")", ",", "s", ".", "abs", "(", ")", ")", "\n", "testing", ".", "assert_allclose", "(", "V", "[", "0", "]", ".", "abs", "(", ")", ",", "v", ".", "abs", "(", ")", ")", "\n", "testing", ".", "assert_allclose", "(", "a", ",", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "U", ",", "torch", ".", "diag_embed", "(", "S", ")", ")", ",", "V", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.tests.test_double": [[28, 51], ["torch.manual_seed", "torch.randn().cuda().double", "torch.randn().cuda().double.clone", "torch_batch_svd.svd", "loss.backward", "torch.svd", "loss0.backward", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "V.sum", "v.sum", "U[].abs", "u.abs", "S[].abs", "s.abs", "V[].abs", "v.abs", "torch.matmul", "torch.randn().cuda", "U.sum", "S.sum", "u.sum", "s.sum", "torch.matmul", "V.transpose", "torch.diag_embed", "torch.randn"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward"], ["", "def", "test_double", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "a", "=", "torch", ".", "randn", "(", "10", ",", "9", ",", "3", ")", ".", "cuda", "(", ")", ".", "double", "(", ")", "\n", "b", "=", "a", ".", "clone", "(", ")", "\n", "a", ".", "requires_grad", "=", "True", "\n", "b", ".", "requires_grad", "=", "True", "\n", "\n", "U", ",", "S", ",", "V", "=", "svd", "(", "a", ")", "\n", "loss", "=", "U", ".", "sum", "(", ")", "+", "S", ".", "sum", "(", ")", "+", "V", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "b", "[", "0", "]", ",", "some", "=", "True", ",", "compute_uv", "=", "True", ")", "\n", "loss0", "=", "u", ".", "sum", "(", ")", "+", "s", ".", "sum", "(", ")", "+", "v", ".", "sum", "(", ")", "\n", "loss0", ".", "backward", "(", ")", "\n", "\n", "assert", "U", ".", "dtype", "==", "torch", ".", "double", "\n", "assert", "S", ".", "dtype", "==", "torch", ".", "double", "\n", "assert", "V", ".", "dtype", "==", "torch", ".", "double", "\n", "assert", "a", ".", "grad", ".", "dtype", "==", "torch", ".", "double", "\n", "testing", ".", "assert_allclose", "(", "U", "[", "0", "]", ".", "abs", "(", ")", ",", "u", ".", "abs", "(", ")", ")", "# eigenvectors are only precise up to sign", "\n", "testing", ".", "assert_allclose", "(", "S", "[", "0", "]", ".", "abs", "(", ")", ",", "s", ".", "abs", "(", ")", ")", "\n", "testing", ".", "assert_allclose", "(", "V", "[", "0", "]", ".", "abs", "(", ")", ",", "v", ".", "abs", "(", ")", ")", "\n", "testing", ".", "assert_allclose", "(", "a", ",", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "U", ",", "torch", ".", "diag_embed", "(", "S", ")", ")", ",", "V", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tests.tests.test_half": [[53, 69], ["torch.manual_seed", "torch.randn().cuda().half", "torch.randn().cuda().half.clone", "torch_batch_svd.svd", "loss.backward", "torch.testing.assert_allclose", "V.sum", "torch.matmul", "torch.randn().cuda", "U.sum", "S.sum", "torch.matmul", "V.transpose", "torch.diag_embed", "torch.randn"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward"], ["", "def", "test_half", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "a", "=", "torch", ".", "randn", "(", "10", ",", "9", ",", "3", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "b", "=", "a", ".", "clone", "(", ")", "\n", "a", ".", "requires_grad", "=", "True", "\n", "b", ".", "requires_grad", "=", "True", "\n", "\n", "U", ",", "S", ",", "V", "=", "svd", "(", "a", ")", "\n", "loss", "=", "U", ".", "sum", "(", ")", "+", "S", ".", "sum", "(", ")", "+", "V", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "assert", "U", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "S", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "V", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "a", ".", "grad", ".", "dtype", "==", "torch", ".", "half", "\n", "testing", ".", "assert_allclose", "(", "a", ",", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "U", ",", "torch", ".", "diag_embed", "(", "S", ")", ")", ",", "V", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.KNN.__init__": [[56, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "transpose_mode", "=", "False", ")", ":", "\n", "        ", "super", "(", "KNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "_t", "=", "transpose_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.KNN.forward": [[61, 75], ["ref.size", "query.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ref.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "__init__.knn", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "__init__._T", "__init__._T", "r.float", "q.float", "__init__._T", "__init__._T"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.knn", "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__._T", "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__._T", "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__._T", "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__._T"], ["", "def", "forward", "(", "self", ",", "ref", ",", "query", ")", ":", "\n", "        ", "assert", "ref", ".", "size", "(", "0", ")", "==", "query", ".", "size", "(", "0", ")", ",", "\"ref.shape={} != query.shape={}\"", ".", "format", "(", "ref", ".", "shape", ",", "query", ".", "shape", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", "=", "ref", ".", "size", "(", "0", ")", "\n", "D", ",", "I", "=", "[", "]", ",", "[", "]", "\n", "for", "bi", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "r", ",", "q", "=", "_T", "(", "ref", "[", "bi", "]", ",", "self", ".", "_t", ")", ",", "_T", "(", "query", "[", "bi", "]", ",", "self", ".", "_t", ")", "\n", "d", ",", "i", "=", "knn", "(", "r", ".", "float", "(", ")", ",", "q", ".", "float", "(", ")", ",", "self", ".", "k", ")", "\n", "d", ",", "i", "=", "_T", "(", "d", ",", "self", ".", "_t", ")", ",", "_T", "(", "i", ",", "self", ".", "_t", ")", "\n", "D", ".", "append", "(", "d", ")", "\n", "I", ".", "append", "(", "i", ")", "\n", "", "D", "=", "torch", ".", "stack", "(", "D", ",", "dim", "=", "0", ")", "\n", "I", "=", "torch", ".", "stack", "(", "I", ",", "dim", "=", "0", ")", "\n", "", "return", "D", ",", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.load_cpp_ext": [[10, 36], ["os.path.join", "os.path.join", "os.path.join", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.utils.cpp_extension.load", "os.path.join", "os.path.join", "os.path.split"], "function", ["None"], ["def", "load_cpp_ext", "(", "ext_name", ")", ":", "\n", "    ", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "split", "(", "__file__", ")", "[", "0", "]", ")", "\n", "ext_csrc", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"csrc\"", ")", "\n", "ext_path", "=", "os", ".", "path", ".", "join", "(", "ext_csrc", ",", "\"_ext\"", ",", "ext_name", ")", "\n", "os", ".", "makedirs", "(", "ext_path", ",", "exist_ok", "=", "True", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"torch.cuda.is_available() is False.\"", "\n", "ext_sources", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "ext_csrc", ",", "\"cuda\"", ",", "\"{}.cpp\"", ".", "format", "(", "ext_name", ")", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "ext_csrc", ",", "\"cuda\"", ",", "\"{}.cu\"", ".", "format", "(", "ext_name", ")", ")", "\n", "]", "\n", "extra_cuda_cflags", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "ext", "=", "load", "(", "\n", "name", "=", "ext_name", ",", "\n", "sources", "=", "ext_sources", ",", "\n", "extra_cflags", "=", "[", "\"-O2\"", "]", ",", "\n", "build_directory", "=", "ext_path", ",", "\n", "extra_cuda_cflags", "=", "extra_cuda_cflags", ",", "\n", "verbose", "=", "False", ",", "\n", "with_cuda", "=", "True", "\n", ")", "\n", "return", "ext", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.knn": [[41, 45], ["_knn.knn"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__.knn"], ["def", "knn", "(", "ref", ",", "query", ",", "k", ")", ":", "\n", "    ", "d", ",", "i", "=", "_knn", ".", "knn", "(", "ref", ",", "query", ",", "k", ")", "\n", "i", "-=", "1", "\n", "return", "d", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.knn_cuda.__init__._T": [[47, 52], ["t.transpose().contiguous", "t.transpose"], "function", ["None"], ["", "def", "_T", "(", "t", ",", "mode", "=", "False", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "t", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.forward": [[8, 55], ["_c.batch_svd_forward", "torch.zeros().to.transpose_", "torch.zeros().to.transpose_", "torch.empty().to.size", "ctx.save_for_backward", "input.float.float.float", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.half", "torch.empty().to.half", "torch.zeros().to.half", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "min"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ":", "torch", ".", "Tensor", ",", "some", "=", "True", ",", "compute_uv", "=", "True", ",", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This function returns `(U, S, V)` \n        which is the singular value decomposition \n        of a input real matrix or batches of real matrices `input`\n        \n        :param ctx:\n        :param input:\n        :param out:\n        :return:\n        \"\"\"", "\n", "assert", "input", ".", "shape", "[", "-", "1", "]", "<", "32", "and", "input", ".", "shape", "[", "-", "2", "]", "<", "32", ",", "'This implementation only supports matrices having dims smaller than 32'", "\n", "\n", "is_double", "=", "True", "if", "input", ".", "dtype", "==", "torch", ".", "double", "else", "False", "\n", "if", "input", ".", "dtype", "==", "torch", ".", "half", ":", "\n", "            ", "input", "=", "input", ".", "float", "(", ")", "\n", "ctx", ".", "is_half", "=", "True", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "is_half", "=", "False", "\n", "\n", "", "if", "out", "is", "None", ":", "\n", "            ", "b", ",", "m", ",", "n", "=", "input", ".", "shape", "\n", "U", "=", "torch", ".", "empty", "(", "b", ",", "m", ",", "m", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "S", "=", "torch", ".", "empty", "(", "b", ",", "min", "(", "m", ",", "n", ")", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "V", "=", "torch", ".", "empty", "(", "b", ",", "n", ",", "n", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "U", ",", "S", ",", "V", "=", "out", "\n", "\n", "", "_c", ".", "batch_svd_forward", "(", "input", ",", "U", ",", "S", ",", "V", ",", "True", ",", "1e-7", ",", "100", ",", "is_double", ")", "\n", "U", ".", "transpose_", "(", "1", ",", "2", ")", "\n", "V", ".", "transpose_", "(", "1", ",", "2", ")", "\n", "if", "ctx", ".", "is_half", ":", "\n", "            ", "U", ",", "S", ",", "V", "=", "U", ".", "half", "(", ")", ",", "S", ".", "half", "(", ")", ",", "V", ".", "half", "(", ")", "\n", "\n", "", "k", "=", "S", ".", "size", "(", "1", ")", "\n", "U_reduced", ":", "torch", ".", "Tensor", "=", "U", "[", ":", ",", ":", ",", ":", "k", "]", "\n", "V_reduced", ":", "torch", ".", "Tensor", "=", "V", "[", ":", ",", ":", ",", ":", "k", "]", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "U_reduced", ",", "S", ",", "V_reduced", ")", "\n", "\n", "if", "not", "compute_uv", ":", "\n", "            ", "U", "=", "torch", ".", "zeros", "(", "b", ",", "m", ",", "m", ",", "dtype", "=", "S", ".", "dtype", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "V", "=", "torch", ".", "zeros", "(", "b", ",", "m", ",", "m", ",", "dtype", "=", "S", ".", "dtype", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "return", "U", ",", "S", ",", "V", "\n", "\n", "", "return", "(", "U_reduced", ",", "S", ",", "V_reduced", ")", "if", "some", "else", "(", "U", ",", "S", ",", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward": [[56, 70], ["_c.batch_svd_backward", "U.to", "S.to", "V.to", "grad_out.half.half.half", "grad_u.float", "grad_s.float", "grad_v.float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_u", ":", "torch", ".", "Tensor", ",", "grad_s", ":", "torch", ".", "Tensor", ",", "grad_v", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "A", ",", "U", ",", "S", ",", "V", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "is_half", ":", "\n", "            ", "grad_u", ",", "grad_s", ",", "grad_v", "=", "grad_u", ".", "float", "(", ")", ",", "grad_s", ".", "float", "(", ")", ",", "grad_v", ".", "float", "(", ")", "\n", "\n", "", "grad_out", ":", "torch", ".", "Tensor", "=", "_c", ".", "batch_svd_backward", "(", "\n", "[", "grad_u", ",", "grad_s", ",", "grad_v", "]", ",", "\n", "A", ",", "True", ",", "True", ",", "U", ".", "to", "(", "A", ".", "dtype", ")", ",", "S", ".", "to", "(", "A", ".", "dtype", ")", ",", "V", ".", "to", "(", "A", ".", "dtype", ")", "\n", ")", "\n", "if", "ctx", ".", "is_half", ":", "\n", "            ", "grad_out", "=", "grad_out", ".", "half", "(", ")", "\n", "\n", "", "return", "grad_out", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.fps_utils.farthest_point_sampling": [[4, 20], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "_ext.ffi.cast", "_ext.ffi.cast", "numpy.zeros", "_ext.lib.farthest_point_sampling_init_center", "_ext.lib.farthest_point_sampling"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.fps_utils.farthest_point_sampling"], ["def", "farthest_point_sampling", "(", "pts", ",", "sn", ",", "init_center", "=", "False", ")", ":", "\n", "    ", "pn", ",", "_", "=", "pts", ".", "shape", "\n", "assert", "(", "pts", ".", "shape", "[", "1", "]", "==", "3", ")", "\n", "\n", "pts", "=", "np", ".", "ascontiguousarray", "(", "pts", ",", "np", ".", "float32", ")", "\n", "idxs", "=", "np", ".", "ascontiguousarray", "(", "np", ".", "zeros", "(", "[", "sn", "]", ",", "np", ".", "int32", ")", ")", "\n", "\n", "pts_ptr", "=", "ffi", ".", "cast", "(", "'float*'", ",", "pts", ".", "ctypes", ".", "data", ")", "\n", "idxs_ptr", "=", "ffi", ".", "cast", "(", "'int*'", ",", "idxs", ".", "ctypes", ".", "data", ")", "\n", "\n", "if", "init_center", ":", "\n", "        ", "lib", ".", "farthest_point_sampling_init_center", "(", "pts_ptr", ",", "idxs_ptr", ",", "pn", ",", "sn", ")", "\n", "", "else", ":", "\n", "        ", "lib", ".", "farthest_point_sampling", "(", "pts_ptr", ",", "idxs_ptr", ",", "pn", ",", "sn", ")", "\n", "\n", "", "return", "pts", "[", "idxs", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.read_ply_points": [[5, 17], ["open", "open.readline", "open.readline", "int", "range", "numpy.array", "open.readline().strip", "open.readline().strip", "pts.append", "open.readline().split", "numpy.float32", "open.readline", "open.readline", "open.readline", "open.readline().split", "open.readline"], "function", ["None"], ["def", "read_ply_points", "(", "ply_path", ")", ":", "\n", "    ", "f", "=", "open", "(", "ply_path", ")", "\n", "assert", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "==", "\"ply\"", "\n", "f", ".", "readline", "(", ")", "\n", "f", ".", "readline", "(", ")", "\n", "N", "=", "int", "(", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "while", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "!=", "\"end_header\"", ":", "\n", "        ", "continue", "\n", "", "pts", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "        ", "pts", ".", "append", "(", "np", ".", "float32", "(", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "[", ":", "3", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.read_xyz_points": [[18, 29], ["open", "numpy.array", "open.readline", "input_line[].split", "cld.append", "float", "float", "float"], "function", ["None"], ["", "def", "read_xyz_points", "(", "xyz_path", ")", ":", "\n", "    ", "input_file", "=", "open", "(", "xyz_path", ")", "\n", "cld", "=", "[", "]", "\n", "while", "1", ":", "\n", "        ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "            ", "break", "\n", "", "input_line", "=", "input_line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "cld", ".", "append", "(", "[", "float", "(", "input_line", "[", "0", "]", ")", ",", "float", "(", "input_line", "[", "1", "]", ")", ",", "float", "(", "input_line", "[", "2", "]", ")", "]", ")", "\n", "", "points", "=", "np", ".", "array", "(", "cld", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.sample_fps_points": [[30, 55], ["fps_utils.farthest_point_sampling", "numpy.array", "numpy.append", "numpy.savetxt", "model_root.find", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "center_3d.reshape", "get_fps.read_ply_points", "model_root.find", "get_fps.read_xyz_points", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.fps_utils.farthest_point_sampling", "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.read_ply_points", "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.read_xyz_points"], ["", "def", "sample_fps_points", "(", "save_dir", ",", "model_root", ",", "i", ")", ":", "\n", "    ", "if", "model_root", ".", "find", "(", "'ply'", ")", "!=", "-", "1", ":", "\n", "        ", "model_points", "=", "read_ply_points", "(", "model_root", ")", "/", "1000", "\n", "", "elif", "model_root", ".", "find", "(", "'xyz'", ")", "!=", "-", "1", ":", "\n", "        ", "model_points", "=", "read_xyz_points", "(", "model_root", ")", "\n", "", "farthest", "=", "fps_utils", ".", "farthest_point_sampling", "(", "model_points", ",", "8", ",", "True", ")", "\n", "# np.savetxt('{}/farthest_{}.txt'.format(dataset, '%02d' % i), farthest)", "\n", "min_x", ",", "max_x", "=", "np", ".", "min", "(", "model_points", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "model_points", "[", ":", ",", "0", "]", ")", "\n", "min_y", ",", "max_y", "=", "np", ".", "min", "(", "model_points", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "model_points", "[", ":", ",", "1", "]", ")", "\n", "min_z", ",", "max_z", "=", "np", ".", "min", "(", "model_points", "[", ":", ",", "2", "]", ")", ",", "np", ".", "max", "(", "model_points", "[", ":", ",", "2", "]", ")", "\n", "corner_3d", "=", "np", ".", "array", "(", "[", "\n", "[", "min_x", ",", "min_y", ",", "min_z", "]", ",", "\n", "[", "min_x", ",", "min_y", ",", "max_z", "]", ",", "\n", "[", "min_x", ",", "max_y", ",", "min_z", "]", ",", "\n", "[", "min_x", ",", "max_y", ",", "max_z", "]", ",", "\n", "[", "max_x", ",", "min_y", ",", "min_z", "]", ",", "\n", "[", "max_x", ",", "min_y", ",", "max_z", "]", ",", "\n", "[", "max_x", ",", "max_y", ",", "min_z", "]", ",", "\n", "[", "max_x", ",", "max_y", ",", "max_z", "]", ",", "\n", "]", ")", "\n", "center_3d", "=", "(", "np", ".", "max", "(", "corner_3d", ",", "0", ")", "+", "np", ".", "min", "(", "corner_3d", ",", "0", ")", ")", "/", "2", "\n", "# np.savetxt('{}/corner_{}.txt'.format(dataset, '%02d' % i), corner_3d)", "\n", "# np.savetxt('{}/center_{}.txt'.format(dataset, '%02d' % i), center_3d.reshape(1,3))", "\n", "fps", "=", "np", ".", "append", "(", "farthest", ",", "center_3d", ".", "reshape", "(", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "np", ".", "savetxt", "(", "'{}/fps_{}.txt'", ".", "format", "(", "save_dir", ",", "'%02d'", "%", "i", ")", ",", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.main": [[56, 80], ["os.path.exists", "os.mkdir", "get_fps.sample_fps_points", "open", "enumerate", "open.readline", "obj_list.append", "get_fps.sample_fps_points"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.sample_fps_points", "home.repos.pwc.inspect_result.HuaWeitong_REDE.fps.get_fps.sample_fps_points"], ["", "def", "main", "(", ")", ":", "\n", "    ", "dataset", "=", "'ycb'", "\n", "save_dir", "=", "'datasets/{}/data/keypoints'", ".", "format", "(", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "if", "dataset", "==", "'linemod'", ":", "\n", "        ", "model_dir", "=", "'/data1/weitong/dataset/Linemod_preprocessed/models'", "\n", "obj_list", "=", "[", "1", ",", "2", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "for", "i", "in", "obj_list", ":", "\n", "            ", "model", "=", "'{}/obj_{}.ply'", ".", "format", "(", "model_dir", ",", "'%02d'", "%", "i", ")", "\n", "sample_fps_points", "(", "save_dir", ",", "model", ",", "i", ")", "\n", "", "", "elif", "dataset", "==", "'ycb'", ":", "\n", "        ", "model_dir", "=", "'/data1/weitong/dataset/YCB_Video_Dataset/models'", "\n", "obj_list", "=", "[", "]", "\n", "class_file", "=", "open", "(", "'datasets/ycb/dataset_config/classes.txt'", ")", "\n", "while", "1", ":", "\n", "            ", "class_input", "=", "class_file", ".", "readline", "(", ")", "\n", "if", "not", "class_input", ":", "\n", "                ", "break", "\n", "", "class_input", "=", "class_input", "[", ":", "-", "1", "]", "\n", "obj_list", ".", "append", "(", "class_input", ")", "\n", "", "for", "i", ",", "obj", "in", "enumerate", "(", "obj_list", ")", ":", "\n", "            ", "model", "=", "'{}/{}/points.xyz'", ".", "format", "(", "model_dir", ",", "obj", ")", "\n", "sample_fps_points", "(", "save_dir", ",", "model", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.ycb.dataset.PoseDataset.__init__": [[15, 81], ["open", "open.close", "len", "len", "len", "open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.Normalize", "open.readline", "dataset.PoseDataset.list.append", "open.readline", "open", "numpy.array", "numpy.array", "open.close", "numpy.loadtxt", "numpy.loadtxt", "dataset.PoseDataset.real.append", "dataset.PoseDataset.syn.append", "open.readline", "input_line[].split", "dataset.PoseDataset.cld[].append", "range", "range", "float", "float", "float", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "num_pt", ",", "add_noise", ",", "root", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "path", "=", "'datasets/ycb/dataset_config/train_data_list.txt'", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "path", "=", "'datasets/ycb/dataset_config/test_data_list.txt'", "\n", "", "self", ".", "num_pt", "=", "num_pt", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "list", "=", "[", "]", "\n", "self", ".", "real", "=", "[", "]", "\n", "self", ".", "syn", "=", "[", "]", "\n", "input_file", "=", "open", "(", "self", ".", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "", "if", "input_line", "[", "-", "1", ":", "]", "==", "'\\n'", ":", "\n", "                ", "input_line", "=", "input_line", "[", ":", "-", "1", "]", "\n", "", "if", "input_line", "[", ":", "5", "]", "==", "'data/'", ":", "\n", "                ", "self", ".", "real", ".", "append", "(", "input_line", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "syn", ".", "append", "(", "input_line", ")", "\n", "", "self", ".", "list", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "list", ")", "\n", "self", ".", "len_real", "=", "len", "(", "self", ".", "real", ")", "\n", "self", ".", "len_syn", "=", "len", "(", "self", ".", "syn", ")", "\n", "\n", "class_file", "=", "open", "(", "'datasets/ycb/dataset_config/classes.txt'", ")", "\n", "class_id", "=", "1", "\n", "self", ".", "cld", "=", "{", "}", "\n", "self", ".", "kp", "=", "{", "}", "\n", "while", "1", ":", "\n", "            ", "class_input", "=", "class_file", ".", "readline", "(", ")", "\n", "if", "not", "class_input", ":", "\n", "                ", "break", "\n", "", "input_file", "=", "open", "(", "'{0}/models/{1}/points.xyz'", ".", "format", "(", "self", ".", "root", ",", "class_input", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cld", "[", "class_id", "]", "=", "[", "]", "\n", "while", "1", ":", "\n", "                ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                    ", "break", "\n", "", "input_line", "=", "input_line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "self", ".", "cld", "[", "class_id", "]", ".", "append", "(", "[", "float", "(", "input_line", "[", "0", "]", ")", ",", "float", "(", "input_line", "[", "1", "]", ")", ",", "float", "(", "input_line", "[", "2", "]", ")", "]", ")", "\n", "", "self", ".", "cld", "[", "class_id", "]", "=", "np", ".", "array", "(", "self", ".", "cld", "[", "class_id", "]", ")", "\n", "input_file", ".", "close", "(", ")", "\n", "self", ".", "kp", "[", "class_id", "]", "=", "np", ".", "loadtxt", "(", "'{0}/keypoints/fps_{1}.txt'", ".", "format", "(", "self", ".", "root", ",", "'%02d'", "%", "class_id", ")", ")", "\n", "class_id", "+=", "1", "\n", "\n", "", "self", ".", "cam_cx_1", "=", "312.9869", "\n", "self", ".", "cam_cy_1", "=", "241.3109", "\n", "self", ".", "cam_fx_1", "=", "1066.778", "\n", "self", ".", "cam_fy_1", "=", "1067.487", "\n", "self", ".", "cam_cx_2", "=", "323.7872", "\n", "self", ".", "cam_cy_2", "=", "279.6921", "\n", "self", ".", "cam_fx_2", "=", "1077.836", "\n", "self", ".", "cam_fy_2", "=", "1078.189", "\n", "self", ".", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "trancolor", "=", "transforms", ".", "ColorJitter", "(", "0.2", ",", "0.2", ",", "0.2", ",", "0.05", ")", "\n", "self", ".", "noise_img_loc", "=", "0.0", "\n", "self", ".", "noise_img_scale", "=", "7.0", "\n", "self", ".", "minimum_num_pt", "=", "50", "\n", "self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "front_num", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.ycb.dataset.PoseDataset.__getitem__": [[82, 193], ["PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "scipy.loadmat", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "meta[].flatten().astype", "dataset.get_bbox", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "random.sample", "numpy.delete", "numpy.delete", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "dataset.compute_vertex_hcoords", "PIL.Image.open", "PIL.Image.open", "numpy.masked_equal", "numpy.masked_equal", "range", "numpy.random.randint", "numpy.random.randint", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.PoseDataset.trancolor", "numpy.transpose", "numpy.transpose", "random.choice", "numpy.array", "numpy.array", "mask[].flatten().nonzero", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.dot", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "random.choice", "numpy.array", "numpy.array", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "random.sample", "meta[].flatten", "len", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.masked_equal", "numpy.masked_equal", "len", "dataset.PoseDataset.trancolor", "numpy.transpose", "numpy.transpose", "numpy.random.normal", "numpy.random.normal", "len", "range", "len", "[].flatten", "numpy.concatenate.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "model_kp.astype", "compute_vertex_hcoords.astype", "target_r.astype", "numpy.array.astype", "dataset.PoseDataset.trancolor", "PIL.Image.open", "numpy.unique().tolist", "numpy.unique().tolist", "len", "numpy.getmaskarray", "numpy.getmaskarray", "len", "numpy.array", "numpy.array", "PIL.Image.open().convert", "mask[].flatten", "numpy.zeros.nonzero", "len", "PIL.Image.open().convert", "numpy.masked_not_equal", "numpy.masked_not_equal", "mask.nonzero", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "int", "numpy.unique", "numpy.unique", "t_label.nonzero", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.compute_vertex_hcoords"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "depth", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-depth.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "meta", "=", "scio", ".", "loadmat", "(", "'{0}/{1}-meta.mat'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "ori_img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "!=", "'data_syn'", "and", "int", "(", "self", ".", "list", "[", "index", "]", "[", "5", ":", "9", "]", ")", ">=", "60", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_2", "\n", "cam_cy", "=", "self", ".", "cam_cy_2", "\n", "cam_fx", "=", "self", ".", "cam_fx_2", "\n", "cam_fy", "=", "self", ".", "cam_fy_2", "\n", "", "else", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_1", "\n", "cam_cy", "=", "self", ".", "cam_cy_1", "\n", "cam_fx", "=", "self", ".", "cam_fx_1", "\n", "cam_fy", "=", "self", ".", "cam_fy_1", "\n", "\n", "", "mask_back", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "0", ")", ")", "\n", "\n", "add_front", "=", "False", "\n", "if", "self", ".", "add_noise", ":", "\n", "            ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "                ", "seed", "=", "random", ".", "choice", "(", "self", ".", "syn", ")", "\n", "front", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "front", "=", "np", ".", "transpose", "(", "front", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "f_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ")", "\n", "front_label", "=", "np", ".", "unique", "(", "f_label", ")", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "if", "len", "(", "front_label", ")", "<", "self", ".", "front_num", ":", "\n", "                   ", "continue", "\n", "", "front_label", "=", "random", ".", "sample", "(", "front_label", ",", "self", ".", "front_num", ")", "\n", "for", "f_i", "in", "front_label", ":", "\n", "                    ", "mk", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "f_label", ",", "f_i", ")", ")", "\n", "if", "f_i", "==", "front_label", "[", "0", "]", ":", "\n", "                        ", "mask_front", "=", "mk", "\n", "", "else", ":", "\n", "                        ", "mask_front", "=", "mask_front", "*", "mk", "\n", "", "", "t_label", "=", "label", "*", "mask_front", "\n", "if", "len", "(", "t_label", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "1000", ":", "\n", "                    ", "label", "=", "t_label", "\n", "add_front", "=", "True", "\n", "break", "\n", "\n", "", "", "", "obj", "=", "meta", "[", "'cls_indexes'", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "while", "1", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "obj", ")", ")", "\n", "mask_depth", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "depth", ",", "0", ")", ")", "\n", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "obj", "[", "idx", "]", ")", ")", "\n", "mask", "=", "mask_label", "*", "mask_depth", "\n", "if", "len", "(", "mask", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "self", ".", "minimum_num_pt", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "self", ".", "add_noise", ":", "\n", "            ", "img", "=", "self", ".", "trancolor", "(", "img", ")", "\n", "", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "get_bbox", "(", "mask_label", ")", "\n", "img", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", "3", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "\n", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "seed", "=", "random", ".", "choice", "(", "self", ".", "real", ")", "\n", "back", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "back", "=", "np", ".", "transpose", "(", "back", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "img_masked", "=", "back", "*", "mask_back", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "img", "\n", "", "else", ":", "\n", "            ", "img_masked", "=", "img", "\n", "", "if", "self", ".", "add_noise", "and", "add_front", ":", "\n", "            ", "img_masked", "=", "img_masked", "*", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "front", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "*", "~", "(", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ")", "\n", "", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "img_masked", "=", "img_masked", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "7.0", ",", "size", "=", "img_masked", ".", "shape", ")", "\n", "\n", "", "choose", "=", "mask", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "len", "(", "choose", ")", ">", "self", ".", "num_pt", ":", "\n", "            ", "c_mask", "=", "np", ".", "zeros", "(", "len", "(", "choose", ")", ",", "dtype", "=", "int", ")", "\n", "c_mask", "[", ":", "self", ".", "num_pt", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "c_mask", ")", "\n", "choose", "=", "choose", "[", "c_mask", ".", "nonzero", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "choose", "=", "np", ".", "pad", "(", "choose", ",", "(", "0", ",", "self", ".", "num_pt", "-", "len", "(", "choose", ")", ")", ",", "'wrap'", ")", "\n", "\n", "", "depth_masked", "=", "depth", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xmap_masked", "=", "self", ".", "xmap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ymap_masked", "=", "self", ".", "ymap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "choose", "=", "np", ".", "array", "(", "[", "choose", "]", ")", "\n", "cam_scale", "=", "meta", "[", "'factor_depth'", "]", "[", "0", "]", "[", "0", "]", "\n", "pt2", "=", "depth_masked", "/", "cam_scale", "\n", "pt0", "=", "(", "ymap_masked", "-", "cam_cx", ")", "*", "pt2", "/", "cam_fx", "\n", "pt1", "=", "(", "xmap_masked", "-", "cam_cy", ")", "*", "pt2", "/", "cam_fy", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "pt0", ",", "pt1", ",", "pt2", ")", ",", "axis", "=", "1", ")", "\n", "\n", "dellist", "=", "[", "j", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", ")", "]", "\n", "dellist", "=", "random", ".", "sample", "(", "dellist", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", "-", "self", ".", "num_pt", ")", "\n", "model_points", "=", "np", ".", "delete", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ",", "dellist", ",", "axis", "=", "0", ")", "\n", "\n", "target_r", "=", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "0", ":", "3", "]", "\n", "target_t", "=", "np", ".", "array", "(", "[", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "3", ":", "4", "]", ".", "flatten", "(", ")", "]", ")", "\n", "target", "=", "np", ".", "dot", "(", "model_points", ",", "target_r", ".", "T", ")", "\n", "target", "=", "np", ".", "add", "(", "target", ",", "target_t", ")", "\n", "\n", "model_kp", "=", "self", ".", "kp", "[", "obj", "[", "idx", "]", "]", "\n", "scene_kp", "=", "np", ".", "add", "(", "np", ".", "dot", "(", "model_kp", ",", "target_r", ".", "T", ")", ",", "target_t", ")", "\n", "vertex_gt", "=", "compute_vertex_hcoords", "(", "cloud", ",", "scene_kp", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "cloud", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "LongTensor", "(", "choose", ".", "astype", "(", "np", ".", "int32", ")", ")", ",", "self", ".", "norm", "(", "torch", ".", "from_numpy", "(", "(", "img_masked", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ",", "torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "vertex_gt", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "LongTensor", "(", "[", "int", "(", "obj", "[", "idx", "]", ")", "-", "1", "]", ")", ",", "torch", ".", "from_numpy", "(", "target_r", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "target_t", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.ycb.dataset.PoseDataset.__len__": [[194, 196], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.ycb.dataset.get_bbox": [[201, 240], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where"], "function", ["None"], ["def", "get_bbox", "(", "label", ")", ":", "\n", "    ", "rows", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "0", ")", "\n", "rmin", ",", "rmax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "cmin", ",", "cmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "rmax", "+=", "1", "\n", "cmax", "+=", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.ycb.dataset.compute_vertex_hcoords": [[241, 247], ["numpy.ones"], "function", ["None"], ["", "def", "compute_vertex_hcoords", "(", "points", ",", "hcoords", ")", ":", "\n", "    ", "m", "=", "hcoords", ".", "shape", "[", "0", "]", "\n", "m_matrix", "=", "np", ".", "ones", "(", "(", "1", ",", "m", ",", "1", ")", ")", "\n", "vertex", "=", "points", "[", ":", ",", "None", ",", ":", "]", "*", "m_matrix", "\n", "vertex", "=", "hcoords", "[", "None", ",", ":", ",", ":", "]", "-", "vertex", "\n", "return", "vertex", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.PoseDataset.__init__": [[19, 62], ["open", "dataset.ply_vtx", "numpy.loadtxt", "numpy.loadtxt", "print", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.Normalize", "open.readline", "dataset.PoseDataset.list_rgb.append", "dataset.PoseDataset.list_depth.append", "dataset.PoseDataset.list_pose.append", "dataset.PoseDataset.list_label.append", "dataset.PoseDataset.list_label.append", "range", "range", "int", "int", "range", "range"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.ply_vtx"], ["            ", "self", ".", "path", "=", "'datasets/ycb/dataset_config/test_data_list.txt'", "\n", "", "self", ".", "num_pt", "=", "num_pt", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "list", "=", "[", "]", "\n", "self", ".", "real", "=", "[", "]", "\n", "self", ".", "syn", "=", "[", "]", "\n", "input_file", "=", "open", "(", "self", ".", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "", "if", "input_line", "[", "-", "1", ":", "]", "==", "'\\n'", ":", "\n", "                ", "input_line", "=", "input_line", "[", ":", "-", "1", "]", "\n", "", "if", "input_line", "[", ":", "5", "]", "==", "'data/'", ":", "\n", "                ", "self", ".", "real", ".", "append", "(", "input_line", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "syn", ".", "append", "(", "input_line", ")", "\n", "", "self", ".", "list", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "list", ")", "\n", "self", ".", "len_real", "=", "len", "(", "self", ".", "real", ")", "\n", "self", ".", "len_syn", "=", "len", "(", "self", ".", "syn", ")", "\n", "\n", "class_file", "=", "open", "(", "'datasets/ycb/dataset_config/classes.txt'", ")", "\n", "class_id", "=", "1", "\n", "self", ".", "cld", "=", "{", "}", "\n", "self", ".", "kp", "=", "{", "}", "\n", "while", "1", ":", "\n", "            ", "class_input", "=", "class_file", ".", "readline", "(", ")", "\n", "if", "not", "class_input", ":", "\n", "                ", "break", "\n", "", "input_file", "=", "open", "(", "'{0}/models/{1}/points.xyz'", ".", "format", "(", "self", ".", "root", ",", "class_input", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cld", "[", "class_id", "]", "=", "[", "]", "\n", "while", "1", ":", "\n", "                ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                    ", "break", "\n", "", "input_line", "=", "input_line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "self", ".", "cld", "[", "class_id", "]", ".", "append", "(", "[", "float", "(", "input_line", "[", "0", "]", ")", ",", "float", "(", "input_line", "[", "1", "]", ")", ",", "float", "(", "input_line", "[", "2", "]", ")", "]", ")", "\n", "", "self", ".", "cld", "[", "class_id", "]", "=", "np", ".", "array", "(", "self", ".", "cld", "[", "class_id", "]", ")", "\n", "input_file", ".", "close", "(", ")", "\n", "self", ".", "kp", "[", "class_id", "]", "=", "np", ".", "loadtxt", "(", "'{0}/keypoints/fps_{1}.txt'", ".", "format", "(", "self", ".", "root", ",", "'%02d'", "%", "class_id", ")", ")", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.PoseDataset.__getitem__": [[63, 130], ["PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.load", "numpy.load", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.transpose", "numpy.transpose", "dataset.get_bbox", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "random.sample", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "dataset.compute_vertex_hcoords", "PIL.Image.open", "PIL.Image.open", "numpy.masked_equal", "numpy.masked_equal", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.array", "numpy.array", "dataset.mask_to_bbox", "mask[].flatten().nonzero", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.concatenate", "numpy.concatenate", "numpy.dot", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "len", "range", "len", "cloud.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "model_kp.astype", "compute_vertex_hcoords.astype", "target_r.astype", "target_t.astype", "mask[].flatten", "numpy.zeros.nonzero", "len", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.compute_vertex_hcoords", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.mask_to_bbox"], ["class_id", "+=", "1", "\n", "\n", "", "self", ".", "cam_cx_1", "=", "312.9869", "\n", "self", ".", "cam_cy_1", "=", "241.3109", "\n", "self", ".", "cam_fx_1", "=", "1066.778", "\n", "self", ".", "cam_fy_1", "=", "1067.487", "\n", "self", ".", "cam_cx_2", "=", "323.7872", "\n", "self", ".", "cam_cy_2", "=", "279.6921", "\n", "self", ".", "cam_fx_2", "=", "1077.836", "\n", "self", ".", "cam_fy_2", "=", "1078.189", "\n", "self", ".", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "trancolor", "=", "transforms", ".", "ColorJitter", "(", "0.2", ",", "0.2", ",", "0.2", ",", "0.05", ")", "\n", "self", ".", "noise_img_loc", "=", "0.0", "\n", "self", ".", "noise_img_scale", "=", "7.0", "\n", "self", ".", "minimum_num_pt", "=", "50", "\n", "self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "front_num", "=", "2", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "depth", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-depth.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "meta", "=", "scio", ".", "loadmat", "(", "'{0}/{1}-meta.mat'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "ori_img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "!=", "'data_syn'", "and", "int", "(", "self", ".", "list", "[", "index", "]", "[", "5", ":", "9", "]", ")", ">=", "60", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_2", "\n", "cam_cy", "=", "self", ".", "cam_cy_2", "\n", "cam_fx", "=", "self", ".", "cam_fx_2", "\n", "cam_fy", "=", "self", ".", "cam_fy_2", "\n", "", "else", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_1", "\n", "cam_cy", "=", "self", ".", "cam_cy_1", "\n", "cam_fx", "=", "self", ".", "cam_fx_1", "\n", "cam_fy", "=", "self", ".", "cam_fy_1", "\n", "\n", "", "mask_back", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "0", ")", ")", "\n", "\n", "add_front", "=", "False", "\n", "if", "self", ".", "add_noise", ":", "\n", "            ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "                ", "seed", "=", "random", ".", "choice", "(", "self", ".", "syn", ")", "\n", "front", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "front", "=", "np", ".", "transpose", "(", "front", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "f_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ")", "\n", "front_label", "=", "np", ".", "unique", "(", "f_label", ")", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "if", "len", "(", "front_label", ")", "<", "self", ".", "front_num", ":", "\n", "                   ", "continue", "\n", "", "front_label", "=", "random", ".", "sample", "(", "front_label", ",", "self", ".", "front_num", ")", "\n", "for", "f_i", "in", "front_label", ":", "\n", "                    ", "mk", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "f_label", ",", "f_i", ")", ")", "\n", "if", "f_i", "==", "front_label", "[", "0", "]", ":", "\n", "                        ", "mask_front", "=", "mk", "\n", "", "else", ":", "\n", "                        ", "mask_front", "=", "mask_front", "*", "mk", "\n", "", "", "t_label", "=", "label", "*", "mask_front", "\n", "if", "len", "(", "t_label", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "1000", ":", "\n", "                    ", "label", "=", "t_label", "\n", "add_front", "=", "True", "\n", "break", "\n", "\n", "", "", "", "obj", "=", "meta", "[", "'cls_indexes'", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "while", "1", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "obj", ")", ")", "\n", "mask_depth", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "depth", ",", "0", ")", ")", "\n", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "obj", "[", "idx", "]", ")", ")", "\n", "mask", "=", "mask_label", "*", "mask_depth", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.PoseDataset.__len__": [[131, 133], ["None"], "methods", ["None"], ["if", "len", "(", "mask", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "self", ".", "minimum_num_pt", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.ply_vtx": [[139, 151], ["open", "open.readline", "open.readline", "int", "range", "numpy.array", "open.readline().strip", "open.readline().strip", "pts.append", "open.readline().split", "numpy.float32", "open.readline", "open.readline", "open.readline", "open.readline().split", "open.readline"], "function", ["None"], ["if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "seed", "=", "random", ".", "choice", "(", "self", ".", "real", ")", "\n", "back", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "back", "=", "np", ".", "transpose", "(", "back", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "img_masked", "=", "back", "*", "mask_back", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "img", "\n", "", "else", ":", "\n", "            ", "img_masked", "=", "img", "\n", "", "if", "self", ".", "add_noise", "and", "add_front", ":", "\n", "            ", "img_masked", "=", "img_masked", "*", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "front", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "*", "~", "(", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ")", "\n", "", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "img_masked", "=", "img_masked", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "7.0", ",", "size", "=", "img_masked", ".", "shape", ")", "\n", "\n", "", "choose", "=", "mask", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.compute_vertex_hcoords": [[152, 158], ["numpy.ones"], "function", ["None"], ["if", "len", "(", "choose", ")", ">", "self", ".", "num_pt", ":", "\n", "            ", "c_mask", "=", "np", ".", "zeros", "(", "len", "(", "choose", ")", ",", "dtype", "=", "int", ")", "\n", "c_mask", "[", ":", "self", ".", "num_pt", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "c_mask", ")", "\n", "choose", "=", "choose", "[", "c_mask", ".", "nonzero", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "choose", "=", "np", ".", "pad", "(", "choose", ",", "(", "0", ",", "self", ".", "num_pt", "-", "len", "(", "choose", ")", ")", ",", "'wrap'", ")", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.mask_to_bbox": [[159, 190], ["mask.astype.astype", "cv2.findContours", "cv2.boundingRect"], "function", ["None"], ["\n", "", "depth_masked", "=", "depth", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xmap_masked", "=", "self", ".", "xmap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ymap_masked", "=", "self", ".", "ymap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "choose", "=", "np", ".", "array", "(", "[", "choose", "]", ")", "\n", "cam_scale", "=", "meta", "[", "'factor_depth'", "]", "[", "0", "]", "[", "0", "]", "\n", "pt2", "=", "depth_masked", "/", "cam_scale", "\n", "pt0", "=", "(", "ymap_masked", "-", "cam_cx", ")", "*", "pt2", "/", "cam_fx", "\n", "pt1", "=", "(", "xmap_masked", "-", "cam_cy", ")", "*", "pt2", "/", "cam_fy", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "pt0", ",", "pt1", ",", "pt2", ")", ",", "axis", "=", "1", ")", "\n", "\n", "dellist", "=", "[", "j", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", ")", "]", "\n", "dellist", "=", "random", ".", "sample", "(", "dellist", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", "-", "self", ".", "num_pt", ")", "\n", "model_points", "=", "np", ".", "delete", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ",", "dellist", ",", "axis", "=", "0", ")", "\n", "\n", "target_r", "=", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "0", ":", "3", "]", "\n", "target_t", "=", "np", ".", "array", "(", "[", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "3", ":", "4", "]", ".", "flatten", "(", ")", "]", ")", "\n", "target", "=", "np", ".", "dot", "(", "model_points", ",", "target_r", ".", "T", ")", "\n", "target", "=", "np", ".", "add", "(", "target", ",", "target_t", ")", "\n", "\n", "model_kp", "=", "self", ".", "kp", "[", "obj", "[", "idx", "]", "]", "\n", "scene_kp", "=", "np", ".", "add", "(", "np", ".", "dot", "(", "model_kp", ",", "target_r", ".", "T", ")", ",", "target_t", ")", "\n", "vertex_gt", "=", "compute_vertex_hcoords", "(", "cloud", ",", "scene_kp", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "cloud", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "LongTensor", "(", "choose", ".", "astype", "(", "np", ".", "int32", ")", ")", ",", "self", ".", "norm", "(", "torch", ".", "from_numpy", "(", "(", "img_masked", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ",", "torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "vertex_gt", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "LongTensor", "(", "[", "int", "(", "obj", "[", "idx", "]", ")", "-", "1", "]", ")", ","]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.get_bbox": [[191, 234], ["range", "range", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["torch", ".", "from_numpy", "(", "target_r", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "target_t", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n", "", "", "border_list", "=", "[", "-", "1", ",", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "400", ",", "440", ",", "480", ",", "520", ",", "560", ",", "600", ",", "640", ",", "680", "]", "\n", "img_width", "=", "480", "\n", "img_length", "=", "640", "\n", "\n", "def", "get_bbox", "(", "label", ")", ":", "\n", "    ", "rows", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "0", ")", "\n", "rmin", ",", "rmax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "cmin", ",", "cmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "rmax", "+=", "1", "\n", "cmax", "+=", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.occlusion_linemod.dataset.get_bbox_mask": [[235, 276], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n", "", "def", "compute_vertex_hcoords", "(", "points", ",", "hcoords", ")", ":", "\n", "    ", "m", "=", "hcoords", ".", "shape", "[", "0", "]", "\n", "m_matrix", "=", "np", ".", "ones", "(", "(", "1", ",", "m", ",", "1", ")", ")", "\n", "vertex", "=", "points", "[", ":", ",", "None", ",", ":", "]", "*", "m_matrix", "\n", "vertex", "=", "hcoords", "[", "None", ",", ":", ",", ":", "]", "-", "vertex", "\n", "return", "vertex", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__init__": [[13, 78], ["dataset.ply_vtx", "numpy.loadtxt", "numpy.loadtxt", "print", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.Normalize", "range", "range", "open", "open", "open.readline", "dataset.PoseDataset.list_rgb.append", "dataset.PoseDataset.list_depth.append", "dataset.PoseDataset.list_pose.append", "dataset.PoseDataset.list_rgb.append", "dataset.PoseDataset.list_depth.append", "dataset.PoseDataset.list_label.append", "dataset.PoseDataset.list_pose.append", "dataset.PoseDataset.list_rgb.append", "dataset.PoseDataset.list_depth.append", "dataset.PoseDataset.list_label.append", "dataset.PoseDataset.list_pose.append", "dataset.PoseDataset.list_label.append", "dataset.PoseDataset.list_label.append", "range", "range", "str", "range", "range", "int"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.ply_vtx"], ["\n", "class", "PoseDataset", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mode", ",", "num_pt", ",", "add_noise", ",", "root", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "path", "=", "'datasets/ycb/dataset_config/train_data_list.txt'", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "path", "=", "'datasets/ycb/dataset_config/test_data_list.txt'", "\n", "", "self", ".", "num_pt", "=", "num_pt", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "list", "=", "[", "]", "\n", "self", ".", "real", "=", "[", "]", "\n", "self", ".", "syn", "=", "[", "]", "\n", "input_file", "=", "open", "(", "self", ".", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "", "if", "input_line", "[", "-", "1", ":", "]", "==", "'\\n'", ":", "\n", "                ", "input_line", "=", "input_line", "[", ":", "-", "1", "]", "\n", "", "if", "input_line", "[", ":", "5", "]", "==", "'data/'", ":", "\n", "                ", "self", ".", "real", ".", "append", "(", "input_line", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "syn", ".", "append", "(", "input_line", ")", "\n", "", "self", ".", "list", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "list", ")", "\n", "self", ".", "len_real", "=", "len", "(", "self", ".", "real", ")", "\n", "self", ".", "len_syn", "=", "len", "(", "self", ".", "syn", ")", "\n", "\n", "class_file", "=", "open", "(", "'datasets/ycb/dataset_config/classes.txt'", ")", "\n", "class_id", "=", "1", "\n", "self", ".", "cld", "=", "{", "}", "\n", "self", ".", "kp", "=", "{", "}", "\n", "while", "1", ":", "\n", "            ", "class_input", "=", "class_file", ".", "readline", "(", ")", "\n", "if", "not", "class_input", ":", "\n", "                ", "break", "\n", "", "input_file", "=", "open", "(", "'{0}/models/{1}/points.xyz'", ".", "format", "(", "self", ".", "root", ",", "class_input", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cld", "[", "class_id", "]", "=", "[", "]", "\n", "while", "1", ":", "\n", "                ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                    ", "break", "\n", "", "input_line", "=", "input_line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "self", ".", "cld", "[", "class_id", "]", ".", "append", "(", "[", "float", "(", "input_line", "[", "0", "]", ")", ",", "float", "(", "input_line", "[", "1", "]", ")", ",", "float", "(", "input_line", "[", "2", "]", ")", "]", ")", "\n", "", "self", ".", "cld", "[", "class_id", "]", "=", "np", ".", "array", "(", "self", ".", "cld", "[", "class_id", "]", ")", "\n", "input_file", ".", "close", "(", ")", "\n", "self", ".", "kp", "[", "class_id", "]", "=", "np", ".", "loadtxt", "(", "'{0}/keypoints/fps_{1}.txt'", ".", "format", "(", "self", ".", "root", ",", "'%02d'", "%", "class_id", ")", ")", "\n", "class_id", "+=", "1", "\n", "\n", "", "self", ".", "cam_cx_1", "=", "312.9869", "\n", "self", ".", "cam_cy_1", "=", "241.3109", "\n", "self", ".", "cam_fx_1", "=", "1066.778", "\n", "self", ".", "cam_fy_1", "=", "1067.487", "\n", "self", ".", "cam_cx_2", "=", "323.7872", "\n", "self", ".", "cam_cy_2", "=", "279.6921", "\n", "self", ".", "cam_fx_2", "=", "1077.836", "\n", "self", ".", "cam_fy_2", "=", "1078.189", "\n", "self", ".", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "self", ".", "trancolor", "=", "transforms", ".", "ColorJitter", "(", "0.2", ",", "0.2", ",", "0.2", ",", "0.05", ")", "\n", "self", ".", "noise_img_loc", "=", "0.0", "\n", "self", ".", "noise_img_scale", "=", "7.0", "\n", "self", ".", "minimum_num_pt", "=", "50", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__getitem__": [[79, 185], ["numpy.transpose", "numpy.transpose", "dataset.get_bbox", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "random.sample", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "dataset.compute_vertex_hcoords", "dataset.PoseDataset.list_rgb[].find", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.PoseDataset.trancolor", "numpy.array", "numpy.array", "dataset.mask_to_bbox", "mask[].flatten().nonzero", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.concatenate", "numpy.concatenate", "numpy.dot", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.Image.open", "PIL.Image.open", "pickle.load", "numpy.masked_equal", "numpy.masked_equal", "numpy.masked_not_equal", "numpy.masked_not_equal", "dataset.PoseDataset.list_rgb[].find", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataset.PoseDataset.objlist.index", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.load", "numpy.load", "numpy.getmaskarray", "numpy.getmaskarray", "len", "range", "len", "cloud.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "model_kp.astype", "compute_vertex_hcoords.astype", "target_r.astype", "target_t.astype", "open", "numpy.array", "numpy.array", "PIL.Image.open", "PIL.Image.open", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.masked_equal", "numpy.masked_equal", "PIL.Image.open", "PIL.Image.open", "len", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.masked_not_equal", "numpy.masked_not_equal", "mask[].flatten", "numpy.zeros.nonzero", "len", "pickle.load", "pickle.load", "numpy.array", "numpy.array", "numpy.masked_equal", "numpy.masked_equal", "numpy.getmaskarray", "numpy.getmaskarray", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "open", "open", "numpy.array", "numpy.array", "numpy.masked_equal", "numpy.masked_equal", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.compute_vertex_hcoords", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.mask_to_bbox"], ["self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "front_num", "=", "2", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "depth", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-depth.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", ")", "\n", "meta", "=", "scio", ".", "loadmat", "(", "'{0}/{1}-meta.mat'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "list", "[", "index", "]", ")", ")", "\n", "ori_img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "!=", "'data_syn'", "and", "int", "(", "self", ".", "list", "[", "index", "]", "[", "5", ":", "9", "]", ")", ">=", "60", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_2", "\n", "cam_cy", "=", "self", ".", "cam_cy_2", "\n", "cam_fx", "=", "self", ".", "cam_fx_2", "\n", "cam_fy", "=", "self", ".", "cam_fy_2", "\n", "", "else", ":", "\n", "            ", "cam_cx", "=", "self", ".", "cam_cx_1", "\n", "cam_cy", "=", "self", ".", "cam_cy_1", "\n", "cam_fx", "=", "self", ".", "cam_fx_1", "\n", "cam_fy", "=", "self", ".", "cam_fy_1", "\n", "\n", "", "mask_back", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "0", ")", ")", "\n", "\n", "add_front", "=", "False", "\n", "if", "self", ".", "add_noise", ":", "\n", "            ", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "                ", "seed", "=", "random", ".", "choice", "(", "self", ".", "syn", ")", "\n", "front", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "front", "=", "np", ".", "transpose", "(", "front", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "f_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ")", "\n", "front_label", "=", "np", ".", "unique", "(", "f_label", ")", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "if", "len", "(", "front_label", ")", "<", "self", ".", "front_num", ":", "\n", "                   ", "continue", "\n", "", "front_label", "=", "random", ".", "sample", "(", "front_label", ",", "self", ".", "front_num", ")", "\n", "for", "f_i", "in", "front_label", ":", "\n", "                    ", "mk", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "f_label", ",", "f_i", ")", ")", "\n", "if", "f_i", "==", "front_label", "[", "0", "]", ":", "\n", "                        ", "mask_front", "=", "mk", "\n", "", "else", ":", "\n", "                        ", "mask_front", "=", "mask_front", "*", "mk", "\n", "", "", "t_label", "=", "label", "*", "mask_front", "\n", "if", "len", "(", "t_label", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "1000", ":", "\n", "                    ", "label", "=", "t_label", "\n", "add_front", "=", "True", "\n", "break", "\n", "\n", "", "", "", "obj", "=", "meta", "[", "'cls_indexes'", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "while", "1", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "obj", ")", ")", "\n", "mask_depth", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "depth", ",", "0", ")", ")", "\n", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "obj", "[", "idx", "]", ")", ")", "\n", "mask", "=", "mask_label", "*", "mask_depth", "\n", "if", "len", "(", "mask", ".", "nonzero", "(", ")", "[", "0", "]", ")", ">", "self", ".", "minimum_num_pt", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "self", ".", "add_noise", ":", "\n", "            ", "img", "=", "self", ".", "trancolor", "(", "img", ")", "\n", "", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "get_bbox", "(", "mask_label", ")", "\n", "img", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", "3", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "\n", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "seed", "=", "random", ".", "choice", "(", "self", ".", "real", ")", "\n", "back", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "seed", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "back", "=", "np", ".", "transpose", "(", "back", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "img_masked", "=", "back", "*", "mask_back", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "img", "\n", "", "else", ":", "\n", "            ", "img_masked", "=", "img", "\n", "", "if", "self", ".", "add_noise", "and", "add_front", ":", "\n", "            ", "img_masked", "=", "img_masked", "*", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "+", "front", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "*", "~", "(", "mask_front", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ")", "\n", "", "if", "self", ".", "list", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "img_masked", "=", "img_masked", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "7.0", ",", "size", "=", "img_masked", ".", "shape", ")", "\n", "\n", "", "choose", "=", "mask", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "len", "(", "choose", ")", ">", "self", ".", "num_pt", ":", "\n", "            ", "c_mask", "=", "np", ".", "zeros", "(", "len", "(", "choose", ")", ",", "dtype", "=", "int", ")", "\n", "c_mask", "[", ":", "self", ".", "num_pt", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "c_mask", ")", "\n", "choose", "=", "choose", "[", "c_mask", ".", "nonzero", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "choose", "=", "np", ".", "pad", "(", "choose", ",", "(", "0", ",", "self", ".", "num_pt", "-", "len", "(", "choose", ")", ")", ",", "'wrap'", ")", "\n", "\n", "", "depth_masked", "=", "depth", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xmap_masked", "=", "self", ".", "xmap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ymap_masked", "=", "self", ".", "ymap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "choose", "=", "np", ".", "array", "(", "[", "choose", "]", ")", "\n", "cam_scale", "=", "meta", "[", "'factor_depth'", "]", "[", "0", "]", "[", "0", "]", "\n", "pt2", "=", "depth_masked", "/", "cam_scale", "\n", "pt0", "=", "(", "ymap_masked", "-", "cam_cx", ")", "*", "pt2", "/", "cam_fx", "\n", "pt1", "=", "(", "xmap_masked", "-", "cam_cy", ")", "*", "pt2", "/", "cam_fy", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "pt0", ",", "pt1", ",", "pt2", ")", ",", "axis", "=", "1", ")", "\n", "\n", "dellist", "=", "[", "j", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", ")", "]", "\n", "dellist", "=", "random", ".", "sample", "(", "dellist", ",", "len", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ")", "-", "self", ".", "num_pt", ")", "\n", "model_points", "=", "np", ".", "delete", "(", "self", ".", "cld", "[", "obj", "[", "idx", "]", "]", ",", "dellist", ",", "axis", "=", "0", ")", "\n", "\n", "target_r", "=", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "0", ":", "3", "]", "\n", "target_t", "=", "np", ".", "array", "(", "[", "meta", "[", "'poses'", "]", "[", ":", ",", ":", ",", "idx", "]", "[", ":", ",", "3", ":", "4", "]", ".", "flatten", "(", ")", "]", ")", "\n", "target", "=", "np", ".", "dot", "(", "model_points", ",", "target_r", ".", "T", ")", "\n", "target", "=", "np", ".", "add", "(", "target", ",", "target_t", ")", "\n", "\n", "model_kp", "=", "self", ".", "kp", "[", "obj", "[", "idx", "]", "]", "\n", "scene_kp", "=", "np", ".", "add", "(", "np", ".", "dot", "(", "model_kp", ",", "target_r", ".", "T", ")", ",", "target_t", ")", "\n", "vertex_gt", "=", "compute_vertex_hcoords", "(", "cloud", ",", "scene_kp", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "cloud", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "LongTensor", "(", "choose", ".", "astype", "(", "np", ".", "int32", ")", ")", ",", "self", ".", "norm", "(", "torch", ".", "from_numpy", "(", "(", "img_masked", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ","]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.PoseDataset.__len__": [[186, 188], ["None"], "methods", ["None"], ["torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "model_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", ","]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.ply_vtx": [[194, 206], ["open", "open.readline", "open.readline", "int", "range", "numpy.array", "open.readline().strip", "open.readline().strip", "pts.append", "open.readline().split", "numpy.float32", "open.readline", "open.readline", "open.readline", "open.readline().split", "open.readline"], "function", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n", "", "", "border_list", "=", "[", "-", "1", ",", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "400", ",", "440", ",", "480", ",", "520", ",", "560", ",", "600", ",", "640", ",", "680", "]", "\n", "img_width", "=", "480", "\n", "img_length", "=", "640", "\n", "\n", "def", "get_bbox", "(", "label", ")", ":", "\n", "    ", "rows", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "0", ")", "\n", "rmin", ",", "rmax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "cmin", ",", "cmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "rmax", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.compute_vertex_hcoords": [[207, 213], ["numpy.ones"], "function", ["None"], ["cmax", "+=", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.mask_to_bbox": [[214, 229], ["mask.astype.astype", "cv2.findContours", "cv2.boundingRect"], "function", ["None"], ["for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.get_bbox": [[230, 273], ["range", "range", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n", "", "def", "compute_vertex_hcoords", "(", "points", ",", "hcoords", ")", ":", "\n", "    ", "m", "=", "hcoords", ".", "shape", "[", "0", "]", "\n", "m_matrix", "=", "np", ".", "ones", "(", "(", "1", ",", "m", ",", "1", ")", ")", "\n", "vertex", "=", "points", "[", ":", ",", "None", ",", ":", "]", "*", "m_matrix", "\n", "vertex", "=", "hcoords", "[", "None", ",", ":", ",", ":", "]", "-", "vertex", "\n", "return", "vertex", "", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.linemod.dataset.get_bbox_mask": [[274, 315], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tools.eval_ycb.VOCap": [[307, 320], ["numpy.where", "numpy.array", "numpy.array", "range", "len", "max", "numpy.sum", "numpy.where", "list", "list"], "function", ["None"], ["def", "VOCap", "(", "rec", ",", "prec", ")", ":", "\n", "    ", "idx", "=", "np", ".", "where", "(", "rec", "!=", "np", ".", "inf", ")", "\n", "if", "len", "(", "idx", "[", "0", "]", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "rec", "=", "rec", "[", "idx", "]", "\n", "prec", "=", "prec", "[", "idx", "]", "\n", "mrec", "=", "np", ".", "array", "(", "[", "0.0", "]", "+", "list", "(", "rec", ")", "+", "[", "0.1", "]", ")", "\n", "mpre", "=", "np", ".", "array", "(", "[", "0.0", "]", "+", "list", "(", "prec", ")", "+", "[", "prec", "[", "-", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "prec", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mpre", "[", "i", "]", "=", "max", "(", "mpre", "[", "i", "]", ",", "mpre", "[", "i", "-", "1", "]", ")", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "]", "-", "mrec", "[", "i", "-", "1", "]", ")", "*", "mpre", "[", "i", "]", ")", "*", "10", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tools.eval_ycb.cal_auc": [[321, 329], ["numpy.array", "numpy.sort", "len", "eval_ycb.VOCap", "numpy.cumsum", "numpy.where", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.tools.eval_ycb.VOCap"], ["", "def", "cal_auc", "(", "add_dis", ",", "max_dis", "=", "0.1", ")", ":", "\n", "    ", "D", "=", "np", ".", "array", "(", "add_dis", ")", "\n", "D", "[", "np", ".", "where", "(", "D", ">", "max_dis", ")", "]", "=", "np", ".", "inf", "\n", "D", "=", "np", ".", "sort", "(", "D", ")", "\n", "n", "=", "len", "(", "add_dis", ")", "\n", "acc", "=", "np", ".", "cumsum", "(", "np", ".", "ones", "(", "(", "1", ",", "n", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "n", "\n", "aps", "=", "VOCap", "(", "D", ",", "acc", ")", "\n", "return", "aps", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tools.train_linemod.main": [[42, 264], ["lib.network.PoseNet", "lib.network.PoseNet.cuda", "lib.network.PoseRefineNet", "lib.network.PoseRefineNet.cuda", "datasets.linemod.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.linemod.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "lib.loss.Loss", "lib.loss_refiner.Loss_refine", "time.time", "range", "tensorboardX.SummaryWriter.close", "open", "yaml.load", "tensorboardX.SummaryWriter", "print", "lib.network.PoseNet.load_state_dict", "lib.network.PoseRefineNet.load_state_dict", "int", "torch.Adam", "torch.Adam", "datasets.occlusion_linemod.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.listdir", "lib.logger.setup_logger", "lib.logger.setup_logger.info", "optim.Adam.zero_grad", "range", "print", "lib.logger.setup_logger.info", "lib.logger.setup_logger", "lib.logger.setup_logger.info", "lib.network.PoseNet.eval", "lib.network.PoseRefineNet.eval", "enumerate", "lib.logger.setup_logger.info", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "print", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lib.network.PoseRefineNet.parameters", "lib.network.PoseNet.parameters", "len", "len", "os.remove", "os.path.join", "lib.network.PoseNet.eval", "lib.network.PoseRefineNet.train", "lib.network.PoseNet.train", "enumerate", "os.path.join", "lib.network.PoseNet.", "lib.loss.Loss.", "loss.item", "vertex_loss.item", "pose_loss.item", "dis.item", "lib.logger.setup_logger.info", "float", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "lib.logger.setup_logger", "lib.logger.setup_logger.info", "lib.network.PoseNet.eval", "lib.network.PoseRefineNet.eval", "enumerate", "lib.logger.setup_logger.info", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "int", "torch.Adam", "print", "opt.list_obj.index", "len", "os.path.join", "lib.network.PoseNet.", "lib.loss.Loss.", "loss.item", "loss.item", "dis.item", "dis.item", "time.strftime", "len", "lib.logger.setup_logger.info", "points.cuda", "choose.cuda", "img.cuda", "target.cuda", "model_points.cuda", "model_kp.cuda", "vertex_gt.cuda", "idx.cuda", "target_r.cuda", "target_t.cuda", "range", "dis.item", "time.strftime", "lib.network.PoseRefineNet.state_dict", "lib.network.PoseNet.state_dict", "os.path.join", "lib.network.PoseNet.", "lib.loss.Loss.", "dis.item", "lib.logger.setup_logger.info", "float", "lib.network.PoseRefineNet.parameters", "len", "print", "points.cuda", "choose.cuda", "img.cuda", "target.cuda", "model_points.cuda", "model_kp.cuda", "vertex_gt.cuda", "idx.cuda", "target_r.cuda", "target_t.cuda", "range", "loss.backward", "lib.logger.setup_logger.info", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "optim.Adam.step", "optim.Adam.zero_grad", "time.gmtime", "points.size", "lib.network.PoseRefineNet.", "lib.loss_refiner.Loss_refine.", "time.strftime", "time.gmtime", "len", "lib.logger.setup_logger.info", "points.cuda", "choose.cuda", "img.cuda", "target.cuda", "model_points.cuda", "model_kp.cuda", "vertex_gt.cuda", "idx.cuda", "target_r.cuda", "target_t.cuda", "range", "dis.item", "time.strftime", "time.strftime", "points.size", "lib.network.PoseRefineNet.", "lib.loss_refiner.Loss_refine.", "dis.backward", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.strftime", "time.strftime", "time.gmtime", "points.size", "lib.network.PoseRefineNet.", "lib.loss_refiner.Loss_refine.", "time.strftime", "time.gmtime", "time.gmtime", "time.strftime", "int", "lib.network.PoseRefineNet.state_dict", "lib.network.PoseNet.state_dict", "time.time", "time.gmtime", "time.gmtime", "time.time", "time.strftime", "time.strftime", "time.gmtime", "time.gmtime", "time.time", "time.gmtime", "time.gmtime", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "opt", ".", "dataset", "==", "'linemod'", ":", "\n", "        ", "opt", ".", "num_obj", "=", "1", "\n", "opt", ".", "list_obj", "=", "[", "1", ",", "2", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", "\n", "opt", ".", "occ_list_obj", "=", "[", "1", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", "]", "\n", "opt", ".", "list_name", "=", "[", "'ape'", ",", "'benchvise'", ",", "'cam'", ",", "'can'", ",", "'cat'", ",", "'driller'", ",", "'duck'", ",", "'eggbox'", ",", "'glue'", ",", "'holepuncher'", ",", "'iron'", ",", "'lamp'", ",", "'phone'", "]", "\n", "obj_name", "=", "opt", ".", "list_name", "[", "opt", ".", "list_obj", ".", "index", "(", "opt", ".", "obj_id", ")", "]", "\n", "opt", ".", "sym_list", "=", "[", "10", ",", "11", "]", "\n", "opt", ".", "num_points", "=", "500", "\n", "meta_file", "=", "open", "(", "'{0}/models/models_info.yml'", ".", "format", "(", "opt", ".", "dataset_root", ")", ",", "'r'", ")", "\n", "meta", "=", "yaml", ".", "load", "(", "meta_file", ")", "\n", "diameter", "=", "meta", "[", "opt", ".", "obj_id", "]", "[", "'diameter'", "]", "/", "1000.0", "*", "0.1", "\n", "if", "opt", ".", "render", ":", "\n", "            ", "opt", ".", "repeat_num", "=", "1", "\n", "", "elif", "opt", ".", "fuse", ":", "\n", "            ", "opt", ".", "repeat_num", "=", "1", "\n", "", "else", ":", "\n", "            ", "opt", ".", "repeat_num", "=", "5", "\n", "", "writer", "=", "SummaryWriter", "(", "'experiments/runs/linemod/{}{}'", ".", "format", "(", "obj_name", ",", "opt", ".", "experiment_name", ")", ")", "\n", "opt", ".", "outf", "=", "'trained_models/linemod/{}{}'", ".", "format", "(", "obj_name", ",", "opt", ".", "experiment_name", ")", "\n", "opt", ".", "log_dir", "=", "'experiments/logs/linemod/{}{}'", ".", "format", "(", "obj_name", ",", "opt", ".", "experiment_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "outf", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opt", ".", "outf", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opt", ".", "log_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Unknown dataset'", ")", "\n", "return", "\n", "\n", "", "estimator", "=", "PoseNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_vote", "=", "9", ",", "num_obj", "=", "opt", ".", "num_obj", ")", "\n", "estimator", ".", "cuda", "(", ")", "\n", "refiner", "=", "PoseRefineNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_obj", "=", "opt", ".", "num_obj", ")", "\n", "refiner", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "resume_posenet", "!=", "''", ":", "\n", "        ", "estimator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'{0}/{1}'", ".", "format", "(", "opt", ".", "outf", ",", "opt", ".", "resume_posenet", ")", ")", ")", "\n", "", "if", "opt", ".", "resume_refinenet", "!=", "''", ":", "\n", "        ", "refiner", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'{0}/{1}'", ".", "format", "(", "opt", ".", "outf", ",", "opt", ".", "resume_refinenet", ")", ")", ")", "\n", "opt", ".", "refine_start", "=", "True", "\n", "opt", ".", "lr", "=", "opt", ".", "lr_refine", "\n", "opt", ".", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "iteration", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "refiner", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "refine_start", "=", "False", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "estimator", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "\n", "", "dataset", "=", "PoseDataset_linemod", "(", "'train'", ",", "opt", ".", "num_points", ",", "opt", ".", "dataset_root", ",", "opt", ".", "real", ",", "opt", ".", "render", ",", "opt", ".", "fuse", ",", "opt", ".", "obj_id", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "test_dataset", "=", "PoseDataset_linemod", "(", "'test'", ",", "opt", ".", "num_points", ",", "opt", ".", "dataset_root", ",", "True", ",", "False", ",", "False", ",", "opt", ".", "obj_id", ")", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "\n", "print", "(", "'>>>>>>>>----------Dataset loaded!---------<<<<<<<<\\nlength of the training set: {0}\\nlength of the testing set: {1}\\nnumber of sample points on mesh: {2}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "len", "(", "test_dataset", ")", ",", "opt", ".", "num_points", ")", ")", "\n", "if", "opt", ".", "obj_id", "in", "opt", ".", "occ_list_obj", ":", "\n", "        ", "occ_test_dataset", "=", "PoseDataset_occ", "(", "'test'", ",", "opt", ".", "num_points", ",", "opt", ".", "occ_dataset_root", ",", "opt", ".", "obj_id", ")", "\n", "occtestdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "occ_test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "print", "(", "'length of the occ testing set: {}'", ".", "format", "(", "len", "(", "occ_test_dataset", ")", ")", ")", "\n", "\n", "", "criterion", "=", "Loss", "(", "opt", ".", "num_points", ",", "opt", ".", "sym_list", ")", "\n", "criterion_refine", "=", "Loss_refine", "(", "opt", ".", "num_points", ",", "opt", ".", "sym_list", ")", "\n", "best_test", "=", "np", ".", "Inf", "\n", "\n", "if", "opt", ".", "start_epoch", "==", "1", ":", "\n", "        ", "for", "log", "in", "os", ".", "listdir", "(", "opt", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "log", ")", ")", "\n", "", "", "st_time", "=", "time", ".", "time", "(", ")", "\n", "train_scalar", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "start_epoch", ",", "opt", ".", "nepoch", ")", ":", "\n", "        ", "logger", "=", "setup_logger", "(", "'epoch%d'", "%", "epoch", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'epoch_%d_log.txt'", "%", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Train time {0}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "+", "', '", "+", "'Training started'", ")", ")", "\n", "train_count", "=", "0", "\n", "train_loss_avg", "=", "0.0", "\n", "train_loss", "=", "0.0", "\n", "train_dis_avg", "=", "0.0", "\n", "train_dis", "=", "0.0", "\n", "if", "opt", ".", "refine_start", ":", "\n", "            ", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "estimator", ".", "train", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "rep", "in", "range", "(", "opt", ".", "repeat_num", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "data", "\n", "if", "len", "(", "points", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "                    ", "print", "(", "'pass'", ")", "\n", "continue", "\n", "", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "points", ".", "cuda", "(", ")", ",", "choose", ".", "cuda", "(", ")", ",", "img", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "model_points", ".", "cuda", "(", ")", ",", "model_kp", ".", "cuda", "(", ")", ",", "vertex_gt", ".", "cuda", "(", ")", ",", "idx", ".", "cuda", "(", ")", ",", "target_r", ".", "cuda", "(", ")", ",", "target_t", ".", "cuda", "(", ")", "\n", "vertex_pred", ",", "c_pred", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ",", "new_target", "=", "criterion", "(", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "opt", ".", "obj_id", ",", "target_r", ",", "target_t", ")", "\n", "loss", "=", "10", "*", "vertex_loss", "+", "pose_loss", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                    ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                        ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_points", ",", "new_target", ",", "model_points", ",", "opt", ".", "obj_id", ")", "\n", "dis", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "train_loss_avg", "+=", "loss", ".", "item", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_dis_avg", "+=", "dis", ".", "item", "(", ")", "\n", "train_dis", "+=", "dis", ".", "item", "(", ")", "\n", "train_count", "+=", "1", "\n", "train_scalar", "+=", "1", "\n", "\n", "if", "train_count", "%", "opt", ".", "batch_size", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Train time {0} Epoch {1} Batch {2} Frame {3} Avg_loss:{4} Avg_diss:{5}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "int", "(", "train_count", "/", "opt", ".", "batch_size", ")", ",", "train_count", ",", "train_loss_avg", "/", "opt", ".", "batch_size", ",", "train_dis_avg", "/", "opt", ".", "batch_size", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod training loss'", ",", "train_loss_avg", "/", "opt", ".", "batch_size", ",", "train_scalar", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod training dis'", ",", "train_dis_avg", "/", "opt", ".", "batch_size", ",", "train_scalar", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_loss_avg", "=", "0", "\n", "train_dis_avg", "=", "0", "\n", "\n", "", "if", "train_count", "!=", "0", "and", "train_count", "%", "1000", "==", "0", ":", "\n", "                    ", "if", "opt", ".", "refine_start", ":", "\n", "                        ", "torch", ".", "save", "(", "refiner", ".", "state_dict", "(", ")", ",", "'{0}/pose_refine_model_current.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "estimator", ".", "state_dict", "(", ")", ",", "'{0}/pose_model_current.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'>>>>>>>>----------epoch {0} train finish---------<<<<<<<<'", ".", "format", "(", "epoch", ")", ")", "\n", "train_loss", "=", "train_loss", "/", "train_count", "\n", "train_dis", "=", "train_dis", "/", "train_count", "\n", "logger", ".", "info", "(", "'Train time {0} Epoch {1} TRAIN FINISH Avg loss: {2} Avg dis: {3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "train_loss", ",", "train_dis", ")", ")", "\n", "\n", "logger", "=", "setup_logger", "(", "'epoch%d_test'", "%", "epoch", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'epoch_%d_test_log.txt'", "%", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Test time {0}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "+", "', '", "+", "'Testing started'", ")", ")", "\n", "test_loss", "=", "0.0", "\n", "test_vertex_loss", "=", "0.0", "\n", "test_pose_loss", "=", "0.0", "\n", "test_dis", "=", "0.0", "\n", "test_count", "=", "0", "\n", "success_count", "=", "0", "\n", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "            ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "data", "\n", "if", "len", "(", "points", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "                ", "logger", ".", "info", "(", "'Test time {0} Lost detection!'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ")", ")", "\n", "continue", "\n", "", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "points", ".", "cuda", "(", ")", ",", "choose", ".", "cuda", "(", ")", ",", "img", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "model_points", ".", "cuda", "(", ")", ",", "model_kp", ".", "cuda", "(", ")", ",", "vertex_gt", ".", "cuda", "(", ")", ",", "idx", ".", "cuda", "(", ")", ",", "target_r", ".", "cuda", "(", ")", ",", "target_t", ".", "cuda", "(", ")", "\n", "vertex_pred", ",", "c_pred", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ",", "new_target", "=", "criterion", "(", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "opt", ".", "obj_id", ",", "target_r", ",", "target_t", ")", "\n", "loss", "=", "10", "*", "vertex_loss", "+", "pose_loss", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                    ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_points", ",", "new_target", ",", "model_points", ",", "opt", ".", "obj_id", ")", "\n", "\n", "", "", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "test_vertex_loss", "+=", "vertex_loss", ".", "item", "(", ")", "\n", "test_pose_loss", "+=", "pose_loss", ".", "item", "(", ")", "\n", "test_dis", "+=", "dis", ".", "item", "(", ")", "\n", "logger", ".", "info", "(", "'Test time {0} Test Frame No.{1} loss:{2} dis:{3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "test_count", ",", "loss", ",", "dis", ")", ")", "\n", "if", "dis", ".", "item", "(", ")", "<", "diameter", ":", "\n", "                ", "success_count", "+=", "1", "\n", "", "test_count", "+=", "1", "\n", "\n", "", "test_loss", "=", "test_loss", "/", "test_count", "\n", "test_vertex_loss", "=", "test_vertex_loss", "/", "test_count", "\n", "test_pose_loss", "=", "test_pose_loss", "/", "test_count", "\n", "test_dis", "=", "test_dis", "/", "test_count", "\n", "success_rate", "=", "float", "(", "success_count", ")", "/", "test_count", "\n", "logger", ".", "info", "(", "'Test time {0} Epoch {1} TEST FINISH Avg loss: {2} Avg dis: {3} Success rate: {4}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "test_loss", ",", "test_dis", ",", "success_rate", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod test loss'", ",", "test_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod test vertex loss'", ",", "test_vertex_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod test pose loss'", ",", "test_pose_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod test dis'", ",", "test_dis", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'linemod success rate'", ",", "success_rate", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "if", "test_dis", "<=", "best_test", ":", "\n", "            ", "best_test", "=", "test_dis", "\n", "", "if", "opt", ".", "refine_start", ":", "\n", "            ", "torch", ".", "save", "(", "refiner", ".", "state_dict", "(", ")", ",", "'{0}/pose_refine_model_{1}_{2}.pth'", ".", "format", "(", "opt", ".", "outf", ",", "epoch", ",", "test_dis", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "estimator", ".", "state_dict", "(", ")", ",", "'{0}/pose_model_{1}_{2}.pth'", ".", "format", "(", "opt", ".", "outf", ",", "epoch", ",", "test_dis", ")", ")", "\n", "", "print", "(", "epoch", ",", "'>>>>>>>>----------MODEL SAVED---------<<<<<<<<'", ")", "\n", "\n", "if", "opt", ".", "obj_id", "in", "opt", ".", "occ_list_obj", ":", "\n", "            ", "logger", "=", "setup_logger", "(", "'epoch%d_occ_test'", "%", "epoch", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'epoch_%d_occ_test_log.txt'", "%", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Occ test time {0}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "+", "', '", "+", "'Testing started'", ")", ")", "\n", "occ_test_dis", "=", "0.0", "\n", "occ_test_count", "=", "0", "\n", "occ_success_count", "=", "0", "\n", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "occtestdataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "data", "\n", "if", "len", "(", "points", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "                    ", "logger", ".", "info", "(", "'Occ test time {0} Lost detection!'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ")", ")", "\n", "continue", "\n", "", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "points", ".", "cuda", "(", ")", ",", "choose", ".", "cuda", "(", ")", ",", "img", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "model_points", ".", "cuda", "(", ")", ",", "model_kp", ".", "cuda", "(", ")", ",", "vertex_gt", ".", "cuda", "(", ")", ",", "idx", ".", "cuda", "(", ")", ",", "target_r", ".", "cuda", "(", ")", ",", "target_t", ".", "cuda", "(", ")", "\n", "vertex_pred", ",", "c_pred", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ",", "new_target", "=", "criterion", "(", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "opt", ".", "obj_id", ",", "target_r", ",", "target_t", ")", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                    ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                        ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_points", ",", "new_target", ",", "model_points", ",", "opt", ".", "obj_id", ")", "\n", "\n", "", "", "occ_test_dis", "+=", "dis", ".", "item", "(", ")", "\n", "logger", ".", "info", "(", "'Occ test time {0} Test Frame No.{1} dis:{2}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "occ_test_count", ",", "dis", ")", ")", "\n", "if", "dis", ".", "item", "(", ")", "<", "diameter", ":", "\n", "                    ", "occ_success_count", "+=", "1", "\n", "", "occ_test_count", "+=", "1", "\n", "\n", "", "occ_test_dis", "=", "occ_test_dis", "/", "occ_test_count", "\n", "occ_success_rate", "=", "float", "(", "occ_success_count", ")", "/", "occ_test_count", "\n", "logger", ".", "info", "(", "'Occ test time {0} Epoch {1} TEST FINISH Avg dis: {2} Success rate: {3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "occ_test_dis", ",", "occ_success_rate", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'occ test dis'", ",", "occ_test_dis", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'occ success rate'", ",", "occ_success_rate", ",", "epoch", ")", "\n", "\n", "", "if", "best_test", "<", "opt", ".", "refine_margin", "and", "not", "opt", ".", "refine_start", ":", "\n", "            ", "opt", ".", "refine_start", "=", "True", "\n", "opt", ".", "lr", "=", "opt", ".", "lr_refine", "\n", "opt", ".", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "iteration", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "refiner", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "print", "(", "'>>>>>>>>----------Refine started---------<<<<<<<<'", ")", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.tools.train_ycb.main": [[36, 199], ["lib.network.PoseNet", "lib.network.PoseNet.cuda", "lib.network.PoseRefineNet", "lib.network.PoseRefineNet.cuda", "datasets.ycb.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.ycb.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "lib.loss.Loss", "lib.loss_refiner.Loss_refine", "time.time", "range", "tensorboardX.SummaryWriter.close", "tensorboardX.SummaryWriter", "print", "lib.network.PoseNet.load_state_dict", "lib.network.PoseRefineNet.load_state_dict", "int", "torch.Adam", "torch.Adam", "os.listdir", "lib.logger.setup_logger", "lib.logger.setup_logger.info", "optim.Adam.zero_grad", "range", "print", "lib.logger.setup_logger.info", "lib.logger.setup_logger", "lib.logger.setup_logger.info", "lib.network.PoseNet.eval", "lib.network.PoseRefineNet.eval", "enumerate", "lib.logger.setup_logger.info", "lib.logger.setup_logger.info", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "print", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lib.network.PoseRefineNet.parameters", "lib.network.PoseNet.parameters", "len", "len", "os.remove", "os.path.join", "lib.network.PoseNet.eval", "lib.network.PoseRefineNet.train", "lib.network.PoseNet.train", "enumerate", "os.path.join", "lib.network.PoseNet.", "lib.loss.Loss.", "loss.item", "vertex_loss.item", "pose_loss.item", "dis.item", "lib.logger.setup_logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "int", "torch.Adam", "print", "os.path.join", "lib.network.PoseNet.", "lib.loss.Loss.", "loss.item", "loss.item", "dis.item", "dis.item", "time.strftime", "points.cuda", "choose.cuda", "img.cuda", "target.cuda", "model_points.cuda", "model_kp.cuda", "vertex_gt.cuda", "idx.cuda", "target_r.cuda", "target_t.cuda", "range", "dis.item", "time.strftime", "float", "lib.network.PoseRefineNet.state_dict", "lib.network.PoseNet.state_dict", "lib.network.PoseRefineNet.parameters", "points.cuda", "choose.cuda", "img.cuda", "target.cuda", "model_points.cuda", "model_kp.cuda", "vertex_gt.cuda", "idx.cuda", "target_r.cuda", "target_t.cuda", "range", "loss.backward", "lib.logger.setup_logger.info", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "optim.Adam.step", "optim.Adam.zero_grad", "time.gmtime", "lib.network.PoseRefineNet.", "lib.loss_refiner.Loss_refine.", "time.strftime", "time.gmtime", "float", "time.strftime", "lib.network.PoseRefineNet.", "lib.loss_refiner.Loss_refine.", "dis.backward", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "time.strftime", "time.gmtime", "time.gmtime", "time.strftime", "int", "lib.network.PoseRefineNet.state_dict", "lib.network.PoseNet.state_dict", "time.time", "time.gmtime", "time.time", "time.gmtime", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger", "home.repos.pwc.inspect_result.HuaWeitong_REDE.lib.logger.setup_logger", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward", "home.repos.pwc.inspect_result.HuaWeitong_REDE.torch_batch_svd.batch_svd.BatchSVDFunction.backward"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "opt", ".", "dataset", "==", "'ycb'", ":", "\n", "        ", "opt", ".", "num_obj", "=", "21", "\n", "opt", ".", "sym_list", "=", "[", "12", ",", "15", ",", "18", ",", "19", ",", "20", "]", "\n", "opt", ".", "num_points", "=", "1000", "\n", "writer", "=", "SummaryWriter", "(", "'experiments/runs/ycb/{0}'", ".", "format", "(", "opt", ".", "experiment_name", ")", ")", "\n", "opt", ".", "outf", "=", "'trained_models/ycb/{0}'", ".", "format", "(", "opt", ".", "experiment_name", ")", "\n", "opt", ".", "log_dir", "=", "'experiments/logs/ycb/{0}'", ".", "format", "(", "opt", ".", "experiment_name", ")", "\n", "opt", ".", "repeat_num", "=", "1", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "outf", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opt", ".", "outf", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opt", ".", "log_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Unknown dataset'", ")", "\n", "return", "\n", "\n", "", "estimator", "=", "PoseNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_vote", "=", "9", ",", "num_obj", "=", "opt", ".", "num_obj", ")", "\n", "estimator", ".", "cuda", "(", ")", "\n", "refiner", "=", "PoseRefineNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_obj", "=", "opt", ".", "num_obj", ")", "\n", "refiner", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "resume_posenet", "!=", "''", ":", "\n", "        ", "estimator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'{0}/{1}'", ".", "format", "(", "opt", ".", "outf", ",", "opt", ".", "resume_posenet", ")", ")", ")", "\n", "", "if", "opt", ".", "resume_refinenet", "!=", "''", ":", "\n", "        ", "refiner", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'{0}/{1}'", ".", "format", "(", "opt", ".", "outf", ",", "opt", ".", "resume_refinenet", ")", ")", ")", "\n", "opt", ".", "refine_start", "=", "True", "\n", "opt", ".", "lr", "=", "opt", ".", "lr_refine", "\n", "opt", ".", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "iteration", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "refiner", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "refine_start", "=", "False", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "estimator", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "\n", "", "dataset", "=", "PoseDataset_ycb", "(", "'train'", ",", "opt", ".", "num_points", ",", "True", ",", "opt", ".", "dataset_root", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "test_dataset", "=", "PoseDataset_ycb", "(", "'test'", ",", "opt", ".", "num_points", ",", "False", ",", "opt", ".", "dataset_root", ")", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "\n", "print", "(", "'>>>>>>>>----------Dataset loaded!---------<<<<<<<<\\nlength of the training set: {0}\\nlength of the testing set: {1}\\nnumber of sample points on mesh: {2}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "len", "(", "test_dataset", ")", ",", "opt", ".", "num_points", ")", ")", "\n", "\n", "criterion", "=", "Loss", "(", "opt", ".", "num_points", ",", "opt", ".", "sym_list", ")", "\n", "criterion_refine", "=", "Loss_refine", "(", "opt", ".", "num_points", ",", "opt", ".", "sym_list", ")", "\n", "best_test", "=", "np", ".", "Inf", "\n", "\n", "if", "opt", ".", "start_epoch", "==", "1", ":", "\n", "        ", "for", "log", "in", "os", ".", "listdir", "(", "opt", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "log", ")", ")", "\n", "", "", "st_time", "=", "time", ".", "time", "(", ")", "\n", "train_scalar", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "start_epoch", ",", "opt", ".", "nepoch", ")", ":", "\n", "        ", "logger", "=", "setup_logger", "(", "'epoch%d'", "%", "epoch", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'epoch_%d_log.txt'", "%", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Train time {0}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "+", "', '", "+", "'Training started'", ")", ")", "\n", "train_count", "=", "0", "\n", "train_loss_avg", "=", "0.0", "\n", "train_loss", "=", "0.0", "\n", "train_dis_avg", "=", "0.0", "\n", "train_dis", "=", "0.0", "\n", "if", "opt", ".", "refine_start", ":", "\n", "            ", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "estimator", ".", "train", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "rep", "in", "range", "(", "opt", ".", "repeat_num", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "data", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "points", ".", "cuda", "(", ")", ",", "choose", ".", "cuda", "(", ")", ",", "img", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "model_points", ".", "cuda", "(", ")", ",", "model_kp", ".", "cuda", "(", ")", ",", "vertex_gt", ".", "cuda", "(", ")", ",", "idx", ".", "cuda", "(", ")", ",", "target_r", ".", "cuda", "(", ")", ",", "target_t", ".", "cuda", "(", ")", "\n", "vertex_pred", ",", "c_pred", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ",", "new_target", "=", "criterion", "(", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "idx", ",", "target_r", ",", "target_t", ")", "\n", "loss", "=", "10", "*", "vertex_loss", "+", "pose_loss", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                    ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                        ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_points", ",", "new_target", ",", "model_points", ",", "idx", ")", "\n", "dis", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "", "train_loss_avg", "+=", "loss", ".", "item", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_dis_avg", "+=", "dis", ".", "item", "(", ")", "\n", "train_dis", "+=", "dis", ".", "item", "(", ")", "\n", "train_count", "+=", "1", "\n", "train_scalar", "+=", "1", "\n", "\n", "if", "train_count", "%", "opt", ".", "batch_size", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Train time {0} Epoch {1} Batch {2} Frame {3} Avg_loss:{4} Avg_diss:{5}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "int", "(", "train_count", "/", "opt", ".", "batch_size", ")", ",", "train_count", ",", "train_loss_avg", "/", "opt", ".", "batch_size", ",", "train_dis_avg", "/", "opt", ".", "batch_size", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb training loss'", ",", "train_loss_avg", "/", "opt", ".", "batch_size", ",", "train_scalar", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb training dis'", ",", "train_dis_avg", "/", "opt", ".", "batch_size", ",", "train_scalar", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_loss_avg", "=", "0", "\n", "train_dis_avg", "=", "0", "\n", "\n", "", "if", "train_count", "!=", "0", "and", "train_count", "%", "1000", "==", "0", ":", "\n", "                    ", "if", "opt", ".", "refine_start", ":", "\n", "                        ", "torch", ".", "save", "(", "refiner", ".", "state_dict", "(", ")", ",", "'{0}/pose_refine_model_current.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "estimator", ".", "state_dict", "(", ")", ",", "'{0}/pose_model_current.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'>>>>>>>>----------epoch {0} train finish---------<<<<<<<<'", ".", "format", "(", "epoch", ")", ")", "\n", "train_loss", "=", "train_loss", "/", "train_count", "\n", "train_dis", "=", "train_dis", "/", "train_count", "\n", "logger", ".", "info", "(", "'Train time {0} Epoch {1} TRAIN FINISH Avg loss: {2} Avg dis: {3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "train_loss", ",", "train_dis", ")", ")", "\n", "\n", "logger", "=", "setup_logger", "(", "'epoch%d_test'", "%", "epoch", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'epoch_%d_test_log.txt'", "%", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Test time {0}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "+", "', '", "+", "'Testing started'", ")", ")", "\n", "test_loss", "=", "0.0", "\n", "test_vertex_loss", "=", "0.0", "\n", "test_pose_loss", "=", "0.0", "\n", "test_dis", "=", "0.0", "\n", "test_count", "=", "0", "\n", "success_count", "=", "0", "\n", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "            ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "data", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "model_kp", ",", "vertex_gt", ",", "idx", ",", "target_r", ",", "target_t", "=", "points", ".", "cuda", "(", ")", ",", "choose", ".", "cuda", "(", ")", ",", "img", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", ",", "model_points", ".", "cuda", "(", ")", ",", "model_kp", ".", "cuda", "(", ")", ",", "vertex_gt", ".", "cuda", "(", ")", ",", "idx", ".", "cuda", "(", ")", ",", "target_r", ".", "cuda", "(", ")", ",", "target_t", ".", "cuda", "(", ")", "\n", "vertex_pred", ",", "c_pred", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "vertex_loss", ",", "pose_loss", ",", "dis", ",", "new_points", ",", "new_target", "=", "criterion", "(", "vertex_pred", ",", "vertex_gt", ",", "c_pred", ",", "points", ",", "target", ",", "model_points", ",", "model_kp", ",", "idx", ",", "target_r", ",", "target_t", ")", "\n", "loss", "=", "10", "*", "vertex_loss", "+", "pose_loss", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                    ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_points", ",", "new_target", ",", "model_points", ",", "idx", ")", "\n", "", "", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "test_vertex_loss", "+=", "vertex_loss", ".", "item", "(", ")", "\n", "test_pose_loss", "+=", "pose_loss", ".", "item", "(", ")", "\n", "test_dis", "+=", "dis", ".", "item", "(", ")", "\n", "logger", ".", "info", "(", "'Test time {0} Test Frame No.{1} loss:{2} dis:{3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "test_count", ",", "loss", ",", "dis", ")", ")", "\n", "test_count", "+=", "1", "\n", "if", "dis", ".", "item", "(", ")", "<", "0.02", ":", "\n", "                ", "success_count", "+=", "1", "\n", "\n", "", "", "test_loss", "=", "test_loss", "/", "test_count", "\n", "test_vertex_loss", "=", "test_vertex_loss", "/", "test_count", "\n", "test_pose_loss", "=", "test_pose_loss", "/", "test_count", "\n", "test_dis", "=", "test_dis", "/", "test_count", "\n", "logger", ".", "info", "(", "'Test time {0} Epoch {1} TEST FINISH Avg loss: {2} Avg dis: {3}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", ",", "epoch", ",", "test_loss", ",", "test_dis", ")", ")", "\n", "logger", ".", "info", "(", "'Success rate: {}'", ".", "format", "(", "float", "(", "success_count", ")", "/", "test_count", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb test loss'", ",", "test_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb test vertex loss'", ",", "test_vertex_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb test pose loss'", ",", "test_pose_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb test dis'", ",", "test_dis", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'ycb success rate'", ",", "float", "(", "success_count", ")", "/", "test_count", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "if", "test_dis", "<=", "best_test", ":", "\n", "            ", "best_test", "=", "test_dis", "\n", "", "if", "opt", ".", "refine_start", ":", "\n", "            ", "torch", ".", "save", "(", "refiner", ".", "state_dict", "(", ")", ",", "'{0}/pose_refine_model_{1}_{2}.pth'", ".", "format", "(", "opt", ".", "outf", ",", "epoch", ",", "test_dis", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "estimator", ".", "state_dict", "(", ")", ",", "'{0}/pose_model_{1}_{2}.pth'", ".", "format", "(", "opt", ".", "outf", ",", "epoch", ",", "test_dis", ")", ")", "\n", "", "print", "(", "epoch", ",", "'>>>>>>>>----------MODEL SAVED---------<<<<<<<<'", ")", "\n", "\n", "if", "best_test", "<", "opt", ".", "refine_margin", "and", "not", "opt", ".", "refine_start", ":", "\n", "            ", "opt", ".", "refine_start", "=", "True", "\n", "opt", ".", "lr", "=", "opt", ".", "lr_refine", "\n", "opt", ".", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "iteration", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "refiner", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "print", "(", "'>>>>>>>>----------Refine started---------<<<<<<<<'", ")", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.best_fit_transform": [[6, 48], ["numpy.mean", "numpy.mean", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.linalg.det", "numpy.dot", "numpy.dot"], "function", ["None"], ["def", "best_fit_transform", "(", "A", ",", "B", ")", ":", "\n", "    ", "'''\n    Calculates the least-squares best-fit transform that maps corresponding points A to B in m spatial dimensions\n    Input:\n      A: Nxm numpy array of corresponding points\n      B: Nxm numpy array of corresponding points\n    Returns:\n      T: (m+1)x(m+1) homogeneous transformation matrix that maps A on to B\n      R: mxm rotation matrix\n      t: mx1 translation vector\n    '''", "\n", "\n", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# translate points to their centroids", "\n", "centroid_A", "=", "np", ".", "mean", "(", "A", ",", "axis", "=", "0", ")", "\n", "centroid_B", "=", "np", ".", "mean", "(", "B", ",", "axis", "=", "0", ")", "\n", "AA", "=", "A", "-", "centroid_A", "\n", "BB", "=", "B", "-", "centroid_B", "\n", "\n", "# rotation matrix", "\n", "H", "=", "np", ".", "dot", "(", "AA", ".", "T", ",", "BB", ")", "\n", "U", ",", "S", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# special reflection case", "\n", "if", "np", ".", "linalg", ".", "det", "(", "R", ")", "<", "0", ":", "\n", "       ", "Vt", "[", "m", "-", "1", ",", ":", "]", "*=", "-", "1", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# translation", "\n", "", "t", "=", "centroid_B", ".", "T", "-", "np", ".", "dot", "(", "R", ",", "centroid_A", ".", "T", ")", "\n", "\n", "# homogeneous transformation", "\n", "T", "=", "np", ".", "identity", "(", "m", "+", "1", ")", "\n", "T", "[", ":", "m", ",", ":", "m", "]", "=", "R", "\n", "T", "[", ":", "m", ",", "m", "]", "=", "t", "\n", "\n", "return", "T", ",", "R", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.nearest_neighbor": [[50, 67], ["sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "distances.ravel", "indices.ravel"], "function", ["None"], ["", "def", "nearest_neighbor", "(", "src", ",", "dst", ")", ":", "\n", "    ", "'''\n    Find the nearest (Euclidean) neighbor in dst for each point in src\n    Input:\n        src: Nxm array of points\n        dst: Nxm array of points\n    Output:\n        distances: Euclidean distances of the nearest neighbor\n        indices: dst indices of the nearest neighbor\n    '''", "\n", "\n", "assert", "src", ".", "shape", "==", "dst", ".", "shape", "\n", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "neigh", ".", "fit", "(", "dst", ")", "\n", "distances", ",", "indices", "=", "neigh", ".", "kneighbors", "(", "src", ",", "return_distance", "=", "True", ")", "\n", "return", "distances", ".", "ravel", "(", ")", ",", "indices", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.icp": [[69, 121], ["numpy.ones", "numpy.ones", "numpy.copy", "numpy.copy", "range", "icp.best_fit_transform", "numpy.dot", "icp.nearest_neighbor", "icp.best_fit_transform", "numpy.dot", "numpy.mean", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.best_fit_transform", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.nearest_neighbor", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.best_fit_transform"], ["", "def", "icp", "(", "A", ",", "B", ",", "init_pose", "=", "None", ",", "max_iterations", "=", "20", ",", "tolerance", "=", "0.001", ")", ":", "\n", "    ", "'''\n    The Iterative Closest Point method: finds best-fit transform that maps points A on to points B\n    Input:\n        A: Nxm numpy array of source mD points\n        B: Nxm numpy array of destination mD point\n        init_pose: (m+1)x(m+1) homogeneous transformation\n        max_iterations: exit algorithm after max_iterations\n        tolerance: convergence criteria\n    Output:\n        T: final homogeneous transformation that maps A on to B\n        distances: Euclidean distances (errors) of the nearest neighbor\n        i: number of iterations to converge\n    '''", "\n", "\n", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# make points homogeneous, copy them to maintain the originals", "\n", "src", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "A", ".", "shape", "[", "0", "]", ")", ")", "\n", "dst", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "B", ".", "shape", "[", "0", "]", ")", ")", "\n", "src", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "A", ".", "T", ")", "\n", "dst", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "B", ".", "T", ")", "\n", "\n", "# apply the initial pose estimation", "\n", "if", "init_pose", "is", "not", "None", ":", "\n", "        ", "src", "=", "np", ".", "dot", "(", "init_pose", ",", "src", ")", "\n", "\n", "", "prev_error", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "max_iterations", ")", ":", "\n", "# find the nearest neighbors between the current source and destination points", "\n", "        ", "distances", ",", "indices", "=", "nearest_neighbor", "(", "src", "[", ":", "m", ",", ":", "]", ".", "T", ",", "dst", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "\n", "# compute the transformation between the current source and nearest destination points", "\n", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "src", "[", ":", "m", ",", ":", "]", ".", "T", ",", "dst", "[", ":", "m", ",", "indices", "]", ".", "T", ")", "\n", "\n", "# update the current source", "\n", "src", "=", "np", ".", "dot", "(", "T", ",", "src", ")", "\n", "\n", "# check error", "\n", "mean_error", "=", "np", ".", "mean", "(", "distances", ")", "\n", "if", "np", ".", "abs", "(", "prev_error", "-", "mean_error", ")", "<", "tolerance", ":", "\n", "            ", "break", "\n", "", "prev_error", "=", "mean_error", "\n", "\n", "# calculate final transformation", "\n", "", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "A", ",", "src", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "\n", "return", "T", ",", "distances", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.my_nearest_neighbor": [[124, 140], ["sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "distances.ravel", "indices.ravel"], "function", ["None"], ["", "def", "my_nearest_neighbor", "(", "src", ",", "dst", ")", ":", "\n", "    ", "'''\n    Find the nearest (Euclidean) neighbor in dst for each point in src\n    Input:\n        src: Nxm array of points\n        dst: Nxm array of points\n    Output:\n        distances: Euclidean distances of the nearest neighbor\n        indices: dst indices of the nearest neighbor\n    '''", "\n", "\n", "# neigh = NearestNeighbors(n_neighbors=1, radius=2)", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "neigh", ".", "fit", "(", "dst", ")", "\n", "distances", ",", "indices", "=", "neigh", ".", "kneighbors", "(", "src", ",", "return_distance", "=", "True", ")", "\n", "return", "distances", ".", "ravel", "(", ")", ",", "indices", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.my_icp": [[142, 199], ["numpy.ones", "numpy.ones", "numpy.copy", "numpy.copy", "range", "icp.best_fit_transform", "numpy.dot", "icp.my_nearest_neighbor", "icp.best_fit_transform", "numpy.dot", "numpy.mean", "numpy.abs", "numpy.min"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.best_fit_transform", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.my_nearest_neighbor", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.icp.best_fit_transform"], ["", "def", "my_icp", "(", "A", ",", "B", ",", "init_pose", "=", "None", ",", "max_iterations", "=", "20", ",", "tolerance", "=", "0.001", ")", ":", "\n", "    ", "'''\n    The Iterative Closest Point method: finds best-fit transform that maps points A on to points B\n    Input:\n        A: Nxm numpy array of source mD points\n        B: Nxm numpy array of destination mD point\n        init_pose: (m+1)x(m+1) homogeneous transformation\n        max_iterations: exit algorithm after max_iterations\n        tolerance: convergence criteria\n    Output:\n        T: final homogeneous transformation that maps A on to B\n        distances: Euclidean distances (errors) of the nearest neighbor\n        i: number of iterations to converge\n    '''", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# make points homogeneous, copy them to maintain the originals", "\n", "src", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "A", ".", "shape", "[", "0", "]", ")", ")", "\n", "dst", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "B", ".", "shape", "[", "0", "]", ")", ")", "\n", "src", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "A", ".", "T", ")", "\n", "dst", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "B", ".", "T", ")", "\n", "\n", "# apply the initial pose estimation", "\n", "if", "init_pose", "is", "not", "None", ":", "\n", "        ", "src", "=", "np", ".", "dot", "(", "init_pose", ",", "src", ")", "\n", "\n", "", "prev_error", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "max_iterations", ")", ":", "\n", "# find the nearest neighbors between the current source and destination points", "\n", "# distances, indices = my_nearest_neighbor(src[:m,:].T, dst[:m,:].T)", "\n", "        ", "distances", ",", "indices", "=", "my_nearest_neighbor", "(", "dst", "[", ":", "m", ",", ":", "]", ".", "T", ",", "src", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "# print(\"distance in icp: \", np.mean(distances))", "\n", "\n", "index_bool", "=", "distances", "<", "np", ".", "min", "(", "distances", ")", "+", "0.01", "\n", "distances", "=", "distances", "[", "index_bool", "]", "\n", "indices", "=", "indices", "[", "index_bool", "]", "\n", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "src", "[", ":", "m", ",", "indices", "]", ".", "T", ",", "dst", "[", ":", "m", ",", "index_bool", "]", ".", "T", ")", "\n", "\n", "# compute the transformation between the current source and nearest destination points", "\n", "# T,_,_ = best_fit_transform(src[:m,indices].T, dst[:m,:].T)", "\n", "\n", "# update the current source", "\n", "src", "=", "np", ".", "dot", "(", "T", ",", "src", ")", "\n", "\n", "# check error", "\n", "mean_error", "=", "np", ".", "mean", "(", "distances", ")", "\n", "if", "np", ".", "abs", "(", "prev_error", "-", "mean_error", ")", "<", "tolerance", ":", "\n", "            ", "break", "\n", "", "prev_error", "=", "mean_error", "\n", "\n", "# calculate final transformation", "\n", "", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "A", ",", "src", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "\n", "return", "T", ",", "distances", ",", "i", "\n", "", ""]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.loaddata": [[13, 80], ["numpy.getmaskarray", "numpy.transpose", "load.get_bbox", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "numpy.array", "random.sample", "numpy.delete", "numpy.dot", "numpy.add", "numpy.add", "torchvision.Normalize", "numpy.masked_not_equal", "len", "numpy.getmaskarray", "numpy.array", "load.mask_to_bbox", "mask[].flatten().nonzero", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.zeros", "numpy.random.shuffle", "numpy.pad", "numpy.concatenate", "load.ply_vtx", "numpy.dot", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "transforms.Normalize.unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.masked_equal", "numpy.getmaskarray", "len", "range", "len", "model_kp.astype", "np.add.astype", "numpy.array", "numpy.masked_equal", "mask[].flatten", "np.zeros.nonzero", "range", "range", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "transforms.Normalize.", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "len", "range", "range", "depth[].flatten", "xmap[].flatten", "ymap[].flatten", "cloud.astype", "np.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "np.add.astype", "np.delete.astype"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.mask_to_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.ply_vtx"], ["def", "loaddata", "(", "img", ",", "depth", ",", "label", ",", "pose", ",", "model_file", ",", "kp", ")", ":", "\n", "\n", "    ", "num_points", "=", "500", "\n", "cam_cx", "=", "325.26110", "\n", "cam_cy", "=", "242.04899", "\n", "cam_fx", "=", "572.41140", "\n", "cam_fy", "=", "573.57043", "\n", "\n", "mask_depth", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "depth", ",", "0", ")", ")", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "2", ":", "\n", "        ", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "np", ".", "array", "(", "255", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "np", ".", "array", "(", "[", "255", ",", "255", ",", "255", "]", ")", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "", "mask", "=", "mask_label", "*", "mask_depth", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_masked", "=", "img", "\n", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "get_bbox", "(", "mask_to_bbox", "(", "mask_label", ")", ")", "\n", "img_masked", "=", "img_masked", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "\n", "choose", "=", "mask", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "len", "(", "choose", ")", "==", "0", ":", "\n", "        ", "cc", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", "\n", "return", "(", "cc", ",", "cc", ",", "cc", ",", "cc", ",", "cc", ",", "cc", ",", "cc", ")", "\n", "\n", "", "if", "len", "(", "choose", ")", ">", "num_points", ":", "\n", "        ", "c_mask", "=", "np", ".", "zeros", "(", "len", "(", "choose", ")", ",", "dtype", "=", "int", ")", "\n", "c_mask", "[", ":", "num_points", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "c_mask", ")", "\n", "choose", "=", "choose", "[", "c_mask", ".", "nonzero", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "choose", "=", "np", ".", "pad", "(", "choose", ",", "(", "0", ",", "num_points", "-", "len", "(", "choose", ")", ")", ",", "'wrap'", ")", "\n", "\n", "", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "depth_masked", "=", "depth", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xmap_masked", "=", "xmap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ymap_masked", "=", "ymap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "choose", "=", "np", ".", "array", "(", "[", "choose", "]", ")", "\n", "cam_scale", "=", "1.0", "\n", "pt2", "=", "depth_masked", "*", "cam_scale", "\n", "pt0", "=", "(", "ymap_masked", "-", "cam_cx", ")", "*", "pt2", "/", "cam_fx", "\n", "pt1", "=", "(", "xmap_masked", "-", "cam_cy", ")", "*", "pt2", "/", "cam_fy", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "pt0", ",", "pt1", ",", "pt2", ")", ",", "axis", "=", "1", ")", "/", "1000.0", "\n", "\n", "model_points", "=", "ply_vtx", "(", "model_file", ")", "/", "1000.0", "\n", "dellist", "=", "[", "j", "for", "j", "in", "range", "(", "0", ",", "len", "(", "model_points", ")", ")", "]", "\n", "dellist", "=", "random", ".", "sample", "(", "dellist", ",", "len", "(", "model_points", ")", "-", "num_points", ")", "\n", "model_points", "=", "np", ".", "delete", "(", "model_points", ",", "dellist", ",", "axis", "=", "0", ")", "\n", "\n", "target_r", "=", "pose", "[", ":", "3", ",", ":", "3", "]", "\n", "target_t", "=", "pose", "[", ":", "3", ",", "3", "]", "\n", "target", "=", "np", ".", "dot", "(", "model_points", ",", "target_r", ".", "T", ")", "\n", "target", "=", "np", ".", "add", "(", "target", ",", "target_t", ")", "\n", "\n", "model_kp", "=", "kp", "\n", "scene_kp", "=", "np", ".", "add", "(", "np", ".", "dot", "(", "model_kp", ",", "target_r", ".", "T", ")", ",", "target_t", ")", "\n", "\n", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "torch", ".", "from_numpy", "(", "cloud", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "LongTensor", "(", "choose", ".", "astype", "(", "np", ".", "int32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "norm", "(", "torch", ".", "from_numpy", "(", "(", "img_masked", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "model_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "model_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "scene_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.loaddata_occ": [[81, 145], ["numpy.getmaskarray", "numpy.getmaskarray", "numpy.transpose", "load.get_bbox", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "numpy.array", "random.sample", "numpy.delete", "numpy.dot", "numpy.add", "numpy.add", "torchvision.Normalize", "numpy.masked_not_equal", "numpy.masked_equal", "numpy.array", "load.mask_to_bbox", "mask[].flatten().nonzero", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.zeros", "numpy.random.shuffle", "numpy.pad", "numpy.concatenate", "load.ply_vtx", "numpy.dot", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "transforms.Normalize.unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "len", "range", "len", "model_kp.astype", "np.add.astype", "mask[].flatten", "np.zeros.nonzero", "range", "range", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "transforms.Normalize.", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "range", "range", "depth[].flatten", "xmap[].flatten", "ymap[].flatten", "cloud.astype", "np.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "np.add.astype", "np.delete.astype"], "function", ["home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.mask_to_bbox", "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.ply_vtx"], ["", "def", "loaddata_occ", "(", "img", ",", "depth", ",", "label", ",", "pose", ",", "model_file", ",", "kp", ")", ":", "\n", "\n", "    ", "num_points", "=", "500", "\n", "cam_cx", "=", "325.26110", "\n", "cam_cy", "=", "242.04899", "\n", "cam_fx", "=", "572.41140", "\n", "cam_fy", "=", "573.57043", "\n", "\n", "mask_depth", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_not_equal", "(", "depth", ",", "0", ")", ")", "\n", "mask_label", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "np", ".", "array", "(", "1", ")", ")", ")", "\n", "mask", "=", "mask_label", "*", "mask_depth", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_masked", "=", "img", "\n", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "get_bbox", "(", "mask_to_bbox", "(", "mask_label", ")", ")", "\n", "img_masked", "=", "img_masked", "[", ":", ",", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", "\n", "\n", "choose", "=", "mask", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "len", "(", "choose", ")", "==", "0", ":", "\n", "        ", "cc", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", "\n", "return", "(", "cc", ",", "cc", ",", "cc", ",", "cc", ",", "cc", ")", "\n", "\n", "", "if", "len", "(", "choose", ")", ">", "num_points", ":", "\n", "        ", "c_mask", "=", "np", ".", "zeros", "(", "len", "(", "choose", ")", ",", "dtype", "=", "int", ")", "\n", "c_mask", "[", ":", "num_points", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "c_mask", ")", "\n", "choose", "=", "choose", "[", "c_mask", ".", "nonzero", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "choose", "=", "np", ".", "pad", "(", "choose", ",", "(", "0", ",", "num_points", "-", "len", "(", "choose", ")", ")", ",", "'wrap'", ")", "\n", "\n", "", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "depth_masked", "=", "depth", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xmap_masked", "=", "xmap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ymap_masked", "=", "ymap", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", "]", ".", "flatten", "(", ")", "[", "choose", "]", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "choose", "=", "np", ".", "array", "(", "[", "choose", "]", ")", "\n", "cam_scale", "=", "1.0", "\n", "pt2", "=", "depth_masked", "*", "cam_scale", "\n", "pt0", "=", "(", "ymap_masked", "-", "cam_cx", ")", "*", "pt2", "/", "cam_fx", "\n", "pt1", "=", "(", "xmap_masked", "-", "cam_cy", ")", "*", "pt2", "/", "cam_fy", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "pt0", ",", "pt1", ",", "pt2", ")", ",", "axis", "=", "1", ")", "/", "1000.0", "\n", "\n", "model_points", "=", "ply_vtx", "(", "model_file", ")", "/", "1000.0", "\n", "dellist", "=", "[", "j", "for", "j", "in", "range", "(", "0", ",", "len", "(", "model_points", ")", ")", "]", "\n", "dellist", "=", "random", ".", "sample", "(", "dellist", ",", "len", "(", "model_points", ")", "-", "num_points", ")", "\n", "model_points", "=", "np", ".", "delete", "(", "model_points", ",", "dellist", ",", "axis", "=", "0", ")", "\n", "\n", "target_r", "=", "pose", "[", ":", "3", ",", ":", "3", "]", "\n", "target_t", "=", "pose", "[", ":", "3", ",", "3", "]", "\n", "target", "=", "np", ".", "dot", "(", "model_points", ",", "target_r", ".", "T", ")", "\n", "target", "=", "np", ".", "add", "(", "target", ",", "target_t", ")", "\n", "\n", "model_kp", "=", "kp", "\n", "scene_kp", "=", "np", ".", "add", "(", "np", ".", "dot", "(", "model_kp", ",", "target_r", ".", "T", ")", ",", "target_t", ")", "\n", "\n", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "torch", ".", "from_numpy", "(", "cloud", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "LongTensor", "(", "choose", ".", "astype", "(", "np", ".", "int32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "norm", "(", "torch", ".", "from_numpy", "(", "(", "img_masked", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "model_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "model_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "scene_kp", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.ply_vtx": [[150, 162], ["open", "open.readline", "open.readline", "int", "range", "numpy.array", "open.readline().strip", "open.readline().strip", "pts.append", "open.readline().split", "numpy.float32", "open.readline", "open.readline", "open.readline", "open.readline().split", "open.readline"], "function", ["None"], ["def", "ply_vtx", "(", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ")", "\n", "assert", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "==", "\"ply\"", "\n", "f", ".", "readline", "(", ")", "\n", "f", ".", "readline", "(", ")", "\n", "N", "=", "int", "(", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "while", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "!=", "\"end_header\"", ":", "\n", "        ", "continue", "\n", "", "pts", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "        ", "pts", ".", "append", "(", "np", ".", "float32", "(", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "[", ":", "3", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.compute_vertex_hcoords": [[163, 169], ["numpy.ones"], "function", ["None"], ["", "def", "compute_vertex_hcoords", "(", "points", ",", "hcoords", ")", ":", "\n", "    ", "m", "=", "hcoords", ".", "shape", "[", "0", "]", "\n", "m_matrix", "=", "np", ".", "ones", "(", "(", "1", ",", "m", ",", "1", ")", ")", "\n", "vertex", "=", "points", "[", ":", ",", "None", ",", ":", "]", "*", "m_matrix", "\n", "vertex", "=", "hcoords", "[", "None", ",", ":", ",", ":", "]", "-", "vertex", "\n", "return", "vertex", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.mask_to_bbox": [[170, 185], ["mask.astype.astype", "cv2.findContours", "cv2.boundingRect"], "function", ["None"], ["", "def", "mask_to_bbox", "(", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "_", ",", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "mask", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "x", "=", "0", "\n", "y", "=", "0", "\n", "w", "=", "0", "\n", "h", "=", "0", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "tmp_x", ",", "tmp_y", ",", "tmp_w", ",", "tmp_h", "=", "cv2", ".", "boundingRect", "(", "contour", ")", "\n", "if", "tmp_w", "*", "tmp_h", ">", "w", "*", "h", ":", "\n", "            ", "x", "=", "tmp_x", "\n", "y", "=", "tmp_y", "\n", "w", "=", "tmp_w", "\n", "h", "=", "tmp_h", "\n", "", "", "return", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox": [[186, 229], ["range", "range", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_bbox", "(", "bbox", ")", ":", "\n", "    ", "bbx", "=", "[", "bbox", "[", "1", "]", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "]", "\n", "if", "bbx", "[", "0", "]", "<", "0", ":", "\n", "        ", "bbx", "[", "0", "]", "=", "0", "\n", "", "if", "bbx", "[", "1", "]", ">=", "480", ":", "\n", "        ", "bbx", "[", "1", "]", "=", "479", "\n", "", "if", "bbx", "[", "2", "]", "<", "0", ":", "\n", "        ", "bbx", "[", "2", "]", "=", "0", "\n", "", "if", "bbx", "[", "3", "]", ">=", "640", ":", "\n", "        ", "bbx", "[", "3", "]", "=", "639", "\n", "", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "bbx", "[", "0", "]", ",", "bbx", "[", "1", "]", ",", "bbx", "[", "2", "]", ",", "bbx", "[", "3", "]", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "480", ":", "\n", "        ", "delt", "=", "rmax", "-", "480", "\n", "rmax", "=", "480", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "640", ":", "\n", "        ", "delt", "=", "cmax", "-", "640", "\n", "cmax", "=", "640", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.HuaWeitong_REDE.utils.load.get_bbox_mask": [[230, 271], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_bbox_mask", "(", "label", ")", ":", "\n", "    ", "rows", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "label", ",", "axis", "=", "0", ")", "\n", "if", "(", "np", ".", "where", "(", "rows", ")", "[", "0", "]", ")", ".", "shape", "[", "0", "]", "==", "0", "or", "(", "np", ".", "where", "(", "cols", ")", "[", "0", "]", ")", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", "\n", "", "rmin", ",", "rmax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "cmin", ",", "cmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "rmax", "+=", "1", "\n", "cmax", "+=", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "", "", ""]]}