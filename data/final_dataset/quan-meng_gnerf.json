{"home.repos.pwc.inspect_result.quan-meng_gnerf.None.train.open_tensorboard": [[18, 27], ["subprocess.Popen", "atexit.register", "os.kill"], "function", ["None"], ["def", "open_tensorboard", "(", "log_dir", ")", ":", "\n", "    ", "p", "=", "subprocess", ".", "Popen", "(", "\n", "[", "\"tensorboard\"", ",", "\"--logdir\"", ",", "log_dir", ",", "'--bind_all'", ",", "'--reload_multifile'", ",", "'True'", ",", "'--load_fast'", ",", "'false'", "]", "\n", ")", "\n", "\n", "def", "killme", "(", ")", ":", "\n", "        ", "os", ".", "kill", "(", "p", ".", "pid", ",", "signal", ".", "SIGTERM", ")", "\n", "\n", "", "atexit", ".", "register", "(", "killme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.None.train.build_scheduler": [[29, 45], ["isinstance", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.StepLR", "int", "lr_anneal_every.split"], "function", ["None"], ["", "def", "build_scheduler", "(", "optimizer", ",", "lr_anneal_every", ",", "lr_anneal", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "if", "isinstance", "(", "lr_anneal_every", ",", "str", ")", ":", "\n", "        ", "milestones", "=", "[", "int", "(", "m", ")", "for", "m", "in", "lr_anneal_every", ".", "split", "(", "','", ")", "]", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "milestones", "=", "milestones", ",", "\n", "gamma", "=", "lr_anneal", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "\n", "step_size", "=", "lr_anneal_every", ",", "\n", "gamma", "=", "lr_anneal", ",", "\n", "last_epoch", "=", "last_epoch", "\n", ")", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.None.train.build_optimizers": [[47, 68], ["model.parameters", "train.build_scheduler", "torch.optim.RMSprop", "torch.optim.Adam", "torch.optim.SGD"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.None.train.build_scheduler"], ["", "def", "build_optimizers", "(", "model", ",", "optim_cfg", ",", "it", ")", ":", "\n", "    ", "params", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "# Optimizers", "\n", "if", "optim_cfg", "[", "'type'", "]", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "params", ",", "lr", "=", "optim_cfg", "[", "'lr'", "]", ",", "alpha", "=", "0.99", ",", "eps", "=", "1e-8", ")", "\n", "", "elif", "optim_cfg", "[", "'type'", "]", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "optim_cfg", "[", "'lr'", "]", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "eps", "=", "1e-8", ")", "\n", "", "elif", "optim_cfg", "[", "'type'", "]", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "optim_cfg", "[", "'lr'", "]", ",", "momentum", "=", "0.", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Learning rate anneling", "\n", "", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "# create learning reate scheduler", "\n", "scheduler", "=", "build_scheduler", "(", "optimizer", ",", "optim_cfg", "[", "'lr_anneal_every'", "]", ",", "optim_cfg", "[", "'lr_anneal'", "]", ",", "it", ")", "\n", "# ensure lr is not decreased again", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.__init__": [[19, 64], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "generator", ",", "discriminator", ",", "inv_net", ",", "train_pose_params", ",", "val_pose_params", ",", "\n", "optim_g", ",", "optim_d", ",", "optim_i", ",", "optim_t", ",", "optim_v", ",", "\n", "scheduler_g", ",", "scheduler_d", ",", "scheduler_i", ",", "scheduler_t", ",", "scheduler_v", ",", "\n", "train_loader", ",", "eval_loader", ",", "dynamic_patch_sampler", ",", "static_patch_sampler", ",", "full_img_sampler", ",", "\n", "writer", ",", "device", ",", "it", "=", "-", "1", ",", "epoch", "=", "-", "1", ",", "psnr_best", "=", "-", "float", "(", "'inf'", ")", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "inv_net", "=", "inv_net", "\n", "self", ".", "train_pose_params", "=", "train_pose_params", "\n", "self", ".", "val_pose_params", "=", "val_pose_params", "\n", "self", ".", "optim_g", "=", "optim_g", "\n", "self", ".", "optim_d", "=", "optim_d", "\n", "self", ".", "optim_i", "=", "optim_i", "\n", "self", ".", "optim_t", "=", "optim_t", "\n", "self", ".", "optim_v", "=", "optim_v", "\n", "self", ".", "scheduler_g", "=", "scheduler_g", "\n", "self", ".", "scheduler_d", "=", "scheduler_d", "\n", "self", ".", "scheduler_i", "=", "scheduler_i", "\n", "self", ".", "scheduler_t", "=", "scheduler_t", "\n", "self", ".", "scheduler_v", "=", "scheduler_v", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "eval_loader", "=", "eval_loader", "\n", "self", ".", "dynamic_patch_sampler", "=", "dynamic_patch_sampler", "\n", "self", ".", "static_patch_sampler", "=", "static_patch_sampler", "\n", "self", ".", "full_img_sampler", "=", "full_img_sampler", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "it", "=", "it", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "psnr_best", "=", "psnr_best", "\n", "\n", "self", ".", "out_dir", "=", "cfg", ".", "out_dir", "\n", "self", ".", "ckpt_dir", "=", "cfg", ".", "ckpt_dir", "\n", "self", ".", "log_dir", "=", "cfg", ".", "log_dir", "\n", "self", ".", "video_dir", "=", "cfg", ".", "video_dir", "\n", "\n", "self", ".", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", "\n", "self", ".", "patch_size", "=", "self", ".", "cfg", ".", "patch_size", "\n", "self", ".", "start_img_wh", "=", "torch", ".", "tensor", "(", "[", "self", ".", "patch_size", ",", "self", ".", "patch_size", "]", "if", "self", ".", "cfg", ".", "progressvie_training", "\n", "else", "self", ".", "cfg", ".", "img_wh", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "img_wh_curr", "=", "self", ".", "start_img_wh", "\n", "self", ".", "img_wh_end", "=", "torch", ".", "tensor", "(", "self", ".", "cfg", ".", "img_wh", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "phase", "=", "'A'", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train": [[65, 247], ["torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "itertools.count", "print", "trainer.Trainer.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "time.time", "trainer.Trainer.to", "trainer.Trainer.generator.train", "trainer.Trainer.discriminator.train", "trainer.Trainer.inv_net.train", "trainer.Trainer.train_pose_params.train", "trainer.Trainer.val_pose_params.train", "trainer.Trainer.dynamic_patch_sampler.image2patch", "trainer.Trainer.dynamic_patch_sampler", "loss_dict.items", "trainer.Trainer.scheduler_g.step", "trainer.Trainer.scheduler_d.step", "trainer.Trainer.scheduler_i.step", "trainer.Trainer.scheduler_t.step", "trainer.Trainer.scheduler_v.step", "trainer.Trainer.progressvie_training", "trainer.Trainer.progressvie_training", "trainer.Trainer.generator.ray_sampler.update_intrinsic", "trainer.Trainer.generator.decrease_noise", "trainer.Trainer.generator_trainstep", "trainer.Trainer.discriminator_trainstep", "trainer.Trainer.static_patch_sampler", "trainer.Trainer.inversion_net_trainstep", "trainer.Trainer.static_patch_sampler.image2patch", "trainer.Trainer.training_pose_regularization", "trainer.Trainer.static_patch_sampler.image2patch", "trainer.Trainer.val_pose_regularization", "trainer.Trainer.training_refine_step", "trainer.Trainer.writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.generator.eval", "trainer.Trainer.dynamic_patch_sampler.image2patch", "trainer.Trainer.val_refine_step", "time.time", "print", "trainer.Trainer.val_pose_params", "trainer.Trainer.full_img_sampler", "trainer.Trainer.generator", "trainer.Trainer.items", "torchvision.utils.make_grid", "trainer.Trainer.writer.add_image", "tools.similarity.psnr", "tools.similarity.ssim", "zip", "metrics.items", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "imgs.items", "tools.utils.plot_camera_scene", "trainer.Trainer.writer.add_image", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.Trainer.make_video", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torchvision.transforms.Resize", "torchvision.utils.make_grid", "trainer.Trainer.writer.add_image", "lpips_.append", "sum", "len", "trainer.Trainer.writer.add_scalar", "torchvision.utils.make_grid", "trainer.Trainer.writer.add_image", "max", "trainer.Trainer.generator.state_dict", "trainer.Trainer.optim_g.state_dict", "trainer.Trainer.discriminator.state_dict", "trainer.Trainer.optim_d.state_dict", "trainer.Trainer.inv_net.state_dict", "trainer.Trainer.optim_i.state_dict", "trainer.Trainer.train_pose_params.state_dict", "trainer.Trainer.optim_t.state_dict", "trainer.Trainer.val_pose_params.state_dict", "trainer.Trainer.optim_v.state_dict", "vars", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.transforms.Resize.", "tools.similarity.lpips", "os.path.join", "trainer.Trainer.items", "torchvision.utils.make_grid.min", "int", "str().zfill", "torchvision.utils.make_grid.max", "torchvision.utils.make_grid.min", "trainer.Trainer.out_dir.split", "loss_dict.items", "torchvision.utils.make_grid.size", "str"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.train", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.image2patch", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.progressvie_training", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.progressvie_training", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.update_intrinsic", "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.decrease_noise", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.generator_trainstep", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.discriminator_trainstep", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.inversion_net_trainstep", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.image2patch", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.training_pose_regularization", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.image2patch", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.val_pose_regularization", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.training_refine_step", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.image2patch", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.val_refine_step", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.psnr", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.ssim", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.plot_camera_scene", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.make_video", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.lpips"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "val_imgs", "=", "[", "]", "\n", "for", "rgb_i", ",", "_", "in", "self", ".", "eval_loader", ":", "\n", "            ", "val_imgs", ".", "append", "(", "rgb_i", ")", "\n", "", "val_imgs_raw", "=", "torch", ".", "cat", "(", "val_imgs", ")", ".", "to", "(", "self", ".", "device", ")", "# [N, 3, H, W]", "\n", "\n", "for", "self", ".", "epoch", "in", "itertools", ".", "count", "(", "self", ".", "epoch", "+", "1", ",", "1", ")", ":", "\n", "            ", "if", "self", ".", "epoch", ">", "self", ".", "cfg", ".", "num_epoch", ":", "\n", "                ", "break", "\n", "\n", "", "for", "img_real", ",", "pose_indices", "in", "self", ".", "train_loader", ":", "\n", "                ", "t_it", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "it", "+=", "1", "\n", "\n", "loss_dict", ",", "metrics", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "nbatch", "=", "img_real", ".", "shape", "[", "0", "]", "\n", "img_real", "=", "img_real", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "it", "<=", "self", ".", "cfg", ".", "begin_refine", ":", "\n", "                    ", "self", ".", "phase", "=", "'A'", "\n", "", "elif", "self", ".", "cfg", ".", "begin_refine", "<", "self", ".", "it", "<=", "self", ".", "cfg", ".", "progressive_end", ":", "\n", "                    ", "self", ".", "phase", "=", "'ABAB'", "\n", "", "else", ":", "\n", "                    ", "self", ".", "phase", "=", "'B'", "\n", "\n", "", "if", "self", ".", "cfg", ".", "progressvie_training", ":", "\n", "                    ", "img_real", "=", "self", ".", "progressvie_training", "(", "img_real", ")", "\n", "val_imgs", "=", "self", ".", "progressvie_training", "(", "val_imgs_raw", ")", "\n", "\n", "self", ".", "generator", ".", "ray_sampler", ".", "update_intrinsic", "(", "self", ".", "img_wh_curr", "/", "self", ".", "img_wh_end", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "decrease_noise", ":", "\n", "                    ", "self", ".", "generator", ".", "decrease_noise", "(", "self", ".", "it", ")", "\n", "\n", "", "self", ".", "dynamic_patch_sampler", ".", "iterations", "=", "self", ".", "it", "\n", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "self", ".", "inv_net", ".", "train", "(", ")", "\n", "self", ".", "train_pose_params", ".", "train", "(", ")", "\n", "self", ".", "val_pose_params", ".", "train", "(", ")", "\n", "\n", "patch_real", ",", "coords_real", ",", "scales_real", "=", "self", ".", "dynamic_patch_sampler", ".", "image2patch", "(", "\n", "img_real", ",", "self", ".", "cfg", ".", "patch_size", ",", "self", ".", "device", ")", "\n", "coords_fake", ",", "scales_fake", "=", "self", ".", "dynamic_patch_sampler", "(", "\n", "nbatch", ",", "self", ".", "cfg", ".", "patch_size", ",", "self", ".", "device", ")", "\n", "imgs", "[", "'Dynamic_patch/real'", "]", "=", "patch_real", "\n", "\n", "if", "self", ".", "phase", "==", "'A'", "or", "self", ".", "phase", "==", "'ABAB'", ":", "\n", "# Train the generator", "\n", "                    ", "patch_fake", ",", "poses", "=", "self", ".", "generator_trainstep", "(", "coords_fake", ",", "scales_fake", ",", "loss_dict", ")", "\n", "imgs", "[", "'Dynamic_patch_fake/coarse'", "]", "=", "patch_fake", "[", ":", "4", "]", "\n", "imgs", "[", "'Dynamic_patch_fake/fine'", "]", "=", "patch_fake", "[", "self", ".", "batch_size", ":", "self", ".", "batch_size", "+", "4", "]", "\n", "\n", "# Train the discriminator", "\n", "self", ".", "discriminator_trainstep", "(", "patch_real", ",", "patch_fake", ",", "scales_real", ",", "scales_fake", ",", "loss_dict", ")", "\n", "\n", "# Train the inversion network", "\n", "coords_fake", ",", "_", "=", "self", ".", "static_patch_sampler", "(", "nbatch", ",", "self", ".", "cfg", ".", "inv_size", ",", "self", ".", "device", ")", "\n", "img_fake_fine", "=", "self", ".", "inversion_net_trainstep", "(", "coords_fake", ",", "loss_dict", ")", "\n", "imgs", "[", "'Static_patch_fake'", "]", "=", "img_fake_fine", "\n", "\n", "# regularize poses of training images along with the generator", "\n", "img_real", ",", "_", ",", "_", "=", "self", ".", "static_patch_sampler", ".", "image2patch", "(", "img_real", ",", "self", ".", "cfg", ".", "inv_size", ",", "self", ".", "device", ")", "\n", "self", ".", "training_pose_regularization", "(", "img_real", ",", "pose_indices", ",", "loss_dict", ")", "\n", "\n", "# regularize poses of evaluation images", "\n", "img_real", ",", "_", ",", "_", "=", "self", ".", "static_patch_sampler", ".", "image2patch", "(", "val_imgs", ",", "self", ".", "cfg", ".", "inv_size", ",", "self", ".", "device", ")", "\n", "self", ".", "val_pose_regularization", "(", "img_real", ",", "loss_dict", ")", "\n", "\n", "# Refine the camera poses and NeRF", "\n", "", "if", "self", ".", "phase", "==", "'ABAB'", "or", "self", ".", "phase", "==", "'B'", ":", "\n", "                    ", "patch_fake_fine", "=", "self", ".", "training_refine_step", "(", "patch_real", ",", "coords_real", ",", "pose_indices", ",", "loss_dict", ")", "\n", "imgs", "[", "'Dynamic_patch/fake'", "]", "=", "patch_fake_fine", "\n", "\n", "if", "self", ".", "it", "%", "8", "==", "0", ":", "\n", "                        ", "img_real", ",", "coords_real", ",", "_", "=", "self", ".", "dynamic_patch_sampler", ".", "image2patch", "(", "\n", "val_imgs", ",", "self", ".", "cfg", ".", "patch_size", ",", "self", ".", "device", ")", "\n", "self", ".", "val_refine_step", "(", "img_real", ",", "coords_real", ",", "loss_dict", ")", "\n", "\n", "", "", "fps", "=", "nbatch", "/", "(", "time", ".", "time", "(", ")", "-", "t_it", ")", "\n", "\n", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "f'Training/{k}'", ",", "v", ",", "self", ".", "it", ")", "\n", "\n", "# Update learning rate", "\n", "", "self", ".", "scheduler_g", ".", "step", "(", ")", "\n", "self", ".", "scheduler_d", ".", "step", "(", ")", "\n", "self", ".", "scheduler_i", ".", "step", "(", ")", "\n", "self", ".", "scheduler_t", ".", "step", "(", ")", "\n", "self", ".", "scheduler_v", ".", "step", "(", ")", "\n", "\n", "# Evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "generator", ".", "eval", "(", ")", "\n", "\n", "if", "(", "self", ".", "it", "%", "self", ".", "cfg", ".", "print_every", ")", "==", "0", ":", "\n", "                        ", "print", "(", "f\"{self.out_dir.split('/')[-1]}: {self.epoch:05d}/{self.it:05d}, phase={self.phase}, \"", "+", "\n", "f\", \"", ".", "join", "(", "\"{}={:.4f}\"", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ")", "+", "\n", "f\", fps: {fps:.2f}\"", ")", "\n", "\n", "", "if", "(", "(", "self", ".", "it", "%", "self", ".", "cfg", ".", "sample_every", ")", "==", "0", ")", "or", "(", "(", "self", ".", "it", "<=", "500", ")", "and", "(", "self", ".", "it", "%", "100", "==", "0", ")", ")", ":", "\n", "                        ", "poses_val", "=", "self", ".", "val_pose_params", "(", ")", "\n", "coords_val", ",", "_", "=", "self", ".", "full_img_sampler", "(", "val_imgs", ".", "shape", "[", "0", "]", ",", "self", ".", "img_wh_curr", ",", "self", ".", "device", ")", "\n", "results", "=", "self", ".", "generator", "(", "coords_val", ",", "self", ".", "img_wh_curr", ",", "poses_val", ")", "\n", "\n", "if", "self", ".", "img_wh_end", "[", "0", "]", ">", "self", ".", "img_wh_curr", "[", "0", "]", "or", "self", ".", "img_wh_end", "[", "1", "]", ">", "self", ".", "img_wh_curr", "[", "1", "]", ":", "\n", "                            ", "rescale_func", "=", "Resize", "(", "(", "self", ".", "img_wh_end", "[", "1", "]", ",", "self", ".", "img_wh_end", "[", "0", "]", ")", ")", "\n", "results", "=", "{", "k", ":", "rescale_func", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "\n", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                            ", "if", "k", "==", "'depth'", ":", "\n", "                                ", "v", "=", "(", "v", "+", "1.0", ")", "/", "2.0", "\n", "v", "=", "(", "v", "-", "v", ".", "min", "(", ")", ")", "/", "(", "v", ".", "max", "(", ")", "-", "v", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "v", "=", "v", "*", "2.0", "-", "1.0", "\n", "", "v", "=", "utils", ".", "make_grid", "(", "v", "[", ":", "4", "]", ",", "nrow", "=", "4", ",", "\n", "normalize", "=", "True", ",", "\n", "value_range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "k", ",", "v", ",", "self", ".", "it", ")", "\n", "\n", "", "real_image", "=", "utils", ".", "make_grid", "(", "val_imgs_raw", "[", ":", "4", "]", ",", "\n", "normalize", "=", "True", ",", "\n", "value_range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'real_image'", ",", "real_image", ",", "self", ".", "it", ")", "\n", "\n", "metrics", "[", "'psnr'", "]", "=", "psnr", "(", "results", "[", "'rgb'", "]", ",", "val_imgs_raw", ")", "\n", "metrics", "[", "'ssim'", "]", "=", "ssim", "(", "results", "[", "'rgb'", "]", ",", "val_imgs_raw", ")", "\n", "lpips_", "=", "[", "]", "\n", "for", "rgb_pred", ",", "rgb_gt", "in", "zip", "(", "results", "[", "'rgb'", "]", ",", "val_imgs_raw", ")", ":", "\n", "                            ", "lpips_", ".", "append", "(", "lpips", "(", "rgb_pred", ",", "rgb_gt", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "", "metrics", "[", "'lpips'", "]", "=", "sum", "(", "lpips_", ")", "/", "len", "(", "lpips_", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                            ", "self", ".", "writer", ".", "add_scalar", "(", "f'Val/{k}'", ",", "v", ",", "self", ".", "it", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'lr/discriminator'", ",", "self", ".", "optim_d", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'lr/generator'", ",", "self", ".", "optim_g", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'lr/inversion_net'", ",", "self", ".", "optim_i", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'lr/poses_training'", ",", "self", ".", "optim_t", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'lr/poses_val'", ",", "self", ".", "optim_v", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'img_wh_curr/w'", ",", "self", ".", "img_wh_curr", "[", "0", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'img_wh_curr/h'", ",", "self", ".", "img_wh_curr", "[", "1", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'scales_curr/min_scale'", ",", "self", ".", "dynamic_patch_sampler", ".", "scales_curr", "[", "0", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'scales_curr/max_scale'", ",", "self", ".", "dynamic_patch_sampler", ".", "scales_curr", "[", "1", "]", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'noise_std'", ",", "self", ".", "generator", ".", "noise_std", ",", "self", ".", "it", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Val/psnr_best'", ",", "self", ".", "psnr_best", ",", "self", ".", "it", ")", "\n", "\n", "for", "k", ",", "v", "in", "imgs", ".", "items", "(", ")", ":", "\n", "                            ", "v", "=", "utils", ".", "make_grid", "(", "v", ",", "nrow", "=", "v", ".", "shape", "[", "0", "]", "//", "int", "(", "v", ".", "size", "(", "0", ")", "**", "0.5", ")", ",", "\n", "normalize", "=", "True", ",", "\n", "value_range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "k", ",", "v", ",", "self", ".", "it", ")", "\n", "\n", "", "cams_img", "=", "plot_camera_scene", "(", "self", ".", "train_pose_params", ".", "poses", ",", "self", ".", "val_pose_params", ".", "poses", ",", "\n", "max", "(", "self", ".", "cfg", ".", "radius", ")", ",", "f'Iteration_{self.it}'", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "'poses'", ",", "cams_img", ",", "self", ".", "it", ")", "\n", "\n", "", "if", "(", "self", ".", "it", "%", "self", ".", "cfg", ".", "save_every", ")", "==", "0", ":", "\n", "                        ", "state_dict", "=", "{", "\n", "'g'", ":", "self", ".", "generator", ".", "state_dict", "(", ")", ",", "'optim_g'", ":", "self", ".", "optim_g", ".", "state_dict", "(", ")", ",", "\n", "'d'", ":", "self", ".", "discriminator", ".", "state_dict", "(", ")", ",", "'optim_d'", ":", "self", ".", "optim_d", ".", "state_dict", "(", ")", ",", "\n", "'i'", ":", "self", ".", "inv_net", ".", "state_dict", "(", ")", ",", "'optim_i'", ":", "self", ".", "optim_i", ".", "state_dict", "(", ")", ",", "\n", "'t'", ":", "self", ".", "train_pose_params", ".", "state_dict", "(", ")", ",", "'optim_t'", ":", "self", ".", "optim_t", ".", "state_dict", "(", ")", ",", "\n", "'v'", ":", "self", ".", "val_pose_params", ".", "state_dict", "(", ")", ",", "'optim_v'", ":", "self", ".", "optim_v", ".", "state_dict", "(", ")", ",", "\n", "'args'", ":", "vars", "(", "self", ".", "cfg", ")", ",", "'it'", ":", "self", ".", "it", ",", "'epoch'", ":", "self", ".", "epoch", ",", "'psnr_best'", ":", "self", ".", "psnr_best", "}", "\n", "\n", "torch", ".", "save", "(", "state_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "f'{str(self.it).zfill(6)}.pt'", ")", ")", "\n", "\n", "if", "metrics", "[", "'psnr'", "]", ">=", "self", ".", "psnr_best", ":", "\n", "                            ", "self", ".", "psnr_best", "=", "metrics", "[", "'psnr'", "]", "\n", "torch", ".", "save", "(", "state_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'model_best.pt'", ")", ")", "\n", "\n", "", "", "if", "(", "(", "self", ".", "it", "+", "1", ")", "%", "self", ".", "cfg", ".", "video_every", ")", "==", "0", ":", "\n", "                        ", "self", ".", "make_video", "(", "120", ")", "\n", "\n", "", "if", "(", "(", "self", ".", "it", "+", "1", ")", "%", "self", ".", "cfg", ".", "empty_cache_every", ")", "==", "0", ":", "\n", "                        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "", "", "print", "(", "\"End of Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.progressvie_training": [[248, 267], ["torchvision.transforms.Resize", "torchvision.transforms.Resize."], "methods", ["None"], ["", "def", "progressvie_training", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'A'", ":", "\n", "            ", "scale", "=", "1.0", "/", "self", ".", "cfg", ".", "begin_refine", "*", "self", ".", "it", "\n", "\n", "self", ".", "img_wh_curr", "=", "self", ".", "start_img_wh", "+", "(", "(", "128.0", "-", "self", ".", "start_img_wh", ")", "*", "scale", ")", ".", "int", "(", ")", "\n", "", "elif", "self", ".", "phase", "==", "'ABAB'", ":", "\n", "            ", "img_scale_base", "=", "self", ".", "cfg", ".", "begin_refine", "/", "self", ".", "cfg", ".", "progressive_end", "\n", "scale", "=", "img_scale_base", "+", "(", "1.0", "-", "img_scale_base", ")", "/", "(", "self", ".", "cfg", ".", "progressive_end", "-", "self", ".", "cfg", ".", "begin_refine", ")", "*", "(", "\n", "self", ".", "it", "-", "self", ".", "cfg", ".", "begin_refine", ")", "\n", "\n", "self", ".", "img_wh_curr", "=", "128", "+", "(", "(", "self", ".", "img_wh_end", "-", "128.0", ")", "/", "(", "1.0", "-", "img_scale_base", ")", "*", "(", "\n", "scale", "-", "img_scale_base", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n", "", "downsample_func", "=", "Resize", "(", "(", "self", ".", "img_wh_curr", "[", "1", "]", ",", "self", ".", "img_wh_curr", "[", "0", "]", ")", ")", "\n", "img", "=", "downsample_func", "(", "img", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.generator_trainstep": [[268, 288], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.generator.zero_grad", "trainer.Trainer.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.discriminator", "trainer.Trainer.compute_loss", "trainer.Trainer.backward", "trainer.Trainer.optim_g.step", "trainer.Trainer.detach", "scales.repeat", "torch.cat.detach", "torch.cat.detach", "poses.detach"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_loss"], ["", "def", "generator_trainstep", "(", "self", ",", "coords", ",", "scales", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "self", ".", "generator", ".", "zero_grad", "(", ")", "\n", "\n", "fake_patch_coarse", ",", "fake_patch_fine", ",", "poses", "=", "self", ".", "generator", "(", "coords", ",", "self", ".", "img_wh_curr", ")", "\n", "patch_fake", "=", "torch", ".", "cat", "(", "(", "fake_patch_coarse", ",", "fake_patch_fine", ")", ",", "dim", "=", "0", ")", "\n", "d_fake", "=", "self", ".", "discriminator", "(", "patch_fake", ",", "scales", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "gloss", "=", "self", ".", "compute_loss", "(", "d_fake", ",", "1", ")", "\n", "\n", "gloss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optim_g", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'generator'", "]", "=", "gloss", ".", "detach", "(", ")", "\n", "\n", "return", "patch_fake", ".", "detach", "(", ")", ",", "poses", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.discriminator_trainstep": [[289, 341], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_d.zero_grad", "patch_real.requires_grad_", "trainer.Trainer.discriminator", "trainer.Trainer.compute_loss", "patch_fake.requires_grad_", "trainer.Trainer.discriminator", "trainer.Trainer.compute_loss", "trainer.Trainer.optim_d.step", "dloss.detach", "torch.tensor.detach", "torch.tensor.detach", "trainer.Trainer.backward", "torch.tensor.backward", "torch.tensor.backward", "trainer.Trainer.backward", "patch_fake.contiguous", "scales_fake.repeat().contiguous", "trainer.Trainer.backward", "torch.tensor.backward", "torch.tensor.backward", "trainer.Trainer.backward", "torch.tensor.backward", "torch.tensor.backward", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "trainer.Trainer.compute_grad2().mean", "trainer.Trainer.compute_grad2().mean", "trainer.Trainer.wgan_gp_reg", "torch.tensor.backward", "torch.tensor.backward", "scales_fake.repeat", "patch_real.repeat", "scales_fake.repeat", "trainer.Trainer.wgan_gp_reg", "trainer.Trainer.compute_grad2", "trainer.Trainer.compute_grad2", "patch_real.repeat", "scales_fake.repeat"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_loss", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_loss", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.wgan_gp_reg", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.wgan_gp_reg", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_grad2", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_grad2"], ["", "def", "discriminator_trainstep", "(", "self", ",", "patch_real", ",", "patch_fake", ",", "scales_real", ",", "scales_fake", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "self", ".", "optim_d", ".", "zero_grad", "(", ")", "\n", "\n", "# On real data", "\n", "patch_real", ".", "requires_grad_", "(", ")", "\n", "\n", "d_real", "=", "self", ".", "discriminator", "(", "patch_real", ",", "scales_real", ")", "\n", "dloss_real", "=", "self", ".", "compute_loss", "(", "d_real", ",", "1", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "reg_type", "==", "'real'", "or", "self", ".", "cfg", ".", "reg_type", "==", "'real_fake'", ":", "\n", "            ", "dloss_real", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "reg", "=", "self", ".", "cfg", ".", "reg_param", "*", "self", ".", "compute_grad2", "(", "d_real", ",", "patch_real", ")", ".", "mean", "(", ")", "\n", "reg", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "dloss_real", ".", "backward", "(", ")", "\n", "\n", "# On fake data", "\n", "", "patch_fake", ".", "requires_grad_", "(", ")", "\n", "d_fake", "=", "self", ".", "discriminator", "(", "patch_fake", ".", "contiguous", "(", ")", ",", "scales_fake", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "dloss_fake", "=", "self", ".", "compute_loss", "(", "d_fake", ",", "0", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "reg_type", "==", "'fake'", "or", "self", ".", "cfg", ".", "reg_type", "==", "'real_fake'", ":", "\n", "            ", "dloss_fake", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "reg", "=", "self", ".", "cfg", ".", "reg_param", "*", "self", ".", "compute_grad2", "(", "d_fake", ",", "patch_fake", ")", ".", "mean", "(", ")", "\n", "reg", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "dloss_fake", ".", "backward", "(", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "reg_type", "==", "'wgangp'", ":", "\n", "            ", "reg", "=", "self", ".", "cfg", ".", "reg_param", "*", "self", ".", "wgan_gp_reg", "(", "patch_real", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ",", "patch_fake", ",", "\n", "scales_fake", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "reg", ".", "backward", "(", ")", "\n", "", "elif", "self", ".", "cfg", ".", "reg_type", "==", "'wgangp0'", ":", "\n", "            ", "reg", "=", "self", ".", "cfg", ".", "reg_param", "*", "self", ".", "wgan_gp_reg", "(", "patch_real", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ",", "patch_fake", ",", "\n", "scales_fake", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ",", "center", "=", "0.", ")", "\n", "reg", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "optim_d", ".", "step", "(", ")", "\n", "\n", "# Output", "\n", "dloss", "=", "(", "dloss_real", "+", "dloss_fake", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "reg_type", "==", "'none'", ":", "\n", "            ", "reg", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "", "loss_dict", "[", "'discriminator'", "]", "=", "dloss", ".", "detach", "(", ")", "\n", "loss_dict", "[", "'regularizer'", "]", "=", "reg", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.inversion_net_trainstep": [[342, 370], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_i.zero_grad", "trainer.Trainer.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.inv_net", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.mean.backward", "trainer.Trainer.optim_i.step", "torch.mean.detach", "torch.mean.detach", "img_fake_fine.detach", "tools.ray_utils.pose_to_d9", "tools.ray_utils.pose_to_d9.repeat"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.pose_to_d9"], ["", "def", "inversion_net_trainstep", "(", "self", ",", "coords", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "True", ")", "\n", "self", ".", "optim_i", ".", "zero_grad", "(", ")", "\n", "\n", "img_fake_coarse", ",", "img_fake_fine", ",", "poses", "=", "self", ".", "generator", "(", "coords", ",", "self", ".", "img_wh_curr", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "pose_mode", "==", "'3d'", ":", "\n", "            ", "d_fake", "=", "poses", "[", ":", ",", ":", ",", "-", "1", "]", "# [N, 3]", "\n", "", "elif", "self", ".", "cfg", ".", "pose_mode", "==", "'6d'", ":", "\n", "            ", "d_fake", "=", "pose_to_d9", "(", "poses", ")", "# [N, 9]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "x_fake_full", "=", "torch", ".", "cat", "(", "(", "img_fake_coarse", ",", "img_fake_fine", ")", ",", "dim", "=", "0", ")", "\n", "x_trans_em", "=", "self", ".", "inv_net", "(", "x_fake_full", ")", "# [N, D]", "\n", "eloss", "=", "torch", ".", "mean", "(", "(", "x_trans_em", "-", "d_fake", ".", "repeat", "(", "2", ",", "1", ")", ")", "**", "2", ")", "\n", "\n", "eloss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optim_i", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'inversion'", "]", "=", "eloss", ".", "detach", "(", ")", "\n", "\n", "return", "img_fake_fine", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.training_pose_regularization": [[371, 395], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_t.zero_grad", "trainer.Trainer.train_pose_params", "trainer.Trainer.inv_net", "ploss.backward", "trainer.Trainer.optim_t.step", "ploss.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tools.ray_utils.pose_to_d9"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.pose_to_d9"], ["", "def", "training_pose_regularization", "(", "self", ",", "img_real", ",", "pose_indices", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "\n", "self", ".", "optim_t", ".", "zero_grad", "(", ")", "\n", "# On real data", "\n", "train_poses_real", "=", "self", ".", "train_pose_params", "(", "pose_indices", ")", "\n", "if", "self", ".", "cfg", ".", "pose_mode", "==", "'3d'", ":", "\n", "            ", "train_d_real", "=", "train_poses_real", "[", ":", ",", ":", ",", "-", "1", "]", "# [N, 3]", "\n", "", "elif", "self", ".", "cfg", ".", "pose_mode", "==", "'6d'", ":", "\n", "            ", "train_d_real", "=", "pose_to_d9", "(", "train_poses_real", ")", "# [N, 9]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "train_x_trans_em", "=", "self", ".", "inv_net", "(", "img_real", ")", "\n", "ploss", "=", "torch", ".", "mean", "(", "(", "train_x_trans_em", "-", "train_d_real", ")", "**", "2", ")", "*", "0.1", "\n", "\n", "ploss", ".", "backward", "(", ")", "\n", "self", ".", "optim_t", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'pose_training'", "]", "=", "ploss", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.val_pose_regularization": [[396, 419], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_v.zero_grad", "trainer.Trainer.val_pose_params", "trainer.Trainer.inv_net", "val_ploss.backward", "trainer.Trainer.optim_v.step", "val_ploss.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "tools.ray_utils.pose_to_d9"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.pose_to_d9"], ["", "def", "val_pose_regularization", "(", "self", ",", "patch_real", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "self", ".", "optim_v", ".", "zero_grad", "(", ")", "\n", "\n", "val_poses_real", "=", "self", ".", "val_pose_params", "(", ")", "\n", "if", "self", ".", "cfg", ".", "pose_mode", "==", "'3d'", ":", "\n", "            ", "val_d_real", "=", "val_poses_real", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "cfg", ".", "pose_mode", "==", "'6d'", ":", "\n", "            ", "val_d_real", "=", "pose_to_d9", "(", "val_poses_real", ")", "# [N, 9]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "val_x_trans_em", "=", "self", ".", "inv_net", "(", "patch_real", ")", "\n", "val_ploss", "=", "torch", ".", "mean", "(", "(", "val_x_trans_em", "-", "val_d_real", ")", "**", "2", ")", "*", "0.1", "\n", "\n", "val_ploss", ".", "backward", "(", ")", "\n", "self", ".", "optim_v", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'pose_val'", "]", "=", "val_ploss", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.training_refine_step": [[420, 443], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_g.zero_grad", "trainer.Trainer.optim_t.zero_grad", "trainer.Trainer.train_pose_params", "trainer.Trainer.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rloss.backward", "trainer.Trainer.optim_t.step", "trainer.Trainer.optim_g.step", "rloss.detach", "patch_fake_fine.detach", "torch.mse_loss", "torch.mse_loss", "patch_real.repeat"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad"], ["", "def", "training_refine_step", "(", "self", ",", "patch_real", ",", "coords_real", ",", "pose_indices", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "self", ".", "optim_g", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim_t", ".", "zero_grad", "(", ")", "\n", "\n", "# On real data", "\n", "poses", "=", "self", ".", "train_pose_params", "(", "pose_indices", ")", "\n", "patch_fake_coarse", ",", "patch_fake_fine", ",", "_", "=", "self", ".", "generator", "(", "coords_real", ",", "self", ".", "img_wh_curr", ",", "poses", ")", "\n", "patch_fake", "=", "torch", ".", "cat", "(", "(", "patch_fake_coarse", ",", "patch_fake_fine", ")", ",", "dim", "=", "0", ")", "\n", "rloss", "=", "F", ".", "mse_loss", "(", "patch_fake", ",", "patch_real", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ",", "reduction", "=", "'mean'", ")", "*", "50.0", "\n", "\n", "rloss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optim_t", ".", "step", "(", ")", "\n", "self", ".", "optim_g", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'refine_training'", "]", "=", "rloss", ".", "detach", "(", ")", "\n", "\n", "return", "patch_fake_fine", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.val_refine_step": [[444, 463], ["trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.toggle_grad", "trainer.Trainer.optim_v.zero_grad", "trainer.Trainer.val_pose_params", "trainer.Trainer.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rloss.backward", "trainer.Trainer.optim_v.step", "rloss.detach", "torch.mse_loss", "torch.mse_loss", "img_real.repeat"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad", "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad"], ["", "def", "val_refine_step", "(", "self", ",", "img_real", ",", "coords_real", ",", "loss_dict", ")", ":", "\n", "        ", "self", ".", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "train_pose_params", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "val_pose_params", ",", "True", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "toggle_grad", "(", "self", ".", "inv_net", ",", "False", ")", "\n", "self", ".", "optim_v", ".", "zero_grad", "(", ")", "\n", "\n", "# On real data", "\n", "poses", "=", "self", ".", "val_pose_params", "(", ")", "\n", "img_fake_coarse", ",", "img_fake_fine", ",", "_", "=", "self", ".", "generator", "(", "coords_real", ",", "self", ".", "img_wh_curr", ",", "poses", ")", "\n", "img_fake", "=", "torch", ".", "cat", "(", "(", "img_fake_coarse", ",", "img_fake_fine", ")", ",", "dim", "=", "0", ")", "\n", "rloss", "=", "F", ".", "mse_loss", "(", "img_fake", ",", "img_real", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ",", "reduction", "=", "'mean'", ")", "*", "50.0", "\n", "\n", "rloss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optim_v", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'refine_val'", "]", "=", "rloss", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.toggle_grad": [[464, 467], ["model.parameters", "p.requires_grad_"], "methods", ["None"], ["", "def", "toggle_grad", "(", "self", ",", "model", ",", "requires_grad", ")", ":", "\n", "        ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad_", "(", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_grad2": [[468, 481], ["x_in.size", "grad_dout.pow", "grad_dout.pow.view().sum", "len", "isinstance", "torch.autograd.grad", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view", "d_out.sum"], "methods", ["None"], ["", "", "def", "compute_grad2", "(", "self", ",", "d_outs", ",", "x_in", ")", ":", "\n", "        ", "d_outs", "=", "[", "d_outs", "]", "if", "not", "isinstance", "(", "d_outs", ",", "list", ")", "else", "d_outs", "\n", "reg", "=", "0", "\n", "for", "d_out", "in", "d_outs", ":", "\n", "            ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "+=", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "", "return", "reg", "/", "len", "(", "d_outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_loss": [[482, 499], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "d_out.new_full", "len", "isinstance", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "d_out.size", "d_out.mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "d_outs", ",", "target", ")", ":", "\n", "\n", "        ", "d_outs", "=", "[", "d_outs", "]", "if", "not", "isinstance", "(", "d_outs", ",", "list", ")", "else", "d_outs", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "d_outs", "[", "0", "]", ".", "device", ")", "\n", "\n", "for", "d_out", "in", "d_outs", ":", "\n", "\n", "            ", "targets", "=", "d_out", ".", "new_full", "(", "size", "=", "d_out", ".", "size", "(", ")", ",", "fill_value", "=", "target", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "gan_type", "==", "'standard'", ":", "\n", "                ", "loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "d_out", ",", "targets", ")", "\n", "", "elif", "self", ".", "cfg", ".", "gan_type", "==", "'wgan'", ":", "\n", "                ", "loss", "+=", "(", "2", "*", "target", "-", "1", ")", "*", "d_out", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "loss", "/", "len", "(", "d_outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.wgan_gp_reg": [[500, 511], ["y.size", "torch.rand().view", "torch.rand().view", "torch.rand().view", "torch.rand().view", "x_interp.detach.detach.detach", "x_interp.detach.detach.requires_grad_", "trainer.Trainer.discriminator", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "trainer.Trainer.compute_grad2().sqrt", "trainer.Trainer.compute_grad2"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.compute_grad2"], ["", "def", "wgan_gp_reg", "(", "self", ",", "x_real", ",", "x_fake", ",", "y", ",", "center", "=", "1.", ")", ":", "\n", "        ", "batch_size", "=", "y", ".", "size", "(", "0", ")", "\n", "eps", "=", "torch", ".", "rand", "(", "batch_size", ",", "device", "=", "y", ".", "device", ")", ".", "view", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "x_interp", "=", "(", "1", "-", "eps", ")", "*", "x_real", "+", "eps", "*", "x_fake", "\n", "x_interp", "=", "x_interp", ".", "detach", "(", ")", "\n", "x_interp", ".", "requires_grad_", "(", ")", "\n", "d_out", "=", "self", ".", "discriminator", "(", "x_interp", ",", "y", ")", "\n", "\n", "reg", "=", "(", "self", ".", "compute_grad2", "(", "d_out", ",", "x_interp", ")", ".", "sqrt", "(", ")", "-", "center", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.trains.trainer.Trainer.make_video": [[512, 535], ["trainer.Trainer.full_img_sampler", "trainer.Trainer.generator.ray_sampler.spheric_poses().to", "torchvision.transforms.Resize", "tqdm.tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imageio.mimwrite", "imageio.mimwrite", "range", "trainer.Trainer.generator", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "os.path.join", "os.path.join", "trainer.Trainer.generator.ray_sampler.spheric_poses", "torchvision.transforms.Resize.", "torch.cat.cpu().permute().numpy().clip", "torch.cat.cpu().permute().numpy().clip", "trainer.Trainer.items", "torch.cat.cpu().permute().numpy", "torch.cat.cpu().permute().numpy", "torch.cat.cpu().permute", "torch.cat.cpu().permute", "torch.cat.cpu().permute", "torch.cat.cpu().permute", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.spheric_poses"], ["", "def", "make_video", "(", "self", ",", "nframes", "=", "40", ")", ":", "\n", "        ", "chunk", "=", "self", ".", "batch_size", "\n", "coords", ",", "_", "=", "self", ".", "full_img_sampler", "(", "chunk", ",", "self", ".", "img_wh_curr", ",", "self", ".", "device", ")", "\n", "poses", "=", "self", ".", "generator", ".", "ray_sampler", ".", "spheric_poses", "(", "nframes", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rescale_func", "=", "Resize", "(", "(", "self", ".", "img_wh_end", "[", "1", "]", ",", "self", ".", "img_wh_end", "[", "0", "]", ")", ")", "\n", "\n", "rgbs", ",", "depths", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "nframes", ",", "chunk", ")", ")", ":", "\n", "            ", "results", "=", "self", ".", "generator", "(", "coords", ",", "self", ".", "img_wh_curr", ",", "poses", "[", "i", ":", "i", "+", "chunk", "]", ")", "\n", "\n", "if", "self", ".", "img_wh_end", "[", "0", "]", ">", "self", ".", "img_wh_curr", "[", "0", "]", "or", "self", ".", "img_wh_end", "[", "1", "]", ">", "self", ".", "img_wh_curr", "[", "1", "]", ":", "\n", "                ", "results", "=", "{", "k", ":", "rescale_func", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "\n", "", "rgbs", ".", "append", "(", "results", "[", "'rgb'", "]", ")", "\n", "depths", ".", "append", "(", "results", "[", "'depth'", "]", ")", "\n", "", "rgbs", "=", "torch", ".", "cat", "(", "rgbs", ")", "# [N, 3, h, w]", "\n", "depths", "=", "torch", ".", "cat", "(", "depths", ")", "\n", "\n", "rgbs", "=", "(", "(", "rgbs", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "2", "+", "0.5", ")", ".", "numpy", "(", ")", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "mimwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "video_dir", ",", "f'rgb_{self.it:04}.gif'", ")", ",", "rgbs", ",", "fps", "=", "24", ")", "\n", "\n", "depths", "=", "(", "depths", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "numpy", "(", ")", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "mimwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "video_dir", ",", "f'depth_{self.it:04}.gif'", ")", ",", "depths", ",", "fps", "=", "24", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.dataloader.create_dataloader": [[7, 30], ["dataloader.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.dataloader.get_dataset"], ["def", "create_dataloader", "(", "data", ",", "split", ",", "data_dir", ",", "img_wh", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "dataset", "=", "get_dataset", "(", "data", ",", "split", ",", "data_dir", ",", "img_wh", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.dataloader.get_dataset": [[32, 54], ["Compose", "Compose.transforms.insert", "Blender", "Resize", "ToTensor", "NormalizeForGAN", "BlendAToRGB", "int", "DTU", "int", "x.split", "[].index", "[].index", "x.split", "x.split", "x.split"], "function", ["None"], ["", "", "def", "get_dataset", "(", "data", ",", "split", ",", "data_dir", ",", "img_wh", ")", ":", "\n", "    ", "trans", "=", "Compose", "(", "[", "\n", "Resize", "(", "(", "img_wh", "[", "1", "]", ",", "img_wh", "[", "0", "]", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "NormalizeForGAN", "(", ")", ",", "\n", "]", ")", "\n", "\n", "kwargs", "=", "{", "'split'", ":", "split", ",", "'data_dir'", ":", "data_dir", ",", "'img_wh'", ":", "img_wh", "}", "\n", "\n", "if", "data", "==", "'blender'", ":", "\n", "        ", "trans", ".", "transforms", ".", "insert", "(", "2", ",", "BlendAToRGB", "(", ")", ")", "\n", "# sort images by file names: keep training and evaluation split unchanged", "\n", "sort_key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "index", "(", "'_'", ")", "+", "1", ":", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "index", "(", "'.'", ")", "]", ")", "\n", "dset", "=", "Blender", "(", "**", "kwargs", ",", "transforms", "=", "trans", ",", "sort_key", "=", "sort_key", ")", "\n", "", "elif", "data", "==", "'dtu'", ":", "\n", "# sort images by file names: keep training and evaluation split unchanged", "\n", "        ", "sort_key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "5", ":", "8", "]", ")", "\n", "dset", "=", "DTU", "(", "**", "kwargs", ",", "transforms", "=", "trans", ",", "sort_key", "=", "sort_key", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "dset", "\n", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.NormalizeForGAN.__call__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.NormalizeForGAN.__repr__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.BlendAToRGB.__call__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "0", "]", "==", "4", ":", "\n", "            ", "x", "=", "x", "[", ":", "3", ",", "...", "]", "*", "x", "[", "-", "1", ":", ",", "...", "]", "+", "(", "1", "-", "x", "[", "-", "1", ":", ",", "...", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.BlendAToRGB.__repr__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.__init__": [[33, 50], ["torch.utils.data.Dataset.__init__", "datasets.Blender.get_filenames", "datasets.Blender.load_imgs", "datasets.Blender.get_camera_params", "len", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_filenames", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.load_imgs", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_camera_params"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "data_dir", ",", "img_wh", ",", "transforms", ",", "sort_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "Blender", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_wh", "=", "img_wh", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "sort_key", "=", "sort_key", "\n", "\n", "self", ".", "filenames", "=", "self", ".", "get_filenames", "(", "self", ".", "data_dir", ")", "\n", "assert", "len", "(", "self", ".", "filenames", ")", ">", "0", ",", "'File dir is empty'", "\n", "self", ".", "img_wh_original", "=", "Image", ".", "open", "(", "self", ".", "filenames", "[", "0", "]", ")", ".", "size", "\n", "assert", "self", ".", "img_wh_original", "[", "1", "]", "*", "self", ".", "img_wh", "[", "0", "]", "==", "self", ".", "img_wh_original", "[", "0", "]", "*", "self", ".", "img_wh", "[", "1", "]", ",", "f'You must set @img_wh to have the same aspect ratio as '", "f'({self.img_wh_original[0]}, {self.img_wh_original[1]}) !'", "\n", "\n", "self", ".", "imgs", "=", "self", ".", "load_imgs", "(", "self", ".", "filenames", ")", "\n", "self", ".", "intrinsics", ",", "self", ".", "poses", "=", "self", ".", "get_camera_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.__getitem__": [[54, 57], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "imgs", "[", "idx", "]", "\n", "return", "img", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.load_imgs": [[58, 68], ["PIL.Image.open", "imgs.append", "datasets.Blender.transforms"], "methods", ["None"], ["", "def", "load_imgs", "(", "self", ",", "filenames", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "for", "p", "in", "filenames", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "p", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.get_filenames": [[69, 81], ["glob.glob", "glob.glob.sort", "glob.glob.sort"], "methods", ["None"], ["", "def", "get_filenames", "(", "self", ",", "root", ")", ":", "\n", "        ", "filenames", "=", "glob", ".", "glob", "(", "f'{root}/{self.split}/*.png'", ")", "\n", "\n", "if", "self", ".", "sort_key", "is", "not", "None", ":", "\n", "            ", "filenames", ".", "sort", "(", "key", "=", "self", ".", "sort_key", ")", "\n", "", "else", ":", "\n", "            ", "filenames", ".", "sort", "(", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'val'", ":", "# only validate 8 images", "\n", "            ", "filenames", "=", "filenames", "[", ":", "8", "]", "\n", "\n", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.Blender.get_camera_params": [[82, 106], ["os.path.join", "torch.cat", "torch.tensor", "torch.tensor", "open", "json.load", "torch.cat.append", "numpy.tan", "torch.tensor"], "methods", ["None"], ["", "def", "get_camera_params", "(", "self", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'transforms_{self.split}.json'", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "poses", "=", "[", "]", "\n", "for", "frame", "in", "meta", "[", "'frames'", "]", ":", "\n", "            ", "pose", "=", "torch", ".", "tensor", "(", "frame", "[", "'transform_matrix'", "]", ")", "[", ":", "3", ",", ":", "4", "]", "\n", "poses", ".", "append", "(", "pose", "[", "None", "]", ")", "\n", "\n", "", "poses", "=", "torch", ".", "cat", "(", "poses", ")", "# [N, 3, 4]s", "\n", "\n", "cx", ",", "cy", "=", "[", "x", "//", "2", "for", "x", "in", "self", ".", "img_wh_original", "]", "\n", "focal", "=", "0.5", "*", "800", "/", "np", ".", "tan", "(", "0.5", "*", "meta", "[", "'camera_angle_x'", "]", ")", "# original focal length", "\n", "\n", "intrinsics", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "focal", ",", "0", ",", "cx", "]", ",", "[", "0", ",", "focal", ",", "cy", "]", ",", "[", "0", ",", "0", ",", "1.", "]", "\n", "]", ")", "\n", "\n", "scale", "=", "torch", ".", "tensor", "(", "[", "self", ".", "img_wh", "[", "0", "]", "/", "self", ".", "img_wh_original", "[", "0", "]", ",", "self", ".", "img_wh", "[", "1", "]", "/", "self", ".", "img_wh_original", "[", "1", "]", "]", ")", "\n", "intrinsics", "[", ":", "2", "]", "*=", "scale", "[", ":", ",", "None", "]", "\n", "\n", "return", "intrinsics", ",", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.__init__": [[109, 126], ["torch.utils.data.Dataset.__init__", "datasets.DTU.get_filenames", "datasets.DTU.load_imgs", "datasets.DTU.get_camera_params", "len", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_filenames", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.load_imgs", "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_camera_params"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "data_dir", ",", "img_wh", ",", "transforms", ",", "sort_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "DTU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_wh", "=", "img_wh", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "sort_key", "=", "sort_key", "\n", "\n", "self", ".", "filenames", "=", "self", ".", "get_filenames", "(", "self", ".", "data_dir", ")", "\n", "assert", "len", "(", "self", ".", "filenames", ")", ">", "0", ",", "'File dir is empty'", "\n", "self", ".", "img_wh_original", "=", "Image", ".", "open", "(", "self", ".", "filenames", "[", "0", "]", ")", ".", "size", "\n", "assert", "self", ".", "img_wh_original", "[", "1", "]", "*", "self", ".", "img_wh", "[", "0", "]", "==", "self", ".", "img_wh_original", "[", "0", "]", "*", "self", ".", "img_wh", "[", "1", "]", ",", "f'You must set @img_wh to have the same aspect ratio as '", "f'({self.img_wh_original[0]}, {self.img_wh_original[1]}) !'", "\n", "\n", "self", ".", "imgs", "=", "self", ".", "load_imgs", "(", "self", ".", "filenames", ")", "\n", "self", ".", "intrinsics", ",", "self", ".", "poses", "=", "self", ".", "get_camera_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.__len__": [[127, 129], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.__getitem__": [[130, 133], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "imgs", "[", "idx", "]", "\n", "return", "img", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.load_imgs": [[134, 144], ["PIL.Image.open", "imgs.append", "datasets.DTU.transforms"], "methods", ["None"], ["", "def", "load_imgs", "(", "self", ",", "filenames", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "for", "p", "in", "filenames", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "p", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_filenames": [[145, 161], ["glob.glob", "list", "glob.glob.sort", "glob.glob.sort", "numpy.arange", "len", "numpy.arange", "len"], "methods", ["None"], ["", "def", "get_filenames", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "filenames", "=", "glob", ".", "glob", "(", "f'{data_dir}/*_3_*.png'", ")", "# choose images with a same light condition", "\n", "\n", "if", "self", ".", "sort_key", "is", "not", "None", ":", "\n", "            ", "filenames", ".", "sort", "(", "key", "=", "self", ".", "sort_key", ")", "\n", "", "else", ":", "\n", "            ", "filenames", ".", "sort", "(", ")", "\n", "\n", "# choose every 8 images as evaluation images, the rest as training images", "\n", "", "val_indices", "=", "list", "(", "np", ".", "arange", "(", "7", ",", "len", "(", "filenames", ")", ",", "8", ")", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "filenames", "=", "[", "filenames", "[", "x", "]", "for", "x", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "filenames", ")", ")", "if", "x", "not", "in", "val_indices", "]", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "filenames", "=", "[", "filenames", "[", "idx", "]", "for", "idx", "in", "val_indices", "]", "\n", "\n", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.dataset.datasets.DTU.get_camera_params": [[162, 193], ["torch.cat", "torch.cat", "intrinsics.mean.mean.mean", "torch.tensor", "os.path.join", "open", "f.read().splitlines", "torch.tensor", "torch.inverse", "torch.tensor", "torch.cat.append", "intrinsics.mean.mean.append", "datasets.DTU.data_dir.split", "str().zfill", "f.read", "str", "f.read().splitlines.index", "f.read().splitlines.index", "float", "f.read().splitlines.index", "f.read().splitlines.index", "float", "a.strip().split", "a.strip().split", "int", "a.strip", "a.strip", "name.split"], "methods", ["None"], ["", "def", "get_camera_params", "(", "self", ")", ":", "\n", "        ", "prefix", "=", "'/'", ".", "join", "(", "self", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", "+", "[", "'Cameras'", ",", "'train'", "]", ")", "\n", "id_list", "=", "[", "os", ".", "path", ".", "join", "(", "prefix", ",", "str", "(", "int", "(", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "5", ":", "8", "]", ")", "-", "1", ")", ".", "zfill", "(", "8", ")", "+", "'_cam.txt'", ")", "for", "name", "in", "\n", "self", ".", "filenames", "]", "\n", "\n", "intrinsics", ",", "poses", "=", "[", "]", ",", "[", "]", "\n", "for", "id", "in", "id_list", ":", "\n", "            ", "with", "open", "(", "id", ")", "as", "f", ":", "\n", "                ", "text", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "pose_text", "=", "text", "[", "text", ".", "index", "(", "'extrinsic'", ")", "+", "1", ":", "text", ".", "index", "(", "'extrinsic'", ")", "+", "5", "]", "\n", "pose_text", "=", "torch", ".", "tensor", "(", "[", "[", "float", "(", "b", ")", "for", "b", "in", "a", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", "for", "a", "in", "pose_text", "]", ")", "\n", "pose_text", "=", "torch", ".", "inverse", "(", "pose_text", ")", "\n", "\n", "intrinsic_text", "=", "text", "[", "text", ".", "index", "(", "'intrinsic'", ")", "+", "1", ":", "text", ".", "index", "(", "'intrinsic'", ")", "+", "4", "]", "\n", "intrinsic_text", "=", "torch", ".", "tensor", "(", "[", "[", "float", "(", "b", ")", "for", "b", "in", "a", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", "for", "a", "in", "intrinsic_text", "]", ")", "\n", "intrinsic_text", "[", ":", "2", ",", ":", "]", "*=", "4.0", "# rescale with image size", "\n", "\n", "poses", ".", "append", "(", "pose_text", "[", "None", ",", ":", "3", ",", ":", "4", "]", ")", "\n", "intrinsics", ".", "append", "(", "intrinsic_text", "[", "None", "]", ")", "\n", "\n", "", "", "poses", "=", "torch", ".", "cat", "(", "poses", ")", "# [N, 3, 4]", "\n", "intrinsics", "=", "torch", ".", "cat", "(", "intrinsics", ",", "0", ")", "\n", "\n", "intrinsics", "=", "intrinsics", ".", "mean", "(", "dim", "=", "0", ")", "# assume intrinsics of all cameras are the same", "\n", "poses", "[", ":", ",", ":", ",", "3", "]", "/=", "200.0", "\n", "\n", "scale", "=", "torch", ".", "tensor", "(", "[", "self", ".", "img_wh", "[", "0", "]", "/", "self", ".", "img_wh_original", "[", "0", "]", ",", "self", ".", "img_wh", "[", "1", "]", "/", "self", ".", "img_wh_original", "[", "1", "]", "]", ")", "\n", "intrinsics", "[", ":", "2", "]", "*=", "scale", "[", ":", ",", "None", "]", "\n", "\n", "return", "intrinsics", ",", "poses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.mse": [[9, 16], ["torch.mean"], "function", ["None"], ["def", "mse", "(", "image_pred", ",", "image_gt", ",", "valid_mask", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "value", "=", "(", "image_pred", "-", "image_gt", ")", "**", "2", "\n", "if", "valid_mask", "is", "not", "None", ":", "\n", "        ", "value", "=", "value", "[", "valid_mask", "]", "\n", "", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "value", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.psnr": [[18, 22], ["torch.log10", "similarity.mse"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.mse"], ["", "def", "psnr", "(", "image_pred", ",", "image_gt", ",", "valid_mask", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "image_pred", "=", "image_pred", "/", "2", "+", "0.5", "\n", "image_gt", "=", "image_gt", "/", "2", "+", "0.5", "\n", "return", "-", "10", "*", "torch", ".", "log10", "(", "mse", "(", "image_pred", ",", "image_gt", ",", "valid_mask", ",", "reduction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.ssim": [[24, 29], ["kornia.losses.ssim"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.ssim"], ["", "def", "ssim", "(", "image_pred", ",", "image_gt", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "image_pred", "=", "image_pred", "/", "2", "+", "0.5", "\n", "image_gt", "=", "image_gt", "/", "2", "+", "0.5", "\n", "dssim_", "=", "dssim", "(", "image_pred", ",", "image_gt", ",", "3", ",", "reduction", ")", "# dissimilarity in [0, 1]", "\n", "return", "1", "-", "2", "*", "dssim_", "# in [-1, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.similarity.lpips": [[31, 37], ["lpips_fn.to", "lpips_fn.mean().item", "torch.no_grad", "lpips_fn", "lpips_fn.mean"], "function", ["None"], ["", "def", "lpips", "(", "image_pred", ",", "image_gt", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "lpips_fn", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "lpips_", "=", "lpips_fn", "(", "image_pred", ",", "image_gt", ")", "\n", "\n", "", "return", "lpips_", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.DiffAugment": [[9, 20], ["f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "DiffAugment", "(", "x", ",", "policy", "=", "None", ",", "channels_first", "=", "True", ")", ":", "\n", "    ", "if", "policy", "is", "not", "None", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.rand_brightness": [[22, 25], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.rand_saturation": [[27, 31], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_saturation", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.rand_contrast": [[33, 37], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_contrast", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.rand_translation": [[39, 53], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.125", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.rand_cutout": [[55, 70], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.pose_to_d9": [[5, 15], ["R[].reshape", "torch.cat", "torch.cat"], "function", ["None"], ["def", "pose_to_d9", "(", "pose", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "nbatch", "=", "pose", ".", "shape", "[", "0", "]", "\n", "R", "=", "pose", "[", ":", ",", ":", "3", ",", ":", "3", "]", "# [N, 3, 3]", "\n", "t", "=", "pose", "[", ":", ",", ":", "3", ",", "-", "1", "]", "# [N, 3]", "\n", "\n", "r6", "=", "R", "[", ":", ",", ":", "2", ",", ":", "3", "]", ".", "reshape", "(", "nbatch", ",", "-", "1", ")", "# [N, 6]", "\n", "\n", "d9", "=", "torch", ".", "cat", "(", "(", "t", ",", "r6", ")", ",", "-", "1", ")", "# [N, 9]", "\n", "\n", "return", "d9", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.r6d2mat": [[17, 39], ["torch.normalize", "torch.normalize", "torch.cross", "torch.cross", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "r6d2mat", "(", "d6", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Converts 6D rotation representation by Zhou et al. [1] to rotation matrix\n    using Gram--Schmidt orthogonalisation per Section B of [1].\n    Args:\n        d6: 6D rotation representation, of size (*, 6)\n\n    Returns:\n        batch of rotation matrices of size (*, 3, 3)\n\n    [1] Zhou, Y., Barnes, C., Lu, J., Yang, J., & Li, H.\n    On the Continuity of Rotation Representations in Neural Networks.\n    IEEE Conference on Computer Vision and Pattern Recognition, 2019.\n    Retrieved from http://arxiv.org/abs/1812.07035\n    \"\"\"", "\n", "\n", "a1", ",", "a2", "=", "d6", "[", "...", ",", ":", "3", "]", ",", "d6", "[", "...", ",", "3", ":", "]", "\n", "b1", "=", "F", ".", "normalize", "(", "a1", ",", "dim", "=", "-", "1", ")", "\n", "b2", "=", "a2", "-", "(", "b1", "*", "a2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "*", "b1", "\n", "b2", "=", "F", ".", "normalize", "(", "b2", ",", "dim", "=", "-", "1", ")", "\n", "b3", "=", "torch", ".", "cross", "(", "b1", ",", "b2", ",", "dim", "=", "-", "1", ")", "\n", "return", "torch", ".", "stack", "(", "(", "b1", ",", "b2", ",", "b3", ")", ",", "dim", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.look_at_rotation": [[41, 66], ["camera_position.to.to", "torch.tensor.expand", "torch.tensor.expand", "zip", "torch.normalize", "torch.normalize", "torch.normalize", "torch.isclose().all", "torch.isclose().all", "torch.isclose().all.any", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.is_tensor", "torch.is_tensor", "torch.tensor", "torch.tensor", "torch.is_tensor", "torch.is_tensor", "torch.tensor", "torch.tensor", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.normalize", "torch.where", "torch.where", "ValueError", "torch.isclose", "torch.isclose", "torch.cross", "torch.cross", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "look_at_rotation", "(", "camera_position", ",", "at", "=", "(", "0", ",", "0", ",", "0", ")", ",", "up", "=", "(", "0.", ",", "0", ",", "1", ")", ",", "device", ":", "str", "=", "\"cpu\"", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Format input and broadcast", "\n", "    ", "nbatch", "=", "camera_position", ".", "shape", "[", "0", "]", "\n", "camera_position", "=", "camera_position", ".", "to", "(", "device", ")", "\n", "if", "not", "torch", ".", "is_tensor", "(", "at", ")", ":", "\n", "        ", "at", "=", "torch", ".", "tensor", "(", "at", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "at", "=", "at", ".", "expand", "(", "nbatch", ",", "3", ")", "\n", "if", "not", "torch", ".", "is_tensor", "(", "up", ")", ":", "\n", "        ", "up", "=", "torch", ".", "tensor", "(", "up", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "up", "=", "up", ".", "expand", "(", "nbatch", ",", "3", ")", "\n", "\n", "for", "t", ",", "n", "in", "zip", "(", "[", "camera_position", ",", "at", ",", "up", "]", ",", "[", "\"camera_position\"", ",", "\"at\"", ",", "\"up\"", "]", ")", ":", "\n", "        ", "if", "t", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "            ", "msg", "=", "\"Expected arg %s to have shape (N, 3); got %r\"", "\n", "raise", "ValueError", "(", "msg", "%", "(", "n", ",", "t", ".", "shape", ")", ")", "\n", "", "", "z_axis", "=", "F", ".", "normalize", "(", "camera_position", "-", "at", ",", "eps", "=", "1e-5", ")", "\n", "x_axis", "=", "F", ".", "normalize", "(", "torch", ".", "cross", "(", "up", ",", "z_axis", ",", "dim", "=", "1", ")", ",", "eps", "=", "1e-5", ")", "\n", "y_axis", "=", "F", ".", "normalize", "(", "torch", ".", "cross", "(", "z_axis", ",", "x_axis", ",", "dim", "=", "1", ")", ",", "eps", "=", "1e-5", ")", "\n", "is_close", "=", "torch", ".", "isclose", "(", "x_axis", ",", "torch", ".", "tensor", "(", "0.0", ")", ",", "atol", "=", "5e-3", ")", ".", "all", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "is_close", ".", "any", "(", ")", ":", "\n", "# print(f'warning: up vector {up[0].detach()} is close to x_axis {z_axis[0].detach()}')", "\n", "        ", "replacement", "=", "F", ".", "normalize", "(", "torch", ".", "cross", "(", "y_axis", ",", "z_axis", ",", "dim", "=", "1", ")", ",", "eps", "=", "1e-5", ")", "\n", "x_axis", "=", "torch", ".", "where", "(", "is_close", ",", "replacement", ",", "x_axis", ")", "\n", "", "R", "=", "torch", ".", "cat", "(", "(", "x_axis", "[", ":", ",", "None", ",", ":", "]", ",", "y_axis", "[", ":", ",", "None", ",", ":", "]", ",", "z_axis", "[", ":", ",", "None", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "return", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.__init__": [[9, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "near", ",", "far", ",", "azim_range", ",", "elev_range", ",", "radius", ",", "look_at_origin", ",", "ndc", ",", "intrinsics", ")", ":", "\n", "        ", "self", ".", "near", "=", "near", "\n", "self", ".", "far", "=", "far", "\n", "self", ".", "azim_range", "=", "azim_range", "\n", "self", ".", "elev_range", "=", "elev_range", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "look_at_origin", "=", "look_at_origin", "\n", "self", ".", "up", "=", "(", "0.", ",", "0", ",", "1", ")", "\n", "self", ".", "ndc", "=", "ndc", "\n", "self", ".", "scale", "=", "1.0", "\n", "self", ".", "start_intrinsics", "=", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.update_intrinsic": [[21, 26], ["ray_sampler.RaySampler.start_intrinsics.clone().detach", "ray_sampler.RaySampler.start_intrinsics.clone"], "methods", ["None"], ["", "def", "update_intrinsic", "(", "self", ",", "scale", ")", ":", "\n", "        ", "self", ".", "intrinsics", "=", "self", ".", "start_intrinsics", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "self", ".", "intrinsics", "[", ":", "2", "]", "=", "self", ".", "intrinsics", "[", ":", "2", "]", "*", "scale", "[", ":", ",", "None", "]", "\n", "\n", "return", "self", ".", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.random_poses": [[27, 57], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tools.ray_utils.look_at_rotation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.look_at_rotation"], ["", "def", "random_poses", "(", "self", ",", "nbatch", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "raes", "=", "torch", ".", "rand", "(", "nbatch", ",", "3", ",", "device", "=", "device", ")", "\n", "\n", "azims", "=", "raes", "[", ":", ",", "0", ":", "1", "]", "*", "(", "self", ".", "azim_range", "[", "1", "]", "-", "self", ".", "azim_range", "[", "0", "]", ")", "+", "self", ".", "azim_range", "[", "0", "]", "\n", "elevs", "=", "raes", "[", ":", ",", "1", ":", "2", "]", "*", "(", "self", ".", "elev_range", "[", "1", "]", "-", "self", ".", "elev_range", "[", "0", "]", ")", "+", "self", ".", "elev_range", "[", "0", "]", "\n", "\n", "azims", "=", "math", ".", "pi", "/", "180.0", "*", "azims", "\n", "elevs", "=", "math", ".", "pi", "/", "180.0", "*", "elevs", "\n", "\n", "cx", "=", "torch", ".", "cos", "(", "elevs", ")", "*", "torch", ".", "cos", "(", "azims", ")", "\n", "cy", "=", "torch", ".", "cos", "(", "elevs", ")", "*", "torch", ".", "sin", "(", "azims", ")", "\n", "cz", "=", "torch", ".", "sin", "(", "elevs", ")", "\n", "T", "=", "torch", ".", "cat", "(", "[", "cx", ",", "cy", ",", "cz", "]", ",", "-", "1", ")", "# [N, 3]", "\n", "\n", "radius", "=", "raes", "[", ":", ",", "2", ":", "]", "*", "(", "self", ".", "radius", "[", "1", "]", "-", "self", ".", "radius", "[", "0", "]", ")", "+", "self", ".", "radius", "[", "0", "]", "\n", "\n", "T", "=", "T", "*", "radius", "\n", "\n", "if", "self", ".", "look_at_origin", ":", "\n", "            ", "lookat", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "torch", ".", "randn", "(", "(", "nbatch", ",", "2", ")", ",", "device", "=", "device", ")", "*", "self", ".", "radius", "[", "0", "]", "*", "0.01", "\n", "z", "=", "torch", ".", "zeros", "(", "(", "nbatch", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "\n", "lookat", "=", "torch", ".", "cat", "(", "(", "xy", ",", "z", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "R", "=", "look_at_rotation", "(", "T", ",", "at", "=", "lookat", ",", "up", "=", "self", ".", "up", ",", "device", "=", "device", ")", "# [N, 3, 3]", "\n", "RT", "=", "torch", ".", "cat", "(", "(", "R", ",", "T", "[", "...", ",", "None", "]", ")", ",", "-", "1", ")", "# [N, 3, 4]", "\n", "\n", "return", "RT", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.spheric_poses": [[58, 72], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "tools.ray_utils.look_at_rotation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "sum"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.look_at_rotation"], ["", "def", "spheric_poses", "(", "self", ",", "N", "=", "120", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "elevs", "=", "torch", ".", "ones", "(", "[", "N", ",", "1", "]", ",", "device", "=", "device", ")", "*", "sum", "(", "self", ".", "elev_range", ")", "*", "0.5", "*", "math", ".", "pi", "/", "180.0", "\n", "azims", "=", "torch", ".", "linspace", "(", "self", ".", "azim_range", "[", "0", "]", ",", "self", ".", "azim_range", "[", "1", "]", ",", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "*", "math", ".", "pi", "/", "180.0", "\n", "radius", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "self", ".", "radius", ")", ")", "\n", "\n", "cx", "=", "torch", ".", "cos", "(", "elevs", ")", "*", "torch", ".", "cos", "(", "azims", ")", "\n", "cy", "=", "torch", ".", "cos", "(", "elevs", ")", "*", "torch", ".", "sin", "(", "azims", ")", "\n", "cz", "=", "torch", ".", "sin", "(", "elevs", ")", "\n", "t", "=", "torch", ".", "cat", "(", "[", "cx", ",", "cy", ",", "cz", "]", ",", "-", "1", ")", "*", "radius", "\n", "\n", "R", "=", "look_at_rotation", "(", "t", ",", "at", "=", "(", "0", ",", "0", ",", "0", ")", ",", "device", "=", "device", ")", "# [N, 3, 3]", "\n", "c2w", "=", "torch", ".", "cat", "(", "(", "R", ",", "t", "[", "...", ",", "None", "]", ")", ",", "-", "1", ")", "# [N, 3, 4]", "\n", "\n", "return", "c2w", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.get_rays": [[73, 98], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "[].repeat", "[].repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "c2ws[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "c2ws[].permute", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "[].repeat.t", "[].repeat.t", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "get_rays", "(", "self", ",", "coords", ",", "c2ws", ",", "img_wh", ",", "device", ")", ":", "\n", "        ", "n", ",", "h", ",", "w", ",", "_", "=", "coords", ".", "shape", "\n", "i", ",", "j", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0", ",", "img_wh", "[", "0", "]", "-", "1", ",", "img_wh", "[", "0", "]", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "img_wh", "[", "1", "]", "-", "1", ",", "img_wh", "[", "1", "]", ",", "device", "=", "device", ")", ")", "\n", "i", "=", "i", ".", "t", "(", ")", "[", "None", ",", "None", "]", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "# [N, 1, H, W]", "\n", "j", "=", "j", ".", "t", "(", ")", "[", "None", ",", "None", "]", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "# [N, 1, H, W]", "\n", "\n", "u", "=", "F", ".", "grid_sample", "(", "i", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", ":", ",", "0", "]", "# [N, h, w]", "\n", "v", "=", "F", ".", "grid_sample", "(", "j", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", ":", ",", "0", "]", "# [N, h, w]", "\n", "\n", "dirs", "=", "torch", ".", "stack", "(", "\n", "[", "(", "u", "-", "self", ".", "intrinsics", "[", "0", ",", "2", "]", ")", "/", "self", ".", "intrinsics", "[", "0", ",", "0", "]", ",", "\n", "-", "(", "v", "-", "self", ".", "intrinsics", "[", "1", ",", "2", "]", ")", "/", "self", ".", "intrinsics", "[", "1", ",", "1", "]", ",", "\n", "-", "torch", ".", "ones_like", "(", "u", ")", "]", ",", "-", "1", ")", "# [N, H, W, 3]", "\n", "\n", "rays_d", "=", "torch", ".", "einsum", "(", "'abcd, ade -> abce'", ",", "dirs", ",", "c2ws", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# [N, H, W, 3]", "\n", "rays_d", "=", "rays_d", "/", "torch", ".", "norm", "(", "rays_d", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "rays_o", "=", "c2ws", "[", ":", ",", "None", ",", "None", ",", ":", "3", ",", "-", "1", "]", ".", "repeat", "(", "1", ",", "h", ",", "w", ",", "1", ")", "# [N, H, W, 3]", "\n", "\n", "rays", "=", "torch", ".", "cat", "(", "[", "rays_o", ",", "rays_d", ",", "\n", "self", ".", "near", "*", "torch", ".", "ones_like", "(", "rays_o", "[", "...", ",", ":", "1", "]", ")", ",", "\n", "self", ".", "far", "*", "torch", ".", "ones_like", "(", "rays_o", "[", "...", ",", ":", "1", "]", ")", "]", ",", "-", "1", ")", "# [N, H, W, 8]", "\n", "\n", "return", "rays", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "full_indices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.__call__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.PatchSampler.image2patch": [[13, 21], ["patch_sampler.PatchSampler.", "torch.grid_sample", "torch.grid_sample"], "methods", ["None"], ["", "def", "image2patch", "(", "self", ",", "imgs", ",", "wh", ",", "device", ")", ":", "\n", "        ", "nbatch", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "patch_coord", ",", "scale", "=", "self", "(", "nbatch", ",", "wh", ",", "device", ")", "\n", "\n", "if", "not", "self", ".", "full_indices", ":", "\n", "            ", "imgs", "=", "F", ".", "grid_sample", "(", "imgs", ",", "patch_coord", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "return", "imgs", ",", "patch_coord", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.FullImageSampler.__init__": [[24, 28], ["patch_sampler.PatchSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FullImageSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "full_indices", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.FullImageSampler.__call__": [[29, 39], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "coords.repeat().to.repeat().to.repeat().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "coords.repeat().to.repeat().to.contiguous", "torch.ones.contiguous", "torch.ones.contiguous", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "coords.repeat().to.repeat().to.repeat"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "nbatch", ",", "wh", ",", "device", ")", ":", "\n", "        ", "w", ",", "h", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "wh", "[", "1", "]", ")", ",", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "wh", "[", "0", "]", ")", "]", ")", "\n", "h", "=", "h", "[", "None", ",", "...", ",", "None", "]", "\n", "w", "=", "w", "[", "None", ",", "...", ",", "None", "]", "\n", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "h", ",", "w", "]", ",", "dim", "=", "-", "1", ")", "# [1, H, W, 2]", "\n", "\n", "coords", "=", "coords", ".", "repeat", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "scales", "=", "torch", ".", "ones", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "return", "coords", ".", "contiguous", "(", ")", ",", "scales", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.RescalePatchSampler.__init__": [[42, 47], ["patch_sampler.PatchSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "RescalePatchSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "full_indices", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.RescalePatchSampler.__call__": [[48, 61], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "coords.repeat().to.repeat().to.repeat().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "coords.repeat().to.repeat().to.contiguous", "torch.ones.contiguous", "torch.ones.contiguous", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "coords.repeat().to.repeat().to.repeat"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "nbatch", ",", "patch_size", ",", "device", ")", ":", "\n", "        ", "w", ",", "h", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "patch_size", ")", ",", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "patch_size", ")", "]", ")", "\n", "h", "=", "h", "[", "None", ",", "...", ",", "None", "]", "\n", "w", "=", "w", "[", "None", ",", "...", ",", "None", "]", "\n", "\n", "h", "=", "h", "*", "self", ".", "scale", "\n", "w", "=", "w", "*", "self", ".", "scale", "\n", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "h", ",", "w", "]", ",", "dim", "=", "-", "1", ")", "# [1, H, W, 2]", "\n", "\n", "coords", "=", "coords", ".", "repeat", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "scales", "=", "torch", ".", "ones", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "return", "coords", ".", "contiguous", "(", ")", ",", "scales", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.FlexPatchSampler.__init__": [[64, 78], ["patch_sampler.PatchSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_shift", "=", "True", ",", "random_scale", "=", "True", ",", "min_scale", "=", "0.25", ",", "max_scale", "=", "1.", ",", "scale_anneal", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "FlexPatchSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "random_scale", "=", "random_scale", "\n", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "scales_curr", "=", "(", "min_scale", ",", "max_scale", ")", "\n", "\n", "self", ".", "iterations", "=", "0", "\n", "self", ".", "scale_anneal", "=", "scale_anneal", "\n", "\n", "self", ".", "full_indices", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.patch_sampler.FlexPatchSampler.__call__": [[79, 114], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "min", "torch.cat.contiguous", "torch.cat.contiguous", "scales.contiguous", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "math.exp", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "nbatch", ",", "patch_size", ",", "device", ")", ":", "\n", "        ", "w", ",", "h", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "patch_size", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "patch_size", ",", "device", "=", "device", ")", "]", ")", "\n", "h", "=", "h", "[", "None", ",", "...", ",", "None", "]", "\n", "w", "=", "w", "[", "None", ",", "...", ",", "None", "]", "\n", "\n", "if", "self", ".", "scale_anneal", ">", "0", ":", "\n", "            ", "min_scale", "=", "max", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", "*", "exp", "(", "-", "self", ".", "iterations", "*", "self", ".", "scale_anneal", ")", ")", "\n", "min_scale", "=", "min", "(", "0.8", ",", "min_scale", ")", "\n", "", "else", ":", "\n", "            ", "min_scale", "=", "self", ".", "min_scale", "\n", "\n", "", "max_scale", "=", "self", ".", "max_scale", "\n", "\n", "self", ".", "scales_curr", "=", "(", "min_scale", ",", "max_scale", ")", "\n", "\n", "if", "self", ".", "random_scale", ":", "\n", "            ", "scales", "=", "torch", ".", "rand", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "*", "(", "max_scale", "-", "min_scale", ")", "+", "min_scale", "\n", "", "else", ":", "\n", "            ", "scales", "=", "torch", ".", "ones", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "*", "min_scale", "\n", "\n", "", "h", "=", "h", "*", "scales", "\n", "w", "=", "w", "*", "scales", "\n", "\n", "if", "self", ".", "random_shift", ":", "\n", "            ", "max_offset", "=", "1", "-", "scales", "\n", "h_offset", "=", "(", "torch", ".", "rand", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "*", "2.0", "-", "1.0", ")", "*", "max_offset", "# [nbatch, 1, 1, 1]", "\n", "w_offset", "=", "(", "torch", ".", "rand", "(", "(", "nbatch", ",", "1", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "*", "2.0", "-", "1.0", ")", "*", "max_offset", "# [nbatch, 1, 1, 1]", "\n", "\n", "h", "+=", "h_offset", "\n", "w", "+=", "w_offset", "\n", "\n", "", "coords", "=", "torch", ".", "cat", "(", "[", "h", ",", "w", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "coords", ".", "contiguous", "(", ")", ",", "scales", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.count_trainable_parameters": [[11, 14], ["filter", "sum", "model.parameters", "numpy.prod", "p.size"], "function", ["None"], ["def", "count_trainable_parameters", "(", "model", ")", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "return", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.get_nsamples": [[16, 25], ["next", "x.append", "x_next.size", "torch.cat", "iter"], "function", ["None"], ["", "def", "get_nsamples", "(", "data_loader", ",", "N", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "n", "=", "0", "\n", "while", "n", "<", "N", ":", "\n", "        ", "x_next", ",", "_", "=", "next", "(", "iter", "(", "data_loader", ")", ")", "\n", "x", ".", "append", "(", "x_next", ")", "\n", "n", "+=", "x_next", ".", "size", "(", "0", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "[", ":", "N", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.get_camera_wireframe": [[27, 42], ["torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "x.float"], "function", ["None"], ["", "def", "get_camera_wireframe", "(", "scale", ":", "float", "=", "0.03", ")", ":", "\n", "    ", "\"\"\"\n    Returns a wireframe of a 3D line-plot of a camera symbol.\n    \"\"\"", "\n", "a", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "-", "2", ",", "1.5", ",", "4", "]", ")", "\n", "up1", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "0", ",", "1.5", ",", "4", "]", ")", "\n", "up2", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "0", ",", "2", ",", "4", "]", ")", "\n", "b", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "2", ",", "1.5", ",", "4", "]", ")", "\n", "c", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "-", "2", ",", "-", "1.5", ",", "4", "]", ")", "\n", "d", "=", "0.5", "*", "torch", ".", "tensor", "(", "[", "2", ",", "-", "1.5", ",", "4", "]", ")", "\n", "C", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "F", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "3", "]", ")", "\n", "camera_points", "=", "[", "a", ",", "up1", ",", "up2", ",", "up1", ",", "b", ",", "d", ",", "c", ",", "a", ",", "C", ",", "b", ",", "d", ",", "C", ",", "c", ",", "C", ",", "F", "]", "\n", "lines", "=", "torch", ".", "stack", "(", "[", "x", ".", "float", "(", ")", "for", "x", "in", "camera_points", "]", ")", "*", "scale", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.plot_cameras": [[44, 58], ["[].to", "torch.cat", "torch.tensor", "torch.bmm", "wire.detach().cpu().numpy().T.astype", "ax.plot", "plot_handles.append", "[].to.repeat", "utils.get_camera_wireframe", "wire.detach().cpu().numpy", "wire.detach().cpu", "wire.detach"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.get_camera_wireframe"], ["", "def", "plot_cameras", "(", "ax", ",", "c2w", ",", "color", ":", "str", "=", "\"blue\"", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "device", "=", "c2w", ".", "device", "\n", "nbatch", "=", "c2w", ".", "shape", "[", "0", "]", "\n", "cam_wires_canonical", "=", "get_camera_wireframe", "(", "scale", ")", "[", "None", "]", ".", "to", "(", "device", ")", "\n", "R", "=", "c2w", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "torch", ".", "tensor", "(", "[", "[", "1.", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "device", "=", "device", ")", "\n", "R", "=", "torch", ".", "cat", "(", "[", "r", ".", "T", "[", "None", "]", "for", "r", "in", "R", "]", ",", "0", ")", "\n", "cam_wires_trans", "=", "torch", ".", "bmm", "(", "cam_wires_canonical", ".", "repeat", "(", "nbatch", ",", "1", ",", "1", ")", ",", "R", ")", "+", "c2w", "[", ":", ",", "None", ",", ":", "3", ",", "-", "1", "]", "\n", "plot_handles", "=", "[", "]", "\n", "for", "wire", "in", "cam_wires_trans", ":", "\n", "# the Z and Y axes are flipped intentionally here!", "\n", "        ", "x_", ",", "y_", ",", "z_", "=", "wire", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "T", ".", "astype", "(", "float", ")", "\n", "(", "h", ",", ")", "=", "ax", ".", "plot", "(", "x_", ",", "y_", ",", "z_", ",", "color", "=", "color", ",", "linewidth", "=", "0.3", ")", "\n", "plot_handles", ".", "append", "(", "h", ")", "\n", "", "return", "plot_handles", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.fig2img": [[60, 67], ["io.BytesIO", "fig.savefig", "io.BytesIO.seek", "PIL.Image.open"], "function", ["None"], ["", "def", "fig2img", "(", "fig", ")", ":", "\n", "    ", "import", "io", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "fig", ".", "savefig", "(", "buf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.plot_camera_scene": [[69, 118], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_zlim3d", "numpy.zeros_like", "fig.add_subplot.plot3D", "fig.add_subplot.plot3D", "fig.add_subplot.plot3D", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "utils.plot_cameras", "fig.add_subplot.legend", "fig.add_subplot.axis", "plt.figure.tight_layout", "utils.fig2img", "matplotlib.close", "utils.plot_cameras", "labels_handles.values", "labels_handles.keys", "torchvision.transforms.ToTensor", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.plot_cameras", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.fig2img", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.utils.plot_cameras"], ["", "def", "plot_camera_scene", "(", "c2w", ",", "c2w_gt", "=", "None", ",", "plot_radius", "=", "5.0", ",", "status", "=", "''", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "45.", ",", "azim", "=", "60", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "plot_radius", ",", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "plot_radius", ",", "plot_radius", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "plot_radius", "*", "2", "]", ")", "\n", "\n", "xspan", ",", "yspan", ",", "zspan", "=", "3", "*", "[", "np", ".", "linspace", "(", "-", "plot_radius", ",", "plot_radius", ",", "20", ")", "]", "\n", "zero", "=", "np", ".", "zeros_like", "(", "xspan", ")", "\n", "ax", ".", "plot3D", "(", "xspan", ",", "zero", ",", "zero", ",", "'k--'", ")", "\n", "ax", ".", "plot3D", "(", "zero", ",", "yspan", ",", "zero", ",", "'k--'", ")", "\n", "ax", ".", "plot3D", "(", "zero", ",", "zero", ",", "zspan", "+", "plot_radius", ",", "'k--'", ")", "\n", "ax", ".", "text", "(", "plot_radius", ",", ".5", ",", ".5", ",", "\"x\"", ",", "color", "=", "'red'", ")", "\n", "ax", ".", "text", "(", ".5", ",", "plot_radius", ",", ".5", ",", "\"y\"", ",", "color", "=", "'green'", ")", "\n", "ax", ".", "text", "(", ".5", ",", ".5", ",", "plot_radius", "*", "2", ",", "\"z\"", ",", "color", "=", "'blue'", ")", "\n", "\n", "scale", "=", "0.05", "*", "plot_radius", "\n", "handle_cam", "=", "plot_cameras", "(", "ax", ",", "c2w", ",", "color", "=", "\"#FF7D1E\"", ",", "scale", "=", "scale", ")", "\n", "if", "c2w_gt", "is", "not", "None", ":", "\n", "        ", "handle_cam_gt", "=", "plot_cameras", "(", "ax", ",", "c2w_gt", ",", "color", "=", "\"#812CE5\"", ",", "scale", "=", "scale", ")", "\n", "\n", "labels_handles", "=", "{", "\n", "\"Estimated Cameras\"", ":", "handle_cam", "[", "0", "]", ",", "\n", "\"GT Cameras\"", ":", "handle_cam_gt", "[", "0", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "labels_handles", "=", "{", "\n", "\"Estimated cameras\"", ":", "handle_cam", "[", "0", "]", "\n", "}", "\n", "\n", "", "ax", ".", "legend", "(", "\n", "labels_handles", ".", "values", "(", ")", ",", "\n", "labels_handles", ".", "keys", "(", ")", ",", "\n", "loc", "=", "\"upper center\"", ",", "\n", "bbox_to_anchor", "=", "(", "0.32", ",", "0.7", ")", ",", "\n", "prop", "=", "{", "'size'", ":", "8", "}", "\n", ")", "\n", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "img", "=", "fig2img", "(", "fig", ")", "\n", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "img", "=", "ToTensor", "(", ")", "(", "img", ")", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.discriminator.Discriminator.__init__": [[10, 108], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "model.rendering.Embedding", "torch.Sequential", "torch.Sequential", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "SN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "SN", "IN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conditional", ",", "policy", ",", "ndf", "=", "64", ",", "imsize", "=", "64", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "imsize", "==", "16", "or", "imsize", "==", "32", "or", "imsize", "==", "64", "or", "imsize", "==", "128", ")", "\n", "\n", "nc", "=", "3", "\n", "self", ".", "conditional", "=", "conditional", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "imsize", "=", "imsize", "\n", "\n", "SN", "=", "torch", ".", "nn", ".", "utils", ".", "spectral_norm", "\n", "IN", "=", "lambda", "x", ":", "nn", ".", "InstanceNorm2d", "(", "x", ")", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "final_dim", "=", "ndf", "\n", "self", ".", "embedding_scale", "=", "Embedding", "(", "1", ",", "4", ")", "\n", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "+", "self", ".", "embedding_scale", ".", "out_channels", ",", "ndf", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "1", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "final_dim", "=", "1", "\n", "\n", "", "blocks", "=", "[", "]", "\n", "if", "self", ".", "imsize", "==", "128", ":", "\n", "            ", "blocks", "+=", "[", "\n", "# input is (nc) x 128 x 128", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", "//", "2", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# input is (ndf//2) x 64 x 64", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "//", "2", ",", "ndf", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "IN", "(", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 32 x 32", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 2),", "\n", "IN", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 4),", "\n", "IN", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "", "elif", "self", ".", "imsize", "==", "64", ":", "\n", "            ", "blocks", "+=", "[", "\n", "# input is (nc) x 64 x 64", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 32 x 32", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 2),", "\n", "IN", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 4),", "\n", "IN", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "", "elif", "self", ".", "imsize", "==", "32", ":", "\n", "            ", "blocks", "+=", "[", "\n", "# input is (nc) x 32 x 32", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", "*", "2", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 2),", "\n", "IN", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 4),", "\n", "IN", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "blocks", "+=", "[", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", "*", "4", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 4),", "\n", "IN", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "\n", "", "blocks", "+=", "[", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 8),", "\n", "IN", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "SN", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "final_dim", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ")", ",", "\n", "# nn.Sigmoid()", "\n", "]", "\n", "blocks", "=", "[", "x", "for", "x", "in", "blocks", "if", "x", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.discriminator.Discriminator.forward": [[109, 123], ["discriminator.Discriminator.main", "tools.diff_augments.DiffAugment", "discriminator.Discriminator.contiguous", "discriminator.Discriminator.embedding_scale", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "discriminator.Discriminator.final().flatten", "random.random", "discriminator.Discriminator.final"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.diff_augments.DiffAugment"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "policy", "is", "not", "None", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "input", "=", "DiffAugment", "(", "input", ",", "policy", "=", "self", ".", "policy", ")", "\n", "", "else", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", ")", "\n", "\n", "", "input", "=", "self", ".", "main", "(", "input", ")", "# [N, c1, 1, 1]", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "y", "=", "self", ".", "embedding_scale", "(", "y", ",", "dim", "=", "1", ")", "\n", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "y", ")", ",", "1", ")", "# [N, c1+c2, 1, 1]", "\n", "input", "=", "self", ".", "final", "(", "input", ")", ".", "flatten", "(", ")", "\n", "\n", "", "return", "input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.Embedding.__init__": [[6, 21], ["torch.Module.__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "len"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "N_freqs", ",", "logscale", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Defines a function that embeds x to (x, sin(2^k x), cos(2^k x), ...)\n        in_channels: number of input channels (3 for both xyz and direction)\n        \"\"\"", "\n", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "N_freqs", "=", "N_freqs", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "funcs", "=", "[", "torch", ".", "sin", ",", "torch", ".", "cos", "]", "\n", "self", ".", "out_channels", "=", "in_channels", "*", "(", "len", "(", "self", ".", "funcs", ")", "*", "N_freqs", "+", "1", ")", "\n", "\n", "if", "logscale", ":", "\n", "            ", "self", ".", "freq_bands", "=", "2", "**", "torch", ".", "linspace", "(", "0", ",", "N_freqs", "-", "1", ",", "N_freqs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "freq_bands", "=", "torch", ".", "linspace", "(", "1", ",", "2", "**", "(", "N_freqs", "-", "1", ")", ",", "N_freqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.Embedding.forward": [[22, 40], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Embeds x to (x, sin(2^k x), cos(2^k x), ...)\n        Different from the paper, \"x\" is also in the output\n        See https://github.com/bmild/nerf/issues/12\n\n        Inputs:\n            x: (B, self.in_channels)\n\n        Outputs:\n            out: (B, self.out_channels)\n        \"\"\"", "\n", "out", "=", "[", "x", "]", "\n", "for", "freq", "in", "self", ".", "freq_bands", ":", "\n", "            ", "for", "func", "in", "self", ".", "funcs", ":", "\n", "                ", "out", "+=", "[", "func", "(", "freq", "*", "x", ")", "]", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "out", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.sample_pdf": [[42, 84], ["torch.cumsum", "torch.cumsum", "torch.cat", "torch.cat", "torch.rand.contiguous", "torch.searchsorted", "torch.searchsorted", "torch.clamp_min", "torch.clamp_min", "torch.clamp_max", "torch.clamp_max", "torch.stack().view", "torch.stack().view", "torch.gather().view", "torch.gather().view", "torch.gather().view", "torch.gather().view", "torch.sum", "torch.sum", "torch.linspace", "torch.linspace", "torch.rand.expand", "torch.rand", "torch.rand", "torch.cat.detach", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "function", ["None"], ["", "", "def", "sample_pdf", "(", "bins", ",", "weights", ",", "N_importance", ",", "det", "=", "False", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"\n    Sample @N_importance samples from @bins with distribution defined by @weights.\n\n    Inputs:\n        bins: (N_rays, N_samples_+1) where N_samples_ is \"the number of coarse samples per ray - 2\"\n        weights: (N_rays, N_samples_)\n        N_importance: the number of samples to draw from the distribution\n        det: deterministic or not\n        eps: a small number to prevent division by zero\n\n    Outputs:\n        samples: the sampled samples\n    \"\"\"", "\n", "N_rays", ",", "N_samples_", "=", "weights", ".", "shape", "\n", "weights", "=", "weights", "+", "eps", "# prevent division by zero (don't do inplace op!)", "\n", "pdf", "=", "weights", "/", "torch", ".", "sum", "(", "weights", ",", "-", "1", ",", "keepdim", "=", "True", ")", "# (N_rays, N_samples_)", "\n", "cdf", "=", "torch", ".", "cumsum", "(", "pdf", ",", "-", "1", ")", "# (N_rays, N_samples), cumulative distribution function", "\n", "cdf", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "cdf", "[", ":", ",", ":", "1", "]", ")", ",", "cdf", "]", ",", "-", "1", ")", "# (N_rays, N_samples_+1)", "\n", "# padded to 0~1 inclusive", "\n", "\n", "if", "det", ":", "\n", "        ", "u", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "N_importance", ",", "device", "=", "bins", ".", "device", ")", "\n", "u", "=", "u", ".", "expand", "(", "N_rays", ",", "N_importance", ")", "\n", "", "else", ":", "\n", "        ", "u", "=", "torch", ".", "rand", "(", "N_rays", ",", "N_importance", ",", "device", "=", "bins", ".", "device", ")", "\n", "", "u", "=", "u", ".", "contiguous", "(", ")", "\n", "\n", "inds", "=", "torch", ".", "searchsorted", "(", "cdf", ".", "detach", "(", ")", ",", "u", ",", "right", "=", "True", ")", "\n", "below", "=", "torch", ".", "clamp_min", "(", "inds", "-", "1", ",", "0", ")", "\n", "above", "=", "torch", ".", "clamp_max", "(", "inds", ",", "N_samples_", ")", "\n", "\n", "inds_sampled", "=", "torch", ".", "stack", "(", "[", "below", ",", "above", "]", ",", "-", "1", ")", ".", "view", "(", "N_rays", ",", "2", "*", "N_importance", ")", "\n", "cdf_g", "=", "torch", ".", "gather", "(", "cdf", ",", "1", ",", "inds_sampled", ")", ".", "view", "(", "N_rays", ",", "N_importance", ",", "2", ")", "\n", "bins_g", "=", "torch", ".", "gather", "(", "bins", ",", "1", ",", "inds_sampled", ")", ".", "view", "(", "N_rays", ",", "N_importance", ",", "2", ")", "\n", "\n", "denom", "=", "cdf_g", "[", "...", ",", "1", "]", "-", "cdf_g", "[", "...", ",", "0", "]", "\n", "denom", "[", "denom", "<", "eps", "]", "=", "1", "# denom equals 0 means a bin has weight 0, in which case it will not be sampled", "\n", "# anyway, therefore any value for it is fine (set to 1 here)", "\n", "\n", "samples", "=", "bins_g", "[", "...", ",", "0", "]", "+", "(", "u", "-", "cdf_g", "[", "...", ",", "0", "]", ")", "/", "denom", "*", "(", "bins_g", "[", "...", ",", "1", "]", "-", "bins_g", "[", "...", ",", "0", "]", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.inference": [[86, 163], ["torch.repeat_interleave", "torch.repeat_interleave", "xyz_.view.view", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cumprod", "torch.cumprod", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "model", "torch.cat.view", "torch.cat.view", "torch.randn", "torch.randn", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dir_.unsqueeze", "torch.ones_like", "torch.ones_like", "weights.sum", "torch.relu", "torch.relu", "weights.unsqueeze", "weights.sum.unsqueeze"], "function", ["None"], ["", "def", "inference", "(", "model", ",", "xyz_", ",", "dir_", ",", "z_vals_", ",", "far", ",", "\n", "white_back", ",", "chunk", ",", "noise_std", ",", "weights_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Helper function that performs model inference.\n\n    Inputs:\n        model: NeRF model (coarse or fine)\n        xyz_: (N_rays, N_samples_, 3) sampled positions\n              N_samples_ is the number of sampled points in each ray;\n                         = N_samples for coarse model\n                         = N_samples+N_importance for fine model\n        dir_: (N_rays, 3) ray directions\n        rays_d: (N_rays, embed_dir_channels) embedded directions\n        xyz_noise_: (N_rays, s_dim) shape code\n        dir_noise_: (N_rays, a_dim) appearance code\n        z_vals: (N_rays, N_samples_) depths of the sampled positions\n        weights_only: do inference on sigma only or not\n\n    Outputs:\n        if weights_only:\n            weights: (N_rays, N_samples_): weights of each sample\n        else:\n            rgb_final: (N_rays, 3) the final rgb image\n            depth_final: (N_rays) depth map\n            weights: (N_rays, N_samples_): weights of each sample\n    \"\"\"", "\n", "N_rays", ",", "N_samples", "=", "xyz_", ".", "shape", "[", ":", "2", "]", "\n", "rays_d_", "=", "torch", ".", "repeat_interleave", "(", "dir_", ",", "repeats", "=", "N_samples", ",", "dim", "=", "0", ")", "# [N_rays*N_samples, 3]", "\n", "\n", "# Convert these values using volume rendering (Section 4)", "\n", "xyz_", "=", "xyz_", ".", "view", "(", "-", "1", ",", "3", ")", "# [N_rays*N_samples, 4]", "\n", "\n", "deltas", "=", "z_vals_", "[", ":", ",", "1", ":", "]", "-", "z_vals_", "[", ":", ",", ":", "-", "1", "]", "# (N_rays, N_samples_-1)", "\n", "deltas", "=", "torch", ".", "cat", "(", "[", "deltas", ",", "far", "-", "z_vals_", "[", ":", ",", "-", "1", ":", "]", "]", ",", "-", "1", ")", "# (N_rays, N_samples_)", "\n", "\n", "# Multiply each distance by the norm of its corresponding direction ray", "\n", "# to convert to real world distance (accounts for non-unit directions).", "\n", "deltas", "=", "deltas", "*", "torch", ".", "norm", "(", "dir_", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Perform model inference to get rgb and raw sigma", "\n", "B", "=", "xyz_", ".", "shape", "[", "0", "]", "\n", "out_chunks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "B", ",", "chunk", ")", ":", "\n", "# Embed positions by chunk", "\n", "        ", "xyzdir", "=", "torch", ".", "cat", "(", "[", "xyz_", "[", "i", ":", "i", "+", "chunk", "]", ",", "rays_d_", "[", "i", ":", "i", "+", "chunk", "]", "]", ",", "1", ")", "\n", "rgb", "=", "model", "(", "xyzdir", ",", "sigma_only", "=", "False", ")", "\n", "out_chunks", "+=", "[", "rgb", "]", "\n", "", "out_chunks", "=", "torch", ".", "cat", "(", "out_chunks", ",", "0", ")", "\n", "\n", "if", "weights_only", ":", "\n", "        ", "sigmas", "=", "out_chunks", ".", "view", "(", "N_rays", ",", "N_samples", ")", "\n", "", "else", ":", "\n", "        ", "rgbsigma", "=", "out_chunks", ".", "view", "(", "N_rays", ",", "N_samples", ",", "4", ")", "\n", "rgbs", "=", "rgbsigma", "[", "...", ",", ":", "3", "]", "# (N_rays, N_samples_, 3)", "\n", "sigmas", "=", "rgbsigma", "[", "...", ",", "3", "]", "# (N_rays, N_samples_)", "\n", "\n", "", "noise", "=", "torch", ".", "randn", "(", "sigmas", ".", "shape", ",", "device", "=", "sigmas", ".", "device", ")", "*", "noise_std", "\n", "# compute alpha by the formula (3)", "\n", "alphas", "=", "1", "-", "torch", ".", "exp", "(", "-", "deltas", "*", "torch", ".", "relu", "(", "sigmas", "+", "noise", ")", ")", "# (N_rays, N_samples_)", "\n", "alphas_shifted", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "alphas", "[", ":", ",", ":", "1", "]", ")", ",", "1", "-", "alphas", "+", "1e-10", "]", ",", "-", "1", ")", "# [1, a1, a2, ...]", "\n", "\n", "T", "=", "torch", ".", "cumprod", "(", "alphas_shifted", ",", "-", "1", ")", "\n", "weights", "=", "alphas", "*", "T", "[", ":", ",", ":", "-", "1", "]", "# (N_rays, N_samples_)", "\n", "# equals \"1 - (1-a1)(1-a2)...(1-an)\" mathematically", "\n", "\n", "if", "weights_only", ":", "\n", "        ", "return", "weights", "\n", "", "else", ":", "\n", "# compute final weighted outputs", "\n", "        ", "rgb_final", "=", "torch", ".", "sum", "(", "weights", ".", "unsqueeze", "(", "-", "1", ")", "*", "rgbs", ",", "-", "2", ")", "# [N_rays, 3]", "\n", "depth_final", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals_", ",", "-", "1", ")", "# (N_rays)", "\n", "\n", "if", "white_back", ":", "\n", "            ", "weights_sum", "=", "weights", ".", "sum", "(", "1", ")", "# (N_rays), the accumulated opacity along the rays", "\n", "rgb_final", "=", "rgb_final", "+", "1", "-", "weights_sum", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "rgb_final", ",", "depth_final", ",", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.__init__": [[10, 21], ["torch.Module.__init__", "generator.NeRF"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ray_sampler", ",", "xyz_freq", "=", "10", ",", "dir_freq", "=", "4", ",", "fc_depth", "=", "8", ",", "fc_dim", "=", "256", ",", "skips", "=", "(", "4", ",", ")", ",", "\n", "N_samples", "=", "64", ",", "N_importance", "=", "64", ",", "chunk", "=", "1024", "*", "32", ",", "white_back", "=", "False", ")", ":", "\n", "        ", "super", "(", "GNeRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ray_sampler", "=", "ray_sampler", "\n", "self", ".", "chunk", "=", "chunk", "\n", "self", ".", "N_samples", "=", "N_samples", "\n", "self", ".", "N_importance", "=", "N_importance", "\n", "self", ".", "white_back", "=", "white_back", "\n", "self", ".", "noise_std", "=", "1.0", "\n", "\n", "self", ".", "nerf", "=", "NeRF", "(", "xyz_freq", "=", "xyz_freq", ",", "dir_freq", "=", "dir_freq", ",", "fc_depth", "=", "fc_depth", ",", "fc_dim", "=", "fc_dim", ",", "skips", "=", "skips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.forward": [[22, 52], ["generator.GNeRF.ray_sampler.get_rays", "einops.rearrange", "range", "results.items", "generator.GNeRF.ray_sampler.random_poses", "collections.defaultdict", "collections.defaultdict", "generator.GNeRF.render_rays", "generator.GNeRF.items", "v_1.items", "v_1.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "einops.rearrange"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.get_rays", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_sampler.RaySampler.random_poses", "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.render_rays"], ["", "def", "forward", "(", "self", ",", "coords", ",", "img_wh", ",", "poses", "=", "None", ")", ":", "\n", "        ", "nbatch", ",", "h", ",", "w", ",", "_", "=", "coords", ".", "shape", "\n", "device", "=", "coords", ".", "device", "\n", "\n", "noise_std", "=", "self", ".", "noise_std", "if", "self", ".", "training", "else", "0.0", "\n", "perturb", "=", "1.0", "if", "self", ".", "training", "else", "0.0", "\n", "\n", "poses", "=", "self", ".", "ray_sampler", ".", "random_poses", "(", "nbatch", ",", "device", ")", "if", "poses", "is", "None", "else", "poses", "\n", "\n", "rays", "=", "self", ".", "ray_sampler", ".", "get_rays", "(", "coords", ",", "poses", ",", "img_wh", ",", "device", ")", "\n", "rays", "=", "rearrange", "(", "rays", ",", "'n h w c -> (n h w) c'", ")", "\n", "\n", "results", "=", "{", "'coarse'", ":", "defaultdict", "(", "list", ")", ",", "'fine'", ":", "defaultdict", "(", "list", ")", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "rays", ".", "shape", "[", "0", "]", ",", "self", ".", "chunk", ")", ":", "\n", "            ", "rendered_ray_chunks", "=", "self", ".", "render_rays", "(", "rays", "=", "rays", "[", "i", ":", "i", "+", "self", ".", "chunk", "]", ",", "perturb", "=", "perturb", ",", "noise_std", "=", "noise_std", ")", "\n", "\n", "for", "k_1", ",", "v_1", "in", "rendered_ray_chunks", ".", "items", "(", ")", ":", "\n", "                ", "for", "k_2", ",", "v_2", "in", "v_1", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "k_1", "]", "[", "k_2", "]", "+=", "[", "v_2", "]", "\n", "\n", "", "", "", "for", "k_1", ",", "v_1", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "for", "k_2", ",", "v_2", "in", "v_1", ".", "items", "(", ")", ":", "\n", "                ", "v_2", "=", "torch", ".", "cat", "(", "v_2", ",", "0", ")", "\n", "v_2", "=", "rearrange", "(", "v_2", ",", "'(n h w) c -> n c h w'", ",", "n", "=", "nbatch", ",", "h", "=", "h", ",", "w", "=", "w", ")", "\n", "results", "[", "k_1", "]", "[", "k_2", "]", "=", "v_2", "*", "2.0", "-", "1.0", "\n", "\n", "", "", "if", "self", ".", "training", ":", "\n", "            ", "return", "results", "[", "'coarse'", "]", "[", "'rgb'", "]", ",", "results", "[", "'fine'", "]", "[", "'rgb'", "]", ",", "poses", "\n", "", "else", ":", "\n", "            ", "return", "results", "[", "'fine'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.render_rays": [[53, 89], ["enumerate", "rets.keys", "model.rendering.inference", "rets[].update", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "z_vals.expand.expand.expand", "model.rendering.sample_pdf().detach", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "rays_o.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rays_d.unsqueeze", "z_vals.expand.expand.unsqueeze", "model.rendering.sample_pdf", "depth.detach", "weights.sum().detach", "weights.sum"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.inference", "home.repos.pwc.inspect_result.quan-meng_gnerf.model.rendering.sample_pdf"], ["", "", "def", "render_rays", "(", "self", ",", "rays", ",", "use_disp", "=", "False", ",", "perturb", "=", "0.0", ",", "noise_std", "=", "1.0", ")", ":", "\n", "        ", "N_rays", "=", "rays", ".", "shape", "[", "0", "]", "\n", "device", "=", "rays", ".", "device", "\n", "rays_o", ",", "rays_d", "=", "rays", "[", ":", ",", "0", ":", "3", "]", ",", "rays", "[", ":", ",", "3", ":", "6", "]", "# both [N_rays, 3]", "\n", "near", ",", "far", "=", "rays", "[", ":", ",", "6", ":", "7", "]", ",", "rays", "[", ":", ",", "7", ":", "8", "]", "# both [N_rays, 1]", "\n", "\n", "rets", "=", "{", "'coarse'", ":", "{", "}", ",", "'fine'", ":", "{", "}", "}", "\n", "for", "i", ",", "type", "in", "enumerate", "(", "rets", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "type", "==", "'coarse'", ":", "\n", "                ", "z_steps", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "N_samples", ",", "device", "=", "device", ")", "# [N_samples]", "\n", "\n", "if", "not", "use_disp", ":", "# use linear sampling in depth space", "\n", "                    ", "z_vals", "=", "near", "*", "(", "1", "-", "z_steps", ")", "+", "far", "*", "z_steps", "\n", "", "else", ":", "# use linear sampling in disparity space", "\n", "                    ", "z_vals", "=", "1", "/", "(", "1", "/", "near", "*", "(", "1", "-", "z_steps", ")", "+", "1", "/", "far", "*", "z_steps", ")", "\n", "\n", "", "z_vals", "=", "z_vals", ".", "expand", "(", "N_rays", ",", "self", ".", "N_samples", ")", "# [N_rays, N_samples]", "\n", "", "else", ":", "\n", "                ", "z_vals_mid", "=", "0.5", "*", "(", "z_vals", "[", ":", ",", ":", "-", "1", "]", "+", "z_vals", "[", ":", ",", "1", ":", "]", ")", "# (N_rays, N_samples-1) interval mid points", "\n", "new_z_vals", "=", "sample_pdf", "(", "z_vals_mid", ",", "weights", "[", ":", ",", "1", ":", "-", "1", "]", ",", "self", ".", "N_importance", ",", "det", "=", "(", "perturb", "==", "0", ")", ")", ".", "detach", "(", ")", "\n", "# detach so that grad doesn't propogate to weights_coarse from here", "\n", "z_vals", ",", "_", "=", "torch", ".", "sort", "(", "torch", ".", "cat", "(", "[", "z_vals", ",", "new_z_vals", "]", ",", "-", "1", ")", ",", "-", "1", ")", "# [N_rays, N_samples + N_importance]", "\n", "\n", "", "xyz_sampled", "=", "rays_o", ".", "unsqueeze", "(", "1", ")", "+", "rays_d", ".", "unsqueeze", "(", "1", ")", "*", "z_vals", ".", "unsqueeze", "(", "2", ")", "# [(N_rays, N_samples, 3]", "\n", "\n", "rgb", ",", "depth", ",", "weights", "=", "inference", "(", "self", ".", "nerf", ",", "xyz_sampled", ",", "rays_d", ",", "z_vals", ",", "\n", "far", ",", "self", ".", "white_back", ",", "self", ".", "chunk", ",", "noise_std", ",", "\n", "weights_only", "=", "False", ")", "\n", "\n", "rets", "[", "type", "]", ".", "update", "(", "{", "\n", "'rgb'", ":", "rgb", ",", "\n", "'depth'", ":", "depth", ".", "detach", "(", ")", "[", ":", ",", "None", "]", ",", "\n", "'opacity'", ":", "weights", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "[", ":", ",", "None", "]", "\n", "}", ")", "\n", "\n", "", "return", "rets", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.GNeRF.decrease_noise": [[90, 94], ["float"], "methods", ["None"], ["", "def", "decrease_noise", "(", "self", ",", "it", ")", ":", "\n", "        ", "end_it", "=", "5000", "\n", "if", "it", "<", "end_it", ":", "\n", "            ", "self", ".", "noise_std", "=", "1.0", "-", "float", "(", "it", ")", "/", "end_it", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.NeRF.__init__": [[97, 129], ["torch.Module.__init__", "model.rendering.Embedding", "model.rendering.Embedding", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xyz_freq", "=", "10", ",", "dir_freq", "=", "4", ",", "fc_depth", "=", "8", ",", "fc_dim", "=", "256", ",", "skips", "=", "(", "4", ",", ")", ")", ":", "\n", "        ", "super", "(", "NeRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_depth", "=", "fc_depth", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "self", ".", "skips", "=", "skips", "\n", "\n", "self", ".", "embedding_xyz", "=", "Embedding", "(", "3", ",", "xyz_freq", ")", "\n", "self", ".", "embedding_dir", "=", "Embedding", "(", "3", ",", "dir_freq", ")", "\n", "self", ".", "in_channels_xyz", "=", "self", ".", "embedding_xyz", ".", "out_channels", "\n", "self", ".", "in_channels_dir", "=", "self", ".", "embedding_dir", ".", "out_channels", "\n", "\n", "# xyz encoding layers", "\n", "for", "i", "in", "range", "(", "fc_depth", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "layer", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels_xyz", ",", "fc_dim", ")", "\n", "", "elif", "i", "in", "skips", ":", "\n", "                ", "layer", "=", "nn", ".", "Linear", "(", "fc_dim", "+", "self", ".", "in_channels_xyz", ",", "fc_dim", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "nn", ".", "Linear", "(", "fc_dim", ",", "fc_dim", ")", "\n", "", "layer", "=", "nn", ".", "Sequential", "(", "layer", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "setattr", "(", "self", ",", "f\"xyz_encoding_{i + 1}\"", ",", "layer", ")", "\n", "", "self", ".", "xyz_encoding_final", "=", "nn", ".", "Linear", "(", "fc_dim", ",", "fc_dim", ")", "\n", "\n", "# output layers", "\n", "self", ".", "sigma", "=", "nn", ".", "Linear", "(", "fc_dim", ",", "1", ")", "\n", "\n", "# direction encoding layers", "\n", "self", ".", "rgb", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "fc_dim", "+", "self", ".", "in_channels_dir", ",", "fc_dim", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "fc_dim", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.generator.NeRF.forward": [[131, 161], ["range", "generator.NeRF.sigma", "generator.NeRF.xyz_encoding_final", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.NeRF.rgb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "generator.NeRF.embedding_xyz", "generator.NeRF.embedding_dir", "generator.NeRF.embedding_xyz", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sigma_only", "=", "False", ")", ":", "\n", "        ", "if", "not", "sigma_only", ":", "\n", "            ", "input_xyz", ",", "input_dir", "=", "torch", ".", "split", "(", "x", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "input_xyz", "=", "self", ".", "embedding_xyz", "(", "input_xyz", ")", "\n", "input_dir", "=", "self", ".", "embedding_dir", "(", "input_dir", ")", "\n", "", "else", ":", "\n", "            ", "input_xyz", "=", "x", "\n", "\n", "input_xyz", "=", "self", ".", "embedding_xyz", "(", "input_xyz", ")", "\n", "\n", "", "xyz_", "=", "input_xyz", "\n", "for", "i", "in", "range", "(", "self", ".", "fc_depth", ")", ":", "\n", "            ", "if", "i", "in", "self", ".", "skips", ":", "\n", "                ", "xyz_", "=", "torch", ".", "cat", "(", "[", "input_xyz", ",", "xyz_", "]", ",", "-", "1", ")", "\n", "", "xyz_", "=", "getattr", "(", "self", ",", "f\"xyz_encoding_{i + 1}\"", ")", "(", "xyz_", ")", "\n", "\n", "", "sigma", "=", "self", ".", "sigma", "(", "xyz_", ")", "\n", "if", "sigma_only", ":", "\n", "            ", "return", "sigma", "\n", "\n", "", "xyz_encoding_final", "=", "self", ".", "xyz_encoding_final", "(", "xyz_", ")", "\n", "\n", "dir_encoding", "=", "torch", ".", "cat", "(", "[", "xyz_encoding_final", ",", "input_dir", "]", ",", "-", "1", ")", "\n", "\n", "rgb", "=", "self", ".", "rgb", "(", "dir_encoding", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "rgb", ",", "sigma", "]", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.PoseParameters.__init__": [[9, 17], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "posemodel.PoseParameters.init_poses_embed"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__", "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.PoseParameters.init_poses_embed"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "pose_mode", ",", "data", ")", ":", "\n", "        ", "super", "(", "PoseParameters", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "pose_mode", "=", "pose_mode", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "up", "=", "(", "0.", ",", "0", ",", "1", ")", "\n", "# [N, 9]: (x, y, z, r1, r2) or [N, 3]: (x, y, z)", "\n", "self", ".", "poses_embed", "=", "nn", ".", "Parameter", "(", "self", ".", "init_poses_embed", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.PoseParameters.init_poses_embed": [[18, 30], ["torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "tools.ray_utils.look_at_rotation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tools.ray_utils.pose_to_d9", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.look_at_rotation", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.pose_to_d9"], ["", "def", "init_poses_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pose_mode", "==", "'3d'", ":", "\n", "            ", "poses_embed", "=", "torch", ".", "tensor", "(", "[", "[", "0.", ",", "0", ",", "1", "]", "]", ")", ".", "repeat", "(", "self", ".", "length", ",", "1", ")", "# [N, 3]", "\n", "", "elif", "self", ".", "pose_mode", "==", "'6d'", ":", "\n", "            ", "t", "=", "torch", ".", "tensor", "(", "[", "[", "0.", ",", "0", ",", "1", "]", "]", ")", ".", "repeat", "(", "self", ".", "length", ",", "1", ")", "# [N, 3]", "\n", "R", "=", "look_at_rotation", "(", "t", ",", "up", "=", "self", ".", "up", ")", "# [N, 3, 3]", "\n", "poses", "=", "torch", ".", "cat", "(", "(", "R", ",", "t", "[", "...", ",", "None", "]", ")", ",", "-", "1", ")", "\n", "poses_embed", "=", "pose_to_d9", "(", "poses", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "poses_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.PoseParameters.poses": [[31, 46], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "tools.ray_utils.look_at_rotation", "tools.ray_utils.r6d2mat"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.look_at_rotation", "home.repos.pwc.inspect_result.quan-meng_gnerf.tools.ray_utils.r6d2mat"], ["", "@", "property", "\n", "def", "poses", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pose_mode", "==", "'3d'", ":", "\n", "            ", "t", "=", "self", ".", "poses_embed", "[", ":", ",", ":", "3", "]", "# [N, 3]", "\n", "R", "=", "look_at_rotation", "(", "t", ",", "device", "=", "t", ".", "device", ")", "# [N, 3, 3]", "\n", "", "elif", "self", ".", "pose_mode", "==", "'6d'", ":", "\n", "            ", "t", "=", "self", ".", "poses_embed", "[", ":", ",", ":", "3", "]", "# [N, 3]", "\n", "r", "=", "self", ".", "poses_embed", "[", ":", ",", "3", ":", "]", "\n", "R", "=", "r6d2mat", "(", "r", ")", "[", ":", ",", ":", "3", ",", ":", "3", "]", "# [N, 3, 3]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "poses", "=", "torch", ".", "cat", "(", "(", "R", ",", "t", "[", "...", ",", "None", "]", ")", ",", "-", "1", ")", "# [N, 3, 4]", "\n", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.PoseParameters.forward": [[47, 51], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pose_indices", "=", "None", ")", ":", "\n", "        ", "if", "pose_indices", "is", "None", ":", "\n", "            ", "return", "self", ".", "poses", "\n", "", "return", "self", ".", "poses", "[", "pose_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__": [[54, 74], ["torch.Module.__init__", "vit_pytorch.ViT"], "methods", ["home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imsize", ",", "pose_mode", ")", ":", "\n", "        ", "super", "(", "InversionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imsize", "=", "imsize", "\n", "self", ".", "pose_mode", "=", "pose_mode", "\n", "\n", "if", "pose_mode", "==", "'3d'", ":", "\n", "            ", "final_dims", "=", "3", "# [N, 3]", "\n", "", "elif", "pose_mode", "==", "'6d'", ":", "\n", "            ", "final_dims", "=", "9", "# [N, 9]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "main", "=", "ViT", "(", "\n", "image_size", "=", "self", ".", "imsize", ",", "\n", "patch_size", "=", "self", ".", "imsize", "//", "16", ",", "\n", "num_classes", "=", "final_dims", ",", "\n", "dim", "=", "256", ",", "\n", "depth", "=", "6", ",", "\n", "heads", "=", "16", ",", "\n", "mlp_dim", "=", "256", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.model.posemodel.InversionNet.forward": [[76, 80], ["posemodel.InversionNet.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "em", "=", "self", ".", "main", "(", "img", ")", "\n", "\n", "return", "em", "\n", "", "", ""]], "home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.get_opts": [[5, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'conf_file'", ",", "type", "=", "str", ",", "help", "=", "'path to the config file'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "help", "=", "'patch to the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dir'", ",", "type", "=", "str", ",", "default", "=", "'.'", ",", "help", "=", "'path to the output directory'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'GNeRF'", ",", "help", "=", "'name of the project'", ")", "\n", "\n", "# training", "\n", "parser", ".", "add_argument", "(", "'--num_epoch'", ",", "type", "=", "int", ",", "default", "=", "40000", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'number of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'pretrained checkpoint path to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--chunk'", ",", "type", "=", "int", ",", "default", "=", "1024", "*", "32", ",", "help", "=", "'chunk size to split the input to avoid OOM'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_type'", ",", "type", "=", "str", ",", "default", "=", "'standard'", ",", "choices", "=", "[", "'standard'", ",", "'wgan'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_type'", ",", "type", "=", "str", ",", "default", "=", "'real'", ",", "choices", "=", "[", "'real'", ",", "'fake'", ",", "'wgangp'", ",", "'wgangp0'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_param'", ",", "type", "=", "float", ",", "default", "=", "10.", ",", "help", "=", "'weight of the discriminator regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--progressvie_training'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'whether use progressive training'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_every'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ")", "\n", "parser", ".", "add_argument", "(", "'--video_every'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--empty_cache_every'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "\n", "# nerf", "\n", "parser", ".", "add_argument", "(", "'--xyz_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--dir_freq'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--N_samples'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'number of coarse samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--N_importance'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'number of fine samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--fc_depth'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--fc_dim'", ",", "type", "=", "int", ",", "default", "=", "360", ")", "\n", "parser", ".", "add_argument", "(", "'--decrease_noise'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'whether decrease the noise added to sigma'", ")", "\n", "\n", "# patch sampler", "\n", "parser", ".", "add_argument", "(", "'--min_scale'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--max_scale'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_anneal'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'size of image patch'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_scale'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "''", ")", "\n", "\n", "# inversion network", "\n", "parser", ".", "add_argument", "(", "'--inv_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'input image size of inversion network'", ")", "\n", "\n", "# discriminator", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'network dimension of the discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--conditional'", ",", "type", "=", "int", ",", "default", "=", "True", ",", "help", "=", "'whether require scale condition'", ")", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'color'", ",", "'cutout'", "]", ",", "help", "=", "'differentiable augmentation policies'", ")", "\n", "\n", "# log", "\n", "parser", ".", "add_argument", "(", "'--open_tensorboard'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether open tensorboard'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.update_recursive": [[59, 73], ["dict2.items", "isinstance", "dict", "config.update_recursive"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.update_recursive"], ["", "def", "update_recursive", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "\"\"\"\n    Update two config dictionaries recursively.\n    :param dict1: first dictionary to be updated\n    :param dict2: second dictionary which entries should be used\n    :return:\n    \"\"\"", "\n", "for", "k", ",", "v", "in", "dict2", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "dict1", ":", "\n", "            ", "dict1", "[", "k", "]", "=", "dict", "(", ")", "\n", "", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "update_recursive", "(", "dict1", "[", "k", "]", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "dict1", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.load_config": [[75, 95], ["config.get_opts", "config.update_recursive", "config.update_recursive", "cfg.update", "argparse.Namespace", "vars", "open", "cfg_default.update", "open", "cfg_special.update", "yaml.load", "yaml.load"], "function", ["home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.get_opts", "home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.update_recursive", "home.repos.pwc.inspect_result.quan-meng_gnerf.config.config.update_recursive"], ["", "", "", "def", "load_config", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "}", "\n", "# load default config", "\n", "args", "=", "get_opts", "(", ")", "\n", "cfg_default", "=", "{", "}", "\n", "if", "args", ".", "conf_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "'./config/default.yaml'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg_default", ".", "update", "(", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", ")", "\n", "", "", "update_recursive", "(", "cfg", ",", "cfg_default", ")", "\n", "\n", "# load specific config", "\n", "cfg_special", "=", "{", "}", "\n", "if", "args", ".", "conf_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "conf_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg_special", ".", "update", "(", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", ")", "\n", "", "", "update_recursive", "(", "cfg", ",", "cfg_special", ")", "\n", "\n", "cfg", ".", "update", "(", "vars", "(", "args", ")", ")", "\n", "\n", "return", "argparse", ".", "Namespace", "(", "**", "cfg", ")", "\n", "", ""]]}