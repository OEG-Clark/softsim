{"home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.__init__": [[90, 95], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", "=", "None", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_M", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "_S", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "_M2", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push_batch": [[96, 100], ["range", "ars.RunningStat.push"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push"], ["", "def", "push_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch_size", "=", "batch", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "self", ".", "push", "(", "batch", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push": [[101, 115], ["numpy.asarray"], "methods", ["None"], ["", "", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "shape", "==", "self", ".", "_M", ".", "shape", "\n", "\n", "n1", "=", "self", ".", "_n", "\n", "self", ".", "_n", "+=", "1", "\n", "if", "self", ".", "_n", "==", "1", ":", "\n", "            ", "self", ".", "_M", "[", "...", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "delta", "=", "x", "-", "self", ".", "_M", "\n", "self", ".", "_M", "[", "...", "]", "+=", "delta", "/", "self", ".", "_n", "\n", "delta2", "=", "x", "-", "self", ".", "_M", "\n", "# self._S[...] += delta * delta2", "\n", "self", ".", "_S", "[", "...", "]", "+=", "delta", "*", "delta", "*", "n1", "/", "self", ".", "_n", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.n": [[116, 119], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", "# if self._n > 1 else 0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.var": [[124, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "ret_var", "=", "self", ".", "_S", "/", "(", "self", ".", "_n", "-", "1", ")", "if", "self", ".", "_n", ">", "1", "else", "1.0", "\n", "if", "self", ".", "_n", ">", "1", ":", "\n", "            ", "ret_var", "[", "ret_var", "==", "0", "]", "=", "1", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.std": [[131, 134], ["numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.shape": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", ".", "shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.flatten_params": [[4, 12], ["numpy.concatenate", "x.flatten"], "function", ["None"], ["def", "flatten_params", "(", "params", ")", ":", "\n", "    ", "'''\n    params (list): parameters of the model\n\n    flatten_params (np array of size num_params): flattened parameters\n    '''", "\n", "flatten_params", "=", "np", ".", "concatenate", "(", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "params", "]", ")", "\n", "return", "flatten_params", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.reconstruct_params": [[13, 30], ["range", "len", "reconstruct_params.append", "numpy.reshape"], "function", ["None"], ["", "def", "reconstruct_params", "(", "perturbed_params", ",", "param_shapes", ",", "param_num_elements", ")", ":", "\n", "    ", "'''\n    perturbed_params (np array of size num_params): perturbed get_parameters\n    param_shapes (list): shapes of parameters in the model\n    param_num_elements (list): number of parameters in the model\n\n    reconstruct_params (list): reconstructed parameters\n    '''", "\n", "reconstruct_params", "=", "[", "]", "\n", "c", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "param_shapes", ")", ")", ":", "\n", "        ", "num_elements", "=", "param_num_elements", "[", "i", "]", "\n", "shape_params", "=", "param_shapes", "[", "i", "]", "\n", "extracted_params", "=", "perturbed_params", "[", "c", ":", "c", "+", "num_elements", "]", "\n", "reconstruct_params", ".", "append", "(", "np", ".", "reshape", "(", "extracted_params", ",", "shape_params", ")", ")", "\n", "c", "+=", "num_elements", "\n", "", "return", "reconstruct_params", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.sample_directions": [[31, 40], ["numpy.array", "numpy.random.normal", "range"], "function", ["None"], ["", "def", "sample_directions", "(", "num_directions", ",", "num_params", ")", ":", "\n", "    ", "'''\n    num_directions (int) : number of directions to sample\n    num_params (int) : size of the direction vector\n\n    directions (2D array of size num_directionsxnum_params ): each row is a direction vector\n    '''", "\n", "directions", "=", "[", "np", ".", "random", ".", "normal", "(", "size", "=", "num_params", ")", "for", "_", "in", "range", "(", "num_directions", ")", "]", "\n", "return", "np", ".", "array", "(", "directions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.perturb_parameters": [[41, 52], ["numpy.array"], "function", ["None"], ["", "def", "perturb_parameters", "(", "params", ",", "directions", ",", "nu", ")", ":", "\n", "    ", "'''\n    params (np array of size num_params): parameter vector\n    directions (np array of size num_directionsxnum_params) : direction vectors\n    nu (int): perturbation length\n\n    perturbed params (np array of size 2xnum_directionsxnum_params)\n    '''", "\n", "assert", "nu", ">", "0", "\n", "perturbed_params", "=", "np", ".", "array", "(", "[", "params", "+", "nu", "*", "directions", ",", "params", "-", "nu", "*", "directions", "]", ")", "\n", "return", "perturbed_params", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.get_top_directions_returns": [[53, 65], ["returns.max", "numpy.argsort"], "function", ["None"], ["", "def", "get_top_directions_returns", "(", "returns", ",", "directions", ",", "num_top", ")", ":", "\n", "    ", "'''\n    returns (np array of size num_directionsx2): returns of each direction (+ve and -ve)\n    directions (np array of size num_directionsxnum_params): direction vectors\n    num_top (int): number of top directions required\n\n    top_directions (np array of size num_topxnum_params): top direction vectors\n    top_returns (np array of size num_topx2): top returns\n    '''", "\n", "max_returns", "=", "returns", ".", "max", "(", "axis", "=", "1", ")", "\n", "top_indices", "=", "np", ".", "argsort", "(", "max_returns", ")", "[", "-", "num_top", ":", "]", "\n", "return", "directions", "[", "top_indices", ",", ":", "]", ",", "returns", "[", "top_indices", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.update_parameters": [[66, 86], ["numpy.std", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.std"], ["", "def", "update_parameters", "(", "params", ",", "stepsize", ",", "top_returns", ",", "top_directions", ",", "use_one_direction", "=", "False", ",", "orig_return", "=", "None", ")", ":", "\n", "    ", "'''\n    params (np array of size num_params): parameter vector\n    stepsize (float): step size of the update\n    top_returns (np array of size num_topx2): top returns\n    top_directions (np array of size num_topxnum_params): top direction vectors\n\n    new_params (np array of size num_params): updated params\n    '''", "\n", "num_top", "=", "top_directions", ".", "shape", "[", "0", "]", "\n", "std_returns", "=", "np", ".", "std", "(", "top_returns", ")", "\n", "if", "std_returns", "==", "0", ":", "\n", "        ", "std_returns", "=", "1.0", "\n", "", "if", "not", "use_one_direction", ":", "\n", "        ", "diff_returns", "=", "top_returns", "[", ":", ",", "0", "]", "-", "top_returns", "[", ":", ",", "1", "]", "# assuming that the first column is the +ve direction and the second column is the -ve direction", "\n", "", "else", ":", "\n", "        ", "diff_returns", "=", "top_returns", "[", ":", ",", "0", "]", "-", "orig_return", "\n", "", "params_update", "=", "np", ".", "dot", "(", "top_directions", ".", "T", ",", "diff_returns", ")", "\n", "new_params", "=", "params", "+", "(", "stepsize", "/", "(", "num_top", "*", "std_returns", ")", ")", "*", "params_update", "\n", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.adam.Adam.__init__": [[5, 16], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "param_dim", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "param_dim", "=", "param_dim", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta_1", "=", "0.9", "\n", "self", ".", "beta_2", "=", "0.999", "\n", "self", ".", "epsilon", "=", "1e-8", "\n", "self", ".", "gamma", "=", "1", "-", "1e-8", "\n", "\n", "self", ".", "m_t", "=", "np", ".", "zeros", "(", "param_dim", ")", "\n", "self", ".", "v_t", "=", "np", ".", "zeros", "(", "param_dim", ")", "\n", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.adam.Adam.update": [[17, 28], ["numpy.sqrt"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "params", ",", "grad", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "self", ".", "beta_1_t", "=", "self", ".", "beta_1", "*", "(", "self", ".", "gamma", "**", "(", "self", ".", "t", "-", "1", ")", ")", "\n", "self", ".", "m_t", "=", "self", ".", "beta_1_t", "*", "self", ".", "m_t", "+", "(", "1", "-", "self", ".", "beta_1_t", ")", "*", "grad", "\n", "self", ".", "v_t", "=", "self", ".", "beta_2", "*", "self", ".", "v_t", "+", "(", "1", "-", "self", ".", "beta_2", ")", "*", "(", "grad", "**", "2", ")", "\n", "\n", "m_cap", "=", "self", ".", "m_t", "/", "(", "1", "-", "(", "self", ".", "beta_1", "**", "self", ".", "t", ")", ")", "\n", "v_cap", "=", "self", ".", "v_t", "/", "(", "1", "-", "(", "self", ".", "beta_2", "**", "self", ".", "t", ")", ")", "\n", "\n", "params", "=", "params", "-", "(", "self", ".", "alpha", "*", "m_cap", ")", "/", "(", "np", ".", "sqrt", "(", "v_cap", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.lqr_ars.Trajectory.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xs", "=", "[", "]", "\n", "self", ".", "acts", "=", "[", "]", "\n", "self", ".", "rews", "=", "[", "]", "\n", "\n", "self", ".", "c_rew", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.lqr_ars.rollout_one_traj": [[17, 42], ["lqr_ars.Trajectory", "env.reset", "numpy.sum", "Trajectory.xs.append", "Trajectory.acts.append", "env.step", "Trajectory.rews.append", "K.dot", "K.dot"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.step"], ["", "", "def", "rollout_one_traj", "(", "env", ",", "K", ",", "stats", "=", "None", ")", ":", "\n", "    ", "'''\n    input\n        K: given linear policy a_dim x x_dim\n        env: gym like environment\n        stats: a running states estimating the mean and std of states.\n    return:\n        a trajectory containing (s,a,r)\n    '''", "\n", "traj", "=", "Trajectory", "(", ")", "\n", "x", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "while", "done", "is", "False", ":", "\n", "        ", "if", "stats", "is", "None", ":", "\n", "            ", "a", "=", "K", ".", "dot", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "a", "=", "K", ".", "dot", "(", "(", "x", "-", "stats", ".", "mean", ")", "/", "stats", ".", "std", ")", "#normalize state ", "\n", "\n", "", "traj", ".", "xs", ".", "append", "(", "x", ")", "\n", "traj", ".", "acts", ".", "append", "(", "a", ")", "\n", "x", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "a", ")", "\n", "traj", ".", "rews", ".", "append", "(", "r", ")", "\n", "", "traj", ".", "c_rew", "=", "np", ".", "sum", "(", "traj", ".", "rews", ")", "#total reward for this trajectory", "\n", "\n", "return", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.lqr_ars.evaluation": [[43, 50], ["xrange", "numpy.mean", "lqr_ars.rollout_one_traj", "trajs_c_rew.append"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj"], ["", "def", "evaluation", "(", "env", ",", "K", ",", "stats", "=", "None", ",", "num_trajs", "=", "10", ")", ":", "\n", "    ", "trajs_c_rew", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "num_trajs", ")", ":", "\n", "        ", "traj", "=", "rollout_one_traj", "(", "env", ",", "K", ",", "stats", ")", "\n", "trajs_c_rew", ".", "append", "(", "traj", ".", "c_rew", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "trajs_c_rew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.lqr_ars.lqr_ars": [[52, 137], ["int", "print", "env.evaluate_policy", "test_perfs.append", "sample_directions", "w.reshape.flatten", "perturb_parameters", "range", "get_top_directions_returns", "update_parameters", "update_parameters.reshape", "int", "numpy.random.randn", "print", "numpy.zeros", "numpy.zeros", "range", "abs", "lqr_ars.rollout_one_traj", "perturbed_ws[].reshape", "lqr_ars.rollout_one_traj", "stats.push_batch", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.evaluate_policy", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.sample_directions", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.perturb_parameters", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.get_top_directions_returns", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.update_parameters", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push_batch"], ["", "def", "lqr_ars", "(", "env", ",", "stats", ",", "lr", ",", "explore_mag", "=", "0.1", ",", "num_top_directions", "=", "5", ",", "\n", "num_directions", "=", "10", ",", "num_total_steps", "=", "100", ",", "K0", "=", "None", ",", "verbose", "=", "True", ",", "use_one_direction", "=", "False", ")", ":", "\n", "    ", "'''\n    input:\n        env: gym-like environment \n        stats: a running stats that computes state's mean and diagnoal std\n        lr: learning rate\n        explore_mag: exploration noise to scale the random direction\n        num_top_directions: the # of top directions for updating policy \n        num_directions: total # of randomly sampled direction\n        num_total_steps: max number of steps to interact with env\n        K0: initail policy, if None, then K is initizlied to be zero.\n    output:\n        test_perfs: a list containing triples of \n        (iter id, total steps so far,current test cummulative cost)\n    '''", "\n", "\n", "a_dim", "=", "env", ".", "a_dim", "\n", "x_dim", "=", "env", ".", "x_dim", "\n", "T", "=", "env", ".", "T", "#traj length", "\n", "if", "use_one_direction", ":", "\n", "        ", "batch_size", "=", "int", "(", "num_directions", "*", "T", ")", "+", "T", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "int", "(", "num_directions", "*", "2", "*", "T", ")", "\n", "\n", "", "if", "K0", "is", "None", ":", "\n", "        ", "K0", "=", "0.0", "*", "np", ".", "random", ".", "randn", "(", "a_dim", ",", "x_dim", ")", "\n", "", "K", "=", "K0", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"[optimal K's performance is {}]\"", ".", "format", "(", "env", ".", "optimal_cost", ")", ")", "\n", "", "test_perfs", "=", "[", "]", "\n", "\n", "e", "=", "0", "\n", "while", "True", ":", "\n", "        ", "cum_c", "=", "env", ".", "evaluate_policy", "(", "K", ")", "\n", "info", "=", "(", "e", ",", "e", "*", "batch_size", ",", "cum_c", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "info", ")", "\n", "", "test_perfs", ".", "append", "(", "info", ")", "\n", "\n", "# If the policy cost is within 5%", "\n", "if", "abs", "(", "cum_c", "-", "env", ".", "optimal_cost", ")", "/", "env", ".", "optimal_cost", "<", "0.05", ":", "\n", "            ", "return", "e", "*", "batch_size", "\n", "\n", "# note in each epoch, we use 2*num_directions*T steps", "\n", "#hence batch_size is 2*num_directions*T", "\n", "#sample directions", "\n", "", "directions", "=", "sample_directions", "(", "num_directions", ",", "a_dim", "*", "x_dim", ")", "\n", "w", "=", "K", ".", "flatten", "(", ")", "\n", "#given  w reshaped from the current K, generated perturbed policies. ", "\n", "perturbed_ws", "=", "perturb_parameters", "(", "w", ",", "directions", ",", "explore_mag", ")", "\n", "if", "use_one_direction", ":", "\n", "            ", "returns", "=", "np", ".", "zeros", "(", "(", "1", ",", "num_directions", ")", ")", "\n", "", "else", ":", "\n", "            ", "returns", "=", "np", ".", "zeros", "(", "(", "2", ",", "num_directions", ")", ")", "\n", "\n", "", "orig_return", "=", "None", "\n", "if", "use_one_direction", ":", "\n", "            ", "orig_return", "=", "rollout_one_traj", "(", "env", "=", "env", ",", "K", "=", "K", ",", "stats", "=", "stats", ")", ".", "c_rew", "\n", "\n", "", "for", "d", "in", "range", "(", "num_directions", ")", ":", "#for each direction", "\n", "            ", "for", "posneg", "in", "range", "(", "2", ")", ":", "# do twice: + and -", "\n", "                ", "if", "use_one_direction", "and", "posneg", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "Kp", "=", "perturbed_ws", "[", "posneg", ",", "d", "]", ".", "reshape", "(", "a_dim", ",", "x_dim", ")", "\n", "#get return by genearting a traj using the pertubed policy Kp", "\n", "traj", "=", "rollout_one_traj", "(", "env", "=", "env", ",", "K", "=", "Kp", ",", "stats", "=", "stats", ")", "\n", "returns", "[", "posneg", ",", "d", "]", "=", "traj", ".", "c_rew", "\n", "#update running mean and std using the latest trajectory", "\n", "if", "stats", "is", "not", "None", ":", "\n", "                    ", "stats", ".", "push_batch", "(", "np", ".", "array", "(", "traj", ".", "xs", ")", ")", "\n", "\n", "", "", "", "top_directions", ",", "top_returns", "=", "get_top_directions_returns", "(", "\n", "returns", ".", "T", ",", "directions", ",", "num_top_directions", ")", "\n", "\n", "w", "=", "update_parameters", "(", "w", ",", "lr", ",", "top_returns", ",", "top_directions", ",", "use_one_direction", "=", "use_one_direction", ",", "orig_return", "=", "orig_return", ")", "\n", "K", "=", "w", ".", "reshape", "(", "a_dim", ",", "x_dim", ")", "\n", "\n", "#perform test: report cummualative cost:", "\n", "\n", "if", "(", "e", "+", "1", ")", "*", "batch_size", ">=", "num_total_steps", ":", "#break if hits the max number of steps.", "\n", "            ", "return", "num_total_steps", "\n", "break", "\n", "", "e", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.mnist_ars.Net.__init__": [[53, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.mnist_ars.Net.forward": [[60, 68], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist_ars.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "mnist_ars.Net.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist_ars.Net.fc1", "mnist_ars.Net.conv1", "mnist_ars.Net.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.mnist_ars.get_parameters": [[78, 82], ["x.data.numpy", "x.cpu().data.numpy", "m.parameters", "m.parameters", "x.cpu"], "function", ["None"], ["def", "get_parameters", "(", "m", ")", ":", "\n", "    ", "if", "args", ".", "cuda", ":", "\n", "        ", "return", "[", "x", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "for", "x", "in", "m", ".", "parameters", "(", ")", "]", "\n", "", "return", "[", "x", ".", "data", ".", "numpy", "(", ")", "for", "x", "in", "m", ".", "parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.ars.mnist_ars.set_parameters": [[84, 90], ["enumerate", "model.parameters", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "set_parameters", "(", "params", ")", ":", "\n", "    ", "for", "ind_param", ",", "param", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "param", ".", "data", "=", "torch", ".", "Tensor", "(", "params", "[", "ind_param", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "param", ".", "data", "=", "torch", ".", "Tensor", "(", "params", "[", "ind_param", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.linreg.linreg.LinReg.__init__": [[7, 23], ["gym.Env.__init__", "numpy.random.randn", "numpy.random.randn.T.dot", "numpy.linalg.eig", "U.dot().dot", "linreg.LinReg.reset", "numpy.random.randn", "numpy.sqrt", "int", "int", "U.dot", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "batch_size", ",", "test_batch_size", ")", ":", "\n", "        ", "super", "(", "LinReg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "self", ".", "w", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "input_dim", "+", "1", ")", "/", "np", ".", "sqrt", "(", "self", ".", "input_dim", "+", "1", ")", "\n", "self", ".", "num_accesses", "=", "0", "\n", "\n", "cov", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "input_dim", "+", "1", ",", "self", ".", "input_dim", "+", "1", ")", "\n", "self", ".", "cov", "=", "cov", ".", "T", ".", "dot", "(", "cov", ")", "\n", "s", ",", "U", "=", "np", ".", "linalg", ".", "eig", "(", "self", ".", "cov", ")", "\n", "s", "[", "0", ":", "int", "(", "self", ".", "input_dim", "/", "2.", ")", "]", "*=", "2.", "\n", "s", "[", "int", "(", "self", ".", "input_dim", "/", "2.", ")", ":", "]", "/=", "2.", "\n", "self", ".", "cov", "=", "U", ".", "dot", "(", "np", ".", "diag", "(", "s", ")", ")", ".", "dot", "(", "U", ".", "T", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.linreg.linreg.LinReg.step": [[24, 32], ["linreg.LinReg.x.T.dot"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "yhat", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "not", "test", ":", "\n", "            ", "self", ".", "num_accesses", "+=", "yhat", ".", "shape", "[", "0", "]", "# self.batch_size", "\n", "# Compute squared loss", "\n", "", "loss", "=", "(", "(", "yhat", "-", "self", ".", "y", ")", "**", "2", ")", "*", "(", "1.", "/", "2", ")", "\n", "grad", "=", "(", "1.", "/", "self", ".", "batch_size", ")", "*", "self", ".", "x", ".", "T", ".", "dot", "(", "yhat", "-", "self", ".", "y", ")", "\n", "# Obs returned is none, reward is -loss, done is always True and info is None", "\n", "return", "None", ",", "-", "loss", ",", "True", ",", "{", "'grad'", ":", "grad", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.linreg.linreg.LinReg.reset": [[33, 47], ["numpy.random.multivariate_normal", "numpy.sqrt", "numpy.random.multivariate_normal", "numpy.sqrt", "linreg.LinReg.x.dot", "numpy.zeros", "numpy.zeros", "numpy.random.randn"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "not", "test", ":", "\n", "#self.x = np.random.randn(self.batch_size, self.input_dim+1)", "\n", "            ", "self", ".", "x", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "self", ".", "input_dim", "+", "1", ")", ",", "self", ".", "cov", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "x", "/=", "np", ".", "sqrt", "(", "self", ".", "input_dim", ")", "\n", "", "else", ":", "\n", "#self.x = np.random.randn(self.test_batch_size, self.input_dim+1)", "\n", "            ", "self", ".", "x", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "self", ".", "input_dim", "+", "1", ")", ",", "self", ".", "cov", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "x", "/=", "np", ".", "sqrt", "(", "self", ".", "input_dim", ")", "\n", "\n", "# Bias term should be 1", "\n", "", "self", ".", "x", "[", ":", ",", "0", "]", "=", "1", "\n", "self", ".", "y", "=", "self", ".", "x", ".", "dot", "(", "self", ".", "w", ")", "+", "np", ".", "random", ".", "randn", "(", ")", "*", "0.001", "\n", "return", "self", ".", "x", ",", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.linreg.linreg.LinReg.get_num_accesses": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_num_accesses", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_accesses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.__init__": [[37, 70], ["gym.Env.__init__", "gym.Env.__init__", "numpy.random.seed", "numpy.random.randn", "numpy.random.randn.T.dot", "numpy.linalg.eig", "U.dot().dot", "numpy.ones", "numpy.eye", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "LQG.finite_LQR_solver", "LQG.LQGEnv.reset", "numpy.eye", "numpy.sqrt", "numpy.eye", "numpy.eye", "numpy.linalg.norm", "int", "U.dot", "numpy.diag", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.seed", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_LQR_solver", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "u_dim", "=", "1", ",", "rank", "=", "5", ",", "seed", "=", "100", ",", "T", "=", "10", ")", ":", "\n", "      ", "super", "(", "LQGEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "#fix A and B", "\n", "tmpA", "=", "np", ".", "random", ".", "randn", "(", "x_dim", ",", "x_dim", ")", "\n", "A", "=", "tmpA", ".", "T", ".", "dot", "(", "tmpA", ")", "\n", "s", ",", "U", "=", "np", ".", "linalg", ".", "eig", "(", "A", ")", "\n", "s", "=", "s", "/", "np", ".", "linalg", ".", "norm", "(", "s", ")", "*", ".9", "\n", "#embed()", "\n", "s", "[", "int", "(", "x_dim", "/", "2.", ")", ":", "]", "*=", "0.1", "\n", "self", ".", "A", "=", "U", ".", "dot", "(", "np", ".", "diag", "(", "s", ")", ")", ".", "dot", "(", "U", ".", "T", ")", "\n", "\n", "self", ".", "B", "=", "np", ".", "ones", "(", "(", "x_dim", ",", "u_dim", ")", ")", "\n", "self", ".", "Q", "=", "np", ".", "eye", "(", "x_dim", ")", "#/np.sqrt(x_dim)", "\n", "self", ".", "R", "=", "np", ".", "eye", "(", "u_dim", ")", "*", "0.01", "\n", "\n", "self", ".", "x_dim", "=", "x_dim", "\n", "self", ".", "a_dim", "=", "u_dim", "\n", "\n", "self", ".", "observation_space", "=", "gym_box", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "x_dim", ",", ")", ")", "\n", "self", ".", "action_space", "=", "gym_box", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "u_dim", ",", ")", ")", "\n", "\n", "self", ".", "init_state_mean", "=", "1", "*", "np", ".", "ones", "(", "self", ".", "x_dim", ")", "*", "1", "/", "np", ".", "sqrt", "(", "self", ".", "x_dim", ")", "\n", "self", ".", "init_state_cov", "=", "np", ".", "eye", "(", "self", ".", "x_dim", ")", "/", "self", ".", "x_dim", "\n", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "noise_cov", "=", "np", ".", "eye", "(", "self", ".", "x_dim", ")", "*", "0.01", "\n", "\n", "self", ".", "T", "=", "T", "\n", "\n", "self", ".", "optimal_cost", "=", "finite_LQR_solver", "(", "self", ".", "A", ",", "self", ".", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "T", ",", "\n", "self", ".", "init_state_mean", ",", "self", ".", "init_state_cov", ",", "self", ".", "noise_cov", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.reset": [[71, 75], ["numpy.random.multivariate_normal"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "      ", "self", ".", "state", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "init_state_mean", ",", "cov", "=", "self", ".", "init_state_cov", ")", "\n", "self", ".", "t", "=", "0", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.step": [[76, 87], ["next_state.reshape.reshape.reshape", "LQG.LQGEnv.state.dot().dot", "a.dot().dot", "LQG.LQGEnv.A.dot", "LQG.LQGEnv.B.dot", "numpy.random.multivariate_normal", "LQG.LQGEnv.state.reshape", "a.reshape", "LQG.LQGEnv.state.dot", "a.dot", "numpy.zeros"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "      ", "cost", "=", "self", ".", "state", ".", "dot", "(", "self", ".", "Q", ")", ".", "dot", "(", "self", ".", "state", ")", "+", "a", ".", "dot", "(", "self", ".", "R", ")", ".", "dot", "(", "a", ")", "\n", "next_state", "=", "self", ".", "A", ".", "dot", "(", "self", ".", "state", ".", "reshape", "(", "(", "self", ".", "x_dim", ",", "1", ")", ")", ")", "+", "self", ".", "B", ".", "dot", "(", "a", ".", "reshape", "(", "(", "self", ".", "a_dim", ",", "1", ")", ")", ")", ";", "\n", "next_state", "=", "next_state", ".", "reshape", "(", "self", ".", "x_dim", ")", "\n", "self", ".", "state", "=", "next_state", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "self", ".", "x_dim", ")", ",", "cov", "=", "self", ".", "noise_cov", ")", "\n", "\n", "done", "=", "False", "\n", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", ">=", "self", ".", "T", ":", "\n", "        ", "done", "=", "True", "\n", "", "return", "self", ".", "state", ",", "-", "cost", ",", "done", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.seed": [[88, 90], ["numpy.random.seed"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "      ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.render": [[91, 93], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "      ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.LQGEnv.evaluate_policy": [[94, 99], ["LQG.finite_K_cost"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_K_cost"], ["", "def", "evaluate_policy", "(", "self", ",", "K", ")", ":", "\n", "      ", "cost_for_K", "=", "finite_K_cost", "(", "self", ".", "A", ",", "self", ".", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "K", ",", "\n", "self", ".", "T", ",", "self", ".", "init_state_mean", ",", "\n", "self", ".", "init_state_cov", ")", "\n", "return", "cost_for_K", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.finite_LQR_solver": [[8, 18], ["numpy.zeros", "range", "x_0.dot().dot", "numpy.trace", "A.T.dot().dot().dot().dot().dot().dot", "Cov_0.dot", "A.T.dot().dot", "x_0.dot", "A.T.dot().dot().dot().dot().dot", "A.T.dot", "A.T.dot().dot().dot().dot", "A.T.dot().dot().dot", "scipy.inv", "A.T.dot().dot", "B.T.dot().dot", "A.T.dot", "B.T.dot"], "function", ["None"], ["def", "finite_LQR_solver", "(", "A", ",", "B", ",", "Q", ",", "R", ",", "T", ",", "x_0", ",", "Cov_0", ",", "noise_cov", ")", ":", "\n", "  ", "x_dim", "=", "A", ".", "shape", "[", "0", "]", "\n", "a_dim", "=", "B", ".", "shape", "[", "1", "]", "\n", "P", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "x_dim", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "    ", "P", "=", "(", "A", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "A", ")", "+", "Q", "\n", "-", "A", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "B", ")", ".", "dot", "(", "LA", ".", "inv", "(", "B", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "B", ")", "+", "R", ")", ")", ".", "dot", "(", "B", ".", "T", ")", ".", "dot", "(", "P", ")", ".", "dot", "(", "A", ")", ")", "\n", "\n", "", "return", "x_0", ".", "dot", "(", "P", ")", ".", "dot", "(", "x_0", ")", "+", "np", ".", "trace", "(", "Cov_0", ".", "dot", "(", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQG.LQG.finite_K_cost": [[19, 33], ["numpy.zeros", "range", "K.dot", "K.dot().dot", "numpy.trace", "A.dot", "B.dot", "A.dot().dot", "B.dot().dot", "K.dot", "K.dot.dot().dot", "K.dot().dot.dot", "x_mean.dot().dot", "numpy.trace", "A.dot", "B.dot", "x_cov.dot", "K.dot.dot", "x_mean.dot"], "function", ["None"], ["", "def", "finite_K_cost", "(", "A", ",", "B", ",", "Q", ",", "R", ",", "K", ",", "T", ",", "x_0", ",", "Cov_0", ")", ":", "\n", "  ", "x_dim", "=", "A", ".", "shape", "[", "0", "]", "\n", "a_dim", "=", "B", ".", "shape", "[", "1", "]", "\n", "P", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "x_dim", ")", ")", "\n", "total_c", "=", "0", "\n", "x_mean", "=", "x_0", "\n", "x_cov", "=", "Cov_0", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "    ", "u_mean", "=", "K", ".", "dot", "(", "x_mean", ")", "\n", "u_cov", "=", "K", ".", "dot", "(", "x_cov", ")", ".", "dot", "(", "K", ".", "T", ")", "\n", "total_c", "+=", "x_mean", ".", "dot", "(", "Q", ")", ".", "dot", "(", "x_mean", ")", "+", "np", ".", "trace", "(", "x_cov", ".", "dot", "(", "Q", ")", ")", "+", "u_mean", ".", "dot", "(", "R", ")", ".", "dot", "(", "u_mean", ")", "+", "np", ".", "trace", "(", "u_cov", ".", "dot", "(", "R", ")", ")", "\n", "x_mean", "=", "A", ".", "dot", "(", "x_mean", ")", "+", "B", ".", "dot", "(", "u_mean", ")", "\n", "x_cov", "=", "A", ".", "dot", "(", "x_cov", ")", ".", "dot", "(", "A", ".", "T", ")", "+", "B", ".", "dot", "(", "u_cov", ")", ".", "dot", "(", "B", ".", "T", ")", "\n", "", "return", "total_c", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.mnist.mnist.MNIST.__init__": [[8, 26], ["gym.Env.__init__", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "len", "len", "mnist.MNIST.reset", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "train_batch_size", ",", "test_batch_size", ")", ":", "\n", "        ", "super", "(", "MNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "datasets", ".", "MNIST", "(", "'data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "test_data", "=", "datasets", ".", "MNIST", "(", "'data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "num_accesses", "=", "0", "\n", "self", ".", "train_length", "=", "len", "(", "self", ".", "train_data", ")", "\n", "self", ".", "test_length", "=", "len", "(", "self", ".", "test_data", ")", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.mnist.mnist.MNIST.step": [[27, 36], ["rewards.type.type.type"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "actions", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "not", "test", ":", "\n", "            ", "self", ".", "num_accesses", "+=", "actions", ".", "shape", "[", "0", "]", "\n", "\n", "", "rewards", "=", "actions", "==", "self", ".", "y", "\n", "rewards", "=", "rewards", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "rewards", "=", "2", "*", "rewards", "-", "1", "\n", "\n", "return", "None", ",", "rewards", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.mnist.mnist.MNIST.reset": [[38, 51], ["torch.LongTensor", "mnist.MNIST.test_data.test_data.index_select().type", "mnist.MNIST.test_data.test_labels.index_select", "torch.LongTensor", "mnist.MNIST.train_data.train_data.index_select().type", "mnist.MNIST.train_data.train_labels.index_select", "numpy.random.randint", "numpy.random.randint", "mnist.MNIST.test_data.test_data.index_select", "mnist.MNIST.train_data.train_data.index_select"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "test_ind", "=", "torch", ".", "LongTensor", "(", "np", ".", "random", ".", "randint", "(", "self", ".", "test_length", ",", "size", "=", "self", ".", "test_batch_size", ")", ")", "\n", "self", ".", "x", "=", "self", ".", "test_data", ".", "test_data", ".", "index_select", "(", "0", ",", "test_ind", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "y", "=", "self", ".", "test_data", ".", "test_labels", ".", "index_select", "(", "0", ",", "test_ind", ")", "# .type(torch.FloatTensor)", "\n", "\n", "return", "self", ".", "x", ",", "self", ".", "y", "\n", "", "else", ":", "\n", "            ", "train_ind", "=", "torch", ".", "LongTensor", "(", "np", ".", "random", ".", "randint", "(", "self", ".", "train_length", ",", "size", "=", "self", ".", "train_batch_size", ")", ")", "\n", "self", ".", "x", "=", "self", ".", "train_data", ".", "train_data", ".", "index_select", "(", "0", ",", "train_ind", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "y", "=", "self", ".", "train_data", ".", "train_labels", ".", "index_select", "(", "0", ",", "train_ind", ")", "# .type(torch.FloatTensor)", "\n", "\n", "return", "self", ".", "x", ",", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.mnist.mnist.MNIST.get_num_accesses": [[52, 54], ["None"], "methods", ["None"], ["", "", "def", "get_num_accesses", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_accesses", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.mnist.mnist.MNIST.increment_accesses": [[55, 57], ["None"], "methods", ["None"], ["", "def", "increment_accesses", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_accesses", "+=", "self", ".", "train_batch_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.__init__": [[33, 65], ["gym.Env.__init__", "gym.Env.__init__", "numpy.random.seed", "numpy.zeros", "numpy.random.randn", "numpy.random.randn.T.dot", "numpy.linalg.eig", "U.dot().dot", "numpy.ones", "numpy.eye", "gym.Box", "gym.Box", "gym.Box", "gym.Box", "numpy.random.randn", "LQR.LQREnv.init_state.copy", "LQR.finite_LQR_solver", "LQR.LQREnv.reset", "numpy.linalg.norm", "numpy.eye", "numpy.eye", "U.dot", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.seed", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_LQR_solver", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "u_dim", "=", "1", ",", "rank", "=", "5", ",", "seed", "=", "100", ",", "T", "=", "10", ")", ":", "\n", "      ", "super", "(", "LQREnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "self", ".", "A", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "x_dim", ")", ")", "\n", "tmpA", "=", "np", ".", "random", ".", "randn", "(", "x_dim", ",", "x_dim", ")", "\n", "A", "=", "tmpA", ".", "T", ".", "dot", "(", "tmpA", ")", "\n", "s", ",", "U", "=", "np", ".", "linalg", ".", "eig", "(", "A", ")", "\n", "s", "=", "s", "/", "np", ".", "linalg", ".", "norm", "(", "s", ")", "\n", "self", ".", "A", "=", "U", ".", "dot", "(", "np", ".", "diag", "(", "s", ")", ")", ".", "dot", "(", "U", ".", "T", ")", "\n", "\n", "self", ".", "B", "=", "np", ".", "ones", "(", "(", "x_dim", ",", "u_dim", ")", ")", "\n", "self", ".", "Q", "=", "np", ".", "eye", "(", "x_dim", ")", "\n", "self", ".", "R", "=", "np", ".", "eye", "(", "u_dim", ")", "*", "1000", "# FIX: Changed the cost to 1000", "\n", "\n", "self", ".", "x_dim", "=", "x_dim", "\n", "self", ".", "a_dim", "=", "u_dim", "\n", "\n", "self", ".", "observation_space", "=", "gym_box", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "x_dim", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "gym_box", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "u_dim", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "init_state", "=", "np", ".", "random", ".", "randn", "(", "x_dim", ")", "\n", "\n", "self", ".", "state", "=", "self", ".", "init_state", ".", "copy", "(", ")", "\n", "self", ".", "noise_cov", "=", "np", ".", "eye", "(", "self", ".", "x_dim", ")", "*", "0.01", "\n", "\n", "self", ".", "T", "=", "T", "\n", "\n", "self", ".", "optimal_cost", "=", "finite_LQR_solver", "(", "self", ".", "A", ",", "self", ".", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "self", ".", "T", ",", "\n", "self", ".", "init_state", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset": [[66, 70], ["LQR.LQREnv.init_state.copy"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "      ", "self", ".", "state", "=", "self", ".", "init_state", ".", "copy", "(", ")", "\n", "self", ".", "t", "=", "0", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.step": [[71, 82], ["next_state.reshape", "LQR.LQREnv.state.dot().dot", "a.dot().dot", "LQR.LQREnv.A.dot", "LQR.LQREnv.B.dot", "LQR.LQREnv.state.reshape", "a.reshape", "LQR.LQREnv.state.dot", "a.dot"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "\n", "      ", "cost", "=", "self", ".", "state", ".", "dot", "(", "self", ".", "Q", ")", ".", "dot", "(", "self", ".", "state", ")", "+", "a", ".", "dot", "(", "self", ".", "R", ")", ".", "dot", "(", "a", ")", "\n", "next_state", "=", "self", ".", "A", ".", "dot", "(", "self", ".", "state", ".", "reshape", "(", "(", "self", ".", "x_dim", ",", "1", ")", ")", ")", "+", "self", ".", "B", ".", "dot", "(", "a", ".", "reshape", "(", "(", "self", ".", "a_dim", ",", "1", ")", ")", ")", ";", "\n", "self", ".", "state", "=", "next_state", ".", "reshape", "(", "self", ".", "x_dim", ")", "\n", "\n", "done", "=", "False", "\n", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", ">=", "self", ".", "T", ":", "\n", "        ", "done", "=", "True", "\n", "", "return", "self", ".", "state", ",", "-", "cost", ",", "done", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.seed": [[83, 85], ["numpy.random.seed"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "      ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.render": [[86, 88], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "      ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.evaluate_policy": [[89, 94], ["LQR.finite_K_cost"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_K_cost"], ["", "def", "evaluate_policy", "(", "self", ",", "K", ")", ":", "\n", "      ", "cost_for_K", "=", "finite_K_cost", "(", "self", ".", "A", ",", "self", ".", "B", ",", "self", ".", "Q", ",", "self", ".", "R", ",", "K", ",", "\n", "self", ".", "T", ",", "self", ".", "init_state", ")", "\n", "\n", "return", "cost_for_K", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_LQR_solver": [[8, 18], ["numpy.zeros", "range", "x_0.dot().dot", "A.T.dot().dot().dot().dot().dot().dot", "x_0.dot", "A.T.dot().dot", "A.T.dot().dot().dot().dot().dot", "A.T.dot", "A.T.dot().dot().dot().dot", "A.T.dot().dot().dot", "scipy.inv", "A.T.dot().dot", "B.T.dot().dot", "A.T.dot", "B.T.dot"], "function", ["None"], ["def", "finite_LQR_solver", "(", "A", ",", "B", ",", "Q", ",", "R", ",", "T", ",", "x_0", ")", ":", "\n", "  ", "x_dim", "=", "A", ".", "shape", "[", "0", "]", "\n", "a_dim", "=", "B", ".", "shape", "[", "1", "]", "\n", "P", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "x_dim", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "    ", "P", "=", "(", "A", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "A", ")", "+", "Q", "\n", "-", "A", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "B", ")", ".", "dot", "(", "LA", ".", "inv", "(", "B", ".", "T", ".", "dot", "(", "P", ")", ".", "dot", "(", "B", ")", "+", "R", ")", ")", ".", "dot", "(", "B", ".", "T", ")", ".", "dot", "(", "P", ")", ".", "dot", "(", "A", ")", ")", "\n", "\n", "", "return", "x_0", ".", "dot", "(", "P", ")", ".", "dot", "(", "x_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.finite_K_cost": [[19, 30], ["numpy.zeros", "range", "K.dot", "x.dot().dot", "K.dot.dot().dot", "A.dot", "B.dot", "x.dot", "K.dot.dot"], "function", ["None"], ["", "def", "finite_K_cost", "(", "A", ",", "B", ",", "Q", ",", "R", ",", "K", ",", "T", ",", "x_0", ")", ":", "\n", "  ", "x_dim", "=", "A", ".", "shape", "[", "0", "]", "\n", "a_dim", "=", "B", ".", "shape", "[", "1", "]", "\n", "P", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "x_dim", ")", ")", "\n", "total_c", "=", "0", "\n", "x", "=", "x_0", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "    ", "u", "=", "K", ".", "dot", "(", "x", ")", "\n", "total_c", "+=", "x", ".", "dot", "(", "Q", ")", ".", "dot", "(", "x", ")", "+", "u", ".", "dot", "(", "R", ")", ".", "dot", "(", "u", ")", "\n", "x", "=", "A", ".", "dot", "(", "x", ")", "+", "B", ".", "dot", "(", "u", ")", "\n", "", "return", "total_c", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.exact.lqr_exact.Trajectory.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xs", "=", "[", "]", "\n", "self", ".", "acts", "=", "[", "]", "\n", "self", ".", "rews", "=", "[", "]", "\n", "\n", "self", ".", "c_rew", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.exact.lqr_exact.rollout_one_traj": [[12, 42], ["lqr_exact.Trajectory", "env.reset", "numpy.sum", "Trajectory.xs.append", "Trajectory.acts.append", "env.step", "Trajectory.rews.append", "K.dot", "K.dot"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.step"], ["", "", "def", "rollout_one_traj", "(", "env", ",", "K", ",", "stats", "=", "None", ",", "acts", "=", "None", ")", ":", "\n", "    ", "'''\n    input\n        K: given linear policy a_dim x x_dim\n        env: gym like environment\n        stats: a running states estimating the mean and std of states.\n    return:\n        a trajectory containing (s,a,r)\n    '''", "\n", "traj", "=", "Trajectory", "(", ")", "\n", "x", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "t", "=", "0", "\n", "while", "done", "is", "False", ":", "\n", "        ", "if", "acts", "is", "None", ":", "\n", "            ", "if", "stats", "is", "None", ":", "\n", "                ", "a", "=", "K", ".", "dot", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "K", ".", "dot", "(", "(", "x", "-", "stats", ".", "mean", ")", "/", "stats", ".", "std", ")", "#normalize state", "\n", "", "", "else", ":", "\n", "            ", "a", "=", "acts", "[", "t", ",", ":", "]", "\n", "\n", "", "traj", ".", "xs", ".", "append", "(", "x", ")", "\n", "traj", ".", "acts", ".", "append", "(", "a", ")", "\n", "x", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "a", ")", "\n", "traj", ".", "rews", ".", "append", "(", "r", ")", "\n", "t", "+=", "1", "\n", "", "traj", ".", "c_rew", "=", "np", ".", "sum", "(", "traj", ".", "rews", ")", "#total reward for this trajectory", "\n", "\n", "return", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.exact.lqr_exact.evaluation": [[43, 50], ["xrange", "numpy.mean", "lqr_exact.rollout_one_traj", "trajs_c_rew.append"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj"], ["", "def", "evaluation", "(", "env", ",", "K", ",", "stats", "=", "None", ",", "num_trajs", "=", "10", ")", ":", "\n", "    ", "trajs_c_rew", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "num_trajs", ")", ":", "\n", "        ", "traj", "=", "rollout_one_traj", "(", "env", ",", "K", ",", "stats", ")", "\n", "trajs_c_rew", ".", "append", "(", "traj", ".", "c_rew", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "trajs_c_rew", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.exact.lqr_exact.lqr_exact": [[52, 125], ["numpy.zeros", "print", "env.evaluate_policy", "test_perfs.append", "sample_directions", "lqr_exact.rollout_one_traj", "numpy.array", "range", "get_top_directions_returns", "numpy.std", "action_gradient.reshape.reshape", "int", "int", "print", "numpy.zeros", "numpy.zeros", "range", "numpy.dot", "action_gradient.reshape.T.dot", "abs", "perturbations.reshape.reshape", "lqr_exact.rollout_one_traj", "numpy.array", "stats.push_batch", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.evaluate_policy", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.sample_directions", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.get_top_directions_returns", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.std", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push_batch"], ["", "def", "lqr_exact", "(", "env", ",", "stats", ",", "lr", ",", "explore_mag", "=", "0.1", ",", "num_top_directions", "=", "5", ",", "\n", "num_directions", "=", "10", ",", "num_total_steps", "=", "100", ",", "K0", "=", "None", ",", "verbose", "=", "True", ",", "use_one_direction", "=", "False", ")", ":", "\n", "    ", "a_dim", "=", "env", ".", "a_dim", "\n", "x_dim", "=", "env", ".", "x_dim", "\n", "T", "=", "env", ".", "T", "\n", "if", "not", "use_one_direction", ":", "\n", "        ", "batch_size", "=", "int", "(", "num_directions", "*", "2", "*", "T", ")", "+", "T", "# 1 extra rollout because of initial predicted actions", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "int", "(", "num_directions", "*", "T", ")", "+", "T", "\n", "\n", "", "exact_dim", "=", "a_dim", "*", "T", "\n", "\n", "if", "K0", "is", "None", ":", "\n", "        ", "K0", "=", "np", ".", "zeros", "(", "(", "a_dim", ",", "x_dim", ")", ")", "\n", "", "K", "=", "K0", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"optimal K's performance is {}\"", ".", "format", "(", "env", ".", "optimal_cost", ")", ")", "\n", "", "test_perfs", "=", "[", "]", "\n", "\n", "e", "=", "0", "\n", "while", "True", ":", "\n", "        ", "cum_c", "=", "env", ".", "evaluate_policy", "(", "K", ")", "\n", "info", "=", "(", "e", ",", "e", "*", "batch_size", ",", "cum_c", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "info", ")", "\n", "", "test_perfs", ".", "append", "(", "info", ")", "\n", "\n", "# If the policy cost is within 5%", "\n", "if", "abs", "(", "cum_c", "-", "env", ".", "optimal_cost", ")", "/", "env", ".", "optimal_cost", "<", "0.05", ":", "\n", "            ", "return", "e", "*", "batch_size", "\n", "\n", "", "directions", "=", "sample_directions", "(", "num_directions", ",", "exact_dim", ")", "\n", "if", "not", "use_one_direction", ":", "\n", "            ", "returns", "=", "np", ".", "zeros", "(", "(", "2", ",", "num_directions", ")", ")", "\n", "", "else", ":", "\n", "            ", "returns", "=", "np", ".", "zeros", "(", "(", "1", ",", "num_directions", ")", ")", "\n", "\n", "", "traj", "=", "rollout_one_traj", "(", "env", "=", "env", ",", "K", "=", "K", ",", "stats", "=", "stats", ")", "\n", "acts", "=", "traj", ".", "acts", "\n", "orig_return", "=", "traj", ".", "c_rew", "\n", "xs", "=", "np", ".", "array", "(", "traj", ".", "xs", ")", "\n", "\n", "for", "d", "in", "range", "(", "num_directions", ")", ":", "\n", "            ", "for", "posneg", "in", "range", "(", "2", ")", ":", "\n", "                ", "if", "use_one_direction", "and", "posneg", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "perturbations", "=", "(", "-", "2", "*", "posneg", "+", "1", ")", "*", "explore_mag", "*", "directions", "[", "d", "]", "\n", "perturbations", "=", "perturbations", ".", "reshape", "(", "T", ",", "a_dim", ")", "\n", "perturbed_acts", "=", "np", ".", "array", "(", "acts", ")", "+", "perturbations", "\n", "traj", "=", "rollout_one_traj", "(", "env", "=", "env", ",", "K", "=", "K", ",", "stats", "=", "stats", ",", "acts", "=", "perturbed_acts", ")", "\n", "returns", "[", "posneg", ",", "d", "]", "=", "traj", ".", "c_rew", "\n", "\n", "if", "stats", "is", "not", "None", ":", "\n", "                    ", "stats", ".", "push_batch", "(", "np", ".", "array", "(", "traj", ".", "xs", ")", ")", "\n", "\n", "", "", "", "top_directions", ",", "top_returns", "=", "get_top_directions_returns", "(", "returns", ".", "T", ",", "directions", ",", "num_top_directions", ")", "\n", "std_top_returns", "=", "np", ".", "std", "(", "top_returns", ")", "\n", "if", "std_top_returns", "==", "0", ":", "\n", "            ", "std_top_returns", "=", "1.", "\n", "", "if", "not", "use_one_direction", ":", "\n", "            ", "diff_returns", "=", "top_returns", "[", ":", ",", "0", "]", "-", "top_returns", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "diff_returns", "=", "top_returns", "[", ":", ",", "0", "]", "-", "orig_return", "\n", "", "action_gradient", "=", "np", ".", "dot", "(", "top_directions", ".", "T", ",", "(", "diff_returns", ")", ")", "/", "(", "top_directions", ".", "shape", "[", "0", "]", "*", "std_top_returns", ")", "\n", "action_gradient", "=", "action_gradient", ".", "reshape", "(", "T", ",", "a_dim", ")", "\n", "param_update", "=", "lr", "*", "action_gradient", ".", "T", ".", "dot", "(", "xs", ")", "\n", "K", "=", "K", "+", "param_update", "\n", "\n", "if", "(", "e", "+", "1", ")", "*", "batch_size", ">=", "num_total_steps", ":", "\n", "            ", "return", "num_total_steps", "\n", "\n", "", "e", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.Trajectory.__init__": [[13, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "xs", "=", "[", "]", "\n", "self", ".", "acts", "=", "[", "]", "\n", "self", ".", "acts_mean", "=", "[", "]", "\n", "self", ".", "rews", "=", "[", "]", "\n", "\n", "self", ".", "c_rew", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj": [[21, 45], ["lqr_reinforce.Trajectory", "env.reset", "numpy.sum", "Trajectory.xs.append", "Trajectory.acts.append", "Trajectory.acts_mean.append", "env.step", "Trajectory.rews.append", "K.dot", "K.dot", "numpy.copy", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.reset", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.step"], ["", "", "def", "rollout_one_traj", "(", "env", ",", "K", ",", "explore_mag", "=", "0.1", ",", "test", "=", "False", ",", "stats", "=", "None", ")", ":", "\n", "    ", "traj", "=", "Trajectory", "(", ")", "\n", "x", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "x_orginal", "=", "[", "]", "\n", "while", "done", "is", "False", ":", "\n", "        ", "if", "stats", "is", "None", ":", "\n", "            ", "mean_a", "=", "K", ".", "dot", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "mean_a", "=", "K", ".", "dot", "(", "(", "x", "-", "stats", ".", "mean", ")", "/", "stats", ".", "std", ")", "\n", "\n", "", "if", "test", "is", "False", ":", "\n", "            ", "a", "=", "mean_a", "+", "explore_mag", "*", "np", ".", "random", ".", "randn", "(", "env", ".", "a_dim", ")", "\n", "", "else", ":", "\n", "            ", "a", "=", "np", ".", "copy", "(", "mean_a", ")", "\n", "\n", "", "traj", ".", "xs", ".", "append", "(", "x", ")", "\n", "traj", ".", "acts", ".", "append", "(", "a", ")", "\n", "traj", ".", "acts_mean", ".", "append", "(", "mean_a", ")", "\n", "x", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "a", ")", "\n", "traj", ".", "rews", ".", "append", "(", "r", ")", "\n", "\n", "", "traj", ".", "c_rew", "=", "np", ".", "sum", "(", "traj", ".", "rews", ")", "\n", "return", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.roll_out": [[46, 56], ["lqr_reinforce.rollout_one_traj", "numpy.sum", "len", "trajs.append"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.rollout_one_traj"], ["", "def", "roll_out", "(", "env", ",", "batch_size", ",", "K", ",", "explore_mag", "=", "0.1", ",", "test", "=", "False", ",", "stats", "=", "None", ")", ":", "\n", "    ", "total_steps", "=", "0", "\n", "trajs", "=", "[", "]", "\n", "while", "total_steps", "<", "batch_size", ":", "\n", "        ", "traj", "=", "rollout_one_traj", "(", "env", ",", "K", ",", "explore_mag", "=", "explore_mag", ",", "test", "=", "test", ",", "stats", "=", "stats", ")", "\n", "traj", ".", "c_rew", "=", "np", ".", "sum", "(", "traj", ".", "rews", ")", "\n", "total_steps", "+=", "len", "(", "traj", ".", "xs", ")", "\n", "trajs", ".", "append", "(", "traj", ")", "\n", "\n", "", "return", "trajs", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.evaluation": [[57, 61], ["lqr_reinforce.roll_out", "numpy.mean", "range", "len"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.roll_out", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean"], ["", "def", "evaluation", "(", "env", ",", "batch_size", ",", "K", ",", "stats", "=", "None", ")", ":", "\n", "    ", "trajs", "=", "roll_out", "(", "env", ",", "batch_size", ",", "K", ",", "test", "=", "True", ",", "stats", "=", "stats", ")", "\n", "c_rews", "=", "[", "trajs", "[", "i", "]", ".", "c_rew", "for", "i", "in", "range", "(", "len", "(", "trajs", ")", ")", "]", "\n", "return", "np", ".", "mean", "(", "c_rews", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.processing_batch": [[62, 100], ["numpy.array", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.std", "len", "stats.push_batch", "numpy.sum", "list", "len", "range", "range", "len", "numpy.ones", "len", "len"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.std", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.push_batch"], ["", "def", "processing_batch", "(", "trajs", ",", "gamma", "=", "0.99", ",", "stats", "=", "None", ")", ":", "\n", "    ", "gamma", "=", "1.", "\n", "gamma_seqs", "=", "np", ".", "array", "(", "[", "gamma", "**", "i", "for", "i", "in", "range", "(", "0", ",", "1000", ")", "]", ")", "\n", "xs", "=", "[", "]", "\n", "acts", "=", "[", "]", "\n", "acts_mean", "=", "[", "]", "\n", "ctgs", "=", "[", "]", "\n", "avg_rew", "=", "0.0", "\n", "for", "traj_id", "in", "range", "(", "len", "(", "trajs", ")", ")", ":", "\n", "        ", "traj", "=", "trajs", "[", "traj_id", "]", "\n", "xs", "=", "xs", "+", "traj", ".", "xs", "\n", "acts", "=", "acts", "+", "traj", ".", "acts", "\n", "acts_mean", "=", "acts_mean", "+", "traj", ".", "acts_mean", "\n", "rews", "=", "traj", ".", "rews", "\n", "#avg_rew += np.sum(np.array(rews)*gamma_seqs[0:len(rews)])", "\n", "avg_rew", "+=", "traj", ".", "c_rew", "\n", "qs", "=", "[", "np", ".", "sum", "(", "rews", "[", "i", ":", "]", "*", "gamma_seqs", "[", "0", ":", "len", "(", "rews", "[", "i", ":", "]", ")", "]", ")", "for", "i", "in", "range", "(", "len", "(", "rews", ")", ")", "]", "\n", "#qs = [np.sum(rews[i:]) for i in range(len(rews))]", "\n", "#embed()", "\n", "ctgs", "=", "ctgs", "+", "list", "(", "np", ".", "ones", "(", "len", "(", "rews", ")", ")", "*", "traj", ".", "c_rew", ")", "#ctgs + qs ", "\n", "\n", "#a constant baseline: the mean of the traj cummulative reward:", "\n", "", "baseline", "=", "avg_rew", "/", "(", "len", "(", "trajs", ")", "*", "1.", ")", "\n", "xs", "=", "np", ".", "array", "(", "xs", ")", "\n", "acts_mean", "=", "np", ".", "array", "(", "acts_mean", ")", "\n", "acts", "=", "np", ".", "array", "(", "acts", ")", "\n", "ctgs", "=", "np", ".", "array", "(", "ctgs", ")", "\n", "advs", "=", "ctgs", "#- baseline", "\n", "\n", "adv_mean", "=", "np", ".", "mean", "(", "advs", ")", "\n", "adv_std", "=", "np", ".", "std", "(", "advs", ")", "\n", "#advs = (advs - adv_mean) / adv_std", "\n", "\n", "if", "stats", "is", "not", "None", ":", "\n", "        ", "stats", ".", "push_batch", "(", "xs", ")", "\n", "xs", "=", "(", "xs", "-", "stats", ".", "mean", ")", "/", "stats", ".", "std", "\n", "\n", "", "return", "xs", ",", "acts", ",", "acts_mean", ",", "advs", ",", "ctgs", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.policy_gradient_adam_linear_policy": [[101, 186], ["print", "env.evaluate_policy", "test_perfs.append", "lqr_reinforce.roll_out", "lqr_reinforce.processing_batch", "numpy.matmul", "numpy.reshape", "numpy.concatenate", "numpy.random.randn", "print", "np.reshape.T.dot", "numpy.mean", "numpy.sqrt", "optimizer.update", "new_flatten_param[].reshape", "abs", "numpy.exp", "numpy.exp", "numpy.exp", "gradient.reshape", "xs.T.dot", "numpy.concatenate", "numpy.sum", "numpy.linalg.lstsq", "gradient.flatten().dot", "descent_dir.flatten", "new_flatten_param[].reshape.reshape", "gradient.flatten", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.LQR.LQR.LQREnv.evaluate_policy", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.roll_out", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.lqr_reinforce.processing_batch", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.ars.RunningStat.mean", "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.utils.adam.Adam.update"], ["", "def", "policy_gradient_adam_linear_policy", "(", "env", ",", "optimizer", ",", "explore_mag", "=", "0.1", ",", "\n", "batch_size", "=", "100", ",", "max_iter", "=", "100", ",", "K0", "=", "None", ",", "Natural", "=", "False", ",", "kl", "=", "1e-3", ",", "stats", "=", "None", ",", "sigma", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "a_dim", "=", "env", ".", "a_dim", "\n", "x_dim", "=", "env", ".", "x_dim", "\n", "if", "K0", "is", "None", ":", "\n", "        ", "K0", "=", "0.0", "*", "np", ".", "random", ".", "randn", "(", "a_dim", ",", "x_dim", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "        ", "sigma", "=", "0.", "#std exp(sigma) = 0", "\n", "\n", "", "K", "=", "K0", "\n", "sigma", "=", "sigma", "\n", "baseline", "=", "0.0", "\n", "\n", "#evalue the optimal K:", "\n", "#optimal_perf = evaluation(env = env, batch_size = batch_size*2, K = env.optimal_K)", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"optimal K's performance is {}\"", ".", "format", "(", "-", "env", ".", "optimal_cost", ")", ")", "\n", "\n", "", "test_perfs", "=", "[", "]", "\n", "#for e in range(max_iter):", "\n", "e", "=", "0", "\n", "while", "True", ":", "\n", "#evaluation on the current K:", "\n", "#perf = evaluation(env = env, batch_size = batch_size, K=K, stats = stats)", "\n", "        ", "perf", "=", "env", ".", "evaluate_policy", "(", "K", ")", "\n", "info", "=", "(", "e", ",", "e", "*", "batch_size", ",", "sigma", ",", "optimizer", ".", "alpha", ",", "perf", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "info", ")", "\n", "", "if", "abs", "(", "perf", "-", "env", ".", "optimal_cost", ")", "/", "env", ".", "optimal_cost", "<", "0.05", ":", "\n", "            ", "return", "e", "*", "batch_size", "\n", "\n", "#print \"at epoch {}, current K's avg cummulative reward is {}\".format(e, perf)", "\n", "", "test_perfs", ".", "append", "(", "perf", ")", "\n", "num_steps", "=", "0", "\n", "#rollout:", "\n", "trajs", "=", "roll_out", "(", "env", "=", "env", ",", "batch_size", "=", "batch_size", ",", "K", "=", "K", ",", "\n", "explore_mag", "=", "np", ".", "exp", "(", "sigma", ")", ",", "test", "=", "False", ",", "stats", "=", "stats", ")", "\n", "#process batch data:", "\n", "xs", ",", "acts", ",", "acts_mean", ",", "advs", ",", "ctgs", "=", "processing_batch", "(", "trajs", ",", "gamma", "=", "1.", ",", "stats", "=", "stats", ")", "\n", "#compute gradient:", "\n", "mean_acts", "=", "acts_mean", "\n", "d_acts", "=", "acts", "-", "mean_acts", "\n", "\n", "#d_acts = d_acts.reshape(d_acts.shape[0])", "\n", "#grad = (xs.T.dot(ctgs*d_acts))/batch_size", "\n", "#gradient = grad.reshape(1, env.x_dim)", "\n", "\n", "weighted_d_acts", "=", "np", ".", "matmul", "(", "d_acts", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "advs", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "weighted_d_acts", "=", "np", ".", "reshape", "(", "weighted_d_acts", ",", "(", "weighted_d_acts", ".", "shape", "[", "0", "]", ",", "env", ".", "a_dim", ")", ")", "\n", "gradient", "=", "weighted_d_acts", ".", "T", ".", "dot", "(", "xs", ")", "/", "(", "xs", ".", "shape", "[", "0", "]", ")", "\n", "gradient", "*=", "1.", "/", "(", "np", ".", "exp", "(", "sigma", ")", "**", "2", ")", "\n", "\n", "weighted_d_acts_square", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "d_acts", "**", "2", ",", "axis", "=", "1", ")", "*", "advs", ")", "/", "(", "np", ".", "exp", "(", "sigma", ")", "**", "2", ")", "\n", "concatenated_grad", "=", "np", ".", "concatenate", "(", "[", "gradient", ".", "reshape", "(", "env", ".", "x_dim", "*", "env", ".", "a_dim", ")", ",", "[", "weighted_d_acts_square", "]", "]", ")", "\n", "\n", "#if np.linalg.norm(gradient) > 100.:", "\n", "#    gradient = 100.*gradient/np.linalg.norm(gradient)", "\n", "\n", "if", "Natural", "is", "True", ":", "\n", "            ", "JJp", "=", "xs", ".", "T", ".", "dot", "(", "xs", ")", "/", "xs", ".", "shape", "[", "0", "]", "\n", "#JJp = np.mean(np.matmul(xs[:,:,np.newaxis], xs[:,np.newaxis,:]),axis=0)", "\n", "descent_dir", "=", "(", "np", ".", "linalg", ".", "lstsq", "(", "JJp", "+", "np", ".", "eye", "(", "env", ".", "x_dim", ")", "*", "1e-3", ",", "gradient", ".", "T", ",", "rcond", "=", "None", ")", "[", "0", "]", ")", ".", "T", "\n", "#descent_dir = np.linalg.inv(JJp+1e-3*np.eye(env.x_dim)).dot(gradient.T).T", "\n", "lr", "=", "np", ".", "sqrt", "(", "kl", "/", "(", "gradient", ".", "flatten", "(", ")", ".", "dot", "(", "descent_dir", ".", "flatten", "(", ")", ")", ")", ")", "\n", "K", "=", "K", "+", "lr", "*", "descent_dir", "\n", "#embed()", "\n", "", "else", ":", "\n", "#K = K + kl * gradient", "\n", "#new_flatten_param = optimizer.update(K.reshape(env.x_dim*env.a_dim), ", "\n", "#   -gradient.reshape(env.x_dim*env.a_dim))", "\n", "#K = new_flatten_param.reshape(env.a_dim, env.x_dim)", "\n", "            ", "new_flatten_param", "=", "optimizer", ".", "update", "(", "np", ".", "concatenate", "(", "[", "K", ".", "reshape", "(", "env", ".", "x_dim", "*", "env", ".", "a_dim", ")", ",", "[", "sigma", "]", "]", ")", ",", "-", "concatenated_grad", ")", "\n", "K", "=", "new_flatten_param", "[", "0", ":", "-", "1", "]", ".", "reshape", "(", "env", ".", "a_dim", ",", "env", ".", "x_dim", ")", "\n", "sigma", "=", "new_flatten_param", "[", "-", "1", "]", "\n", "\n", "\n", "#optimizer.alpha /= (e+1)**0.1", "\n", "", "if", "e", "*", "batch_size", ">", "max_iter", ":", "\n", "#break", "\n", "            ", "return", "e", "*", "batch_size", "\n", "\n", "", "e", "=", "e", "+", "1", "\n", "\n", "", "return", "test_perfs", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.mnist_reinforce.Net.__init__": [[56, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.reinforce.mnist_reinforce.Net.forward": [[63, 71], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist_reinforce.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "mnist_reinforce.Net.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist_reinforce.Net.fc1", "mnist_reinforce.Net.conv1", "mnist_reinforce.Net.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__": [[58, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LAIRLAB_ARS-experiments.supervised.mnist_sgd.Net.forward": [[65, 73], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist_sgd.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "mnist_sgd.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist_sgd.Net.fc1", "mnist_sgd.Net.conv1", "mnist_sgd.Net.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]]}