{"home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.eval.crop_center": [[11, 17], ["pil_img.crop"], "function", ["None"], ["def", "crop_center", "(", "pil_img", ",", "crop_width", ",", "crop_height", ")", ":", "\n", "    ", "img_width", ",", "img_height", "=", "pil_img", ".", "size", "\n", "return", "pil_img", ".", "crop", "(", "(", "(", "img_width", "-", "crop_width", ")", "//", "2", ",", "\n", "(", "img_height", "-", "crop_height", ")", "//", "2", ",", "\n", "(", "img_width", "+", "crop_width", ")", "//", "2", ",", "\n", "(", "img_height", "+", "crop_height", ")", "//", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.eval.resize_short": [[18, 27], ["image.resize", "int", "int"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize"], ["", "def", "resize_short", "(", "image", ",", "imgsize", "=", "256", ")", ":", "\n", "    ", "(", "w", ",", "h", ")", "=", "image", ".", "size", "\n", "if", "w", "<=", "h", ":", "\n", "        ", "h", "=", "int", "(", "h", "*", "imgsize", "/", "w", ")", "\n", "w", "=", "imgsize", "\n", "", "else", ":", "\n", "        ", "w", "=", "int", "(", "w", "*", "imgsize", "/", "h", ")", "\n", "h", "=", "imgsize", "\n", "", "return", "image", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.eval.save_image": [[28, 34], ["torchvision.utils.save_image", "img.cpu", "str"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["", "def", "save_image", "(", "img", ",", "index", ",", "save_dir", ",", "dir", "=", "'/source/'", ",", "save_ending", "=", "'.png'", ")", ":", "\n", "    ", "utils", ".", "save_image", "(", "\n", "img", ".", "cpu", "(", ")", ",", "\n", "save_dir", "+", "dir", "+", "str", "(", "index", ")", "+", "save_ending", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.MyDataset.__init__": [[36, 40], ["open", "open.readlines"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "f", "=", "open", "(", "list_file", ",", "\"r\"", ")", "\n", "self", ".", "data_lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.MyDataset.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.MyDataset.__getitem__": [[44, 53], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "PIL.Image.open().convert", "print", "idx.tolist.tolist.tolist", "train.MyDataset.transform", "PIL.Image.open", "train.MyDataset.data_lines[].strip"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "print", "(", "'yes'", ")", "\n", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "self", ".", "data_lines", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.data_sampler": [[55, 64], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["", "", "def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.requires_grad": [[66, 69], ["model.parameters"], "function", ["None"], ["", "", "def", "requires_grad", "(", "model", ",", "flag", "=", "True", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.accumulate": [[71, 77], ["dict", "dict", "dict.keys", "model1.named_parameters", "model2.named_parameters", "par1[].data.mul_().add_", "par1[].data.mul_"], "function", ["None"], ["", "", "def", "accumulate", "(", "model1", ",", "model2", ",", "decay", "=", "0.999", ")", ":", "\n", "    ", "par1", "=", "dict", "(", "model1", ".", "named_parameters", "(", ")", ")", "\n", "par2", "=", "dict", "(", "model2", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "k", "in", "par1", ".", "keys", "(", ")", ":", "\n", "        ", "par1", "[", "k", "]", ".", "data", ".", "mul_", "(", "decay", ")", ".", "add_", "(", "par2", "[", "k", "]", ".", "data", ",", "alpha", "=", "1", "-", "decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.sample_data": [[79, 83], ["None"], "function", ["None"], ["", "", "def", "sample_data", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.d_logistic_loss": [[85, 90], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "F.softplus.mean", "F.softplus.mean"], "function", ["None"], ["", "", "", "def", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", ":", "\n", "    ", "real_loss", "=", "F", ".", "softplus", "(", "-", "real_pred", ")", "\n", "fake_loss", "=", "F", ".", "softplus", "(", "fake_pred", ")", "\n", "\n", "return", "real_loss", ".", "mean", "(", ")", "+", "fake_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.d_r1_loss": [[92, 99], ["torch.autograd.grad", "grad_real.pow().reshape().sum().mean", "real_pred.sum", "grad_real.pow().reshape().sum", "grad_real.pow().reshape", "grad_real.pow"], "function", ["None"], ["", "def", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", ":", "\n", "    ", "(", "grad_real", ",", ")", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "real_pred", ".", "sum", "(", ")", ",", "inputs", "=", "real_img", ",", "create_graph", "=", "True", "\n", ")", "\n", "grad_penalty", "=", "grad_real", ".", "pow", "(", "2", ")", ".", "reshape", "(", "grad_real", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.g_nonsaturating_loss": [[101, 105], ["torch.nn.functional.softplus().mean", "torch.nn.functional.softplus"], "function", ["None"], ["", "def", "g_nonsaturating_loss", "(", "fake_pred", ")", ":", "\n", "    ", "loss", "=", "F", ".", "softplus", "(", "-", "fake_pred", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.set_grad_none": [[107, 111], ["model.named_parameters"], "function", ["None"], ["", "def", "set_grad_none", "(", "model", ",", "targets", ")", ":", "\n", "    ", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "n", "in", "targets", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image": [[113, 144], ["int", "int", "zip", "torch.stack().view", "torch.stack().view", "random.randrange", "random.randrange", "torch.nn.functional.interpolate", "torch.stack().view.append", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["", "", "", "def", "patchify_image", "(", "img", ",", "n_crop", ",", "min_size", "=", "1", "/", "8", ",", "max_size", "=", "1", "/", "4", ")", ":", "\n", "    ", "crop_size1", "=", "torch", ".", "rand", "(", "n_crop", ")", "*", "(", "max_size", "-", "min_size", ")", "+", "min_size", "\n", "crop_size2", "=", "torch", ".", "rand", "(", "n_crop", ")", "*", "(", "max_size", "-", "min_size", ")", "+", "min_size", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "img", ".", "shape", "\n", "if", "height", "==", "256", ":", "\n", "        ", "max_size", "=", "max_size", "*", "2", "\n", "", "elif", "height", "==", "512", "or", "height", "==", "1024", ":", "\n", "# print(height)", "\n", "        ", "max_size", "=", "max_size", "*", "1", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "target_h", "=", "int", "(", "height", "*", "max_size", ")", "\n", "target_w", "=", "int", "(", "width", "*", "max_size", ")", "\n", "crop_h", "=", "(", "crop_size1", "*", "height", ")", ".", "type", "(", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "crop_w", "=", "(", "crop_size2", "*", "width", ")", ".", "type", "(", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "\n", "patches", "=", "[", "]", "\n", "for", "c_h", ",", "c_w", "in", "zip", "(", "crop_h", ",", "crop_w", ")", ":", "\n", "        ", "c_y", "=", "random", ".", "randrange", "(", "0", ",", "height", "-", "c_h", ")", "\n", "c_x", "=", "random", ".", "randrange", "(", "0", ",", "width", "-", "c_w", ")", "\n", "\n", "cropped", "=", "img", "[", ":", ",", ":", ",", "c_y", ":", "c_y", "+", "c_h", ",", "c_x", ":", "c_x", "+", "c_w", "]", "\n", "cropped", "=", "F", ".", "interpolate", "(", "\n", "cropped", ",", "size", "=", "(", "target_h", ",", "target_w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "\n", "patches", ".", "append", "(", "cropped", ")", "\n", "\n", "", "patches", "=", "torch", ".", "stack", "(", "patches", ",", "1", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "target_h", ",", "target_w", ")", "\n", "\n", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.train": [[146, 380], ["utils_freq.freq_pixel_loss.get_gaussian_kernel().cuda", "utils_freq.freq_fourier_loss.decide_circle", "train.sample_data", "range", "torch.tensor", "torch.tensor", "mask_h.cuda", "mask_l.cuda", "stylegan2.distributed.get_rank", "os.makedirs", "os.makedirs", "stylegan2.distributed.get_rank", "tqdm.tqdm", "next", "real_img.to.to", "utils_freq.freq_pixel_loss.find_fake_freq", "train.requires_grad", "train.requires_grad", "train.requires_grad", "train.requires_grad", "real_img.to.chunk", "utils_freq.freq_pixel_loss.find_fake_freq.chunk", "encoder", "encoder", "generator", "generator", "discriminator", "discriminator", "train.d_logistic_loss", "utils_freq.freq_pixel_loss.find_fake_freq", "train.patchify_image", "train.patchify_image", "train.patchify_image", "cooccur", "cooccur", "train.d_logistic_loss", "discriminator.mean", "discriminator.chunk", "fake_pred1.mean", "fake_pred2.mean", "d_optim.zero_grad", "d_optim.step", "train.requires_grad", "train.requires_grad", "train.requires_grad", "train.requires_grad", "encoder", "encoder", "generator", "generator", "torch.nn.functional.l1_loss", "discriminator", "train.g_nonsaturating_loss", "utils_freq.freq_pixel_loss.find_fake_freq", "train.patchify_image", "train.patchify_image", "cooccur", "train.g_nonsaturating_loss", "utils_freq.freq_pixel_loss.find_fake_freq", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "utils_freq.freq_fourier_loss.fft_L1_loss_color", "torch.nn.functional.l1_loss", "utils_freq.freq_fourier_loss.fft_L1_loss_mask", "g_optim.zero_grad", "g_optim.step", "train.accumulate", "train.accumulate", "stylegan2.distributed.reduce_loss_dict", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "utils_freq.freq_pixel_loss.get_gaussian_kernel", "int", "print", "torch.cat", "torch.cat", "discriminator", "train.d_r1_loss", "cooccur", "train.d_r1_loss", "d_optim.zero_grad", "r1_loss_sum.backward", "d_optim.step", "torch.cat", "torch.cat", "stylegan2.distributed.get_rank", "tqdm.tqdm.set_description", "str", "str", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "e_ema.eval", "g_ema.eval", "e_ema", "e_ema", "g_ema", "g_ema", "torch.cat", "torch.cat", "torchvision.utils.save_image", "e_module.state_dict", "g_module.state_dict", "d_module.state_dict", "c_module.state_dict", "e_ema.state_dict", "g_ema.state_dict", "g_optim.state_dict", "d_optim.state_dict", "int", "str", "str().zfill", "str", "str().zfill", "str", "str"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.decide_circle", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.sample_data", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_logistic_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_logistic_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_nonsaturating_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.train.patchify_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_nonsaturating_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_color", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_mask", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.accumulate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.accumulate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_kernel", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_r1_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_r1_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["", "def", "train", "(", "\n", "args", ",", "\n", "loader", ",", "\n", "encoder", ",", "\n", "generator", ",", "\n", "discriminator", ",", "\n", "cooccur", ",", "\n", "g_optim", ",", "\n", "d_optim", ",", "\n", "e_ema", ",", "\n", "g_ema", ",", "\n", "device", ",", "\n", ")", ":", "\n", "\n", "    ", "gauss_kernel", "=", "get_gaussian_kernel", "(", "args", ".", "gauss_size", ")", ".", "cuda", "(", ")", "\n", "mask_h", ",", "mask_l", "=", "decide_circle", "(", "r", "=", "args", ".", "radius", ",", "N", "=", "int", "(", "args", ".", "batch", "/", "2", ")", ",", "L", "=", "args", ".", "size", ")", "\n", "mask_h", ",", "mask_l", "=", "mask_h", ".", "cuda", "(", ")", ",", "mask_l", ".", "cuda", "(", ")", "\n", "\n", "loader", "=", "sample_data", "(", "loader", ")", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "'sample_'", "+", "str", "(", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'checkpoint_'", "+", "str", "(", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "pbar", "=", "range", "(", "args", ".", "iter", ")", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "pbar", ",", "initial", "=", "args", ".", "start_iter", ",", "dynamic_ncols", "=", "True", ",", "smoothing", "=", "0.01", ")", "\n", "\n", "", "d_loss_val", "=", "0", "\n", "r1_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "g_loss_val", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "e_module", "=", "encoder", ".", "module", "\n", "g_module", "=", "generator", ".", "module", "\n", "d_module", "=", "discriminator", ".", "module", "\n", "c_module", "=", "cooccur", ".", "module", "\n", "\n", "", "else", ":", "\n", "        ", "e_module", "=", "encoder", "\n", "g_module", "=", "generator", "\n", "d_module", "=", "discriminator", "\n", "c_module", "=", "cooccur", "\n", "\n", "", "accum", "=", "0.5", "**", "(", "32", "/", "(", "10", "*", "1000", ")", ")", "\n", "\n", "for", "idx", "in", "pbar", ":", "\n", "        ", "i", "=", "idx", "+", "args", ".", "start_iter", "\n", "\n", "if", "i", ">", "args", ".", "iter", ":", "\n", "            ", "print", "(", "\"Done!\"", ")", "\n", "\n", "break", "\n", "\n", "", "real_img", "=", "next", "(", "loader", ")", "\n", "real_img", "=", "real_img", ".", "to", "(", "device", ")", "\n", "real_img_freq", "=", "find_fake_freq", "(", "real_img", ",", "gauss_kernel", ")", "\n", "# pdb.set_trace()", "\n", "\n", "requires_grad", "(", "encoder", ",", "False", ")", "\n", "requires_grad", "(", "generator", ",", "False", ")", "\n", "requires_grad", "(", "discriminator", ",", "True", ")", "\n", "requires_grad", "(", "cooccur", ",", "True", ")", "\n", "\n", "real_img1", ",", "real_img2", "=", "real_img", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "real_img_freq1", ",", "real_img2_freq", "=", "real_img_freq", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "structure1", ",", "texture1", "=", "encoder", "(", "real_img1", ")", "\n", "_", ",", "texture2", "=", "encoder", "(", "real_img2", ")", "\n", "\n", "fake_img1", "=", "generator", "(", "structure1", ",", "texture1", ")", "\n", "fake_img2", "=", "generator", "(", "structure1", ",", "texture2", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "torch", ".", "cat", "(", "(", "fake_img1", ",", "fake_img2", ")", ",", "0", ")", ")", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "d_loss", "=", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", "\n", "\n", "fake_img2_freq", "=", "find_fake_freq", "(", "fake_img2", ",", "gauss_kernel", ")", "\n", "fake_patch", "=", "patchify_image", "(", "fake_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "real_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "ref_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "ref_crop", "*", "args", ".", "n_crop", ")", "\n", "fake_patch_pred", ",", "ref_input", "=", "cooccur", "(", "\n", "fake_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", "\n", ")", "\n", "real_patch_pred", ",", "_", "=", "cooccur", "(", "real_patch", ",", "ref_input", "=", "ref_input", ")", "\n", "cooccur_loss", "=", "d_logistic_loss", "(", "real_patch_pred", ",", "fake_patch_pred", ")", "\n", "\n", "\n", "\n", "loss_dict", "[", "\"d\"", "]", "=", "d_loss", "\n", "loss_dict", "[", "\"cooccur\"", "]", "=", "cooccur_loss", "\n", "loss_dict", "[", "\"real_score\"", "]", "=", "real_pred", ".", "mean", "(", ")", "\n", "fake_pred1", ",", "fake_pred2", "=", "fake_pred", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "loss_dict", "[", "\"fake_score\"", "]", "=", "fake_pred1", ".", "mean", "(", ")", "\n", "loss_dict", "[", "\"hybrid_score\"", "]", "=", "fake_pred2", ".", "mean", "(", ")", "\n", "\n", "d_optim", ".", "zero_grad", "(", ")", "\n", "(", "d_loss", "+", "cooccur_loss", ")", ".", "backward", "(", ")", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "d_regularize", "=", "i", "%", "args", ".", "d_reg_every", "==", "0", "\n", "\n", "if", "d_regularize", ":", "\n", "            ", "real_img", ".", "requires_grad", "=", "True", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "r1_loss", "=", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", "\n", "\n", "real_patch", ".", "requires_grad", "=", "True", "\n", "real_patch_pred", ",", "_", "=", "cooccur", "(", "real_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", ")", "\n", "cooccur_r1_loss", "=", "d_r1_loss", "(", "real_patch_pred", ",", "real_patch", ")", "\n", "\n", "d_optim", ".", "zero_grad", "(", ")", "\n", "\n", "r1_loss_sum", "=", "args", ".", "r1", "/", "2", "*", "r1_loss", "*", "args", ".", "d_reg_every", "\n", "r1_loss_sum", "+=", "args", ".", "cooccur_r1", "/", "2", "*", "cooccur_r1_loss", "*", "args", ".", "d_reg_every", "\n", "r1_loss_sum", "+=", "0", "*", "real_pred", "[", "0", ",", "0", "]", "+", "0", "*", "real_patch_pred", "[", "0", ",", "0", "]", "\n", "r1_loss_sum", ".", "backward", "(", ")", "\n", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "", "loss_dict", "[", "\"r1\"", "]", "=", "r1_loss", "\n", "loss_dict", "[", "\"cooccur_r1\"", "]", "=", "cooccur_r1_loss", "\n", "\n", "requires_grad", "(", "encoder", ",", "True", ")", "\n", "requires_grad", "(", "generator", ",", "True", ")", "\n", "requires_grad", "(", "discriminator", ",", "False", ")", "\n", "requires_grad", "(", "cooccur", ",", "False", ")", "\n", "\n", "real_img", ".", "requires_grad", "=", "False", "\n", "\n", "structure1", ",", "texture1", "=", "encoder", "(", "real_img1", ")", "\n", "_", ",", "texture2", "=", "encoder", "(", "real_img2", ")", "\n", "\n", "\n", "fake_img1", "=", "generator", "(", "structure1", ",", "texture1", ")", "\n", "fake_img2", "=", "generator", "(", "structure1", ",", "texture2", ")", "\n", "\n", "recon_loss", "=", "F", ".", "l1_loss", "(", "fake_img1", ",", "real_img1", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "torch", ".", "cat", "(", "(", "fake_img1", ",", "fake_img2", ")", ",", "0", ")", ")", "\n", "g_loss", "=", "g_nonsaturating_loss", "(", "fake_pred", ")", "\n", "\n", "fake_img2_freq", "=", "find_fake_freq", "(", "fake_img2", ",", "gauss_kernel", ")", "\n", "fake_patch", "=", "patchify_image", "(", "fake_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "ref_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "ref_crop", "*", "args", ".", "n_crop", ")", "\n", "fake_patch_pred", ",", "_", "=", "cooccur", "(", "fake_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", ")", "\n", "g_cooccur_loss", "=", "g_nonsaturating_loss", "(", "fake_patch_pred", ")", "\n", "\n", "\n", "fake_img1_freq", "=", "find_fake_freq", "(", "fake_img1", ",", "gauss_kernel", ")", "\n", "\n", "recon_freq_loss_img1_low", "=", "F", ".", "l1_loss", "(", "fake_img1_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "recon_freq_loss_img1_high", "=", "F", ".", "l1_loss", "(", "fake_img1_freq", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ")", "\n", "\n", "recon_fft", "=", "fft_L1_loss_color", "(", "fake_img1", ",", "real_img1", ")", "\n", "recon_freq_loss_img1", "=", "args", ".", "w_low_recon", "*", "recon_freq_loss_img1_low", "+", "args", ".", "w_high_recon", "*", "recon_freq_loss_img1_high", "\n", "recon_freq_loss_img2_structure", "=", "F", ".", "l1_loss", "(", "fake_img2_freq", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ")", "\n", "fft_swap_H", "=", "fft_L1_loss_mask", "(", "fake_img2", ",", "real_img1", ",", "mask_h", ")", "\n", "\n", "loss_dict", "[", "\"recon\"", "]", "=", "recon_loss", "\n", "loss_dict", "[", "\"g\"", "]", "=", "g_loss", "\n", "loss_dict", "[", "\"g_cooccur\"", "]", "=", "g_cooccur_loss", "\n", "loss_dict", "[", "\"rec_F1_H\"", "]", "=", "recon_freq_loss_img1_high", "\n", "loss_dict", "[", "\"rec_F1_L\"", "]", "=", "recon_freq_loss_img1_low", "\n", "loss_dict", "[", "\"rec_F2_H\"", "]", "=", "recon_freq_loss_img2_structure", "\n", "\n", "g_optim", ".", "zero_grad", "(", ")", "\n", "(", "recon_loss", "+", "g_loss", "+", "g_cooccur_loss", "+", "recon_freq_loss_img1", "+", "args", ".", "w_high_recon", "*", "recon_freq_loss_img2_structure", "\n", "+", "args", ".", "w_recon_fft", "*", "recon_fft", "+", "args", ".", "w_fft_swap_H", "*", "fft_swap_H", ")", ".", "backward", "(", ")", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "accumulate", "(", "e_ema", ",", "e_module", ",", "accum", ")", "\n", "accumulate", "(", "g_ema", ",", "g_module", ",", "accum", ")", "\n", "\n", "loss_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "d_loss_val", "=", "loss_reduced", "[", "\"d\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "cooccur_val", "=", "loss_reduced", "[", "\"cooccur\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "recon_val", "=", "loss_reduced", "[", "\"recon\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_loss_val", "=", "loss_reduced", "[", "\"g\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_cooccur_val", "=", "loss_reduced", "[", "\"g_cooccur\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "r1_val", "=", "loss_reduced", "[", "\"r1\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "cooccur_r1_val", "=", "loss_reduced", "[", "\"cooccur_r1\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F1_H", "=", "loss_reduced", "[", "\"rec_F1_H\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F1_L", "=", "loss_reduced", "[", "\"rec_F1_L\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F2_H", "=", "loss_reduced", "[", "\"rec_F2_H\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "set_description", "(", "\n", "(", "\n", "f\"d: {d_loss_val:.4f}; c: {cooccur_val:.4f} g: {g_loss_val:.4f}; \"", "\n", "f\"g_cooccur: {g_cooccur_val:.4f}; recon: {recon_val:.4f}; r1: {r1_val:.4f}; \"", "\n", "f\"r1_cooccur: {cooccur_r1_val:.4f};rec_F1_H: {rec_F1_H:.4f};rec_F1_L: {rec_F1_L:.4f};rec_F2_H: {rec_F2_H:.4f}\"", "\n", ")", "\n", ")", "\n", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "e_ema", ".", "eval", "(", ")", "\n", "g_ema", ".", "eval", "(", ")", "\n", "\n", "structure1", ",", "texture1", "=", "e_ema", "(", "real_img1", ")", "\n", "_", ",", "texture2", "=", "e_ema", "(", "real_img2", ")", "\n", "\n", "fake_img1", "=", "g_ema", "(", "structure1", ",", "texture1", ")", "\n", "fake_img2", "=", "g_ema", "(", "structure1", ",", "texture2", ")", "\n", "\n", "sample", "=", "torch", ".", "cat", "(", "(", "real_img1", ",", "real_img2", ",", "fake_img1", ",", "fake_img2", ")", ",", "0", ")", "\n", "\n", "utils", ".", "save_image", "(", "\n", "sample", ",", "\n", "f\"sample_{str(args.name)}/{str(i).zfill(6)}.png\"", ",", "\n", "nrow", "=", "int", "(", "sample", ".", "shape", "[", "0", "]", "/", "4", ")", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "", "", "if", "i", "%", "10000", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "\n", "\"e\"", ":", "e_module", ".", "state_dict", "(", ")", ",", "\n", "\"g\"", ":", "g_module", ".", "state_dict", "(", ")", ",", "\n", "\"d\"", ":", "d_module", ".", "state_dict", "(", ")", ",", "\n", "\"cooccur\"", ":", "c_module", ".", "state_dict", "(", ")", ",", "\n", "\"e_ema\"", ":", "e_ema", ".", "state_dict", "(", ")", ",", "\n", "\"g_ema\"", ":", "g_ema", ".", "state_dict", "(", ")", ",", "\n", "\"g_optim\"", ":", "g_optim", ".", "state_dict", "(", ")", ",", "\n", "\"d_optim\"", ":", "d_optim", ".", "state_dict", "(", ")", ",", "\n", "\"args\"", ":", "args", ",", "\n", "}", ",", "\n", "f\"checkpoint_{str(args.name)}/{str(i).zfill(6)}.pt\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.SELayer.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "2", "*", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.SELayer.forward": [[21, 26], ["x.size", "model.SELayer.avg_pool().view", "model.SELayer.fc().view", "model.SELayer.avg_pool", "model.SELayer.fc", "y[].expand_as", "y[].expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "2", "*", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", ",", "x", "*", "y", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.EqualConvTranspose2d.__init__": [[28, 46], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "kernel_size", ")", "\n", ")", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "in_channel", "*", "kernel_size", "**", "2", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.EqualConvTranspose2d.forward": [[47, 57], ["torch.nn.functional.conv_transpose2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv_transpose2d", "(", "\n", "input", ",", "\n", "self", ".", "weight", "*", "self", ".", "scale", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.EqualConvTranspose2d.__repr__": [[58, 61], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}({self.weight.shape[0]}, {self.weight.shape[1]},\"", "\n", "f\" {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})\"", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.ConvLayer.__init__": [[66, 147], ["torch.nn.Sequential.__init__", "layers.append", "layers.append", "layers.append", "layers.append", "stylegan2.model.Blur", "model.EqualConvTranspose2d", "stylegan2.model.Blur", "stylegan2.model.EqualConv2d", "layers.append", "layers.append", "len", "len", "stylegan2.op.FusedLeakyReLU", "stylegan2.model.ScaledLeakyReLU", "layers.append", "ValueError", "torch.nn.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", "activate", "=", "True", ",", "\n", "padding", "=", "\"zero\"", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "self", ".", "padding", "=", "0", "\n", "stride", "=", "1", "\n", "\n", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "stride", "=", "2", "\n", "\n", "", "if", "upsample", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualConvTranspose2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "+", "1", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "downsample", ":", "\n", "                ", "if", "padding", "==", "\"zero\"", ":", "\n", "                    ", "self", ".", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "elif", "padding", "==", "\"reflect\"", ":", "\n", "                    ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "if", "padding", ">", "0", ":", "\n", "                        ", "layers", ".", "append", "(", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ")", "\n", "\n", "", "self", ".", "padding", "=", "0", "\n", "\n", "", "elif", "padding", "!=", "\"valid\"", ":", "\n", "                    ", "raise", "ValueError", "(", "'Padding should be \"zero\", \"reflect\", or \"valid\"'", ")", "\n", "\n", "", "", "layers", ".", "append", "(", "\n", "EqualConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "activate", ":", "\n", "            ", "if", "bias", ":", "\n", "                ", "layers", ".", "append", "(", "FusedLeakyReLU", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.StyledResBlock.__init__": [[150, 180], ["torch.nn.Module.__init__", "stylegan2.model.StyledConv", "stylegan2.model.StyledConv", "model.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "style_dim", ",", "upsample", ",", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "\n", "self", ".", "conv2", "=", "StyledConv", "(", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ")", "\n", "\n", "if", "upsample", "or", "in_channel", "!=", "out_channel", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "1", ",", "\n", "upsample", "=", "False", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.StyledResBlock.forward": [[181, 194], ["model.StyledResBlock.conv1", "model.StyledResBlock.conv2", "model.StyledResBlock.skip", "math.sqrt", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "noise", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ",", "style", ",", "noise", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "style", ",", "noise", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "                ", "skip", "=", "F", ".", "interpolate", "(", "skip", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "skip", "=", "input", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.ResBlock.__init__": [[197, 231], ["torch.nn.Module.__init__", "model.ConvLayer", "model.ConvLayer", "model.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "downsample", ",", "\n", "padding", "=", "\"zero\"", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "3", ",", "padding", "=", "padding", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "\n", "out_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "downsample", "=", "downsample", ",", "\n", "padding", "=", "padding", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "\n", "if", "downsample", "or", "in_channel", "!=", "out_channel", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "1", ",", "\n", "downsample", "=", "downsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.ResBlock.forward": [[232, 244], ["model.ResBlock.conv1", "model.ResBlock.conv2", "model.ResBlock.skip", "math.sqrt"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "\n", "", "else", ":", "\n", "            ", "skip", "=", "input", "\n", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Encoder.__init__": [[247, 283], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "model.ConvLayer", "stem.append", "model.SELayer", "model.ResBlock", "model.ConvLayer", "model.ConvLayer", "model.ResBlock", "model.ConvLayer", "model.ConvLayer", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Flatten", "stylegan2.model.EqualLinear", "model.ResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "stem", "=", "[", "ConvLayer", "(", "3", ",", "channel", ",", "1", ")", "]", "\n", "\n", "in_channel", "=", "channel", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "ch", "=", "channel", "*", "(", "2", "**", "i", ")", "\n", "stem", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "ch", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ")", "\n", "in_channel", "=", "ch", "\n", "\n", "", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "*", "stem", ")", "\n", "\n", "self", ".", "se_layer", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "in_channel", ")", "\n", ")", "\n", "\n", "out_channel", "=", "channel", "*", "(", "2", "**", "4", ")", "\n", "self", ".", "structure", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", ",", "1", ")", ",", "ConvLayer", "(", "out_channel", ",", "structure_channel", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "texture", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", "*", "2", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", "*", "2", ",", "out_channel", "*", "4", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", "1", ")", ",", "\n", "EqualLinear", "(", "out_channel", "*", "4", ",", "out_channel", "*", "4", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Encoder.forward": [[285, 292], ["model.Encoder.stem", "model.Encoder.se_layer", "model.Encoder.structure", "torch.flatten", "model.Encoder.texture"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "stem", "(", "input", ")", "\n", "out_structure", ",", "out_texture", "=", "self", ".", "se_layer", "(", "out", ")", "\n", "structure", "=", "self", ".", "structure", "(", "out_structure", ")", "\n", "texture", "=", "torch", ".", "flatten", "(", "self", ".", "texture", "(", "out_texture", ")", ",", "1", ")", "\n", "\n", "return", "structure", ",", "texture", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Generator.__init__": [[295, 318], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "zip", "model.ConvLayer", "model.Generator.layers.append", "model.StyledResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ch_multiplier", "=", "(", "4", ",", "8", ",", "16", ",", "16", ",", "8", ",", "4", ")", "\n", "upsample", "=", "(", "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "in_ch", "=", "structure_channel", "\n", "for", "ch_mul", ",", "up", "in", "zip", "(", "ch_multiplier", ",", "upsample", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "\n", "StyledResBlock", "(", "\n", "in_ch", ",", "channel", "*", "ch_mul", ",", "texture_channel", ",", "up", ",", "blur_kernel", "\n", ")", "\n", ")", "\n", "in_ch", "=", "channel", "*", "ch_mul", "\n", "\n", "", "self", ".", "to_rgb", "=", "ConvLayer", "(", "in_ch", ",", "3", ",", "1", ",", "activate", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Generator.forward": [[319, 330], ["zip", "model.Generator.to_rgb", "layer", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "structure", ",", "texture", ",", "noises", "=", "None", ")", ":", "\n", "        ", "if", "noises", "is", "None", ":", "\n", "            ", "noises", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layers", ")", "\n", "\n", "", "out", "=", "structure", "\n", "for", "layer", ",", "noise", "in", "zip", "(", "self", ".", "layers", ",", "noises", ")", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "texture", ",", "noise", ")", "\n", "\n", "", "out", "=", "self", ".", "to_rgb", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Discriminator.__init__": [[333, 367], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "model.ConvLayer", "torch.nn.Sequential", "model.ConvLayer", "math.log", "convs.append", "stylegan2.model.EqualLinear", "stylegan2.model.EqualLinear", "model.ResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "channels", "[", "4", "]", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channels", "[", "4", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.Discriminator.forward": [[369, 377], ["model.Discriminator.convs", "model.Discriminator.final_conv", "model.Discriminator.view", "model.Discriminator.final_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.CooccurDiscriminator.__init__": [[380, 413], ["torch.nn.Module.__init__", "zip", "encoder.append", "torch.nn.Sequential", "torch.nn.Sequential", "model.ConvLayer", "encoder.append", "model.ConvLayer", "stylegan2.model.EqualLinear", "stylegan2.model.EqualLinear", "stylegan2.model.EqualLinear", "stylegan2.model.EqualLinear", "model.ResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "size", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder", "=", "[", "ConvLayer", "(", "3", ",", "channel", ",", "1", ")", "]", "\n", "\n", "ch_multiplier", "=", "(", "2", ",", "4", ",", "8", ",", "12", ",", "12", ",", "24", ")", "\n", "downsample", "=", "(", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", ")", "\n", "if", "size", "==", "1024", ":", "\n", "            ", "downsample", "=", "(", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "", "in_ch", "=", "channel", "\n", "for", "ch_mul", ",", "down", "in", "zip", "(", "ch_multiplier", ",", "downsample", ")", ":", "\n", "            ", "encoder", ".", "append", "(", "ResBlock", "(", "in_ch", ",", "channel", "*", "ch_mul", ",", "down", ")", ")", "\n", "in_ch", "=", "channel", "*", "ch_mul", "\n", "\n", "", "if", "size", ">", "511", ":", "\n", "            ", "k_size", "=", "3", "\n", "feat_size", "=", "2", "*", "2", "\n", "\n", "", "else", ":", "\n", "            ", "k_size", "=", "3", "\n", "feat_size", "=", "2", "*", "2", "\n", "\n", "", "encoder", ".", "append", "(", "ConvLayer", "(", "in_ch", ",", "channel", "*", "12", ",", "k_size", ",", "padding", "=", "\"valid\"", ")", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "\n", "channel", "*", "12", "*", "2", "*", "feat_size", ",", "channel", "*", "32", ",", "activation", "=", "\"fused_lrelu\"", "\n", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "32", ",", "channel", "*", "32", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "32", ",", "channel", "*", "16", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "16", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.swapping-autoencoder.model.CooccurDiscriminator.forward": [[415, 428], ["model.CooccurDiscriminator.encoder", "torch.cat", "torch.flatten", "model.CooccurDiscriminator.linear", "model.CooccurDiscriminator.encoder", "ref_input.mean.mean.view", "ref_input.mean.mean.mean"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten"], ["", "def", "forward", "(", "self", ",", "input", ",", "reference", "=", "None", ",", "ref_batch", "=", "None", ",", "ref_input", "=", "None", ")", ":", "\n", "        ", "out_input", "=", "self", ".", "encoder", "(", "input", ")", "\n", "if", "ref_input", "is", "None", ":", "\n", "            ", "ref_input", "=", "self", ".", "encoder", "(", "reference", ")", "\n", "_", ",", "channel", ",", "height", ",", "width", "=", "ref_input", ".", "shape", "\n", "ref_input", "=", "ref_input", ".", "view", "(", "-", "1", ",", "ref_batch", ",", "channel", ",", "height", ",", "width", ")", "\n", "ref_input", "=", "ref_input", ".", "mean", "(", "1", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "out_input", ",", "ref_input", ")", ",", "1", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", ",", "ref_input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.PixelNorm.__init__": [[16, 18], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.PixelNorm.forward": [[19, 21], ["torch.rsqrt", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Upsample.__init__": [[35, 48], ["torch.nn.Module.__init__", "model_stylegan2.Upsample.register_buffer", "model_stylegan2.make_kernel"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "*", "(", "factor", "**", "2", ")", "\n", "self", ".", "register_buffer", "(", "\"kernel\"", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Upsample.forward": [[49, 53], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "self", ".", "factor", ",", "down", "=", "1", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Downsample.__init__": [[56, 69], ["torch.nn.Module.__init__", "model_stylegan2.make_kernel", "model_stylegan2.Downsample.register_buffer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "self", ".", "register_buffer", "(", "\"kernel\"", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Downsample.forward": [[70, 74], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "1", ",", "down", "=", "self", ".", "factor", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Blur.__init__": [[77, 88], ["torch.nn.Module.__init__", "model_stylegan2.make_kernel", "model_stylegan2.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "pad", ",", "upsample_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "\n", "if", "upsample_factor", ">", "1", ":", "\n", "            ", "kernel", "=", "kernel", "*", "(", "upsample_factor", "**", "2", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"kernel\"", ",", "kernel", ")", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Blur.forward": [[89, 93], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualConv2d.__init__": [[96, 114], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", "\n", ")", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "in_channel", "*", "kernel_size", "**", "2", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualConv2d.forward": [[115, 125], ["torch.nn.functional.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "\n", "input", ",", "\n", "self", ".", "weight", "*", "self", ".", "scale", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualConv2d.__repr__": [[126, 129], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]},\"", "\n", "f\" {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})\"", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualLinear.__init__": [[134, 151], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn().div_", "torch.nn.Parameter", "torch.zeros().fill_", "math.sqrt", "torch.randn", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_dim", ",", "out_dim", ",", "bias", "=", "True", ",", "bias_init", "=", "0", ",", "lr_mul", "=", "1", ",", "activation", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "out_dim", ",", "in_dim", ")", ".", "div_", "(", "lr_mul", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_dim", ")", ".", "fill_", "(", "bias_init", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "scale", "=", "(", "1", "/", "math", ".", "sqrt", "(", "in_dim", ")", ")", "*", "lr_mul", "\n", "self", ".", "lr_mul", "=", "lr_mul", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualLinear.forward": [[152, 163], ["torch.nn.functional.linear", "op.fused_leaky_relu", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ")", "\n", "out", "=", "fused_leaky_relu", "(", "out", ",", "self", ".", "bias", "*", "self", ".", "lr_mul", ")", "\n", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "\n", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ",", "bias", "=", "self", ".", "bias", "*", "self", ".", "lr_mul", "\n", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.EqualLinear.__repr__": [[164, 167], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]})\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ScaledLeakyReLU.__init__": [[171, 175], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ScaledLeakyReLU.forward": [[176, 180], ["torch.nn.functional.leaky_relu", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "leaky_relu", "(", "input", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "\n", "return", "out", "*", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ModulatedConv2d.__init__": [[183, 230], ["torch.nn.Module.__init__", "torch.nn.Parameter", "model_stylegan2.EqualLinear", "model_stylegan2.Blur", "model_stylegan2.Blur", "math.sqrt", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "demodulate", "=", "True", ",", "\n", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "1e-8", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "out_channel", "=", "out_channel", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "upsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "+", "1", "\n", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ",", "upsample_factor", "=", "factor", ")", "\n", "\n", "", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", "\n", "\n", "", "fan_in", "=", "in_channel", "*", "kernel_size", "**", "2", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", "\n", ")", "\n", "\n", "self", ".", "modulation", "=", "EqualLinear", "(", "style_dim", ",", "in_channel", ",", "bias_init", "=", "1", ")", "\n", "\n", "self", ".", "demodulate", "=", "demodulate", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ModulatedConv2d.__repr__": [[231, 234], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}({self.in_channel}, {self.out_channel}, {self.kernel_size}, \"", "\n", "f\"upsample={self.upsample}, downsample={self.downsample})\"", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ModulatedConv2d.forward": [[237, 279], ["model_stylegan2.ModulatedConv2d.modulation().view", "weight.transpose().reshape.transpose().reshape.view", "torch.rsqrt", "input.view.view.view", "weight.transpose().reshape.transpose().reshape.view", "weight.transpose().reshape.transpose().reshape.transpose().reshape", "torch.nn.functional.conv_transpose2d", "out.view.view.view", "model_stylegan2.ModulatedConv2d.blur", "model_stylegan2.ModulatedConv2d.modulation", "torch.rsqrt.view", "model_stylegan2.ModulatedConv2d.blur", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "weight.transpose().reshape.transpose().reshape.pow().sum", "weight.transpose().reshape.transpose().reshape.transpose", "weight.transpose().reshape.transpose().reshape.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ")", ":", "\n", "        ", "batch", ",", "in_channel", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "\n", "style", "=", "self", ".", "modulation", "(", "style", ")", ".", "view", "(", "batch", ",", "1", ",", "in_channel", ",", "1", ",", "1", ")", "\n", "weight", "=", "self", ".", "scale", "*", "self", ".", "weight", "*", "style", "\n", "\n", "if", "self", ".", "demodulate", ":", "\n", "            ", "demod", "=", "torch", ".", "rsqrt", "(", "weight", ".", "pow", "(", "2", ")", ".", "sum", "(", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", "\n", "weight", "=", "weight", "*", "demod", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "weight", "=", "weight", ".", "view", "(", "\n", "batch", "*", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "weight", "=", "weight", ".", "view", "(", "\n", "batch", ",", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "weight", "=", "weight", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "\n", "batch", "*", "in_channel", ",", "self", ".", "out_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", "\n", ")", "\n", "out", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "self", ".", "blur", "(", "out", ")", "\n", "\n", "", "elif", "self", ".", "downsample", ":", "\n", "            ", "input", "=", "self", ".", "blur", "(", "input", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "else", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "batch", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "self", ".", "padding", ",", "groups", "=", "batch", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.NoiseInjection.__init__": [[282, 286], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.NoiseInjection.forward": [[287, 293], ["image.new_empty().normal_", "image.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "batch", ",", "_", ",", "height", ",", "width", "=", "image", ".", "shape", "\n", "noise", "=", "image", ".", "new_empty", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "normal_", "(", ")", "\n", "\n", "", "return", "image", "+", "self", ".", "weight", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ConstantInput.__init__": [[296, 300], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "size", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "channel", ",", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ConstantInput.forward": [[301, 306], ["model_stylegan2.ConstantInput.input.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch", "=", "input", ".", "shape", "[", "0", "]", "\n", "out", "=", "self", ".", "input", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.StyledConv.__init__": [[309, 335], ["torch.nn.Module.__init__", "model_stylegan2.ModulatedConv2d", "model_stylegan2.NoiseInjection", "op.FusedLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "demodulate", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "ModulatedConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "demodulate", "=", "demodulate", ",", "\n", ")", "\n", "\n", "self", ".", "noise", "=", "NoiseInjection", "(", ")", "\n", "# self.bias = nn.Parameter(torch.zeros(1, out_channel, 1, 1))", "\n", "# self.activate = ScaledLeakyReLU(0.2)", "\n", "self", ".", "activate", "=", "FusedLeakyReLU", "(", "out_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.StyledConv.forward": [[336, 343], ["model_stylegan2.StyledConv.conv", "model_stylegan2.StyledConv.noise", "model_stylegan2.StyledConv.activate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "noise", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "out", "=", "self", ".", "noise", "(", "out", ",", "noise", "=", "noise", ")", "\n", "# out = out + self.bias", "\n", "out", "=", "self", ".", "activate", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ToRGB.__init__": [[346, 354], ["torch.nn.Module.__init__", "model_stylegan2.ModulatedConv2d", "torch.nn.Parameter", "model_stylegan2.Upsample", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "style_dim", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "upsample", "=", "Upsample", "(", "blur_kernel", ")", "\n", "\n", "", "self", ".", "conv", "=", "ModulatedConv2d", "(", "in_channel", ",", "3", ",", "1", ",", "style_dim", ",", "demodulate", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ToRGB.forward": [[355, 365], ["model_stylegan2.ToRGB.conv", "model_stylegan2.ToRGB.upsample"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "skip", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "out", "=", "out", "+", "self", ".", "bias", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "upsample", "(", "skip", ")", "\n", "\n", "out", "=", "out", "+", "skip", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Generator.__init__": [[368, 452], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "model_stylegan2.ConstantInput", "model_stylegan2.StyledConv", "model_stylegan2.ToRGB", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "range", "range", "model_stylegan2.PixelNorm", "layers.append", "math.log", "model_stylegan2.Generator.noises.register_buffer", "model_stylegan2.Generator.convs.append", "model_stylegan2.Generator.convs.append", "model_stylegan2.Generator.to_rgbs.append", "model_stylegan2.EqualLinear", "torch.randn", "model_stylegan2.StyledConv", "model_stylegan2.StyledConv", "model_stylegan2.ToRGB"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "size", ",", "\n", "style_dim", ",", "\n", "n_mlp", ",", "\n", "channel_multiplier", "=", "2", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "lr_mlp", "=", "0.01", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "layers", "=", "[", "PixelNorm", "(", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_mlp", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualLinear", "(", "\n", "style_dim", ",", "style_dim", ",", "lr_mul", "=", "lr_mlp", ",", "activation", "=", "\"fused_lrelu\"", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "style", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "self", ".", "input", "=", "ConstantInput", "(", "self", ".", "channels", "[", "4", "]", ")", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "self", ".", "channels", "[", "4", "]", ",", "self", ".", "channels", "[", "4", "]", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", "self", ".", "to_rgb1", "=", "ToRGB", "(", "self", ".", "channels", "[", "4", "]", ",", "style_dim", ",", "upsample", "=", "False", ")", "\n", "\n", "self", ".", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "log_size", "-", "2", ")", "*", "2", "+", "1", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upsamples", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_rgbs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noises", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "in_channel", "=", "self", ".", "channels", "[", "4", "]", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f\"noise_{layer_idx}\"", ",", "torch", ".", "randn", "(", "*", "shape", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "out_channel", "=", "self", ".", "channels", "[", "2", "**", "i", "]", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "True", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "to_rgbs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "style_dim", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "n_latent", "=", "self", ".", "log_size", "*", "2", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Generator.make_noise": [[453, 463], ["range", "torch.randn", "range", "noises.append", "torch.randn"], "methods", ["None"], ["", "def", "make_noise", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", "\n", "noises", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "2", ",", "2", "**", "2", ",", "device", "=", "device", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "noises", ".", "append", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "i", ",", "2", "**", "i", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Generator.mean_latent": [[464, 471], ["torch.randn", "model_stylegan2.Generator.style().mean", "model_stylegan2.Generator.style"], "methods", ["None"], ["", "def", "mean_latent", "(", "self", ",", "n_latent", ")", ":", "\n", "        ", "latent_in", "=", "torch", ".", "randn", "(", "\n", "n_latent", ",", "self", ".", "style_dim", ",", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", ")", "\n", "latent", "=", "self", ".", "style", "(", "latent_in", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Generator.get_latent": [[472, 474], ["model_stylegan2.Generator.style"], "methods", ["None"], ["", "def", "get_latent", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "style", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Generator.forward": [[475, 563], ["model_stylegan2.Generator.input", "model_stylegan2.Generator.conv1", "model_stylegan2.Generator.to_rgb1", "zip", "len", "styles[].unsqueeze().repeat", "styles[].unsqueeze().repeat", "torch.cat", "conv1", "conv2", "to_rgb", "style_t.append", "styles[].unsqueeze().repeat", "random.randint", "getattr", "styles[].unsqueeze", "styles[].unsqueeze", "range", "styles[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "styles", ",", "\n", "return_latents", "=", "False", ",", "\n", "inject_index", "=", "None", ",", "\n", "truncation", "=", "1", ",", "\n", "truncation_latent", "=", "None", ",", "\n", "input_is_latent", "=", "False", ",", "\n", "noise", "=", "None", ",", "\n", "randomize_noise", "=", "True", ",", "\n", "pdb_set", "=", "False", ",", "\n", ")", ":", "\n", "# if pdb_set:", "\n", "#     import pdb", "\n", "#     pdb.set_trace()", "\n", "        ", "if", "not", "input_is_latent", ":", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "# styles = [self.style(s) for s in styles]", "\n", "# styles = self.style(styles[0])", "\n", "            ", "styles", "=", "[", "s", "for", "s", "in", "styles", "]", "\n", "# styles = [self.style(styles[0]), self.style(torch.cat((styles[0][1].unsqueeze(0), styles[0][0].unsqueeze(0)),0))]", "\n", "# styles = [self.style(styles[0][0].unsqueeze(0)),self.style(styles[0][1].unsqueeze(0))]", "\n", "\n", "", "if", "noise", "is", "None", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "", "else", ":", "\n", "                ", "noise", "=", "[", "\n", "getattr", "(", "self", ".", "noises", ",", "f\"noise_{i}\"", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "\n", "]", "\n", "\n", "", "", "if", "truncation", "<", "1", ":", "\n", "            ", "style_t", "=", "[", "]", "\n", "\n", "for", "style", "in", "styles", ":", "\n", "                ", "style_t", ".", "append", "(", "\n", "truncation_latent", "+", "truncation", "*", "(", "style", "-", "truncation_latent", ")", "\n", ")", "\n", "\n", "", "styles", "=", "style_t", "\n", "\n", "", "if", "len", "(", "styles", ")", "<", "2", ":", "\n", "            ", "inject_index", "=", "self", ".", "n_latent", "\n", "\n", "if", "styles", "[", "0", "]", ".", "ndim", "<", "3", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "inject_index", "is", "None", ":", "\n", "                ", "inject_index", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_latent", "-", "1", ")", "\n", "\n", "", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "latent2", "=", "styles", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", "-", "inject_index", ",", "1", ")", "\n", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "latent", ",", "latent2", "]", ",", "1", ")", "\n", "# if pdb_set:", "\n", "#     latent = torch.cat((latent,latent),0)", "\n", "\n", "", "out", "=", "self", ".", "input", "(", "latent", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ",", "latent", "[", ":", ",", "0", "]", ",", "noise", "=", "noise", "[", "0", "]", ")", "\n", "import", "pdb", "\n", "# if pdb_set:", "\n", "#     pdb.set_trace()", "\n", "# out.squeeze(1)", "\n", "# pdb.set_trace()", "\n", "skip", "=", "self", ".", "to_rgb1", "(", "out", ",", "latent", "[", ":", ",", "1", "]", ")", "\n", "\n", "i", "=", "1", "\n", "for", "conv1", ",", "conv2", ",", "noise1", ",", "noise2", ",", "to_rgb", "in", "zip", "(", "\n", "self", ".", "convs", "[", ":", ":", "2", "]", ",", "self", ".", "convs", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "2", ":", ":", "2", "]", ",", "self", ".", "to_rgbs", "\n", ")", ":", "\n", "            ", "out", "=", "conv1", "(", "out", ",", "latent", "[", ":", ",", "i", "]", ",", "noise", "=", "noise1", ")", "\n", "out", "=", "conv2", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "1", "]", ",", "noise", "=", "noise2", ")", "\n", "skip", "=", "to_rgb", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "2", "]", ",", "skip", ")", "\n", "\n", "i", "+=", "2", "\n", "\n", "", "image", "=", "skip", "\n", "\n", "if", "return_latents", ":", "\n", "            ", "return", "image", ",", "latent", "\n", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ConvLayer.__init__": [[566, 612], ["layers.append", "torch.nn.Sequential.__init__", "layers.append", "model_stylegan2.EqualConv2d", "model_stylegan2.Blur", "layers.append", "layers.append", "len", "op.FusedLeakyReLU", "model_stylegan2.ScaledLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "bias", "=", "True", ",", "\n", "activate", "=", "True", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "stride", "=", "2", "\n", "self", ".", "padding", "=", "0", "\n", "\n", "", "else", ":", "\n", "            ", "stride", "=", "1", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "\n", "EqualConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "activate", ":", "\n", "            ", "if", "bias", ":", "\n", "                ", "layers", ".", "append", "(", "FusedLeakyReLU", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ResBlock.__init__": [[615, 623], ["torch.nn.Module.__init__", "model_stylegan2.ConvLayer", "model_stylegan2.ConvLayer", "model_stylegan2.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "in_channel", ",", "in_channel", ",", "3", ")", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "3", ",", "downsample", "=", "True", ")", "\n", "\n", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "out_channel", ",", "1", ",", "downsample", "=", "True", ",", "activate", "=", "False", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.ResBlock.forward": [[625, 633], ["model_stylegan2.ResBlock.conv1", "model_stylegan2.ResBlock.conv2", "model_stylegan2.ResBlock.skip", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "out", "=", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Discriminator.__init__": [[636, 673], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "model_stylegan2.ConvLayer", "torch.nn.Sequential", "model_stylegan2.ConvLayer", "math.log", "convs.append", "model_stylegan2.EqualLinear", "model_stylegan2.EqualLinear", "model_stylegan2.ResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "stddev_group", "=", "4", "\n", "self", ".", "stddev_feat", "=", "1", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", "+", "1", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "channels", "[", "4", "]", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channels", "[", "4", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.Discriminator.forward": [[675, 694], ["model_stylegan2.Discriminator.convs", "min", "model_stylegan2.Discriminator.view", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "model_stylegan2.Discriminator.final_conv", "model_stylegan2.Discriminator.view", "model_stylegan2.Discriminator.final_linear", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "group", "=", "min", "(", "batch", ",", "self", ".", "stddev_group", ")", "\n", "stddev", "=", "out", ".", "view", "(", "\n", "group", ",", "-", "1", ",", "self", ".", "stddev_feat", ",", "channel", "//", "self", ".", "stddev_feat", ",", "height", ",", "width", "\n", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "stddev", ".", "var", "(", "0", ",", "unbiased", "=", "False", ")", "+", "1e-8", ")", "\n", "stddev", "=", "stddev", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", ".", "squeeze", "(", "2", ")", "\n", "stddev", "=", "stddev", ".", "repeat", "(", "group", ",", "1", ",", "height", ",", "width", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "stddev", "]", ",", "1", ")", "\n", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model_stylegan2.make_kernel": [[23, 32], ["torch.tensor", "torch.tensor.sum"], "function", ["None"], ["", "", "def", "make_kernel", "(", "k", ")", ":", "\n", "    ", "k", "=", "torch", ".", "tensor", "(", "k", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "if", "k", ".", "ndim", "==", "1", ":", "\n", "        ", "k", "=", "k", "[", "None", ",", ":", "]", "*", "k", "[", ":", ",", "None", "]", "\n", "\n", "", "k", "/=", "k", ".", "sum", "(", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector.noise_regularize": [[16, 37], ["noise.mean.reshape", "noise.mean.mean", "torch.roll", "torch.roll"], "function", ["None"], ["def", "noise_regularize", "(", "noises", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "\n", "for", "noise", "in", "noises", ":", "\n", "        ", "size", "=", "noise", ".", "shape", "[", "2", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "loss", "=", "(", "\n", "loss", "\n", "+", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "3", ")", ")", ".", "mean", "(", ")", ".", "pow", "(", "2", ")", "\n", "+", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "2", ")", ")", ".", "mean", "(", ")", ".", "pow", "(", "2", ")", "\n", ")", "\n", "\n", "if", "size", "<=", "8", ":", "\n", "                ", "break", "\n", "\n", "", "noise", "=", "noise", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "size", "//", "2", ",", "2", ",", "size", "//", "2", ",", "2", "]", ")", "\n", "noise", "=", "noise", ".", "mean", "(", "[", "3", ",", "5", "]", ")", "\n", "size", "//=", "2", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector.noise_normalize_": [[39, 45], ["noise.mean", "noise.std", "noise.data.add_().div_", "noise.data.add_"], "function", ["None"], ["", "def", "noise_normalize_", "(", "noises", ")", ":", "\n", "    ", "for", "noise", "in", "noises", ":", "\n", "        ", "mean", "=", "noise", ".", "mean", "(", ")", "\n", "std", "=", "noise", ".", "std", "(", ")", "\n", "\n", "noise", ".", "data", ".", "add_", "(", "-", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector.get_lr": [[47, 53], ["min", "min", "math.cos"], "function", ["None"], ["", "", "def", "get_lr", "(", "t", ",", "initial_lr", ",", "rampdown", "=", "0.25", ",", "rampup", "=", "0.05", ")", ":", "\n", "    ", "lr_ramp", "=", "min", "(", "1", ",", "(", "1", "-", "t", ")", "/", "rampdown", ")", "\n", "lr_ramp", "=", "0.5", "-", "0.5", "*", "math", ".", "cos", "(", "lr_ramp", "*", "math", ".", "pi", ")", "\n", "lr_ramp", "=", "lr_ramp", "*", "min", "(", "1", ",", "t", "/", "rampup", ")", "\n", "\n", "return", "initial_lr", "*", "lr_ramp", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector.latent_noise": [[55, 59], ["torch.randn_like"], "function", ["None"], ["", "def", "latent_noise", "(", "latent", ",", "strength", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn_like", "(", "latent", ")", "*", "strength", "\n", "\n", "return", "latent", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector.make_image": [[61, 71], ["tensor.detach().clamp_().add().div_().mul().type().permute().to().numpy", "tensor.detach().clamp_().add().div_().mul().type().permute().to", "tensor.detach().clamp_().add().div_().mul().type().permute", "tensor.detach().clamp_().add().div_().mul().type", "tensor.detach().clamp_().add().div_().mul", "tensor.detach().clamp_().add().div_", "tensor.detach().clamp_().add", "tensor.detach().clamp_", "tensor.detach"], "function", ["None"], ["", "def", "make_image", "(", "tensor", ")", ":", "\n", "    ", "return", "(", "\n", "tensor", ".", "detach", "(", ")", "\n", ".", "clamp_", "(", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", ".", "add", "(", "1", ")", "\n", ".", "div_", "(", "2", ")", "\n", ".", "mul", "(", "255", ")", "\n", ".", "type", "(", "torch", ".", "uint8", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", ".", "to", "(", "\"cpu\"", ")", "\n", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.translate_mat": [[25, 33], ["torch.eye().unsqueeze().repeat", "torch.stack", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["def", "translate_mat", "(", "t_x", ",", "t_y", ")", ":", "\n", "    ", "batch", "=", "t_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "translate", "=", "torch", ".", "stack", "(", "(", "t_x", ",", "t_y", ")", ",", "1", ")", "\n", "mat", "[", ":", ",", ":", "2", ",", "2", "]", "=", "translate", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate_mat": [[35, 45], ["torch.eye().unsqueeze().repeat", "torch.sin", "torch.cos", "torch.stack().view", "torch.eye().unsqueeze", "torch.stack", "torch.eye"], "function", ["None"], ["", "def", "rotate_mat", "(", "theta", ")", ":", "\n", "    ", "batch", "=", "theta", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "sin_t", "=", "torch", ".", "sin", "(", "theta", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "rot", "=", "torch", ".", "stack", "(", "(", "cos_t", ",", "-", "sin_t", ",", "sin_t", ",", "cos_t", ")", ",", "1", ")", ".", "view", "(", "batch", ",", "2", ",", "2", ")", "\n", "mat", "[", ":", ",", ":", "2", ",", ":", "2", "]", "=", "rot", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale_mat": [[47, 55], ["torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "scale_mat", "(", "s_x", ",", "s_y", ")", ":", "\n", "    ", "batch", "=", "s_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "mat", "[", ":", ",", "0", ",", "0", "]", "=", "s_x", "\n", "mat", "[", ":", ",", "1", ",", "1", "]", "=", "s_y", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.translate3d_mat": [[57, 65], ["torch.eye().unsqueeze().repeat", "torch.stack", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "translate3d_mat", "(", "t_x", ",", "t_y", ",", "t_z", ")", ":", "\n", "    ", "batch", "=", "t_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "translate", "=", "torch", ".", "stack", "(", "(", "t_x", ",", "t_y", ",", "t_z", ")", ",", "1", ")", "\n", "mat", "[", ":", ",", ":", "3", ",", "3", "]", "=", "translate", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate3d_mat": [[67, 86], ["torch.eye().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.sin().view", "torch.cos().view", "torch.eye().unsqueeze().repeat", "torch.eye", "torch.tensor", "torch.sin", "torch.cos", "torch.eye().unsqueeze", "torch.tensor.unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "rotate3d_mat", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "batch", "=", "theta", ".", "shape", "[", "0", "]", "\n", "\n", "u_x", ",", "u_y", ",", "u_z", "=", "axis", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cross", "=", "torch", ".", "tensor", "(", "[", "(", "0", ",", "-", "u_z", ",", "u_y", ")", ",", "(", "u_z", ",", "0", ",", "-", "u_x", ")", ",", "(", "-", "u_y", ",", "u_x", ",", "0", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "outer", "=", "torch", ".", "tensor", "(", "axis", ")", "\n", "outer", "=", "(", "outer", ".", "unsqueeze", "(", "1", ")", "*", "outer", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sin_t", "=", "torch", ".", "sin", "(", "theta", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "theta", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "rot", "=", "cos_t", "*", "eye", "+", "sin_t", "*", "cross", "+", "(", "1", "-", "cos_t", ")", "*", "outer", "\n", "\n", "eye_4", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "eye_4", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "rot", "\n", "\n", "return", "eye_4", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale3d_mat": [[88, 97], ["torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "scale3d_mat", "(", "s_x", ",", "s_y", ",", "s_z", ")", ":", "\n", "    ", "batch", "=", "s_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "mat", "[", ":", ",", "0", ",", "0", "]", "=", "s_x", "\n", "mat", "[", ":", ",", "1", ",", "1", "]", "=", "s_y", "\n", "mat", "[", ":", ",", "2", ",", "2", "]", "=", "s_z", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.luma_flip_mat": [[99, 107], ["torch.eye().unsqueeze().repeat", "torch.tensor", "i.view", "torch.eye().unsqueeze", "torch.ger", "torch.eye"], "function", ["None"], ["", "def", "luma_flip_mat", "(", "axis", ",", "i", ")", ":", "\n", "    ", "batch", "=", "i", ".", "shape", "[", "0", "]", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "axis", "=", "torch", ".", "tensor", "(", "axis", "+", "(", "0", ",", ")", ")", "\n", "flip", "=", "2", "*", "torch", ".", "ger", "(", "axis", ",", "axis", ")", "*", "i", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "eye", "-", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.saturation_mat": [[109, 118], ["torch.eye().unsqueeze().repeat", "torch.tensor", "torch.ger", "torch.eye().unsqueeze", "i.view", "torch.eye"], "function", ["None"], ["", "def", "saturation_mat", "(", "axis", ",", "i", ")", ":", "\n", "    ", "batch", "=", "i", ".", "shape", "[", "0", "]", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "axis", "=", "torch", ".", "tensor", "(", "axis", "+", "(", "0", ",", ")", ")", "\n", "axis", "=", "torch", ".", "ger", "(", "axis", ",", "axis", ")", "\n", "saturate", "=", "axis", "+", "(", "eye", "-", "axis", ")", "*", "i", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "saturate", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.lognormal_sample": [[120, 122], ["torch.empty().log_normal_", "torch.empty"], "function", ["None"], ["", "def", "lognormal_sample", "(", "size", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "log_normal_", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.category_sample": [[124, 129], ["torch.tensor", "torch.randint", "len"], "function", ["None"], ["", "def", "category_sample", "(", "size", ",", "categories", ")", ":", "\n", "    ", "category", "=", "torch", ".", "tensor", "(", "categories", ")", "\n", "sample", "=", "torch", ".", "randint", "(", "high", "=", "len", "(", "categories", ")", ",", "size", "=", "(", "size", ",", ")", ")", "\n", "\n", "return", "category", "[", "sample", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.uniform_sample": [[131, 133], ["torch.empty().uniform_", "torch.empty", "math.pi", "math.pi", "math.pi"], "function", ["None"], ["", "def", "uniform_sample", "(", "size", ",", "low", ",", "high", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "uniform_", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.normal_sample": [[135, 137], ["torch.empty().normal_", "torch.empty"], "function", ["None"], ["", "def", "normal_sample", "(", "size", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.bernoulli_sample": [[139, 141], ["torch.empty().bernoulli_", "torch.empty"], "function", ["None"], ["", "def", "bernoulli_sample", "(", "size", ",", "p", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "bernoulli_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply": [[143, 149], ["bernoulli_sample().view", "non_leaking.bernoulli_sample"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.bernoulli_sample"], ["", "def", "random_mat_apply", "(", "p", ",", "transform", ",", "prev", ",", "eye", ")", ":", "\n", "    ", "size", "=", "transform", ".", "shape", "[", "0", "]", "\n", "select", "=", "bernoulli_sample", "(", "size", ",", "p", ")", ".", "view", "(", "size", ",", "1", ",", "1", ")", "\n", "select_transform", "=", "select", "*", "transform", "+", "(", "1", "-", "select", ")", "*", "eye", "\n", "\n", "return", "select_transform", "@", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.sample_affine": [[151, 208], ["torch.eye().unsqueeze().repeat", "non_leaking.category_sample", "non_leaking.scale_mat", "non_leaking.random_mat_apply", "non_leaking.category_sample", "non_leaking.rotate_mat", "non_leaking.random_mat_apply", "non_leaking.uniform_sample", "non_leaking.translate_mat", "non_leaking.random_mat_apply", "non_leaking.lognormal_sample", "non_leaking.scale_mat", "non_leaking.random_mat_apply", "non_leaking.uniform_sample", "non_leaking.rotate_mat", "non_leaking.random_mat_apply", "non_leaking.lognormal_sample", "non_leaking.scale_mat", "non_leaking.random_mat_apply", "non_leaking.uniform_sample", "non_leaking.rotate_mat", "non_leaking.random_mat_apply", "non_leaking.normal_sample", "non_leaking.translate_mat", "non_leaking.random_mat_apply", "torch.ones", "torch.round", "torch.round", "math.sqrt", "torch.eye().unsqueeze", "math.log", "math.log", "torch.eye"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.category_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.category_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.uniform_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.translate_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.lognormal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.uniform_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.lognormal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.uniform_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.normal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.translate_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply"], ["", "def", "sample_affine", "(", "p", ",", "size", ",", "height", ",", "width", ")", ":", "\n", "    ", "G", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "size", ",", "1", ",", "1", ")", "\n", "eye", "=", "G", "\n", "\n", "# flip", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "1", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "1", "-", "2.0", "*", "param", ",", "torch", ".", "ones", "(", "size", ")", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('flip', G, scale_mat(1 - 2.0 * param, torch.ones(size)), sep='\\n')", "\n", "\n", "# 90 rotate", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "3", ")", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "math", ".", "pi", "/", "2", "*", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('90 rotate', G, rotate_mat(-math.pi / 2 * param), sep='\\n')", "\n", "\n", "# integer translate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "0.125", ",", "0.125", ")", "\n", "param_height", "=", "torch", ".", "round", "(", "param", "*", "height", ")", "/", "height", "\n", "param_width", "=", "torch", ".", "round", "(", "param", "*", "width", ")", "/", "width", "\n", "Gc", "=", "translate_mat", "(", "param_width", ",", "param_height", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('integer translate', G, translate_mat(param_width, param_height), sep='\\n')", "\n", "\n", "# isotropic scale", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.2", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "param", ",", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('isotropic scale', G, scale_mat(param, param), sep='\\n')", "\n", "\n", "p_rot", "=", "1", "-", "math", ".", "sqrt", "(", "1", "-", "p", ")", "\n", "\n", "# pre-rotate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p_rot", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('pre-rotate', G, rotate_mat(-param), sep='\\n')", "\n", "\n", "# anisotropic scale", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.2", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "param", ",", "1", "/", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('anisotropic scale', G, scale_mat(param, 1 / param), sep='\\n')", "\n", "\n", "# post-rotate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p_rot", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('post-rotate', G, rotate_mat(-param), sep='\\n')", "\n", "\n", "# fractional translate", "\n", "param", "=", "normal_sample", "(", "size", ",", "std", "=", "0.125", ")", "\n", "Gc", "=", "translate_mat", "(", "param", ",", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('fractional translate', G, translate_mat(param, param), sep='\\n')", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.sample_color": [[210, 242], ["torch.eye().unsqueeze().repeat", "non_leaking.normal_sample", "non_leaking.translate3d_mat", "non_leaking.random_mat_apply", "non_leaking.lognormal_sample", "non_leaking.scale3d_mat", "non_leaking.random_mat_apply", "non_leaking.category_sample", "non_leaking.luma_flip_mat", "non_leaking.random_mat_apply", "non_leaking.uniform_sample", "non_leaking.rotate3d_mat", "non_leaking.random_mat_apply", "non_leaking.lognormal_sample", "non_leaking.saturation_mat", "non_leaking.random_mat_apply", "math.sqrt", "torch.eye().unsqueeze", "math.log", "math.log", "torch.eye"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.normal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.translate3d_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.lognormal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.scale3d_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.category_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.luma_flip_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.uniform_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.rotate3d_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.lognormal_sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.saturation_mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_mat_apply"], ["", "def", "sample_color", "(", "p", ",", "size", ")", ":", "\n", "    ", "C", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "size", ",", "1", ",", "1", ")", "\n", "eye", "=", "C", "\n", "axis_val", "=", "1", "/", "math", ".", "sqrt", "(", "3", ")", "\n", "axis", "=", "(", "axis_val", ",", "axis_val", ",", "axis_val", ")", "\n", "\n", "# brightness", "\n", "param", "=", "normal_sample", "(", "size", ",", "std", "=", "0.2", ")", "\n", "Cc", "=", "translate3d_mat", "(", "param", ",", "param", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# contrast", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.5", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Cc", "=", "scale3d_mat", "(", "param", ",", "param", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# luma flip", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "1", ")", ")", "\n", "Cc", "=", "luma_flip_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# hue rotation", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Cc", "=", "rotate3d_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# saturation", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "1", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Cc", "=", "saturation_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.make_grid": [[244, 252], ["torch.empty", "torch.linspace", "torch.linspace().unsqueeze", "torch.linspace"], "function", ["None"], ["", "def", "make_grid", "(", "shape", ",", "x0", ",", "x1", ",", "y0", ",", "y1", ",", "device", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "shape", "\n", "grid", "=", "torch", ".", "empty", "(", "n", ",", "h", ",", "w", ",", "3", ",", "device", "=", "device", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "linspace", "(", "x0", ",", "x1", ",", "w", ",", "device", "=", "device", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "linspace", "(", "y0", ",", "y1", ",", "h", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "1", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.affine_grid": [[254, 257], ["grid.view", "mat.transpose"], "function", ["None"], ["", "def", "affine_grid", "(", "grid", ",", "mat", ")", ":", "\n", "    ", "n", ",", "h", ",", "w", ",", "_", "=", "grid", ".", "shape", "\n", "return", "(", "grid", ".", "view", "(", "n", ",", "h", "*", "w", ",", "3", ")", "@", "mat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "n", ",", "h", ",", "w", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.get_padding": [[259, 286], ["torch.tensor", "torch.tensor().t", "torch.tensor", "extreme.max", "extreme.min"], "function", ["None"], ["", "def", "get_padding", "(", "G", ",", "height", ",", "width", ")", ":", "\n", "    ", "extreme", "=", "(", "\n", "G", "[", ":", ",", ":", "2", ",", ":", "]", "\n", "@", "torch", ".", "tensor", "(", "[", "(", "-", "1.0", ",", "-", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ",", "1", ")", ",", "(", "1", ",", "-", "1", ",", "1", ")", ",", "(", "1", ",", "1", ",", "1", ")", "]", ")", ".", "t", "(", ")", "\n", ")", "\n", "\n", "size", "=", "torch", ".", "tensor", "(", "(", "width", ",", "height", ")", ")", "\n", "\n", "pad_low", "=", "(", "\n", "(", "(", "extreme", ".", "min", "(", "-", "1", ")", ".", "values", "+", "1", ")", "*", "size", ")", "\n", ".", "clamp", "(", "max", "=", "0", ")", "\n", ".", "abs", "(", ")", "\n", ".", "ceil", "(", ")", "\n", ".", "max", "(", "0", ")", "\n", ".", "values", ".", "to", "(", "torch", ".", "int64", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "pad_high", "=", "(", "\n", "(", "extreme", ".", "max", "(", "-", "1", ")", ".", "values", "*", "size", "-", "size", ")", "\n", ".", "clamp", "(", "min", "=", "0", ")", "\n", ".", "ceil", "(", ")", "\n", ".", "max", "(", "0", ")", "\n", ".", "values", ".", "to", "(", "torch", ".", "int64", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "return", "pad_low", "[", "0", "]", ",", "pad_high", "[", "0", "]", ",", "pad_low", "[", "1", "]", ",", "pad_high", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.try_sample_affine_and_pad": [[288, 314], ["non_leaking.get_padding", "non_leaking.sample_affine", "torch.inverse", "torch.nn.functional.pad"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.get_padding", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.sample_affine"], ["", "def", "try_sample_affine_and_pad", "(", "img", ",", "p", ",", "pad_k", ",", "G", "=", "None", ")", ":", "\n", "    ", "batch", ",", "_", ",", "height", ",", "width", "=", "img", ".", "shape", "\n", "\n", "G_try", "=", "G", "\n", "\n", "while", "True", ":", "\n", "        ", "if", "G", "is", "None", ":", "\n", "            ", "G_try", "=", "sample_affine", "(", "p", ",", "batch", ",", "height", ",", "width", ")", "\n", "\n", "", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", "=", "get_padding", "(", "\n", "torch", ".", "inverse", "(", "G_try", ")", ",", "height", ",", "width", "\n", ")", "\n", "\n", "try", ":", "\n", "            ", "img_pad", "=", "F", ".", "pad", "(", "\n", "img", ",", "\n", "(", "pad_x1", "+", "pad_k", ",", "pad_x2", "+", "pad_k", ",", "pad_y1", "+", "pad_k", ",", "pad_y2", "+", "pad_k", ")", ",", "\n", "mode", "=", "\"reflect\"", ",", "\n", ")", "\n", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "continue", "\n", "\n", "", "break", "\n", "\n", "", "return", "img_pad", ",", "G_try", ",", "(", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_apply_affine": [[316, 372], ["len", "torch.as_tensor", "torch.ger().to", "torch.flip", "non_leaking.try_sample_affine_and_pad", "op.upfirdn2d", "make_grid().to", "non_leaking.affine_grid", "torch.nn.functional.grid_sample", "op.upfirdn2d", "[].to", "torch.tensor", "torch.ger", "non_leaking.make_grid", "torch.tensor", "torch.inverse"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.try_sample_affine_and_pad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.affine_grid", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.make_grid"], ["", "def", "random_apply_affine", "(", "img", ",", "p", ",", "G", "=", "None", ",", "antialiasing_kernel", "=", "SYM6", ")", ":", "\n", "    ", "kernel", "=", "antialiasing_kernel", "\n", "len_k", "=", "len", "(", "kernel", ")", "\n", "pad_k", "=", "(", "len_k", "+", "1", ")", "//", "2", "\n", "\n", "kernel", "=", "torch", ".", "as_tensor", "(", "kernel", ")", "\n", "kernel", "=", "torch", ".", "ger", "(", "kernel", ",", "kernel", ")", ".", "to", "(", "img", ")", "\n", "kernel_flip", "=", "torch", ".", "flip", "(", "kernel", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "img_pad", ",", "G", ",", "(", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", ")", "=", "try_sample_affine_and_pad", "(", "\n", "img", ",", "p", ",", "pad_k", ",", "G", "\n", ")", "\n", "\n", "p_ux1", "=", "pad_x1", "\n", "p_ux2", "=", "pad_x2", "+", "1", "\n", "p_uy1", "=", "pad_y1", "\n", "p_uy2", "=", "pad_y2", "+", "1", "\n", "w_p", "=", "img_pad", ".", "shape", "[", "3", "]", "-", "len_k", "+", "1", "\n", "h_p", "=", "img_pad", ".", "shape", "[", "2", "]", "-", "len_k", "+", "1", "\n", "h_o", "=", "img", ".", "shape", "[", "2", "]", "\n", "w_o", "=", "img", ".", "shape", "[", "3", "]", "\n", "\n", "img_2x", "=", "upfirdn2d", "(", "img_pad", ",", "kernel_flip", ",", "up", "=", "2", ")", "\n", "\n", "grid", "=", "make_grid", "(", "\n", "img_2x", ".", "shape", ",", "\n", "-", "2", "*", "p_ux1", "/", "w_o", "-", "1", ",", "\n", "2", "*", "(", "w_p", "-", "p_ux1", ")", "/", "w_o", "-", "1", ",", "\n", "-", "2", "*", "p_uy1", "/", "h_o", "-", "1", ",", "\n", "2", "*", "(", "h_p", "-", "p_uy1", ")", "/", "h_o", "-", "1", ",", "\n", "device", "=", "img_2x", ".", "device", ",", "\n", ")", ".", "to", "(", "img_2x", ")", "\n", "grid", "=", "affine_grid", "(", "grid", ",", "torch", ".", "inverse", "(", "G", ")", "[", ":", ",", ":", "2", ",", ":", "]", ".", "to", "(", "img_2x", ")", ")", "\n", "grid", "=", "grid", "*", "torch", ".", "tensor", "(", "\n", "[", "w_o", "/", "w_p", ",", "h_o", "/", "h_p", "]", ",", "device", "=", "grid", ".", "device", "\n", ")", "+", "torch", ".", "tensor", "(", "\n", "[", "(", "w_o", "+", "2", "*", "p_ux1", ")", "/", "w_p", "-", "1", ",", "(", "h_o", "+", "2", "*", "p_uy1", ")", "/", "h_p", "-", "1", "]", ",", "device", "=", "grid", ".", "device", "\n", ")", "\n", "\n", "img_affine", "=", "F", ".", "grid_sample", "(", "\n", "img_2x", ",", "grid", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ",", "padding_mode", "=", "\"zeros\"", "\n", ")", "\n", "\n", "img_down", "=", "upfirdn2d", "(", "img_affine", ",", "kernel", ",", "down", "=", "2", ")", "\n", "\n", "end_y", "=", "-", "pad_y2", "-", "1", "\n", "if", "end_y", "==", "0", ":", "\n", "        ", "end_y", "=", "img_down", ".", "shape", "[", "2", "]", "\n", "\n", "", "end_x", "=", "-", "pad_x2", "-", "1", "\n", "if", "end_x", "==", "0", ":", "\n", "        ", "end_x", "=", "img_down", ".", "shape", "[", "3", "]", "\n", "\n", "", "img", "=", "img_down", "[", ":", ",", ":", ",", "pad_y1", ":", "end_y", ",", "pad_x1", ":", "end_x", "]", "\n", "\n", "return", "img", ",", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.apply_color": [[374, 383], ["img.permute.permute", "mat[].transpose().view", "mat[].view", "img.permute.permute", "mat[].transpose"], "function", ["None"], ["", "def", "apply_color", "(", "img", ",", "mat", ")", ":", "\n", "    ", "batch", "=", "img", ".", "shape", "[", "0", "]", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "mat_mul", "=", "mat", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "batch", ",", "1", ",", "3", ",", "3", ")", "\n", "mat_add", "=", "mat", "[", ":", ",", ":", "3", ",", "3", "]", ".", "view", "(", "batch", ",", "1", ",", "1", ",", "3", ")", "\n", "img", "=", "img", "@", "mat_mul", "+", "mat_add", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_apply_color": [[385, 392], ["non_leaking.apply_color", "non_leaking.sample_color", "sample_color.to"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.apply_color", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.sample_color"], ["", "def", "random_apply_color", "(", "img", ",", "p", ",", "C", "=", "None", ")", ":", "\n", "    ", "if", "C", "is", "None", ":", "\n", "        ", "C", "=", "sample_color", "(", "p", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "img", "=", "apply_color", "(", "img", ",", "C", ".", "to", "(", "img", ")", ")", "\n", "\n", "return", "img", ",", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.augment": [[394, 399], ["non_leaking.random_apply_affine", "non_leaking.random_apply_color"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_apply_affine", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.random_apply_color"], ["", "def", "augment", "(", "img", ",", "p", ",", "transform_matrix", "=", "(", "None", ",", "None", ")", ")", ":", "\n", "    ", "img", ",", "G", "=", "random_apply_affine", "(", "img", ",", "p", ",", "transform_matrix", "[", "0", "]", ")", "\n", "img", ",", "C", "=", "random_apply_color", "(", "img", ",", "p", ",", "transform_matrix", "[", "1", "]", ")", "\n", "\n", "return", "img", ",", "(", "G", ",", "C", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.generate.generate": [[7, 22], ["torch.no_grad", "g_ema.eval", "tqdm.tqdm", "range", "torch.randn", "g_ema", "torchvision.utils.save_image", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["def", "generate", "(", "args", ",", "g_ema", ",", "device", ",", "mean_latent", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "g_ema", ".", "eval", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "args", ".", "pics", ")", ")", ":", "\n", "           ", "sample_z", "=", "torch", ".", "randn", "(", "args", ".", "sample", ",", "args", ".", "latent", ",", "device", "=", "device", ")", "\n", "\n", "sample", ",", "_", "=", "g_ema", "(", "[", "sample_z", "]", ",", "truncation", "=", "args", ".", "truncation", ",", "truncation_latent", "=", "mean_latent", ")", "\n", "\n", "utils", ".", "save_image", "(", "\n", "sample", ",", "\n", "f'sample/{str(i).zfill(6)}.png'", ",", "\n", "nrow", "=", "1", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank": [[9, 17], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank"], ["def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.synchronize": [[19, 32], ["torch.distributed.get_world_size", "torch.distributed.barrier", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size": [[34, 42], ["torch.distributed.get_world_size", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_sum": [[44, 55], ["tensor.clone.clone", "torch.distributed.all_reduce", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.clone"], ["", "def", "reduce_sum", "(", "tensor", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.gather_grad": [[57, 67], ["distributed.get_world_size", "torch.distributed.all_reduce", "param.grad.data.div_"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size"], ["", "def", "gather_grad", "(", "params", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "for", "param", "in", "params", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "param", ".", "grad", ".", "data", ".", "div_", "(", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.all_gather": [[69, 102], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.distributed.all_gather", "max", "torch.distributed.all_gather", "zip", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.all_gather", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.all_gather"], ["", "", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "'cuda'", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "'cuda'", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "'cuda'", ")", ")", "\n", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "0", ")", "\n", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_loss_dict": [[104, 127], ["distributed.get_world_size", "torch.no_grad", "sorted", "torch.stack", "torch.distributed.reduce", "loss_dict.keys", "keys.append", "torch.stack.append", "torch.distributed.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "keys", ".", "append", "(", "k", ")", "\n", "losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "\n", "", "losses", "=", "torch", ".", "stack", "(", "losses", ",", "0", ")", "\n", "dist", ".", "reduce", "(", "losses", ",", "dst", "=", "0", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "losses", "/=", "world_size", "\n", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "losses", ")", "}", "\n", "\n", "", "return", "reduced_losses", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.InceptionV3.__init__": [[31, 128], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.InceptionV3.forward": [[129, 164], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionA.__init__": [[195, 197], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionA.forward": [[198, 216], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionC.__init__": [[220, 222], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionC.forward": [[223, 244], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionE_1.__init__": [[248, 250], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionE_1.forward": [[251, 277], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionE_2.__init__": [[281, 283], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.FIDInceptionE_2.forward": [[284, 311], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.inception.fid_inception_v3": [[166, 191], ["torchvision.models.inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.ppl.normalize": [[12, 14], ["torch.sqrt", "x.pow().sum", "x.pow"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "torch", ".", "sqrt", "(", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.ppl.slerp": [[16, 25], ["ppl.normalize", "ppl.normalize", "ppl.normalize", "ppl.normalize", "torch.acos", "torch.cos", "torch.sin"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize"], ["", "def", "slerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "a", "=", "normalize", "(", "a", ")", "\n", "b", "=", "normalize", "(", "b", ")", "\n", "d", "=", "(", "a", "*", "b", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "p", "=", "t", "*", "torch", ".", "acos", "(", "d", ")", "\n", "c", "=", "normalize", "(", "b", "-", "d", "*", "a", ")", "\n", "d", "=", "a", "*", "torch", ".", "cos", "(", "p", ")", "+", "c", "*", "torch", ".", "sin", "(", "p", ")", "\n", "\n", "return", "normalize", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.ppl.lerp": [[27, 29], ["None"], "function", ["None"], ["", "def", "lerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.data_sampler": [[33, 42], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["\n", "\n", "class", "MyDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "list_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "f", "=", "open", "(", "list_file", ",", "\"r\"", ")", "\n", "self", ".", "data_lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad": [[44, 47], ["model.parameters"], "function", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "print", "(", "'yes'", ")", "\n", "idx", "=", "idx", ".", "tolist", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.accumulate": [[49, 55], ["dict", "dict", "dict.keys", "model1.named_parameters", "model2.named_parameters", "par1[].data.mul_().add_", "par1[].data.mul_"], "function", ["None"], ["if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "return", "image", "\n", "\n", "\n", "", "", "def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.sample_data": [[57, 61], ["None"], "function", ["None"], ["        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_logistic_loss": [[63, 68], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "F.softplus.mean", "F.softplus.mean"], "function", ["None"], ["        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "\n", "", "", "def", "requires_grad", "(", "model", ",", "flag", "=", "True", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "flag", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_r1_loss": [[70, 77], ["torch.autograd.grad", "grad_real.pow().reshape().sum().mean", "real_pred.sum", "grad_real.pow().reshape().sum", "grad_real.pow().reshape", "grad_real.pow"], "function", ["None"], ["\n", "", "", "def", "accumulate", "(", "model1", ",", "model2", ",", "decay", "=", "0.999", ")", ":", "\n", "    ", "par1", "=", "dict", "(", "model1", ".", "named_parameters", "(", ")", ")", "\n", "par2", "=", "dict", "(", "model2", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "k", "in", "par1", ".", "keys", "(", ")", ":", "\n", "        ", "par1", "[", "k", "]", ".", "data", ".", "mul_", "(", "decay", ")", ".", "add_", "(", "par2", "[", "k", "]", ".", "data", ",", "alpha", "=", "1", "-", "decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_nonsaturating_loss": [[79, 83], ["torch.nn.functional.softplus().mean", "torch.nn.functional.softplus"], "function", ["None"], ["", "", "def", "sample_data", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_path_regularize": [[85, 99], ["torch.autograd.grad", "torch.sqrt", "torch.sqrt", "torch.randn_like", "torch.randn_like", "math.sqrt", "grad.pow().sum().mean", "path_mean.detach", "grad.pow().sum", "torch.sqrt.mean", "grad.pow"], "function", ["None"], ["", "", "", "def", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", ":", "\n", "    ", "real_loss", "=", "F", ".", "softplus", "(", "-", "real_pred", ")", "\n", "fake_loss", "=", "F", ".", "softplus", "(", "fake_pred", ")", "\n", "\n", "return", "real_loss", ".", "mean", "(", ")", "+", "fake_loss", ".", "mean", "(", ")", "\n", "\n", "\n", "", "def", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", ":", "\n", "    ", "(", "grad_real", ",", ")", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "real_pred", ".", "sum", "(", ")", ",", "inputs", "=", "real_img", ",", "create_graph", "=", "True", "\n", ")", "\n", "grad_penalty", "=", "grad_real", ".", "pow", "(", "2", ")", ".", "reshape", "(", "grad_real", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.make_noise": [[101, 108], ["torch.randn().unbind", "torch.randn().unbind", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "function", ["None"], ["", "def", "g_nonsaturating_loss", "(", "fake_pred", ")", ":", "\n", "    ", "loss", "=", "F", ".", "softplus", "(", "-", "fake_pred", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n", "\n", "", "def", "set_grad_none", "(", "model", ",", "targets", ")", ":", "\n", "    ", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.mixing_noise": [[110, 116], ["train.make_noise", "random.random", "train.make_noise"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.make_noise", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.make_noise"], ["            ", "p", ".", "grad", "=", "None", "\n", "\n", "\n", "", "", "", "def", "patchify_image", "(", "img", ",", "n_crop", ",", "min_size", "=", "1", "/", "8", ",", "max_size", "=", "1", "/", "4", ")", ":", "\n", "    ", "crop_size1", "=", "torch", ".", "rand", "(", "n_crop", ")", "*", "(", "max_size", "-", "min_size", ")", "+", "min_size", "\n", "crop_size2", "=", "torch", ".", "rand", "(", "n_crop", ")", "*", "(", "max_size", "-", "min_size", ")", "+", "min_size", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "img", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.set_grad_none": [[118, 122], ["model.named_parameters"], "function", ["None"], ["        ", "max_size", "=", "max_size", "*", "2", "\n", "", "elif", "height", "==", "512", "or", "height", "==", "1024", ":", "\n", "# print(height)", "\n", "        ", "max_size", "=", "max_size", "*", "1", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.train": [[124, 336], ["train.sample_data", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.randn", "torch.randn", "distributed.get_rank", "tqdm.tqdm", "next", "real_img.to.to", "train.requires_grad", "train.requires_grad", "train.mixing_noise", "generator", "discriminator", "discriminator", "train.d_logistic_loss", "discriminator.mean", "discriminator.mean", "discriminator.zero_grad", "d_logistic_loss.backward", "d_optim.step", "train.requires_grad", "train.requires_grad", "train.mixing_noise", "generator", "discriminator", "train.g_nonsaturating_loss", "generator.zero_grad", "g_nonsaturating_loss.backward", "g_optim.step", "torch.tensor.mean", "train.accumulate", "distributed.reduce_loss_dict", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "print", "non_leaking.augment", "non_leaking.augment", "torch.tensor", "torch.tensor", "distributed.reduce_sum", "discriminator", "train.d_r1_loss", "discriminator.zero_grad", "d_optim.step", "non_leaking.augment", "max", "train.mixing_noise", "generator", "train.g_path_regularize", "generator.zero_grad", "weighted_path_loss.backward", "g_optim.step", "distributed.get_rank", "tqdm.tqdm.set_description", "distributed.reduce_sum.tolist", "min", "distributed.reduce_sum.mul_", "distributed.reduce_sum().item", "distributed.get_world_size", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "wandb.log", "torch.save", "torch.save", "torch.sign().sum().item", "torch.sign().sum().item", "max", "torch.no_grad", "torch.no_grad", "g_ema.eval", "g_ema", "torchvision.utils.save_image", "distributed.reduce_sum", "g_module.state_dict", "d_module.state_dict", "g_ema.state_dict", "g_optim.state_dict", "d_optim.state_dict", "torch.sign().sum", "torch.sign().sum", "int", "str().zfill", "str().zfill", "torch.sign", "torch.sign", "str", "str"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.sample_data", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.mixing_noise", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_logistic_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.requires_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.mixing_noise", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_nonsaturating_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.accumulate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.augment", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.augment", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_sum", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.d_r1_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.augment", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.mixing_noise", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.train.g_path_regularize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_rank", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.get_world_size", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_sum"], ["", "target_h", "=", "int", "(", "height", "*", "max_size", ")", "\n", "target_w", "=", "int", "(", "width", "*", "max_size", ")", "\n", "crop_h", "=", "(", "crop_size1", "*", "height", ")", ".", "type", "(", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "crop_w", "=", "(", "crop_size2", "*", "width", ")", ".", "type", "(", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "\n", "patches", "=", "[", "]", "\n", "for", "c_h", ",", "c_w", "in", "zip", "(", "crop_h", ",", "crop_w", ")", ":", "\n", "        ", "c_y", "=", "random", ".", "randrange", "(", "0", ",", "height", "-", "c_h", ")", "\n", "c_x", "=", "random", ".", "randrange", "(", "0", ",", "width", "-", "c_w", ")", "\n", "\n", "cropped", "=", "img", "[", ":", ",", ":", ",", "c_y", ":", "c_y", "+", "c_h", ",", "c_x", ":", "c_x", "+", "c_w", "]", "\n", "cropped", "=", "F", ".", "interpolate", "(", "\n", "cropped", ",", "size", "=", "(", "target_h", ",", "target_w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "\n", "patches", ".", "append", "(", "cropped", ")", "\n", "\n", "", "patches", "=", "torch", ".", "stack", "(", "patches", ",", "1", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "target_h", ",", "target_w", ")", "\n", "\n", "return", "patches", "\n", "\n", "\n", "", "def", "train", "(", "\n", "args", ",", "\n", "loader", ",", "\n", "encoder", ",", "\n", "generator", ",", "\n", "discriminator", ",", "\n", "cooccur", ",", "\n", "g_optim", ",", "\n", "d_optim", ",", "\n", "e_ema", ",", "\n", "g_ema", ",", "\n", "device", ",", "\n", ")", ":", "\n", "\n", "    ", "gauss_kernel", "=", "get_gaussian_kernel", "(", "args", ".", "gauss_size", ")", ".", "cuda", "(", ")", "\n", "mask_h", ",", "mask_l", "=", "decide_circle", "(", "r", "=", "args", ".", "radius", ",", "N", "=", "int", "(", "args", ".", "batch", "/", "2", ")", ",", "L", "=", "args", ".", "size", ")", "\n", "mask_h", ",", "mask_l", "=", "mask_h", ".", "cuda", "(", ")", ",", "mask_l", ".", "cuda", "(", ")", "\n", "\n", "loader", "=", "sample_data", "(", "loader", ")", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "'sample_'", "+", "str", "(", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'checkpoint_'", "+", "str", "(", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "pbar", "=", "range", "(", "args", ".", "iter", ")", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "pbar", ",", "initial", "=", "args", ".", "start_iter", ",", "dynamic_ncols", "=", "True", ",", "smoothing", "=", "0.01", ")", "\n", "\n", "", "d_loss_val", "=", "0", "\n", "r1_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "g_loss_val", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "e_module", "=", "encoder", ".", "module", "\n", "g_module", "=", "generator", ".", "module", "\n", "d_module", "=", "discriminator", ".", "module", "\n", "c_module", "=", "cooccur", ".", "module", "\n", "\n", "", "else", ":", "\n", "        ", "e_module", "=", "encoder", "\n", "g_module", "=", "generator", "\n", "d_module", "=", "discriminator", "\n", "c_module", "=", "cooccur", "\n", "\n", "", "accum", "=", "0.5", "**", "(", "32", "/", "(", "10", "*", "1000", ")", ")", "\n", "\n", "for", "idx", "in", "pbar", ":", "\n", "        ", "i", "=", "idx", "+", "args", ".", "start_iter", "\n", "\n", "if", "i", ">", "args", ".", "iter", ":", "\n", "            ", "print", "(", "\"Done!\"", ")", "\n", "\n", "break", "\n", "\n", "", "real_img", "=", "next", "(", "loader", ")", "\n", "real_img", "=", "real_img", ".", "to", "(", "device", ")", "\n", "real_img_freq", "=", "find_fake_freq", "(", "real_img", ",", "gauss_kernel", ")", "\n", "# pdb.set_trace()", "\n", "\n", "requires_grad", "(", "encoder", ",", "False", ")", "\n", "requires_grad", "(", "generator", ",", "False", ")", "\n", "requires_grad", "(", "discriminator", ",", "True", ")", "\n", "requires_grad", "(", "cooccur", ",", "True", ")", "\n", "\n", "real_img1", ",", "real_img2", "=", "real_img", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "real_img_freq1", ",", "real_img2_freq", "=", "real_img_freq", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "structure1", ",", "texture1", "=", "encoder", "(", "real_img1", ")", "\n", "_", ",", "texture2", "=", "encoder", "(", "real_img2", ")", "\n", "\n", "fake_img1", "=", "generator", "(", "structure1", ",", "texture1", ")", "\n", "fake_img2", "=", "generator", "(", "structure1", ",", "texture2", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "torch", ".", "cat", "(", "(", "fake_img1", ",", "fake_img2", ")", ",", "0", ")", ")", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "d_loss", "=", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", "\n", "\n", "fake_img2_freq", "=", "find_fake_freq", "(", "fake_img2", ",", "gauss_kernel", ")", "\n", "fake_patch", "=", "patchify_image", "(", "fake_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "real_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "ref_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "ref_crop", "*", "args", ".", "n_crop", ")", "\n", "fake_patch_pred", ",", "ref_input", "=", "cooccur", "(", "\n", "fake_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", "\n", ")", "\n", "real_patch_pred", ",", "_", "=", "cooccur", "(", "real_patch", ",", "ref_input", "=", "ref_input", ")", "\n", "cooccur_loss", "=", "d_logistic_loss", "(", "real_patch_pred", ",", "fake_patch_pred", ")", "\n", "\n", "\n", "\n", "loss_dict", "[", "\"d\"", "]", "=", "d_loss", "\n", "loss_dict", "[", "\"cooccur\"", "]", "=", "cooccur_loss", "\n", "loss_dict", "[", "\"real_score\"", "]", "=", "real_pred", ".", "mean", "(", ")", "\n", "fake_pred1", ",", "fake_pred2", "=", "fake_pred", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "loss_dict", "[", "\"fake_score\"", "]", "=", "fake_pred1", ".", "mean", "(", ")", "\n", "loss_dict", "[", "\"hybrid_score\"", "]", "=", "fake_pred2", ".", "mean", "(", ")", "\n", "\n", "d_optim", ".", "zero_grad", "(", ")", "\n", "(", "d_loss", "+", "cooccur_loss", ")", ".", "backward", "(", ")", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "d_regularize", "=", "i", "%", "args", ".", "d_reg_every", "==", "0", "\n", "\n", "if", "d_regularize", ":", "\n", "            ", "real_img", ".", "requires_grad", "=", "True", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "r1_loss", "=", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", "\n", "\n", "real_patch", ".", "requires_grad", "=", "True", "\n", "real_patch_pred", ",", "_", "=", "cooccur", "(", "real_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", ")", "\n", "cooccur_r1_loss", "=", "d_r1_loss", "(", "real_patch_pred", ",", "real_patch", ")", "\n", "\n", "d_optim", ".", "zero_grad", "(", ")", "\n", "\n", "r1_loss_sum", "=", "args", ".", "r1", "/", "2", "*", "r1_loss", "*", "args", ".", "d_reg_every", "\n", "r1_loss_sum", "+=", "args", ".", "cooccur_r1", "/", "2", "*", "cooccur_r1_loss", "*", "args", ".", "d_reg_every", "\n", "r1_loss_sum", "+=", "0", "*", "real_pred", "[", "0", ",", "0", "]", "+", "0", "*", "real_patch_pred", "[", "0", ",", "0", "]", "\n", "r1_loss_sum", ".", "backward", "(", ")", "\n", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "", "loss_dict", "[", "\"r1\"", "]", "=", "r1_loss", "\n", "loss_dict", "[", "\"cooccur_r1\"", "]", "=", "cooccur_r1_loss", "\n", "\n", "requires_grad", "(", "encoder", ",", "True", ")", "\n", "requires_grad", "(", "generator", ",", "True", ")", "\n", "requires_grad", "(", "discriminator", ",", "False", ")", "\n", "requires_grad", "(", "cooccur", ",", "False", ")", "\n", "\n", "real_img", ".", "requires_grad", "=", "False", "\n", "\n", "structure1", ",", "texture1", "=", "encoder", "(", "real_img1", ")", "\n", "_", ",", "texture2", "=", "encoder", "(", "real_img2", ")", "\n", "\n", "\n", "fake_img1", "=", "generator", "(", "structure1", ",", "texture1", ")", "\n", "fake_img2", "=", "generator", "(", "structure1", ",", "texture2", ")", "\n", "\n", "recon_loss", "=", "F", ".", "l1_loss", "(", "fake_img1", ",", "real_img1", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "torch", ".", "cat", "(", "(", "fake_img1", ",", "fake_img2", ")", ",", "0", ")", ")", "\n", "g_loss", "=", "g_nonsaturating_loss", "(", "fake_pred", ")", "\n", "\n", "fake_img2_freq", "=", "find_fake_freq", "(", "fake_img2", ",", "gauss_kernel", ")", "\n", "fake_patch", "=", "patchify_image", "(", "fake_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "n_crop", ")", "\n", "ref_patch", "=", "patchify_image", "(", "real_img2_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "args", ".", "ref_crop", "*", "args", ".", "n_crop", ")", "\n", "fake_patch_pred", ",", "_", "=", "cooccur", "(", "fake_patch", ",", "ref_patch", ",", "ref_batch", "=", "args", ".", "ref_crop", ")", "\n", "g_cooccur_loss", "=", "g_nonsaturating_loss", "(", "fake_patch_pred", ")", "\n", "\n", "\n", "fake_img1_freq", "=", "find_fake_freq", "(", "fake_img1", ",", "gauss_kernel", ")", "\n", "\n", "recon_freq_loss_img1_low", "=", "F", ".", "l1_loss", "(", "fake_img1_freq", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "recon_freq_loss_img1_high", "=", "F", ".", "l1_loss", "(", "fake_img1_freq", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ")", "\n", "\n", "recon_fft", "=", "fft_L1_loss_color", "(", "fake_img1", ",", "real_img1", ")", "\n", "recon_freq_loss_img1", "=", "args", ".", "w_low_recon", "*", "recon_freq_loss_img1_low", "+", "args", ".", "w_high_recon", "*", "recon_freq_loss_img1_high", "\n", "recon_freq_loss_img2_structure", "=", "F", ".", "l1_loss", "(", "fake_img2_freq", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "real_img_freq1", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ")", "\n", "fft_swap_H", "=", "fft_L1_loss_mask", "(", "fake_img2", ",", "real_img1", ",", "mask_h", ")", "\n", "\n", "loss_dict", "[", "\"recon\"", "]", "=", "recon_loss", "\n", "loss_dict", "[", "\"g\"", "]", "=", "g_loss", "\n", "loss_dict", "[", "\"g_cooccur\"", "]", "=", "g_cooccur_loss", "\n", "loss_dict", "[", "\"rec_F1_H\"", "]", "=", "recon_freq_loss_img1_high", "\n", "loss_dict", "[", "\"rec_F1_L\"", "]", "=", "recon_freq_loss_img1_low", "\n", "loss_dict", "[", "\"rec_F2_H\"", "]", "=", "recon_freq_loss_img2_structure", "\n", "\n", "g_optim", ".", "zero_grad", "(", ")", "\n", "(", "recon_loss", "+", "g_loss", "+", "g_cooccur_loss", "+", "recon_freq_loss_img1", "+", "args", ".", "w_high_recon", "*", "recon_freq_loss_img2_structure", "\n", "+", "args", ".", "w_recon_fft", "*", "recon_fft", "+", "args", ".", "w_fft_swap_H", "*", "fft_swap_H", ")", ".", "backward", "(", ")", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "accumulate", "(", "e_ema", ",", "e_module", ",", "accum", ")", "\n", "accumulate", "(", "g_ema", ",", "g_module", ",", "accum", ")", "\n", "\n", "loss_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "d_loss_val", "=", "loss_reduced", "[", "\"d\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "cooccur_val", "=", "loss_reduced", "[", "\"cooccur\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "recon_val", "=", "loss_reduced", "[", "\"recon\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_loss_val", "=", "loss_reduced", "[", "\"g\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_cooccur_val", "=", "loss_reduced", "[", "\"g_cooccur\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "r1_val", "=", "loss_reduced", "[", "\"r1\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "cooccur_r1_val", "=", "loss_reduced", "[", "\"cooccur_r1\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F1_H", "=", "loss_reduced", "[", "\"rec_F1_H\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F1_L", "=", "loss_reduced", "[", "\"rec_F1_L\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "rec_F2_H", "=", "loss_reduced", "[", "\"rec_F2_H\"", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "set_description", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.dataset.MultiResolutionDataset.__init__": [[8, 26], ["lmdb.open", "IOError", "dataset.MultiResolutionDataset.env.begin", "int", "txn.get().decode", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", ",", "resolution", "=", "256", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "\n", "max_readers", "=", "32", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ",", "\n", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "raise", "IOError", "(", "'Cannot open lmdb dataset'", ",", "path", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "int", "(", "txn", ".", "get", "(", "'length'", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.dataset.MultiResolutionDataset.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.dataset.MultiResolutionDataset.__getitem__": [[30, 40], ["io.BytesIO", "PIL.Image.open", "dataset.MultiResolutionDataset.transform", "dataset.MultiResolutionDataset.env.begin", "txn.get", "str().zfill", "str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "key", "=", "f'{self.resolution}-{str(index).zfill(5)}'", ".", "encode", "(", "'utf-8'", ")", "\n", "img_bytes", "=", "txn", ".", "get", "(", "key", ")", "\n", "\n", "", "buffer", "=", "BytesIO", "(", "img_bytes", ")", "\n", "img", "=", "Image", ".", "open", "(", "buffer", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.calc_inception.Inception3Feature.forward": [[19, 49], ["calc_inception.Inception3Feature.Conv2d_1a_3x3", "calc_inception.Inception3Feature.Conv2d_2a_3x3", "calc_inception.Inception3Feature.Conv2d_2b_3x3", "torch.nn.functional.max_pool2d", "calc_inception.Inception3Feature.Conv2d_3b_1x1", "calc_inception.Inception3Feature.Conv2d_4a_3x3", "torch.nn.functional.max_pool2d", "calc_inception.Inception3Feature.Mixed_5b", "calc_inception.Inception3Feature.Mixed_5c", "calc_inception.Inception3Feature.Mixed_5d", "calc_inception.Inception3Feature.Mixed_6a", "calc_inception.Inception3Feature.Mixed_6b", "calc_inception.Inception3Feature.Mixed_6c", "calc_inception.Inception3Feature.Mixed_6d", "calc_inception.Inception3Feature.Mixed_6e", "calc_inception.Inception3Feature.Mixed_7a", "calc_inception.Inception3Feature.Mixed_7b", "calc_inception.Inception3Feature.Mixed_7c", "torch.nn.functional.avg_pool2d", "torch.nn.functional.interpolate.view", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "2", "]", "!=", "299", "or", "x", ".", "shape", "[", "3", "]", "!=", "299", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "# 299 x 299 x 3", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "# 149 x 149 x 32", "\n", "x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "# 147 x 147 x 32", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "# 147 x 147 x 64", "\n", "\n", "x", "=", "self", ".", "Conv2d_3b_1x1", "(", "x", ")", "# 73 x 73 x 64", "\n", "x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "# 73 x 73 x 80", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "# 71 x 71 x 192", "\n", "\n", "x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "# 35 x 35 x 192", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "# 35 x 35 x 256", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "# 35 x 35 x 288", "\n", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "# 35 x 35 x 288", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "# 17 x 17 x 768", "\n", "\n", "x", "=", "self", ".", "Mixed_7a", "(", "x", ")", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_7b", "(", "x", ")", "# 8 x 8 x 1280", "\n", "x", "=", "self", ".", "Mixed_7c", "(", "x", ")", "# 8 x 8 x 2048", "\n", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "8", ")", "# 8 x 8 x 2048", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", "# 1 x 1 x 2048", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.calc_inception.load_patched_inception_v3": [[51, 58], ["inception.InceptionV3"], "function", ["None"], ["", "", "def", "load_patched_inception_v3", "(", ")", ":", "\n", "# inception = inception_v3(pretrained=True)", "\n", "# inception_feat = Inception3Feature()", "\n", "# inception_feat.load_state_dict(inception.state_dict())", "\n", "    ", "inception_feat", "=", "InceptionV3", "(", "[", "3", "]", ",", "normalize_input", "=", "False", ")", "\n", "\n", "return", "inception_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.calc_inception.extract_features": [[60, 74], ["torch.no_grad", "tqdm.tqdm", "torch.cat", "img.to.to", "[].view", "feature_list.append", "[].view.to", "inception"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_features", "(", "loader", ",", "inception", ",", "device", ")", ":", "\n", "    ", "pbar", "=", "tqdm", "(", "loader", ")", "\n", "\n", "feature_list", "=", "[", "]", "\n", "\n", "for", "img", "in", "pbar", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "feature", "=", "inception", "(", "img", ")", "[", "0", "]", ".", "view", "(", "img", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "feature_list", ".", "append", "(", "feature", ".", "to", "(", "'cpu'", ")", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "feature_list", ",", "0", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.PixelNorm.__init__": [[16, 18], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "2", "*", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.PixelNorm.forward": [[19, 21], ["torch.rsqrt", "torch.mean"], "methods", ["None"], [")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Upsample.__init__": [[35, 48], ["torch.nn.Module.__init__", "model.Upsample.register_buffer", "model.make_kernel"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], [")", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "in_channel", "*", "kernel_size", "**", "2", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv_transpose2d", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Upsample.forward": [[49, 53], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["input", ",", "\n", "self", ".", "weight", "*", "self", ".", "scale", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Downsample.__init__": [[56, 69], ["torch.nn.Module.__init__", "model.make_kernel", "model.Downsample.register_buffer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], ["return", "out", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}({self.weight.shape[0]}, {self.weight.shape[1]},\"", "\n", "f\" {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})\"", "\n", ")", "\n", "\n", "\n", "", "", "class", "ConvLayer", "(", "nn", ".", "Sequential", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Downsample.forward": [[70, 74], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["kernel_size", ",", "\n", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Blur.__init__": [[77, 88], ["torch.nn.Module.__init__", "model.make_kernel", "model.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel"], [")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "self", ".", "padding", "=", "0", "\n", "stride", "=", "1", "\n", "\n", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Blur.forward": [[89, 93], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "stride", "=", "2", "\n", "\n", "", "if", "upsample", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualConv2d.__init__": [[96, 114], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "+", "1", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "downsample", ":", "\n", "                ", "if", "padding", "==", "\"zero\"", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualConv2d.forward": [[115, 125], ["torch.nn.functional.conv2d"], "methods", ["None"], ["                    ", "self", ".", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "elif", "padding", "==", "\"reflect\"", ":", "\n", "                    ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "if", "padding", ">", "0", ":", "\n", "                        ", "layers", ".", "append", "(", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ")", "\n", "\n", "", "self", ".", "padding", "=", "0", "\n", "\n", "", "elif", "padding", "!=", "\"valid\"", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualConv2d.__repr__": [[126, 129], ["None"], "methods", ["None"], ["                    ", "raise", "ValueError", "(", "'Padding should be \"zero\", \"reflect\", or \"valid\"'", ")", "\n", "\n", "", "", "layers", ".", "append", "(", "\n", "EqualConv2d", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualLinear.__init__": [[134, 151], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn().div_", "torch.nn.Parameter", "torch.zeros().fill_", "math.sqrt", "torch.randn", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["stride", "=", "stride", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "activate", ":", "\n", "            ", "if", "bias", ":", "\n", "                ", "layers", ".", "append", "(", "FusedLeakyReLU", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n", "\n", "", "", "class", "StyledResBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "style_dim", ",", "upsample", ",", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualLinear.forward": [[152, 163], ["torch.nn.functional.linear", "op.fused_leaky_relu", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.fused_leaky_relu"], [")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.EqualLinear.__repr__": [[164, 167], ["None"], "methods", ["None"], ["\n", "self", ".", "conv2", "=", "StyledConv", "(", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ")", "\n", "\n", "if", "upsample", "or", "in_channel", "!=", "out_channel", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ScaledLeakyReLU.__init__": [[171, 175], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["1", ",", "\n", "upsample", "=", "False", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ScaledLeakyReLU.forward": [[176, 180], ["torch.nn.functional.leaky_relu", "math.sqrt"], "methods", ["None"], [")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ModulatedConv2d.__init__": [[183, 230], ["torch.nn.Module.__init__", "torch.nn.Parameter", "model.EqualLinear", "model.Blur", "model.Blur", "math.sqrt", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["out", "=", "self", ".", "conv2", "(", "out", ",", "style", ",", "noise", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "                ", "skip", "=", "F", ".", "interpolate", "(", "skip", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "skip", "=", "input", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "\n", "", "", "class", "ResBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "downsample", ",", "\n", "padding", "=", "\"zero\"", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "3", ",", "padding", "=", "padding", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "\n", "out_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "downsample", "=", "downsample", ",", "\n", "padding", "=", "padding", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "\n", "if", "downsample", "or", "in_channel", "!=", "out_channel", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "1", ",", "\n", "downsample", "=", "downsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ModulatedConv2d.__repr__": [[231, 234], ["None"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ModulatedConv2d.forward": [[237, 279], ["model.ModulatedConv2d.modulation().view", "weight.transpose().reshape.transpose().reshape.view", "torch.rsqrt", "input.view.view.view", "weight.transpose().reshape.transpose().reshape.view", "weight.transpose().reshape.transpose().reshape.transpose().reshape", "torch.nn.functional.conv_transpose2d", "out.view.view.view", "model.ModulatedConv2d.blur", "model.ModulatedConv2d.modulation", "torch.rsqrt.view", "model.ModulatedConv2d.blur", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "weight.transpose().reshape.transpose().reshape.pow().sum", "weight.transpose().reshape.transpose().reshape.transpose", "weight.transpose().reshape.transpose().reshape.pow"], "methods", ["None"], ["            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "\n", "", "else", ":", "\n", "            ", "skip", "=", "input", "\n", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "\n", "", "", "class", "Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "stem", "=", "[", "ConvLayer", "(", "3", ",", "channel", ",", "1", ")", "]", "\n", "\n", "in_channel", "=", "channel", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "ch", "=", "channel", "*", "(", "2", "**", "i", ")", "\n", "stem", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "ch", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ")", "\n", "in_channel", "=", "ch", "\n", "\n", "", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "*", "stem", ")", "\n", "\n", "self", ".", "se_layer", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "in_channel", ")", "\n", ")", "\n", "\n", "out_channel", "=", "channel", "*", "(", "2", "**", "4", ")", "\n", "self", ".", "structure", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", ",", "1", ")", ",", "ConvLayer", "(", "out_channel", ",", "structure_channel", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "texture", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", "*", "2", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", "*", "2", ",", "out_channel", "*", "4", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.NoiseInjection.__init__": [[282, 286], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["EqualLinear", "(", "out_channel", "*", "4", ",", "out_channel", "*", "4", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "stem", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.NoiseInjection.forward": [[287, 293], ["image.new_empty().normal_", "image.new_empty"], "methods", ["None"], ["out_structure", ",", "out_texture", "=", "self", ".", "se_layer", "(", "out", ")", "\n", "structure", "=", "self", ".", "structure", "(", "out_structure", ")", "\n", "texture", "=", "torch", ".", "flatten", "(", "self", ".", "texture", "(", "out_texture", ")", ",", "1", ")", "\n", "\n", "return", "structure", ",", "texture", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ConstantInput.__init__": [[296, 300], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ConstantInput.forward": [[301, 306], ["model.ConstantInput.input.repeat"], "methods", ["None"], [")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ch_multiplier", "=", "(", "4", ",", "8", ",", "16", ",", "16", ",", "8", ",", "4", ")", "\n", "upsample", "=", "(", "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.StyledConv.__init__": [[309, 335], ["torch.nn.Module.__init__", "model.ModulatedConv2d", "model.NoiseInjection", "op.FusedLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["for", "ch_mul", ",", "up", "in", "zip", "(", "ch_multiplier", ",", "upsample", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "\n", "StyledResBlock", "(", "\n", "in_ch", ",", "channel", "*", "ch_mul", ",", "texture_channel", ",", "up", ",", "blur_kernel", "\n", ")", "\n", ")", "\n", "in_ch", "=", "channel", "*", "ch_mul", "\n", "\n", "", "self", ".", "to_rgb", "=", "ConvLayer", "(", "in_ch", ",", "3", ",", "1", ",", "activate", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "structure", ",", "texture", ",", "noises", "=", "None", ")", ":", "\n", "        ", "if", "noises", "is", "None", ":", "\n", "            ", "noises", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layers", ")", "\n", "\n", "", "out", "=", "structure", "\n", "for", "layer", ",", "noise", "in", "zip", "(", "self", ".", "layers", ",", "noises", ")", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "texture", ",", "noise", ")", "\n", "\n", "", "out", "=", "self", ".", "to_rgb", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.StyledConv.forward": [[336, 343], ["model.StyledConv.conv", "model.StyledConv.noise", "model.StyledConv.activate"], "methods", ["None"], ["channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ToRGB.__init__": [[346, 354], ["torch.nn.Module.__init__", "model.ModulatedConv2d", "torch.nn.Parameter", "model.Upsample", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ToRGB.forward": [[355, 365], ["model.ToRGB.conv", "model.ToRGB.upsample"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.upsample"], ["            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "channels", "[", "4", "]", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.__init__": [[368, 452], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "model.ConstantInput", "model.StyledConv", "model.ToRGB", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "range", "range", "model.PixelNorm", "layers.append", "math.log", "model.Generator.noises.register_buffer", "model.Generator.convs.append", "model.Generator.convs.append", "model.Generator.to_rgbs.append", "model.EqualLinear", "torch.randn", "model.StyledConv", "model.StyledConv", "model.ToRGB"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "CooccurDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "channel", ",", "size", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder", "=", "[", "ConvLayer", "(", "3", ",", "channel", ",", "1", ")", "]", "\n", "\n", "ch_multiplier", "=", "(", "2", ",", "4", ",", "8", ",", "12", ",", "12", ",", "24", ")", "\n", "downsample", "=", "(", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", ")", "\n", "if", "size", "==", "1024", ":", "\n", "            ", "downsample", "=", "(", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "", "in_ch", "=", "channel", "\n", "for", "ch_mul", ",", "down", "in", "zip", "(", "ch_multiplier", ",", "downsample", ")", ":", "\n", "            ", "encoder", ".", "append", "(", "ResBlock", "(", "in_ch", ",", "channel", "*", "ch_mul", ",", "down", ")", ")", "\n", "in_ch", "=", "channel", "*", "ch_mul", "\n", "\n", "", "if", "size", ">", "511", ":", "\n", "            ", "k_size", "=", "3", "\n", "feat_size", "=", "2", "*", "2", "\n", "\n", "", "else", ":", "\n", "            ", "k_size", "=", "3", "\n", "feat_size", "=", "2", "*", "2", "\n", "\n", "", "encoder", ".", "append", "(", "ConvLayer", "(", "in_ch", ",", "channel", "*", "12", ",", "k_size", ",", "padding", "=", "\"valid\"", ")", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "\n", "channel", "*", "12", "*", "2", "*", "feat_size", ",", "channel", "*", "32", ",", "activation", "=", "\"fused_lrelu\"", "\n", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "32", ",", "channel", "*", "32", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "32", ",", "channel", "*", "16", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channel", "*", "16", ",", "1", ")", ",", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "reference", "=", "None", ",", "ref_batch", "=", "None", ",", "ref_input", "=", "None", ")", ":", "\n", "        ", "out_input", "=", "self", ".", "encoder", "(", "input", ")", "\n", "if", "ref_input", "is", "None", ":", "\n", "            ", "ref_input", "=", "self", ".", "encoder", "(", "reference", ")", "\n", "_", ",", "channel", ",", "height", ",", "width", "=", "ref_input", ".", "shape", "\n", "ref_input", "=", "ref_input", ".", "view", "(", "-", "1", ",", "ref_batch", ",", "channel", ",", "height", ",", "width", ")", "\n", "ref_input", "=", "ref_input", ".", "mean", "(", "1", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "out_input", ",", "ref_input", ")", ",", "1", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", ",", "ref_input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.make_noise": [[453, 463], ["range", "torch.randn", "range", "noises.append", "torch.randn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.mean_latent": [[464, 471], ["torch.randn", "model.Generator.style().mean", "model.Generator.style"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.get_latent": [[472, 474], ["model.Generator.style"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Generator.forward": [[475, 559], ["model.Generator.input", "model.Generator.conv1", "model.Generator.to_rgb1", "zip", "len", "styles[].unsqueeze().repeat", "styles[].unsqueeze().repeat", "torch.cat", "conv1", "conv2", "to_rgb", "model.Generator.style", "model.Generator.style", "style_t.append", "styles[].unsqueeze().repeat", "random.randint", "torch.cat", "[].unsqueeze", "[].unsqueeze", "getattr", "styles[].unsqueeze", "styles[].unsqueeze", "range", "styles[].unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ConvLayer.__init__": [[562, 608], ["layers.append", "torch.nn.Sequential.__init__", "layers.append", "model.EqualConv2d", "model.Blur", "layers.append", "layers.append", "len", "op.FusedLeakyReLU", "model.ScaledLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ResBlock.__init__": [[611, 619], ["torch.nn.Module.__init__", "model.ConvLayer", "model.ConvLayer", "model.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.ResBlock.forward": [[621, 629], ["model.ResBlock.conv1", "model.ResBlock.conv2", "model.ResBlock.skip", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Discriminator.__init__": [[632, 669], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "model.ConvLayer", "torch.nn.Sequential", "model.ConvLayer", "math.log", "convs.append", "model.EqualLinear", "model.EqualLinear", "model.ResBlock"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.Discriminator.forward": [[671, 690], ["model.Discriminator.convs", "min", "model.Discriminator.view", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "model.Discriminator.final_conv", "model.Discriminator.view", "model.Discriminator.final_linear", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.model.make_kernel": [[23, 32], ["torch.tensor", "torch.tensor.sum"], "function", ["None"], ["y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "2", "*", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", ",", "x", "*", "y", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", "\n", "\n", "", "", "class", "EqualConvTranspose2d", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector_2.noise_regularize": [[17, 38], ["noise.mean.reshape", "noise.mean.mean", "torch.roll", "torch.roll"], "function", ["None"], ["def", "noise_regularize", "(", "noises", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "\n", "for", "noise", "in", "noises", ":", "\n", "        ", "size", "=", "noise", ".", "shape", "[", "2", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "loss", "=", "(", "\n", "loss", "\n", "+", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "3", ")", ")", ".", "mean", "(", ")", ".", "pow", "(", "2", ")", "\n", "+", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "2", ")", ")", ".", "mean", "(", ")", ".", "pow", "(", "2", ")", "\n", ")", "\n", "\n", "if", "size", "<=", "8", ":", "\n", "                ", "break", "\n", "\n", "", "noise", "=", "noise", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "size", "//", "2", ",", "2", ",", "size", "//", "2", ",", "2", "]", ")", "\n", "noise", "=", "noise", ".", "mean", "(", "[", "3", ",", "5", "]", ")", "\n", "size", "//=", "2", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector_2.noise_normalize_": [[40, 46], ["noise.mean", "noise.std", "noise.data.add_().div_", "noise.data.add_"], "function", ["None"], ["", "def", "noise_normalize_", "(", "noises", ")", ":", "\n", "    ", "for", "noise", "in", "noises", ":", "\n", "        ", "mean", "=", "noise", ".", "mean", "(", ")", "\n", "std", "=", "noise", ".", "std", "(", ")", "\n", "\n", "noise", ".", "data", ".", "add_", "(", "-", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector_2.get_lr": [[48, 54], ["min", "min", "math.cos"], "function", ["None"], ["", "", "def", "get_lr", "(", "t", ",", "initial_lr", ",", "rampdown", "=", "0.25", ",", "rampup", "=", "0.05", ")", ":", "\n", "    ", "lr_ramp", "=", "min", "(", "1", ",", "(", "1", "-", "t", ")", "/", "rampdown", ")", "\n", "lr_ramp", "=", "0.5", "-", "0.5", "*", "math", ".", "cos", "(", "lr_ramp", "*", "math", ".", "pi", ")", "\n", "lr_ramp", "=", "lr_ramp", "*", "min", "(", "1", ",", "t", "/", "rampup", ")", "\n", "\n", "return", "initial_lr", "*", "lr_ramp", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector_2.latent_noise": [[56, 60], ["torch.randn_like"], "function", ["None"], ["", "def", "latent_noise", "(", "latent", ",", "strength", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn_like", "(", "latent", ")", "*", "strength", "\n", "\n", "return", "latent", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.projector_2.make_image": [[62, 72], ["tensor.detach().clamp_().add().div_().mul().type().permute().to().numpy", "tensor.detach().clamp_().add().div_().mul().type().permute().to", "tensor.detach().clamp_().add().div_().mul().type().permute", "tensor.detach().clamp_().add().div_().mul().type", "tensor.detach().clamp_().add().div_().mul", "tensor.detach().clamp_().add().div_", "tensor.detach().clamp_().add", "tensor.detach().clamp_", "tensor.detach"], "function", ["None"], ["", "def", "make_image", "(", "tensor", ")", ":", "\n", "    ", "return", "(", "\n", "tensor", ".", "detach", "(", ")", "\n", ".", "clamp_", "(", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", ".", "add", "(", "1", ")", "\n", ".", "div_", "(", "2", ")", "\n", ".", "mul", "(", "255", ")", "\n", ".", "type", "(", "torch", ".", "uint8", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", ".", "to", "(", "\"cpu\"", ")", "\n", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.resize_and_convert": [[13, 21], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.center_crop", "io.BytesIO", "trans_fn.center_crop.save", "io.BytesIO.getvalue"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.center_crop", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["def", "resize_and_convert", "(", "img", ",", "size", ",", "resample", ",", "quality", "=", "100", ")", ":", "\n", "    ", "img", "=", "trans_fn", ".", "resize", "(", "img", ",", "size", ",", "resample", ")", "\n", "img", "=", "trans_fn", ".", "center_crop", "(", "img", ",", "size", ")", "\n", "buffer", "=", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "buffer", ",", "format", "=", "'jpeg'", ",", "quality", "=", "quality", ")", "\n", "val", "=", "buffer", ".", "getvalue", "(", ")", "\n", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.resize_multiple": [[23, 30], ["imgs.append", "prepare_data.resize_and_convert"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.resize_and_convert"], ["", "def", "resize_multiple", "(", "img", ",", "sizes", "=", "(", "128", ",", "256", ",", "512", ",", "1024", ")", ",", "resample", "=", "Image", ".", "LANCZOS", ",", "quality", "=", "100", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "imgs", ".", "append", "(", "resize_and_convert", "(", "img", ",", "size", ",", "resample", ",", "quality", ")", ")", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.resize_worker": [[32, 39], ["PIL.Image.open", "img.convert.convert", "prepare_data.resize_multiple"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.resize_multiple"], ["", "def", "resize_worker", "(", "img_file", ",", "sizes", ",", "resample", ")", ":", "\n", "    ", "i", ",", "file", "=", "img_file", "\n", "img", "=", "Image", ".", "open", "(", "file", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "out", "=", "resize_multiple", "(", "img", ",", "sizes", "=", "sizes", ",", "resample", "=", "resample", ")", "\n", "\n", "return", "i", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.prepare_data.prepare": [[41, 60], ["functools.partial", "sorted", "multiprocessing.Pool", "tqdm.tqdm", "enumerate", "pool.imap_unordered", "zip", "env.begin", "txn.put", "str().encode", "env.begin", "txn.put", "str", "str().zfill", "str"], "function", ["None"], ["", "def", "prepare", "(", "env", ",", "dataset", ",", "n_worker", ",", "sizes", "=", "(", "128", ",", "256", ",", "512", ",", "1024", ")", ",", "resample", "=", "Image", ".", "LANCZOS", ")", ":", "\n", "    ", "resize_fn", "=", "partial", "(", "resize_worker", ",", "sizes", "=", "sizes", ",", "resample", "=", "resample", ")", "\n", "\n", "files", "=", "sorted", "(", "dataset", ".", "imgs", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "files", "=", "[", "(", "i", ",", "file", ")", "for", "i", ",", "(", "file", ",", "label", ")", "in", "enumerate", "(", "files", ")", "]", "\n", "total", "=", "0", "\n", "\n", "with", "multiprocessing", ".", "Pool", "(", "n_worker", ")", "as", "pool", ":", "\n", "        ", "for", "i", ",", "imgs", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "resize_fn", ",", "files", ")", ")", ":", "\n", "            ", "for", "size", ",", "img", "in", "zip", "(", "sizes", ",", "imgs", ")", ":", "\n", "                ", "key", "=", "f'{size}-{str(i).zfill(5)}'", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "                    ", "txn", ".", "put", "(", "key", ",", "img", ")", "\n", "\n", "", "", "total", "+=", "1", "\n", "\n", "", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "            ", "txn", ".", "put", "(", "'length'", ".", "encode", "(", "'utf-8'", ")", ",", "str", "(", "total", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_modconv": [[14, 40], ["vars[].value().eval", "vars[].value().eval", "vars[].value().eval", "vars[].value().eval", "vars[].value().eval", "dic.items", "numpy.expand_dims", "vars[].value().eval.transpose", "numpy.array", "torch.from_numpy", "torch.flip", "vars[].value", "vars[].value", "vars[].value", "vars[].value", "vars[].value", "vars[].value().eval.transpose"], "function", ["None"], ["def", "convert_modconv", "(", "vars", ",", "source_name", ",", "target_name", ",", "flip", "=", "False", ")", ":", "\n", "    ", "weight", "=", "vars", "[", "source_name", "+", "\"/weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "mod_weight", "=", "vars", "[", "source_name", "+", "\"/mod_weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "mod_bias", "=", "vars", "[", "source_name", "+", "\"/mod_bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "noise", "=", "vars", "[", "source_name", "+", "\"/noise_strength\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "bias", "=", "vars", "[", "source_name", "+", "\"/bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "\n", "dic", "=", "{", "\n", "\"conv.weight\"", ":", "np", ".", "expand_dims", "(", "weight", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ",", "0", ")", ",", "\n", "\"conv.modulation.weight\"", ":", "mod_weight", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ",", "\n", "\"conv.modulation.bias\"", ":", "mod_bias", "+", "1", ",", "\n", "\"noise.weight\"", ":", "np", ".", "array", "(", "[", "noise", "]", ")", ",", "\n", "\"activate.bias\"", ":", "bias", ",", "\n", "}", "\n", "\n", "dic_torch", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "dic_torch", "[", "target_name", "+", "\".\"", "+", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "\n", "", "if", "flip", ":", "\n", "        ", "dic_torch", "[", "target_name", "+", "\".conv.weight\"", "]", "=", "torch", ".", "flip", "(", "\n", "dic_torch", "[", "target_name", "+", "\".conv.weight\"", "]", ",", "[", "3", ",", "4", "]", "\n", ")", "\n", "\n", "", "return", "dic_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv": [[42, 58], ["vars[].value().eval", "torch.from_numpy", "vars[].value().eval.transpose", "vars[].value().eval", "torch.from_numpy", "vars[].value", "vars[].value"], "function", ["None"], ["", "def", "convert_conv", "(", "vars", ",", "source_name", ",", "target_name", ",", "bias", "=", "True", ",", "start", "=", "0", ")", ":", "\n", "    ", "weight", "=", "vars", "[", "source_name", "+", "\"/weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "\n", "dic", "=", "{", "\"weight\"", ":", "weight", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "}", "\n", "\n", "if", "bias", ":", "\n", "        ", "dic", "[", "\"bias\"", "]", "=", "vars", "[", "source_name", "+", "\"/bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "\n", "", "dic_torch", "=", "{", "}", "\n", "\n", "dic_torch", "[", "target_name", "+", "f\".{start}.weight\"", "]", "=", "torch", ".", "from_numpy", "(", "dic", "[", "\"weight\"", "]", ")", "\n", "\n", "if", "bias", ":", "\n", "        ", "dic_torch", "[", "target_name", "+", "f\".{start + 1}.bias\"", "]", "=", "torch", ".", "from_numpy", "(", "dic", "[", "\"bias\"", "]", ")", "\n", "\n", "", "return", "dic_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_torgb": [[60, 79], ["vars[].value().eval", "vars[].value().eval", "vars[].value().eval", "vars[].value().eval", "dic.items", "numpy.expand_dims", "vars[].value().eval.transpose", "vars[].value().eval.reshape", "torch.from_numpy", "vars[].value", "vars[].value", "vars[].value", "vars[].value", "vars[].value().eval.transpose"], "function", ["None"], ["", "def", "convert_torgb", "(", "vars", ",", "source_name", ",", "target_name", ")", ":", "\n", "    ", "weight", "=", "vars", "[", "source_name", "+", "\"/weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "mod_weight", "=", "vars", "[", "source_name", "+", "\"/mod_weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "mod_bias", "=", "vars", "[", "source_name", "+", "\"/mod_bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "bias", "=", "vars", "[", "source_name", "+", "\"/bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "\n", "dic", "=", "{", "\n", "\"conv.weight\"", ":", "np", ".", "expand_dims", "(", "weight", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ",", "0", ")", ",", "\n", "\"conv.modulation.weight\"", ":", "mod_weight", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ",", "\n", "\"conv.modulation.bias\"", ":", "mod_bias", "+", "1", ",", "\n", "\"bias\"", ":", "bias", ".", "reshape", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "}", "\n", "\n", "dic_torch", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "dic_torch", "[", "target_name", "+", "\".\"", "+", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "\n", "", "return", "dic_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_dense": [[81, 93], ["vars[].value().eval", "vars[].value().eval", "dic.items", "vars[].value().eval.transpose", "torch.from_numpy", "vars[].value", "vars[].value"], "function", ["None"], ["", "def", "convert_dense", "(", "vars", ",", "source_name", ",", "target_name", ")", ":", "\n", "    ", "weight", "=", "vars", "[", "source_name", "+", "\"/weight\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "bias", "=", "vars", "[", "source_name", "+", "\"/bias\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", "\n", "dic", "=", "{", "\"weight\"", ":", "weight", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ",", "\"bias\"", ":", "bias", "}", "\n", "\n", "dic_torch", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "dic_torch", "[", "target_name", "+", "\".\"", "+", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "\n", "", "return", "dic_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.update": [[95, 104], ["new.items", "KeyError", "ValueError"], "function", ["None"], ["", "def", "update", "(", "state_dict", ",", "new", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "new", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "state_dict", ":", "\n", "            ", "raise", "KeyError", "(", "k", "+", "\" is not found\"", ")", "\n", "\n", "", "if", "v", ".", "shape", "!=", "state_dict", "[", "k", "]", ".", "shape", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Shape mismatch: {v.shape} vs {state_dict[k].shape}\"", ")", "\n", "\n", "", "state_dict", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.discriminator_fill_statedict": [[106, 138], ["int", "convert_weight.update", "range", "convert_weight.update", "convert_weight.update", "convert_weight.update", "math.log", "convert_weight.convert_conv", "convert_weight.update", "convert_weight.update", "convert_weight.update", "convert_weight.convert_conv", "convert_weight.convert_dense", "convert_weight.convert_dense", "convert_weight.convert_conv", "convert_weight.convert_conv", "convert_weight.convert_conv"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_dense", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_dense", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_conv"], ["", "", "def", "discriminator_fill_statedict", "(", "statedict", ",", "vars", ",", "size", ")", ":", "\n", "    ", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "update", "(", "statedict", ",", "convert_conv", "(", "vars", ",", "f\"{size}x{size}/FromRGB\"", ",", "\"convs.0\"", ")", ")", "\n", "\n", "conv_i", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "log_size", "-", "2", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "reso", "=", "4", "*", "2", "**", "i", "\n", "update", "(", "\n", "statedict", ",", "\n", "convert_conv", "(", "vars", ",", "f\"{reso}x{reso}/Conv0\"", ",", "f\"convs.{conv_i}.conv1\"", ")", ",", "\n", ")", "\n", "update", "(", "\n", "statedict", ",", "\n", "convert_conv", "(", "\n", "vars", ",", "f\"{reso}x{reso}/Conv1_down\"", ",", "f\"convs.{conv_i}.conv2\"", ",", "start", "=", "1", "\n", ")", ",", "\n", ")", "\n", "update", "(", "\n", "statedict", ",", "\n", "convert_conv", "(", "\n", "vars", ",", "f\"{reso}x{reso}/Skip\"", ",", "f\"convs.{conv_i}.skip\"", ",", "start", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", "\n", "conv_i", "+=", "1", "\n", "\n", "", "update", "(", "statedict", ",", "convert_conv", "(", "vars", ",", "f\"4x4/Conv\"", ",", "\"final_conv\"", ")", ")", "\n", "update", "(", "statedict", ",", "convert_dense", "(", "vars", ",", "f\"4x4/Dense0\"", ",", "\"final_linear.0\"", ")", ")", "\n", "update", "(", "statedict", ",", "convert_dense", "(", "vars", ",", "f\"Output\"", ",", "\"final_linear.1\"", ")", ")", "\n", "\n", "return", "statedict", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.fill_statedict": [[140, 198], ["int", "range", "convert_weight.update", "convert_weight.update", "range", "convert_weight.update", "range", "range", "math.log", "convert_weight.update", "convert_weight.convert_torgb", "convert_weight.update", "convert_weight.convert_modconv", "convert_weight.update", "convert_weight.update", "convert_weight.update", "convert_weight.convert_dense", "torch.from_numpy", "convert_weight.convert_torgb", "convert_weight.convert_modconv", "convert_weight.convert_modconv", "vars[].value().eval", "torch.from_numpy", "vars[].value().eval", "vars[].value", "vars[].value"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_torgb", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_modconv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_dense", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_torgb", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_modconv", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.convert_weight.convert_modconv"], ["", "def", "fill_statedict", "(", "state_dict", ",", "vars", ",", "size", ")", ":", "\n", "    ", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "update", "(", "state_dict", ",", "convert_dense", "(", "vars", ",", "f\"G_mapping/Dense{i}\"", ",", "f\"style.{i + 1}\"", ")", ")", "\n", "\n", "", "update", "(", "\n", "state_dict", ",", "\n", "{", "\n", "\"input.input\"", ":", "torch", ".", "from_numpy", "(", "\n", "vars", "[", "\"G_synthesis/4x4/Const/const\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "update", "(", "state_dict", ",", "convert_torgb", "(", "vars", ",", "\"G_synthesis/4x4/ToRGB\"", ",", "\"to_rgb1\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "log_size", "-", "2", ")", ":", "\n", "        ", "reso", "=", "4", "*", "2", "**", "(", "i", "+", "1", ")", "\n", "update", "(", "\n", "state_dict", ",", "\n", "convert_torgb", "(", "vars", ",", "f\"G_synthesis/{reso}x{reso}/ToRGB\"", ",", "f\"to_rgbs.{i}\"", ")", ",", "\n", ")", "\n", "\n", "", "update", "(", "state_dict", ",", "convert_modconv", "(", "vars", ",", "\"G_synthesis/4x4/Conv\"", ",", "\"conv1\"", ")", ")", "\n", "\n", "conv_i", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "log_size", "-", "2", ")", ":", "\n", "        ", "reso", "=", "4", "*", "2", "**", "(", "i", "+", "1", ")", "\n", "update", "(", "\n", "state_dict", ",", "\n", "convert_modconv", "(", "\n", "vars", ",", "\n", "f\"G_synthesis/{reso}x{reso}/Conv0_up\"", ",", "\n", "f\"convs.{conv_i}\"", ",", "\n", "flip", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", "update", "(", "\n", "state_dict", ",", "\n", "convert_modconv", "(", "\n", "vars", ",", "f\"G_synthesis/{reso}x{reso}/Conv1\"", ",", "f\"convs.{conv_i + 1}\"", "\n", ")", ",", "\n", ")", "\n", "conv_i", "+=", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "(", "log_size", "-", "2", ")", "*", "2", "+", "1", ")", ":", "\n", "        ", "update", "(", "\n", "state_dict", ",", "\n", "{", "\n", "f\"noises.noise_{i}\"", ":", "torch", ".", "from_numpy", "(", "\n", "vars", "[", "f\"G_synthesis/noise{i}\"", "]", ".", "value", "(", ")", ".", "eval", "(", ")", "\n", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.fid.extract_feature_from_samples": [[14, 32], ["torch.no_grad", "tqdm.tqdm", "torch.cat", "torch.randn", "g", "[].view", "torch.cat.append", "[].view.to", "inception"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_feature_from_samples", "(", "\n", "generator", ",", "inception", ",", "truncation", ",", "truncation_latent", ",", "batch_size", ",", "n_sample", ",", "device", "\n", ")", ":", "\n", "    ", "n_batch", "=", "n_sample", "//", "batch_size", "\n", "resid", "=", "n_sample", "-", "(", "n_batch", "*", "batch_size", ")", "\n", "batch_sizes", "=", "[", "batch_size", "]", "*", "n_batch", "+", "[", "resid", "]", "\n", "features", "=", "[", "]", "\n", "\n", "for", "batch", "in", "tqdm", "(", "batch_sizes", ")", ":", "\n", "        ", "latent", "=", "torch", ".", "randn", "(", "batch", ",", "512", ",", "device", "=", "device", ")", "\n", "img", ",", "_", "=", "g", "(", "[", "latent", "]", ",", "truncation", "=", "truncation", ",", "truncation_latent", "=", "truncation_latent", ")", "\n", "feat", "=", "inception", "(", "img", ")", "[", "0", "]", ".", "view", "(", "img", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "features", ".", "append", "(", "feat", ".", "to", "(", "'cpu'", ")", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "0", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.fid.calc_fid": [[34, 58], ["scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.trace", "numpy.trace", "numpy.isfinite", "numpy.abs", "numpy.diagonal"], "function", ["None"], ["", "def", "calc_fid", "(", "sample_mean", ",", "sample_cov", ",", "real_mean", ",", "real_cov", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "cov_sqrt", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sample_cov", "@", "real_cov", ",", "disp", "=", "False", ")", "\n", "\n", "if", "not", "np", ".", "isfinite", "(", "cov_sqrt", ")", ".", "all", "(", ")", ":", "\n", "        ", "print", "(", "'product of cov matrices is singular'", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sample_cov", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "cov_sqrt", "=", "linalg", ".", "sqrtm", "(", "(", "sample_cov", "+", "offset", ")", "@", "(", "real_cov", "+", "offset", ")", ")", "\n", "\n", "", "if", "np", ".", "iscomplexobj", "(", "cov_sqrt", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "cov_sqrt", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "cov_sqrt", ".", "imag", ")", ")", "\n", "\n", "raise", "ValueError", "(", "f'Imaginary component {m}'", ")", "\n", "\n", "", "cov_sqrt", "=", "cov_sqrt", ".", "real", "\n", "\n", "", "mean_diff", "=", "sample_mean", "-", "real_mean", "\n", "mean_norm", "=", "mean_diff", "@", "mean_diff", "\n", "\n", "trace", "=", "np", ".", "trace", "(", "sample_cov", ")", "+", "np", ".", "trace", "(", "real_cov", ")", "-", "2", "*", "np", ".", "trace", "(", "cov_sqrt", ")", "\n", "\n", "fid", "=", "mean_norm", "+", "trace", "\n", "\n", "return", "fid", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.PNetLin.__init__": [[28, 63], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.PNetLin.forward": [[64, 93], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "lpips.normalize_tensor", "lpips.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.spatial_average", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.ScalingLayer.__init__": [[95, 99], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.ScalingLayer.forward": [[100, 102], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.NetLinLayer.__init__": [[106, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.Dist2LogitLayer.__init__": [[116, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.Dist2LogitLayer.forward": [[128, 130], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.BCERankingLoss.__init__": [[132, 137], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.BCERankingLoss.forward": [[138, 142], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.FakeNet.__init__": [[145, 149], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.L2.forward": [[152, 166], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "lpips.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "lpips.l2", "lpips.tensor2np", "lpips.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "lpips.tensor2tensorlab", "lpips.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.l2", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.DSSIM.forward": [[169, 181], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "lpips.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "lpips.dssim().astype", "lpips.dssim", "lpips.dssim", "lpips.tensor2im", "lpips.tensor2im", "lpips.tensor2np", "lpips.tensor2np", "lpips.tensor2tensorlab", "lpips.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.dssim", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.dssim", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.spatial_average": [[17, 19], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.upsample": [[20, 25], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_H", "=", "64", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", "=", "in_tens", ".", "shape", "[", "2", "]", "\n", "scale_factor", "=", "1.", "*", "out_H", "/", "in_H", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.networks_basic.print_network": [[182, 188], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.name": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.initialize": [[28, 108], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "torch.nn.DataParallel", "print", "networks_basic.print_network", "print", "os.path.abspath", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "os.path.join", "torch.load", "networks_basic.L2", "inspect.getfile", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.initialize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.print_network", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            spatial_shape - if given, output spatial shape. if None then spatial shape is determined automatically via spatial_factor (see below).\n            spatial_factor - if given, specifies upsampling factor relative to the largest spatial extent of a convolutional layer. if None then resized to size of input images.\n            spatial_order - spline order of filter for upsampling in spatial mode, by default 1 (bilinear).\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                ", "import", "inspect", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "initialize", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.forward": [[109, 118], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.optimize_parameters": [[120, 126], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.clamp_weights": [[127, 131], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.set_input": [[132, 147], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.forward_train": [[148, 161], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.backward_train": [[162, 164], ["torch.mean().backward", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.compute_accuracy": [[165, 170], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.get_current_errors": [[171, 179], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.get_current_visuals": [[180, 194], ["lpips.tensor2im", "lpips.tensor2im", "lpips.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.save": [[195, 201], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.DistModel.update_learning_rate": [[202, 211], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.score_2afc_dataset": [[212, 246], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.dist_model.score_jnd_dataset": [[247, 285], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "lpips.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.voc_ap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.squeezenet.__init__": [[7, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.squeezenet.forward": [[36, 55], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.alexnet.__init__": [[58, 80], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.alexnet.forward": [[81, 96], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.vgg16.__init__": [[98, 120], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.vgg16.forward": [[121, 136], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.resnet.__init__": [[140, 162], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.pretrained_networks.resnet.forward": [[163, 182], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.PerceptualLoss.__init__": [[14, 25], ["super().__init__", "print", "lpips.dist_model.DistModel", "__init__.PerceptualLoss.model.initialize", "print", "print", "__init__.PerceptualLoss.model.name"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.initialize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.name"], ["    ", "def", "__init__", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'rgb'", ",", "spatial", "=", "False", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "# VGG using our perceptually-learned weights (LPIPS metric)", "\n", "# def __init__(self, model='net', net='vgg', use_gpu=True): # \"default\" way of using VGG as a perceptual loss", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Setting up Perceptual loss...'", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model", "=", "dist_model", ".", "DistModel", "(", ")", "\n", "self", ".", "model", ".", "initialize", "(", "model", "=", "model", ",", "net", "=", "net", ",", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ",", "spatial", "=", "self", ".", "spatial", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "print", "(", "'...[%s] initialized'", "%", "self", ".", "model", ".", "name", "(", ")", ")", "\n", "print", "(", "'...Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.PerceptualLoss.forward": [[26, 41], ["__init__.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Pred and target are Variables.\n        If normalize is True, assumes the images are between [0,1] and then scales them between [-1,+1]\n        If normalize is False, assumes the images are already between [-1,+1]\n\n        Inputs pred and target are Nx3xHxW\n        Output pytorch Variable N long\n        \"\"\"", "\n", "\n", "if", "normalize", ":", "\n", "            ", "target", "=", "2", "*", "target", "-", "1", "\n", "pred", "=", "2", "*", "pred", "-", "1", "\n", "\n", "", "return", "self", ".", "model", ".", "forward", "(", "target", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.normalize_tensor": [[42, 45], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "", "def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.l2": [[46, 48], ["numpy.mean"], "function", ["None"], ["", "def", "l2", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", ".5", "*", "np", ".", "mean", "(", "(", "p0", "/", "range", "-", "p1", "/", "range", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.psnr": [[49, 51], ["numpy.log10", "numpy.mean"], "function", ["None"], ["", "def", "psnr", "(", "p0", ",", "p1", ",", "peak", "=", "255.", ")", ":", "\n", "    ", "return", "10", "*", "np", ".", "log10", "(", "peak", "**", "2", "/", "np", ".", "mean", "(", "(", "1.", "*", "p0", "-", "1.", "*", "p1", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.dssim": [[52, 54], ["skimage.measure.compare_ssim"], "function", ["None"], ["", "def", "dssim", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", "(", "1", "-", "compare_ssim", "(", "p0", ",", "p1", ",", "data_range", "=", "range", ",", "multichannel", "=", "True", ")", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.rgb2lab": [[102, 105], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.rgb2lab"], ["", "", "def", "rgb2lab", "(", "input", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "return", "color", ".", "rgb2lab", "(", "input", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np": [[62, 65], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], ["", "def", "tensor2np", "(", "tensor_obj", ")", ":", "\n", "# change dimension of a tensor object into a numpy array", "\n", "    ", "return", "tensor_obj", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.np2tensor": [[66, 69], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], ["", "def", "np2tensor", "(", "np_obj", ")", ":", "\n", "# change dimenion of np array into tensor array", "\n", "    ", "return", "torch", ".", "Tensor", "(", "np_obj", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2tensorlab": [[70, 83], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.np2tensor"], ["", "def", "tensor2tensorlab", "(", "image_tensor", ",", "to_norm", "=", "True", ",", "mc_only", "=", "False", ")", ":", "\n", "# image tensor to lab tensor", "\n", "    ", "from", "skimage", "import", "color", "\n", "\n", "img", "=", "tensor2im", "(", "image_tensor", ")", "\n", "img_lab", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "if", "(", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "", "if", "(", "to_norm", "and", "not", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "img_lab", "=", "img_lab", "/", "100.", "\n", "\n", "", "return", "np2tensor", "(", "img_lab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensorlab2tensor": [[84, 101], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.np2tensor", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.im2tensor", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.im2tensor"], ["", "def", "tensorlab2tensor", "(", "lab_tensor", ",", "return_inbnd", "=", "False", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "lab", "=", "tensor2np", "(", "lab_tensor", ")", "*", "100.", "\n", "lab", "[", ":", ",", ":", ",", "0", "]", "=", "lab", "[", ":", ",", ":", ",", "0", "]", "+", "50", "\n", "\n", "rgb_back", "=", "255.", "*", "np", ".", "clip", "(", "color", ".", "lab2rgb", "(", "lab", ".", "astype", "(", "'float'", ")", ")", ",", "0", ",", "1", ")", "\n", "if", "(", "return_inbnd", ")", ":", "\n", "# convert back to lab, see if we match", "\n", "        ", "lab_back", "=", "color", ".", "rgb2lab", "(", "rgb_back", ".", "astype", "(", "'uint8'", ")", ")", "\n", "mask", "=", "1.", "*", "np", ".", "isclose", "(", "lab_back", ",", "lab", ",", "atol", "=", "2.", ")", "\n", "mask", "=", "np2tensor", "(", "np", ".", "prod", "(", "mask", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "return", "(", "im2tensor", "(", "rgb_back", ")", ",", "mask", ")", "\n", "", "else", ":", "\n", "        ", "return", "im2tensor", "(", "rgb_back", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2im": [[151, 156], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.im2tensor": [[157, 161], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.tensor2vec": [[115, 117], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], ["", "def", "tensor2vec", "(", "vector_tensor", ")", ":", "\n", "    ", "return", "vector_tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.__init__.voc_ap": [[118, 150], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.name": [[12, 14], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.initialize": [[15, 18], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.get_image_paths": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.optimize_parameters": [[25, 27], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.get_current_visuals": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.get_current_errors": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save": [[34, 36], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save_network": [[38, 42], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.load_network": [[44, 49], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.update_learning_rate": [[50, 52], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.lpips.base_model.BaseModel.save_done": [[56, 59], ["numpy.save", "numpy.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLUFunctionBackward.forward": [[21, 41], ["ctx.save_for_backward", "grad_output.new_empty", "fused.fused_bias_act", "fused.fused_bias_act.sum().detach", "list", "range", "fused.fused_bias_act.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "out", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "empty", "=", "grad_output", ".", "new_empty", "(", "0", ")", "\n", "\n", "grad_input", "=", "fused", ".", "fused_bias_act", "(", "\n", "grad_output", ",", "empty", ",", "out", ",", "3", ",", "1", ",", "negative_slope", ",", "scale", "\n", ")", "\n", "\n", "dim", "=", "[", "0", "]", "\n", "\n", "if", "grad_input", ".", "ndim", ">", "2", ":", "\n", "            ", "dim", "+=", "list", "(", "range", "(", "2", ",", "grad_input", ".", "ndim", ")", ")", "\n", "\n", "", "grad_bias", "=", "grad_input", ".", "sum", "(", "dim", ")", ".", "detach", "(", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLUFunctionBackward.backward": [[42, 50], ["fused.fused_bias_act"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ",", "gradgrad_bias", ")", ":", "\n", "        ", "(", "out", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "gradgrad_out", "=", "fused", ".", "fused_bias_act", "(", "\n", "gradgrad_input", ",", "gradgrad_bias", ",", "out", ",", "3", ",", "1", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLUFunction.forward": [[53, 62], ["input.new_empty", "fused.fused_bias_act", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "empty", "=", "input", ".", "new_empty", "(", "0", ")", "\n", "out", "=", "fused", ".", "fused_bias_act", "(", "input", ",", "bias", ",", "empty", ",", "3", ",", "0", ",", "negative_slope", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLUFunction.backward": [[63, 72], ["FusedLeakyReLUFunctionBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "(", "out", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", ",", "grad_bias", "=", "FusedLeakyReLUFunctionBackward", ".", "apply", "(", "\n", "grad_output", ",", "out", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLU.__init__": [[75, 81], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channel", ")", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.FusedLeakyReLU.forward": [[82, 84], ["fused_act.fused_leaky_relu"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "fused_leaky_relu", "(", "input", ",", "self", ".", "bias", ",", "self", ".", "negative_slope", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.fused_act.fused_leaky_relu": [[86, 98], ["FusedLeakyReLUFunction.apply", "torch.nn.functional.leaky_relu", "bias.view"], "function", ["None"], ["", "", "def", "fused_leaky_relu", "(", "input", ",", "bias", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "    ", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "rest_dim", "=", "[", "1", "]", "*", "(", "input", ".", "ndim", "-", "bias", ".", "ndim", "-", "1", ")", "\n", "return", "(", "\n", "F", ".", "leaky_relu", "(", "\n", "input", "+", "bias", ".", "view", "(", "1", ",", "bias", ".", "shape", "[", "0", "]", ",", "*", "rest_dim", ")", ",", "negative_slope", "=", "0.2", "\n", ")", "\n", "*", "scale", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "FusedLeakyReLUFunction", ".", "apply", "(", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2dBackward.forward": [[20, 61], ["grad_output.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "grad_input.view.view.view", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "grad_output", ",", "kernel", ",", "grad_kernel", ",", "up", ",", "down", ",", "pad", ",", "g_pad", ",", "in_size", ",", "out_size", "\n", ")", ":", "\n", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", "=", "g_pad", "\n", "\n", "grad_output", "=", "grad_output", ".", "reshape", "(", "-", "1", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "1", ")", "\n", "\n", "grad_input", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "grad_output", ",", "\n", "grad_kernel", ",", "\n", "down_x", ",", "\n", "down_y", ",", "\n", "up_x", ",", "\n", "up_y", ",", "\n", "g_pad_x0", ",", "\n", "g_pad_x1", ",", "\n", "g_pad_y0", ",", "\n", "g_pad_y1", ",", "\n", ")", "\n", "grad_input", "=", "grad_input", ".", "view", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "in_size", "[", "2", "]", ",", "in_size", "[", "3", "]", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ")", "\n", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "ctx", ".", "up_x", "=", "up_x", "\n", "ctx", ".", "up_y", "=", "up_y", "\n", "ctx", ".", "down_x", "=", "down_x", "\n", "ctx", ".", "down_y", "=", "down_y", "\n", "ctx", ".", "pad_x0", "=", "pad_x0", "\n", "ctx", ".", "pad_x1", "=", "pad_x1", "\n", "ctx", ".", "pad_y0", "=", "pad_y0", "\n", "ctx", ".", "pad_y1", "=", "pad_y1", "\n", "ctx", ".", "in_size", "=", "in_size", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2dBackward.backward": [[62, 86], ["gradgrad_input.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "gradgrad_out.view.view.view"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ")", ":", "\n", "        ", "kernel", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "gradgrad_input", "=", "gradgrad_input", ".", "reshape", "(", "-", "1", ",", "ctx", ".", "in_size", "[", "2", "]", ",", "ctx", ".", "in_size", "[", "3", "]", ",", "1", ")", "\n", "\n", "gradgrad_out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "gradgrad_input", ",", "\n", "kernel", ",", "\n", "ctx", ".", "up_x", ",", "\n", "ctx", ".", "up_y", ",", "\n", "ctx", ".", "down_x", ",", "\n", "ctx", ".", "down_y", ",", "\n", "ctx", ".", "pad_x0", ",", "\n", "ctx", ".", "pad_x1", ",", "\n", "ctx", ".", "pad_y0", ",", "\n", "ctx", ".", "pad_y1", ",", "\n", ")", "\n", "# gradgrad_out = gradgrad_out.view(ctx.in_size[0], ctx.out_size[0], ctx.out_size[1], ctx.in_size[3])", "\n", "gradgrad_out", "=", "gradgrad_out", ".", "view", "(", "\n", "ctx", ".", "in_size", "[", "0", "]", ",", "ctx", ".", "in_size", "[", "1", "]", ",", "ctx", ".", "out_size", "[", "0", "]", ",", "ctx", ".", "out_size", "[", "1", "]", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.forward": [[89, 125], ["input.reshape.reshape.reshape", "ctx.save_for_backward", "upfirdn2d_op.upfirdn2d", "out.view.view.view", "torch.flip"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "up", ",", "down", ",", "pad", ")", ":", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "batch", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "ctx", ".", "in_size", "=", "input", ".", "shape", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ",", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ")", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", ")", "//", "down_y", "+", "1", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", ")", "//", "down_x", "+", "1", "\n", "ctx", ".", "out_size", "=", "(", "out_h", ",", "out_w", ")", "\n", "\n", "ctx", ".", "up", "=", "(", "up_x", ",", "up_y", ")", "\n", "ctx", ".", "down", "=", "(", "down_x", ",", "down_y", ")", "\n", "ctx", ".", "pad", "=", "(", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", ")", "\n", "\n", "g_pad_x0", "=", "kernel_w", "-", "pad_x0", "-", "1", "\n", "g_pad_y0", "=", "kernel_h", "-", "pad_y0", "-", "1", "\n", "g_pad_x1", "=", "in_w", "*", "up_x", "-", "out_w", "*", "down_x", "+", "pad_x0", "-", "up_x", "+", "1", "\n", "g_pad_y1", "=", "in_h", "*", "up_y", "-", "out_h", "*", "down_y", "+", "pad_y0", "-", "up_y", "+", "1", "\n", "\n", "ctx", ".", "g_pad", "=", "(", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", ")", "\n", "\n", "out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", "\n", "# out = out.view(major, out_h, out_w, minor)", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward": [[126, 143], ["UpFirDn2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "kernel", ",", "grad_kernel", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "UpFirDn2dBackward", ".", "apply", "(", "\n", "grad_output", ",", "\n", "kernel", ",", "\n", "grad_kernel", ",", "\n", "ctx", ".", "up", ",", "\n", "ctx", ".", "down", ",", "\n", "ctx", ".", "pad", ",", "\n", "ctx", ".", "g_pad", ",", "\n", "ctx", ".", "in_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d": [[145, 157], ["upfirdn2d.upfirdn2d_native", "UpFirDn2d.apply"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d_native"], ["", "", "def", "upfirdn2d", "(", "input", ",", "kernel", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "out", "=", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up", ",", "up", ",", "down", ",", "down", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "out", "=", "UpFirDn2d", ".", "apply", "(", "\n", "input", ",", "kernel", ",", "(", "up", ",", "up", ")", ",", "(", "down", ",", "down", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.upfirdn2d_native": [[159, 201], ["input.reshape.reshape", "input.reshape.view", "torch.nn.functional.pad", "out.permute.view", "torch.nn.functional.pad", "out.permute.permute", "out.permute.reshape", "torch.flip().view", "torch.nn.functional.conv2d", "out.permute.reshape", "out.permute.permute", "out.permute.view", "max", "max", "max", "max", "torch.flip", "max", "max", "max", "max"], "function", ["None"], ["", "def", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", ":", "\n", "    ", "_", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "_", ",", "in_h", ",", "in_w", ",", "minor", "=", "input", ".", "shape", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "\n", "out", "=", "input", ".", "view", "(", "-", "1", ",", "in_h", ",", "1", ",", "in_w", ",", "1", ",", "minor", ")", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "up_x", "-", "1", ",", "0", ",", "0", ",", "0", ",", "up_y", "-", "1", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "in_h", "*", "up_y", ",", "in_w", "*", "up_x", ",", "minor", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "\n", "out", ",", "[", "0", ",", "0", ",", "max", "(", "pad_x0", ",", "0", ")", ",", "max", "(", "pad_x1", ",", "0", ")", ",", "max", "(", "pad_y0", ",", "0", ")", ",", "max", "(", "pad_y1", ",", "0", ")", "]", "\n", ")", "\n", "out", "=", "out", "[", "\n", ":", ",", "\n", "max", "(", "-", "pad_y0", ",", "0", ")", ":", "out", ".", "shape", "[", "1", "]", "-", "max", "(", "-", "pad_y1", ",", "0", ")", ",", "\n", "max", "(", "-", "pad_x0", ",", "0", ")", ":", "out", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pad_x1", ",", "0", ")", ",", "\n", ":", ",", "\n", "]", "\n", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "[", "-", "1", ",", "1", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "]", "\n", ")", "\n", "w", "=", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "kernel_h", ",", "kernel_w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "w", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "-", "1", ",", "\n", "minor", ",", "\n", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "1", ",", "\n", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "1", ",", "\n", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ":", "down_y", ",", ":", ":", "down_x", ",", ":", "]", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", ")", "//", "down_y", "+", "1", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", ")", "//", "down_x", "+", "1", "\n", "\n", "return", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval.calculate_metrics": [[25, 120], ["torch.no_grad", "print", "torch.device", "os.listdir", "os.listdir.sort", "len", "print", "collections.OrderedDict", "enumerate", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "eval.calculate_fid_for_all_tasks", "enumerate", "torch.cuda.is_available", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "shutil.rmtree", "os.makedirs", "print", "enumerate", "numpy.array().mean", "len", "tqdm.tqdm", "x_src.to.size", "x_src.to.to", "torch.tensor().to", "range", "metrics.lpips.calculate_lpips_given_images", "lpips_values.append", "nets.fan.get_heatmap", "nets.generator", "group_of_images.append", "range", "numpy.array", "len", "torch.tensor", "torch.randn().to", "nets.mapping_network", "nets.style_encoder", "os.path.join", "core.utils.save_image", "next().to", "next().to.size", "torch.randn", "iter", "next().to", "next", "next"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_fid_for_all_tasks", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.calculate_lpips_given_images", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["h", "=", "imgsize", "\n", "", "return", "image", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "", "def", "save_image", "(", "img", ",", "index", ",", "save_dir", ",", "dir", "=", "'/source/'", ",", "save_ending", "=", "'.png'", ")", ":", "\n", "    ", "utils", ".", "save_image", "(", "\n", "img", ".", "cpu", "(", ")", ",", "\n", "save_dir", "+", "dir", "+", "str", "(", "index", ")", "+", "save_ending", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", "\n", ")", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"checkpoint/mountain.pt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_freq\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--folder'", ",", "type", "=", "str", ",", "default", "=", "'img_mountains_val'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsize'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_specific_pairs\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--image_pair_dir'", ",", "type", "=", "str", ",", "default", "=", "'mountain_val/'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "name", ")", "\n", "\n", "", "imgsize", "=", "args", ".", "imgsize", "\n", "large_dir", "=", "'test_sample/'", "\n", "\n", "imgs", "=", "[", "]", "\n", "\n", "if", "args", ".", "test_specific_pairs", ":", "\n", "        ", "image_dir", "=", "args", ".", "image_pair_dir", "\n", "source_dir", "=", "[", "image_dir", "+", "'source/'", "+", "image_name", "for", "image_name", "in", "os", ".", "listdir", "(", "image_dir", "+", "'source'", ")", "]", "\n", "ref_dir", "=", "[", "image_dir", "+", "'ref/'", "+", "image_name", "for", "image_name", "in", "os", ".", "listdir", "(", "image_dir", "+", "'ref'", ")", "]", "\n", "image_list", "=", "source_dir", "+", "ref_dir", "# os.listdir( image_dir + 'ref')", "\n", "args", ".", "folder", "=", "''", "\n", "", "else", ":", "\n", "        ", "args", ".", "files", "=", "os", ".", "listdir", "(", "args", ".", "folder", ")", "\n", "image_list", "=", "args", ".", "files", "[", ":", "len", "(", "args", ".", "files", ")", "//", "2", "*", "2", "]", "\n", "", "for", "imgpath", "in", "image_list", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "folder", ",", "imgpath", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "resize_short", "(", "img", ",", "imgsize", ")", "\n", "img", "=", "crop_center", "(", "img", ",", "imgsize", ",", "imgsize", ")", "\n", "img_a", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", ".", "to", "(", "torch", ".", "float32", ")", "\n", ".", "div", "(", "255", ")", "\n", ".", "add_", "(", "-", "0.5", ")", "\n", ".", "mul_", "(", "2", ")", "\n", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", ")", "\n", "imgs", ".", "append", "(", "img_a", ")", "\n", "", "print", "(", "'Image Num: '", ",", "len", "(", "imgs", ")", ")", "\n", "\n", "imgs", "=", "torch", ".", "stack", "(", "imgs", ",", "0", ")", ".", "cuda", "(", ")", "\n", "img1_whole", ",", "img2_whole", "=", "imgs", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "\n", "ckpt_freq", "=", "torch", ".", "load", "(", "args", ".", "ckpt_freq", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "ckpt_args_freq", "=", "ckpt_freq", "[", "\"args\"", "]", "\n", "ckpt_args", "=", "ckpt_freq", "[", "\"args\"", "]", "\n", "\n", "imgsize", "=", "ckpt_args", ".", "size", "\n", "\n", "enc_freq", "=", "model", ".", "Encoder", "(", "ckpt_args_freq", ".", "channel", ")", ".", "cuda", "(", ")", "\n", "gen_freq", "=", "model", ".", "Generator", "(", "ckpt_args_freq", ".", "channel", ")", ".", "cuda", "(", ")", "\n", "enc_freq", ".", "load_state_dict", "(", "ckpt_freq", "[", "\"e_ema\"", "]", ")", "\n", "gen_freq", ".", "load_state_dict", "(", "ckpt_freq", "[", "\"g_ema\"", "]", ")", "\n", "enc_freq", ".", "eval", "(", ")", "\n", "gen_freq", ".", "eval", "(", ")", "\n", "\n", "for", "index", "in", "range", "(", "img1_whole", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "real_img_freq1", "=", "img1_whole", "[", "index", "]", ".", "unsqueeze", "(", "0", ")", "\n", "real_img_freq2", "=", "img2_whole", "[", "index", "]", ".", "unsqueeze", "(", "0", ")", "\n", "struct1", ",", "texture1", "=", "enc_freq", "(", "real_img_freq1", ")", "\n", "struct2", ",", "texture2", "=", "enc_freq", "(", "real_img_freq2", ")", "\n", "out12_freq", "=", "gen_freq", "(", "struct1", ",", "texture2", ")", "\n", "out21_freq", "=", "gen_freq", "(", "struct2", ",", "texture1", ")", "\n", "\n", "dirs", "=", "[", "large_dir", ",", "large_dir", "+", "args", ".", "name", ",", "large_dir", "+", "args", ".", "name", "+", "'/freq/'", ",", "large_dir", "+", "args", ".", "name", "+", "'/source/'", "]", "\n", "\n", "save_dir", "=", "large_dir", "+", "args", ".", "name", "\n", "for", "dir_one", "in", "dirs", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_one", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dir_one", ")", "\n", "", "", "save_image", "(", "real_img_freq1", ",", "index", ",", "save_dir", ",", "dir", "=", "'/source/'", ",", "save_ending", "=", "'.png'", ")", "\n", "save_image", "(", "out12_freq", ",", "index", ",", "save_dir", ",", "dir", "=", "'/freq/'", ",", "save_ending", "=", "'.png'", ")", "\n", "\n", "save_image", "(", "real_img_freq2", ",", "index", ",", "save_dir", ",", "dir", "=", "'/source/'", ",", "save_ending", "=", "'_inv.png'", ")", "\n", "save_image", "(", "out21_freq", ",", "index", ",", "save_dir", ",", "dir", "=", "'/freq/'", ",", "save_ending", "=", "'_inv.png'", ")", "\n", "\n", "################################################", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval.calculate_fid_for_all_tasks": [[122, 148], ["print", "collections.OrderedDict", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "os.path.join", "os.path.join", "print", "metrics.fid.calculate_fid_given_paths", "len"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.calculate_fid_given_paths"], []], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.AlexNet.__init__": [[21, 28], ["torch.Module.__init__", "torchvision.models.alexnet", "isinstance", "lpips.AlexNet.channels.append"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "channels", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "channels", ".", "append", "(", "layer", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.AlexNet.forward": [[29, 36], ["layer", "isinstance", "fmaps.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fmaps", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "fmaps", ".", "append", "(", "x", ")", "\n", "", "", "return", "fmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.Conv1x1.__init__": [[39, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.Conv1x1.forward": [[45, 47], ["lpips.Conv1x1.main"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.LPIPS.__init__": [[50, 60], ["torch.Module.__init__", "lpips.AlexNet", "torch.ModuleList", "torch.ModuleList", "lpips.LPIPS._load_lpips_weights", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "lpips.LPIPS.lpips_weights.append", "lpips.Conv1x1", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.LPIPS._load_lpips_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alexnet", "=", "AlexNet", "(", ")", "\n", "self", ".", "lpips_weights", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "channels", "in", "self", ".", "alexnet", ".", "channels", ":", "\n", "            ", "self", ".", "lpips_weights", ".", "append", "(", "Conv1x1", "(", "channels", ",", "1", ")", ")", "\n", "", "self", ".", "_load_lpips_weights", "(", ")", "\n", "# imagenet normalization for range [-1, 1]", "\n", "self", ".", "mu", "=", "torch", ".", "tensor", "(", "[", "-", "0.03", ",", "-", "0.088", ",", "-", "0.188", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "tensor", "(", "[", "0.458", ",", "0.448", ",", "0.450", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.LPIPS._load_lpips_weights": [[61, 71], ["lpips.LPIPS.state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load.items", "torch.load.items", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "own_state_dict[].copy_", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "def", "_load_lpips_weights", "(", "self", ")", ":", "\n", "        ", "own_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "'metrics/lpips_weights.ckpt'", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "'metrics/lpips_weights.ckpt'", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "own_state_dict", ":", "\n", "                ", "own_state_dict", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.LPIPS.forward": [[72, 83], ["lpips.LPIPS.alexnet", "lpips.LPIPS.alexnet", "zip", "lpips.normalize", "lpips.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "conv1x1"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mu", ")", "/", "self", ".", "sigma", "\n", "y", "=", "(", "y", "-", "self", ".", "mu", ")", "/", "self", ".", "sigma", "\n", "x_fmaps", "=", "self", ".", "alexnet", "(", "x", ")", "\n", "y_fmaps", "=", "self", ".", "alexnet", "(", "y", ")", "\n", "lpips_value", "=", "0", "\n", "for", "x_fmap", ",", "y_fmap", ",", "conv1x1", "in", "zip", "(", "x_fmaps", ",", "y_fmaps", ",", "self", ".", "lpips_weights", ")", ":", "\n", "            ", "x_fmap", "=", "normalize", "(", "x_fmap", ")", "\n", "y_fmap", "=", "normalize", "(", "y_fmap", ")", "\n", "lpips_value", "+=", "torch", ".", "mean", "(", "conv1x1", "(", "(", "x_fmap", "-", "y_fmap", ")", "**", "2", ")", ")", "\n", "", "return", "lpips_value", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.normalize": [[16, 18], ["torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum"], "function", ["None"], ["def", "normalize", "(", "x", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.calculate_lpips_given_images": [[85, 99], ["torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "LPIPS().eval().to", "len", "range", "torch.mean", "torch.mean", "torch.mean.item", "range", "torch.stack", "torch.stack", "torch.cuda.is_available", "torch.cuda.is_available", "LPIPS().eval", "lpips_values.append", "LPIPS().eval().to.", "lpips.LPIPS"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_lpips_given_images", "(", "group_of_images", ")", ":", "\n", "# group_of_images = [torch.randn(N, C, H, W) for _ in range(10)]", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "lpips", "=", "LPIPS", "(", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "lpips_values", "=", "[", "]", "\n", "num_rand_outputs", "=", "len", "(", "group_of_images", ")", "\n", "\n", "# calculate the average of pairwise distances among all random outputs", "\n", "for", "i", "in", "range", "(", "num_rand_outputs", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num_rand_outputs", ")", ":", "\n", "            ", "lpips_values", ".", "append", "(", "lpips", "(", "group_of_images", "[", "i", "]", ",", "group_of_images", "[", "j", "]", ")", ")", "\n", "", "", "lpips_value", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "lpips_values", ",", "dim", "=", "0", ")", ")", "\n", "return", "lpips_value", ".", "item", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.InceptionV3.__init__": [[28, 47], ["torch.Module.__init__", "torchvision.models.inception_v3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "0", ")", "\n", "\n", "return", "features", "\n", "\n", "\n", "", "def", "calc_fid", "(", "sample_mean", ",", "sample_cov", ",", "real_mean", ",", "real_cov", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "cov_sqrt", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sample_cov", "@", "real_cov", ",", "disp", "=", "False", ")", "\n", "\n", "if", "not", "np", ".", "isfinite", "(", "cov_sqrt", ")", ".", "all", "(", ")", ":", "\n", "        ", "print", "(", "'product of cov matrices is singular'", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sample_cov", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "cov_sqrt", "=", "linalg", ".", "sqrtm", "(", "(", "sample_cov", "+", "offset", ")", "@", "(", "real_cov", "+", "offset", ")", ")", "\n", "\n", "", "if", "np", ".", "iscomplexobj", "(", "cov_sqrt", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "cov_sqrt", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "cov_sqrt", ".", "imag", ")", ")", "\n", "\n", "raise", "ValueError", "(", "f'Imaginary component {m}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.InceptionV3.forward": [[48, 54], ["fid.InceptionV3.block1", "fid.InceptionV3.block2", "fid.InceptionV3.block3", "fid.InceptionV3.block4", "fid.InceptionV3.view", "fid.InceptionV3.size"], "methods", ["None"], ["", "cov_sqrt", "=", "cov_sqrt", ".", "real", "\n", "\n", "", "mean_diff", "=", "sample_mean", "-", "real_mean", "\n", "mean_norm", "=", "mean_diff", "@", "mean_diff", "\n", "\n", "trace", "=", "np", ".", "trace", "(", "sample_cov", ")", "+", "np", ".", "trace", "(", "real_cov", ")", "-", "2", "*", "np", ".", "trace", "(", "cov_sqrt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.frechet_distance": [[56, 60], ["scipy.linalg.sqrtm", "numpy.real", "numpy.dot", "numpy.sum", "numpy.trace"], "function", ["None"], ["\n", "return", "fid", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.calculate_fid_given_paths": [[62, 80], ["torch.no_grad", "torch.no_grad", "print", "torch.device", "torch.device", "InceptionV3().eval().to", "fid.frechet_distance", "core.data_loader.get_eval_loader", "tqdm", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "mu.append", "cov.append", "torch.cuda.is_available", "torch.cuda.is_available", "InceptionV3().eval", "InceptionV3().eval().to.", "torch.cat().cpu().detach().numpy.append", "numpy.mean", "numpy.cov", "len", "x.to", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "fid.InceptionV3", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.frechet_distance", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader"], ["\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--truncation'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--truncation_mean'", ",", "type", "=", "int", ",", "default", "=", "4096", ")", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--n_sample'", ",", "type", "=", "int", ",", "default", "=", "50000", ")", "\n", "parser", ".", "add_argument", "(", "'--size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--inception'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'ckpt'", ",", "metavar", "=", "'CHECKPOINT'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "ckpt", ")", "\n", "\n", "g", "=", "Generator", "(", "args", ".", "size", ",", "512", ",", "8", ")", ".", "to", "(", "device", ")", "\n", "g", ".", "load_state_dict", "(", "ckpt", "[", "'g_ema'", "]", ")", "\n", "g", "=", "nn", ".", "DataParallel", "(", "g", ")", "\n", "g", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_new.calculate_metrics": [[26, 124], ["torch.no_grad", "print", "torch.device", "os.listdir", "os.listdir.sort", "len", "print", "collections.OrderedDict", "enumerate", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "eval_new.calculate_fid_for_all_tasks", "enumerate", "torch.cuda.is_available", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "shutil.rmtree", "os.makedirs", "print", "enumerate", "numpy.array().mean", "len", "tqdm.tqdm", "x_src.to.size", "x_src.to.to", "torch.tensor().to", "range", "metrics.lpips.calculate_lpips_given_images", "lpips_values.append", "nets.fan.get_heatmap", "nets.generator", "group_of_images.append", "range", "numpy.array", "len", "torch.tensor", "torch.randn().to", "nets.mapping_network", "nets.style_encoder", "core.utils.hair_parsing", "nets.style_encoder_hair", "torch.cat", "os.path.join", "core.utils.save_image", "next().to", "next().to.size", "torch.randn", "iter", "next().to", "next", "next"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_fid_for_all_tasks", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.calculate_lpips_given_images", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_metrics", "(", "nets", ",", "args", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating evaluation metrics...'", ")", "\n", "assert", "mode", "in", "[", "'latent'", ",", "'reference'", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "domains", "=", "os", ".", "listdir", "(", "args", ".", "val_img_dir", ")", "\n", "domains", ".", "sort", "(", ")", "\n", "num_domains", "=", "len", "(", "domains", ")", "\n", "print", "(", "'Number of domains: %d'", "%", "num_domains", ")", "\n", "\n", "lpips_dict", "=", "OrderedDict", "(", ")", "\n", "for", "trg_idx", ",", "trg_domain", "in", "enumerate", "(", "domains", ")", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "trg_domain", ")", "\n", "loader_ref", "=", "get_eval_loader", "(", "root", "=", "path_ref", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "", "for", "src_idx", ",", "src_domain", "in", "enumerate", "(", "src_domains", ")", ":", "\n", "            ", "path_src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "src_domain", ")", "\n", "loader_src", "=", "get_eval_loader", "(", "root", "=", "path_src", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ")", "\n", "\n", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", "+", "args", ".", "eval_dir", ",", "task", ")", "\n", "shutil", ".", "rmtree", "(", "path_fake", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "path_fake", ")", "\n", "\n", "lpips_values", "=", "[", "]", "\n", "print", "(", "'Generating images and calculating LPIPS for %s...'", "%", "task", ")", "\n", "for", "i", ",", "x_src", "in", "enumerate", "(", "tqdm", "(", "loader_src", ",", "total", "=", "len", "(", "loader_src", ")", ")", ")", ":", "\n", "                ", "N", "=", "x_src", ".", "size", "(", "0", ")", "\n", "x_src", "=", "x_src", ".", "to", "(", "device", ")", "\n", "y_trg", "=", "torch", ".", "tensor", "(", "[", "trg_idx", "]", "*", "N", ")", ".", "to", "(", "device", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "# generate 10 outputs from the same input", "\n", "group_of_images", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "args", ".", "num_outs_per_domain", ")", ":", "\n", "                    ", "if", "mode", "==", "'latent'", ":", "\n", "                        ", "z_trg", "=", "torch", ".", "randn", "(", "N", ",", "args", ".", "latent_dim", ")", ".", "to", "(", "device", ")", "\n", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "                        ", "try", ":", "\n", "                            ", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "", "except", ":", "\n", "                            ", "iter_ref", "=", "iter", "(", "loader_ref", ")", "\n", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "x_ref", ".", "size", "(", "0", ")", ">", "N", ":", "\n", "                            ", "x_ref", "=", "x_ref", "[", ":", "N", "]", "\n", "", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "hair_image_ref", "=", "hair_parsing", "(", "nets", ",", "x_ref", ")", "\n", "s_trg_hair", "=", "nets", ".", "style_encoder_hair", "(", "hair_image_ref", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "cat", "(", "(", "s_trg", ",", "s_trg_hair", ")", ",", "1", ")", "\n", "\n", "", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "group_of_images", ".", "append", "(", "x_fake", ")", "\n", "\n", "# save generated images to calculate FID later", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "                        ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "path_fake", ",", "\n", "'%.4i_%.2i.png'", "%", "(", "i", "*", "args", ".", "val_batch_size", "+", "(", "k", "+", "1", ")", ",", "j", "+", "1", ")", ")", "\n", "utils", ".", "save_image", "(", "x_fake", "[", "k", "]", ",", "ncol", "=", "1", ",", "filename", "=", "filename", ")", "\n", "\n", "", "", "lpips_value", "=", "calculate_lpips_given_images", "(", "group_of_images", ")", "\n", "lpips_values", ".", "append", "(", "lpips_value", ")", "\n", "\n", "# calculate LPIPS for each task (e.g. cat2dog, dog2cat)", "\n", "", "lpips_mean", "=", "np", ".", "array", "(", "lpips_values", ")", ".", "mean", "(", ")", "\n", "lpips_dict", "[", "'LPIPS_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "lpips_mean", "\n", "\n", "# delete dataloaders", "\n", "", "del", "loader_src", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "del", "loader_ref", "\n", "del", "iter_ref", "\n", "\n", "# calculate the average LPIPS for all tasks", "\n", "", "", "lpips_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "lpips_dict", ".", "items", "(", ")", ":", "\n", "        ", "lpips_mean", "+=", "value", "/", "len", "(", "lpips_dict", ")", "\n", "", "lpips_dict", "[", "'LPIPS_%s/mean'", "%", "mode", "]", "=", "lpips_mean", "\n", "\n", "# report LPIPS values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", "+", "args", ".", "eval_dir", ",", "'LPIPS_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "lpips_dict", ",", "filename", ")", "\n", "\n", "# calculate and report fid values", "\n", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", "=", "step", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_new.calculate_fid_for_all_tasks": [[126, 152], ["print", "collections.OrderedDict", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "os.path.join", "os.path.join", "print", "metrics.fid.calculate_fid_given_paths", "len"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.calculate_fid_given_paths"], ["", "def", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating FID for all tasks...'", ")", "\n", "fid_values", "=", "OrderedDict", "(", ")", "\n", "for", "trg_domain", "in", "domains", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "for", "src_domain", "in", "src_domains", ":", "\n", "            ", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_real", "=", "os", ".", "path", ".", "join", "(", "args", ".", "train_img_dir", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", "+", "args", ".", "eval_dir", ",", "task", ")", "\n", "print", "(", "'Calculating FID for %s...'", "%", "task", ")", "\n", "fid_value", "=", "calculate_fid_given_paths", "(", "\n", "paths", "=", "[", "path_real", ",", "path_fake", "]", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ")", "\n", "fid_values", "[", "'FID_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "fid_value", "\n", "\n", "# calculate the average FID for all tasks", "\n", "", "", "fid_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "fid_values", ".", "items", "(", ")", ":", "\n", "        ", "fid_mean", "+=", "value", "/", "len", "(", "fid_values", ")", "\n", "", "fid_values", "[", "'FID_%s/mean'", "%", "mode", "]", "=", "fid_mean", "\n", "\n", "# report FID values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", "+", "args", ".", "eval_dir", ",", "'FID_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "fid_values", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_metrics": [[26, 124], ["torch.no_grad", "print", "torch.device", "os.listdir", "os.listdir.sort", "len", "print", "collections.OrderedDict", "enumerate", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "eval_hair.calculate_fid_for_all_tasks", "enumerate", "torch.cuda.is_available", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "shutil.rmtree", "os.makedirs", "print", "enumerate", "numpy.array().mean", "len", "tqdm.tqdm", "x_src.to.size", "x_src.to.to", "torch.tensor().to", "range", "metrics.lpips.calculate_lpips_given_images", "lpips_values.append", "nets.fan.get_heatmap", "nets.generator", "group_of_images.append", "range", "numpy.array", "len", "torch.tensor", "torch.randn().to", "nets.mapping_network", "nets.style_encoder", "core.utils.hair_parsing", "nets.style_encoder_hair", "torch.cat", "os.path.join", "core.utils.save_image", "next().to", "next().to.size", "torch.randn", "iter", "next().to", "next", "next"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_fid_for_all_tasks", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.lpips.calculate_lpips_given_images", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_metrics", "(", "nets", ",", "args", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating evaluation metrics...'", ")", "\n", "assert", "mode", "in", "[", "'latent'", ",", "'reference'", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "domains", "=", "os", ".", "listdir", "(", "args", ".", "val_img_dir", ")", "\n", "domains", ".", "sort", "(", ")", "\n", "num_domains", "=", "len", "(", "domains", ")", "\n", "print", "(", "'Number of domains: %d'", "%", "num_domains", ")", "\n", "\n", "lpips_dict", "=", "OrderedDict", "(", ")", "\n", "for", "trg_idx", ",", "trg_domain", "in", "enumerate", "(", "domains", ")", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "trg_domain", ")", "\n", "loader_ref", "=", "get_eval_loader", "(", "root", "=", "path_ref", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "", "for", "src_idx", ",", "src_domain", "in", "enumerate", "(", "src_domains", ")", ":", "\n", "            ", "path_src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "src_domain", ")", "\n", "loader_src", "=", "get_eval_loader", "(", "root", "=", "path_src", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ")", "\n", "\n", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "task", ")", "\n", "shutil", ".", "rmtree", "(", "path_fake", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "path_fake", ")", "\n", "\n", "lpips_values", "=", "[", "]", "\n", "print", "(", "'Generating images and calculating LPIPS for %s...'", "%", "task", ")", "\n", "for", "i", ",", "x_src", "in", "enumerate", "(", "tqdm", "(", "loader_src", ",", "total", "=", "len", "(", "loader_src", ")", ")", ")", ":", "\n", "                ", "N", "=", "x_src", ".", "size", "(", "0", ")", "\n", "x_src", "=", "x_src", ".", "to", "(", "device", ")", "\n", "y_trg", "=", "torch", ".", "tensor", "(", "[", "trg_idx", "]", "*", "N", ")", ".", "to", "(", "device", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "# generate 10 outputs from the same input", "\n", "group_of_images", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "args", ".", "num_outs_per_domain", ")", ":", "\n", "                    ", "if", "mode", "==", "'latent'", ":", "\n", "                        ", "z_trg", "=", "torch", ".", "randn", "(", "N", ",", "args", ".", "latent_dim", ")", ".", "to", "(", "device", ")", "\n", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "                        ", "try", ":", "\n", "                            ", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "", "except", ":", "\n", "                            ", "iter_ref", "=", "iter", "(", "loader_ref", ")", "\n", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "x_ref", ".", "size", "(", "0", ")", ">", "N", ":", "\n", "                            ", "x_ref", "=", "x_ref", "[", ":", "N", "]", "\n", "", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "hair_image_ref", "=", "hair_parsing", "(", "nets", ",", "x_ref", ")", "\n", "s_trg_hair", "=", "nets", ".", "style_encoder_hair", "(", "hair_image_ref", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "cat", "(", "(", "s_trg", ",", "s_trg_hair", ")", ",", "1", ")", "\n", "\n", "", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "group_of_images", ".", "append", "(", "x_fake", ")", "\n", "\n", "# save generated images to calculate FID later", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "                        ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "path_fake", ",", "\n", "'%.4i_%.2i.png'", "%", "(", "i", "*", "args", ".", "val_batch_size", "+", "(", "k", "+", "1", ")", ",", "j", "+", "1", ")", ")", "\n", "utils", ".", "save_image", "(", "x_fake", "[", "k", "]", ",", "ncol", "=", "1", ",", "filename", "=", "filename", ")", "\n", "\n", "", "", "lpips_value", "=", "calculate_lpips_given_images", "(", "group_of_images", ")", "\n", "lpips_values", ".", "append", "(", "lpips_value", ")", "\n", "\n", "# calculate LPIPS for each task (e.g. cat2dog, dog2cat)", "\n", "", "lpips_mean", "=", "np", ".", "array", "(", "lpips_values", ")", ".", "mean", "(", ")", "\n", "lpips_dict", "[", "'LPIPS_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "lpips_mean", "\n", "\n", "# delete dataloaders", "\n", "", "del", "loader_src", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "del", "loader_ref", "\n", "del", "iter_ref", "\n", "\n", "# calculate the average LPIPS for all tasks", "\n", "", "", "lpips_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "lpips_dict", ".", "items", "(", ")", ":", "\n", "        ", "lpips_mean", "+=", "value", "/", "len", "(", "lpips_dict", ")", "\n", "", "lpips_dict", "[", "'LPIPS_%s/mean'", "%", "mode", "]", "=", "lpips_mean", "\n", "\n", "# report LPIPS values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "'LPIPS_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "lpips_dict", ",", "filename", ")", "\n", "\n", "# calculate and report fid values", "\n", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", "=", "step", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_fid_for_all_tasks": [[126, 152], ["print", "collections.OrderedDict", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "os.path.join", "os.path.join", "print", "metrics.fid.calculate_fid_given_paths", "len"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.fid.calculate_fid_given_paths"], ["", "def", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating FID for all tasks...'", ")", "\n", "fid_values", "=", "OrderedDict", "(", ")", "\n", "for", "trg_domain", "in", "domains", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "for", "src_domain", "in", "src_domains", ":", "\n", "            ", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_real", "=", "os", ".", "path", ".", "join", "(", "args", ".", "train_img_dir", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "task", ")", "\n", "print", "(", "'Calculating FID for %s...'", "%", "task", ")", "\n", "fid_value", "=", "calculate_fid_given_paths", "(", "\n", "paths", "=", "[", "path_real", ",", "path_fake", "]", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ")", "\n", "fid_values", "[", "'FID_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "fid_value", "\n", "\n", "# calculate the average FID for all tasks", "\n", "", "", "fid_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "fid_values", ".", "items", "(", ")", ":", "\n", "        ", "fid_mean", "+=", "value", "/", "len", "(", "fid_values", ")", "\n", "", "fid_values", "[", "'FID_%s/mean'", "%", "mode", "]", "=", "fid_mean", "\n", "\n", "# report FID values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "'FID_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "fid_values", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_blur": [[7, 13], ["torch.pad", "F.pad.split", "torch.cat", "torch.cat", "res.append", "torch.conv2d"], "function", ["None"], ["def", "get_gaussian_blur", "(", "x", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", ",", "padding", ",", "padding", ",", "padding", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "for", "xx", "in", "x", ".", "split", "(", "1", ",", "1", ")", ":", "\n", "        ", "res", ".", "append", "(", "F", ".", "conv2d", "(", "xx", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "res", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_low_freq": [[14, 18], ["freq_pixel_loss.get_gaussian_blur"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_blur"], ["", "def", "get_low_freq", "(", "im", ",", "gauss_kernel", ")", ":", "\n", "    ", "padding", "=", "(", "gauss_kernel", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "//", "2", "\n", "low_freq", "=", "get_gaussian_blur", "(", "im", ",", "gauss_kernel", ",", "padding", "=", "padding", ")", "\n", "return", "low_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.gaussian_blur": [[20, 26], ["torch.pad", "F.pad.split", "torch.cat", "torch.cat", "res.append", "torch.conv2d"], "function", ["None"], ["", "def", "gaussian_blur", "(", "x", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", ",", "padding", ",", "padding", ",", "padding", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "for", "xx", "in", "x", ".", "split", "(", "1", ",", "1", ")", ":", "\n", "        ", "res", ".", "append", "(", "F", ".", "conv2d", "(", "xx", ",", "k", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "res", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_kernel": [[27, 32], ["cv2.getGaussianKernel().dot", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.nn.Parameter", "torch.nn.Parameter", "cv2.getGaussianKernel", "cv2.getGaussianKernel", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "get_gaussian_kernel", "(", "size", "=", "3", ")", ":", "\n", "    ", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "size", ",", "0", ")", ".", "dot", "(", "cv2", ".", "getGaussianKernel", "(", "size", ",", "0", ")", ".", "T", ")", "\n", "kernel", "=", "torch", ".", "FloatTensor", "(", "kernel", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "data", "=", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq": [[34, 41], ["freq_pixel_loss.gaussian_blur", "im_gray.unsqueeze_().repeat.unsqueeze_().repeat", "freq_pixel_loss.gaussian_blur", "torch.cat", "torch.cat", "im_gray.unsqueeze_().repeat.unsqueeze_"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.gaussian_blur", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.gaussian_blur"], ["", "def", "find_fake_freq", "(", "im", ",", "gauss_kernel", ",", "index", "=", "None", ")", ":", "\n", "    ", "padding", "=", "(", "gauss_kernel", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "//", "2", "\n", "low_freq", "=", "gaussian_blur", "(", "im", ",", "gauss_kernel", ",", "padding", "=", "padding", ")", "\n", "im_gray", "=", "im", "[", ":", ",", "0", ",", "...", "]", "*", "0.299", "+", "im", "[", ":", ",", "1", ",", "...", "]", "*", "0.587", "+", "im", "[", ":", ",", "2", ",", "...", "]", "*", "0.114", "\n", "im_gray", "=", "im_gray", ".", "unsqueeze_", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "low_gray", "=", "gaussian_blur", "(", "im_gray", ",", "gauss_kernel", ",", "padding", "=", "padding", ")", "\n", "return", "torch", ".", "cat", "(", "(", "low_freq", ",", "im_gray", "-", "low_gray", ")", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft": [[7, 12], ["torch.rfft", "torch.log", "torch.sqrt"], "function", ["None"], ["def", "calc_fft", "(", "image", ")", ":", "\n", "    ", "'''image is tensor, N*C*H*W'''", "\n", "fft", "=", "torch", ".", "rfft", "(", "image", ",", "2", ",", "onesided", "=", "False", ")", "\n", "fft_mag", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "sqrt", "(", "fft", "[", "...", ",", "0", "]", "**", "2", "+", "fft", "[", "...", ",", "1", "]", "**", "2", "+", "1e-8", ")", ")", "\n", "return", "fft_mag", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss": [[14, 24], ["torch.nn.L1Loss", "freq_fourier_loss.calc_fft", "freq_fourier_loss.calc_fft", "torch.nn.L1Loss."], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft"], ["", "def", "fft_L1_loss", "(", "fake_image", ",", "real_image", ")", ":", "\n", "    ", "criterion_L1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "fake_image_gray", "=", "fake_image", "[", ":", ",", "0", "]", "*", "0.299", "+", "fake_image", "[", ":", ",", "1", "]", "*", "0.587", "+", "fake_image", "[", ":", ",", "2", "]", "*", "0.114", "\n", "real_image_gray", "=", "real_image", "[", ":", ",", "0", "]", "*", "0.299", "+", "real_image", "[", ":", ",", "1", "]", "*", "0.587", "+", "real_image", "[", ":", ",", "2", "]", "*", "0.114", "\n", "\n", "fake_fft", "=", "calc_fft", "(", "fake_image_gray", ")", "\n", "real_fft", "=", "calc_fft", "(", "real_image_gray", ")", "\n", "loss", "=", "criterion_L1", "(", "fake_fft", ",", "real_fft", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_mask": [[26, 36], ["torch.nn.L1Loss", "freq_fourier_loss.calc_fft", "freq_fourier_loss.calc_fft", "torch.nn.L1Loss."], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft"], ["", "def", "fft_L1_loss_mask", "(", "fake_image", ",", "real_image", ",", "mask", ")", ":", "\n", "    ", "criterion_L1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "fake_image_gray", "=", "fake_image", "[", ":", ",", "0", "]", "*", "0.299", "+", "fake_image", "[", ":", ",", "1", "]", "*", "0.587", "+", "fake_image", "[", ":", ",", "2", "]", "*", "0.114", "\n", "real_image_gray", "=", "real_image", "[", ":", ",", "0", "]", "*", "0.299", "+", "real_image", "[", ":", ",", "1", "]", "*", "0.587", "+", "real_image", "[", ":", ",", "2", "]", "*", "0.114", "\n", "\n", "fake_fft", "=", "calc_fft", "(", "fake_image_gray", ")", "\n", "real_fft", "=", "calc_fft", "(", "real_image_gray", ")", "\n", "loss", "=", "criterion_L1", "(", "fake_fft", "*", "mask", ",", "real_fft", "*", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_color": [[38, 45], ["torch.nn.L1Loss", "freq_fourier_loss.calc_fft", "freq_fourier_loss.calc_fft", "torch.nn.L1Loss."], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.calc_fft"], ["", "def", "fft_L1_loss_color", "(", "fake_image", ",", "real_image", ")", ":", "\n", "    ", "criterion_L1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "fake_fft", "=", "calc_fft", "(", "fake_image", ")", "\n", "real_fft", "=", "calc_fft", "(", "real_image", ")", "\n", "loss", "=", "criterion_L1", "(", "fake_fft", ",", "real_fft", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.decide_circle": [[48, 55], ["torch.ones", "range", "range", "torch.ones"], "function", ["None"], ["", "def", "decide_circle", "(", "N", "=", "4", ",", "L", "=", "256", ",", "r", "=", "96", ",", "size", "=", "256", ")", ":", "\n", "    ", "x", "=", "torch", ".", "ones", "(", "(", "N", ",", "L", ",", "L", ")", ")", "\n", "for", "i", "in", "range", "(", "L", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "L", ")", ":", "\n", "            ", "if", "(", "i", "-", "L", "/", "2", "+", "0.5", ")", "**", "2", "+", "(", "j", "-", "L", "/", "2", "+", "0.5", ")", "**", "2", "<", "r", "**", "2", ":", "\n", "                ", "x", "[", ":", ",", "i", ",", "j", "]", "=", "0", "\n", "", "", "", "return", "x", ",", "torch", ".", "ones", "(", "(", "N", ",", "L", ",", "L", ")", ")", "-", "x", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.psnr": [[14, 20], ["numpy.mean", "math.log10", "math.sqrt"], "function", ["None"], ["(", "img_height", "-", "crop_height", ")", "//", "2", ",", "\n", "(", "img_width", "+", "crop_width", ")", "//", "2", ",", "\n", "(", "img_height", "+", "crop_height", ")", "//", "2", ")", ")", "\n", "\n", "", "def", "resize_short", "(", "image", ",", "imgsize", "=", "256", ")", ":", "\n", "    ", "(", "w", ",", "h", ")", "=", "image", ".", "size", "\n", "if", "w", "<=", "h", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.mse": [[21, 24], ["numpy.mean"], "function", ["None"], ["        ", "h", "=", "int", "(", "h", "*", "imgsize", "/", "w", ")", "\n", "w", "=", "imgsize", "\n", "", "else", ":", "\n", "        ", "w", "=", "int", "(", "w", "*", "imgsize", "/", "h", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.mae": [[25, 28], ["numpy.mean", "abs"], "function", ["None"], ["h", "=", "imgsize", "\n", "", "return", "image", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "", "def", "save_image", "(", "img", ",", "index", ",", "save_dir", ",", "dir", "=", "'/source/'", ",", "save_ending", "=", "'.png'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.crop_center": [[30, 36], ["pil_img.crop"], "function", ["None"], ["img", ".", "cpu", "(", ")", ",", "\n", "save_dir", "+", "dir", "+", "str", "(", "index", ")", "+", "save_ending", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", "\n", ")", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.resize_short": [[37, 46], ["image.resize", "int", "int"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"checkpoint/mountain.pt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_freq\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--folder'", ",", "type", "=", "str", ",", "default", "=", "'img_mountains_val'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsize'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_specific_pairs\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--image_pair_dir'", ",", "type", "=", "str", ",", "default", "=", "'mountain_val/'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.center_crop": [[57, 70], ["min", "int", "int", "int", "int"], "function", ["None"], ["        ", "image_dir", "=", "args", ".", "image_pair_dir", "\n", "source_dir", "=", "[", "image_dir", "+", "'source/'", "+", "image_name", "for", "image_name", "in", "os", ".", "listdir", "(", "image_dir", "+", "'source'", ")", "]", "\n", "ref_dir", "=", "[", "image_dir", "+", "'ref/'", "+", "image_name", "for", "image_name", "in", "os", ".", "listdir", "(", "image_dir", "+", "'ref'", ")", "]", "\n", "image_list", "=", "source_dir", "+", "ref_dir", "# os.listdir( image_dir + 'ref')", "\n", "args", ".", "folder", "=", "''", "\n", "", "else", ":", "\n", "        ", "args", ".", "files", "=", "os", ".", "listdir", "(", "args", ".", "folder", ")", "\n", "image_list", "=", "args", ".", "files", "[", ":", "len", "(", "args", ".", "files", ")", "//", "2", "*", "2", "]", "\n", "", "for", "imgpath", "in", "image_list", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "folder", ",", "imgpath", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "resize_short", "(", "img", ",", "imgsize", ")", "\n", "img", "=", "crop_center", "(", "img", ",", "imgsize", ",", "imgsize", ")", "\n", "img_a", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.eval.ssim": [[71, 73], ["skimage.metrics.structural_similarity"], "function", ["None"], [".", "to", "(", "torch", ".", "float32", ")", "\n", ".", "div", "(", "255", ")", "\n", ".", "add_", "(", "-", "0.5", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.MyLinear.__init__": [[12, 28], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "gain", "=", "2", "**", "(", "0.5", ")", ",", "use_wscale", "=", "False", ",", "lrmul", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "he_std", "=", "gain", "*", "input_size", "**", "(", "-", "0.5", ")", "# He init", "\n", "# Equalized learning rate and custom learning rate multiplier.", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "lrmul", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "output_size", ",", "input_size", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_size", ")", ")", "\n", "self", ".", "b_mul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.MyLinear.forward": [[29, 34], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "bias", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "*", "self", ".", "b_mul", "\n", "", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.MyConv2d.__init__": [[37, 63], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan_layers.Upscale2d", "stylegan_layers.Downscale2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "gain", "=", "2", "**", "(", "0.5", ")", ",", "use_wscale", "=", "False", ",", "lrmul", "=", "1", ",", "bias", "=", "True", ",", "\n", "intermediate", "=", "None", ",", "upscale", "=", "False", ",", "downscale", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "upscale", ":", "\n", "            ", "self", ".", "upscale", "=", "Upscale2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upscale", "=", "None", "\n", "", "if", "downscale", ":", "\n", "            ", "self", ".", "downscale", "=", "Downscale2d", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downscale", "=", "None", "\n", "", "he_std", "=", "gain", "*", "(", "input_channels", "*", "kernel_size", "**", "2", ")", "**", "(", "-", "0.5", ")", "# He init", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "if", "use_wscale", ":", "\n", "            ", "init_std", "=", "1.0", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "            ", "init_std", "=", "he_std", "/", "lrmul", "\n", "self", ".", "w_mul", "=", "lrmul", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "output_channels", ",", "input_channels", ",", "kernel_size", ",", "kernel_size", ")", "*", "init_std", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_channels", ")", ")", "\n", "self", ".", "b_mul", "=", "lrmul", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "intermediate", "=", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.MyConv2d.forward": [[64, 108], ["torch.pad.permute", "torch.pad", "torch.pad", "torch.pad", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "intermediate", "stylegan_layers.MyConv2d.upscale", "min", "torch.conv2d", "torch.conv2d", "torch.conv2d", "bias.view", "min", "torch.pad.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "bias", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "*", "self", ".", "b_mul", "\n", "\n", "", "have_convolution", "=", "False", "\n", "if", "self", ".", "upscale", "is", "not", "None", "and", "min", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "*", "2", ">=", "128", ":", "\n", "# this is the fused upscale + conv from StyleGAN, sadly this seems incompatible with the non-fused way", "\n", "# this really needs to be cleaned up and go into the conv...", "\n", "            ", "w", "=", "self", ".", "weight", "*", "self", ".", "w_mul", "\n", "w", "=", "w", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "# probably applying a conv on w would be more efficient. also this quadruples the weight (average)?!", "\n", "w", "=", "F", ".", "pad", "(", "w", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "w", "=", "w", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "w", ",", "stride", "=", "2", ",", "padding", "=", "(", "w", ".", "size", "(", "-", "1", ")", "-", "1", ")", "//", "2", ")", "\n", "have_convolution", "=", "True", "\n", "", "elif", "self", ".", "upscale", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "upscale", "(", "x", ")", "\n", "\n", "", "downscale", "=", "self", ".", "downscale", "\n", "intermediate", "=", "self", ".", "intermediate", "\n", "if", "downscale", "is", "not", "None", "and", "min", "(", "x", ".", "shape", "[", "2", ":", "]", ")", ">=", "128", ":", "\n", "            ", "w", "=", "self", ".", "weight", "*", "self", ".", "w_mul", "\n", "w", "=", "F", ".", "pad", "(", "w", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "# in contrast to upscale, this is a mean...", "\n", "w", "=", "(", "w", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", "+", "w", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "+", "w", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ")", "*", "0.25", "# avg_pool?", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "w", ",", "stride", "=", "2", ",", "padding", "=", "(", "w", ".", "size", "(", "-", "1", ")", "-", "1", ")", "//", "2", ")", "\n", "have_convolution", "=", "True", "\n", "downscale", "=", "None", "\n", "", "elif", "downscale", "is", "not", "None", ":", "\n", "            ", "assert", "intermediate", "is", "None", "\n", "intermediate", "=", "downscale", "\n", "\n", "", "if", "not", "have_convolution", "and", "intermediate", "is", "None", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "bias", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ")", "\n", "", "elif", "not", "have_convolution", ":", "\n", "            ", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "w_mul", ",", "None", ",", "padding", "=", "self", ".", "kernel_size", "//", "2", ")", "\n", "\n", "", "if", "intermediate", "is", "not", "None", ":", "\n", "            ", "x", "=", "intermediate", "(", "x", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.NoiseLayer.__init__": [[111, 115], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channels", ")", ")", "\n", "self", ".", "noise", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.NoiseLayer.forward": [[116, 126], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size", "x.size", "x.size", "stylegan_layers.NoiseLayer.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", "and", "self", ".", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "elif", "noise", "is", "None", ":", "\n", "# here is a little trick: if you get all the noiselayers and set each", "\n", "# modules .noise attribute, you can have pre-defined noise.", "\n", "# Very useful for analysis", "\n", "            ", "noise", "=", "self", ".", "noise", "\n", "", "x", "=", "x", "+", "self", ".", "weight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "noise", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.StyleMod.__init__": [[128, 133], ["torch.Module.__init__", "stylegan_layers.MyLinear"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ",", "use_wscale", ")", ":", "\n", "        ", "super", "(", "StyleMod", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin", "=", "MyLinear", "(", "latent_size", ",", "\n", "channels", "*", "2", ",", "\n", "gain", "=", "1.0", ",", "use_wscale", "=", "use_wscale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.StyleMod.forward": [[134, 140], ["stylegan_layers.StyleMod.lin", "style.view.view.view", "x.size", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "lin", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", "]", "+", "(", "x", ".", "dim", "(", ")", "-", "2", ")", "*", "[", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.PixelNormLayer.__init__": [[142, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.PixelNormLayer.forward": [[145, 147], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.BlurLayer.__init__": [[150, 161], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "stylegan_layers.BlurLayer.register_buffer", "torch.tensor.sum", "torch.tensor.sum", "torch.tensor.sum"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel", "=", "[", "1", ",", "2", ",", "1", "]", ",", "normalize", "=", "True", ",", "flip", "=", "False", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BlurLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "torch", ".", "tensor", "(", "kernel", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "kernel", "=", "kernel", "[", ":", ",", "None", "]", "*", "kernel", "[", "None", ",", ":", "]", "\n", "kernel", "=", "kernel", "[", "None", ",", "None", "]", "\n", "if", "normalize", ":", "\n", "            ", "kernel", "=", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "", "if", "flip", ":", "\n", "            ", "kernel", "=", "kernel", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.BlurLayer.forward": [[162, 173], ["stylegan_layers.BlurLayer.kernel.expand", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d.size", "int", "torch.conv2d.size", "stylegan_layers.BlurLayer.kernel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# expand kernel channels", "\n", "        ", "kernel", "=", "self", ".", "kernel", ".", "expand", "(", "x", ".", "size", "(", "1", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "kernel", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "int", "(", "(", "self", ".", "kernel", ".", "size", "(", "2", ")", "-", "1", ")", "/", "2", ")", ",", "\n", "groups", "=", "x", ".", "size", "(", "1", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Upscale2d.__init__": [[185, 190], ["torch.Module.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "self", ".", "gain", "=", "gain", "\n", "self", ".", "factor", "=", "factor", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Upscale2d.forward": [[190, 192], ["stylegan_layers.upscale2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.upscale2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "upscale2d", "(", "x", ",", "factor", "=", "self", ".", "factor", ",", "gain", "=", "self", ".", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.G_mapping.__init__": [[195, 218], ["torch.Sequential.__init__", "collections.OrderedDict", "stylegan_layers.PixelNormLayer", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nonlinearity", "=", "'lrelu'", ",", "use_wscale", "=", "True", ")", ":", "\n", "        ", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "torch", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "'lrelu'", ":", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "layers", "=", "[", "\n", "(", "'pixel_norm'", ",", "PixelNormLayer", "(", ")", ")", ",", "\n", "(", "'dense0'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense0_act'", ",", "act", ")", ",", "\n", "(", "'dense1'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense1_act'", ",", "act", ")", ",", "\n", "(", "'dense2'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense2_act'", ",", "act", ")", ",", "\n", "(", "'dense3'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense3_act'", ",", "act", ")", ",", "\n", "(", "'dense4'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense4_act'", ",", "act", ")", ",", "\n", "(", "'dense5'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense5_act'", ",", "act", ")", ",", "\n", "(", "'dense6'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense6_act'", ",", "act", ")", ",", "\n", "(", "'dense7'", ",", "MyLinear", "(", "512", ",", "512", ",", "gain", "=", "gain", ",", "lrmul", "=", "0.01", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'dense7_act'", ",", "act", ")", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.G_mapping.forward": [[219, 224], ["super().forward", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "# Broadcast", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "18", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Truncation.__init__": [[226, 231], ["torch.Module.__init__", "stylegan_layers.Truncation.register_buffer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "avg_latent", ",", "max_layer", "=", "8", ",", "threshold", "=", "0.7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_layer", "=", "max_layer", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "register_buffer", "(", "'avg_latent'", ",", "avg_latent", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Truncation.forward": [[231, 236], ["torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "x.dim", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "3", "\n", "interp", "=", "torch", ".", "lerp", "(", "self", ".", "avg_latent", ",", "x", ",", "self", ".", "threshold", ")", "\n", "do_trunc", "=", "(", "torch", ".", "arange", "(", "x", ".", "size", "(", "1", ")", ")", "<", "self", ".", "max_layer", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "return", "torch", ".", "where", "(", "do_trunc", ",", "interp", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.LayerEpilogue.__init__": [[239, 254], ["torch.Module.__init__", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "collections.OrderedDict", "stylegan_layers.StyleMod", "stylegan_layers.NoiseLayer", "PixelNorm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "if", "use_noise", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'noise'", ",", "NoiseLayer", "(", "channels", ")", ")", ")", "\n", "", "layers", ".", "append", "(", "(", "'activation'", ",", "activation_layer", ")", ")", "\n", "if", "use_pixel_norm", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'pixel_norm'", ",", "PixelNorm", "(", ")", ")", ")", "\n", "", "if", "use_instance_norm", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'instance_norm'", ",", "nn", ".", "InstanceNorm2d", "(", "channels", ")", ")", ")", "\n", "", "self", ".", "top_epi", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "if", "use_styles", ":", "\n", "            ", "self", ".", "style_mod", "=", "StyleMod", "(", "dlatent_size", ",", "channels", ",", "use_wscale", "=", "use_wscale", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "style_mod", "=", "None", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.LayerEpilogue.forward": [[254, 261], ["stylegan_layers.LayerEpilogue.top_epi", "stylegan_layers.LayerEpilogue.style_mod"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "top_epi", "(", "x", ")", "\n", "if", "self", ".", "style_mod", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "style_mod", "(", "x", ",", "dlatents_in_slice", ")", "\n", "", "else", ":", "\n", "            ", "assert", "dlatents_in_slice", "is", "None", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.InputBlock.__init__": [[264, 277], ["torch.Module.__init__", "stylegan_layers.LayerEpilogue", "stylegan_layers.MyConv2d", "stylegan_layers.LayerEpilogue", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan_layers.MyLinear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "dlatent_size", ",", "const_input_layer", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "const_input_layer", "=", "const_input_layer", "\n", "self", ".", "nf", "=", "nf", "\n", "if", "self", ".", "const_input_layer", ":", "\n", "# called 'const' in tf", "\n", "            ", "self", ".", "const", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "nf", ",", "4", ",", "4", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "nf", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dense", "=", "MyLinear", "(", "dlatent_size", ",", "nf", "*", "16", ",", "gain", "=", "gain", "/", "4", ",", "use_wscale", "=", "use_wscale", ")", "# tweak gain to match the official implementation of Progressing GAN", "\n", "", "self", ".", "epi1", "=", "LayerEpilogue", "(", "nf", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "self", ".", "conv", "=", "MyConv2d", "(", "nf", ",", "nf", ",", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "epi2", "=", "LayerEpilogue", "(", "nf", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.InputBlock.forward": [[278, 289], ["dlatents_in_range.size", "stylegan_layers.InputBlock.epi1", "stylegan_layers.InputBlock.conv", "stylegan_layers.InputBlock.epi2", "stylegan_layers.InputBlock.const.expand", "stylegan_layers.InputBlock.dense().view", "stylegan_layers.InputBlock.bias.view", "stylegan_layers.InputBlock.dense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dlatents_in_range", ")", ":", "\n", "        ", "batch_size", "=", "dlatents_in_range", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "const_input_layer", ":", "\n", "            ", "x", "=", "self", ".", "const", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "dense", "(", "dlatents_in_range", "[", ":", ",", "0", "]", ")", ".", "view", "(", "batch_size", ",", "self", ".", "nf", ",", "4", ",", "4", ")", "\n", "", "x", "=", "self", ".", "epi1", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "0", "]", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "epi2", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.GSynthesisBlock.__init__": [[292, 304], ["torch.Module.__init__", "stylegan_layers.MyConv2d", "stylegan_layers.LayerEpilogue", "stylegan_layers.MyConv2d", "stylegan_layers.LayerEpilogue", "stylegan_layers.BlurLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "blur_filter", ",", "dlatent_size", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", ":", "\n", "# 2**res x 2**res # res = 3..resolution_log2", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "blur_filter", ":", "\n", "            ", "blur", "=", "BlurLayer", "(", "blur_filter", ")", "\n", "", "else", ":", "\n", "            ", "blur", "=", "None", "\n", "", "self", ".", "conv0_up", "=", "MyConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "\n", "intermediate", "=", "blur", ",", "upscale", "=", "True", ")", "\n", "self", ".", "epi1", "=", "LayerEpilogue", "(", "out_channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "self", ".", "conv1", "=", "MyConv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "epi2", "=", "LayerEpilogue", "(", "out_channels", ",", "dlatent_size", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "activation_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.GSynthesisBlock.forward": [[305, 311], ["stylegan_layers.GSynthesisBlock.conv0_up", "stylegan_layers.GSynthesisBlock.epi1", "stylegan_layers.GSynthesisBlock.conv1", "stylegan_layers.GSynthesisBlock.epi2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_range", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0_up", "(", "x", ")", "\n", "x", "=", "self", ".", "epi1", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "0", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "epi2", "(", "x", ",", "dlatents_in_range", "[", ":", ",", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.G_synthesis.__init__": [[314, 370], ["torch.Module.__init__", "int", "range", "stylegan_layers.MyConv2d", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "min", "numpy.log2", "stylegan_layers.G_synthesis.__init__.nf"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "use_styles", "=", "True", ",", "# Enable style inputs?", "\n", "const_input_layer", "=", "True", ",", "# First layer is a learned constant?", "\n", "use_noise", "=", "True", ",", "# Enable noise inputs?", "\n", "randomize_noise", "=", "True", ",", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu'", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "use_pixel_norm", "=", "False", ",", "# Enable pixelwise feature vector normalization?", "\n", "use_instance_norm", "=", "True", ",", "# Enable instance normalization?", "\n", "dtype", "=", "torch", ".", "float32", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "'auto'", ",", "# True = fused convolution + scaling, False = separate ops, 'auto' = decide automatically.", "\n", "blur_filter", "=", "[", "1", ",", "2", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "structure", "=", "'auto'", ",", "# 'fixed' = no progressive growing, 'linear' = human-readable, 'recursive' = efficient, 'auto' = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "force_clean_graph", "=", "False", ",", "# True = construct a clean graph that looks nice in TensorBoard, False = default behavior.", "\n", "\n", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "def", "nf", "(", "stage", ")", ":", "\n", "            ", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "", "self", ".", "dlatent_size", "=", "dlatent_size", "\n", "\n", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "if", "is_template_graph", ":", "force_clean_graph", "=", "True", "\n", "if", "force_clean_graph", ":", "randomize_noise", "=", "False", "\n", "if", "structure", "==", "'auto'", ":", "structure", "=", "'linear'", "if", "force_clean_graph", "else", "'recursive'", "\n", "\n", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "torch", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "'lrelu'", ":", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "num_styles", "=", "num_layers", "if", "use_styles", "else", "1", "\n", "torgbs", "=", "[", "]", "\n", "blocks", "=", "[", "]", "\n", "for", "res", "in", "range", "(", "2", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "channels", "=", "nf", "(", "res", "-", "1", ")", "\n", "name", "=", "'{s}x{s}'", ".", "format", "(", "s", "=", "2", "**", "res", ")", "\n", "if", "res", "==", "2", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "name", ",", "\n", "InputBlock", "(", "channels", ",", "dlatent_size", ",", "const_input_layer", ",", "gain", ",", "use_wscale", ",", "\n", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "act", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "name", ",", "\n", "GSynthesisBlock", "(", "last_channels", ",", "channels", ",", "blur_filter", ",", "dlatent_size", ",", "gain", ",", "use_wscale", ",", "use_noise", ",", "use_pixel_norm", ",", "use_instance_norm", ",", "use_styles", ",", "act", ")", ")", ")", "\n", "", "last_channels", "=", "channels", "\n", "", "self", ".", "torgb", "=", "MyConv2d", "(", "channels", ",", "num_channels", ",", "1", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleDict", "(", "OrderedDict", "(", "blocks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.G_synthesis.forward": [[371, 386], ["dlatents_in.size", "enumerate", "stylegan_layers.G_synthesis.torgb", "stylegan_layers.G_synthesis.blocks.values", "m", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dlatents_in", ")", ":", "\n", "\n", "        ", "batch_size", "=", "dlatents_in", ".", "size", "(", "0", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "blocks", ".", "values", "(", ")", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "m", "(", "dlatents_in", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "m", "(", "x", ",", "dlatents_in", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ")", "\n", "\n", "\n", "\n", "", "", "rgb", "=", "self", ".", "torgb", "(", "x", ")", "\n", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.StddevLayer.__init__": [[388, 392], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "group_size", "=", "4", ",", "num_new_features", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "4", "\n", "self", ".", "num_new_features", "=", "1", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.StddevLayer.forward": [[392, 404], ["min", "x.reshape", "y.expand().clone().reshape.expand().clone().reshape.mean().squeeze", "y.expand().clone().reshape.expand().clone().reshape.expand().clone().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y.expand().clone().reshape.expand().clone().reshape.mean", "y.expand().clone().reshape.expand().clone().reshape.mean", "y.expand().clone().reshape.expand().clone().reshape.expand().clone", "y.expand().clone().reshape.expand().clone().reshape.expand"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.clone"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "group_size", "=", "min", "(", "self", ".", "group_size", ",", "b", ")", "\n", "y", "=", "x", ".", "reshape", "(", "[", "group_size", ",", "-", "1", ",", "self", ".", "num_new_features", ",", "\n", "c", "//", "self", ".", "num_new_features", ",", "h", ",", "w", "]", ")", "\n", "y", "=", "y", "-", "y", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "(", "y", "**", "2", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "(", "y", "+", "1e-8", ")", "**", "0.5", "\n", "y", "=", "y", ".", "mean", "(", "[", "3", ",", "4", ",", "5", "]", ",", "keepdim", "=", "True", ")", ".", "squeeze", "(", "3", ")", "# don't keep the meaned-out channels", "\n", "y", "=", "y", ".", "expand", "(", "group_size", ",", "-", "1", ",", "-", "1", ",", "h", ",", "w", ")", ".", "clone", "(", ")", ".", "reshape", "(", "b", ",", "self", ".", "num_new_features", ",", "h", ",", "w", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Downscale2d.__init__": [[406, 416], ["torch.Module.__init__", "isinstance", "stylegan_layers.BlurLayer", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "gain", "=", "gain", "\n", "if", "factor", "==", "2", ":", "\n", "            ", "f", "=", "[", "np", ".", "sqrt", "(", "gain", ")", "/", "factor", "]", "*", "factor", "\n", "self", ".", "blur", "=", "BlurLayer", "(", "kernel", "=", "f", ",", "normalize", "=", "False", ",", "stride", "=", "factor", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "blur", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.Downscale2d.forward": [[417, 434], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "x.dim", "stylegan_layers.Downscale2d.blur"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", "\n", "# 2x2, float32 => downscale using _blur2d().", "\n", "if", "self", ".", "blur", "is", "not", "None", "and", "x", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "            ", "return", "self", ".", "blur", "(", "x", ")", "\n", "\n", "# Apply gain.", "\n", "", "if", "self", ".", "gain", "!=", "1", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "gain", "\n", "\n", "# No-op => early exit.", "\n", "", "if", "factor", "==", "1", ":", "\n", "            ", "return", "x", "\n", "\n", "# Large factor => downscale using tf.nn.avg_pool().", "\n", "# NOTE: Requires tf_config['graph_options.place_pruned_graph']=True to work.", "\n", "", "return", "F", ".", "avg_pool2d", "(", "x", ",", "self", ".", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.DiscriminatorBlock.__init__": [[436, 443], ["torch.Sequential.__init__", "collections.OrderedDict", "stylegan_layers.MyConv2d", "stylegan_layers.BlurLayer", "stylegan_layers.MyConv2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "gain", ",", "use_wscale", ",", "activation_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "MyConv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "# out channels nf(res-1)", "\n", "(", "'act0'", ",", "activation_layer", ")", ",", "\n", "(", "'blur'", ",", "BlurLayer", "(", ")", ")", ",", "\n", "(", "'conv1_down'", ",", "MyConv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "downscale", "=", "True", ")", ")", ",", "\n", "(", "'act1'", ",", "activation_layer", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.View.__init__": [[445, 448], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.View.forward": [[448, 450], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "*", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.DiscriminatorTop.__init__": [[452, 465], ["layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Sequential.__init__", "layers.append", "collections.OrderedDict", "stylegan_layers.MyConv2d", "stylegan_layers.View", "stylegan_layers.MyLinear", "stylegan_layers.MyLinear", "stylegan_layers.StddevLayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mbstd_group_size", ",", "mbstd_num_features", ",", "in_channels", ",", "intermediate_channels", ",", "gain", ",", "use_wscale", ",", "activation_layer", ",", "resolution", "=", "4", ",", "in_channels2", "=", "None", ",", "output_features", "=", "1", ",", "last_gain", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "if", "mbstd_group_size", ">", "1", ":", "\n", "            ", "layers", ".", "append", "(", "(", "'stddev_layer'", ",", "StddevLayer", "(", "mbstd_group_size", ",", "mbstd_num_features", ")", ")", ")", "\n", "", "if", "in_channels2", "is", "None", ":", "\n", "            ", "in_channels2", "=", "in_channels", "\n", "", "layers", ".", "append", "(", "(", "'conv'", ",", "MyConv2d", "(", "in_channels", "+", "mbstd_num_features", ",", "in_channels2", ",", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "layers", ".", "append", "(", "(", "'act0'", ",", "activation_layer", ")", ")", "\n", "layers", ".", "append", "(", "(", "'view'", ",", "View", "(", "-", "1", ")", ")", ")", "\n", "layers", ".", "append", "(", "(", "'dense0'", ",", "MyLinear", "(", "in_channels2", "*", "resolution", "*", "resolution", ",", "intermediate_channels", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "layers", ".", "append", "(", "(", "'act1'", ",", "activation_layer", ")", ")", "\n", "layers", ".", "append", "(", "(", "'dense1'", ",", "MyLinear", "(", "intermediate_channels", ",", "output_features", ",", "gain", "=", "last_gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.D_basic.__init__": [[468, 498], ["int", "torch.Sequential.__init__", "numpy.log2", "min", "collections.OrderedDict", "int", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt", "stylegan_layers.DiscriminatorTop", "stylegan_layers.MyConv2d", "stylegan_layers.DiscriminatorBlock", "range", "stylegan_layers.D_basic.__init__.nf"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2"], ["    ", "def", "__init__", "(", "self", ",", "\n", "#images_in,                          # First input: Images [minibatch, channel, height, width].", "\n", "#labels_in,                          # Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "3", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "1024", ",", "# Input resolution. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu',", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "mbstd_num_features", "=", "1", ",", "# Number of features for the minibatch standard deviation layer.", "\n", "#blur_filter         = [1,2,1],      # Low-pass filter to apply when resampling activations. None = no filtering.", "\n", ")", ":", "\n", "        ", "self", ".", "mbstd_group_size", "=", "4", "\n", "self", ".", "mbstd_num_features", "=", "1", "\n", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "\n", "            ", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "\n", "", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "torch", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "'lrelu'", ":", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "self", ".", "gain", "=", "gain", "\n", "self", ".", "use_wscale", "=", "use_wscale", "\n", "super", "(", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "(", "'fromrgb'", ",", "MyConv2d", "(", "num_channels", ",", "nf", "(", "resolution_log2", "-", "1", ")", ",", "1", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ",", "\n", "(", "'act'", ",", "act", ")", "]", "\n", "+", "[", "(", "'{s}x{s}'", ".", "format", "(", "s", "=", "2", "**", "res", ")", ",", "DiscriminatorBlock", "(", "nf", "(", "res", "-", "1", ")", ",", "nf", "(", "res", "-", "2", ")", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "activation_layer", "=", "act", ")", ")", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", "]", "\n", "+", "[", "(", "'4x4'", ",", "DiscriminatorTop", "(", "mbstd_group_size", ",", "mbstd_num_features", ",", "nf", "(", "2", ")", ",", "nf", "(", "2", ")", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "activation_layer", "=", "act", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.stylegan_layers.upscale2d": [[174, 183], ["x.contiguous().view.dim", "x.contiguous().view.view().expand", "x.contiguous().view.contiguous().view", "x.contiguous().view.view", "x.contiguous().view.contiguous"], "function", ["None"], ["", "", "def", "upscale2d", "(", "x", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "    ", "assert", "x", ".", "dim", "(", ")", "==", "4", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "", "if", "factor", "!=", "1", ":", "\n", "        ", "shape", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ",", "shape", "[", "3", "]", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "factor", ",", "-", "1", ",", "factor", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "factor", "*", "shape", "[", "2", "]", ",", "factor", "*", "shape", "[", "3", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.read_image.image_reader": [[5, 31], ["torchvision.transforms.Compose", "transforms.Compose.", "image.resize.unsqueeze", "open", "PIL.Image.open", "image.resize.convert", "image.resize.resize", "min", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize"], ["def", "image_reader", "(", "img_path", ",", "resize", "=", "None", ",", "crop_size", "=", "None", ")", ":", "\n", "\n", "    ", "with", "open", "(", "img_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "f", ")", "\n", "image", "=", "image", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "if", "resize", "!=", "None", ":", "\n", "        ", "image", "=", "image", ".", "resize", "(", "(", "resize", ",", "resize", ")", ")", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "if", "crop_size", "!=", "None", ":", "\n", "        ", "crop_size", "=", "min", "(", "image", ".", "size", ")", "\n", "# print(crop_size)", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "Resize", "(", "1024", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "", "image", "=", "transform", "(", "image", ")", "\n", "\n", "\n", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.perceptual_model.VGG16_for_Perceptual.__init__": [[7, 30], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "torchvision.models.vgg16", "perceptual_model.VGG16_for_Perceptual.slice0.add_module", "perceptual_model.VGG16_for_Perceptual.slice1.add_module", "perceptual_model.VGG16_for_Perceptual.slice2.add_module", "perceptual_model.VGG16_for_Perceptual.slice3.add_module", "perceptual_model.VGG16_for_Perceptual.parameters", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "n_layers", "=", "[", "2", ",", "4", ",", "14", ",", "21", "]", ")", ":", "\n", "        ", "super", "(", "VGG16_for_Perceptual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "\n", "self", ".", "slice0", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "n_layers", "[", "0", "]", ")", ":", "#relu1_1", "\n", "            ", "self", ".", "slice0", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "n_layers", "[", "0", "]", ",", "n_layers", "[", "1", "]", ")", ":", "#relu1_2", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "n_layers", "[", "1", "]", ",", "n_layers", "[", "2", "]", ")", ":", "#relu3_2", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "n_layers", "[", "2", "]", ",", "n_layers", "[", "3", "]", ")", ":", "#relu4_2", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "\n", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.perceptual_model.VGG16_for_Perceptual.forward": [[33, 40], ["perceptual_model.VGG16_for_Perceptual.slice0", "perceptual_model.VGG16_for_Perceptual.slice1", "perceptual_model.VGG16_for_Perceptual.slice2", "perceptual_model.VGG16_for_Perceptual.slice3"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h0", "=", "self", ".", "slice0", "(", "x", ")", "\n", "h1", "=", "self", ".", "slice1", "(", "h0", ")", "\n", "h2", "=", "self", ".", "slice2", "(", "h1", ")", "\n", "h3", "=", "self", ".", "slice3", "(", "h2", ")", "\n", "\n", "return", "h0", ",", "h1", ",", "h2", ",", "h3", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq_batch.main": [[22, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.makedirs", "argparse.ArgumentParser.parse_args", "utils_freq.get_gaussian_kernel().cuda", "torch.Sequential", "nn.Sequential.load_state_dict", "nn.Sequential.eval", "nn.Sequential.to", "os.listdir", "enumerate", "collections.OrderedDict", "torch.load", "torch.load", "torch.load", "torch.load", "read_image.image_reader", "img.to.to", "torch.MSELoss", "img.to.clone", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample.", "perceptual_model.VGG16_for_Perceptual().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Adam", "print", "print", "range", "utils_freq.get_gaussian_kernel", "parser.parse_args.src_im.split", "os.path.exists", "os.makedirs", "optim.Adam.zero_grad", "g_synthesis", "encode_image_freq_batch.caluclate_loss", "loss.backward", "optim.Adam.step", "loss.detach().cpu().numpy", "perceptual_loss.detach().cpu().numpy", "mse_loss.detach().cpu().numpy", "loss_list.append", "perceptual_model.VGG16_for_Perceptual", "print", "torchvision.utils.save_image", "numpy.save", "stylegan_layers.G_mapping", "stylegan_layers.G_synthesis", "loss.detach().cpu", "perceptual_loss.detach().cpu", "mse_loss.detach().cpu", "g_synthesis.clamp", "torch.zeros.detach().cpu().numpy", "loss.detach", "perceptual_loss.detach", "mse_loss.detach", "torch.zeros.detach().cpu", "torch.zeros.detach"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.read_image.image_reader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.clone", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_kernel", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq.caluclate_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["def", "main", "(", ")", ":", "\n", "     ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Find latent representation of reference images using perceptual loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "1", ",", "help", "=", "'Batch size for generator and perceptual model'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resolution'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--src_im_list'", ",", "default", "=", "\"source_image/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_file'", ",", "default", "=", "\"weight_files/pytorch/karras2019stylegan-ffhq-1024x1024.pt\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "default", "=", "5000", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_recon_blur'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'Weight for image reconstruction loss blur'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_recon_fft'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'Weight for image reconstruction loss fft '", ")", "\n", "parser", ".", "add_argument", "(", "'--gauss_size'", ",", "type", "=", "int", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--radius'", ",", "type", "=", "int", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--w_scale'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "\n", "\n", "save_dir_resize", "=", "'source_image_resize'", "\n", "os", ".", "makedirs", "(", "save_dir_resize", ",", "exist_ok", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "gauss_kernel", "=", "utils_freq", ".", "get_gaussian_kernel", "(", "args", ".", "gauss_size", ")", ".", "cuda", "(", ")", "\n", "\n", "g_all", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'g_mapping'", ",", "G_mapping", "(", ")", ")", ",", "\n", "#('truncation', Truncation(avg_latent)),", "\n", "(", "'g_synthesis'", ",", "G_synthesis", "(", "resolution", "=", "args", ".", "resolution", ")", ")", "\n", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "g_all", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "weight_file", ",", "map_location", "=", "device", ")", ")", "\n", "g_all", ".", "eval", "(", ")", "\n", "g_all", ".", "to", "(", "device", ")", "\n", "\n", "\n", "g_mapping", ",", "g_synthesis", "=", "g_all", "[", "0", "]", ",", "g_all", "[", "1", "]", "\n", "list_name", "=", "os", ".", "listdir", "(", "args", ".", "src_im_list", ")", "\n", "for", "image_index", ",", "name", "in", "enumerate", "(", "list_name", ")", ":", "\n", "         ", "args", ".", "src_im", "=", "name", "\n", "name", "=", "args", ".", "src_im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img", "=", "image_reader", "(", "args", ".", "src_im_list", "+", "args", ".", "src_im", ",", "crop_size", "=", "0", ")", "#(1,3,1024,1024) -1~1", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "MSE_Loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"mean\"", ")", "\n", "\n", "img_p", "=", "img", ".", "clone", "(", ")", "#Perceptual loss ", "\n", "upsample2d", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "256", "/", "args", ".", "resolution", ",", "mode", "=", "'bilinear'", ")", "\n", "img_p", "=", "upsample2d", "(", "img_p", ")", "\n", "\n", "perceptual_net", "=", "VGG16_for_Perceptual", "(", "n_layers", "=", "[", "2", ",", "4", ",", "14", ",", "21", "]", ")", ".", "to", "(", "device", ")", "\n", "dlatent", "=", "torch", ".", "zeros", "(", "(", "1", ",", "18", ",", "512", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "{", "dlatent", "}", ",", "lr", "=", "0.01", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ")", "\n", "\n", "print", "(", "\"Start\"", ")", "\n", "loss_list", "=", "[", "]", "\n", "dirs", "=", "'save'", "+", "args", ".", "src_im_list", "[", "6", ":", "]", "+", "'/encode_freq_'", "+", "name", "\n", "print", "(", "dirs", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "               ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "", "for", "i", "in", "range", "(", "args", ".", "iteration", ")", ":", "\n", "              ", "optimizer", ".", "zero_grad", "(", ")", "\n", "synth_img", "=", "g_synthesis", "(", "dlatent", ")", "\n", "synth_img", "=", "(", "synth_img", "+", "1.0", ")", "/", "2.0", "\n", "mse_loss", ",", "perceptual_loss", "=", "caluclate_loss", "(", "synth_img", ",", "img", ",", "perceptual_net", ",", "img_p", ",", "MSE_Loss", ",", "upsample2d", ",", "gauss_kernel", ",", "args", ")", "\n", "loss", "=", "mse_loss", "+", "perceptual_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_p", "=", "perceptual_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_m", "=", "mse_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "loss_list", ".", "append", "(", "loss_np", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                         ", "print", "(", "\"image {} iter{}: loss -- {},  recon_loss --{},  percep_loss --{}\"", ".", "format", "(", "image_index", ",", "i", ",", "loss_np", ",", "loss_m", ",", "loss_p", ")", ")", "\n", "", "if", "(", "i", "%", "4990", "==", "0", "or", "i", "==", "args", ".", "iteration", "-", "1", ")", "and", "i", "!=", "0", ":", "\n", "                         ", "save_image", "(", "synth_img", ".", "clamp", "(", "0", ",", "1", ")", ",", "dirs", "+", "\"/{}.png\"", ".", "format", "(", "i", ")", ")", "\n", "np", ".", "save", "(", "\"latent_W/{}.npy\"", ".", "format", "(", "name", ")", ",", "dlatent", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq_batch.caluclate_loss": [[106, 132], ["MSE_Loss", "utils_freq.find_fake_freq", "utils_freq.find_fake_freq", "torch.l1_loss", "utils_freq.freq_fourier_loss.fft_L1_loss_color", "perceptual_net", "upsample2d", "perceptual_net", "MSE_Loss", "MSE_Loss", "MSE_Loss", "MSE_Loss"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_color"], ["", "", "", "", "def", "caluclate_loss", "(", "synth_img", ",", "img", ",", "perceptual_net", ",", "img_p", ",", "MSE_Loss", ",", "upsample2d", ",", "gauss_kernel", ",", "args", ")", ":", "\n", "#calculate MSE Loss", "\n", "     ", "mse_loss", "=", "MSE_Loss", "(", "synth_img", ",", "img", ")", "# (lamda_mse/N)*||G(w)-I||^2", "\n", "\n", "x_real_freq", "=", "utils_freq", ".", "find_fake_freq", "(", "img", ",", "gauss_kernel", ")", "\n", "x_rec2_freq", "=", "utils_freq", ".", "find_fake_freq", "(", "synth_img", ",", "gauss_kernel", ")", "\n", "loss_rec_blur", "=", "F", ".", "l1_loss", "(", "x_rec2_freq", ",", "x_real_freq", ")", "\n", "loss_recon_fft", "=", "fft_L1_loss_color", "(", "synth_img", ",", "synth_img", ")", "\n", "\n", "mse_loss", "+=", "args", ".", "w_scale", "*", "(", "args", ".", "lambda_recon_blur", "*", "loss_rec_blur", "+", "args", ".", "lambda_recon_fft", "*", "loss_recon_fft", ")", "\n", "\n", "\n", "\n", "\n", "#calculate Perceptual Loss", "\n", "real_0", ",", "real_1", ",", "real_2", ",", "real_3", "=", "perceptual_net", "(", "img_p", ")", "\n", "synth_p", "=", "upsample2d", "(", "synth_img", ")", "#(1,3,256,256)", "\n", "synth_0", ",", "synth_1", ",", "synth_2", ",", "synth_3", "=", "perceptual_net", "(", "synth_p", ")", "\n", "\n", "perceptual_loss", "=", "0", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_0", ",", "real_0", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_1", ",", "real_1", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_2", ",", "real_2", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_3", ",", "real_3", ")", "\n", "\n", "return", "mse_loss", ",", "perceptual_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq.main": [[22, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils_freq.get_gaussian_kernel().cuda", "torch.Sequential", "nn.Sequential.load_state_dict", "nn.Sequential.eval", "nn.Sequential.to", "read_image.image_reader", "img.to.to", "torch.MSELoss", "img.to.clone", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample.", "perceptual_model.VGG16_for_Perceptual().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Adam", "print", "range", "collections.OrderedDict", "torch.load", "torch.load", "torch.load", "torch.load", "parser.parse_args.src_im.split", "os.path.exists", "os.makedirs", "optim.Adam.zero_grad", "g_synthesis", "encode_image_freq.caluclate_loss", "loss.backward", "optim.Adam.step", "loss.detach().cpu().numpy", "perceptual_loss.detach().cpu().numpy", "mse_loss.detach().cpu().numpy", "loss_list.append", "utils_freq.get_gaussian_kernel", "perceptual_model.VGG16_for_Perceptual", "print", "torchvision.utils.save_image", "numpy.save", "loss.detach().cpu", "perceptual_loss.detach().cpu", "mse_loss.detach().cpu", "g_synthesis.clamp", "torch.zeros.detach().cpu().numpy", "stylegan_layers.G_mapping", "stylegan_layers.G_synthesis", "loss.detach", "perceptual_loss.detach", "mse_loss.detach", "torch.zeros.detach().cpu", "torch.zeros.detach"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.read_image.image_reader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.clone", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq.caluclate_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_kernel", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["def", "main", "(", ")", ":", "\n", "     ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Find latent representation of reference images using perceptual loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "1", ",", "help", "=", "'Batch size for generator and perceptual model'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resolution'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--src_im'", ",", "default", "=", "\"cart6.png\"", ")", "\n", "parser", ".", "add_argument", "(", "'--src_dir'", ",", "default", "=", "\"source_image/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_file'", ",", "default", "=", "\"weight_files/pytorch/karras2019stylegan-ffhq-1024x1024.pt\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "default", "=", "5000", ",", "type", "=", "int", ")", "# 1000", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_recon_blur'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'Weight for image reconstruction loss blur'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_recon_fft'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'Weight for image reconstruction loss fft '", ")", "\n", "parser", ".", "add_argument", "(", "'--gauss_size'", ",", "type", "=", "int", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--radius'", ",", "type", "=", "int", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--w_scale'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "gauss_kernel", "=", "utils_freq", ".", "get_gaussian_kernel", "(", "args", ".", "gauss_size", ")", ".", "cuda", "(", ")", "\n", "\n", "g_all", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'g_mapping'", ",", "G_mapping", "(", ")", ")", ",", "\n", "#('truncation', Truncation(avg_latent)),", "\n", "(", "'g_synthesis'", ",", "G_synthesis", "(", "resolution", "=", "args", ".", "resolution", ")", ")", "\n", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "g_all", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "weight_file", ",", "map_location", "=", "device", ")", ")", "\n", "g_all", ".", "eval", "(", ")", "\n", "g_all", ".", "to", "(", "device", ")", "\n", "\n", "\n", "g_mapping", ",", "g_synthesis", "=", "g_all", "[", "0", "]", ",", "g_all", "[", "1", "]", "\n", "name", "=", "args", ".", "src_im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img", "=", "image_reader", "(", "args", ".", "src_dir", "+", "args", ".", "src_im", ",", "crop_size", "=", "0", ")", "#(1,3,1024,1024) -1~1 ", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "MSE_Loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"mean\"", ")", "\n", "\n", "img_p", "=", "img", ".", "clone", "(", ")", "#Perceptual loss ", "\n", "upsample2d", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "256", "/", "args", ".", "resolution", ",", "mode", "=", "'bilinear'", ")", "\n", "img_p", "=", "upsample2d", "(", "img_p", ")", "\n", "\n", "perceptual_net", "=", "VGG16_for_Perceptual", "(", "n_layers", "=", "[", "2", ",", "4", ",", "14", ",", "21", "]", ")", ".", "to", "(", "device", ")", "\n", "dlatent", "=", "torch", ".", "zeros", "(", "(", "1", ",", "18", ",", "512", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "{", "dlatent", "}", ",", "lr", "=", "0.01", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ")", "\n", "\n", "print", "(", "\"Start\"", ")", "\n", "loss_list", "=", "[", "]", "\n", "dirs", "=", "'save_image/encode_freq_'", "+", "name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "          ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "", "for", "i", "in", "range", "(", "args", ".", "iteration", ")", ":", "\n", "          ", "optimizer", ".", "zero_grad", "(", ")", "\n", "synth_img", "=", "g_synthesis", "(", "dlatent", ")", "\n", "synth_img", "=", "(", "synth_img", "+", "1.0", ")", "/", "2.0", "\n", "mse_loss", ",", "perceptual_loss", "=", "caluclate_loss", "(", "synth_img", ",", "img", ",", "perceptual_net", ",", "img_p", ",", "MSE_Loss", ",", "upsample2d", ",", "gauss_kernel", ",", "args", ")", "\n", "loss", "=", "mse_loss", "+", "perceptual_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_p", "=", "perceptual_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_m", "=", "mse_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "loss_list", ".", "append", "(", "loss_np", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "               ", "print", "(", "\"iter{}: loss -- {},  recon_loss --{},  percep_loss --{}\"", ".", "format", "(", "i", ",", "loss_np", ",", "loss_m", ",", "loss_p", ")", ")", "\n", "", "if", "(", "i", "%", "4990", "==", "0", "or", "i", "==", "args", ".", "iteration", "-", "1", ")", "and", "i", "!=", "0", ":", "# 10", "\n", "               ", "save_image", "(", "synth_img", ".", "clamp", "(", "0", ",", "1", ")", ",", "dirs", "+", "\"/{}.png\"", ".", "format", "(", "i", ")", ")", "\n", "np", ".", "save", "(", "\"latent_W/{}.npy\"", ".", "format", "(", "name", ")", ",", "dlatent", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.Image2StlyleGAN.encode_image_freq.caluclate_loss": [[111, 137], ["MSE_Loss", "utils_freq.find_fake_freq", "utils_freq.find_fake_freq", "torch.l1_loss", "utils_freq.freq_fourier_loss.fft_L1_loss_color", "perceptual_net", "upsample2d", "perceptual_net", "MSE_Loss", "MSE_Loss", "MSE_Loss", "MSE_Loss"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_color"], ["", "", "", "def", "caluclate_loss", "(", "synth_img", ",", "img", ",", "perceptual_net", ",", "img_p", ",", "MSE_Loss", ",", "upsample2d", ",", "gauss_kernel", ",", "args", ")", ":", "\n", "#calculate MSE Loss", "\n", "     ", "mse_loss", "=", "MSE_Loss", "(", "synth_img", ",", "img", ")", "# (lamda_mse/N)*||G(w)-I||^2", "\n", "\n", "x_real_freq", "=", "utils_freq", ".", "find_fake_freq", "(", "img", ",", "gauss_kernel", ")", "# , find=True, index=index", "\n", "x_rec2_freq", "=", "utils_freq", ".", "find_fake_freq", "(", "synth_img", ",", "gauss_kernel", ")", "\n", "loss_rec_blur", "=", "F", ".", "l1_loss", "(", "x_rec2_freq", ",", "x_real_freq", ")", "\n", "loss_recon_fft", "=", "fft_L1_loss_color", "(", "synth_img", ",", "synth_img", ")", "\n", "\n", "mse_loss", "+=", "args", ".", "w_scale", "*", "(", "args", ".", "lambda_recon_blur", "*", "loss_rec_blur", "+", "args", ".", "lambda_recon_fft", "*", "loss_recon_fft", ")", "\n", "\n", "\n", "\n", "\n", "#calculate Perceptual Loss", "\n", "real_0", ",", "real_1", ",", "real_2", ",", "real_3", "=", "perceptual_net", "(", "img_p", ")", "\n", "synth_p", "=", "upsample2d", "(", "synth_img", ")", "#(1,3,256,256)", "\n", "synth_0", ",", "synth_1", ",", "synth_2", ",", "synth_3", "=", "perceptual_net", "(", "synth_p", ")", "\n", "\n", "perceptual_loss", "=", "0", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_0", ",", "real_0", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_1", ",", "real_1", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_2", ",", "real_2", ")", "\n", "perceptual_loss", "+=", "MSE_Loss", "(", "synth_3", ",", "real_3", ")", "\n", "\n", "return", "mse_loss", ",", "perceptual_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.EasyDict.__getattr__": [[39, 44], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.EasyDict.__setattr__": [[45, 47], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.EasyDict.__delattr__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.__init__": [[55, 67], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.__enter__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.__exit__": [[71, 73], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.write": [[74, 86], ["util.Logger.stdout.write", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.flush"], ["", "def", "write", "(", "self", ",", "text", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.flush": [[87, 93], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.close": [[94, 106], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.format_time": [[112, 124], ["int", "numpy.rint"], "function", ["None"], ["", "", "", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.ask_yes_no": [[126, 134], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.tuple_product": [[136, 144], ["None"], "function", ["None"], ["", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_dtype_and_ctype": [[160, 181], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_pickleable": [[183, 190], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_from_obj_name": [[195, 234], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module"], ["", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module": [[236, 244], ["obj_name.split", "getattr"], "function", ["None"], ["", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_by_name": [[246, 250], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module"], ["", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.call_func_by_name": [[252, 258], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_by_name"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_dir_by_obj_name": [[260, 264], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_from_obj_name"], ["", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function": [[266, 269], ["callable"], "function", ["None"], ["", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_top_level_function_name": [[271, 275], ["util.is_top_level_function"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function"], ["", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "return", "obj", ".", "__module__", "+", "\".\"", "+", "obj", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.list_dir_recursively_with_ignore": [[280, 311], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.copy_files_and_create_dirs": [[313, 324], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_url": [[329, 343], ["requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["", "", "def", "is_url", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.open_url": [[345, 406], ["util.is_url", "hashlib.md5().hexdigest", "io.BytesIO", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "hashlib.md5", "os.path.join", "len", "open", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_url", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.write"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "is_url", "(", "url", ")", "\n", "assert", "num_attempts", ">=", "1", "\n", "\n", "# Lookup from cache.", "\n", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "return", "open", "(", "cache_files", "[", "0", "]", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive quota exceeded\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "\n", "# Return data as file object.", "\n", "", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.__init__": [[35, 54], ["time.time", "time.time", "datetime.datetime.now().isoformat", "open", "pprint.pprint", "open", "pprint.pprint", "os.path.join", "os.path.join", "datetime.datetime.now", "config_module.__dict__.items", "k.startswith", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "submit_config", ":", "submit", ".", "SubmitConfig", ",", "config_module", ":", "types", ".", "ModuleType", "=", "None", ",", "max_epoch", ":", "Any", "=", "None", ")", ":", "\n", "        ", "self", ".", "submit_config", "=", "submit_config", "\n", "self", ".", "should_stop_flag", "=", "False", "\n", "self", ".", "has_closed", "=", "False", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_interval", "=", "0.0", "\n", "self", ".", "max_epoch", "=", "max_epoch", "\n", "\n", "# pretty print the all the relevant content of the config module to a text file", "\n", "if", "config_module", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "filtered_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "config_module", ".", "__dict__", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "\"_\"", ")", "and", "not", "isinstance", "(", "v", ",", "(", "types", ".", "ModuleType", ",", "types", ".", "FunctionType", ",", "types", ".", "LambdaType", ",", "submit", ".", "SubmitConfig", ",", "type", ")", ")", "}", "\n", "pprint", ".", "pprint", "(", "filtered_dict", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "# write out details about the run to a text file", "\n", "", "", "self", ".", "run_txt_data", "=", "{", "\"task_name\"", ":", "submit_config", ".", "task_name", ",", "\"host_name\"", ":", "submit_config", ".", "host_name", ",", "\"start_time\"", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.__enter__": [[55, 57], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", "->", "\"RunContext\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.__exit__": [[58, 60], ["run_context.RunContext.close"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update": [[61, 73], ["time.time", "os.path.exists", "time.time", "os.path.join"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "loss", ":", "Any", "=", "0", ",", "cur_epoch", ":", "Any", "=", "0", ",", "max_epoch", ":", "Any", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Do general housekeeping and keep the state of the context up-to-date.\n        Should be called often enough but not in a tight loop.\"\"\"", "\n", "assert", "not", "self", ".", "has_closed", "\n", "\n", "self", ".", "last_update_interval", "=", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"abort.txt\"", ")", ")", ":", "\n", "            ", "self", ".", "should_stop_flag", "=", "True", "\n", "\n", "", "max_epoch_val", "=", "self", ".", "max_epoch", "if", "max_epoch", "is", "None", "else", "max_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.should_stop": [[74, 77], ["None"], "methods", ["None"], ["", "def", "should_stop", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Tell whether a stopping condition has been triggered one way or another.\"\"\"", "\n", "return", "self", ".", "should_stop_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.get_time_since_start": [[78, 81], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_start", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the creation of the context.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.get_time_since_last_update": [[82, 85], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_last_update", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the last call to update.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.get_last_update_interval": [[86, 89], ["None"], "methods", ["None"], ["", "def", "get_last_update_interval", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time passed between the previous two calls to update.\"\"\"", "\n", "return", "self", ".", "last_update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close": [[90, 100], ["datetime.datetime.now().isoformat", "open", "pprint.pprint", "datetime.datetime.now", "os.path.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Close the context and clean up.\n        Should only be called once.\"\"\"", "\n", "if", "not", "self", ".", "has_closed", ":", "\n", "# update the run.txt with stopping time", "\n", "            ", "self", ".", "run_txt_data", "[", "\"stop_time\"", "]", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "", "self", ".", "has_closed", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.SubmitConfig.__init__": [[75, 99], ["util.EasyDict.__init__"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# run (set these)", "\n", "self", ".", "run_dir_root", "=", "\"\"", "# should always be passed through get_path_from_template", "\n", "self", ".", "run_desc", "=", "\"\"", "\n", "self", ".", "run_dir_ignore", "=", "[", "\"__pycache__\"", ",", "\"*.pyproj\"", ",", "\"*.sln\"", ",", "\"*.suo\"", ",", "\".cache\"", ",", "\".idea\"", ",", "\".vs\"", ",", "\".vscode\"", "]", "\n", "self", ".", "run_dir_extra_files", "=", "None", "\n", "\n", "# submit (set these)", "\n", "self", ".", "submit_target", "=", "SubmitTarget", ".", "LOCAL", "\n", "self", ".", "num_gpus", "=", "1", "\n", "self", ".", "print_info", "=", "False", "\n", "self", ".", "ask_confirmation", "=", "False", "\n", "\n", "# (automatically populated)", "\n", "self", ".", "run_id", "=", "None", "\n", "self", ".", "run_name", "=", "None", "\n", "self", ".", "run_dir", "=", "None", "\n", "self", ".", "run_func_name", "=", "None", "\n", "self", ".", "run_func_kwargs", "=", "None", "\n", "self", ".", "user_name", "=", "None", "\n", "self", ".", "task_name", "=", "None", "\n", "self", ".", "host_name", "=", "\"localhost\"", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_path_from_template": [[101, 121], ["path_template.replace.replace", "submit.get_user_name", "str", "platform.system", "pathlib.PureWindowsPath", "str", "RuntimeError", "platform.system", "RuntimeError", "pathlib.PurePosixPath"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_user_name"], ["", "", "def", "get_path_from_template", "(", "path_template", ":", "str", ",", "path_type", ":", "PathType", "=", "PathType", ".", "AUTO", ")", "->", "str", ":", "\n", "    ", "\"\"\"Replace tags in the given path template and return either Windows or Linux formatted path.\"\"\"", "\n", "# automatically select path type depending on running OS", "\n", "if", "path_type", "==", "PathType", ".", "AUTO", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "            ", "path_type", "=", "PathType", ".", "WINDOWS", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Linux\"", ":", "\n", "            ", "path_type", "=", "PathType", ".", "LINUX", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n", "", "", "path_template", "=", "path_template", ".", "replace", "(", "\"<USERNAME>\"", ",", "get_user_name", "(", ")", ")", "\n", "\n", "# return correctly formatted path", "\n", "if", "path_type", "==", "PathType", ".", "WINDOWS", ":", "\n", "        ", "return", "str", "(", "pathlib", ".", "PureWindowsPath", "(", "path_template", ")", ")", "\n", "", "elif", "path_type", "==", "PathType", ".", "LINUX", ":", "\n", "        ", "return", "str", "(", "pathlib", ".", "PurePosixPath", "(", "path_template", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_template_from_path": [[123, 128], ["path.replace.replace"], "function", ["None"], ["", "", "def", "get_template_from_path", "(", "path", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert a normal path back to its template representation.\"\"\"", "\n", "# replace all path parts with the template tags", "\n", "path", "=", "path", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.convert_path": [[130, 135], ["submit.get_template_from_path", "submit.get_path_from_template"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_path_from_template"], ["", "def", "convert_path", "(", "path", ":", "str", ",", "path_type", ":", "PathType", "=", "PathType", ".", "AUTO", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert a normal path to template and the convert it back to a normal path with given path type.\"\"\"", "\n", "path_template", "=", "get_template_from_path", "(", "path", ")", "\n", "path", "=", "get_path_from_template", "(", "path_template", ",", "path_type", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.set_user_name_override": [[137, 141], ["None"], "function", ["None"], ["", "def", "set_user_name_override", "(", "name", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Set the global username override value.\"\"\"", "\n", "global", "_user_name_override", "\n", "_user_name_override", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_user_name": [[143, 157], ["platform.system", "os.getlogin", "platform.system", "RuntimeError", "pwd.getpwuid", "os.geteuid"], "function", ["None"], ["", "def", "get_user_name", "(", ")", ":", "\n", "    ", "\"\"\"Get the current user name.\"\"\"", "\n", "if", "_user_name_override", "is", "not", "None", ":", "\n", "        ", "return", "_user_name_override", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "        ", "return", "os", ".", "getlogin", "(", ")", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Linux\"", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "pwd", "# pylint: disable=import-error", "\n", "return", "pwd", ".", "getpwuid", "(", "os", ".", "geteuid", "(", ")", ")", ".", "pw_name", "# pylint: disable=no-member", "\n", "", "except", ":", "\n", "            ", "return", "\"unknown\"", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._create_run_dir_local": [[159, 178], ["submit.get_path_from_template", "submit._get_next_run_id_local", "os.path.join", "os.path.exists", "print", "os.makedirs", "os.path.exists", "print", "os.makedirs", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_path_from_template", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._get_next_run_id_local"], ["", "", "def", "_create_run_dir_local", "(", "submit_config", ":", "SubmitConfig", ")", "->", "str", ":", "\n", "    ", "\"\"\"Create a new run dir with increasing ID number at the start.\"\"\"", "\n", "run_dir_root", "=", "get_path_from_template", "(", "submit_config", ".", "run_dir_root", ",", "PathType", ".", "AUTO", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "run_dir_root", ")", ":", "\n", "        ", "print", "(", "\"Creating the run dir root: {}\"", ".", "format", "(", "run_dir_root", ")", ")", "\n", "os", ".", "makedirs", "(", "run_dir_root", ")", "\n", "\n", "", "submit_config", ".", "run_id", "=", "_get_next_run_id_local", "(", "run_dir_root", ")", "\n", "submit_config", ".", "run_name", "=", "\"{0:05d}-{1}\"", ".", "format", "(", "submit_config", ".", "run_id", ",", "submit_config", ".", "run_desc", ")", "\n", "run_dir", "=", "os", ".", "path", ".", "join", "(", "run_dir_root", ",", "submit_config", ".", "run_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "run_dir", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"The run dir already exists! ({0})\"", ".", "format", "(", "run_dir", ")", ")", "\n", "\n", "", "print", "(", "\"Creating the run dir: {}\"", ".", "format", "(", "run_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "run_dir", ")", "\n", "\n", "return", "run_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._get_next_run_id_local": [[180, 194], ["re.compile", "re.compile.match", "os.listdir", "os.path.isdir", "int", "max", "os.path.join", "r.match.group"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir"], ["", "def", "_get_next_run_id_local", "(", "run_dir_root", ":", "str", ")", "->", "int", ":", "\n", "    ", "\"\"\"Reads all directory names in a given directory (non-recursive) and returns the next (increasing) run id. Assumes IDs are numbers at the start of the directory names.\"\"\"", "\n", "dir_names", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "run_dir_root", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "run_dir_root", ",", "d", ")", ")", "]", "\n", "r", "=", "re", ".", "compile", "(", "\"^\\\\d+\"", ")", "# match one or more digits at the start of the string", "\n", "run_id", "=", "0", "\n", "\n", "for", "dir_name", "in", "dir_names", ":", "\n", "        ", "m", "=", "r", ".", "match", "(", "dir_name", ")", "\n", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "i", "=", "int", "(", "m", ".", "group", "(", ")", ")", "\n", "run_id", "=", "max", "(", "run_id", ",", "i", "+", "1", ")", "\n", "\n", "", "", "return", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._populate_run_dir": [[196, 222], ["print", "util.get_module_dir_by_obj_name", "range", "util.list_dir_recursively_with_ignore", "util.get_module_dir_by_obj_name", "util.list_dir_recursively_with_ignore", "util.copy_files_and_create_dirs", "pickle.dump", "os.path.dirname", "open", "open", "pprint.pprint", "submit_config.run_func_name.count", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.copy_files_and_create_dirs"], ["", "def", "_populate_run_dir", "(", "run_dir", ":", "str", ",", "submit_config", ":", "SubmitConfig", ")", "->", "None", ":", "\n", "    ", "\"\"\"Copy all necessary files into the run dir. Assumes that the dir exists, is local, and is writable.\"\"\"", "\n", "print", "(", "\"Copying files to the run dir\"", ")", "\n", "files", "=", "[", "]", "\n", "\n", "run_func_module_dir_path", "=", "util", ".", "get_module_dir_by_obj_name", "(", "submit_config", ".", "run_func_name", ")", "\n", "assert", "'.'", "in", "submit_config", ".", "run_func_name", "\n", "for", "_idx", "in", "range", "(", "submit_config", ".", "run_func_name", ".", "count", "(", "'.'", ")", "-", "1", ")", ":", "\n", "        ", "run_func_module_dir_path", "=", "os", ".", "path", ".", "dirname", "(", "run_func_module_dir_path", ")", "\n", "", "files", "+=", "util", ".", "list_dir_recursively_with_ignore", "(", "run_func_module_dir_path", ",", "ignores", "=", "submit_config", ".", "run_dir_ignore", ",", "add_base_to_relative", "=", "False", ")", "\n", "\n", "dnnlib_module_dir_path", "=", "util", ".", "get_module_dir_by_obj_name", "(", "\"dnnlib\"", ")", "\n", "files", "+=", "util", ".", "list_dir_recursively_with_ignore", "(", "dnnlib_module_dir_path", ",", "ignores", "=", "submit_config", ".", "run_dir_ignore", ",", "add_base_to_relative", "=", "True", ")", "\n", "\n", "if", "submit_config", ".", "run_dir_extra_files", "is", "not", "None", ":", "\n", "        ", "files", "+=", "submit_config", ".", "run_dir_extra_files", "\n", "\n", "", "files", "=", "[", "(", "f", "[", "0", "]", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"src\"", ",", "f", "[", "1", "]", ")", ")", "for", "f", "in", "files", "]", "\n", "files", "+=", "[", "(", "os", ".", "path", ".", "join", "(", "dnnlib_module_dir_path", ",", "\"submission\"", ",", "\"_internal\"", ",", "\"run.py\"", ")", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"run.py\"", ")", ")", "]", "\n", "\n", "util", ".", "copy_files_and_create_dirs", "(", "files", ")", "\n", "\n", "pickle", ".", "dump", "(", "submit_config", ",", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "pprint", ".", "pprint", "(", "submit_config", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.run_wrapper": [[224, 261], ["util.Logger.close", "util.Logger", "util.Logger", "print", "time.time", "util.call_func_by_name", "print", "open().close", "checker.stop", "os.path.join", "util.format_time", "traceback.print_exc", "os.path.join", "os.path.join", "shutil.copyfile", "open", "submit.get_path_from_template", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.format_time", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_path_from_template"], ["", "", "def", "run_wrapper", "(", "submit_config", ":", "SubmitConfig", ")", "->", "None", ":", "\n", "    ", "\"\"\"Wrap the actual run function call for handling logging, exceptions, typing, etc.\"\"\"", "\n", "is_local", "=", "submit_config", ".", "submit_target", "==", "SubmitTarget", ".", "LOCAL", "\n", "\n", "checker", "=", "None", "\n", "\n", "# when running locally, redirect stderr to stdout, log stdout to a file, and force flushing", "\n", "if", "is_local", ":", "\n", "        ", "logger", "=", "util", ".", "Logger", "(", "file_name", "=", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"log.txt\"", ")", ",", "file_mode", "=", "\"w\"", ",", "should_flush", "=", "True", ")", "\n", "", "else", ":", "# when running in a cluster, redirect stderr to stdout, and just force flushing (log writing is handled by run.sh)", "\n", "        ", "logger", "=", "util", ".", "Logger", "(", "file_name", "=", "None", ",", "should_flush", "=", "True", ")", "\n", "\n", "", "import", "dnnlib", "\n", "dnnlib", ".", "submit_config", "=", "submit_config", "\n", "\n", "try", ":", "\n", "        ", "print", "(", "\"dnnlib: Running {0}() on {1}...\"", ".", "format", "(", "submit_config", ".", "run_func_name", ",", "submit_config", ".", "host_name", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "util", ".", "call_func_by_name", "(", "func_name", "=", "submit_config", ".", "run_func_name", ",", "submit_config", "=", "submit_config", ",", "**", "submit_config", ".", "run_func_kwargs", ")", "\n", "print", "(", "\"dnnlib: Finished {0}() in {1}.\"", ".", "format", "(", "submit_config", ".", "run_func_name", ",", "util", ".", "format_time", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "", "except", ":", "\n", "        ", "if", "is_local", ":", "\n", "            ", "raise", "\n", "", "else", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "\n", "log_src", "=", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"log.txt\"", ")", "\n", "log_dst", "=", "os", ".", "path", ".", "join", "(", "get_path_from_template", "(", "submit_config", ".", "run_dir_root", ")", ",", "\"{0}-error.txt\"", ".", "format", "(", "submit_config", ".", "run_name", ")", ")", "\n", "shutil", ".", "copyfile", "(", "log_src", ",", "log_dst", ")", "\n", "", "", "finally", ":", "\n", "        ", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"_finished.txt\"", ")", ",", "\"w\"", ")", ".", "close", "(", ")", "\n", "\n", "", "dnnlib", ".", "submit_config", "=", "None", "\n", "logger", ".", "close", "(", ")", "\n", "\n", "if", "checker", "is", "not", "None", ":", "\n", "        ", "checker", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.submit_run": [[263, 291], ["copy.copy", "submit.run_wrapper", "submit.get_user_name", "submit._create_run_dir_local", "submit._populate_run_dir", "print", "pprint.pprint", "print", "util.ask_yes_no"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.run_wrapper", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.get_user_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._create_run_dir_local", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit._populate_run_dir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.ask_yes_no"], ["", "", "def", "submit_run", "(", "submit_config", ":", "SubmitConfig", ",", "run_func_name", ":", "str", ",", "**", "run_func_kwargs", ")", "->", "None", ":", "\n", "    ", "\"\"\"Create a run dir, gather files related to the run, copy files to the run dir, and launch the run in appropriate place.\"\"\"", "\n", "submit_config", "=", "copy", ".", "copy", "(", "submit_config", ")", "\n", "\n", "if", "submit_config", ".", "user_name", "is", "None", ":", "\n", "        ", "submit_config", ".", "user_name", "=", "get_user_name", "(", ")", "\n", "\n", "", "submit_config", ".", "run_func_name", "=", "run_func_name", "\n", "submit_config", ".", "run_func_kwargs", "=", "run_func_kwargs", "\n", "\n", "assert", "submit_config", ".", "submit_target", "==", "SubmitTarget", ".", "LOCAL", "\n", "if", "submit_config", ".", "submit_target", "in", "{", "SubmitTarget", ".", "LOCAL", "}", ":", "\n", "        ", "run_dir", "=", "_create_run_dir_local", "(", "submit_config", ")", "\n", "\n", "submit_config", ".", "task_name", "=", "\"{0}-{1:05d}-{2}\"", ".", "format", "(", "submit_config", ".", "user_name", ",", "submit_config", ".", "run_id", ",", "submit_config", ".", "run_desc", ")", "\n", "submit_config", ".", "run_dir", "=", "run_dir", "\n", "_populate_run_dir", "(", "run_dir", ",", "submit_config", ")", "\n", "\n", "", "if", "submit_config", ".", "print_info", ":", "\n", "        ", "print", "(", "\"\\nSubmit config:\\n\"", ")", "\n", "pprint", ".", "pprint", "(", "submit_config", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "print", "(", ")", "\n", "\n", "", "if", "submit_config", ".", "ask_confirmation", ":", "\n", "        ", "if", "not", "util", ".", "ask_yes_no", "(", "\"Continue submitting the job?\"", ")", ":", "\n", "            ", "return", "\n", "\n", "", "", "run_wrapper", "(", "submit_config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation._internal.run.main": [[22, 43], ["str", "str", "str", "os.path.join", "pickle.load", "dnnlib.submission.submit.set_user_name_override", "dnnlib.submission.submit.run_wrapper", "RuntimeError", "os.path.exists", "RuntimeError", "open", "len"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.set_user_name_override", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.submit.run_wrapper"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "not", "len", "(", "sys", ".", "argv", ")", ">=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"This script needs three arguments: run_dir, task_name and host_name!\"", ")", "\n", "\n", "", "run_dir", "=", "str", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "task_name", "=", "str", "(", "sys", ".", "argv", "[", "2", "]", ")", "\n", "host_name", "=", "str", "(", "sys", ".", "argv", "[", "3", "]", ")", "\n", "\n", "submit_config_path", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.pkl\"", ")", "\n", "\n", "# SubmitConfig should have been pickled to the run dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "submit_config_path", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"SubmitConfig pickle file does not exist!\"", ")", "\n", "\n", "", "submit_config", ":", "dnnlib", ".", "SubmitConfig", "=", "pickle", ".", "load", "(", "open", "(", "submit_config_path", ",", "\"rb\"", ")", ")", "\n", "dnnlib", ".", "submission", ".", "submit", ".", "set_user_name_override", "(", "submit_config", ".", "user_name", ")", "\n", "\n", "submit_config", ".", "task_name", "=", "task_name", "\n", "submit_config", ".", "host_name", "=", "host_name", "\n", "\n", "dnnlib", ".", "submission", ".", "submit", ".", "run_wrapper", "(", "submit_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.run": [[23, 27], ["tfutil.assert_tf_initialized", "tensorflow.get_default_session().run", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["def", "run", "(", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Run the specified ops in the default session.\"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression": [[29, 32], ["isinstance"], "function", ["None"], ["", "def", "is_tf_expression", "(", "x", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Check whether the input is a valid Tensorflow expression, i.e., Tensorflow Tensor, Variable, or Operation.\"\"\"", "\n", "return", "isinstance", "(", "x", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ",", "tf", ".", "Operation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list": [[34, 37], ["None"], "function", ["None"], ["", "def", "shape_to_list", "(", "shape", ":", "Iterable", "[", "tf", ".", "Dimension", "]", ")", "->", "List", "[", "Union", "[", "int", ",", "None", "]", "]", ":", "\n", "    ", "\"\"\"Convert a Tensorflow shape to a list of ints.\"\"\"", "\n", "return", "[", "dim", ".", "value", "for", "dim", "in", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.flatten": [[39, 43], ["tensorflow.name_scope", "tensorflow.reshape"], "function", ["None"], ["", "def", "flatten", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Shortcut function for flattening a tensor.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Flatten\"", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2": [[45, 49], ["tensorflow.name_scope", "tensorflow.log", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "log2", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Logarithm in base 2.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Log2\"", ")", ":", "\n", "        ", "return", "tf", ".", "log", "(", "x", ")", "*", "np", ".", "float32", "(", "1.0", "/", "np", ".", "log", "(", "2.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.exp2": [[51, 55], ["tensorflow.name_scope", "tensorflow.exp", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "exp2", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Exponent in base 2.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Exp2\"", ")", ":", "\n", "        ", "return", "tf", ".", "exp", "(", "x", "*", "np", ".", "float32", "(", "np", ".", "log", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp": [[57, 61], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "lerp", "(", "a", ":", "TfExpressionEx", ",", "b", ":", "TfExpressionEx", ",", "t", ":", "TfExpressionEx", ")", "->", "TfExpressionEx", ":", "\n", "    ", "\"\"\"Linear interpolation.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Lerp\"", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp_clip": [[63, 67], ["tensorflow.name_scope", "tensorflow.clip_by_value"], "function", ["None"], ["", "", "def", "lerp_clip", "(", "a", ":", "TfExpressionEx", ",", "b", ":", "TfExpressionEx", ",", "t", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Linear interpolation with clip.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"LerpClip\"", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope": [[69, 72], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "absolute_name_scope", "(", "scope", ":", "str", ")", "->", "tf", ".", "name_scope", ":", "\n", "    ", "\"\"\"Forcefully enter the specified name scope, ignoring any surrounding scopes.\"\"\"", "\n", "return", "tf", ".", "name_scope", "(", "scope", "+", "\"/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_variable_scope": [[74, 77], ["tensorflow.variable_scope", "tensorflow.VariableScope"], "function", ["None"], ["", "def", "absolute_variable_scope", "(", "scope", ":", "str", ",", "**", "kwargs", ")", "->", "tf", ".", "variable_scope", ":", "\n", "    ", "\"\"\"Forcefully enter the specified variable scope, ignoring any surrounding scopes.\"\"\"", "\n", "return", "tf", ".", "variable_scope", "(", "tf", ".", "VariableScope", "(", "name", "=", "scope", ",", "**", "kwargs", ")", ",", "auxiliary_name_scope", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil._sanitize_tf_config": [[79, 92], ["dict", "dict.update"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update"], ["", "def", "_sanitize_tf_config", "(", "config_dict", ":", "dict", "=", "None", ")", "->", "dict", ":", "\n", "# Defaults.", "\n", "    ", "cfg", "=", "dict", "(", ")", "\n", "cfg", "[", "\"rnd.np_random_seed\"", "]", "=", "None", "# Random seed for NumPy. None = keep as is.", "\n", "cfg", "[", "\"rnd.tf_random_seed\"", "]", "=", "\"auto\"", "# Random seed for TensorFlow. 'auto' = derive from NumPy random state. None = keep as is.", "\n", "cfg", "[", "\"env.TF_CPP_MIN_LOG_LEVEL\"", "]", "=", "\"1\"", "# 0 = Print all available debug info from TensorFlow. 1 = Print warnings and errors, but disable debug info.", "\n", "cfg", "[", "\"graph_options.place_pruned_graph\"", "]", "=", "True", "# False = Check that all ops are available on the designated device. True = Skip the check for ops that are not used.", "\n", "cfg", "[", "\"gpu_options.allow_growth\"", "]", "=", "True", "# False = Allocate all GPU memory at the beginning. True = Allocate only as much GPU memory as needed.", "\n", "\n", "# User overrides.", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "update", "(", "config_dict", ")", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.init_tf": [[94, 120], ["tfutil._sanitize_tf_config", "list", "tfutil.create_session", "tensorflow.get_default_session", "numpy.random.seed", "numpy.random.randint", "tensorflow.set_random_seed", "_sanitize_tf_config.items", "key.split", "str", "len"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.create_session"], ["", "def", "init_tf", "(", "config_dict", ":", "dict", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initialize TensorFlow session using good default settings.\"\"\"", "\n", "# Skip if already initialized.", "\n", "if", "tf", ".", "get_default_session", "(", ")", "is", "not", "None", ":", "\n", "        ", "return", "\n", "\n", "# Setup config dict and random seeds.", "\n", "", "cfg", "=", "_sanitize_tf_config", "(", "config_dict", ")", "\n", "np_random_seed", "=", "cfg", "[", "\"rnd.np_random_seed\"", "]", "\n", "if", "np_random_seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np_random_seed", ")", "\n", "", "tf_random_seed", "=", "cfg", "[", "\"rnd.tf_random_seed\"", "]", "\n", "if", "tf_random_seed", "==", "\"auto\"", ":", "\n", "        ", "tf_random_seed", "=", "np", ".", "random", ".", "randint", "(", "1", "<<", "31", ")", "\n", "", "if", "tf_random_seed", "is", "not", "None", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "tf_random_seed", ")", "\n", "\n", "# Setup environment variables.", "\n", "", "for", "key", ",", "value", "in", "list", "(", "cfg", ".", "items", "(", ")", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "fields", "[", "0", "]", "==", "\"env\"", ":", "\n", "            ", "assert", "len", "(", "fields", ")", "==", "2", "\n", "os", ".", "environ", "[", "fields", "[", "1", "]", "]", "=", "str", "(", "value", ")", "\n", "\n", "# Create default TensorFlow session.", "\n", "", "", "create_session", "(", "cfg", ",", "force_as_default", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized": [[122, 126], ["tensorflow.get_default_session", "RuntimeError"], "function", ["None"], ["", "def", "assert_tf_initialized", "(", ")", ":", "\n", "    ", "\"\"\"Check that TensorFlow session has been initialized.\"\"\"", "\n", "if", "tf", ".", "get_default_session", "(", ")", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No default TensorFlow session found. Please call dnnlib.tflib.init_tf().\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.create_session": [[128, 150], ["tfutil._sanitize_tf_config", "tensorflow.ConfigProto", "_sanitize_tf_config.items", "tensorflow.Session", "key.split", "tf.Session.as_default", "tf.Session._default_session.__enter__", "setattr", "getattr"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.__enter__"], ["", "", "def", "create_session", "(", "config_dict", ":", "dict", "=", "None", ",", "force_as_default", ":", "bool", "=", "False", ")", "->", "tf", ".", "Session", ":", "\n", "    ", "\"\"\"Create tf.Session based on config dict.\"\"\"", "\n", "# Setup TensorFlow config proto.", "\n", "cfg", "=", "_sanitize_tf_config", "(", "config_dict", ")", "\n", "config_proto", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "fields", "[", "0", "]", "not", "in", "[", "\"rnd\"", ",", "\"env\"", "]", ":", "\n", "            ", "obj", "=", "config_proto", "\n", "for", "field", "in", "fields", "[", ":", "-", "1", "]", ":", "\n", "                ", "obj", "=", "getattr", "(", "obj", ",", "field", ")", "\n", "", "setattr", "(", "obj", ",", "fields", "[", "-", "1", "]", ",", "value", ")", "\n", "\n", "# Create session.", "\n", "", "", "session", "=", "tf", ".", "Session", "(", "config", "=", "config_proto", ")", "\n", "if", "force_as_default", ":", "\n", "# pylint: disable=protected-access", "\n", "        ", "session", ".", "_default_session", "=", "session", ".", "as_default", "(", ")", "\n", "session", ".", "_default_session", ".", "enforce_nesting", "=", "False", "\n", "session", ".", "_default_session", ".", "__enter__", "(", ")", "# pylint: disable=no-member", "\n", "\n", "", "return", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.init_uninitialized_vars": [[152, 180], ["tfutil.assert_tf_initialized", "tfutil.run", "tensorflow.global_variables", "tensorflow.control_dependencies", "tfutil.is_tf_expression", "zip", "tensorflow.get_default_graph().get_tensor_by_name", "tfutil.run", "var.name.replace", "test_vars.append", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "test_ops.append", "tensorflow.is_variable_initialized", "var.name.split"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope"], ["", "def", "init_uninitialized_vars", "(", "target_vars", ":", "List", "[", "tf", ".", "Variable", "]", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initialize all tf.Variables that have not already been initialized.\n\n    Equivalent to the following, but more efficient and does not bloat the tf graph:\n    tf.variables_initializer(tf.report_uninitialized_variables()).run()\n    \"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "if", "target_vars", "is", "None", ":", "\n", "        ", "target_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "\n", "", "test_vars", "=", "[", "]", "\n", "test_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "        ", "for", "var", "in", "target_vars", ":", "\n", "            ", "assert", "is_tf_expression", "(", "var", ")", "\n", "\n", "try", ":", "\n", "                ", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "\":0\"", ",", "\"/IsVariableInitialized:0\"", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "# Op does not exist => variable may be uninitialized.", "\n", "                ", "test_vars", ".", "append", "(", "var", ")", "\n", "\n", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "test_ops", ".", "append", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ")", "\n", "\n", "", "", "", "", "init_vars", "=", "[", "var", "for", "var", ",", "inited", "in", "zip", "(", "test_vars", ",", "run", "(", "test_ops", ")", ")", "if", "not", "inited", "]", "\n", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "init_vars", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars": [[182, 206], ["tfutil.assert_tf_initialized", "var_to_value_dict.items", "tfutil.run", "tfutil.is_tf_expression", "ops.append", "tensorflow.get_default_graph().get_tensor_by_name", "var.name.replace", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.assign", "var.name.split", "tensorflow.placeholder"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope"], ["", "def", "set_vars", "(", "var_to_value_dict", ":", "dict", ")", "->", "None", ":", "\n", "    ", "\"\"\"Set the values of given tf.Variables.\n\n    Equivalent to the following, but more efficient and does not bloat the tf graph:\n    tflib.run([tf.assign(var, value) for var, value in var_to_value_dict.items()]\n    \"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "ops", "=", "[", "]", "\n", "feed_dict", "=", "{", "}", "\n", "\n", "for", "var", ",", "value", "in", "var_to_value_dict", ".", "items", "(", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var", ")", "\n", "\n", "try", ":", "\n", "            ", "setter", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "\":0\"", ",", "\"/setter:0\"", ")", ")", "# look for existing op", "\n", "", "except", "KeyError", ":", "\n", "            ", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", ":", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "                    ", "setter", "=", "tf", ".", "assign", "(", "var", ",", "tf", ".", "placeholder", "(", "var", ".", "dtype", ",", "var", ".", "shape", ",", "\"new_value\"", ")", ",", "name", "=", "\"setter\"", ")", "# create new setter", "\n", "\n", "", "", "", "ops", ".", "append", "(", "setter", ")", "\n", "feed_dict", "[", "setter", ".", "op", ".", "inputs", "[", "1", "]", "]", "=", "value", "\n", "\n", "", "run", "(", "ops", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.create_var_with_large_initial_value": [[208, 216], ["tfutil.assert_tf_initialized", "isinstance", "tensorflow.zeros", "tensorflow.Variable", "tfutil.set_vars"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars"], ["", "def", "create_var_with_large_initial_value", "(", "initial_value", ":", "np", ".", "ndarray", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Create tf.Variable with large initial value without bloating the tf graph.\"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "initial_value", ",", "np", ".", "ndarray", ")", "\n", "zeros", "=", "tf", ".", "zeros", "(", "initial_value", ".", "shape", ",", "initial_value", ".", "dtype", ")", "\n", "var", "=", "tf", ".", "Variable", "(", "zeros", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "set_vars", "(", "{", "var", ":", "initial_value", "}", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.convert_images_from_uint8": [[218, 226], ["tensorflow.cast", "tensorflow.transpose"], "function", ["None"], ["", "def", "convert_images_from_uint8", "(", "images", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "nhwc_to_nchw", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert a minibatch of images from uint8 to float32 with configurable dynamic range.\n    Can be used as an input transformation for Network.run().\n    \"\"\"", "\n", "images", "=", "tf", ".", "cast", "(", "images", ",", "tf", ".", "float32", ")", "\n", "if", "nhwc_to_nchw", ":", "\n", "        ", "images", "=", "tf", ".", "transpose", "(", "images", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "return", "(", "images", "-", "drange", "[", "0", "]", ")", "*", "(", "(", "drange", "[", "1", "]", "-", "drange", "[", "0", "]", ")", "/", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.convert_images_to_uint8": [[228, 241], ["tensorflow.cast", "tensorflow.saturate_cast", "tensorflow.nn.avg_pool", "tensorflow.transpose"], "function", ["None"], ["", "def", "convert_images_to_uint8", "(", "images", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "nchw_to_nhwc", "=", "False", ",", "shrink", "=", "1", ")", ":", "\n", "    ", "\"\"\"Convert a minibatch of images from float32 to uint8 with configurable dynamic range.\n    Can be used as an output transformation for Network.run().\n    \"\"\"", "\n", "images", "=", "tf", ".", "cast", "(", "images", ",", "tf", ".", "float32", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "shrink", ",", "shrink", "]", "\n", "images", "=", "tf", ".", "nn", ".", "avg_pool", "(", "images", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "\"VALID\"", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "", "if", "nchw_to_nhwc", ":", "\n", "        ", "images", "=", "tf", ".", "transpose", "(", "images", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "scale", "=", "255", "/", "(", "drange", "[", "1", "]", "-", "drange", "[", "0", "]", ")", "\n", "images", "=", "images", "*", "scale", "+", "(", "0.5", "-", "drange", "[", "0", "]", "*", "scale", ")", "\n", "return", "tf", ".", "saturate_cast", "(", "images", ",", "tf", ".", "uint8", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.__init__": [[74, 100], ["tfutil.assert_tf_initialized", "util.is_pickleable", "network.Network._init_fields", "util.EasyDict", "util.is_top_level_function", "util.get_module_from_obj_name", "util.get_obj_from_module", "callable", "_import_module_src.get", "network.Network._init_graph", "network.Network.reset_own_vars", "isinstance", "isinstance", "util.is_top_level_function", "util.get_top_level_function_name", "inspect.getsource"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_pickleable", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_top_level_function_name"], ["def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ",", "func_name", ":", "Any", "=", "None", ",", "**", "static_kwargs", ")", ":", "\n", "        ", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "name", ",", "str", ")", "or", "name", "is", "None", "\n", "assert", "func_name", "is", "not", "None", "\n", "assert", "isinstance", "(", "func_name", ",", "str", ")", "or", "util", ".", "is_top_level_function", "(", "func_name", ")", "\n", "assert", "util", ".", "is_pickleable", "(", "static_kwargs", ")", "\n", "\n", "self", ".", "_init_fields", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "static_kwargs", ")", "\n", "\n", "# Locate the user-specified network build function.", "\n", "if", "util", ".", "is_top_level_function", "(", "func_name", ")", ":", "\n", "            ", "func_name", "=", "util", ".", "get_top_level_function_name", "(", "func_name", ")", "\n", "", "module", ",", "self", ".", "_build_func_name", "=", "util", ".", "get_module_from_obj_name", "(", "func_name", ")", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Dig up source code for the module containing the build function.", "\n", "self", ".", "_build_module_src", "=", "_import_module_src", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "self", ".", "_build_module_src", "is", "None", ":", "\n", "            ", "self", ".", "_build_module_src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_fields": [[101, 125], ["util.EasyDict", "util.EasyDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "dict"], "methods", ["None"], ["", "def", "_init_fields", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "None", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "num_inputs", "=", "0", "\n", "self", ".", "num_outputs", "=", "0", "\n", "self", ".", "input_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "output_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "input_shape", "=", "[", "]", "\n", "self", ".", "output_shape", "=", "[", "]", "\n", "self", ".", "input_templates", "=", "[", "]", "\n", "self", ".", "output_templates", "=", "[", "]", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "output_names", "=", "[", "]", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "_build_func", "=", "None", "# User-supplied build function that constructs the network.", "\n", "self", ".", "_build_func_name", "=", "None", "# Name of the build function.", "\n", "self", ".", "_build_module_src", "=", "None", "# Full source code of the module containing the build function.", "\n", "self", ".", "_run_cache", "=", "dict", "(", ")", "# Cached graph data for Network.run().", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_graph": [[126, 187], ["inspect.signature().parameters.values", "len", "re.match", "dict", "len", "all", "any", "any", "any", "collections.OrderedDict", "collections.OrderedDict", "network.Network.vars.update", "collections.OrderedDict", "collections.OrderedDict", "tensorflow.name_scope", "tensorflow.get_default_graph().unique_name", "tfutil.absolute_variable_scope", "tfutil.absolute_name_scope", "tfutil.is_tf_expression", "isinstance", "tfutil.is_tf_expression", "list", "ValueError", "ValueError", "ValueError", "len", "len", "ValueError", "tfutil.shape_to_list", "tfutil.shape_to_list", "network.Network.input_names.append", "tensorflow.get_default_graph().get_name_scope", "tensorflow.control_dependencies", "network.Network._build_func", "tfutil.is_tf_expression", "set", "[].split", "inspect.signature", "tensorflow.get_default_graph", "tensorflow.get_variable_scope", "tensorflow.placeholder", "isinstance", "network.Network.components.values", "tensorflow.global_variables", "network.Network.components.values", "comp.vars.items", "network.Network.vars.items", "network.Network.vars.items", "tensorflow.get_default_graph", "var.name[].split", "var.name.split", "network.Network.components.values", "t.name.split", "len"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression"], ["", "def", "_init_graph", "(", "self", ")", "->", "None", ":", "\n", "# Collect inputs.", "\n", "        ", "self", ".", "input_names", "=", "[", "]", "\n", "\n", "for", "param", "in", "inspect", ".", "signature", "(", "self", ".", "_build_func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "kind", "==", "param", ".", "POSITIONAL_OR_KEYWORD", "and", "param", ".", "default", "is", "param", ".", "empty", ":", "\n", "                ", "self", ".", "input_names", ".", "append", "(", "param", ".", "name", ")", "\n", "\n", "", "", "self", ".", "num_inputs", "=", "len", "(", "self", ".", "input_names", ")", "\n", "assert", "self", ".", "num_inputs", ">=", "1", "\n", "\n", "# Choose name and scope.", "\n", "if", "self", ".", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "_build_func_name", "\n", "", "assert", "re", ".", "match", "(", "\"^[A-Za-z0-9_.\\\\-]*$\"", ",", "self", ".", "name", ")", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ":", "\n", "            ", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "name", ",", "mark_as_used", "=", "True", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "True", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build template graph.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "# ignore surrounding scopes", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "assert", "tf", ".", "get_default_graph", "(", ")", ".", "get_name_scope", "(", ")", "==", "self", ".", "scope", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control dependencies", "\n", "                ", "self", ".", "input_templates", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "self", ".", "input_templates", ",", "**", "build_kwargs", ")", "\n", "\n", "# Collect outputs.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "self", ".", "output_templates", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "output_templates", ")", "\n", "assert", "self", ".", "num_outputs", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "t", ")", "for", "t", "in", "self", ".", "output_templates", ")", "\n", "\n", "# Perform sanity checks.", "\n", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "input_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network input shapes not defined. Please call x.set_shape() for each input.\"", ")", "\n", "", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "output_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network output shapes not defined. Please call x.set_shape() where applicable.\"", ")", "\n", "", "if", "any", "(", "not", "isinstance", "(", "comp", ",", "Network", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must be Networks themselves.\"", ")", "\n", "", "if", "len", "(", "self", ".", "components", ")", "!=", "len", "(", "set", "(", "comp", ".", "name", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must have unique names.\"", ")", "\n", "\n", "# List inputs and outputs.", "\n", "", "self", ".", "input_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "input_templates", "]", "\n", "self", ".", "output_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "input_shape", "=", "self", ".", "input_shapes", "[", "0", "]", "\n", "self", ".", "output_shape", "=", "self", ".", "output_shapes", "[", "0", "]", "\n", "self", ".", "output_names", "=", "[", "t", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "\n", "# List variables.", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", "(", "var", ".", "name", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "var", ")", "for", "var", "in", "tf", ".", "global_variables", "(", "self", ".", "scope", "+", "\"/\"", ")", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", "self", ".", "own_vars", ")", "\n", "self", ".", "vars", ".", "update", "(", "(", "comp", ".", "name", "+", "\"/\"", "+", "name", ",", "var", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", "for", "name", ",", "var", "in", "comp", ".", "vars", ".", "items", "(", ")", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", "if", "var", ".", "trainable", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "name", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.reset_own_vars": [[188, 191], ["tfutil.run", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "reset_own_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, excluding sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "own_vars", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.reset_vars": [[192, 195], ["tfutil.run", "network.Network.vars.values"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "reset_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "vars", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.reset_trainables": [[196, 199], ["tfutil.run", "network.Network.trainables.values"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "reset_trainables", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all trainable variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "trainables", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.get_output_for": [[200, 234], ["dict", "dict.update", "zip", "len", "all", "tfutil.absolute_variable_scope", "tensorflow.name_scope", "zip", "network.Network._build_func", "isinstance", "tfutil.is_tf_expression", "isinstance", "final_inputs.append", "tensorflow.zeros.set_shape", "tfutil.is_tf_expression", "list", "tensorflow.get_variable_scope", "tensorflow.identity", "tensorflow.zeros", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression"], ["", "def", "get_output_for", "(", "self", ",", "*", "in_expr", ":", "TfExpression", ",", "return_as_list", ":", "bool", "=", "False", ",", "**", "dynamic_kwargs", ")", "->", "Union", "[", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", ":", "\n", "        ", "\"\"\"Construct TensorFlow expression(s) for the output(s) of this network, given the input expression(s).\"\"\"", "\n", "assert", "len", "(", "in_expr", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "expr", "is", "None", "for", "expr", "in", "in_expr", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", ".", "update", "(", "dynamic_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "False", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build TensorFlow graph to evaluate the network.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "True", ")", ",", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "valid_inputs", "=", "[", "expr", "for", "expr", "in", "in_expr", "if", "expr", "is", "not", "None", "]", "\n", "final_inputs", "=", "[", "]", "\n", "for", "expr", ",", "name", ",", "shape", "in", "zip", "(", "in_expr", ",", "self", ".", "input_names", ",", "self", ".", "input_shapes", ")", ":", "\n", "                ", "if", "expr", "is", "not", "None", ":", "\n", "                    ", "expr", "=", "tf", ".", "identity", "(", "expr", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "                    ", "expr", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "valid_inputs", "[", "0", "]", ")", "[", "0", "]", "]", "+", "shape", "[", "1", ":", "]", ",", "name", "=", "name", ")", "\n", "", "final_inputs", ".", "append", "(", "expr", ")", "\n", "", "out_expr", "=", "self", ".", "_build_func", "(", "*", "final_inputs", ",", "**", "build_kwargs", ")", "\n", "\n", "# Propagate input shapes back to the user-specified expressions.", "\n", "", "for", "expr", ",", "final", "in", "zip", "(", "in_expr", ",", "final_inputs", ")", ":", "\n", "            ", "if", "isinstance", "(", "expr", ",", "tf", ".", "Tensor", ")", ":", "\n", "                ", "expr", ".", "set_shape", "(", "final", ".", "shape", ")", "\n", "\n", "# Express outputs in the desired format.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "if", "return_as_list", ":", "\n", "            ", "out_expr", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "", "return", "out_expr", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.get_var_local_name": [[235, 240], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression"], ["", "def", "get_var_local_name", "(", "self", ",", "var_or_global_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"Get the local name of a given variable, without any surrounding name scopes.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_global_name", ")", "or", "isinstance", "(", "var_or_global_name", ",", "str", ")", "\n", "global_name", "=", "var_or_global_name", "if", "isinstance", "(", "var_or_global_name", ",", "str", ")", "else", "var_or_global_name", ".", "name", "\n", "return", "self", ".", "var_global_to_local", "[", "global_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.find_var": [[241, 245], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression"], ["", "def", "find_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Find variable by local or global name.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_local_name", ")", "or", "isinstance", "(", "var_or_local_name", ",", "str", ")", "\n", "return", "self", ".", "vars", "[", "var_or_local_name", "]", "if", "isinstance", "(", "var_or_local_name", ",", "str", ")", "else", "var_or_local_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.get_var": [[246, 250], ["network.Network.find_var().eval", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.find_var"], ["", "def", "get_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the value of a given variable as NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.run(list_of_vars) whenever possible.\"\"\"", "\n", "return", "self", ".", "find_var", "(", "var_or_local_name", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.set_var": [[251, 255], ["tfutil.set_vars", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.find_var"], ["", "def", "set_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ",", "new_value", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the value of a given variable based on the given NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.set_vars() whenever possible.\"\"\"", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "var_or_local_name", ")", ":", "new_value", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.__getstate__": [[256, 267], ["dict", "dict", "dict", "list", "zip", "network.Network.own_vars.keys", "tfutil.run", "list", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "__getstate__", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Pickle export.\"\"\"", "\n", "state", "=", "dict", "(", ")", "\n", "state", "[", "\"version\"", "]", "=", "3", "\n", "state", "[", "\"name\"", "]", "=", "self", ".", "name", "\n", "state", "[", "\"static_kwargs\"", "]", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "state", "[", "\"components\"", "]", "=", "dict", "(", "self", ".", "components", ")", "\n", "state", "[", "\"build_module_src\"", "]", "=", "self", ".", "_build_module_src", "\n", "state", "[", "\"build_func_name\"", "]", "=", "self", ".", "_build_func_name", "\n", "state", "[", "\"variables\"", "]", "=", "list", "(", "zip", "(", "self", ".", "own_vars", ".", "keys", "(", ")", ",", "tfutil", ".", "run", "(", "list", "(", "self", ".", "own_vars", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.__setstate__": [[268, 301], ["tfutil.assert_tf_initialized", "network.Network._init_fields", "util.EasyDict", "util.EasyDict", "types.ModuleType", "exec", "util.get_obj_from_module", "callable", "network.Network._init_graph", "network.Network.reset_own_vars", "tfutil.set_vars", "handler", "handler.get", "uuid.uuid4", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.find_var"], ["", "def", "__setstate__", "(", "self", ",", "state", ":", "dict", ")", "->", "None", ":", "\n", "        ", "\"\"\"Pickle import.\"\"\"", "\n", "# pylint: disable=attribute-defined-outside-init", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "self", ".", "_init_fields", "(", ")", "\n", "\n", "# Execute custom import handlers.", "\n", "for", "handler", "in", "_import_handlers", ":", "\n", "            ", "state", "=", "handler", "(", "state", ")", "\n", "\n", "# Set basic fields.", "\n", "", "assert", "state", "[", "\"version\"", "]", "in", "[", "2", ",", "3", "]", "\n", "self", ".", "name", "=", "state", "[", "\"name\"", "]", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "state", "[", "\"static_kwargs\"", "]", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", "state", ".", "get", "(", "\"components\"", ",", "{", "}", ")", ")", "\n", "self", ".", "_build_module_src", "=", "state", "[", "\"build_module_src\"", "]", "\n", "self", ".", "_build_func_name", "=", "state", "[", "\"build_func_name\"", "]", "\n", "\n", "# Create temporary module from the imported source code.", "\n", "module_name", "=", "\"_tflib_network_import_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_import_module_src", "[", "module", "]", "=", "self", ".", "_build_module_src", "\n", "exec", "(", "self", ".", "_build_module_src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "\n", "# Locate network build function in the temporary module.", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "state", "[", "\"variables\"", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.clone": [[302, 316], ["object.__new__", "object.__new__._init_fields", "util.EasyDict", "object.__new__.static_kwargs.update", "object.__new__._init_graph", "object.__new__.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.copy_vars_from"], ["", "def", "clone", "(", "self", ",", "name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create a clone of this network with its own copy of the variables.\"\"\"", "\n", "# pylint: disable=protected-access", "\n", "net", "=", "object", ".", "__new__", "(", "Network", ")", "\n", "net", ".", "_init_fields", "(", ")", "\n", "net", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "name", "\n", "net", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "self", ".", "static_kwargs", ")", "\n", "net", ".", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", ".", "_build_module_src", "=", "self", ".", "_build_module_src", "\n", "net", ".", "_build_func_name", "=", "self", ".", "_build_func_name", "\n", "net", ".", "_build_func", "=", "self", ".", "_build_func", "\n", "net", ".", "_init_graph", "(", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.copy_own_vars_from": [[317, 321], ["tfutil.set_vars", "tfutil.run", "network.Network.own_vars.keys"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "copy_own_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, excluding sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "own_vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "own_vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.copy_vars_from": [[322, 326], ["tfutil.set_vars", "tfutil.run", "network.Network.vars.keys"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "copy_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.copy_trainables_from": [[327, 331], ["tfutil.set_vars", "tfutil.run", "network.Network.trainables.keys"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "def", "copy_trainables_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all trainable variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "trainables", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "trainables", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert": [[332, 341], ["dict", "dict.update", "network.Network", "network.Network.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.copy_vars_from"], ["", "def", "convert", "(", "self", ",", "new_func_name", ":", "str", ",", "new_name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create new network with the given parameters, and copy all variables from this network.\"\"\"", "\n", "if", "new_name", "is", "None", ":", "\n", "            ", "new_name", "=", "self", ".", "name", "\n", "", "static_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", "=", "Network", "(", "name", "=", "new_name", ",", "func_name", "=", "new_func_name", ",", "**", "static_kwargs", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.setup_as_moving_average_of": [[342, 353], ["tfutil.absolute_name_scope", "network.Network.vars.items", "tensorflow.group", "tfutil.lerp", "ops.append", "var.assign"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp"], ["", "def", "setup_as_moving_average_of", "(", "self", ",", "src_net", ":", "\"Network\"", ",", "beta", ":", "TfExpressionEx", "=", "0.99", ",", "beta_nontrainable", ":", "TfExpressionEx", "=", "0.0", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct a TensorFlow op that updates the variables of this network\n        to be slightly closer to those of the given network.\"\"\"", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_MovingAvg\"", ")", ":", "\n", "            ", "ops", "=", "[", "]", "\n", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "src_net", ".", "vars", ":", "\n", "                    ", "cur_beta", "=", "beta", "if", "name", "in", "self", ".", "trainables", "else", "beta_nontrainable", "\n", "new_value", "=", "tfutil", ".", "lerp", "(", "src_net", ".", "vars", "[", "name", "]", ",", "var", ",", "cur_beta", ")", "\n", "ops", ".", "append", "(", "var", ".", "assign", "(", "new_value", ")", ")", "\n", "", "", "return", "tf", ".", "group", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run": [[354, 455], ["network._handle_legacy_output_transforms", "dict", "repr", "range", "len", "all", "util.is_top_level_function", "util.is_top_level_function", "isinstance", "callable", "network.Network.run.unwind_key"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network._handle_legacy_output_transforms", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.is_top_level_function"], ["", "", "def", "run", "(", "self", ",", "\n", "*", "in_arrays", ":", "Tuple", "[", "Union", "[", "np", ".", "ndarray", ",", "None", "]", ",", "...", "]", ",", "\n", "input_transform", ":", "dict", "=", "None", ",", "\n", "output_transform", ":", "dict", "=", "None", ",", "\n", "return_as_list", ":", "bool", "=", "False", ",", "\n", "print_progress", ":", "bool", "=", "False", ",", "\n", "minibatch_size", ":", "int", "=", "None", ",", "\n", "num_gpus", ":", "int", "=", "1", ",", "\n", "assume_frozen", ":", "bool", "=", "False", ",", "\n", "**", "dynamic_kwargs", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", ",", "List", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"Run this network for the given NumPy array(s), and return the output(s) as NumPy array(s).\n\n        Args:\n            input_transform:    A dict specifying a custom transformation to be applied to the input tensor(s) before evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the input\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            output_transform:   A dict specifying a custom transformation to be applied to the output tensor(s) after evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the output\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            return_as_list:     True = return a list of NumPy arrays, False = return a single NumPy array, or a tuple if there are multiple outputs.\n            print_progress:     Print progress to the console? Useful for very large input arrays.\n            minibatch_size:     Maximum minibatch size to use, None = disable batching.\n            num_gpus:           Number of GPUs to use.\n            assume_frozen:      Improve multi-GPU performance by assuming that the trainable parameters will remain changed between calls.\n            dynamic_kwargs:     Additional keyword arguments to be passed into the network build function.\n        \"\"\"", "\n", "assert", "len", "(", "in_arrays", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "arr", "is", "None", "for", "arr", "in", "in_arrays", ")", "\n", "assert", "input_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "input_transform", "[", "\"func\"", "]", ")", "\n", "assert", "output_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "output_transform", "[", "\"func\"", "]", ")", "\n", "output_transform", ",", "dynamic_kwargs", "=", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", "\n", "num_items", "=", "in_arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "minibatch_size", "is", "None", ":", "\n", "            ", "minibatch_size", "=", "num_items", "\n", "\n", "# Construct unique hash key from all arguments that affect the TensorFlow graph.", "\n", "", "key", "=", "dict", "(", "input_transform", "=", "input_transform", ",", "output_transform", "=", "output_transform", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "assume_frozen", ",", "dynamic_kwargs", "=", "dynamic_kwargs", ")", "\n", "def", "unwind_key", "(", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "return", "[", "(", "key", ",", "unwind_key", "(", "value", ")", ")", "for", "key", ",", "value", "in", "sorted", "(", "obj", ".", "items", "(", ")", ")", "]", "\n", "", "if", "callable", "(", "obj", ")", ":", "\n", "                ", "return", "util", ".", "get_top_level_function_name", "(", "obj", ")", "\n", "", "return", "obj", "\n", "", "key", "=", "repr", "(", "unwind_key", "(", "key", ")", ")", "\n", "\n", "# Build graph.", "\n", "if", "key", "not", "in", "self", ".", "_run_cache", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_Run\"", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "in_expr", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "in_split", "=", "list", "(", "zip", "(", "*", "[", "tf", ".", "split", "(", "x", ",", "num_gpus", ")", "for", "x", "in", "in_expr", "]", ")", ")", "\n", "\n", "", "out_split", "=", "[", "]", "\n", "for", "gpu", "in", "range", "(", "num_gpus", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "\"/gpu:%d\"", "%", "gpu", ")", ":", "\n", "                        ", "net_gpu", "=", "self", ".", "clone", "(", ")", "if", "assume_frozen", "else", "self", "\n", "in_gpu", "=", "in_split", "[", "gpu", "]", "\n", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "                            ", "in_kwargs", "=", "dict", "(", "input_transform", ")", "\n", "in_gpu", "=", "in_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "in_gpu", ",", "**", "in_kwargs", ")", "\n", "in_gpu", "=", "[", "in_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "in_gpu", ")", "else", "list", "(", "in_gpu", ")", "\n", "\n", "", "assert", "len", "(", "in_gpu", ")", "==", "self", ".", "num_inputs", "\n", "out_gpu", "=", "net_gpu", ".", "get_output_for", "(", "*", "in_gpu", ",", "return_as_list", "=", "True", ",", "**", "dynamic_kwargs", ")", "\n", "\n", "if", "output_transform", "is", "not", "None", ":", "\n", "                            ", "out_kwargs", "=", "dict", "(", "output_transform", ")", "\n", "out_gpu", "=", "out_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "out_gpu", ",", "**", "out_kwargs", ")", "\n", "out_gpu", "=", "[", "out_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_gpu", ")", "else", "list", "(", "out_gpu", ")", "\n", "\n", "", "assert", "len", "(", "out_gpu", ")", "==", "self", ".", "num_outputs", "\n", "out_split", ".", "append", "(", "out_gpu", ")", "\n", "\n", "", "", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "out_expr", "=", "[", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "for", "outputs", "in", "zip", "(", "*", "out_split", ")", "]", "\n", "self", ".", "_run_cache", "[", "key", "]", "=", "in_expr", ",", "out_expr", "\n", "\n", "# Run minibatches.", "\n", "", "", "", "in_expr", ",", "out_expr", "=", "self", ".", "_run_cache", "[", "key", "]", "\n", "out_arrays", "=", "[", "np", ".", "empty", "(", "[", "num_items", "]", "+", "tfutil", ".", "shape_to_list", "(", "expr", ".", "shape", ")", "[", "1", ":", "]", ",", "expr", ".", "dtype", ".", "name", ")", "for", "expr", "in", "out_expr", "]", "\n", "\n", "for", "mb_begin", "in", "range", "(", "0", ",", "num_items", ",", "minibatch_size", ")", ":", "\n", "            ", "if", "print_progress", ":", "\n", "                ", "print", "(", "\"\\r%d / %d\"", "%", "(", "mb_begin", ",", "num_items", ")", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "mb_end", "=", "min", "(", "mb_begin", "+", "minibatch_size", ",", "num_items", ")", "\n", "mb_num", "=", "mb_end", "-", "mb_begin", "\n", "mb_in", "=", "[", "src", "[", "mb_begin", ":", "mb_end", "]", "if", "src", "is", "not", "None", "else", "np", ".", "zeros", "(", "[", "mb_num", "]", "+", "shape", "[", "1", ":", "]", ")", "for", "src", ",", "shape", "in", "zip", "(", "in_arrays", ",", "self", ".", "input_shapes", ")", "]", "\n", "mb_out", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "out_expr", ",", "dict", "(", "zip", "(", "in_expr", ",", "mb_in", ")", ")", ")", "\n", "\n", "for", "dst", ",", "src", "in", "zip", "(", "out_arrays", ",", "mb_out", ")", ":", "\n", "                ", "dst", "[", "mb_begin", ":", "mb_end", "]", "=", "src", "\n", "\n", "# Done.", "\n", "", "", "if", "print_progress", ":", "\n", "            ", "print", "(", "\"\\r%d / %d\"", "%", "(", "num_items", ",", "num_items", ")", ")", "\n", "\n", "", "if", "not", "return_as_list", ":", "\n", "            ", "out_arrays", "=", "out_arrays", "[", "0", "]", "if", "len", "(", "out_arrays", ")", "==", "1", "else", "tuple", "(", "out_arrays", ")", "\n", "", "return", "out_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.list_ops": [[456, 463], ["tensorflow.get_default_graph().get_operations", "tensorflow.get_default_graph", "op.name.startswith", "op.name.startswith"], "methods", ["None"], ["", "def", "list_ops", "(", "self", ")", "->", "List", "[", "TfExpression", "]", ":", "\n", "        ", "include_prefix", "=", "self", ".", "scope", "+", "\"/\"", "\n", "exclude_prefix", "=", "include_prefix", "+", "\"_\"", "\n", "ops", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_operations", "(", ")", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "op", ".", "name", ".", "startswith", "(", "include_prefix", ")", "]", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "exclude_prefix", ")", "]", "\n", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.list_layers": [[464, 506], ["network.Network.list_layers.recurse"], "methods", ["None"], ["", "def", "list_layers", "(", "self", ")", "->", "List", "[", "Tuple", "[", "str", ",", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", "]", ":", "\n", "        ", "\"\"\"Returns a list of (layer_name, output_expr, trainable_vars) tuples corresponding to\n        individual layers of the network. Mainly intended to be used for reporting.\"\"\"", "\n", "layers", "=", "[", "]", "\n", "\n", "def", "recurse", "(", "scope", ",", "parent_ops", ",", "parent_vars", ",", "level", ")", ":", "\n", "# Ignore specific patterns.", "\n", "            ", "if", "any", "(", "p", "in", "scope", "for", "p", "in", "[", "\"/Shape\"", ",", "\"/strided_slice\"", ",", "\"/Cast\"", ",", "\"/concat\"", ",", "\"/Assign\"", "]", ")", ":", "\n", "                ", "return", "\n", "\n", "# Filter ops and vars by scope.", "\n", "", "global_prefix", "=", "scope", "+", "\"/\"", "\n", "local_prefix", "=", "global_prefix", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "parent_ops", "if", "op", ".", "name", ".", "startswith", "(", "global_prefix", ")", "or", "op", ".", "name", "==", "global_prefix", "[", ":", "-", "1", "]", "]", "\n", "cur_vars", "=", "[", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "parent_vars", "if", "name", ".", "startswith", "(", "local_prefix", ")", "or", "name", "==", "local_prefix", "[", ":", "-", "1", "]", "]", "\n", "if", "not", "cur_ops", "and", "not", "cur_vars", ":", "\n", "                ", "return", "\n", "\n", "# Filter out all ops related to variables.", "\n", "", "for", "var", "in", "[", "op", "for", "op", "in", "cur_ops", "if", "op", ".", "type", ".", "startswith", "(", "\"Variable\"", ")", "]", ":", "\n", "                ", "var_prefix", "=", "var", ".", "name", "+", "\"/\"", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "cur_ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "var_prefix", ")", "]", "\n", "\n", "# Scope does not contain ops as immediate children => recurse deeper.", "\n", "", "contains_direct_ops", "=", "any", "(", "\"/\"", "not", "in", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "and", "op", ".", "type", "!=", "\"Identity\"", "for", "op", "in", "cur_ops", ")", "\n", "if", "(", "level", "==", "0", "or", "not", "contains_direct_ops", ")", "and", "(", "len", "(", "cur_ops", ")", "+", "len", "(", "cur_vars", ")", ")", ">", "1", ":", "\n", "                ", "visited", "=", "set", "(", ")", "\n", "for", "rel_name", "in", "[", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "for", "op", "in", "cur_ops", "]", "+", "[", "name", "[", "len", "(", "local_prefix", ")", ":", "]", "for", "name", ",", "_var", "in", "cur_vars", "]", ":", "\n", "                    ", "token", "=", "rel_name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "if", "token", "not", "in", "visited", ":", "\n", "                        ", "recurse", "(", "global_prefix", "+", "token", ",", "cur_ops", ",", "cur_vars", ",", "level", "+", "1", ")", "\n", "visited", ".", "add", "(", "token", ")", "\n", "", "", "return", "\n", "\n", "# Report layer.", "\n", "", "layer_name", "=", "scope", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "layer_output", "=", "cur_ops", "[", "-", "1", "]", ".", "outputs", "[", "0", "]", "if", "cur_ops", "else", "cur_vars", "[", "-", "1", "]", "[", "1", "]", "\n", "layer_trainables", "=", "[", "var", "for", "_name", ",", "var", "in", "cur_vars", "if", "var", ".", "trainable", "]", "\n", "layers", ".", "append", "(", "(", "layer_name", ",", "layer_output", ",", "layer_trainables", ")", ")", "\n", "\n", "", "recurse", "(", "self", ".", "scope", ",", "self", ".", "list_ops", "(", ")", ",", "list", "(", "self", ".", "vars", ".", "items", "(", ")", ")", ",", "0", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.print_layers": [[507, 535], ["network.Network.list_layers", "print", "print", "sum", "weights.sort", "max", "print", "str", "str", "zip", "numpy.prod", "var.name.endswith", "len", "len", "str", "str", "len", "tfutil.shape_to_list", "len", "len", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.list_layers", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list"], ["", "def", "print_layers", "(", "self", ",", "title", ":", "str", "=", "None", ",", "hide_layers_with_no_params", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"Print a summary table of the network structure.\"\"\"", "\n", "rows", "=", "[", "[", "title", "if", "title", "is", "not", "None", "else", "self", ".", "name", ",", "\"Params\"", ",", "\"OutputShape\"", ",", "\"WeightShape\"", "]", "]", "\n", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "total_params", "=", "0", "\n", "\n", "for", "layer_name", ",", "layer_output", ",", "layer_trainables", "in", "self", ".", "list_layers", "(", ")", ":", "\n", "            ", "num_params", "=", "sum", "(", "np", ".", "prod", "(", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", ")", "for", "var", "in", "layer_trainables", ")", "\n", "weights", "=", "[", "var", "for", "var", "in", "layer_trainables", "if", "var", ".", "name", ".", "endswith", "(", "\"/weight:0\"", ")", "]", "\n", "weights", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", ".", "name", ")", ")", "\n", "if", "len", "(", "weights", ")", "==", "0", "and", "len", "(", "layer_trainables", ")", "==", "1", ":", "\n", "                ", "weights", "=", "layer_trainables", "\n", "", "total_params", "+=", "num_params", "\n", "\n", "if", "not", "hide_layers_with_no_params", "or", "num_params", "!=", "0", ":", "\n", "                ", "num_params_str", "=", "str", "(", "num_params", ")", "if", "num_params", ">", "0", "else", "\"-\"", "\n", "output_shape_str", "=", "str", "(", "layer_output", ".", "shape", ")", "\n", "weight_shape_str", "=", "str", "(", "weights", "[", "0", "]", ".", "shape", ")", "if", "len", "(", "weights", ")", ">=", "1", "else", "\"-\"", "\n", "rows", "+=", "[", "[", "layer_name", ",", "num_params_str", ",", "output_shape_str", ",", "weight_shape_str", "]", "]", "\n", "\n", "", "", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "rows", "+=", "[", "[", "\"Total\"", ",", "str", "(", "total_params", ")", ",", "\"\"", ",", "\"\"", "]", "]", "\n", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "print", "(", "\"  \"", ".", "join", "(", "cell", "+", "\" \"", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.setup_weight_histograms": [[536, 550], ["tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "network.Network.trainables.items", "tensorflow.summary.histogram", "local_name.split"], "methods", ["None"], ["", "def", "setup_weight_histograms", "(", "self", ",", "title", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct summary ops to include histograms of all trainable parameters in TensorBoard.\"\"\"", "\n", "if", "title", "is", "None", ":", "\n", "            ", "title", "=", "self", ".", "name", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "for", "local_name", ",", "var", "in", "self", ".", "trainables", ".", "items", "(", ")", ":", "\n", "                ", "if", "\"/\"", "in", "local_name", ":", "\n", "                    ", "p", "=", "local_name", ".", "split", "(", "\"/\"", ")", "\n", "name", "=", "title", "+", "\"_\"", "+", "p", "[", "-", "1", "]", "+", "\"/\"", "+", "\"_\"", ".", "join", "(", "p", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "name", "=", "title", "+", "\"_toplevel/\"", "+", "local_name", "\n", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.import_handler": [[30, 34], ["_import_handlers.append"], "function", ["None"], ["def", "import_handler", "(", "handler_func", ")", ":", "\n", "    ", "\"\"\"Function decorator for declaring custom import handlers.\"\"\"", "\n", "_import_handlers", ".", "append", "(", "handler_func", ")", "\n", "return", "handler_func", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network._handle_legacy_output_transforms": [[556, 575], ["dict", "any", "print", "print", "print", "print", "print", "dict.pop"], "function", ["None"], ["def", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", ":", "\n", "    ", "global", "_print_legacy_warning", "\n", "legacy_kwargs", "=", "[", "\"out_mul\"", ",", "\"out_add\"", ",", "\"out_shrink\"", ",", "\"out_dtype\"", "]", "\n", "if", "not", "any", "(", "kwarg", "in", "dynamic_kwargs", "for", "kwarg", "in", "legacy_kwargs", ")", ":", "\n", "        ", "return", "output_transform", ",", "dynamic_kwargs", "\n", "\n", "", "if", "_print_legacy_warning", ":", "\n", "        ", "_print_legacy_warning", "=", "False", "\n", "print", "(", ")", "\n", "print", "(", "\"WARNING: Old-style output transformations in Network.run() are deprecated.\"", ")", "\n", "print", "(", "\"Consider using 'output_transform=dict(func=tflib.convert_images_to_uint8)'\"", ")", "\n", "print", "(", "\"instead of 'out_mul=127.5, out_add=127.5, out_dtype=np.uint8'.\"", ")", "\n", "print", "(", ")", "\n", "", "assert", "output_transform", "is", "None", "\n", "\n", "new_kwargs", "=", "dict", "(", "dynamic_kwargs", ")", "\n", "new_transform", "=", "{", "kwarg", ":", "new_kwargs", ".", "pop", "(", "kwarg", ")", "for", "kwarg", "in", "legacy_kwargs", "if", "kwarg", "in", "dynamic_kwargs", "}", "\n", "new_transform", "[", "\"func\"", "]", "=", "_legacy_output_transform_func", "\n", "return", "new_transform", ",", "new_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network._legacy_output_transform_func": [[576, 592], ["tensorflow.nn.avg_pool", "tensorflow.as_dtype", "tensorflow.saturate_cast", "tensorflow.round"], "function", ["None"], ["", "def", "_legacy_output_transform_func", "(", "*", "expr", ",", "out_mul", "=", "1.0", ",", "out_add", "=", "0.0", ",", "out_shrink", "=", "1", ",", "out_dtype", "=", "None", ")", ":", "\n", "    ", "if", "out_mul", "!=", "1.0", ":", "\n", "        ", "expr", "=", "[", "x", "*", "out_mul", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_add", "!=", "0.0", ":", "\n", "        ", "expr", "=", "[", "x", "+", "out_add", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_shrink", ">", "1", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "out_shrink", ",", "out_shrink", "]", "\n", "expr", "=", "[", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "\"VALID\"", ",", "data_format", "=", "\"NCHW\"", ")", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_dtype", "is", "not", "None", ":", "\n", "        ", "if", "tf", ".", "as_dtype", "(", "out_dtype", ")", ".", "is_integer", ":", "\n", "            ", "expr", "=", "[", "tf", ".", "round", "(", "x", ")", "for", "x", "in", "expr", "]", "\n", "", "expr", "=", "[", "tf", ".", "saturate_cast", "(", "x", ",", "out_dtype", ")", "for", "x", "in", "expr", "]", "\n", "", "return", "expr", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary._create_var": [[42, 72], ["name.replace", "tensorflow.cast", "tf.reshape.shape.is_fully_defined", "tensorflow.cond", "tensorflow.cond", "numpy.prod", "tensorflow.constant", "tensorflow.reduce_prod", "tensorflow.is_finite", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.is_variable_initialized", "_vars[].append", "tfutil.shape_to_list", "tensorflow.cast", "tensorflow.reshape", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.assign_add", "tensorflow.assign", "tensorflow.shape", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_sum", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.distributed.reduce_sum"], ["def", "_create_var", "(", "name", ":", "str", ",", "value_expr", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Internal helper for creating autosummary accumulators.\"\"\"", "\n", "assert", "not", "_finalized", "\n", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "v", "=", "tf", ".", "cast", "(", "value_expr", ",", "_dtype", ")", "\n", "\n", "if", "v", ".", "shape", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "tfutil", ".", "shape_to_list", "(", "v", ".", "shape", ")", ")", "\n", "size_expr", "=", "tf", ".", "constant", "(", "size", ",", "dtype", "=", "_dtype", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "None", "\n", "size_expr", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", ",", "_dtype", ")", ")", "\n", "\n", "", "if", "size", "==", "1", ":", "\n", "        ", "if", "v", ".", "shape", ".", "ndims", "!=", "0", ":", "\n", "            ", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "]", ")", "\n", "", "v", "=", "[", "size_expr", ",", "v", ",", "tf", ".", "square", "(", "v", ")", "]", "\n", "", "else", ":", "\n", "        ", "v", "=", "[", "size_expr", ",", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ")", "]", "\n", "", "v", "=", "tf", ".", "cond", "(", "tf", ".", "is_finite", "(", "v", "[", "1", "]", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "v", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "\n", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ",", "trainable", "=", "False", ")", "# [sum(1), sum(x), sum(x**2)]", "\n", "", "update_op", "=", "tf", ".", "cond", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ",", "lambda", ":", "tf", ".", "assign_add", "(", "var", ",", "v", ")", ",", "lambda", ":", "tf", ".", "assign", "(", "var", ",", "v", ")", ")", "\n", "\n", "if", "name", "in", "_vars", ":", "\n", "        ", "_vars", "[", "name", "]", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "        ", "_vars", "[", "name", "]", "=", "[", "var", "]", "\n", "", "return", "update_op", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.autosummary": [[74, 110], ["tfutil.assert_tf_initialized", "name.replace", "tfutil.is_tf_expression", "tfutil.run", "tensorflow.name_scope", "tensorflow.device", "autosummary._create_var", "tensorflow.control_dependencies", "tensorflow.identity", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.placeholder", "autosummary._create_var"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary._create_var", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary._create_var"], ["", "def", "autosummary", "(", "name", ":", "str", ",", "value", ":", "TfExpressionEx", ",", "passthru", ":", "TfExpressionEx", "=", "None", ")", "->", "TfExpressionEx", ":", "\n", "    ", "\"\"\"Create a new autosummary.\n\n    Args:\n        name:     Name to use in TensorBoard\n        value:    TensorFlow expression or python value to track\n        passthru: Optionally return this TF node without modifications but tack an autosummary update side-effect to this node.\n\n    Example use of the passthru mechanism:\n\n    n = autosummary('l2loss', loss, passthru=n)\n\n    This is a shorthand for the following code:\n\n    with tf.control_dependencies([autosummary('l2loss', loss)]):\n        n = tf.identity(n)\n    \"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "\n", "if", "tfutil", ".", "is_tf_expression", "(", "value", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"summary_\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "value", ".", "device", ")", ":", "\n", "            ", "update_op", "=", "_create_var", "(", "name", ",", "value", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "value", "if", "passthru", "is", "None", "else", "passthru", ")", "\n", "\n", "", "", "", "else", ":", "# python scalar or numpy array", "\n", "        ", "if", "name", "not", "in", "_immediate", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "update_value", "=", "tf", ".", "placeholder", "(", "_dtype", ")", "\n", "update_op", "=", "_create_var", "(", "name", ",", "update_value", ")", "\n", "_immediate", "[", "name", "]", "=", "update_op", ",", "update_value", "\n", "\n", "", "", "update_op", ",", "update_value", "=", "_immediate", "[", "name", "]", "\n", "tfutil", ".", "run", "(", "update_op", ",", "{", "update_value", ":", "value", "}", ")", "\n", "return", "value", "if", "passthru", "is", "None", "else", "passthru", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.finalize_autosummaries": [[112, 169], ["tfutil.assert_tf_initialized", "tfutil.init_uninitialized_vars", "collections.OrderedDict", "sorted", "collections.OrderedDict.items", "tensorboard.summary.custom_scalar_pb", "tensorflow.device", "tensorflow.control_dependencies", "_vars.items", "_vars.keys", "series_name.split", "[].append", "chart_dict.items", "categories.append", "tensorboard.plugins.custom_scalar.layout_pb2.Layout", "name.replace", "collections.OrderedDict", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent", "charts.append", "tensorboard.plugins.custom_scalar.layout_pb2.Category", "_vars.values", "tfutil.absolute_name_scope", "tensorflow.add_n", "len", "len", "series.append", "tensorboard.plugins.custom_scalar.layout_pb2.Chart", "tensorflow.control_dependencies", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent.Series", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.control_dependencies", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.zeros", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope"], ["", "", "def", "finalize_autosummaries", "(", ")", "->", "None", ":", "\n", "    ", "\"\"\"Create the necessary ops to include autosummaries in TensorBoard report.\n    Note: This should be done only once per graph.\n    \"\"\"", "\n", "global", "_finalized", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "\n", "if", "_finalized", ":", "\n", "        ", "return", "None", "\n", "\n", "", "_finalized", "=", "True", "\n", "tfutil", ".", "init_uninitialized_vars", "(", "[", "var", "for", "vars_list", "in", "_vars", ".", "values", "(", ")", "for", "var", "in", "vars_list", "]", ")", "\n", "\n", "# Create summary ops.", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "for", "name", ",", "vars_list", "in", "_vars", ".", "items", "(", ")", ":", "\n", "            ", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ":", "\n", "                ", "moments", "=", "tf", ".", "add_n", "(", "vars_list", ")", "\n", "moments", "/=", "moments", "[", "0", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "moments", "]", ")", ":", "# read before resetting", "\n", "                    ", "reset_ops", "=", "[", "tf", ".", "assign", "(", "var", ",", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "for", "var", "in", "vars_list", "]", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "reset_ops", ")", ":", "# reset before reporting", "\n", "                        ", "mean", "=", "moments", "[", "1", "]", "\n", "std", "=", "tf", ".", "sqrt", "(", "moments", "[", "2", "]", "-", "tf", ".", "square", "(", "moments", "[", "1", "]", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "mean", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_lo\"", ",", "mean", "-", "std", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_hi\"", ",", "mean", "+", "std", ")", "\n", "\n", "# Group by category and chart name.", "\n", "", "", "", "", "", "cat_dict", "=", "OrderedDict", "(", ")", "\n", "for", "series_name", "in", "sorted", "(", "_vars", ".", "keys", "(", ")", ")", ":", "\n", "        ", "p", "=", "series_name", ".", "split", "(", "\"/\"", ")", "\n", "cat", "=", "p", "[", "0", "]", "if", "len", "(", "p", ")", ">=", "2", "else", "\"\"", "\n", "chart", "=", "\"/\"", ".", "join", "(", "p", "[", "1", ":", "-", "1", "]", ")", "if", "len", "(", "p", ")", ">=", "3", "else", "p", "[", "-", "1", "]", "\n", "if", "cat", "not", "in", "cat_dict", ":", "\n", "            ", "cat_dict", "[", "cat", "]", "=", "OrderedDict", "(", ")", "\n", "", "if", "chart", "not", "in", "cat_dict", "[", "cat", "]", ":", "\n", "            ", "cat_dict", "[", "cat", "]", "[", "chart", "]", "=", "[", "]", "\n", "", "cat_dict", "[", "cat", "]", "[", "chart", "]", ".", "append", "(", "series_name", ")", "\n", "\n", "# Setup custom_scalar layout.", "\n", "", "categories", "=", "[", "]", "\n", "for", "cat_name", ",", "chart_dict", "in", "cat_dict", ".", "items", "(", ")", ":", "\n", "        ", "charts", "=", "[", "]", "\n", "for", "chart_name", ",", "series_names", "in", "chart_dict", ".", "items", "(", ")", ":", "\n", "            ", "series", "=", "[", "]", "\n", "for", "series_name", "in", "series_names", ":", "\n", "                ", "series", ".", "append", "(", "layout_pb2", ".", "MarginChartContent", ".", "Series", "(", "\n", "value", "=", "series_name", ",", "\n", "lower", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_lo\"", ",", "\n", "upper", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_hi\"", ")", ")", "\n", "", "margin", "=", "layout_pb2", ".", "MarginChartContent", "(", "series", "=", "series", ")", "\n", "charts", ".", "append", "(", "layout_pb2", ".", "Chart", "(", "title", "=", "chart_name", ",", "margin", "=", "margin", ")", ")", "\n", "", "categories", ".", "append", "(", "layout_pb2", ".", "Category", "(", "title", "=", "cat_name", ",", "chart", "=", "charts", ")", ")", "\n", "", "layout", "=", "summary_lib", ".", "custom_scalar_pb", "(", "layout_pb2", ".", "Layout", "(", "category", "=", "categories", ")", ")", "\n", "return", "layout", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.save_summaries": [[170, 185], ["tfutil.assert_tf_initialized", "file_writer.add_summary", "autosummary.finalize_autosummaries", "tf.summary.merge_all.eval", "file_writer.add_summary", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.summary.merge_all"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.finalize_autosummaries"], ["", "def", "save_summaries", "(", "file_writer", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call FileWriter.add_summary() with all summaries in the default graph,\n    automatically finalizing and merging them on the first call.\n    \"\"\"", "\n", "global", "_merge_op", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "\n", "if", "_merge_op", "is", "None", ":", "\n", "        ", "layout", "=", "finalize_autosummaries", "(", ")", "\n", "if", "layout", "is", "not", "None", ":", "\n", "            ", "file_writer", ".", "add_summary", "(", "layout", ")", "\n", "", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "_merge_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "", "", "file_writer", ".", "add_summary", "(", "_merge_op", ".", "eval", "(", ")", ",", "global_step", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.__init__": [[40, 66], ["tensorflow.convert_to_tensor", "optimizer.Optimizer.name.replace", "tensorflow.get_default_graph().unique_name", "util.get_obj_by_name", "dict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.get_obj_by_name"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "\"Train\"", ",", "\n", "tf_optimizer", ":", "str", "=", "\"tf.train.AdamOptimizer\"", ",", "\n", "learning_rate", ":", "TfExpressionEx", "=", "0.001", ",", "\n", "use_loss_scaling", ":", "bool", "=", "False", ",", "\n", "loss_scaling_init", ":", "float", "=", "64.0", ",", "\n", "loss_scaling_inc", ":", "float", "=", "0.0005", ",", "\n", "loss_scaling_dec", ":", "float", "=", "1.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# Init fields.", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "learning_rate", "=", "tf", ".", "convert_to_tensor", "(", "learning_rate", ")", "\n", "self", ".", "id", "=", "self", ".", "name", ".", "replace", "(", "\"/\"", ",", "\".\"", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "id", ")", "\n", "self", ".", "optimizer_class", "=", "util", ".", "get_obj_by_name", "(", "tf_optimizer", ")", "\n", "self", ".", "optimizer_kwargs", "=", "dict", "(", "kwargs", ")", "\n", "self", ".", "use_loss_scaling", "=", "use_loss_scaling", "\n", "self", ".", "loss_scaling_init", "=", "loss_scaling_init", "\n", "self", ".", "loss_scaling_inc", "=", "loss_scaling_inc", "\n", "self", ".", "loss_scaling_dec", "=", "loss_scaling_dec", "\n", "self", ".", "_grad_shapes", "=", "None", "# [shape, ...]", "\n", "self", ".", "_dev_opt", "=", "OrderedDict", "(", ")", "# device => optimizer", "\n", "self", ".", "_dev_grads", "=", "OrderedDict", "(", ")", "# device => [[(grad, var), ...], ...]", "\n", "self", ".", "_dev_ls_var", "=", "OrderedDict", "(", ")", "# device => variable (log2 of loss scaling factor)", "\n", "self", ".", "_updates_applied", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.register_gradients": [[67, 101], ["isinstance", "all", "all", "all", "list", "isinstance", "len", "len", "tensorflow.name_scope", "tensorflow.device", "optimizer.Optimizer.apply_loss_scaling", "optimizer.Optimizer._dev_opt[].compute_gradients", "optimizer.Optimizer._dev_grads[].append", "list.values", "len", "tfutil.is_tf_expression", "tfutil.shape_to_list", "callable", "optimizer.Optimizer.optimizer_class", "tensorflow.cast", "tfutil.shape_to_list", "zip", "optimizer.Optimizer.scope.replace", "len", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.shape_to_list"], ["", "def", "register_gradients", "(", "self", ",", "loss", ":", "TfExpression", ",", "trainable_vars", ":", "Union", "[", "List", ",", "dict", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Register the gradients of the given loss function with respect to the given variables.\n        Intended to be called once per GPU.\"\"\"", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "\n", "# Validate arguments.", "\n", "if", "isinstance", "(", "trainable_vars", ",", "dict", ")", ":", "\n", "            ", "trainable_vars", "=", "list", "(", "trainable_vars", ".", "values", "(", ")", ")", "# allow passing in Network.trainables as vars", "\n", "\n", "", "assert", "isinstance", "(", "trainable_vars", ",", "list", ")", "and", "len", "(", "trainable_vars", ")", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "expr", ")", "for", "expr", "in", "trainable_vars", "+", "[", "loss", "]", ")", "\n", "\n", "if", "self", ".", "_grad_shapes", "is", "None", ":", "\n", "            ", "self", ".", "_grad_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", "for", "var", "in", "trainable_vars", "]", "\n", "\n", "", "assert", "len", "(", "trainable_vars", ")", "==", "len", "(", "self", ".", "_grad_shapes", ")", "\n", "assert", "all", "(", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", "==", "var_shape", "for", "var", ",", "var_shape", "in", "zip", "(", "trainable_vars", ",", "self", ".", "_grad_shapes", ")", ")", "\n", "\n", "dev", "=", "loss", ".", "device", "\n", "\n", "assert", "all", "(", "var", ".", "device", "==", "dev", "for", "var", "in", "trainable_vars", ")", "\n", "\n", "# Register device and compute gradients.", "\n", "with", "tf", ".", "name_scope", "(", "self", ".", "id", "+", "\"_grad\"", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "            ", "if", "dev", "not", "in", "self", ".", "_dev_opt", ":", "\n", "                ", "opt_name", "=", "self", ".", "scope", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "+", "\"_opt%d\"", "%", "len", "(", "self", ".", "_dev_opt", ")", "\n", "assert", "callable", "(", "self", ".", "optimizer_class", ")", "\n", "self", ".", "_dev_opt", "[", "dev", "]", "=", "self", ".", "optimizer_class", "(", "name", "=", "opt_name", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optimizer_kwargs", ")", "\n", "self", ".", "_dev_grads", "[", "dev", "]", "=", "[", "]", "\n", "\n", "", "loss", "=", "self", ".", "apply_loss_scaling", "(", "tf", ".", "cast", "(", "loss", ",", "tf", ".", "float32", ")", ")", "\n", "grads", "=", "self", ".", "_dev_opt", "[", "dev", "]", ".", "compute_gradients", "(", "loss", ",", "trainable_vars", ",", "gate_gradients", "=", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", ")", "# disable gating to reduce memory usage", "\n", "grads", "=", "[", "(", "g", ",", "v", ")", "if", "g", "is", "not", "None", "else", "(", "tf", ".", "zeros_like", "(", "v", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "# replace disconnected gradients with zeros", "\n", "self", ".", "_dev_grads", "[", "dev", "]", ".", "append", "(", "grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.apply_updates": [[102, 181], ["tfutil.assert_tf_initialized", "list", "sum", "optimizer.Optimizer._dev_grads.keys", "tfutil.absolute_name_scope", "collections.OrderedDict", "enumerate", "enumerate", "optimizer.Optimizer.reset_optimizer_state", "tfutil.init_uninitialized_vars", "tensorflow.group", "len", "len", "len", "collections.OrderedDict.items", "list", "optimizer.Optimizer._dev_grads.values", "tensorflow.name_scope", "tensorflow.device", "zip", "tensorflow.name_scope", "tensorflow.device", "enumerate", "tensorflow.name_scope", "tensorflow.device", "optimizer.Optimizer._dev_ls_var.values", "all", "sums.append", "numpy.prod", "zip", "tensorflow.name_scope", "tensorflow.reduce_all", "tensorflow.name_scope", "optimizer.Optimizer.get_loss_scaling_var", "tensorflow.cast", "tensorflow.add_n", "nccl_ops.all_sum", "tensorflow.name_scope", "tensorflow.constant", "optimizer.Optimizer.undo_loss_scaling", "tensorflow.stack", "ops.append", "ops.append", "tensorflow.name_scope", "ops.append", "ops.append", "len", "numpy.float32", "tensorflow.cond", "tensorflow.cond", "autosummary.autosummary", "autosummary.autosummary", "ops.append", "tensorflow.reduce_all", "tensorflow.where", "autosummary.autosummary", "tensorflow.is_finite", "opt.apply_gradients", "tensorflow.group", "tensorflow.group", "tensorflow.assign_add", "opt.apply_gradients", "tensorflow.assign_sub"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.get_loss_scaling_var", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.autosummary.autosummary"], ["", "", "def", "apply_updates", "(", "self", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct training op to update the registered variables based on their gradients.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "self", ".", "_updates_applied", "=", "True", "\n", "devices", "=", "list", "(", "self", ".", "_dev_grads", ".", "keys", "(", ")", ")", "\n", "total_grads", "=", "sum", "(", "len", "(", "grads", ")", "for", "grads", "in", "self", ".", "_dev_grads", ".", "values", "(", ")", ")", "\n", "assert", "len", "(", "devices", ")", ">=", "1", "and", "total_grads", ">=", "1", "\n", "ops", "=", "[", "]", "\n", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "# Cast gradients to FP32 and calculate partial sum within each device.", "\n", "            ", "dev_grads", "=", "OrderedDict", "(", ")", "# device => [(grad, var), ...]", "\n", "\n", "for", "dev_idx", ",", "dev", "in", "enumerate", "(", "devices", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"ProcessGrads%d\"", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "                    ", "sums", "=", "[", "]", "\n", "\n", "for", "gv", "in", "zip", "(", "*", "self", ".", "_dev_grads", "[", "dev", "]", ")", ":", "\n", "                        ", "assert", "all", "(", "v", "is", "gv", "[", "0", "]", "[", "1", "]", "for", "g", ",", "v", "in", "gv", ")", "\n", "g", "=", "[", "tf", ".", "cast", "(", "g", ",", "tf", ".", "float32", ")", "for", "g", ",", "v", "in", "gv", "]", "\n", "g", "=", "g", "[", "0", "]", "if", "len", "(", "g", ")", "==", "1", "else", "tf", ".", "add_n", "(", "g", ")", "\n", "sums", ".", "append", "(", "(", "g", ",", "gv", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "dev_grads", "[", "dev", "]", "=", "sums", "\n", "\n", "# Sum gradients across devices.", "\n", "", "", "if", "len", "(", "devices", ")", ">", "1", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"SumAcrossGPUs\"", ")", ",", "tf", ".", "device", "(", "None", ")", ":", "\n", "                    ", "for", "var_idx", ",", "grad_shape", "in", "enumerate", "(", "self", ".", "_grad_shapes", ")", ":", "\n", "                        ", "g", "=", "[", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "0", "]", "for", "dev", "in", "devices", "]", "\n", "\n", "if", "np", ".", "prod", "(", "grad_shape", ")", ":", "# nccl does not support zero-sized tensors", "\n", "                            ", "g", "=", "nccl_ops", ".", "all_sum", "(", "g", ")", "\n", "\n", "", "for", "dev", ",", "gg", "in", "zip", "(", "devices", ",", "g", ")", ":", "\n", "                            ", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "=", "(", "gg", ",", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "1", "]", ")", "\n", "\n", "# Apply updates separately on each device.", "\n", "", "", "", "", "for", "dev_idx", ",", "(", "dev", ",", "grads", ")", "in", "enumerate", "(", "dev_grads", ".", "items", "(", ")", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"ApplyGrads%d\"", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "# Scale gradients as needed.", "\n", "                    ", "if", "self", ".", "use_loss_scaling", "or", "total_grads", ">", "1", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "\"Scale\"", ")", ":", "\n", "                            ", "coef", "=", "tf", ".", "constant", "(", "np", ".", "float32", "(", "1.0", "/", "total_grads", ")", ",", "name", "=", "\"coef\"", ")", "\n", "coef", "=", "self", ".", "undo_loss_scaling", "(", "coef", ")", "\n", "grads", "=", "[", "(", "g", "*", "coef", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "\n", "\n", "# Check for overflows.", "\n", "", "", "with", "tf", ".", "name_scope", "(", "\"CheckOverflow\"", ")", ":", "\n", "                        ", "grad_ok", "=", "tf", ".", "reduce_all", "(", "tf", ".", "stack", "(", "[", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "for", "g", ",", "v", "in", "grads", "]", ")", ")", "\n", "\n", "# Update weights and adjust loss scaling.", "\n", "", "with", "tf", ".", "name_scope", "(", "\"UpdateWeights\"", ")", ":", "\n", "# pylint: disable=cell-var-from-loop", "\n", "                        ", "opt", "=", "self", ".", "_dev_opt", "[", "dev", "]", "\n", "ls_var", "=", "self", ".", "get_loss_scaling_var", "(", "dev", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "lambda", ":", "opt", ".", "apply_gradients", "(", "grads", ")", ",", "tf", ".", "no_op", ")", ")", "\n", "", "else", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_add", "(", "ls_var", ",", "self", ".", "loss_scaling_inc", ")", ",", "opt", ".", "apply_gradients", "(", "grads", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_sub", "(", "ls_var", ",", "self", ".", "loss_scaling_dec", ")", ")", ")", ")", "\n", "\n", "# Report statistics on the last device.", "\n", "", "", "if", "dev", "==", "devices", "[", "-", "1", "]", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "\"Statistics\"", ")", ":", "\n", "                            ", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/learning_rate\"", ",", "self", ".", "learning_rate", ")", ")", "\n", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/overflow_frequency\"", ",", "tf", ".", "where", "(", "grad_ok", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                                ", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/loss_scaling_log2\"", ",", "ls_var", ")", ")", "\n", "\n", "# Initialize variables and group everything into a single op.", "\n", "", "", "", "", "", "self", ".", "reset_optimizer_state", "(", ")", "\n", "tfutil", ".", "init_uninitialized_vars", "(", "list", "(", "self", ".", "_dev_ls_var", ".", "values", "(", ")", ")", ")", "\n", "\n", "return", "tf", ".", "group", "(", "*", "ops", ",", "name", "=", "\"TrainingOp\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.reset_optimizer_state": [[182, 186], ["tfutil.assert_tf_initialized", "tfutil.run", "optimizer.Optimizer._dev_opt.values", "opt.variables"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.run"], ["", "", "def", "reset_optimizer_state", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset internal state of the underlying optimizer.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "opt", "in", "self", ".", "_dev_opt", ".", "values", "(", ")", "for", "var", "in", "opt", ".", "variables", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.get_loss_scaling_var": [[187, 197], ["tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.Variable", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.absolute_name_scope"], ["", "def", "get_loss_scaling_var", "(", "self", ",", "device", ":", "str", ")", "->", "Union", "[", "tf", ".", "Variable", ",", "None", "]", ":", "\n", "        ", "\"\"\"Get or create variable representing log2 of the current dynamic loss scaling factor.\"\"\"", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "device", "not", "in", "self", ".", "_dev_ls_var", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/LossScalingVars\"", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "self", ".", "_dev_ls_var", "[", "device", "]", "=", "tf", ".", "Variable", "(", "np", ".", "float32", "(", "self", ".", "loss_scaling_init", ")", ",", "name", "=", "\"loss_scaling_var\"", ")", "\n", "\n", "", "", "return", "self", ".", "_dev_ls_var", "[", "device", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.apply_loss_scaling": [[198, 206], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "apply_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Apply dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.undo_loss_scaling": [[207, 215], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "undo_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Undo the effect of dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "-", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.str2bool": [[24, 26], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.subdirs": [[28, 31], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir"], ["", "def", "subdirs", "(", "dname", ")", ":", "\n", "    ", "return", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dname", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dname", ",", "d", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.main": [[33, 82], ["print", "torch.manual_seed", "core.solver.Solver", "munch.Munch", "core.solver.Solver.train", "len", "len", "munch.Munch", "core.solver.Solver.sample", "main.subdirs", "main.subdirs", "core.data_loader.get_train_loader", "core.data_loader.get_train_loader", "core.data_loader.get_test_loader", "len", "len", "core.solver.Solver.evaluate", "main.subdirs", "main.subdirs", "core.data_loader.get_test_loader", "core.data_loader.get_test_loader", "align_faces"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.train", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.sample", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.subdirs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.subdirs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_train_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_train_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.evaluate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.subdirs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.subdirs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.align_faces"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "solver", "=", "Solver", "(", "args", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "        ", "assert", "len", "(", "subdirs", "(", "args", ".", "train_img_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "assert", "len", "(", "subdirs", "(", "args", ".", "val_img_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "loaders", "=", "Munch", "(", "src", "=", "get_train_loader", "(", "root", "=", "args", ".", "train_img_dir", ",", "\n", "which", "=", "'source'", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "prob", "=", "args", ".", "randcrop_prob", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "ref", "=", "get_train_loader", "(", "root", "=", "args", ".", "train_img_dir", ",", "\n", "which", "=", "'reference'", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "prob", "=", "args", ".", "randcrop_prob", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "val", "=", "get_test_loader", "(", "root", "=", "args", ".", "val_img_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ")", "\n", "solver", ".", "train", "(", "loaders", ")", "\n", "", "elif", "args", ".", "mode", "==", "'sample'", ":", "\n", "        ", "assert", "len", "(", "subdirs", "(", "args", ".", "src_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "assert", "len", "(", "subdirs", "(", "args", ".", "ref_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "loaders", "=", "Munch", "(", "src", "=", "get_test_loader", "(", "root", "=", "args", ".", "src_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "ref", "=", "get_test_loader", "(", "root", "=", "args", ".", "ref_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ")", "\n", "solver", ".", "sample", "(", "loaders", ")", "\n", "", "elif", "args", ".", "mode", "==", "'eval'", ":", "\n", "        ", "solver", ".", "evaluate", "(", ")", "\n", "", "elif", "args", ".", "mode", "==", "'align'", ":", "\n", "        ", "from", "core", ".", "wing", "import", "align_faces", "\n", "align_faces", "(", "args", ",", "args", ".", "inp_dir", ",", "args", ".", "out_dir", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.DefaultDataset.__init__": [[34, 39], ["data_loader.listdir", "data_loader.DefaultDataset.samples.sort"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "samples", "=", "listdir", "(", "root", ")", "\n", "self", ".", "samples", ".", "sort", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "targets", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.DefaultDataset.__getitem__": [[40, 46], ["PIL.Image.open().convert", "data_loader.DefaultDataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", "=", "self", ".", "samples", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.DefaultDataset.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.ReferenceDataset.__init__": [[52, 55], ["data_loader.ReferenceDataset._make_dataset"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.ReferenceDataset._make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "samples", ",", "self", ".", "targets", "=", "self", ".", "_make_dataset", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.ReferenceDataset._make_dataset": [[56, 66], ["os.listdir", "enumerate", "sorted", "os.path.join", "data_loader.listdir", "random.sample", "list", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.sample"], ["", "def", "_make_dataset", "(", "self", ",", "root", ")", ":", "\n", "        ", "domains", "=", "os", ".", "listdir", "(", "root", ")", "\n", "fnames", ",", "fnames2", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "domain", "in", "enumerate", "(", "sorted", "(", "domains", ")", ")", ":", "\n", "            ", "class_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "domain", ")", "\n", "cls_fnames", "=", "listdir", "(", "class_dir", ")", "\n", "fnames", "+=", "cls_fnames", "\n", "fnames2", "+=", "random", ".", "sample", "(", "cls_fnames", ",", "len", "(", "cls_fnames", ")", ")", "\n", "labels", "+=", "[", "idx", "]", "*", "len", "(", "cls_fnames", ")", "\n", "", "return", "list", "(", "zip", "(", "fnames", ",", "fnames2", ")", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.ReferenceDataset.__getitem__": [[67, 76], ["PIL.Image.open().convert", "PIL.Image.open().convert", "data_loader.ReferenceDataset.transform", "data_loader.ReferenceDataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", ",", "fname2", "=", "self", ".", "samples", "[", "index", "]", "\n", "label", "=", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "fname2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "", "return", "img", ",", "img2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.ReferenceDataset.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher.__init__": [[186, 192], ["torch.device", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ",", "loader_ref", "=", "None", ",", "latent_dim", "=", "16", ",", "mode", "=", "''", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "loader_ref", "=", "loader_ref", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher._fetch_inputs": [[193, 200], ["next", "iter", "next"], "methods", ["None"], ["", "def", "_fetch_inputs", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", ",", "y", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "(", "AttributeError", ",", "StopIteration", ")", ":", "\n", "            ", "self", ".", "iter", "=", "iter", "(", "self", ".", "loader", ")", "\n", "x", ",", "y", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher._fetch_refs": [[201, 208], ["next", "iter", "next"], "methods", ["None"], ["", "def", "_fetch_refs", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", ",", "x2", ",", "y", "=", "next", "(", "self", ".", "iter_ref", ")", "\n", "", "except", "(", "AttributeError", ",", "StopIteration", ")", ":", "\n", "            ", "self", ".", "iter_ref", "=", "iter", "(", "self", ".", "loader_ref", ")", "\n", "x", ",", "x2", ",", "y", "=", "next", "(", "self", ".", "iter_ref", ")", "\n", "", "return", "x", ",", "x2", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher.__next__": [[209, 229], ["data_loader.InputFetcher._fetch_inputs", "munch.Munch", "data_loader.InputFetcher._fetch_refs", "torch.randn", "torch.randn", "munch.Munch", "x.size", "x.size", "data_loader.InputFetcher._fetch_inputs", "munch.Munch", "v.to", "munch.Munch", "munch.Munch.items"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher._fetch_inputs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher._fetch_refs", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.InputFetcher._fetch_inputs"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_fetch_inputs", "(", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "x_ref", ",", "x_ref2", ",", "y_ref", "=", "self", ".", "_fetch_refs", "(", ")", "\n", "z_trg", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "latent_dim", ")", "\n", "z_trg2", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "latent_dim", ")", "\n", "inputs", "=", "Munch", "(", "x_src", "=", "x", ",", "y_src", "=", "y", ",", "y_ref", "=", "y_ref", ",", "\n", "x_ref", "=", "x_ref", ",", "x_ref2", "=", "x_ref2", ",", "\n", "z_trg", "=", "z_trg", ",", "z_trg2", "=", "z_trg2", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "x_ref", ",", "y_ref", "=", "self", ".", "_fetch_inputs", "(", ")", "\n", "inputs", "=", "Munch", "(", "x_src", "=", "x", ",", "y_src", "=", "y", ",", "\n", "x_ref", "=", "x_ref", ",", "y_ref", "=", "y_ref", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "inputs", "=", "Munch", "(", "x", "=", "x", ",", "y", "=", "y", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "Munch", "(", "{", "k", ":", "v", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "}", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir": [[27, 31], ["list", "itertools.chain", "list", "pathlib.Path().rglob", "pathlib.Path"], "function", ["None"], ["def", "listdir", "(", "dname", ")", ":", "\n", "    ", "fnames", "=", "list", "(", "chain", "(", "*", "[", "list", "(", "Path", "(", "dname", ")", ".", "rglob", "(", "'*.'", "+", "ext", ")", ")", "\n", "for", "ext", "in", "[", "'png'", ",", "'jpg'", ",", "'jpeg'", ",", "'JPG'", "]", "]", ")", ")", "\n", "return", "fnames", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader._make_balanced_sampler": [[81, 86], ["numpy.bincount", "torch.utils.data.sampler.WeightedRandomSampler", "len"], "function", ["None"], ["", "", "def", "_make_balanced_sampler", "(", "labels", ")", ":", "\n", "    ", "class_counts", "=", "np", ".", "bincount", "(", "labels", ")", "\n", "class_weights", "=", "1.", "/", "class_counts", "\n", "weights", "=", "class_weights", "[", "labels", "]", "\n", "return", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_train_loader": [[88, 121], ["print", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Compose", "data_loader._make_balanced_sampler", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data_loader.ReferenceDataset", "transforms.RandomResizedCrop.", "random.random"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader._make_balanced_sampler"], ["", "def", "get_train_loader", "(", "root", ",", "which", "=", "'source'", ",", "img_size", "=", "256", ",", "\n", "batch_size", "=", "8", ",", "prob", "=", "0.5", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader to fetch %s images '", "\n", "'during the training phase...'", "%", "which", ")", "\n", "\n", "crop", "=", "transforms", ".", "RandomResizedCrop", "(", "\n", "img_size", ",", "scale", "=", "[", "0.8", ",", "1.0", "]", ",", "ratio", "=", "[", "0.9", ",", "1.1", "]", ")", "\n", "rand_crop", "=", "transforms", ".", "Lambda", "(", "\n", "lambda", "x", ":", "crop", "(", "x", ")", "if", "random", ".", "random", "(", ")", "<", "prob", "else", "x", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "rand_crop", ",", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "if", "which", "==", "'source'", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "root", ",", "transform", ")", "\n", "", "elif", "which", "==", "'reference'", ":", "\n", "        ", "dataset", "=", "ReferenceDataset", "(", "root", ",", "transform", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "sampler", "=", "_make_balanced_sampler", "(", "dataset", ".", "targets", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_eval_loader": [[123, 150], ["print", "torchvision.transforms.Compose", "data_loader.DefaultDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_eval_loader", "(", "root", ",", "img_size", "=", "256", ",", "batch_size", "=", "32", ",", "\n", "imagenet_normalize", "=", "True", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader for the evaluation phase...'", ")", "\n", "if", "imagenet_normalize", ":", "\n", "        ", "height", ",", "width", "=", "299", ",", "299", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "else", ":", "\n", "        ", "height", ",", "width", "=", "img_size", ",", "img_size", "\n", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "Resize", "(", "[", "height", ",", "width", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", ")", "\n", "\n", "dataset", "=", "DefaultDataset", "(", "root", ",", "transform", "=", "transform", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_test_loader": [[152, 168], ["print", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_test_loader", "(", "root", ",", "img_size", "=", "256", ",", "batch_size", "=", "32", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader for the generation phase...'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "dataset", "=", "ImageFolder", "(", "root", ",", "transform", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.get_test_loader_nonorm": [[169, 183], ["print", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_test_loader_nonorm", "(", "root", ",", "img_size", "=", "256", ",", "batch_size", "=", "32", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader for the generation phase...'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "dataset", "=", "ImageFolder", "(", "root", ",", "transform", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.__init__": [[33, 70], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "core.model.build_model", "solver.Solver.nets.items", "solver.Solver.nets_ema.items", "solver.Solver.to", "solver.Solver.named_children", "core.print_network", "setattr", "setattr", "munch.Munch", "solver.Solver.nets.keys", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "print", "network.apply", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.nets[].parameters"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.build_model", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.print_network"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "self", ".", "nets", ",", "self", ".", "nets_ema", "=", "build_model", "(", "args", ")", "\n", "# below setattrs are to make networks be children of Solver, e.g., for self.to(self.device)", "\n", "for", "name", ",", "module", "in", "self", ".", "nets", ".", "items", "(", ")", ":", "\n", "            ", "utils", ".", "print_network", "(", "module", ",", "name", ")", "\n", "setattr", "(", "self", ",", "name", ",", "module", ")", "\n", "", "for", "name", ",", "module", "in", "self", ".", "nets_ema", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "name", "+", "'_ema'", ",", "module", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "optims", "=", "Munch", "(", ")", "\n", "for", "net", "in", "self", ".", "nets", ".", "keys", "(", ")", ":", "\n", "                ", "if", "net", "==", "'fan'", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "optims", "[", "net", "]", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "nets", "[", "net", "]", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "f_lr", "if", "net", "==", "'mapping_network'", "else", "args", ".", "lr", ",", "\n", "betas", "=", "[", "args", ".", "beta1", ",", "args", ".", "beta2", "]", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "", "self", ".", "ckptios", "=", "[", "\n", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'{:06d}_nets.ckpt'", ")", ",", "**", "self", ".", "nets", ")", ",", "\n", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'{:06d}_nets_ema.ckpt'", ")", ",", "**", "self", ".", "nets_ema", ")", ",", "\n", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'{:06d}_optims.ckpt'", ")", ",", "**", "self", ".", "optims", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ckptios", "=", "[", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'{:06d}_nets_ema.ckpt'", ")", ",", "**", "self", ".", "nets_ema", ")", "]", "\n", "\n", "", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "name", ",", "network", "in", "self", ".", "named_children", "(", ")", ":", "\n", "# Do not initialize the FAN parameters", "\n", "            ", "if", "(", "'ema'", "not", "in", "name", ")", "and", "(", "'fan'", "not", "in", "name", ")", ":", "\n", "                ", "print", "(", "'Initializing %s...'", "%", "name", ")", "\n", "network", ".", "apply", "(", "utils", ".", "he_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._save_checkpoint": [[71, 74], ["ckptio.save"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["", "", "", "def", "_save_checkpoint", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "ckptio", "in", "self", ".", "ckptios", ":", "\n", "            ", "ckptio", ".", "save", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._load_checkpoint": [[75, 78], ["ckptio.load"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "", "def", "_load_checkpoint", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "ckptio", "in", "self", ".", "ckptios", ":", "\n", "            ", "ckptio", ".", "load", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._reset_grad": [[79, 82], ["solver.Solver.optims.values", "optim.zero_grad"], "methods", ["None"], ["", "", "def", "_reset_grad", "(", "self", ")", ":", "\n", "        ", "for", "optim", "in", "self", ".", "optims", ".", "values", "(", ")", ":", "\n", "            ", "optim", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.train": [[83, 191], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "utils_freq.freq_pixel_loss.get_gaussian_kernel().cuda", "utils_freq.freq_fourier_loss.decide_circle", "mask_h.cuda.cuda.cuda", "core.data_loader.InputFetcher", "core.data_loader.InputFetcher", "next", "print", "time.time", "range", "solver.Solver._load_checkpoint", "next", "solver.compute_d_loss", "solver.Solver._reset_grad", "d_loss.backward", "optims.discriminator.step", "solver.compute_d_loss", "solver.Solver._reset_grad", "d_loss.backward", "optims.discriminator.step", "solver.compute_g_loss", "solver.Solver._reset_grad", "g_loss.backward", "optims.generator.step", "optims.mapping_network.step", "optims.style_encoder.step", "solver.compute_g_loss", "solver.Solver._reset_grad", "g_loss.backward", "optims.generator.step", "solver.moving_average", "solver.moving_average", "solver.moving_average", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "utils_freq.freq_pixel_loss.get_gaussian_kernel", "nets.fan.get_heatmap", "dict", "zip", "print", "os.makedirs", "core.debug_image", "solver.Solver._save_checkpoint", "metrics.eval.calculate_metrics", "metrics.eval.calculate_metrics", "time.time", "str", "loss.items", "datetime.timedelta", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "dict.items"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.decide_circle", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_d_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_d_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_g_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_g_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.moving_average", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.moving_average", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.moving_average", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.get_gaussian_kernel", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.debug_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._save_checkpoint", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_metrics", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_metrics"], ["", "", "def", "train", "(", "self", ",", "loaders", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets", "=", "self", ".", "nets", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "optims", "=", "self", ".", "optims", "\n", "writer", "=", "SummaryWriter", "(", "args", ".", "tb_dir", ")", "\n", "gauss_kernel", "=", "get_gaussian_kernel", "(", "args", ".", "gauss_size", ")", ".", "cuda", "(", ")", "\n", "mask_h", ",", "_", "=", "decide_circle", "(", "r", "=", "args", ".", "radius", ",", "N", "=", "args", ".", "batch_size", ")", "\n", "mask_h", "=", "mask_h", ".", "cuda", "(", ")", "\n", "\n", "# fetch random validation images for debugging", "\n", "fetcher", "=", "InputFetcher", "(", "loaders", ".", "src", ",", "loaders", ".", "ref", ",", "args", ".", "latent_dim", ",", "'train'", ")", "\n", "fetcher_val", "=", "InputFetcher", "(", "loaders", ".", "val", ",", "None", ",", "args", ".", "latent_dim", ",", "'val'", ")", "\n", "inputs_val", "=", "next", "(", "fetcher_val", ")", "\n", "\n", "# resume training if necessary", "\n", "if", "args", ".", "resume_iter", ">", "0", ":", "\n", "            ", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "\n", "# remember the initial value of ds weight", "\n", "", "initial_lambda_ds", "=", "args", ".", "lambda_ds", "\n", "initial_w_scale", "=", "args", ".", "w_scale", "\n", "\n", "print", "(", "'Start training...'", ")", "\n", "end_learning_rate", "=", "0", "\n", "base_lr", "=", "initial_w_scale", "\n", "max_decay_steps", "=", "args", ".", "ds_iter", "\n", "power", "=", "0.1", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "resume_iter", ",", "args", ".", "total_iters", ")", ":", "\n", "# fetch images and labels", "\n", "            ", "inputs", "=", "next", "(", "fetcher", ")", "\n", "x_real", ",", "y_org", "=", "inputs", ".", "x_src", ",", "inputs", ".", "y_src", "\n", "\n", "\n", "x_ref", ",", "x_ref2", ",", "y_trg", "=", "inputs", ".", "x_ref", ",", "inputs", ".", "x_ref2", ",", "inputs", ".", "y_ref", "\n", "z_trg", ",", "z_trg2", "=", "inputs", ".", "z_trg", ",", "inputs", ".", "z_trg2", "\n", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_real", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "# train the discriminator", "\n", "d_loss", ",", "d_losses_latent", "=", "compute_d_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trg", "=", "z_trg", ",", "masks", "=", "masks", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "optims", ".", "discriminator", ".", "step", "(", ")", "\n", "\n", "d_loss", ",", "d_losses_ref", "=", "compute_d_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "x_ref", "=", "x_ref", ",", "masks", "=", "masks", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "optims", ".", "discriminator", ".", "step", "(", ")", "\n", "\n", "# train the generator", "\n", "g_loss", ",", "g_losses_latent", "=", "compute_g_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trgs", "=", "[", "z_trg", ",", "z_trg2", "]", ",", "masks", "=", "masks", ",", "gauss_kernel", "=", "gauss_kernel", ",", "mask_h", "=", "mask_h", ",", "index", "=", "i", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optims", ".", "generator", ".", "step", "(", ")", "\n", "optims", ".", "mapping_network", ".", "step", "(", ")", "\n", "optims", ".", "style_encoder", ".", "step", "(", ")", "\n", "\n", "g_loss", ",", "g_losses_ref", "=", "compute_g_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "x_refs", "=", "[", "x_ref", ",", "x_ref2", "]", ",", "masks", "=", "masks", ",", "gauss_kernel", "=", "gauss_kernel", ",", "mask_h", "=", "mask_h", ",", "index", "=", "i", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optims", ".", "generator", ".", "step", "(", ")", "\n", "\n", "# compute moving average of network parameters", "\n", "moving_average", "(", "nets", ".", "generator", ",", "nets_ema", ".", "generator", ",", "beta", "=", "0.999", ")", "\n", "moving_average", "(", "nets", ".", "mapping_network", ",", "nets_ema", ".", "mapping_network", ",", "beta", "=", "0.999", ")", "\n", "moving_average", "(", "nets", ".", "style_encoder", ",", "nets_ema", ".", "style_encoder", ",", "beta", "=", "0.999", ")", "\n", "writer", ".", "add_scalar", "(", "'w/w_scale'", ",", "args", ".", "w_scale", ",", "i", ")", "\n", "# decay weight for diversity sensitive loss", "\n", "if", "args", ".", "lambda_ds", ">", "0", ":", "\n", "                ", "args", ".", "lambda_ds", "-=", "(", "initial_lambda_ds", "/", "args", ".", "ds_iter", ")", "\n", "args", ".", "w_scale", "-=", "(", "initial_w_scale", "/", "args", ".", "ds_iter", ")", "\n", "", "if", "args", ".", "poly_decay", ":", "\n", "                ", "args", ".", "w_scale", "=", "(", "base_lr", "-", "end_learning_rate", ")", "*", "(", "(", "1", "-", "i", "/", "max_decay_steps", ")", "**", "(", "power", ")", ")", "+", "end_learning_rate", "\n", "\n", "# print out log info", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "[", ":", "-", "7", "]", "\n", "log", "=", "\"Elapsed time [%s], Iteration [%i/%i], \"", "%", "(", "elapsed", ",", "i", "+", "1", ",", "args", ".", "total_iters", ")", "\n", "all_losses", "=", "dict", "(", ")", "\n", "for", "loss", ",", "prefix", "in", "zip", "(", "[", "d_losses_latent", ",", "d_losses_ref", ",", "g_losses_latent", ",", "g_losses_ref", "]", ",", "\n", "[", "'D/latent_'", ",", "'D/ref_'", ",", "'G/latent_'", ",", "'G/ref_'", "]", ")", ":", "\n", "                    ", "for", "key", ",", "value", "in", "loss", ".", "items", "(", ")", ":", "\n", "                        ", "all_losses", "[", "prefix", "+", "key", "]", "=", "value", "\n", "writer", ".", "add_scalar", "(", "prefix", "+", "key", ",", "value", ",", "i", ")", "\n", "", "", "all_losses", "[", "'G/lambda_ds'", "]", "=", "args", ".", "lambda_ds", "\n", "log", "+=", "' '", ".", "join", "(", "[", "'%s: [%.4f]'", "%", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "all_losses", ".", "items", "(", ")", "]", ")", "\n", "print", "(", "log", ")", "\n", "\n", "# generate images for debugging", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "sample_every", "==", "0", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "sample_dir", ",", "exist_ok", "=", "True", ")", "\n", "utils", ".", "debug_image", "(", "nets_ema", ",", "args", ",", "inputs", "=", "inputs_val", ",", "step", "=", "i", "+", "1", ")", "\n", "\n", "# save model checkpoints", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "save_every", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "step", "=", "i", "+", "1", ")", "\n", "\n", "# compute FID and LPIPS if necessary", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "eval_every", "==", "0", ":", "\n", "                ", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "i", "+", "1", ",", "mode", "=", "'latent'", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "i", "+", "1", ",", "mode", "=", "'reference'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.sample": [[192, 209], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.makedirs", "solver.Solver._load_checkpoint", "next", "next", "os.path.join", "print", "core.translate_using_reference", "os.path.join", "print", "core.video_ref", "core.data_loader.InputFetcher", "core.data_loader.InputFetcher"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_using_reference", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.video_ref"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "loaders", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "os", ".", "makedirs", "(", "args", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "\n", "src", "=", "next", "(", "InputFetcher", "(", "loaders", ".", "src", ",", "None", ",", "args", ".", "latent_dim", ",", "'test'", ")", ")", "\n", "ref", "=", "next", "(", "InputFetcher", "(", "loaders", ".", "ref", ",", "None", ",", "args", ".", "latent_dim", ",", "'test'", ")", ")", "\n", "\n", "fname", "=", "ospj", "(", "args", ".", "result_dir", ",", "'reference.jpg'", ")", "\n", "print", "(", "'Working on {}...'", ".", "format", "(", "fname", ")", ")", "\n", "utils", ".", "translate_using_reference", "(", "nets_ema", ",", "args", ",", "src", ".", "x", ",", "ref", ".", "x", ",", "ref", ".", "y", ",", "fname", ")", "\n", "\n", "fname", "=", "ospj", "(", "args", ".", "result_dir", ",", "'video_ref.mp4'", ")", "\n", "print", "(", "'Working on {}...'", ".", "format", "(", "fname", ")", ")", "\n", "utils", ".", "video_ref", "(", "nets_ema", ",", "args", ",", "src", ".", "x", ",", "ref", ".", "x", ",", "ref", ".", "y", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver.evaluate": [[210, 218], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "solver.Solver._load_checkpoint", "metrics.eval.calculate_metrics", "metrics.eval.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_metrics", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.metrics.eval_hair.calculate_metrics"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "resume_iter", "=", "args", ".", "resume_iter", "\n", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "step", "=", "resume_iter", ",", "mode", "=", "'latent'", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "step", "=", "resume_iter", ",", "mode", "=", "'reference'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_d_loss": [[220, 243], ["x_real.requires_grad_", "nets.discriminator", "solver.adv_loss", "solver.r1_reg", "nets.discriminator", "solver.adv_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nets.generator", "munch.Munch", "nets.mapping_network", "nets.style_encoder", "adv_loss.item", "adv_loss.item", "r1_reg.item"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.adv_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.r1_reg", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.adv_loss"], ["", "", "def", "compute_d_loss", "(", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trg", "=", "None", ",", "x_ref", "=", "None", ",", "masks", "=", "None", ")", ":", "\n", "    ", "assert", "(", "z_trg", "is", "None", ")", "!=", "(", "x_ref", "is", "None", ")", "\n", "# with real images", "\n", "x_real", ".", "requires_grad_", "(", ")", "\n", "out", "=", "nets", ".", "discriminator", "(", "x_real", ",", "y_org", ")", "\n", "loss_real", "=", "adv_loss", "(", "out", ",", "1", ")", "\n", "loss_reg", "=", "r1_reg", "(", "out", ",", "x_real", ")", "\n", "\n", "# with fake images", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "z_trg", "is", "not", "None", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "# x_ref is not None", "\n", "            ", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "\n", "", "x_fake", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "", "out", "=", "nets", ".", "discriminator", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_fake", "=", "adv_loss", "(", "out", ",", "0", ")", "\n", "\n", "loss", "=", "loss_real", "+", "loss_fake", "+", "args", ".", "lambda_reg", "*", "loss_reg", "\n", "return", "loss", ",", "Munch", "(", "real", "=", "loss_real", ".", "item", "(", ")", ",", "\n", "fake", "=", "loss_fake", ".", "item", "(", ")", ",", "\n", "reg", "=", "loss_reg", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.compute_g_loss": [[245, 303], ["nets.generator", "nets.discriminator", "solver.adv_loss", "nets.style_encoder", "torch.mean", "torch.mean", "torch.mean", "nets.generator", "x_fake2.detach.detach", "torch.mean", "torch.mean", "torch.mean", "nets.style_encoder", "nets.generator", "torch.mean", "torch.mean", "torch.mean", "nets.generator", "torch.mean", "torch.mean", "torch.mean", "utils_freq.freq_pixel_loss.find_fake_freq", "utils_freq.freq_pixel_loss.find_fake_freq", "torch.l1_loss", "utils_freq.freq_fourier_loss.fft_L1_loss_color", "nets.mapping_network", "nets.style_encoder", "torch.abs", "torch.abs", "torch.abs", "nets.mapping_network", "nets.style_encoder", "torch.abs", "torch.abs", "torch.abs", "nets.fan.get_heatmap", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "munch.Munch", "adv_loss.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "F.l1_loss.item", "utils_freq.freq_fourier_loss.fft_L1_loss_color.item"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.adv_loss", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_pixel_loss.find_fake_freq", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.utils_freq.freq_fourier_loss.fft_L1_loss_color", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap"], ["", "def", "compute_g_loss", "(", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trgs", "=", "None", ",", "x_refs", "=", "None", ",", "masks", "=", "None", ",", "gauss_kernel", "=", "None", ",", "mask_h", "=", "None", ",", "index", "=", "None", ")", ":", "\n", "    ", "assert", "(", "z_trgs", "is", "None", ")", "!=", "(", "x_refs", "is", "None", ")", "\n", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "z_trg", ",", "z_trg2", "=", "z_trgs", "\n", "", "if", "x_refs", "is", "not", "None", ":", "\n", "        ", "x_ref", ",", "x_ref2", "=", "x_refs", "\n", "\n", "# adversarial loss", "\n", "", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "        ", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "\n", "\n", "\n", "", "x_fake", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "out", "=", "nets", ".", "discriminator", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_adv", "=", "adv_loss", "(", "out", ",", "1", ")", "\n", "\n", "# style reconstruction loss", "\n", "s_pred", "=", "nets", ".", "style_encoder", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_sty", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "s_pred", "-", "s_trg", ")", ")", "\n", "\n", "# diversity sensitive loss", "\n", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "s_trg2", "=", "nets", ".", "mapping_network", "(", "z_trg2", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "        ", "s_trg2", "=", "nets", ".", "style_encoder", "(", "x_ref2", ",", "y_trg", ")", "\n", "", "x_fake2", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg2", ",", "masks", "=", "masks", ")", "\n", "x_fake2", "=", "x_fake2", ".", "detach", "(", ")", "\n", "loss_ds", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x_fake", "-", "x_fake2", ")", ")", "\n", "\n", "# cycle-consistency loss", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_fake", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "s_org", "=", "nets", ".", "style_encoder", "(", "x_real", ",", "y_org", ")", "\n", "x_rec", "=", "nets", ".", "generator", "(", "x_fake", ",", "s_org", ",", "masks", "=", "masks", ")", "\n", "loss_cyc", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x_rec", "-", "x_real", ")", ")", "\n", "\n", "## recon loss", "\n", "x_rec2", "=", "nets", ".", "generator", "(", "x_real", ",", "s_org", ",", "masks", "=", "masks", ")", "\n", "loss_recon", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x_rec2", "-", "x_real", ")", ")", "\n", "\n", "# freq loss", "\n", "x_real_freq", "=", "find_fake_freq", "(", "x_real", ",", "gauss_kernel", ")", "# , find=True, index=index", "\n", "x_rec2_freq", "=", "find_fake_freq", "(", "x_rec2", ",", "gauss_kernel", ")", "\n", "loss_rec_blur", "=", "F", ".", "l1_loss", "(", "x_rec2_freq", ",", "x_real_freq", ")", "\n", "loss_recon_fft", "=", "fft_L1_loss_color", "(", "x_rec2", ",", "x_real", ")", "\n", "\n", "loss", "=", "loss_adv", "+", "args", ".", "lambda_sty", "*", "loss_sty", "-", "args", ".", "lambda_ds", "*", "loss_ds", "+", "args", ".", "lambda_cyc", "*", "loss_cyc", "+", "args", ".", "lambda_recon", "*", "loss_recon", "+", "args", ".", "w_scale", "*", "(", "args", ".", "lambda_recon_blur", "*", "loss_rec_blur", "+", "args", ".", "lambda_recon_fft", "*", "loss_recon_fft", ")", "\n", "return", "loss", ",", "Munch", "(", "adv", "=", "loss_adv", ".", "item", "(", ")", ",", "\n", "sty", "=", "loss_sty", ".", "item", "(", ")", ",", "\n", "ds", "=", "loss_ds", ".", "item", "(", ")", ",", "\n", "cyc", "=", "loss_cyc", ".", "item", "(", ")", ",", "\n", "rec", "=", "loss_recon", ".", "item", "(", ")", ",", "\n", "rec_blur", "=", "loss_rec_blur", ".", "item", "(", ")", ",", "\n", "recon_fft", "=", "loss_recon_fft", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.moving_average": [[305, 308], ["zip", "model.parameters", "model_test.parameters", "torch.lerp", "torch.lerp", "torch.lerp"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp"], ["", "def", "moving_average", "(", "model", ",", "model_test", ",", "beta", "=", "0.999", ")", ":", "\n", "    ", "for", "param", ",", "param_test", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "model_test", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param_test", ".", "data", "=", "torch", ".", "lerp", "(", "param", ".", "data", ",", "param_test", ".", "data", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.adv_loss": [[310, 315], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "", "def", "adv_loss", "(", "logits", ",", "target", ")", ":", "\n", "    ", "assert", "target", "in", "[", "1", ",", "0", "]", "\n", "targets", "=", "torch", ".", "full_like", "(", "logits", ",", "fill_value", "=", "target", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.solver.r1_reg": [[317, 328], ["x_in.size", "grad_dout.pow", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view().sum().mean", "d_out.sum", "grad_dout.pow.view().sum", "grad_dout.pow.view"], "function", ["None"], ["", "def", "r1_reg", "(", "d_out", ",", "x_in", ")", ":", "\n", "# zero-centered gradient penalty for real images", "\n", "    ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "=", "0.5", "*", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "return", "reg", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.SELayer.__init__": [[25, 33], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["return", "x", "*", "y", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", ",", "x", "*", "y", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", ".", "expand_as", "(", "x", ")", "\n", "\n", "", "", "class", "EqualConvTranspose2d", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.SELayer.forward": [[35, 40], ["x.size", "model.SELayer.avg_pool().view", "model.SELayer.fc().view", "model.SELayer.expand_as", "model.SELayer.avg_pool", "model.SELayer.fc"], "methods", ["None"], [")", "\n", "self", ".", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "in_channel", "*", "kernel_size", "**", "2", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.ResBlk.__init__": [[42, 50], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "model.ResBlk._build_weights"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._build_weights"], ["            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv_transpose2d", "(", "\n", "input", ",", "\n", "self", ".", "weight", "*", "self", ".", "scale", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.ResBlk._build_weights": [[51, 59], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["bias", "=", "self", ".", "bias", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "\n", "return", "out", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.ResBlk._shortcut": [[60, 66], ["model.ResBlk.conv1x1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["f\"{self.__class__.__name__}({self.weight.shape[0]}, {self.weight.shape[1]},\"", "\n", "f\" {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})\"", "\n", ")", "\n", "\n", "\n", "", "", "class", "ConvLayer", "(", "nn", ".", "Sequential", ")", ":", "\n", "    ", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.ResBlk._residual": [[67, 79], ["model.ResBlk.actv", "model.ResBlk.conv1", "model.ResBlk.actv", "model.ResBlk.conv2", "model.ResBlk.norm1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.ResBlk.norm2"], "methods", ["None"], ["self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", "activate", "=", "True", ",", "\n", "padding", "=", "\"zero\"", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.ResBlk.forward": [[80, 83], ["model.ResBlk._shortcut", "model.ResBlk._residual", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._shortcut", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._residual"], ["self", ".", "padding", "=", "0", "\n", "stride", "=", "1", "\n", "\n", "if", "downsample", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdaIN.__init__": [[86, 90], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdaIN.forward": [[91, 96], ["model.AdaIN.fc", "h.view.view.view", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "h.view.view.size", "h.view.view.size", "model.AdaIN.norm"], "methods", ["None"], ["stride", "=", "2", "\n", "\n", "", "if", "upsample", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualConvTranspose2d", "(", "\n", "in_channel", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk.__init__": [[99, 107], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "model.AdainResBlk._build_weights"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._build_weights"], ["padding", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._build_weights": [[108, 115], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdaIN", "model.AdaIN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["pad1", "=", "p", "//", "2", "+", "1", "\n", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "pad0", ",", "pad1", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "downsample", ":", "\n", "                ", "if", "padding", "==", "\"zero\"", ":", "\n", "                    ", "self", ".", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._shortcut": [[116, 122], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "model.AdainResBlk.conv1x1"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["\n", "", "elif", "padding", "==", "\"reflect\"", ":", "\n", "                    ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "if", "padding", ">", "0", ":", "\n", "                        ", "layers", ".", "append", "(", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._residual": [[123, 133], ["model.AdainResBlk.norm1", "model.AdainResBlk.actv", "model.AdainResBlk.conv1", "model.AdainResBlk.norm2", "model.AdainResBlk.actv", "model.AdainResBlk.conv2", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["", "self", ".", "padding", "=", "0", "\n", "\n", "", "elif", "padding", "!=", "\"valid\"", ":", "\n", "                    ", "raise", "ValueError", "(", "'Padding should be \"zero\", \"reflect\", or \"valid\"'", ")", "\n", "\n", "", "", "layers", ".", "append", "(", "\n", "EqualConv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk.forward": [[134, 139], ["model.AdainResBlk._residual", "math.sqrt", "model.AdainResBlk._shortcut"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._residual", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.AdainResBlk._shortcut"], ["stride", "=", "stride", ",", "\n", "bias", "=", "bias", "and", "not", "activate", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "activate", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.HighPass.__init__": [[142, 147], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.HighPass.forward": [[148, 151], ["model.HighPass.filter.unsqueeze().unsqueeze().repeat", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.size", "model.HighPass.filter.unsqueeze().unsqueeze", "x.size", "model.HighPass.filter.unsqueeze"], "methods", ["None"], ["\n", "", "", "class", "StyledResBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "style_dim", ",", "upsample", ",", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.Generator.__init__": [[154, 190], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "model.Generator.encode.append", "model.Generator.decode.insert", "model.Generator.encode.append", "model.Generator.decode.insert", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model.HighPass", "numpy.log2", "model.ResBlk", "model.AdainResBlk", "model.ResBlk", "model.AdainResBlk", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2"], ["\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "\n", "self", ".", "conv2", "=", "StyledConv", "(", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ")", "\n", "\n", "if", "upsample", "or", "in_channel", "!=", "out_channel", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "1", ",", "\n", "upsample", "=", "False", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "noise", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ",", "style", ",", "noise", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "style", ",", "noise", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "                ", "skip", "=", "F", ".", "interpolate", "(", "skip", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.Generator.forward": [[191, 205], ["model.Generator.from_rgb", "model.Generator.to_rgb", "block", "block", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block.size", "block.size", "model.Generator.hpf", "block.size", "block.size", "block.size", "block.size"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["            ", "skip", "=", "input", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "\n", "", "", "class", "ResBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "downsample", ",", "\n", "padding", "=", "\"zero\"", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.MappingNetwork.__init__": [[208, 227], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["\n", "self", ".", "conv2", "=", "ConvLayer", "(", "\n", "out_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "downsample", "=", "downsample", ",", "\n", "padding", "=", "padding", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", "\n", "if", "downsample", "or", "in_channel", "!=", "out_channel", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "1", ",", "\n", "downsample", "=", "downsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", "bias", "=", "False", ",", "\n", "activate", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.MappingNetwork.forward": [[228, 237], ["model.MappingNetwork.shared", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "layer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.StyleEncoder.__init__": [[240, 262], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.log2", "model.ResBlk", "torch.Linear", "torch.Linear", "torch.Linear", "model.SELayer"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2"], ["            ", "skip", "=", "input", "\n", "\n", "\n", "", "return", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "\n", "", "", "class", "Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "stem", "=", "[", "ConvLayer", "(", "3", ",", "channel", ",", "1", ")", "]", "\n", "\n", "in_channel", "=", "channel", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "ch", "=", "channel", "*", "(", "2", "**", "i", ")", "\n", "stem", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "ch", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ")", "\n", "in_channel", "=", "ch", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.StyleEncoder.forward": [[263, 273], ["model.StyleEncoder.shared", "h.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "h.view.view.size", "layer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["\n", "", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "*", "stem", ")", "\n", "\n", "self", ".", "se_layer", "=", "nn", ".", "Sequential", "(", "\n", "SELayer", "(", "in_channel", ")", "\n", ")", "\n", "\n", "out_channel", "=", "channel", "*", "(", "2", "**", "4", ")", "\n", "self", ".", "structure", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", ",", "1", ")", ",", "ConvLayer", "(", "out_channel", ",", "structure_channel", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.Discriminator.__init__": [[276, 293], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.log2", "model.ResBlk"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.log2"], ["self", ".", "texture", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "downsample", "=", "True", ",", "padding", "=", "\"reflect\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", ",", "out_channel", "*", "2", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n", "ConvLayer", "(", "out_channel", "*", "2", ",", "out_channel", "*", "4", ",", "3", ",", "downsample", "=", "True", ",", "padding", "=", "\"valid\"", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Flatten", "(", "1", ")", ",", "\n", "EqualLinear", "(", "out_channel", "*", "4", ",", "out_channel", "*", "4", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "stem", "(", "input", ")", "\n", "out_structure", ",", "out_texture", "=", "self", ".", "se_layer", "(", "out", ")", "\n", "structure", "=", "self", ".", "structure", "(", "out_structure", ")", "\n", "texture", "=", "torch", ".", "flatten", "(", "self", ".", "texture", "(", "out_texture", ")", ",", "1", ")", "\n", "\n", "return", "structure", ",", "texture", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.Discriminator.forward": [[294, 300], ["model.Discriminator.main", "out.view.view.view", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "out.view.view.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.StarGANv2.main.main"], ["", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channel", ",", "\n", "structure_channel", "=", "8", ",", "\n", "texture_channel", "=", "2048", ",", "\n", "blur_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.build_model": [[302, 325], ["model.Generator", "model.MappingNetwork", "model.StyleEncoder", "model.Discriminator", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "munch.Munch", "munch.Munch", "core.wing.FAN().eval", "core.wing.FAN"], "function", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ch_multiplier", "=", "(", "4", ",", "8", ",", "16", ",", "16", ",", "8", ",", "4", ")", "\n", "upsample", "=", "(", "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "in_ch", "=", "structure_channel", "\n", "for", "ch_mul", ",", "up", "in", "zip", "(", "ch_multiplier", ",", "upsample", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "\n", "StyledResBlock", "(", "\n", "in_ch", ",", "channel", "*", "ch_mul", ",", "texture_channel", ",", "up", ",", "blur_kernel", "\n", ")", "\n", ")", "\n", "in_ch", "=", "channel", "*", "ch_mul", "\n", "\n", "", "self", ".", "to_rgb", "=", "ConvLayer", "(", "in_ch", ",", "3", ",", "1", ",", "activate", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "structure", ",", "texture", ",", "noises", "=", "None", ")", ":", "\n", "        ", "if", "noises", "is", "None", ":", "\n", "            ", "noises", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layers", ")", "\n", "\n", "", "out", "=", "structure", "\n", "for", "layer", ",", "noise", "in", "zip", "(", "self", ".", "layers", ",", "noises", ")", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "texture", ",", "noise", ")", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.model.build_model_hair": [[326, 352], ["model.Generator", "model.MappingNetwork", "model.StyleEncoder", "model.StyleEncoder", "model.Discriminator", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "munch.Munch", "munch.Munch", "core.wing.FAN().eval", "core.wing.FAN"], "function", ["None"], ["\n", "", "out", "=", "self", ".", "to_rgb", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass.__init__": [[50, 59], ["torch.Module.__init__", "wing.CoordConvTh", "wing.HourGlass._generate_network"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._generate_network"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", ",", "depth", ",", "num_features", ",", "first_one", "=", "False", ")", ":", "\n", "        ", "super", "(", "HourGlass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "features", "=", "num_features", "\n", "self", ".", "coordconv", "=", "CoordConvTh", "(", "64", ",", "64", ",", "True", ",", "True", ",", "256", ",", "first_one", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "_generate_network", "(", "self", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._generate_network": [[60, 68], ["wing.HourGlass.add_module", "wing.HourGlass.add_module", "wing.HourGlass.add_module", "wing.ConvBlock", "wing.ConvBlock", "wing.HourGlass._generate_network", "wing.HourGlass.add_module", "wing.ConvBlock", "str", "str", "wing.ConvBlock", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._generate_network"], ["", "def", "_generate_network", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "'b1_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'b2_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "if", "level", ">", "1", ":", "\n", "            ", "self", ".", "_generate_network", "(", "level", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "'b2_plus_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "", "self", ".", "add_module", "(", "'b3_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._forward": [[69, 85], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.HourGlass._forward", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._forward"], ["", "def", "_forward", "(", "self", ",", "level", ",", "inp", ")", ":", "\n", "        ", "up1", "=", "inp", "\n", "up1", "=", "self", ".", "_modules", "[", "'b1_'", "+", "str", "(", "level", ")", "]", "(", "up1", ")", "\n", "low1", "=", "F", ".", "avg_pool2d", "(", "inp", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "_modules", "[", "'b2_'", "+", "str", "(", "level", ")", "]", "(", "low1", ")", "\n", "\n", "if", "level", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_forward", "(", "level", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "low1", "\n", "low2", "=", "self", ".", "_modules", "[", "'b2_plus_'", "+", "str", "(", "level", ")", "]", "(", "low2", ")", "\n", "", "low3", "=", "low2", "\n", "low3", "=", "self", ".", "_modules", "[", "'b3_'", "+", "str", "(", "level", ")", "]", "(", "low3", ")", "\n", "up2", "=", "F", ".", "interpolate", "(", "low3", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass.forward": [[86, 89], ["wing.HourGlass.coordconv", "wing.HourGlass._forward"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.HourGlass._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "heatmap", ")", ":", "\n", "        ", "x", ",", "last_channel", "=", "self", ".", "coordconv", "(", "x", ",", "heatmap", ")", "\n", "return", "self", ".", "_forward", "(", "self", ".", "depth", ",", "x", ")", ",", "last_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.AddCoordsTh.__init__": [[92, 113], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.unsqueeze().to", "torch.cat.unsqueeze().to", "torch.cat.unsqueeze().to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height", "=", "64", ",", "width", "=", "64", ",", "with_r", "=", "False", ",", "with_boundary", "=", "False", ")", ":", "\n", "        ", "super", "(", "AddCoordsTh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_r", "=", "with_r", "\n", "self", ".", "with_boundary", "=", "with_boundary", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_coords", "=", "torch", ".", "arange", "(", "height", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "y_coords", "=", "torch", ".", "arange", "(", "width", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "x_coords", "=", "(", "x_coords", "/", "(", "height", "-", "1", ")", ")", "*", "2", "-", "1", "\n", "y_coords", "=", "(", "y_coords", "/", "(", "width", "-", "1", ")", ")", "*", "2", "-", "1", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x_coords", ",", "y_coords", "]", ",", "dim", "=", "0", ")", "# (2, height, width)", "\n", "\n", "if", "self", ".", "with_r", ":", "\n", "                ", "rr", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x_coords", ",", "2", ")", "+", "torch", ".", "pow", "(", "y_coords", ",", "2", ")", ")", "# (height, width)", "\n", "rr", "=", "(", "rr", "/", "torch", ".", "max", "(", "rr", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "coords", ",", "rr", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "self", ".", "coords", "=", "coords", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "# (1, 2 or 3, height, width)", "\n", "self", ".", "x_coords", "=", "x_coords", ".", "to", "(", "device", ")", "\n", "self", ".", "y_coords", "=", "y_coords", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.AddCoordsTh.forward": [[114, 129], ["wing.AddCoordsTh.coords.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "heatmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        x: (batch, c, x_dim, y_dim)\n        \"\"\"", "\n", "coords", "=", "self", ".", "coords", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "with_boundary", "and", "heatmap", "is", "not", "None", ":", "\n", "            ", "boundary_channel", "=", "torch", ".", "clamp", "(", "heatmap", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ",", "0.0", ",", "1.0", ")", "\n", "zero_tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "x_coords", ")", "\n", "xx_boundary_channel", "=", "torch", ".", "where", "(", "boundary_channel", ">", "0.05", ",", "self", ".", "x_coords", ",", "zero_tensor", ")", ".", "to", "(", "zero_tensor", ".", "device", ")", "\n", "yy_boundary_channel", "=", "torch", ".", "where", "(", "boundary_channel", ">", "0.05", ",", "self", ".", "y_coords", ",", "zero_tensor", ")", ".", "to", "(", "zero_tensor", ".", "device", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "coords", ",", "xx_boundary_channel", ",", "yy_boundary_channel", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x_and_coords", "=", "torch", ".", "cat", "(", "[", "x", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "return", "x_and_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.CoordConvTh.__init__": [[133, 143], ["torch.Module.__init__", "wing.AddCoordsTh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "with_r", ",", "with_boundary", ",", "\n", "in_channels", ",", "first_one", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CoordConvTh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoords", "=", "AddCoordsTh", "(", "height", ",", "width", ",", "with_r", ",", "with_boundary", ")", "\n", "in_channels", "+=", "2", "\n", "if", "with_r", ":", "\n", "            ", "in_channels", "+=", "1", "\n", "", "if", "with_boundary", "and", "not", "first_one", ":", "\n", "            ", "in_channels", "+=", "2", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.CoordConvTh.forward": [[144, 149], ["wing.CoordConvTh.addcoords", "wing.CoordConvTh.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "heatmap", "=", "None", ")", ":", "\n", "        ", "ret", "=", "self", ".", "addcoords", "(", "input_tensor", ",", "heatmap", ")", "\n", "last_channel", "=", "ret", "[", ":", ",", "-", "2", ":", ",", ":", ",", ":", "]", "\n", "ret", "=", "self", ".", "conv", "(", "ret", ")", "\n", "return", "ret", ",", "last_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.ConvBlock.__init__": [[152, 167], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial", "functools.partial.", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial.", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial.", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "conv3x3", "=", "partial", "(", "nn", ".", "Conv2d", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "2", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "4", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.ConvBlock.forward": [[168, 188], ["wing.ConvBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv1", "wing.ConvBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv2", "wing.ConvBlock.bn3", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "wing.ConvBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out1", "=", "F", ".", "relu", "(", "out1", ",", "True", ")", "\n", "out1", "=", "self", ".", "conv1", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "F", ".", "relu", "(", "out2", ",", "True", ")", "\n", "out2", "=", "self", ".", "conv2", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out3", "=", "F", ".", "relu", "(", "out3", ",", "True", ")", "\n", "out3", "=", "self", ".", "conv3", "(", "out3", ")", "\n", "\n", "out3", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ",", "out3", ")", ",", "1", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "", "out3", "+=", "residual", "\n", "return", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.__init__": [[191, 214], ["torch.Module.__init__", "wing.CoordConvTh", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wing.ConvBlock", "wing.ConvBlock", "wing.ConvBlock", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.HourGlass", "wing.ConvBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wing.FAN.load_pretrained_weights"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.load_pretrained_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", "=", "1", ",", "end_relu", "=", "False", ",", "num_landmarks", "=", "98", ",", "fname_pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "end_relu", "=", "end_relu", "\n", "\n", "# Base part", "\n", "self", ".", "conv1", "=", "CoordConvTh", "(", "256", ",", "256", ",", "True", ",", "False", ",", "\n", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "\n", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "conv3", "=", "ConvBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "conv4", "=", "ConvBlock", "(", "128", ",", "256", ")", "\n", "\n", "# Stacking part", "\n", "self", ".", "add_module", "(", "'m0'", ",", "HourGlass", "(", "1", ",", "4", ",", "256", ",", "first_one", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'top_m_0'", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'conv_last0'", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "self", ".", "add_module", "(", "'bn_end0'", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'l0'", ",", "nn", ".", "Conv2d", "(", "256", ",", "num_landmarks", "+", "1", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "if", "fname_pretrained", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_pretrained_weights", "(", "fname_pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.load_pretrained_weights": [[215, 224], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "wing.FAN.state_dict", "wing.FAN.update", "wing.FAN.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "checkpoint[].items"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "", "def", "load_pretrained_weights", "(", "self", ",", "fname", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "fname", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "model_weights", "=", "self", ".", "state_dict", "(", ")", "\n", "model_weights", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "\n", "if", "k", "in", "model_weights", "}", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.forward": [[225, 247], ["wing.FAN.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wing.FAN.conv3", "wing.FAN.conv4", "torch.relu", "torch.relu", "torch.relu", "outputs.append", "boundary_channels.append", "wing.FAN.bn1", "wing.FAN.conv2", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "_", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "boundary_channels", "=", "[", "]", "\n", "tmp_out", "=", "None", "\n", "ll", ",", "boundary_channel", "=", "self", ".", "_modules", "[", "'m0'", "]", "(", "x", ",", "tmp_out", ")", "\n", "ll", "=", "self", ".", "_modules", "[", "'top_m_0'", "]", "(", "ll", ")", "\n", "ll", "=", "F", ".", "relu", "(", "self", ".", "_modules", "[", "'bn_end0'", "]", "\n", "(", "self", ".", "_modules", "[", "'conv_last0'", "]", "(", "ll", ")", ")", ",", "True", ")", "\n", "\n", "# Predict heatmaps", "\n", "tmp_out", "=", "self", ".", "_modules", "[", "'l0'", "]", "(", "ll", ")", "\n", "if", "self", ".", "end_relu", ":", "\n", "            ", "tmp_out", "=", "F", ".", "relu", "(", "tmp_out", ")", "# HACK: Added relu", "\n", "", "outputs", ".", "append", "(", "tmp_out", ")", "\n", "boundary_channels", ".", "append", "(", "boundary_channel", ")", "\n", "return", "outputs", ",", "boundary_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap": [[248, 261], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.FAN.", "torch.interpolate.size", "preprocess.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.preprocess"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.preprocess"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_heatmap", "(", "self", ",", "x", ",", "b_preprocess", "=", "True", ")", ":", "\n", "        ", "''' outputs 0-1 normalized heatmap '''", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "256", ",", "mode", "=", "'bilinear'", ")", "\n", "x_01", "=", "x", "*", "0.5", "+", "0.5", "\n", "outputs", ",", "_", "=", "self", "(", "x_01", ")", "\n", "heatmaps", "=", "outputs", "[", "-", "1", "]", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "scale_factor", "=", "x", ".", "size", "(", "2", ")", "//", "heatmaps", ".", "size", "(", "2", ")", "\n", "if", "b_preprocess", ":", "\n", "            ", "heatmaps", "=", "F", ".", "interpolate", "(", "heatmaps", ",", "scale_factor", "=", "scale_factor", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "heatmaps", "=", "preprocess", "(", "heatmaps", ")", "\n", "", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_landmark": [[262, 273], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "wing.FAN.get_heatmap", "range", "x.size", "wing.get_preds_fromhm", "landmarks.append", "x.size", "wing.FAN.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "heatmaps[].cpu().unsqueeze", "heatmaps[].cpu"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.get_preds_fromhm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_landmark", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' outputs landmarks of x.shape '''", "\n", "heatmaps", "=", "self", ".", "get_heatmap", "(", "x", ",", "b_preprocess", "=", "False", ")", "\n", "landmarks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "pred_landmarks", "=", "get_preds_fromhm", "(", "heatmaps", "[", "i", "]", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "landmarks", ".", "append", "(", "pred_landmarks", ")", "\n", "", "scale_factor", "=", "x", ".", "size", "(", "2", ")", "//", "heatmaps", ".", "size", "(", "2", ")", "\n", "landmarks", "=", "torch", ".", "cat", "(", "landmarks", ")", "*", "scale_factor", "\n", "return", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FaceAligner.__init__": [[291, 298], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "FAN().to().eval", "wing.landmarks2xaxis", "numpy.float32", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "FAN().to", "numpy.load", "wing.FAN"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2xaxis", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "fname_wing", ",", "fname_celeba_mean", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "fan", "=", "FAN", "(", "fname_pretrained", "=", "fname_wing", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "scale", "=", "output_size", "//", "256", "\n", "self", ".", "CELEB_REF", "=", "np", ".", "float32", "(", "np", ".", "load", "(", "fname_celeba_mean", ")", "[", "'mean'", "]", ")", "*", "scale", "\n", "self", ".", "xaxis_ref", "=", "landmarks2xaxis", "(", "self", ".", "CELEB_REF", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FaceAligner.align": [[299, 313], ["imgs.to.to.to", "wing.FaceAligner.fan.get_landmark().cpu().numpy", "enumerate", "zip", "wing.tensor2numpy255", "wing.pad_mirror", "wing.FaceAligner.landmarks2mat", "max", "max", "cv2.warpPerspective", "wing.np2tensor", "wing.FaceAligner.fan.get_landmark().cpu", "wing.FaceAligner.fan.get_landmark"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.tensor2numpy255", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.pad_mirror", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FaceAligner.landmarks2mat", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.np2tensor", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_landmark"], ["", "def", "align", "(", "self", ",", "imgs", ",", "output_size", "=", "256", ")", ":", "\n", "        ", "''' imgs = torch.CUDATensor of BCHW '''", "\n", "imgs", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "landmarkss", "=", "self", ".", "fan", ".", "get_landmark", "(", "imgs", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "(", "img", ",", "landmarks", ")", "in", "enumerate", "(", "zip", "(", "imgs", ",", "landmarkss", ")", ")", ":", "\n", "            ", "img_np", "=", "tensor2numpy255", "(", "img", ")", "\n", "img_np", ",", "landmarks", "=", "pad_mirror", "(", "img_np", ",", "landmarks", ")", "\n", "transform", "=", "self", ".", "landmarks2mat", "(", "landmarks", ")", "\n", "rows", ",", "cols", ",", "_", "=", "img_np", ".", "shape", "\n", "rows", "=", "max", "(", "rows", ",", "self", ".", "output_size", ")", "\n", "cols", "=", "max", "(", "cols", ",", "self", ".", "output_size", ")", "\n", "aligned", "=", "cv2", ".", "warpPerspective", "(", "img_np", ",", "transform", ",", "(", "cols", ",", "rows", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "imgs", "[", "i", "]", "=", "np2tensor", "(", "aligned", "[", ":", "self", ".", "output_size", ",", ":", "self", ".", "output_size", ",", ":", "]", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FaceAligner.landmarks2mat": [[314, 322], ["wing.points2T", "wing.landmarks2xaxis", "wing.vecs2R", "wing.landmarks2S", "wing.points2T", "numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.points2T", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2xaxis", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.vecs2R", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2S", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.points2T"], ["", "def", "landmarks2mat", "(", "self", ",", "landmarks", ")", ":", "\n", "        ", "T_origin", "=", "points2T", "(", "landmarks", ",", "'from'", ")", "\n", "xaxis_src", "=", "landmarks2xaxis", "(", "landmarks", ")", "\n", "R", "=", "vecs2R", "(", "xaxis_src", ",", "self", ".", "xaxis_ref", ")", "\n", "S", "=", "landmarks2S", "(", "landmarks", ",", "self", ".", "CELEB_REF", ")", "\n", "T_ref", "=", "points2T", "(", "self", ".", "CELEB_REF", ",", "'to'", ")", "\n", "matrix", "=", "np", ".", "dot", "(", "T_ref", ",", "np", ".", "dot", "(", "S", ",", "np", ".", "dot", "(", "R", ",", "T_origin", ")", ")", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.get_preds_fromhm": [[27, 47], ["torch.max", "torch.max", "torch.max", "idx.view().repeat().float", "preds[].apply_", "preds[].add_().div_().floor_().add_", "range", "idx.view().repeat().float.add_", "hm.view", "idx.view().repeat().float.size", "range", "hm.size", "hm.size", "idx.view().repeat", "preds[].add_().div_().floor_", "idx.view().repeat().float.size", "hm.size", "hm.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "preds[].add_", "idx.view", "hm.size", "preds[].add_().div_", "int", "int", "torch.FloatTensor.sign_().mul_", "idx.size", "idx.size", "hm.size", "preds[].add_", "torch.FloatTensor.sign_"], "function", ["None"], ["def", "get_preds_fromhm", "(", "hm", ")", ":", "\n", "    ", "max", ",", "idx", "=", "torch", ".", "max", "(", "\n", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "hm", ".", "size", "(", "2", ")", "*", "hm", ".", "size", "(", "3", ")", ")", ",", "2", ")", "\n", "idx", "+=", "1", "\n", "preds", "=", "idx", ".", "view", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "[", "...", ",", "0", "]", ".", "apply_", "(", "lambda", "x", ":", "(", "x", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "preds", "[", "...", ",", "1", "]", ".", "add_", "(", "-", "1", ")", ".", "div_", "(", "hm", ".", "size", "(", "2", ")", ")", ".", "floor_", "(", ")", ".", "add_", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm_", "=", "hm", "[", "i", ",", "j", ",", ":", "]", "\n", "pX", ",", "pY", "=", "int", "(", "preds", "[", "i", ",", "j", ",", "0", "]", ")", "-", "1", ",", "int", "(", "preds", "[", "i", ",", "j", ",", "1", "]", ")", "-", "1", "\n", "if", "pX", ">", "0", "and", "pX", "<", "63", "and", "pY", ">", "0", "and", "pY", "<", "63", ":", "\n", "                ", "diff", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "hm_", "[", "pY", ",", "pX", "+", "1", "]", "-", "hm_", "[", "pY", ",", "pX", "-", "1", "]", ",", "\n", "hm_", "[", "pY", "+", "1", ",", "pX", "]", "-", "hm_", "[", "pY", "-", "1", ",", "pX", "]", "]", ")", "\n", "preds", "[", "i", ",", "j", "]", ".", "add_", "(", "diff", ".", "sign_", "(", ")", ".", "mul_", "(", ".25", ")", ")", "\n", "\n", "", "", "", "preds", ".", "add_", "(", "-", "0.5", ")", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.tensor2numpy255": [[280, 283], ["tensor.permute().cpu().numpy", "tensor.permute().cpu", "tensor.permute"], "function", ["None"], ["", "", "def", "tensor2numpy255", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Converts torch tensor to numpy array.\"\"\"", "\n", "return", "(", "(", "tensor", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "0.5", "+", "0.5", ")", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.np2tensor": [[285, 288], ["torch.FloatTensor().permute", "torch.FloatTensor().permute", "torch.FloatTensor().permute", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "np2tensor", "(", "image", ")", ":", "\n", "    ", "\"\"\"Converts numpy array to torch tensor.\"\"\"", "\n", "return", "torch", ".", "FloatTensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.points2T": [[324, 330], ["point.mean", "numpy.eye"], "function", ["None"], ["", "", "def", "points2T", "(", "point", ",", "direction", ")", ":", "\n", "    ", "point_mean", "=", "point", ".", "mean", "(", "axis", "=", "0", ")", "\n", "T", "=", "np", ".", "eye", "(", "3", ")", "\n", "coef", "=", "-", "1", "if", "direction", "==", "'from'", "else", "1", "\n", "T", "[", ":", "2", ",", "2", "]", "=", "coef", "*", "point_mean", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2eyes": [[332, 338], ["numpy.array", "numpy.array", "left.mean", "right.mean", "list", "list", "range", "range"], "function", ["None"], ["", "def", "landmarks2eyes", "(", "landmarks", ")", ":", "\n", "    ", "idx_left", "=", "np", ".", "array", "(", "list", "(", "range", "(", "60", ",", "67", "+", "1", ")", ")", "+", "[", "96", "]", ")", "\n", "idx_right", "=", "np", ".", "array", "(", "list", "(", "range", "(", "68", ",", "75", "+", "1", ")", ")", "+", "[", "97", "]", ")", "\n", "left", "=", "landmarks", "[", "idx_left", "]", "\n", "right", "=", "landmarks", "[", "idx_right", "]", "\n", "return", "left", ".", "mean", "(", "axis", "=", "0", ")", ",", "right", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2mouthends": [[340, 344], ["None"], "function", ["None"], ["", "def", "landmarks2mouthends", "(", "landmarks", ")", ":", "\n", "    ", "left", "=", "landmarks", "[", "76", "]", "\n", "right", "=", "landmarks", "[", "82", "]", "\n", "return", "left", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.rotate90": [[346, 349], ["numpy.array"], "function", ["None"], ["", "def", "rotate90", "(", "vec", ")", ":", "\n", "    ", "x", ",", "y", "=", "vec", "\n", "return", "np", ".", "array", "(", "[", "y", ",", "-", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2xaxis": [[351, 360], ["wing.landmarks2eyes", "wing.landmarks2mouthends", "wing.rotate90", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2eyes", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2mouthends", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.rotate90"], ["", "def", "landmarks2xaxis", "(", "landmarks", ")", ":", "\n", "    ", "eye_left", ",", "eye_right", "=", "landmarks2eyes", "(", "landmarks", ")", "\n", "mouth_left", ",", "mouth_right", "=", "landmarks2mouthends", "(", "landmarks", ")", "\n", "xp", "=", "eye_right", "-", "eye_left", "# x' in pggan", "\n", "eye_center", "=", "(", "eye_left", "+", "eye_right", ")", "*", "0.5", "\n", "mouth_center", "=", "(", "mouth_left", "+", "mouth_right", ")", "*", "0.5", "\n", "yp", "=", "eye_center", "-", "mouth_center", "\n", "xaxis", "=", "xp", "-", "rotate90", "(", "yp", ")", "\n", "return", "xaxis", "/", "np", ".", "linalg", ".", "norm", "(", "xaxis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.vecs2R": [[362, 369], ["numpy.dot", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sqrt", "numpy.sign", "numpy.cross"], "function", ["None"], ["", "def", "vecs2R", "(", "vec_x", ",", "vec_y", ")", ":", "\n", "    ", "vec_x", "=", "vec_x", "/", "np", ".", "linalg", ".", "norm", "(", "vec_x", ")", "\n", "vec_y", "=", "vec_y", "/", "np", ".", "linalg", ".", "norm", "(", "vec_y", ")", "\n", "c", "=", "np", ".", "dot", "(", "vec_x", ",", "vec_y", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "1", "-", "c", "*", "c", ")", "*", "np", ".", "sign", "(", "np", ".", "cross", "(", "vec_x", ",", "vec_y", ")", ")", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ",", "0", ")", ",", "(", "s", ",", "c", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.landmarks2S": [[371, 387], ["x.mean().squeeze", "y.mean().squeeze", "numpy.linalg.norm", "numpy.linalg.norm", "[].mean", "numpy.eye", "x.mean", "y.mean"], "function", ["None"], ["", "def", "landmarks2S", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "y_mean", "=", "y", ".", "mean", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "# vectors = mean -> each point", "\n", "x_vectors", "=", "x", "-", "x_mean", "\n", "y_vectors", "=", "y", "-", "y_mean", "\n", "\n", "x_norms", "=", "np", ".", "linalg", ".", "norm", "(", "x_vectors", ",", "axis", "=", "1", ")", "\n", "y_norms", "=", "np", ".", "linalg", ".", "norm", "(", "y_vectors", ",", "axis", "=", "1", ")", "\n", "\n", "indices", "=", "[", "96", ",", "97", ",", "76", ",", "82", "]", "# indices for eyes, lips", "\n", "scale", "=", "(", "y_norms", "/", "x_norms", ")", "[", "indices", "]", ".", "mean", "(", ")", "\n", "\n", "S", "=", "np", ".", "eye", "(", "3", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "S", "[", "1", ",", "1", "]", "=", "scale", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.pad_mirror": [[389, 405], ["numpy.pad", "skimage.filters.gaussian", "numpy.meshgrid", "numpy.clip", "numpy.clip", "numpy.minimum", "numpy.minimum", "numpy.array", "cv2.resize", "cv2.resize", "numpy.arange", "numpy.arange", "numpy.flip", "numpy.flip", "numpy.expand_dims", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize"], ["", "def", "pad_mirror", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "H", "//", "2", ",", "H", "//", "2", ")", ",", "(", "W", "//", "2", ",", "W", "//", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "small_blurred", "=", "gaussian", "(", "cv2", ".", "resize", "(", "img", ",", "(", "W", ",", "H", ")", ")", ",", "H", "//", "100", ",", "multichannel", "=", "True", ")", "\n", "blurred", "=", "cv2", ".", "resize", "(", "small_blurred", ",", "(", "W", "*", "2", ",", "H", "*", "2", ")", ")", "*", "255", "\n", "\n", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "H", ")", ",", "np", ".", "arange", "(", "W", ")", ",", "indexing", "=", "\"ij\"", ")", "\n", "weight_y", "=", "np", ".", "clip", "(", "coords", "[", "0", "]", "/", "(", "H", "//", "4", ")", ",", "0", ",", "1", ")", "\n", "weight_x", "=", "np", ".", "clip", "(", "coords", "[", "1", "]", "/", "(", "H", "//", "4", ")", ",", "0", ",", "1", ")", "\n", "weight_y", "=", "np", ".", "minimum", "(", "weight_y", ",", "np", ".", "flip", "(", "weight_y", ",", "axis", "=", "0", ")", ")", "\n", "weight_x", "=", "np", ".", "minimum", "(", "weight_x", ",", "np", ".", "flip", "(", "weight_x", ",", "axis", "=", "1", ")", ")", "\n", "weight", "=", "np", ".", "expand_dims", "(", "np", ".", "minimum", "(", "weight_y", ",", "weight_x", ")", ",", "2", ")", "**", "4", "\n", "img", "=", "img", "*", "weight", "+", "blurred", "*", "(", "1", "-", "weight", ")", "\n", "landmarks", "+=", "np", ".", "array", "(", "[", "W", "//", "4", ",", "H", "//", "4", "]", ")", "\n", "return", "img", ",", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.align_faces": [[407, 430], ["wing.FaceAligner", "transforms.Compose", "os.listdir", "os.makedirs", "os.listdir.sort", "Image.open().convert", "transforms.Compose.unsqueeze", "wing.FaceAligner.align", "save_image", "print", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "Image.open", "transforms.Compose.", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.data_loader.listdir", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.network.Network.convert", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FaceAligner.align", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["", "def", "align_faces", "(", "args", ",", "input_dir", ",", "output_dir", ")", ":", "\n", "    ", "import", "os", "\n", "from", "torchvision", "import", "transforms", "\n", "from", "PIL", "import", "Image", "\n", "from", "core", ".", "utils", "import", "save_image", "\n", "\n", "aligner", "=", "FaceAligner", "(", "args", ".", "wing_path", ",", "args", ".", "lm_path", ",", "args", ".", "img_size", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "img_size", ",", "args", ".", "img_size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "fnames", "=", "os", ".", "listdir", "(", "input_dir", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "fnames", ".", "sort", "(", ")", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "fname", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "x", "=", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "x_aligned", "=", "aligner", ".", "align", "(", "x", ")", "\n", "save_image", "(", "x_aligned", ",", "1", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "fname", ")", ")", "\n", "print", "(", "'Saved the aligned image to %s...'", "%", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize": [[437, 447], ["x.contiguous.contiguous", "x.contiguous.size", "x.contiguous.view", "x.view.view", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "", "def", "normalize", "(", "x", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Apply min-max normalization.\"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x_", "=", "x", ".", "view", "(", "N", "*", "C", ",", "-", "1", ")", "\n", "max_val", "=", "torch", ".", "max", "(", "x_", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "min_val", "=", "torch", ".", "min", "(", "x_", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x_", "=", "(", "x_", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "eps", ")", "\n", "out", "=", "x_", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.truncate": [[449, 452], ["torch.where", "torch.where", "torch.where", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "truncate", "(", "x", ",", "thres", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Remove small values in heatmaps.\"\"\"", "\n", "return", "torch", ".", "where", "(", "x", "<", "thres", ",", "torch", ".", "zeros_like", "(", "x", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize": [[454, 457], ["None"], "function", ["None"], ["", "def", "resize", "(", "x", ",", "p", "=", "2", ")", ":", "\n", "    ", "\"\"\"Resize heatmaps.\"\"\"", "\n", "return", "x", "**", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.shift": [[459, 478], ["abs", "x.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "shift", "(", "x", ",", "N", ")", ":", "\n", "    ", "\"\"\"Shift N pixels up or down.\"\"\"", "\n", "up", "=", "N", ">=", "0", "\n", "N", "=", "abs", "(", "N", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "head", "=", "torch", ".", "arange", "(", "N", ")", "\n", "tail", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "\n", "\n", "if", "up", ":", "\n", "        ", "head", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "+", "N", "\n", "tail", "=", "torch", ".", "arange", "(", "N", ")", "\n", "", "else", ":", "\n", "        ", "head", "=", "torch", ".", "arange", "(", "N", ")", "+", "(", "H", "-", "N", ")", "\n", "tail", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "\n", "\n", "# permutation indices", "\n", "", "perm", "=", "torch", ".", "cat", "(", "[", "head", ",", "tail", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "out", "=", "x", "[", ":", ",", ":", ",", "perm", ",", ":", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.preprocess": [[494, 541], ["torch.sum.size", "wing.truncate", "wing.normalize", "munch.Munch", "munch.Munch.items", "torch.cat", "torch.cat", "torch.cat", "wing.shift", "wing.resize", "wing.resize", "copy.deepcopy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "wing.resize", "wing.resize", "wing.shift", "torch.sum.clamp_", "torch.sum.clamp_", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "wing.shift", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "wing.shift"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.truncate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.normalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.shift", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.resize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.shift", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.shift", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.shift"], ["def", "preprocess", "(", "x", ")", ":", "\n", "    ", "\"\"\"Preprocess 98-dimensional heatmaps.\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "truncate", "(", "x", ")", "\n", "x", "=", "normalize", "(", "x", ")", "\n", "\n", "sw", "=", "H", "//", "256", "\n", "operations", "=", "Munch", "(", "chin", "=", "OPPAIR", "(", "0", ",", "3", ")", ",", "\n", "eyebrows", "=", "OPPAIR", "(", "-", "7", "*", "sw", ",", "2", ")", ",", "\n", "nostrils", "=", "OPPAIR", "(", "8", "*", "sw", ",", "4", ")", ",", "\n", "lipupper", "=", "OPPAIR", "(", "-", "8", "*", "sw", ",", "4", ")", ",", "\n", "liplower", "=", "OPPAIR", "(", "8", "*", "sw", ",", "4", ")", ",", "\n", "lipinner", "=", "OPPAIR", "(", "-", "2", "*", "sw", ",", "3", ")", ")", "\n", "\n", "for", "part", ",", "ops", "in", "operations", ".", "items", "(", ")", ":", "\n", "        ", "start", ",", "end", "=", "index_map", "[", "part", "]", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "ops", ".", "shift", ")", ",", "ops", ".", "resize", ")", "\n", "\n", "", "zero_out", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "0", ",", "index_map", ".", "chin", ".", "start", ")", ",", "\n", "torch", ".", "arange", "(", "index_map", ".", "chin", ".", "end", ",", "33", ")", ",", "\n", "torch", ".", "LongTensor", "(", "[", "index_map", ".", "eyebrowsedges", ".", "start", ",", "\n", "index_map", ".", "eyebrowsedges", ".", "end", ",", "\n", "index_map", ".", "lipedges", ".", "start", ",", "\n", "index_map", ".", "lipedges", ".", "end", "]", ")", "]", ")", "\n", "x", "[", ":", ",", "zero_out", "]", "=", "0", "\n", "\n", "start", ",", "end", "=", "index_map", ".", "nose", "\n", "x", "[", ":", ",", "start", "+", "1", ":", "end", "]", "=", "shift", "(", "x", "[", ":", ",", "start", "+", "1", ":", "end", "]", ",", "4", "*", "sw", ")", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "1", ")", "\n", "\n", "start", ",", "end", "=", "index_map", ".", "eyes", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "1", ")", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "-", "8", ")", ",", "3", ")", "+", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "-", "24", ")", "\n", "\n", "# Second-level mask", "\n", "x2", "=", "deepcopy", "(", "x", ")", "\n", "x2", "[", ":", ",", "index_map", ".", "chin", ".", "start", ":", "index_map", ".", "chin", ".", "end", "]", "=", "0", "# start:end was 0:33", "\n", "x2", "[", ":", ",", "index_map", ".", "lipedges", ".", "start", ":", "index_map", ".", "lipinner", ".", "end", "]", "=", "0", "# start:end was 76:96", "\n", "x2", "[", ":", ",", "index_map", ".", "eyebrows", ".", "start", ":", "index_map", ".", "eyebrows", ".", "end", "]", "=", "0", "# start:end was 33:51", "\n", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (N, 1, H, W)", "\n", "x2", "=", "torch", ".", "sum", "(", "x2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# mask without faceline and mouth", "\n", "\n", "x", "[", "x", "!=", "x", "]", "=", "0", "# set nan to zero", "\n", "x2", "[", "x", "!=", "x", "]", "=", "0", "# set nan to zero", "\n", "return", "x", ".", "clamp_", "(", "0", ",", "1", ")", ",", "x2", ".", "clamp_", "(", "0", ",", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.re_normalize": [[33, 40], ["y.new", "y.size"], "function", ["None"], ["def", "re_normalize", "(", "y", ",", "mean", ",", "std", ")", ":", "\n", "    ", "x", "=", "y", ".", "new", "(", "*", "y", ".", "size", "(", ")", ")", "\n", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "(", "y", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-", "mean", "[", "0", "]", ")", "/", "std", "[", "0", "]", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "(", "y", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-", "mean", "[", "1", "]", ")", "/", "std", "[", "1", "]", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "(", "y", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-", "mean", "[", "2", "]", ")", "/", "std", "[", "2", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_json": [[42, 45], ["open", "json.dump"], "function", ["None"], ["", "def", "save_json", "(", "json_file", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "json_file", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.print_network": [[47, 53], ["network.parameters", "print", "p.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "network", ",", "name", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "p", "in", "network", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "# print(network)", "\n", "", "print", "(", "\"Number of parameters of %s: %i\"", "%", "(", "name", ",", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.he_init": [[55, 64], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "he_init", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.denormalize": [[66, 69], ["out.clamp_"], "function", ["None"], ["", "", "", "def", "denormalize", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image": [[71, 74], ["utils.denormalize", "torchvision.save_image", "denormalize.cpu"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.denormalize", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image"], ["", "def", "save_image", "(", "x", ",", "ncol", ",", "filename", ")", ":", "\n", "    ", "x", "=", "denormalize", "(", "x", ")", "\n", "vutils", ".", "save_image", "(", "x", ".", "cpu", "(", ")", ",", "filename", ",", "nrow", "=", "ncol", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_and_reconstruct": [[76, 89], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "nets.style_encoder", "nets.generator", "nets.style_encoder", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "nets.fan.get_heatmap", "nets.fan.get_heatmap"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "s_src", "=", "nets", ".", "style_encoder", "(", "x_src", ",", "y_src", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_fake", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_rec", "=", "nets", ".", "generator", "(", "x_fake", ",", "s_src", ",", "masks", "=", "masks", ")", "\n", "x_concat", "=", "[", "x_src", ",", "x_ref", ",", "x_fake", ",", "x_rec", "]", "\n", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "del", "x_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_using_latent": [[91, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "z_trg_list[].size", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "nets.fan.get_heatmap", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "nets.mapping_network", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "s_avg.repeat.repeat", "nets.mapping_network", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "nets.generator", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_using_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_trg_list", ",", "z_trg_list", ",", "psi", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "latent_dim", "=", "z_trg_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "x_concat", "=", "[", "x_src", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_trg_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "s_avg", "=", "s_avg", ".", "repeat", "(", "N", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_trg_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "x_concat", "+=", "[", "x_fake", "]", "\n", "\n", "", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_using_reference": [[115, 133], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nets.style_encoder", "nets.style_encoder.unsqueeze().repeat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "nets.fan.get_heatmap", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "nets.style_encoder.unsqueeze"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_image", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_using_reference", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "wb", "=", "torch", ".", "ones", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "x_src_with_wb", "=", "torch", ".", "cat", "(", "[", "wb", ",", "x_src", "]", ",", "dim", "=", "0", ")", "\n", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_ref_list", "=", "s_ref", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "x_concat", "=", "[", "x_src_with_wb", "]", "\n", "for", "i", ",", "s_ref", "in", "enumerate", "(", "s_ref_list", ")", ":", "\n", "        ", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "x_fake_with_ref", "=", "torch", ".", "cat", "(", "[", "x_ref", "[", "i", ":", "i", "+", "1", "]", ",", "x_fake", "]", ",", "dim", "=", "0", ")", "\n", "x_concat", "+=", "[", "x_fake_with_ref", "]", "\n", "\n", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", "+", "1", ",", "filename", ")", "\n", "del", "x_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.debug_image": [[134, 157], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inputs.x_src.size", "os.path.join", "utils.translate_and_reconstruct", "torch.randn().repeat().to", "torch.randn().repeat().to", "torch.randn().repeat().to", "torch.randn().repeat().to", "os.path.join", "utils.translate_using_reference", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "os.path.join", "utils.translate_using_latent", "range", "torch.randn().repeat", "torch.randn().repeat", "torch.randn().repeat", "torch.randn().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "min", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_and_reconstruct", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_using_reference", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.translate_using_latent"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "debug_image", "(", "nets", ",", "args", ",", "inputs", ",", "step", ")", ":", "\n", "    ", "x_src", ",", "y_src", "=", "inputs", ".", "x_src", ",", "inputs", ".", "y_src", "\n", "x_ref", ",", "y_ref", "=", "inputs", ".", "x_ref", ",", "inputs", ".", "y_ref", "\n", "\n", "device", "=", "inputs", ".", "x_src", ".", "device", "\n", "N", "=", "inputs", ".", "x_src", ".", "size", "(", "0", ")", "\n", "\n", "# translate and reconstruct (reference-guided)", "\n", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_cycle_consistency.jpg'", "%", "(", "step", ")", ")", "\n", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n", "# latent-guided image synthesis", "\n", "y_trg_list", "=", "[", "torch", ".", "tensor", "(", "y", ")", ".", "repeat", "(", "N", ")", ".", "to", "(", "device", ")", "\n", "for", "y", "in", "range", "(", "min", "(", "args", ".", "num_domains", ",", "5", ")", ")", "]", "\n", "z_trg_list", "=", "torch", ".", "randn", "(", "args", ".", "num_outs_per_domain", ",", "1", ",", "args", ".", "latent_dim", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "for", "psi", "in", "[", "0.5", ",", "0.7", ",", "1.0", "]", ":", "\n", "        ", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_latent_psi_%.1f.jpg'", "%", "(", "step", ",", "psi", ")", ")", "\n", "translate_using_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_trg_list", ",", "z_trg_list", ",", "psi", ",", "filename", ")", "\n", "\n", "# reference-guided image synthesis", "\n", "", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_reference.jpg'", "%", "(", "step", ")", ")", "\n", "translate_using_reference", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.sigmoid": [[165, 167], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ",", "w", "=", "1", ")", ":", "\n", "    ", "return", "1.", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "w", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.get_alphas": [[169, 171], ["utils.sigmoid", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.sigmoid"], ["", "def", "get_alphas", "(", "start", "=", "-", "5", ",", "end", "=", "5", ",", "step", "=", "0.5", ",", "len_tail", "=", "10", ")", ":", "\n", "    ", "return", "[", "0", "]", "+", "[", "sigmoid", "(", "alpha", ")", "for", "alpha", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "step", ")", "]", "+", "[", "1", "]", "*", "len_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate": [[173, 188], ["x_src.size", "utils.get_alphas", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nets.fan.get_heatmap", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.make_grid().unsqueeze", "torchvision.utils.make_grid().unsqueeze", "torch.cat.append", "x_src.cpu", "nets.generator.cpu", "torchvision.utils.make_grid", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.get_alphas", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.make_grid", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.stylegan2.non_leaking.make_grid"], ["", "def", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ":", "\n", "    ", "''' returns T x C x H x W '''", "\n", "B", "=", "x_src", ".", "size", "(", "0", ")", "\n", "frames", "=", "[", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "\n", "for", "alpha", "in", "alphas", ":", "\n", "        ", "s_ref", "=", "torch", ".", "lerp", "(", "s_prev", ",", "s_next", ",", "alpha", ")", "\n", "x_fake", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "entries", "=", "torch", ".", "cat", "(", "[", "x_src", ".", "cpu", "(", ")", ",", "x_fake", ".", "cpu", "(", ")", "]", ",", "dim", "=", "2", ")", "\n", "frame", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "entries", ",", "nrow", "=", "B", ",", "padding", "=", "0", ",", "pad_value", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "frames", "=", "torch", ".", "cat", "(", "frames", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.slide": [[190, 211], ["utils.get_alphas", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "int"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.get_alphas"], ["", "def", "slide", "(", "entries", ",", "margin", "=", "32", ")", ":", "\n", "    ", "\"\"\"Returns a sliding reference window.\n    Args:\n        entries: a list containing two reference images, x_prev and x_next, \n                 both of which has a shape (1, 3, 256, 256)\n    Returns:\n        canvas: output slide of shape (num_frames, 3, 256*2, 256+margin)\n    \"\"\"", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "entries", "[", "0", "]", ".", "shape", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "T", "=", "len", "(", "alphas", ")", "# number of frames", "\n", "\n", "canvas", "=", "-", "torch", ".", "ones", "(", "(", "T", ",", "C", ",", "H", "*", "2", ",", "W", "+", "margin", ")", ")", "\n", "merged", "=", "torch", ".", "cat", "(", "entries", ",", "dim", "=", "2", ")", "# (1, 3, 512, 256)", "\n", "for", "t", ",", "alpha", "in", "enumerate", "(", "alphas", ")", ":", "\n", "        ", "top", "=", "int", "(", "H", "*", "(", "1", "-", "alpha", ")", ")", "# top, bottom for canvas", "\n", "bottom", "=", "H", "*", "2", "\n", "m_top", "=", "0", "# top, bottom for merged", "\n", "m_bottom", "=", "2", "*", "H", "-", "top", "\n", "canvas", "[", "t", ",", ":", ",", "top", ":", "bottom", ",", ":", "W", "]", "=", "merged", "[", ":", ",", ":", ",", "m_top", ":", "m_bottom", ",", ":", "]", "\n", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.video_ref": [[213, 239], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nets.style_encoder", "tqdm.tqdm", "range", "utils.tensor2ndarray255", "utils.save_video", "zip", "len", "utils.interpolate", "utils.slide", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "tensor2ndarray255.append", "tensor2ndarray255.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "d.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.tensor2ndarray255", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_video", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.slide"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_ref", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "fname", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_prev", "=", "None", "\n", "for", "data_next", "in", "tqdm", "(", "zip", "(", "x_ref", ",", "y_ref", ",", "s_ref", ")", ",", "'video_ref'", ",", "len", "(", "x_ref", ")", ")", ":", "\n", "        ", "x_next", ",", "y_next", ",", "s_next", "=", "[", "d", ".", "unsqueeze", "(", "0", ")", "for", "d", "in", "data_next", "]", "\n", "if", "s_prev", "is", "None", ":", "\n", "            ", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "continue", "\n", "", "if", "y_prev", "!=", "y_next", ":", "\n", "            ", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "continue", "\n", "\n", "", "interpolated", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", "\n", "entries", "=", "[", "x_prev", ",", "x_next", "]", "\n", "slided", "=", "slide", "(", "entries", ")", "# (T, C, 256*2, 256)", "\n", "frames", "=", "torch", ".", "cat", "(", "[", "slided", ",", "interpolated", "]", ",", "dim", "=", "3", ")", ".", "cpu", "(", ")", "# (T, C, 256*2, 256*(batch+1))", "\n", "video", ".", "append", "(", "frames", ")", "\n", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "\n", "# append last frame 10 time", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n", "", "video", "=", "tensor2ndarray255", "(", "torch", ".", "cat", "(", "video", ")", ")", "\n", "save_video", "(", "fname", ",", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.video_latent": [[241, 274], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "z_list[].size", "enumerate", "enumerate", "range", "utils.tensor2ndarray255", "utils.save_video", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "nets.mapping_network", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "s_avg.repeat.repeat", "tqdm.tqdm", "interpolate().cpu", "tensor2ndarray255.append", "tensor2ndarray255.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_src.size", "nets.mapping_network", "torch.lerp", "torch.lerp", "torch.lerp", "torch.lerp", "s_list.append", "len", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "len", "utils.interpolate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.tensor2ndarray255", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_video", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.interpolate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_list", ",", "z_list", ",", "psi", ",", "fname", ")", ":", "\n", "    ", "latent_dim", "=", "z_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "s_list", "=", "[", "]", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "s_avg", "=", "s_avg", ".", "repeat", "(", "x_src", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "s_list", ".", "append", "(", "s_trg", ")", "\n", "\n", "", "", "s_prev", "=", "None", "\n", "video", "=", "[", "]", "\n", "# fetch reference images", "\n", "for", "idx_ref", ",", "s_next", "in", "enumerate", "(", "tqdm", "(", "s_list", ",", "'video_latent'", ",", "len", "(", "s_list", ")", ")", ")", ":", "\n", "        ", "if", "s_prev", "is", "None", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n", "", "if", "idx_ref", "%", "len", "(", "z_list", ")", "==", "0", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n", "", "frames", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ".", "cpu", "(", ")", "\n", "video", ".", "append", "(", "frames", ")", "\n", "s_prev", "=", "s_next", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n", "", "video", "=", "tensor2ndarray255", "(", "torch", ".", "cat", "(", "video", ")", ")", "\n", "save_video", "(", "fname", ",", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.save_video": [[276, 289], ["isinstance", "ffmpeg.input", "ffmpeg.filter", "ffmpeg.output", "ffmpeg.overwrite_output", "ffmpeg.run_async", "tqdm.tqdm", "ffmpeg.run_async.stdin.close", "ffmpeg.run_async.wait", "ffmpeg.run_async.stdin.write", "frame.astype().tobytes", "frame.astype"], "function", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.close", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.dnnlib.util.Logger.write"], ["", "def", "save_video", "(", "fname", ",", "images", ",", "output_fps", "=", "30", ",", "vcodec", "=", "'libx264'", ",", "filters", "=", "''", ")", ":", "\n", "    ", "assert", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ",", "\"images should be np.array: NHWC\"", "\n", "num_frames", ",", "height", ",", "width", ",", "channels", "=", "images", ".", "shape", "\n", "stream", "=", "ffmpeg", ".", "input", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "\n", "pix_fmt", "=", "'rgb24'", ",", "s", "=", "'{}x{}'", ".", "format", "(", "width", ",", "height", ")", ")", "\n", "stream", "=", "ffmpeg", ".", "filter", "(", "stream", ",", "'setpts'", ",", "'2*PTS'", ")", "# 2*PTS is for slower playback", "\n", "stream", "=", "ffmpeg", ".", "output", "(", "stream", ",", "fname", ",", "pix_fmt", "=", "'yuv420p'", ",", "vcodec", "=", "vcodec", ",", "r", "=", "output_fps", ")", "\n", "stream", "=", "ffmpeg", ".", "overwrite_output", "(", "stream", ")", "\n", "process", "=", "ffmpeg", ".", "run_async", "(", "stream", ",", "pipe_stdin", "=", "True", ")", "\n", "for", "frame", "in", "tqdm", "(", "images", ",", "desc", "=", "'writing video to %s'", "%", "fname", ")", ":", "\n", "        ", "process", ".", "stdin", ".", "write", "(", "frame", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tobytes", "(", ")", ")", "\n", "", "process", ".", "stdin", ".", "close", "(", ")", "\n", "process", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.utils.tensor2ndarray255": [[291, 294], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.cpu().numpy().transpose", "torch.clamp.cpu().numpy", "torch.clamp.cpu"], "function", ["None"], ["", "def", "tensor2ndarray255", "(", "images", ")", ":", "\n", "    ", "images", "=", "torch", ".", "clamp", "(", "images", "*", "0.5", "+", "0.5", ",", "0", ",", "1", ")", "\n", "return", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "*", "255", "", "", ""]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.__init__": [[16, 20], ["os.makedirs", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname_template", ",", "**", "kwargs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname_template", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "fname_template", "=", "fname_template", "\n", "self", ".", "module_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.register": [[21, 23], ["checkpoint.CheckpointIO.module_dict.update"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.submission.run_context.RunContext.update"], ["", "def", "register", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "module_dict", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save": [[24, 31], ["checkpoint.CheckpointIO.fname_template.format", "print", "checkpoint.CheckpointIO.module_dict.items", "torch.save", "module.state_dict"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.save"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "print", "(", "'Saving checkpoint into %s...'", "%", "fname", ")", "\n", "outdict", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "outdict", "[", "name", "]", "=", "module", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "outdict", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load": [[32, 42], ["checkpoint.CheckpointIO.fname_template.format", "os.path.exists", "print", "torch.cuda.is_available", "checkpoint.CheckpointIO.module_dict.items", "torch.load", "torch.load", "module.load_state_dict", "torch.device"], "methods", ["home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.mu-cai_frequency-domain-image-translation.core.checkpoint.CheckpointIO.load"], ["", "def", "load", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "fname", "+", "' does not exist!'", "\n", "print", "(", "'Loading checkpoint from %s...'", "%", "fname", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ")", "\n", "", "else", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "module", ".", "load_state_dict", "(", "module_dict", "[", "name", "]", ")", "\n", "", "", "", ""]]}