{"home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Metric.rank": [[5, 31], ["torch.LongTensor", "torch.LongTensor", "torch.matmul", "torch.matmul", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "item_tensor.t", "user_item_inter.items", "index_of_rank_list.cpu", "torch.LongTensor", "torch.LongTensor", "list"], "function", ["None"], ["def", "rank", "(", "num_user", ",", "user_item_inter", ",", "mask_items", ",", "result", ",", "is_training", ",", "step", ",", "topk", ")", ":", "\n", "    ", "user_tensor", "=", "result", "[", ":", "num_user", "]", "\n", "item_tensor", "=", "result", "[", "num_user", ":", "]", "\n", "start_index", "=", "0", "\n", "end_index", "=", "num_user", "if", "step", "==", "None", "else", "step", "\n", "all_index_of_rank_list", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", "\n", "while", "end_index", "<=", "num_user", "and", "start_index", "<", "end_index", ":", "\n", "        ", "temp_user_tensor", "=", "user_tensor", "[", "start_index", ":", "end_index", "]", "\n", "score_matrix", "=", "torch", ".", "matmul", "(", "temp_user_tensor", ",", "item_tensor", ".", "t", "(", ")", ")", "\n", "if", "is_training", "is", "False", ":", "\n", "            ", "for", "row", ",", "col", "in", "user_item_inter", ".", "items", "(", ")", ":", "\n", "                ", "if", "row", ">=", "start_index", "and", "row", "<", "end_index", ":", "\n", "                    ", "row", "-=", "start_index", "\n", "col", "=", "torch", ".", "LongTensor", "(", "list", "(", "col", ")", ")", "-", "num_user", "\n", "score_matrix", "[", "row", "]", "[", "col", "]", "=", "1e-15", "\n", "", "", "if", "mask_items", "is", "not", "None", ":", "\n", "                ", "score_matrix", "[", ":", ",", "mask_items", "-", "num_user", "]", "=", "1e-15", "\n", "\n", "", "", "_", ",", "index_of_rank_list", "=", "torch", ".", "topk", "(", "score_matrix", ",", "topk", ")", "\n", "all_index_of_rank_list", "=", "torch", ".", "cat", "(", "(", "all_index_of_rank_list", ",", "index_of_rank_list", ".", "cpu", "(", ")", "+", "num_user", ")", ",", "dim", "=", "0", ")", "\n", "start_index", "=", "end_index", "\n", "if", "end_index", "+", "step", "<", "num_user", ":", "\n", "            ", "end_index", "+=", "step", "\n", "", "else", ":", "\n", "            ", "end_index", "=", "num_user", "\n", "", "", "return", "all_index_of_rank_list", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Metric.full_accuracy": [[33, 87], ["user_item_inter.items", "set", "len", "all_index_of_rank_list[].tolist", "set", "len", "float", "float", "range", "enumerate", "set", "len", "all_index_of_rank_list[].tolist", "set", "len", "float", "float", "range", "enumerate", "set.intersection", "min", "set.intersection", "min", "math.log2", "math.log2", "math.log2", "math.log2"], "function", ["None"], ["", "def", "full_accuracy", "(", "val_data", ",", "all_index_of_rank_list", ",", "user_item_inter", ",", "is_training", ",", "topk", ")", ":", "\n", "    ", "length", "=", "0", "\n", "precision", "=", "recall", "=", "ndcg", "=", "0.0", "\n", "\n", "if", "is_training", ":", "\n", "        ", "for", "row", ",", "col", "in", "user_item_inter", ".", "items", "(", ")", ":", "\n", "            ", "user", "=", "row", "\n", "pos_items", "=", "set", "(", "col", ")", "\n", "num_pos", "=", "len", "(", "pos_items", ")", "\n", "if", "num_pos", "==", "0", ":", "\n", "                ", "continue", "\n", "", "length", "+=", "1", "\n", "items_list", "=", "all_index_of_rank_list", "[", "user", "]", ".", "tolist", "(", ")", "\n", "items", "=", "set", "(", "items_list", ")", "\n", "num_hit", "=", "len", "(", "pos_items", ".", "intersection", "(", "items", ")", ")", "\n", "precision", "+=", "float", "(", "num_hit", "/", "topk", ")", "\n", "recall", "+=", "float", "(", "num_hit", "/", "num_pos", ")", "\n", "ndcg_score", "=", "0.0", "\n", "max_ndcg_score", "=", "0.0", "\n", "for", "i", "in", "range", "(", "min", "(", "num_hit", ",", "topk", ")", ")", ":", "\n", "                ", "max_ndcg_score", "+=", "1", "/", "math", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "if", "max_ndcg_score", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "i", ",", "temp_item", "in", "enumerate", "(", "items_list", ")", ":", "\n", "                ", "if", "temp_item", "in", "pos_items", ":", "\n", "                    ", "ndcg_score", "+=", "1", "/", "math", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "", "ndcg", "+=", "ndcg_score", "/", "max_ndcg_score", "\n", "", "", "else", ":", "\n", "        ", "sum_num_hit", "=", "0", "\n", "for", "data", "in", "val_data", ":", "\n", "            ", "user", "=", "data", "[", "0", "]", "\n", "pos_items", "=", "set", "(", "data", "[", "1", ":", "]", ")", "\n", "num_pos", "=", "len", "(", "pos_items", ")", "\n", "if", "num_pos", "==", "0", ":", "\n", "                ", "continue", "\n", "", "length", "+=", "1", "\n", "items_list", "=", "all_index_of_rank_list", "[", "user", "]", ".", "tolist", "(", ")", "\n", "items", "=", "set", "(", "items_list", ")", "\n", "num_hit", "=", "len", "(", "pos_items", ".", "intersection", "(", "items", ")", ")", "\n", "sum_num_hit", "+=", "num_hit", "\n", "precision", "+=", "float", "(", "num_hit", "/", "topk", ")", "\n", "recall", "+=", "float", "(", "num_hit", "/", "num_pos", ")", "\n", "ndcg_score", "=", "0.0", "\n", "max_ndcg_score", "=", "0.0", "\n", "for", "i", "in", "range", "(", "min", "(", "num_pos", ",", "topk", ")", ")", ":", "\n", "                ", "max_ndcg_score", "+=", "1", "/", "math", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "if", "max_ndcg_score", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "i", ",", "temp_item", "in", "enumerate", "(", "items_list", ")", ":", "\n", "                ", "if", "temp_item", "in", "pos_items", ":", "\n", "                    ", "ndcg_score", "+=", "1", "/", "math", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "", "ndcg", "+=", "ndcg_score", "/", "max_ndcg_score", "\n", "\n", "", "", "return", "precision", "/", "length", ",", "recall", "/", "length", ",", "ndcg", "/", "length", "", "", ""]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.main.init": [[15, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "init", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Seed init.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Disables CUDA training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'movielens'", ",", "help", "=", "'Dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_file'", ",", "default", "=", "''", ",", "help", "=", "'Filename'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--PATH_weight_load'", ",", "default", "=", "None", ",", "help", "=", "'Loading weight filename.'", ")", "\n", "parser", ".", "add_argument", "(", "'--PATH_weight_save'", ",", "default", "=", "None", ",", "help", "=", "'Writing weight filename.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "default", "=", "''", ",", "help", "=", "'Prefix of save_file.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--l_r'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_lambda'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'Weight loss one.'", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_weight'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'Weight decay.'", ")", "\n", "parser", ".", "add_argument", "(", "'--temp_value'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'Contrastive temp_value.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "default", "=", "'SSL'", ",", "help", "=", "'Model Name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_neg'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Negative size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'Epoch number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Workers number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_sample'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Workers number.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dim_E'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Embedding dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--topK'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Workers number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'Workers number.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--has_v'", ",", "default", "=", "'False'", ",", "help", "=", "'Has Visual Features.'", ")", "\n", "parser", ".", "add_argument", "(", "'--has_a'", ",", "default", "=", "'False'", ",", "help", "=", "'Has Acoustic Features.'", ")", "\n", "parser", ".", "add_argument", "(", "'--has_t'", ",", "default", "=", "'False'", ",", "help", "=", "'Has Textual Features.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Full_rank.full_ranking": [[8, 31], ["print", "model.eval", "torch.autograd.no_grad", "Metric.rank", "Metric.full_accuracy", "print"], "function", ["home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Metric.rank", "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Metric.full_accuracy"], ["def", "full_ranking", "(", "epoch", ",", "model", ",", "data", ",", "user_item_inter", ",", "mask_items", ",", "is_training", ",", "step", ",", "topk", ",", "prefix", ",", "writer", "=", "None", ")", ":", "\n", "    ", "print", "(", "prefix", "+", "' start...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "no_grad", "(", ")", ":", "\n", "        ", "all_index_of_rank_list", "=", "rank", "(", "model", ".", "num_user", ",", "user_item_inter", ",", "mask_items", ",", "model", ".", "result", ",", "is_training", ",", "step", ",", "topk", ")", "\n", "precision", ",", "recall", ",", "ndcg_score", "=", "full_accuracy", "(", "data", ",", "all_index_of_rank_list", ",", "user_item_inter", ",", "is_training", ",", "topk", ")", "\n", "\n", "print", "(", "'---------------------------------{0}-th Precition:{1:.4f} Recall:{2:.4f} NDCG:{3:.4f}---------------------------------'", ".", "format", "(", "\n", "epoch", ",", "precision", ",", "recall", ",", "ndcg_score", ")", ")", "\n", "# if writer is not None:", "\n", "#     writer.add_scalar(prefix+'_Precition', precision, epoch)", "\n", "#     writer.add_scalar(prefix+'_Recall', recall, epoch)", "\n", "#     writer.add_scalar(prefix+'_NDCG', ndcg_score, epoch)", "\n", "\n", "#     writer.add_histogram(prefix+'_visual_distribution', model.v_rep, epoch)", "\n", "#     writer.add_histogram(prefix+'_acoustic_distribution', model.a_rep, epoch)", "\n", "#     writer.add_histogram(prefix+'_textual_distribution', model.t_rep, epoch)", "\n", "\n", "#     # writer.add_embedding(model.v_rep)", "\n", "#     #writer.add_embedding(model.a_rep)", "\n", "#     #writer.add_embedding(model.t_rep)", "\n", "\n", "return", "[", "precision", ",", "recall", ",", "ndcg_score", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Train.train": [[5, 40], ["model.train", "print", "tqdm.tqdm", "tqdm.tqdm.close", "print", "optimizer.zero_grad", "model.loss", "loss.backward", "optimizer.step", "model.mat.detach().cpu().item", "loss.cpu().item", "model_loss.cpu().item", "reg_loss.cpu().item", "tqdm.tqdm.update", "user_tensor.cuda", "item_tensor.cuda", "model.mat.detach().cpu", "loss.cpu", "model_loss.cpu", "reg_loss.cpu", "model.mat.detach"], "function", ["home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Train.train", "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.loss"], ["def", "train", "(", "epoch", ",", "length", ",", "dataloader", ",", "model", ",", "optimizer", ",", "batch_size", ",", "writer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "print", "(", "'Now, training start ...'", ")", "\n", "sum_loss", "=", "0.0", "\n", "sum_model_loss", "=", "0.0", "\n", "sum_reg_loss", "=", "0.0", "\n", "sum_contrastive_loss", "=", "0.0", "\n", "sum_weight_loss", "=", "0.0", "\n", "step", "=", "0.0", "\n", "pbar", "=", "tqdm", "(", "total", "=", "length", ")", "\n", "num_pbar", "=", "0", "\n", "sum_mat", "=", "0.0", "\n", "\n", "for", "user_tensor", ",", "item_tensor", "in", "dataloader", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "model_loss", ",", "reg_loss", "=", "model", ".", "loss", "(", "user_tensor", ".", "cuda", "(", ")", ",", "item_tensor", ".", "cuda", "(", ")", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "sum_mat", "+=", "model", ".", "mat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "sum_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "sum_model_loss", "+=", "model_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "sum_reg_loss", "+=", "reg_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "num_pbar", "+=", "batch_size", "\n", "step", "+=", "1.0", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "print", "(", "'----------------- loss value:{}  model_loss value:{} contrastive_loss value:{} reg_loss value:{} --------------'", "\n", ".", "format", "(", "sum_loss", "/", "step", ",", "sum_model_loss", "/", "step", ",", "sum_contrastive_loss", "/", "step", ",", "sum_reg_loss", "/", "step", ")", ")", "\n", "# if writer is not None:", "\n", "#     writer.add_scalar('Loss/loss', sum_loss/step, epoch)", "\n", "#     writer.add_scalar('Loss/model_loss', sum_model_loss/step, epoch)", "\n", "#     writer.add_scalar('Loss/reg_loss', sum_reg_loss/step, epoch)", "\n", "\n", "return", "loss", ",", "sum_mat", "/", "step", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Dataset.TrainingDataset.__init__": [[69, 77], ["set", "numpy.load", "set", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_user", ",", "num_item", ",", "user_item_dict", ",", "dataset", ",", "train_data", ",", "num_neg", ")", ":", "\n", "        ", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "num_user", "=", "num_user", "\n", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "num_neg", "=", "num_neg", "\n", "self", ".", "user_item_dict", "=", "user_item_dict", "\n", "self", ".", "cold_set", "=", "set", "(", "np", ".", "load", "(", "'./Data/'", "+", "dataset", "+", "'/cold_set.npy'", ")", ")", "\n", "self", ".", "all_set", "=", "set", "(", "range", "(", "num_user", ",", "num_user", "+", "num_item", ")", ")", "-", "self", ".", "cold_set", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Dataset.TrainingDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Dataset.TrainingDataset.__getitem__": [[81, 87], ["random.sample", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "set"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "user", ",", "pos_item", "=", "self", ".", "train_data", "[", "index", "]", "\n", "neg_item", "=", "random", ".", "sample", "(", "self", ".", "all_set", "-", "set", "(", "self", ".", "user_item_dict", "[", "user", "]", ")", ",", "self", ".", "num_neg", ")", "\n", "user_tensor", "=", "torch", ".", "LongTensor", "(", "[", "user", "]", "*", "(", "self", ".", "num_neg", "+", "1", ")", ")", "\n", "item_tensor", "=", "torch", ".", "LongTensor", "(", "[", "pos_item", "]", "+", "neg_item", ")", "\n", "return", "user_tensor", ",", "item_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.Dataset.data_load": [[11, 66], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.load", "torch.load", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.load().cuda", "torch.load().cuda", "numpy.load", "numpy.load", "numpy.load", "torch.load", "torch.load", "torch.tensor().cuda", "torch.tensor().cuda", "torch.load", "torch.load", "torch.tensor().cuda", "torch.tensor().cuda", "numpy.load", "torch.tensor().cuda", "torch.tensor().cuda", "torch.load", "torch.load", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "data_load", "(", "dataset", ",", "has_v", "=", "True", ",", "has_a", "=", "True", ",", "has_t", "=", "True", ")", ":", "\n", "    ", "dir_str", "=", "'./Data/'", "+", "dataset", "\n", "train_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/train.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "val_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/val_full.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "val_warm_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/val_warm.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "val_cold_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/val_cold.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "test_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/test_full.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "test_warm_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/test_warm.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "test_cold_data", "=", "np", ".", "load", "(", "dir_str", "+", "'/test_cold.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "if", "dataset", "==", "'movielens'", ":", "\n", "        ", "num_user", "=", "55485", "\n", "num_item", "=", "5986", "\n", "num_warm_item", "=", "5119", "\n", "v_feat", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "dir_str", "+", "'/feat_v.npy'", ",", "allow_pickle", "=", "True", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "a_feat", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "dir_str", "+", "'/feat_a.npy'", ",", "allow_pickle", "=", "True", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "t_feat", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "dir_str", "+", "'/feat_t.npy'", ",", "allow_pickle", "=", "True", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "elif", "dataset", "==", "'amazon'", ":", "\n", "        ", "num_user", "=", "27044", "\n", "num_item", "=", "86506", "\n", "num_warm_item", "=", "68810", "\n", "v_feat", "=", "torch", ".", "load", "(", "dir_str", "+", "'/feat_v.pt'", ")", "\n", "a_feat", "=", "None", "\n", "t_feat", "=", "None", "\n", "\n", "", "elif", "dataset", "==", "'tiktok'", ":", "\n", "        ", "num_user", "=", "32309", "\n", "num_item", "=", "57832", "+", "8624", "\n", "num_warm_item", "=", "57832", "\n", "if", "has_v", ":", "\n", "            ", "v_feat", "=", "torch", ".", "load", "(", "dir_str", "+", "'/feat_v.pt'", ")", "\n", "v_feat", "=", "torch", ".", "tensor", "(", "v_feat", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "v_feat", "=", "None", "\n", "\n", "", "if", "has_a", ":", "\n", "            ", "a_feat", "=", "torch", ".", "load", "(", "dir_str", "+", "'/feat_a.pt'", ")", "\n", "a_feat", "=", "torch", ".", "tensor", "(", "a_feat", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "a_feat", "=", "None", "\n", "\n", "", "t_feat", "=", "torch", ".", "load", "(", "dir_str", "+", "'/feat_t.pt'", ")", ".", "cuda", "(", ")", "\n", "", "elif", "dataset", "==", "'kwai'", ":", "\n", "        ", "num_user", "=", "7010", "\n", "num_item", "=", "86483", "\n", "num_warm_item", "=", "74470", "\n", "\n", "v_feat", "=", "np", ".", "load", "(", "dir_str", "+", "'/feat_v.npy'", ")", "\n", "v_feat", "=", "torch", ".", "tensor", "(", "v_feat", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "a_feat", "=", "t_feat", "=", "None", "\n", "\n", "\n", "", "return", "num_user", ",", "num_item", ",", "num_warm_item", ",", "train_data", ",", "val_data", ",", "val_warm_data", ",", "val_cold_data", ",", "test_data", ",", "test_warm_data", ",", "test_cold_data", ",", "v_feat", ",", "a_feat", ",", "t_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.__init__": [[12, 60], ["super().__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_().cuda", "torch.init.xavier_normal_().cuda", "torch.init.xavier_normal_().cuda", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.normalize", "torch.normalize", "torch.normalize", "model_CLCRec.CLCRec.v_feat.size", "torch.normalize", "torch.normalize", "torch.normalize", "model_CLCRec.CLCRec.a_feat.size", "model_CLCRec.CLCRec.t_feat.size", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.normalize", "torch.normalize", "torch.normalize", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_user", ",", "num_item", ",", "num_warm_item", ",", "edge_index", ",", "reg_weight", ",", "dim_E", ",", "v_feat", ",", "a_feat", ",", "t_feat", ",", "temp_value", ",", "num_neg", ",", "lr_lambda", ",", "is_word", ",", "num_sample", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "CLCRec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_user", "=", "num_user", "\n", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "num_warm_item", "=", "num_warm_item", "\n", "self", ".", "num_neg", "=", "num_neg", "\n", "self", ".", "lr_lambda", "=", "lr_lambda", "\n", "self", ".", "reg_weight", "=", "reg_weight", "\n", "self", ".", "temp_value", "=", "temp_value", "\n", "self", ".", "dim_E", "=", "dim_E", "\n", "self", ".", "is_word", "=", "is_word", "\n", "self", ".", "id_embedding", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "rand", "(", "(", "num_user", "+", "num_item", ",", "dim_E", ")", ")", ")", ")", "\n", "self", ".", "dim_feat", "=", "0", "\n", "self", ".", "num_sample", "=", "num_sample", "\n", "\n", "if", "v_feat", "is", "not", "None", ":", "\n", "            ", "self", ".", "v_feat", "=", "F", ".", "normalize", "(", "v_feat", ",", "dim", "=", "1", ")", "\n", "self", ".", "dim_feat", "+=", "self", ".", "v_feat", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "v_feat", "=", "None", "\n", "\n", "", "if", "a_feat", "is", "not", "None", ":", "\n", "            ", "self", ".", "a_feat", "=", "F", ".", "normalize", "(", "a_feat", ",", "dim", "=", "1", ")", "\n", "self", ".", "dim_feat", "+=", "self", ".", "a_feat", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "a_feat", "=", "None", "\n", "\n", "", "if", "t_feat", "is", "not", "None", ":", "\n", "            ", "if", "is_word", ":", "\n", "                ", "self", ".", "t_feat", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "rand", "(", "(", "torch", ".", "max", "(", "t_feat", "[", "1", "]", ")", ".", "item", "(", ")", "+", "1", ",", "128", ")", ")", ")", ")", "\n", "self", ".", "word_tensor", "=", "t_feat", "\n", "", "else", ":", "\n", "                ", "self", ".", "t_feat", "=", "F", ".", "normalize", "(", "t_feat", ",", "dim", "=", "1", ")", "\n", "", "self", ".", "dim_feat", "+=", "self", ".", "t_feat", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "t_feat", "=", "None", "\n", "\n", "", "self", ".", "MLP", "=", "nn", ".", "Linear", "(", "dim_E", ",", "dim_E", ")", "\n", "\n", "self", ".", "encoder_layer1", "=", "nn", ".", "Linear", "(", "self", ".", "dim_feat", ",", "256", ")", "\n", "self", ".", "encoder_layer2", "=", "nn", ".", "Linear", "(", "256", ",", "dim_E", ")", "\n", "\n", "self", ".", "att_weight_1", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "kaiming_normal_", "(", "torch", ".", "rand", "(", "(", "dim_E", ",", "dim_E", ")", ")", ")", ")", "\n", "self", ".", "att_weight_2", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "kaiming_normal_", "(", "torch", ".", "rand", "(", "(", "dim_E", ",", "dim_E", ")", ")", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "kaiming_normal_", "(", "torch", ".", "rand", "(", "(", "dim_E", ",", "1", ")", ")", ")", ")", "\n", "self", ".", "att_sum_layer", "=", "nn", ".", "Linear", "(", "dim_E", ",", "dim_E", ")", "\n", "\n", "self", ".", "result", "=", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "rand", "(", "(", "num_user", "+", "num_item", ",", "dim_E", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.encoder": [[62, 82], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CLCRec.CLCRec.encoder_layer2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_CLCRec.CLCRec.encoder_layer1", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.normalize().cuda", "torch.normalize().cuda", "torch.normalize().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch_geometric.utils.scatter_"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "mask", "=", "None", ")", ":", "\n", "        ", "feature", "=", "torch", ".", "tensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "v_feat", "is", "not", "None", ":", "\n", "            ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "self", ".", "v_feat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "a_feat", "is", "not", "None", ":", "\n", "            ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "self", ".", "a_feat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "t_feat", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "is_word", ":", "\n", "                ", "t_feat", "=", "F", ".", "normalize", "(", "torch", ".", "tensor", "(", "scatter_", "(", "'mean'", ",", "self", ".", "t_feat", "[", "self", ".", "word_tensor", "[", "1", "]", "]", ",", "self", ".", "word_tensor", "[", "0", "]", ")", ")", ")", ".", "cuda", "(", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "t_feat", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "self", ".", "t_feat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "feature", "=", "F", ".", "leaky_relu", "(", "self", ".", "encoder_layer1", "(", "feature", ")", ")", "\n", "feature", "=", "self", ".", "encoder_layer2", "(", "feature", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.loss_contrastive": [[84, 92], ["torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.exp().view", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "loss_contrastive", "(", "self", ",", "tensor_anchor", ",", "tensor_all", ",", "temp_value", ")", ":", "\n", "        ", "all_score", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "tensor_anchor", "*", "tensor_all", ",", "dim", "=", "1", ")", "/", "temp_value", ")", ".", "view", "(", "-", "1", ",", "1", "+", "self", ".", "num_neg", ")", "\n", "all_score", "=", "all_score", ".", "view", "(", "-", "1", ",", "1", "+", "self", ".", "num_neg", ")", "\n", "pos_score", "=", "all_score", "[", ":", ",", "0", "]", "\n", "all_score", "=", "torch", ".", "sum", "(", "all_score", ",", "dim", "=", "1", ")", "\n", "self", ".", "mat", "=", "(", "1", "-", "pos_score", "/", "all_score", ")", ".", "mean", "(", ")", "\n", "contrastive_loss", "=", "(", "-", "torch", ".", "log", "(", "pos_score", "/", "all_score", ")", ")", ".", "mean", "(", ")", "\n", "return", "contrastive_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.forward": [[94, 123], ["item_tensor[].unsqueeze", "pos_item_tensor.repeat().view().squeeze.repeat().view().squeeze.repeat().view().squeeze", "user_tensor.view().squeeze.view().squeeze.view().squeeze", "item_tensor.view().squeeze.view().squeeze.view().squeeze", "model_CLCRec.CLCRec.encoder", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "all_item_embedding.clone", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "all_item_feat[].clone", "model_CLCRec.CLCRec.loss_contrastive", "model_CLCRec.CLCRec.loss_contrastive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_item_tensor.repeat().view().squeeze.repeat().view().squeeze.repeat().view", "user_tensor.view().squeeze.view().squeeze.view", "item_tensor.view().squeeze.view().squeeze.view", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "all_item_embedding.size", "pos_item_tensor.repeat().view().squeeze.repeat().view().squeeze.repeat", "int", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "all_item_embedding.size"], "methods", ["home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.encoder", "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.loss_contrastive", "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.loss_contrastive"], ["", "def", "forward", "(", "self", ",", "user_tensor", ",", "item_tensor", ")", ":", "\n", "        ", "pos_item_tensor", "=", "item_tensor", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "pos_item_tensor", "=", "pos_item_tensor", ".", "repeat", "(", "1", ",", "1", "+", "self", ".", "num_neg", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "user_tensor", "=", "user_tensor", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "item_tensor", "=", "item_tensor", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "\n", "feature", "=", "self", ".", "encoder", "(", ")", "\n", "all_item_feat", "=", "feature", "[", "item_tensor", "-", "self", ".", "num_user", "]", "\n", "\n", "user_embedding", "=", "self", ".", "id_embedding", "[", "user_tensor", "]", "\n", "pos_item_embedding", "=", "self", ".", "id_embedding", "[", "pos_item_tensor", "]", "\n", "all_item_embedding", "=", "self", ".", "id_embedding", "[", "item_tensor", "]", "\n", "\n", "head_feat", "=", "F", ".", "normalize", "(", "all_item_feat", ",", "dim", "=", "1", ")", "\n", "head_embed", "=", "F", ".", "normalize", "(", "pos_item_embedding", ",", "dim", "=", "1", ")", "\n", "\n", "all_item_input", "=", "all_item_embedding", ".", "clone", "(", ")", "\n", "rand_index", "=", "torch", ".", "randint", "(", "all_item_embedding", ".", "size", "(", "0", ")", ",", "(", "int", "(", "all_item_embedding", ".", "size", "(", "0", ")", "*", "self", ".", "num_sample", ")", ",", ")", ")", ".", "cuda", "(", ")", "\n", "all_item_input", "[", "rand_index", "]", "=", "all_item_feat", "[", "rand_index", "]", ".", "clone", "(", ")", "\n", "\n", "self", ".", "contrastive_loss_1", "=", "self", ".", "loss_contrastive", "(", "head_embed", ",", "head_feat", ",", "self", ".", "temp_value", ")", "\n", "self", ".", "contrastive_loss_2", "=", "self", ".", "loss_contrastive", "(", "user_embedding", ",", "all_item_input", ",", "self", ".", "temp_value", ")", "\n", "\n", "reg_loss", "=", "(", "(", "torch", ".", "sqrt", "(", "(", "user_embedding", "**", "2", ")", ".", "sum", "(", "1", ")", ")", ")", ".", "mean", "(", ")", "+", "(", "torch", ".", "sqrt", "(", "(", "all_item_embedding", "**", "2", ")", ".", "sum", "(", "1", ")", ")", ")", ".", "mean", "(", ")", ")", "/", "2", "\n", "self", ".", "result", "=", "torch", ".", "cat", "(", "(", "self", ".", "id_embedding", "[", ":", "self", ".", "num_user", "+", "self", ".", "num_warm_item", "]", ",", "feature", "[", "self", ".", "num_warm_item", ":", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "self", ".", "contrastive_loss_1", "*", "self", ".", "lr_lambda", "+", "(", "self", ".", "contrastive_loss_2", ")", "*", "(", "1", "-", "self", ".", "lr_lambda", ")", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.loss": [[125, 129], ["model_CLCRec.CLCRec.forward"], "methods", ["home.repos.pwc.inspect_result.weiyinwei_CLCRec.None.model_CLCRec.CLCRec.forward"], ["", "def", "loss", "(", "self", ",", "user_tensor", ",", "item_tensor", ")", ":", "\n", "        ", "contrastive_loss", ",", "reg_loss", "=", "self", ".", "forward", "(", "user_tensor", ",", "item_tensor", ")", "\n", "reg_loss", "=", "self", ".", "reg_weight", "*", "reg_loss", "\n", "return", "reg_loss", "+", "contrastive_loss", ",", "self", ".", "contrastive_loss_2", "+", "reg_loss", ",", "reg_loss", "\n", "", "", ""]]}