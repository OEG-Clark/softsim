{"home.repos.pwc.inspect_result.uvavision_DrillDown.lib.config.str2bool": [[10, 12], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.config.get_config": [[125, 128], ["parser.parse_known_args"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "config", ",", "unparsed", "\n", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.colorize": [[37, 44], ["attr.append", "str", "attr.append"], "function", ["None"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.configure_output_dir": [[52, 64], ["open", "atexit.register", "print", "os.exists", "os.makedirs", "os.makedirs", "os.join", "logz.colorize", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.colorize"], ["", "def", "configure_output_dir", "(", "d", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Set output directory to d, or to /tmp/somerandomnumber if d is None\n    \"\"\"", "\n", "G", ".", "output_dir", "=", "d", "or", "\"/tmp/experiments/%i\"", "%", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "# assert not osp.exists(G.output_dir), \"Log dir %s already exists! Delete it first or use a different dir\"%G.output_dir", "\n", "# os.makedirs(G.output_dir)", "\n", "if", "not", "osp", ".", "exists", "(", "G", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "G", ".", "output_dir", ")", "\n", "", "G", ".", "output_file", "=", "open", "(", "osp", ".", "join", "(", "G", ".", "output_dir", ",", "\"log.txt\"", ")", ",", "'w'", ")", "\n", "atexit", ".", "register", "(", "G", ".", "output_file", ".", "close", ")", "\n", "print", "(", "colorize", "(", "\"Logging data to %s\"", "%", "G", ".", "output_file", ".", "name", ",", "'green'", ",", "bold", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular": [[65, 76], ["G.log_headers.append"], "function", ["None"], ["", "def", "log_tabular", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    \"\"\"", "\n", "if", "G", ".", "first_row", ":", "\n", "        ", "G", ".", "log_headers", ".", "append", "(", "key", ")", "\n", "", "else", ":", "\n", "        ", "assert", "key", "in", "G", ".", "log_headers", ",", "\"Trying to introduce a new key %s that you didn't include in the first iteration\"", "%", "key", "\n", "", "assert", "key", "not", "in", "G", ".", "log_current_row", ",", "\"You already set %s this iteration. Maybe you forgot to call dump_tabular()\"", "%", "key", "\n", "G", ".", "log_current_row", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_params": [[77, 80], ["open", "out.write", "os.join", "json.dumps"], "function", ["None"], ["", "def", "save_params", "(", "params", ")", ":", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "G", ".", "output_dir", ",", "\"params.json\"", ")", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "out", ".", "write", "(", "json", ".", "dumps", "(", "params", ",", "separators", "=", "(", "',\\n'", ",", "'\\t:\\t'", ")", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_config": [[81, 84], ["open", "json.dump", "os.join"], "function", ["None"], ["", "", "def", "save_config", "(", "config", ")", ":", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "G", ".", "output_dir", ",", "\"params.json\"", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.dump_tabular": [[95, 122], ["max", "print", "print", "G.log_current_row.clear", "len", "max", "G.log_current_row.get", "hasattr", "print", "vals.append", "G.output_file.write", "G.output_file.write", "G.output_file.flush", "G.output_file.write", "G.output_file.write", "map"], "function", ["None"], ["", "", "def", "dump_tabular", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n    \"\"\"", "\n", "vals", "=", "[", "]", "\n", "key_lens", "=", "[", "len", "(", "key", ")", "for", "key", "in", "G", ".", "log_headers", "]", "\n", "max_key_len", "=", "max", "(", "15", ",", "max", "(", "key_lens", ")", ")", "\n", "keystr", "=", "'%'", "+", "'%d'", "%", "max_key_len", "\n", "fmt", "=", "\"| \"", "+", "keystr", "+", "\"s | %15s |\"", "\n", "n_slashes", "=", "22", "+", "max_key_len", "\n", "print", "(", "\"-\"", "*", "n_slashes", ")", "\n", "for", "key", "in", "G", ".", "log_headers", ":", "\n", "        ", "val", "=", "G", ".", "log_current_row", ".", "get", "(", "key", ",", "\"\"", ")", "\n", "if", "hasattr", "(", "val", ",", "\"__float__\"", ")", ":", "valstr", "=", "\"%8.3g\"", "%", "val", "\n", "else", ":", "valstr", "=", "val", "\n", "print", "(", "fmt", "%", "(", "key", ",", "valstr", ")", ")", "\n", "vals", ".", "append", "(", "val", ")", "\n", "", "print", "(", "\"-\"", "*", "n_slashes", ")", "\n", "if", "G", ".", "output_file", "is", "not", "None", ":", "\n", "        ", "if", "G", ".", "first_row", ":", "\n", "            ", "G", ".", "output_file", ".", "write", "(", "\"\\t\"", ".", "join", "(", "G", ".", "log_headers", ")", ")", "\n", "G", ".", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "G", ".", "output_file", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "vals", ")", ")", ")", "\n", "G", ".", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "G", ".", "output_file", ".", "flush", "(", ")", "\n", "", "G", ".", "log_current_row", ".", "clear", "(", ")", "\n", "G", ".", "first_row", "=", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.__init__": [[22, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optim", ",", "max_grad_norm", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optim", "\n", "self", ".", "scheduler", "=", "None", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.set_scheduler": [[27, 35], ["None"], "methods", ["None"], ["", "def", "set_scheduler", "(", "self", ",", "scheduler", ")", ":", "\n", "        ", "\"\"\" Set the learning rate scheduler.\n\n        Args:\n            scheduler (torch.optim.lr_scheduler.*): object of learning rate scheduler,\n               e.g. torch.optim.lr_scheduler.StepLR\n        \"\"\"", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step": [[36, 42], ["optim.Optimizer.optimizer.step", "itertools.chain.from_iterable", "torch.nn.utils.clip_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\" Performs a single optimization step, including gradient norm clipping if necessary. \"\"\"", "\n", "if", "self", ".", "max_grad_norm", ">", "0", ":", "\n", "            ", "params", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "group", "[", "'params'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.update": [[43, 58], ["isinstance", "optim.Optimizer.scheduler.step", "optim.Optimizer.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step"], ["", "def", "update", "(", "self", ",", "loss", ",", "epoch", ")", ":", "\n", "        ", "\"\"\" Update the learning rate if the criteria of the scheduler are met.\n\n        Args:\n            loss (float): The current loss.  It could be training loss or developing loss\n                depending on the caller.  By default the supervised trainer uses developing\n                loss.\n            epoch (int): The current epoch number.\n        \"\"\"", "\n", "if", "self", ".", "scheduler", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "self", ".", "scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", "loss", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.maybe_create": [[28, 31], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "maybe_create", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.prepare_directories": [[33, 39], ["datetime.datetime.now().strftime", "os.join", "utils.maybe_create", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create"], ["", "", "def", "prepare_directories", "(", "config", ")", ":", "\n", "    ", "postfix", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "model_name", "=", "'{}_{}'", ".", "format", "(", "config", ".", "exp_name", ",", "postfix", ")", "\n", "config", ".", "model_name", "=", "model_name", "\n", "config", ".", "model_dir", "=", "osp", ".", "join", "(", "config", ".", "log_dir", ",", "model_name", ")", "\n", "maybe_create", "(", "config", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.further_token_process": [[49, 55], ["w.translate", "w.isalpha"], "function", ["None"], ["def", "further_token_process", "(", "tokens", ")", ":", "\n", "    ", "tokens", "=", "[", "w", ".", "translate", "(", "punctuation_table", ")", "for", "w", "in", "tokens", "]", "\n", "tokens", "=", "[", "w", "for", "w", "in", "tokens", "if", "w", ".", "isalpha", "(", ")", "]", "\n", "# TO-DO: determine if stop words should be removed", "\n", "# tokens = [w for w in tokens if not w in stop_words]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.atoi": [[57, 59], ["text.isdigit", "int"], "function", ["None"], ["", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.natural_keys": [[61, 68], ["utils.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clamp_array": [[70, 72], ["numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "def", "clamp_array", "(", "array", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "return", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "min_value", ",", "array", ")", ",", "max_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.paint_box": [[74, 85], ["ctx.set_source_rgb", "ctx.set_line_width", "ctx.rectangle", "ctx.stroke"], "function", ["None"], ["", "def", "paint_box", "(", "ctx", ",", "color", ",", "box", ")", ":", "\n", "# bounding box representation: xyxy to xywh", "\n", "# box is not normalized", "\n", "    ", "x", "=", "box", "[", "0", "]", ";", "y", "=", "box", "[", "1", "]", "\n", "w", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", "\n", "h", "=", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", "\n", "\n", "ctx", ".", "set_source_rgb", "(", "color", "[", "0", "]", "/", "255.0", ",", "color", "[", "1", "]", "/", "255.0", ",", "color", "[", "2", "]", "/", "255.0", ")", "\n", "ctx", ".", "set_line_width", "(", "6", ")", "\n", "ctx", ".", "rectangle", "(", "x", ",", "y", ",", "w", ",", "h", ")", "\n", "ctx", ".", "stroke", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.paint_txt": [[90, 107], ["ctx.set_source_rgb", "cairo.FontOptions", "cairo.FontOptions.set_antialias", "ctx.set_font_options", "ctx.select_font_face", "ctx.set_font_size", "ctx.move_to", "ctx.show_text"], "function", ["None"], ["", "def", "paint_txt", "(", "ctx", ",", "txt", ",", "box", ")", ":", "\n", "# Color", "\n", "    ", "ctx", ".", "set_source_rgb", "(", "0", ",", "0", ",", "0", ")", "\n", "# Font", "\n", "font_option", "=", "cairo", ".", "FontOptions", "(", ")", "\n", "font_option", ".", "set_antialias", "(", "cairo", ".", "Antialias", ".", "SUBPIXEL", ")", "\n", "ctx", ".", "set_font_options", "(", "font_option", ")", "\n", "ctx", ".", "select_font_face", "(", "\"Purisa\"", ",", "cairo", ".", "FONT_SLANT_ITALIC", ",", "cairo", ".", "FONT_WEIGHT_BOLD", ")", "\n", "ctx", ".", "set_font_size", "(", "20", ")", "\n", "# ctx.set_operator(cairo.OPERATOR_ADD)", "\n", "# Position", "\n", "x", "=", "box", "[", "0", "]", ";", "y", "=", "box", "[", "1", "]", "+", "50", "\n", "# w = box[2] - box[0] + 1", "\n", "# h = box[3] - box[1] + 1", "\n", "\n", "ctx", ".", "move_to", "(", "x", ",", "y", ")", "\n", "ctx", ".", "show_text", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image": [[109, 129], ["numpy.maximum", "numpy.array", "np.array.reshape", "numpy.ones", "output_img.astype"], "function", ["None"], ["", "def", "create_squared_image", "(", "img", ",", "pad_value", "=", "None", ")", ":", "\n", "# If pad value is not provided", "\n", "    ", "if", "pad_value", "is", "None", ":", "\n", "        ", "pad_value", "=", "np", ".", "array", "(", "[", "103.53", ",", "116.28", ",", "123.675", "]", ")", "\n", "\n", "", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "# largest length", "\n", "max_dim", "=", "np", ".", "maximum", "(", "width", ",", "height", ")", "\n", "# anchored at the left-bottom position", "\n", "offset_x", "=", "0", "#int(0.5 * (max_dim - width))", "\n", "offset_y", "=", "max_dim", "-", "height", "#int(0.5 * (max_dim - height))", "\n", "\n", "output_img", "=", "pad_value", ".", "reshape", "(", "1", ",", "1", ",", "img", ".", "shape", "[", "-", "1", "]", ")", "*", "np", ".", "ones", "(", "(", "max_dim", ",", "max_dim", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "output_img", "[", "offset_y", ":", "offset_y", "+", "height", ",", "offset_x", ":", "offset_x", "+", "width", ",", ":", "]", "=", "img", "\n", "\n", "return", "output_img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "offset_x", ",", "offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_colormap": [[131, 137], ["numpy.arange", "matplotlib.Normalize", "matplotlib.cm.jet", "plt.Normalize."], "function", ["None"], ["", "def", "create_colormap", "(", "num_colors", ")", ":", "\n", "# JET colorbar", "\n", "    ", "dz", "=", "np", ".", "arange", "(", "1", ",", "num_colors", "+", "1", ")", "\n", "norm", "=", "plt", ".", "Normalize", "(", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "jet", "(", "norm", "(", "dz", ")", ")", "\n", "return", "colors", "[", ":", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.pickle_load": [[143, 147], ["open", "pickle.load"], "function", ["None"], ["", "def", "pickle_load", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "data_", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "data_", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.pickle_save": [[149, 152], ["open", "pickle.dump"], "function", ["None"], ["", "def", "pickle_save", "(", "path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'wb'", ")", "as", "fid", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.json_load": [[154, 158], ["open", "json.load"], "function", ["None"], ["", "", "def", "json_load", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "data_", "=", "json", ".", "load", "(", "fid", ")", "\n", "", "return", "data_", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.json_save": [[160, 163], ["open", "json.dump"], "function", ["None"], ["", "def", "json_save", "(", "path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "fid", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.pad_sequence": [[165, 197], ["range", "numpy.array", "numpy.array().astype", "len", "len", "isinstance", "isinstance", "np.array().astype.append", "isinstance", "np.array().astype.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "eos_val.copy", "pad_val.copy", "sos_val.copy"], "function", ["None"], ["", "", "def", "pad_sequence", "(", "inputs", ",", "max_length", ",", "pad_val", ",", "sos_val", "=", "None", ",", "eos_val", "=", "None", ",", "eos_msk", "=", "None", ")", ":", "\n", "# cut the input sequence off if necessary", "\n", "    ", "seq", "=", "inputs", "[", ":", "max_length", "]", "\n", "# mask for valid input items", "\n", "msk", "=", "[", "1.0", "]", "*", "len", "(", "seq", ")", "\n", "# if the length of the inputs is shorter than max_length, pad it with special items provided", "\n", "num_padding", "=", "max_length", "-", "len", "(", "seq", ")", "\n", "# pad SOS", "\n", "if", "sos_val", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "sos_val", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "seq", "=", "[", "sos_val", ".", "copy", "(", ")", "]", "+", "seq", "\n", "", "else", ":", "\n", "            ", "seq", "=", "[", "sos_val", "]", "+", "seq", "\n", "", "msk", "=", "[", "1.0", "]", "+", "msk", "\n", "# pad EOS", "\n", "", "if", "eos_val", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "eos_val", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "seq", ".", "append", "(", "eos_val", ".", "copy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "seq", ".", "append", "(", "eos_val", ")", "\n", "", "msk", ".", "append", "(", "eos_msk", ")", "\n", "# pad the sequence if necessary", "\n", "", "for", "i", "in", "range", "(", "num_padding", ")", ":", "\n", "        ", "if", "isinstance", "(", "pad_val", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "seq", ".", "append", "(", "pad_val", ".", "copy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "seq", ".", "append", "(", "pad_val", ")", "\n", "", "msk", ".", "append", "(", "0.0", ")", "\n", "# the outputs are float arrays", "\n", "", "seq", "=", "np", ".", "array", "(", "seq", ")", "\n", "msk", "=", "np", ".", "array", "(", "msk", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "seq", ",", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.get_n_params": [[199, 207], ["list", "model.parameters", "list", "p.size"], "function", ["None"], ["", "def", "get_n_params", "(", "model", ")", ":", "\n", "    ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.indices2onehots": [[209, 215], ["indices.size", "indices.view", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float.scatter_", "torch.zeros().float.float", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "indices2onehots", "(", "indices", ",", "out_dim", ")", ":", "\n", "    ", "bsize", ",", "slen", "=", "indices", ".", "size", "(", ")", "\n", "inds", "=", "indices", ".", "view", "(", "bsize", ",", "slen", ",", "1", ")", "\n", "onehots", "=", "torch", ".", "zeros", "(", "bsize", ",", "slen", ",", "out_dim", ")", ".", "float", "(", ")", "\n", "onehots", ".", "scatter_", "(", "-", "1", ",", "inds", ",", "1.0", ")", "\n", "return", "onehots", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.normalize_image": [[217, 231], ["img_np[].copy", "img_np.transpose.transpose", "numpy.array().reshape", "numpy.array().reshape", "input_img.astype", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "normalize_image", "(", "input_img", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "if", "(", "mean", "is", "None", ")", "or", "(", "std", "is", "None", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "# [0, 255] --> [0, 1]", "\n", "", "img_np", "=", "input_img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "# BGR --> RGB", "\n", "img_np", "=", "img_np", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "# Normalize", "\n", "img_np", "=", "(", "img_np", "-", "mean", ")", "/", "std", "\n", "# H x W x C --> C x H x W", "\n", "img_np", "=", "img_np", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "img_np", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.unnormalize_image": [[233, 251], ["input_img.transpose", "img_np[].copy", "numpy.maximum", "numpy.minimum", "img_np.astype.astype", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "unnormalize_image", "(", "input_img", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "if", "(", "mean", "is", "None", ")", "or", "(", "std", "is", "None", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "\n", "# C x H x W --> H x W x C", "\n", "", "img_np", "=", "input_img", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# Unnormalize", "\n", "img_np", "=", "img_np", "*", "std", "+", "mean", "\n", "# RGB --> BGR", "\n", "img_np", "=", "img_np", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "# [0, 1] --> [0, 255]", "\n", "img_np", "=", "(", "255.0", "*", "img_np", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "np", ".", "maximum", "(", "0", ",", "img_np", ")", "\n", "img_np", "=", "np", ".", "minimum", "(", "255", ",", "img_np", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "img_np", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm": [[253, 259], ["torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.div", "torch.div", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "l2norm", "(", "X", ")", ":", "\n", "    ", "\"\"\"L2-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "torch", ".", "pow", "(", "X", ",", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "X", "=", "torch", ".", "div", "(", "X", ",", "norm", "+", "1e-10", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l1norm": [[261, 267], ["torch.abs().sum", "torch.abs().sum", "torch.div", "torch.div", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "l1norm", "(", "X", ")", ":", "\n", "    ", "\"\"\"L1-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "torch", ".", "abs", "(", "X", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "X", "=", "torch", ".", "div", "(", "torch", ".", "abs", "(", "X", ")", ",", "norm", "+", "1e-10", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.reduce_similarities": [[269, 275], ["torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "reduce_similarities", "(", "sims", ",", "msks", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'max'", ":", "\n", "        ", "sims", "=", "torch", ".", "max", "(", "sims", "*", "msks", ",", "-", "1", ")", "[", "0", "]", "\n", "", "elif", "mode", "==", "'mean'", ":", "\n", "        ", "sims", "=", "torch", ".", "sum", "(", "sims", "*", "msks", ",", "-", "1", ")", "/", "(", "torch", ".", "sum", "(", "msks", ",", "-", "1", ")", ")", "\n", "", "return", "sims", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.cosine_sim": [[277, 281], ["im.mm", "s.t"], "function", ["None"], ["", "def", "cosine_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Cosine similarity between all the image and sentence pairs\n    \"\"\"", "\n", "return", "im", ".", "mm", "(", "s", ".", "t", "(", ")", ")", "# (batch_size, batch_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.normalize_xywh": [[283, 295], ["max", "numpy.array"], "function", ["None"], ["", "def", "normalize_xywh", "(", "xywh", ",", "width", ",", "height", ")", ":", "\n", "    ", "max_dim", "=", "max", "(", "width", ",", "height", ")", "\n", "\n", "# move the bounding box to the left bottom position", "\n", "offset_x", "=", "0", "# int(0.5 * (max_dim - width))", "\n", "offset_y", "=", "max_dim", "-", "height", "# int(0.5 * (max_dim - height))", "\n", "cx", ",", "cy", ",", "nw", ",", "nh", "=", "xywh", "\n", "cx", "+=", "offset_x", ";", "cy", "+=", "offset_y", "\n", "\n", "# normalize the bounding box", "\n", "normalized_xywh", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", ",", "nw", ",", "nh", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "max_dim", "\n", "return", "normalized_xywh", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.normalize_xywhs": [[297, 310], ["max", "xywhs.copy", "float"], "function", ["None"], ["", "def", "normalize_xywhs", "(", "xywhs", ",", "width", ",", "height", ")", ":", "\n", "    ", "max_dim", "=", "max", "(", "width", ",", "height", ")", "\n", "\n", "# move the bounding boxes to the left bottom position", "\n", "offset_x", "=", "0", "# int(0.5 * (max_dim - width))", "\n", "offset_y", "=", "max_dim", "-", "height", "# int(0.5 * (max_dim - height))", "\n", "normalized_xywhs", "=", "xywhs", ".", "copy", "(", ")", "\n", "normalized_xywhs", "[", ":", ",", "0", "]", "=", "normalized_xywhs", "[", ":", ",", "0", "]", "+", "offset_x", "\n", "normalized_xywhs", "[", ":", ",", "1", "]", "=", "normalized_xywhs", "[", ":", ",", "1", "]", "+", "offset_y", "\n", "\n", "# normalize the bounding boxes", "\n", "normalized_xywhs", "=", "normalized_xywhs", "/", "float", "(", "max_dim", ")", "\n", "return", "normalized_xywhs", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clip_xyxy": [[312, 318], ["max", "max", "min", "min", "box.astype"], "function", ["None"], ["", "def", "clip_xyxy", "(", "box", ",", "width", ",", "height", ")", ":", "\n", "    ", "box", "[", "0", "]", "=", "max", "(", "0", ",", "box", "[", "0", "]", ")", "\n", "box", "[", "1", "]", "=", "max", "(", "0", ",", "box", "[", "1", "]", ")", "\n", "box", "[", "2", "]", "=", "min", "(", "box", "[", "2", "]", ",", "width", "-", "1", ")", "\n", "box", "[", "3", "]", "=", "min", "(", "box", "[", "3", "]", ",", "height", "-", "1", ")", "\n", "return", "box", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clip_xyxys": [[320, 326], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "boxes.astype"], "function", ["None"], ["", "def", "clip_xyxys", "(", "boxes", ",", "width", ",", "height", ")", ":", "\n", "    ", "boxes", "[", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "0", ")", "\n", "boxes", "[", ":", ",", "1", "]", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "0", ")", "\n", "boxes", "[", ":", ",", "2", "]", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "width", "-", "1", ")", "\n", "boxes", "[", ":", ",", "3", "]", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "height", "-", "1", ")", "\n", "return", "boxes", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xywh_to_xyxy": [[328, 340], ["numpy.array", "utils.clip_xyxy"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clip_xyxy"], ["", "def", "xywh_to_xyxy", "(", "box", ",", "width", ",", "height", ")", ":", "\n", "    ", "x", "=", "box", "[", "0", "]", ";", "y", "=", "box", "[", "1", "]", "\n", "w", "=", "box", "[", "2", "]", ";", "h", "=", "box", "[", "3", "]", "\n", "\n", "xmin", "=", "x", "-", "0.5", "*", "w", "+", "1", "\n", "xmax", "=", "x", "+", "0.5", "*", "w", "\n", "ymin", "=", "y", "-", "0.5", "*", "h", "+", "1", "\n", "ymax", "=", "y", "+", "0.5", "*", "h", "\n", "\n", "xyxy", "=", "np", ".", "array", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "\n", "return", "clip_xyxy", "(", "xyxy", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xywhs_to_xyxys": [[342, 353], ["numpy.vstack().transpose", "utils.clip_xyxys", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clip_xyxys"], ["", "def", "xywhs_to_xyxys", "(", "boxes", ",", "width", ",", "height", ")", ":", "\n", "    ", "x", "=", "boxes", "[", ":", ",", "0", "]", ";", "y", "=", "boxes", "[", ":", ",", "1", "]", "\n", "w", "=", "boxes", "[", ":", ",", "2", "]", ";", "h", "=", "boxes", "[", ":", ",", "3", "]", "\n", "\n", "xmin", "=", "x", "-", "0.5", "*", "w", "+", "1.0", "\n", "xmax", "=", "x", "+", "0.5", "*", "w", "\n", "ymin", "=", "y", "-", "0.5", "*", "h", "+", "1.0", "\n", "ymax", "=", "y", "+", "0.5", "*", "h", "\n", "xyxy", "=", "np", ".", "vstack", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "return", "clip_xyxys", "(", "xyxy", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.normalized_xywhs_to_xyxys": [[355, 371], ["numpy.vstack().transpose", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.vstack"], "function", ["None"], ["", "def", "normalized_xywhs_to_xyxys", "(", "boxes", ")", ":", "\n", "    ", "x", "=", "boxes", "[", ":", ",", "0", "]", ";", "y", "=", "boxes", "[", ":", ",", "1", "]", "\n", "w", "=", "boxes", "[", ":", ",", "2", "]", ";", "h", "=", "boxes", "[", ":", ",", "3", "]", "\n", "\n", "xmin", "=", "x", "-", "0.5", "*", "w", "\n", "xmax", "=", "x", "+", "0.5", "*", "w", "\n", "ymin", "=", "y", "-", "0.5", "*", "h", "\n", "ymax", "=", "y", "+", "0.5", "*", "h", "\n", "xyxy", "=", "np", ".", "vstack", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "xyxy", "[", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "xyxy", "[", ":", ",", "0", "]", ",", "0.0", ")", "\n", "xyxy", "[", ":", ",", "1", "]", "=", "np", ".", "maximum", "(", "xyxy", "[", ":", ",", "1", "]", ",", "0.0", ")", "\n", "xyxy", "[", ":", ",", "2", "]", "=", "np", ".", "minimum", "(", "xyxy", "[", ":", ",", "2", "]", ",", "1.0", ")", "\n", "xyxy", "[", ":", ",", "3", "]", "=", "np", ".", "minimum", "(", "xyxy", "[", ":", ",", "3", "]", ",", "1.0", ")", "\n", "\n", "return", "xyxy", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xyxy_to_xywh": [[373, 381], ["numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "box", ")", ":", "\n", "\n", "    ", "x", "=", "0.5", "*", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", ")", "\n", "y", "=", "0.5", "*", "(", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "\n", "w", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1.0", "\n", "h", "=", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1.0", "\n", "\n", "return", "np", ".", "array", "(", "[", "x", ",", "y", ",", "w", ",", "h", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xyxys_to_xywhs": [[383, 391], ["numpy.vstack().transpose", "numpy.vstack"], "function", ["None"], ["", "def", "xyxys_to_xywhs", "(", "boxes", ")", ":", "\n", "\n", "    ", "x", "=", "0.5", "*", "(", "boxes", "[", ":", ",", "0", "]", "+", "boxes", "[", ":", ",", "2", "]", ")", "\n", "y", "=", "0.5", "*", "(", "boxes", "[", ":", ",", "1", "]", "+", "boxes", "[", ":", ",", "3", "]", ")", "\n", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "\n", "return", "np", ".", "vstack", "(", "(", "x", ",", "y", ",", "w", ",", "h", ")", ")", ".", "transpose", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.vocab.Vocabulary.__init__": [[14, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.vocab.Vocabulary.add_word": [[19, 24], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.vocab.Vocabulary.__call__": [[25, 29], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.vocab.Vocabulary.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.__init__": [[20, 43], ["os.join", "os.join", "os.abspath", "os.abspath", "vg.vg.load_classes", "vg.vg.load_attributes", "vg.vg.load_relations", "vg.vg.load_scenedb", "vg.vg.filter_scenedb", "os.join", "os.join", "open", "pickle.load", "vg.vg.load_split", "os.join", "os.join", "sorted", "list", "vg.vg.keys"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_classes", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_attributes", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_relations", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_scenedb", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.filter_scenedb", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_split"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "split", "=", "None", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "config", "\n", "self", ".", "name", "=", "'vg'", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "root_dir", "=", "osp", ".", "join", "(", "config", ".", "data_dir", ",", "'vg'", ")", "\n", "self", ".", "cache_dir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "config", ".", "data_dir", ",", "'caches'", ")", ")", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_vocab_14284.pkl'", ")", ",", "'rb'", ")", "as", "fid", ":", "\n", "            ", "self", ".", "lang_vocab", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "\n", "", "self", ".", "load_classes", "(", ")", "\n", "self", ".", "load_attributes", "(", ")", "\n", "self", ".", "load_relations", "(", ")", "\n", "scenedb", "=", "self", ".", "load_scenedb", "(", ")", "\n", "scenedb", "=", "self", ".", "filter_scenedb", "(", "scenedb", ")", "\n", "if", "self", ".", "split", "is", "not", "None", ":", "\n", "            ", "split_inds", "=", "self", ".", "load_split", "(", "scenedb", ",", "self", ".", "split", ")", "\n", "current_split", "=", "{", "}", "\n", "for", "x", "in", "split_inds", ":", "\n", "                ", "assert", "(", "x", "==", "scenedb", "[", "x", "]", "[", "'image_index'", "]", ")", "\n", "current_split", "[", "x", "]", "=", "scenedb", "[", "x", "]", "\n", "", "scenedb", "=", "current_split", "\n", "", "self", ".", "scenedb", "=", "[", "scenedb", "[", "x", "]", "for", "x", "in", "sorted", "(", "list", "(", "scenedb", ".", "keys", "(", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.filter_duplicate_regions": [[44, 55], ["x[].lower().encode().decode", "filtered_regions.append", "captions.get", "x[].lower().encode", "x[].lower"], "methods", ["None"], ["", "def", "filter_duplicate_regions", "(", "self", ",", "regions", ")", ":", "\n", "        ", "captions", "=", "{", "}", "\n", "filtered_regions", "=", "[", "]", "\n", "for", "x", "in", "regions", ":", "\n", "            ", "c", "=", "x", "[", "'phrase'", "]", ".", "lower", "(", ")", ".", "encode", "(", "'utf-8'", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "captions", ".", "get", "(", "c", ",", "None", ")", "is", "not", "None", ":", "\n", "# ignore if the exact caption has appeared before", "\n", "                ", "continue", "\n", "", "captions", "[", "c", "]", "=", "1", "\n", "filtered_regions", ".", "append", "(", "x", ")", "\n", "", "return", "filtered_regions", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.filter_scenedb": [[56, 66], ["len", "scenedb.items", "len", "print", "len", "len"], "methods", ["None"], ["", "def", "filter_scenedb", "(", "self", ",", "scenedb", ")", ":", "\n", "        ", "filtered_scenedb", "=", "{", "}", "\n", "num", "=", "len", "(", "scenedb", ")", "\n", "for", "k", ",", "scene", "in", "scenedb", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "scene", "[", "'regions'", "]", ")", ">=", "self", ".", "cfg", ".", "max_turns", "and", "len", "(", "scene", "[", "'objects'", "]", ")", ">", "0", ":", "\n", "# only consider images with at least #max_turns region annotations", "\n", "                ", "filtered_scenedb", "[", "k", "]", "=", "scene", "\n", "", "", "num_after", "=", "len", "(", "filtered_scenedb", ")", "\n", "print", "(", "'Filtered {} scenedb entries: {} -> {} '", ".", "format", "(", "num", "-", "num_after", ",", "num", ",", "num_after", ")", ")", "\n", "return", "filtered_scenedb", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_classes": [[67, 79], ["open", "f.readlines", "os.join", "os.join", "x.lower().strip", "obj_alias.split", "x.lower"], "methods", ["None"], ["", "def", "load_classes", "(", "self", ")", ":", "\n", "        ", "self", ".", "classes", "=", "{", "0", ":", "'__background__'", "}", "# each entry contains a list of names, except the '__background__' one", "\n", "self", ".", "class_to_ind", "=", "{", "}", "\n", "self", ".", "class_to_ind", "[", "'__background__'", "]", "=", "0", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_objects_vocab_1600.txt'", ")", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "obj_alias", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "x", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "x", "in", "obj_alias", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "classes", "[", "count", "]", "=", "names", "\n", "for", "x", "in", "names", ":", "\n", "                    ", "self", ".", "class_to_ind", "[", "x", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_attributes": [[80, 92], ["open", "f.readlines", "os.join", "os.join", "x.lower().strip", "att.split", "x.lower"], "methods", ["None"], ["", "", "", "def", "load_attributes", "(", "self", ")", ":", "\n", "        ", "self", ".", "attributes", "=", "{", "0", ":", "'__no_attribute__'", "}", "# each entry contains a list of names, except the '__no_attribute__' one", "\n", "self", ".", "attribute_to_ind", "=", "{", "}", "\n", "self", ".", "attribute_to_ind", "[", "'__no_attribute__'", "]", "=", "0", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_attributes_vocab_1000.txt'", ")", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "att", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "x", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "x", "in", "att", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "attributes", "[", "count", "]", "=", "names", "\n", "for", "x", "in", "names", ":", "\n", "                    ", "self", ".", "attribute_to_ind", "[", "x", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_relations": [[93, 105], ["open", "f.readlines", "os.join", "os.join", "x.lower().strip", "rel.split", "x.lower"], "methods", ["None"], ["", "", "", "def", "load_relations", "(", "self", ")", ":", "\n", "        ", "self", ".", "relations", "=", "{", "0", ":", "'__no_relation__'", "}", "# each entry contains a list of names, except the '__no_relation__' one", "\n", "self", ".", "relation_to_ind", "=", "{", "}", "\n", "self", ".", "relation_to_ind", "[", "'__no_relation__'", "]", "=", "0", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_relations_vocab_500.txt'", ")", ")", "as", "f", ":", "\n", "            ", "count", "=", "1", "\n", "for", "rel", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "names", "=", "[", "x", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "x", "in", "rel", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "relations", "[", "count", "]", "=", "names", "\n", "for", "x", "in", "names", ":", "\n", "                    ", "self", ".", "relation_to_ind", "[", "x", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_scenedb": [[106, 130], ["os.join", "os.join", "os.exists", "os.exists", "pickle.load.items", "print", "sorted", "print", "open", "pickle.load", "glob.glob.glob", "int", "vg.vg.load_sg_annotation", "vg.vg.sample_negative_objects", "open", "pickle.dump", "int", "os.splitext", "os.splitext", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_sg_annotation", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.sample_negative_objects"], ["", "", "", "def", "load_scenedb", "(", "self", ")", ":", "\n", "        ", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_scenedb.pkl'", ")", "\n", "scenedb", "=", "{", "}", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "data_", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "for", "k", ",", "v", "in", "data_", ".", "items", "(", ")", ":", "\n", "                ", "scenedb", "[", "int", "(", "k", ")", "]", "=", "v", "\n", "", "print", "(", "'scenedb loaded from {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "sg_xml_paths", "=", "sorted", "(", "glob", "(", "\"%s/sg_xmls/*.xml\"", "%", "self", ".", "root_dir", ")", ")", "\n", "for", "x", "in", "sg_xml_paths", ":", "\n", "                ", "image_index", "=", "int", "(", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "\n", "sg", "=", "self", ".", "load_sg_annotation", "(", "image_index", ")", "\n", "scenedb", "[", "image_index", "]", "=", "sg", "\n", "# sample negations", "\n", "# experiments on negation, can ignore", "\n", "# keep it here for now in case removing it will mess up other parts of the codes (e.g. dataloader)", "\n", "", "if", "self", ".", "cfg", ".", "negation", ">", "0", ":", "\n", "                ", "scenedb", "=", "self", ".", "sample_negative_objects", "(", "scenedb", ",", "self", ".", "cfg", ".", "max_turns", "//", "2", "+", "1", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "                ", "pickle", ".", "dump", "(", "scenedb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote scenedb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "", "return", "scenedb", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.sample_negative_objects": [[131, 146], ["scenedb.items", "copy.deepcopy", "sorted", "len", "negative_scene[].items", "list", "v[].items", "numpy.random.permutation", "scenedb.keys", "range", "positive_names.append", "copy.deepcopy", "len"], "methods", ["None"], ["", "def", "sample_negative_objects", "(", "self", ",", "scenedb", ",", "K", ")", ":", "\n", "        ", "tmpdb", "=", "[", "deepcopy", "(", "scenedb", "[", "x", "]", ")", "for", "x", "in", "sorted", "(", "list", "(", "scenedb", ".", "keys", "(", ")", ")", ")", "]", "\n", "for", "k", ",", "v", "in", "scenedb", ".", "items", "(", ")", ":", "\n", "            ", "negative_objects", "=", "{", "}", "\n", "positive_names", "=", "[", "o", "[", "'name'", "]", "for", "_", ",", "o", "in", "v", "[", "'objects'", "]", ".", "items", "(", ")", "]", "\n", "while", "len", "(", "negative_objects", ")", "<", "K", ":", "\n", "                ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "tmpdb", ")", ")", ")", "[", "0", "]", "\n", "negative_scene", "=", "tmpdb", "[", "rand_id", "]", "\n", "for", "obj_id", ",", "obj", "in", "negative_scene", "[", "'objects'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "(", "obj", "[", "'name'", "]", "in", "positive_names", ")", ":", "\n", "                        ", "positive_names", ".", "append", "(", "obj", "[", "'name'", "]", ")", "\n", "negative_objects", "[", "obj_id", "]", "=", "deepcopy", "(", "obj", ")", "\n", "# print('sample negative:', k)", "\n", "", "", "", "v", "[", "'negative_objects'", "]", "=", "negative_objects", "\n", "", "return", "scenedb", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_sg_annotation": [[147, 251], ["os.join", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.iter", "xml.parse.findall", "xml.parse.findall", "range", "range", "os.join", "os.join", "json_load", "vg.vg.filter_duplicate_regions", "regions.items", "len", "xml_obj.find().text.lower().strip", "len", "max", "max", "min", "min", "xml_obj.find", "max", "max", "min", "min", "int", "xml_obj.findall", "xml_rel.find", "pred.lower().strip.lower().strip.lower().strip", "current_region[].lower().encode().decode", "int", "int", "xml_obj.find().text.lower", "float", "float", "float", "float", "att.text.lower().strip.text.lower().strip.text.lower().strip", "str", "int", "int", "int", "int", "[].append", "[].append", "int", "xml_obj.find", "obj_atts.append", "pred.lower().strip.lower().strip.lower", "current_region[].lower().encode", "xml_obj.find.find", "xml_obj.find.find", "xml_obj.find.find", "xml_obj.find.find", "att.text.lower().strip.text.lower().strip.text.lower", "xml_rel.find", "xml_rel.find", "xml_rel.find", "xml_obj.find", "current_region[].lower"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.json_load", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.filter_duplicate_regions"], ["", "def", "load_sg_annotation", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'sg_xmls'", ",", "'%d.xml'", "%", "image_index", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "for", "elem", "in", "root", ".", "iter", "(", ")", ":", "\n", "            ", "if", "elem", ".", "tag", "==", "'image_id'", ":", "\n", "                ", "assert", "(", "int", "(", "elem", ".", "text", ")", "==", "image_index", ")", "\n", "", "elif", "elem", ".", "tag", "==", "'width'", ":", "\n", "                ", "width", "=", "int", "(", "elem", ".", "text", ")", "\n", "", "elif", "elem", ".", "tag", "==", "'height'", ":", "\n", "                ", "height", "=", "int", "(", "elem", ".", "text", ")", "\n", "", "", "xml_objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "xml_rels", "=", "tree", ".", "findall", "(", "'relation'", ")", "\n", "\n", "obj_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "xml_objs", ")", ")", ":", "\n", "            ", "xml_obj", "=", "xml_objs", "[", "i", "]", "\n", "obj_name", "=", "xml_obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "class_to_ind", ":", "\n", "                ", "bbox", "=", "xml_obj", ".", "find", "(", "'bndbox'", ")", "\n", "x1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ")", "\n", "x2", "=", "min", "(", "width", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ")", "\n", "y2", "=", "min", "(", "height", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", ")", "\n", "if", "x1", ">", "x2", "or", "y1", ">", "y2", ":", "\n", "                    ", "continue", "\n", "", "obj_idx", "=", "int", "(", "xml_obj", ".", "find", "(", "'object_id'", ")", ".", "text", ")", "\n", "xml_atts", "=", "xml_obj", ".", "findall", "(", "'attribute'", ")", "\n", "obj_atts", "=", "[", "]", "\n", "for", "att", "in", "xml_atts", ":", "\n", "                    ", "att", "=", "att", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "att", "in", "self", ".", "attribute_to_ind", ":", "\n", "                        ", "obj_atts", ".", "append", "(", "att", ")", "\n", "", "", "obj_dict", "[", "obj_idx", "]", "=", "{", "\n", "'name'", ":", "str", "(", "obj_name", ")", ",", "\n", "'idx'", ":", "obj_idx", ",", "\n", "'xyxy'", ":", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "\n", "'atts'", ":", "obj_atts", ",", "\n", "'regions'", ":", "[", "]", "\n", "}", "\n", "\n", "", "", "rel_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "xml_rels", ")", ")", ":", "\n", "            ", "xml_rel", "=", "xml_rels", "[", "i", "]", "\n", "pred", "=", "xml_rel", ".", "find", "(", "'predicate'", ")", ".", "text", "\n", "if", "pred", ":", "\n", "                ", "pred", "=", "pred", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "pred", "in", "self", ".", "relation_to_ind", ":", "\n", "                    ", "rel_id", "=", "int", "(", "xml_rel", ".", "find", "(", "'relationship_id'", ")", ".", "text", ")", "\n", "subject_id", "=", "int", "(", "xml_rel", ".", "find", "(", "'subject_id'", ")", ".", "text", ")", "\n", "object_id", "=", "int", "(", "xml_rel", ".", "find", "(", "'object_id'", ")", ".", "text", ")", "\n", "if", "(", "subject_id", "in", "obj_dict", ")", "and", "(", "object_id", "in", "obj_dict", ")", ":", "\n", "                        ", "rel_dict", "[", "rel_id", "]", "=", "{", "\n", "'subject_id'", ":", "subject_id", ",", "\n", "'object_id'", ":", "object_id", ",", "\n", "'predicate'", ":", "pred", ",", "\n", "'regions'", ":", "[", "]", "\n", "}", "\n", "\n", "", "", "", "", "rg_path", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'rg_jsons'", ",", "'%d.json'", "%", "image_index", ")", "\n", "region_data", "=", "json_load", "(", "rg_path", ")", "\n", "regions", "=", "{", "}", "\n", "for", "r", "in", "self", ".", "filter_duplicate_regions", "(", "region_data", "[", "'regions'", "]", ")", ":", "\n", "            ", "regions", "[", "int", "(", "r", "[", "'region_id'", "]", ")", "]", "=", "r", "\n", "", "meta_regions", "=", "{", "}", "\n", "for", "k", ",", "current_region", "in", "regions", ".", "items", "(", ")", ":", "\n", "            ", "x1", "=", "max", "(", "current_region", "[", "'x'", "]", ",", "0", ")", "\n", "y1", "=", "max", "(", "current_region", "[", "'y'", "]", ",", "0", ")", "\n", "x2", "=", "min", "(", "width", "-", "1", ",", "x1", "+", "current_region", "[", "'width'", "]", ")", "\n", "y2", "=", "min", "(", "height", "-", "1", ",", "y1", "+", "current_region", "[", "'height'", "]", ")", "\n", "meta_regions", "[", "k", "]", "=", "{", "\n", "'index'", ":", "k", ",", "\n", "'xyxy'", ":", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "\n", "'caption'", ":", "current_region", "[", "'phrase'", "]", ".", "lower", "(", ")", ".", "encode", "(", "'utf-8'", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "}", "\n", "\n", "# Associate regions with objects and relations", "\n", "for", "o", "in", "current_region", "[", "'objects'", "]", ":", "\n", "                ", "current_region_obj_idx", "=", "o", "[", "'object_id'", "]", "\n", "if", "current_region_obj_idx", "in", "obj_dict", ":", "\n", "                    ", "obj_dict", "[", "current_region_obj_idx", "]", "[", "'regions'", "]", ".", "append", "(", "k", ")", "\n", "", "", "for", "r", "in", "current_region", "[", "'relationships'", "]", ":", "\n", "                ", "current_region_rel_idx", "=", "r", "[", "'relationship_id'", "]", "\n", "if", "current_region_rel_idx", "in", "rel_dict", ":", "\n", "                    ", "rel_dict", "[", "current_region_rel_idx", "]", "[", "'regions'", "]", ".", "append", "(", "k", ")", "\n", "\n", "", "", "", "scene", "=", "{", "\n", "'image_index'", ":", "image_index", ",", "\n", "'width'", ":", "width", ",", "\n", "'height'", ":", "height", ",", "\n", "'objects'", ":", "obj_dict", ",", "\n", "'relations'", ":", "rel_dict", ",", "\n", "'regions'", ":", "meta_regions", "\n", "}", "\n", "# if image_index % 1000 == 0:", "\n", "#     print(image_index, width, height, len(obj_dict), len(rel_dict), len(meta_regions))", "\n", "#     obj_reg_lens = [len(v['regions']) for k, v in obj_dict.items()]", "\n", "#     rel_reg_lens = [len(v['regions']) for k, v in rel_dict.items()]", "\n", "#     if len(obj_reg_lens) > 0:", "\n", "#         print('obj_reg_lens', np.mean(obj_reg_lens))", "\n", "#     if len(rel_reg_lens) > 0:", "\n", "#         print('rel_reg_lens', np.mean(rel_reg_lens))", "\n", "#     print('------------------')", "\n", "return", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.load_split": [[252, 277], ["os.join", "os.join", "os.exists", "os.exists", "list", "set", "set", "list", "list", "numpy.random.permutation", "sorted", "sorted", "sorted", "numpy.loadtxt", "list", "set.difference", "set.intersection", "range", "os.join", "os.join", "print", "numpy.savetxt", "numpy.loadtxt", "len", "len", "sorted", "scenedb.items", "os.join", "os.join"], "methods", ["None"], ["", "def", "load_split", "(", "self", ",", "scenedb", ",", "split", ")", ":", "\n", "        ", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_%s.txt'", "%", "split", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "split_img_inds", "=", "list", "(", "np", ".", "loadtxt", "(", "cache_file", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "", "else", ":", "\n", "# As far as I remember the 'raw_test.txt' file contains images from the test set of the work:", "\n", "# \"Bottom-Up and Top-Down Attention for Image Captioning and Visual Question Answering\",", "\n", "# which were not used in Faster RCNN training", "\n", "            ", "all_image_inds", "=", "set", "(", "[", "k", "for", "k", ",", "v", "in", "scenedb", ".", "items", "(", ")", "]", ")", "\n", "test_inds", "=", "set", "(", "list", "(", "np", ".", "loadtxt", "(", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'raw_test.txt'", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "rest_inds", "=", "list", "(", "all_image_inds", ".", "difference", "(", "test_inds", ")", ")", "\n", "test_inds", "=", "list", "(", "all_image_inds", ".", "intersection", "(", "test_inds", ")", ")", "\n", "rand_ref_inds", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "rest_inds", ")", ")", ")", "\n", "train_ref_inds", "=", "rand_ref_inds", "[", ":", "-", "5000", "]", "\n", "val_ref_inds", "=", "rand_ref_inds", "[", "-", "5000", ":", "]", "\n", "image_indices", "=", "{", "}", "\n", "image_indices", "[", "'train'", "]", "=", "sorted", "(", "[", "rest_inds", "[", "x", "]", "for", "x", "in", "train_ref_inds", "]", ")", "\n", "image_indices", "[", "'val'", "]", "=", "sorted", "(", "[", "rest_inds", "[", "x", "]", "for", "x", "in", "val_ref_inds", "]", ")", "\n", "image_indices", "[", "'test'", "]", "=", "sorted", "(", "test_inds", ")", "\n", "for", "x", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "                ", "path", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'vg_%s.txt'", "%", "x", ")", "\n", "print", "(", "x", ",", "len", "(", "image_indices", "[", "x", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "path", ",", "sorted", "(", "image_indices", "[", "x", "]", ")", ",", "fmt", "=", "'%d'", ")", "\n", "", "split_img_inds", "=", "image_indices", "[", "split", "]", "\n", "", "return", "split_img_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index": [[278, 286], ["os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "str", "str", "str"], "methods", ["None"], ["", "def", "color_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_path_1", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'VG_100K'", ",", "str", "(", "index", ")", "+", "'.jpg'", ")", "\n", "image_path_2", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'VG_100K_2'", ",", "str", "(", "index", ")", "+", "'.jpg'", ")", "\n", "if", "osp", ".", "exists", "(", "image_path_1", ")", ":", "\n", "            ", "return", "image_path_1", "\n", "", "elif", "osp", ".", "exists", "(", "image_path_2", ")", ":", "\n", "            ", "return", "image_path_2", "\n", "", "assert", "osp", ".", "exists", "(", "image_path_1", ")", ",", "str", "(", "index", ")", "+", "'.jpg does not exist: {}'", ".", "format", "(", "image_path_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.field_path_from_index": [[287, 289], ["os.join", "os.join", "str"], "methods", ["None"], ["", "def", "field_path_from_index", "(", "self", ",", "index", ",", "field", ",", "ext", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "field", ",", "str", "(", "index", ")", "+", "'.'", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.resnet_path_from_index": [[290, 292], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "resnet_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'global_features'", ",", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.npy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.region_path_from_index": [[293, 295], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "region_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'region_36_final'", ",", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.npy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.render_regions_as_output": [[296, 318], ["clamp_array().astype", "cairo.ImageSurface.create_for_data", "cairo.Context", "range", "numpy.ones", "numpy.minimum", "len", "normalize_xywh", "xywh_to_xyxy", "paint_box", "imgs.append", "numpy.stack", "clamp_array", "numpy.array", "img[].copy", "numpy.array", "create_colormap"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.normalize_xywh", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xywh_to_xyxy", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.paint_box", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.clamp_array", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_colormap"], ["", "def", "render_regions_as_output", "(", "self", ",", "scene", ",", "return_sequence", "=", "True", ",", "bg", "=", "None", ")", ":", "\n", "        ", "color_palette", "=", "clamp_array", "(", "np", ".", "array", "(", "create_colormap", "(", "100", ")", ")", "*", "255", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "w", "=", "self", ".", "cfg", ".", "visu_size", "[", "1", "]", ";", "h", "=", "self", ".", "cfg", ".", "visu_size", "[", "0", "]", "\n", "img", "=", "255", "*", "np", ".", "ones", "(", "(", "h", ",", "w", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "bg", "is", "not", "None", ":", "\n", "            ", "img", "[", ":", ",", ":", ",", ":", "3", "]", "=", "np", ".", "minimum", "(", "0.5", "*", "bg", "+", "128", ",", "255", ")", "\n", "", "surface", "=", "cairo", ".", "ImageSurface", ".", "create_for_data", "(", "img", ",", "cairo", ".", "FORMAT_ARGB32", ",", "w", ",", "h", ")", "\n", "ctx", "=", "cairo", ".", "Context", "(", "surface", ")", "\n", "imgs", "=", "[", "]", "\n", "boxes", "=", "scene", "[", "'region_boxes'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "            ", "color", "=", "color_palette", "[", "i", "]", "\n", "xywh", "=", "boxes", "[", "i", "]", "\n", "xywh", "=", "normalize_xywh", "(", "xywh", ",", "scene", "[", "'width'", "]", ",", "scene", "[", "'height'", "]", ")", "\n", "xywh", "=", "xywh", "*", "np", ".", "array", "(", "[", "w", ",", "h", ",", "w", ",", "h", "]", ")", "\n", "xyxy", "=", "xywh_to_xyxy", "(", "xywh", ",", "w", ",", "h", ")", "\n", "paint_box", "(", "ctx", ",", "(", "0", ",", "255", ",", "0", ")", ",", "xyxy", ")", "\n", "imgs", ".", "append", "(", "img", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "", "if", "return_sequence", ":", "\n", "            ", "return", "np", ".", "stack", "(", "imgs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "imgs", "[", "-", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.caption_loader.__init__": [[24, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imdb", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "imdb", ".", "cfg", "\n", "self", ".", "db", "=", "imdb", "\n", "# normalizer = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.caption_loader.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "db", ".", "scenedb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.caption_loader.__getitem__": [[40, 112], ["loader.caption_loader.db.resnet_path_from_index", "torch.from_numpy().squeeze().float", "range", "tuple", "tuple", "len", "numpy.random.permutation", "tuple", "word_inds.append", "tuple.append", "torch.from_numpy().squeeze", "range", "tuple", "range", "range", "tuple", "loader.caption_loader.db.lang_vocab", "torch.Tensor", "sorted", "list", "sorted", "temps.append", "numpy.random.permutation", "isinstance", "len", "list", "sorted", "temps.append", "numpy.random.permutation", "isinstance", "len", "nltk.tokenize.word_tokenize", "torch.from_numpy", "list", "list", "range", "tuple.append", "tuple.append", "list", "range", "tuple.append", "tuple.append", "pickle_load", "scene[].keys", "negative_objects.keys", "len", "negative_objects.keys", "len", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.resnet_path_from_index", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.pickle_load"], ["", "def", "__getitem__", "(", "self", ",", "scene_index", ")", ":", "\n", "        ", "scene", "=", "self", ".", "db", ".", "scenedb", "[", "scene_index", "]", "\n", "# image", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "resnet_path", "=", "self", ".", "db", ".", "resnet_path_from_index", "(", "image_index", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "pickle_load", "(", "resnet_path", ")", ")", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "# image_path = self.db.color_path_from_index(image_index)", "\n", "# image = Image.open(image_path).convert('RGB')", "\n", "# image = self.transform(image)", "\n", "\n", "# captions", "\n", "if", "self", ".", "db", ".", "name", "==", "'coco'", ":", "\n", "            ", "all_captions", "=", "scene", "[", "'captions'", "]", "\n", "", "else", ":", "\n", "            ", "all_meta_regions", "=", "[", "scene", "[", "'regions'", "]", "[", "x", "]", "for", "x", "in", "sorted", "(", "list", "(", "scene", "[", "'regions'", "]", ".", "keys", "(", ")", ")", ")", "]", "\n", "all_captions", "=", "[", "x", "[", "'caption'", "]", "for", "x", "in", "all_meta_regions", "]", "\n", "", "if", "self", ".", "db", ".", "split", "in", "[", "'val'", ",", "'test'", "]", ":", "\n", "            ", "captions", "=", "tuple", "(", "all_captions", "[", ":", "self", ".", "cfg", ".", "max_turns", "]", ")", "\n", "if", "self", ".", "cfg", ".", "negation", ">", "0", ":", "\n", "                ", "temps", "=", "list", "(", "captions", ")", "[", ":", "(", "self", ".", "cfg", ".", "max_turns", "-", "2", "*", "self", ".", "cfg", ".", "negation", ")", "]", "\n", "negative_objects", "=", "scene", "[", "'negative_objects'", "]", "\n", "for", "x", "in", "sorted", "(", "list", "(", "negative_objects", ".", "keys", "(", ")", ")", ")", "[", ":", "self", ".", "cfg", ".", "negation", "]", ":", "\n", "                    ", "name", "=", "negative_objects", "[", "x", "]", "[", "'name'", "]", "\n", "positive_cap", "=", "positive_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "positive_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "negative_cap", "=", "negative_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "negative_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "temps", ".", "append", "(", "[", "positive_cap", ",", "negative_cap", "]", ")", "\n", "", "captions", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "                    ", "new_indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "temps", ")", ")", ")", "\n", "temps", "=", "[", "temps", "[", "y", "]", "for", "y", "in", "new_indices", "]", "\n", "if", "isinstance", "(", "temps", "[", "0", "]", ",", "list", ")", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", "[", "0", "]", ")", "\n", "temps", "[", "0", "]", "=", "temps", "[", "0", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", ")", "\n", "temps", "=", "temps", "[", "1", ":", "]", "\n", "", "", "assert", "(", "len", "(", "temps", ")", "==", "0", ")", "\n", "captions", "=", "tuple", "(", "captions", ")", "\n", "", "", "else", ":", "\n", "            ", "num_captions", "=", "len", "(", "all_captions", ")", "\n", "caption_inds", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "num_captions", ")", ")", "\n", "captions", "=", "tuple", "(", "[", "all_captions", "[", "x", "]", "for", "x", "in", "caption_inds", "[", ":", "self", ".", "cfg", ".", "max_turns", "]", "]", ")", "\n", "if", "self", ".", "cfg", ".", "negation", ">", "0", ":", "\n", "                ", "temps", "=", "list", "(", "captions", ")", "[", ":", "(", "self", ".", "cfg", ".", "max_turns", "-", "2", "*", "self", ".", "cfg", ".", "negation", ")", "]", "\n", "negative_objects", "=", "scene", "[", "'negative_objects'", "]", "\n", "for", "x", "in", "sorted", "(", "list", "(", "negative_objects", ".", "keys", "(", ")", ")", ")", "[", ":", "self", ".", "cfg", ".", "negation", "]", ":", "\n", "                    ", "name", "=", "negative_objects", "[", "x", "]", "[", "'name'", "]", "\n", "positive_cap", "=", "positive_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "positive_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "negative_cap", "=", "negative_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "negative_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "temps", ".", "append", "(", "[", "positive_cap", ",", "negative_cap", "]", ")", "\n", "", "captions", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "                    ", "new_indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "temps", ")", ")", ")", "\n", "temps", "=", "[", "temps", "[", "y", "]", "for", "y", "in", "new_indices", "]", "\n", "if", "isinstance", "(", "temps", "[", "0", "]", ",", "list", ")", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", "[", "0", "]", ")", "\n", "temps", "[", "0", "]", "=", "temps", "[", "0", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", ")", "\n", "temps", "=", "temps", "[", "1", ":", "]", "\n", "", "", "assert", "(", "len", "(", "temps", ")", "==", "0", ")", "\n", "captions", "=", "tuple", "(", "captions", ")", "\n", "\n", "", "", "sent_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "            ", "tokens", "=", "[", "w", "for", "w", "in", "word_tokenize", "(", "captions", "[", "i", "]", ")", "]", "\n", "# tokens = further_token_process(tokens)", "\n", "word_inds", "=", "[", "self", ".", "db", ".", "lang_vocab", "(", "w", ")", "for", "w", "in", "tokens", "]", "\n", "word_inds", ".", "append", "(", "self", ".", "cfg", ".", "EOS_idx", ")", "\n", "sent_inds", ".", "append", "(", "torch", ".", "Tensor", "(", "word_inds", ")", ")", "\n", "", "sent_inds", "=", "tuple", "(", "sent_inds", ")", "\n", "return", "image", ",", "sent_inds", ",", "captions", ",", "image_index", ",", "scene_index", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.region_loader.__init__": [[141, 144], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imdb", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "imdb", ".", "cfg", "\n", "self", ".", "db", "=", "imdb", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.region_loader.__len__": [[145, 147], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "db", ".", "scenedb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.region_loader.__getitem__": [[148, 229], ["loader.region_loader.db.region_path_from_index", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "tuple", "range", "tuple", "open", "pickle.load", "len", "numpy.random.permutation", "range", "word_inds.append", "tuple.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "range", "range", "len", "loader.region_loader.db.lang_vocab", "torch.Tensor", "sorted", "list", "sorted", "temps.append", "numpy.random.permutation", "isinstance", "len", "list", "sorted", "temps.append", "numpy.random.permutation", "isinstance", "len", "nltk.tokenize.word_tokenize", "list", "list", "range", "tuple.append", "tuple.append", "list", "range", "tuple.append", "tuple.append", "scene[].keys", "negative_objects.keys", "len", "negative_objects.keys", "len", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.region_path_from_index"], ["", "def", "__getitem__", "(", "self", ",", "scene_index", ")", ":", "\n", "        ", "scene", "=", "self", ".", "db", ".", "scenedb", "[", "scene_index", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "\n", "# region features", "\n", "region_path", "=", "self", ".", "db", ".", "region_path_from_index", "(", "image_index", ")", "\n", "with", "open", "(", "region_path", ",", "'rb'", ")", "as", "fid", ":", "\n", "            ", "regions", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'latin1'", ")", "\n", "", "region_boxes", "=", "torch", ".", "from_numpy", "(", "regions", "[", "'region_boxes'", "]", ")", ".", "float", "(", ")", "\n", "region_feats", "=", "torch", ".", "from_numpy", "(", "regions", "[", "'region_feats'", "]", ")", ".", "float", "(", ")", "\n", "region_clses", "=", "torch", ".", "from_numpy", "(", "regions", "[", "'region_clses'", "]", ")", ".", "long", "(", ")", "\n", "\n", "# captions", "\n", "if", "self", ".", "db", ".", "name", "==", "'coco'", ":", "\n", "            ", "all_captions", "=", "scene", "[", "'captions'", "]", "\n", "", "else", ":", "\n", "            ", "all_meta_regions", "=", "[", "scene", "[", "'regions'", "]", "[", "x", "]", "for", "x", "in", "sorted", "(", "list", "(", "scene", "[", "'regions'", "]", ".", "keys", "(", ")", ")", ")", "]", "\n", "all_captions", "=", "[", "x", "[", "'caption'", "]", "for", "x", "in", "all_meta_regions", "]", "\n", "\n", "", "width", "=", "scene", "[", "'width'", "]", ";", "height", "=", "scene", "[", "'height'", "]", "\n", "if", "self", ".", "db", ".", "split", "in", "[", "'val'", ",", "'test'", "]", ":", "\n", "            ", "captions", "=", "all_captions", "[", ":", "self", ".", "cfg", ".", "max_turns", "]", "\n", "if", "self", ".", "cfg", ".", "negation", ">", "0", ":", "\n", "                ", "temps", "=", "list", "(", "captions", ")", "[", ":", "(", "self", ".", "cfg", ".", "max_turns", "-", "2", "*", "self", ".", "cfg", ".", "negation", ")", "]", "\n", "negative_objects", "=", "scene", "[", "'negative_objects'", "]", "\n", "for", "x", "in", "sorted", "(", "list", "(", "negative_objects", ".", "keys", "(", ")", ")", ")", "[", ":", "self", ".", "cfg", ".", "negation", "]", ":", "\n", "                    ", "name", "=", "negative_objects", "[", "x", "]", "[", "'name'", "]", "\n", "positive_cap", "=", "positive_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "positive_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "negative_cap", "=", "negative_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "negative_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "temps", ".", "append", "(", "[", "positive_cap", ",", "negative_cap", "]", ")", "\n", "", "captions", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "                    ", "new_indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "temps", ")", ")", ")", "\n", "temps", "=", "[", "temps", "[", "y", "]", "for", "y", "in", "new_indices", "]", "\n", "if", "isinstance", "(", "temps", "[", "0", "]", ",", "list", ")", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", "[", "0", "]", ")", "\n", "temps", "[", "0", "]", "=", "temps", "[", "0", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", ")", "\n", "temps", "=", "temps", "[", "1", ":", "]", "\n", "", "", "assert", "(", "len", "(", "temps", ")", "==", "0", ")", "\n", "# captions = tuple(captions)", "\n", "", "", "else", ":", "\n", "            ", "num_captions", "=", "len", "(", "all_captions", ")", "\n", "caption_inds", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "num_captions", ")", ")", "\n", "captions", "=", "[", "all_captions", "[", "x", "]", "for", "x", "in", "caption_inds", "[", ":", "self", ".", "cfg", ".", "max_turns", "]", "]", "\n", "if", "self", ".", "cfg", ".", "negation", ">", "0", ":", "\n", "                ", "temps", "=", "list", "(", "captions", ")", "[", ":", "(", "self", ".", "cfg", ".", "max_turns", "-", "2", "*", "self", ".", "cfg", ".", "negation", ")", "]", "\n", "negative_objects", "=", "scene", "[", "'negative_objects'", "]", "\n", "for", "x", "in", "sorted", "(", "list", "(", "negative_objects", ".", "keys", "(", ")", ")", ")", "[", ":", "self", ".", "cfg", ".", "negation", "]", ":", "\n", "                    ", "name", "=", "negative_objects", "[", "x", "]", "[", "'name'", "]", "\n", "positive_cap", "=", "positive_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "positive_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "negative_cap", "=", "negative_object_templates", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "negative_object_templates", ")", ")", ")", "[", "0", "]", "]", "%", "name", "\n", "temps", ".", "append", "(", "[", "positive_cap", ",", "negative_cap", "]", ")", "\n", "", "captions", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "                    ", "new_indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "temps", ")", ")", ")", "\n", "temps", "=", "[", "temps", "[", "y", "]", "for", "y", "in", "new_indices", "]", "\n", "if", "isinstance", "(", "temps", "[", "0", "]", ",", "list", ")", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", "[", "0", "]", ")", "\n", "temps", "[", "0", "]", "=", "temps", "[", "0", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "captions", ".", "append", "(", "temps", "[", "0", "]", ")", "\n", "temps", "=", "temps", "[", "1", ":", "]", "\n", "", "", "assert", "(", "len", "(", "temps", ")", "==", "0", ")", "\n", "# captions = tuple(captions)", "\n", "\n", "", "", "if", "self", ".", "cfg", ".", "paragraph_model", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "captions", ")", ")", ":", "\n", "                ", "captions", "[", "i", "]", "=", "captions", "[", "i", "-", "1", "]", "+", "';'", "+", "captions", "[", "i", "]", "\n", "", "", "captions", "=", "tuple", "(", "captions", ")", "\n", "\n", "sent_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cfg", ".", "max_turns", ")", ":", "\n", "            ", "tokens", "=", "[", "w", "for", "w", "in", "word_tokenize", "(", "captions", "[", "i", "]", ")", "]", "\n", "# tokens = further_token_process(tokens)", "\n", "word_inds", "=", "[", "self", ".", "db", ".", "lang_vocab", "(", "w", ")", "for", "w", "in", "tokens", "]", "\n", "word_inds", ".", "append", "(", "self", ".", "cfg", ".", "EOS_idx", ")", "\n", "sent_inds", ".", "append", "(", "torch", ".", "Tensor", "(", "word_inds", ")", ")", "\n", "", "sent_inds", "=", "tuple", "(", "sent_inds", ")", "\n", "return", "sent_inds", ",", "captions", ",", "region_boxes", ",", "region_feats", ",", "region_clses", ",", "width", ",", "height", ",", "image_index", ",", "scene_index", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.caption_collate_fn": [[114, 138], ["zip", "torch.stack", "max", "torch.zeros().long", "torch.zeros().long", "range", "len", "len", "range", "range", "range", "torch.zeros", "torch.zeros", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "caption_collate_fn", "(", "data", ")", ":", "\n", "    ", "images", ",", "sent_inds", ",", "captions", ",", "image_indices", ",", "scene_indices", "=", "zip", "(", "*", "data", ")", "\n", "images", "=", "torch", ".", "stack", "(", "images", ",", "0", ")", "\n", "\n", "lengths", "=", "[", "len", "(", "sent_inds", "[", "i", "]", "[", "j", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", "for", "j", "in", "range", "(", "len", "(", "sent_inds", "[", "0", "]", ")", ")", "]", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "new_sent_inds", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "len", "(", "sent_inds", "[", "0", "]", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "new_sent_msks", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "len", "(", "sent_inds", "[", "0", "]", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "sent_inds", "[", "0", "]", ")", ")", ":", "\n", "            ", "end", "=", "len", "(", "sent_inds", "[", "i", "]", "[", "j", "]", ")", "\n", "new_sent_inds", "[", "i", ",", "j", ",", ":", "end", "]", "=", "sent_inds", "[", "i", "]", "[", "j", "]", "\n", "new_sent_msks", "[", "i", ",", "j", ",", ":", "end", "]", "=", "1", "\n", "\n", "", "", "entry", "=", "{", "\n", "'images'", ":", "images", ",", "\n", "'sent_inds'", ":", "new_sent_inds", ",", "\n", "'sent_msks'", ":", "new_sent_msks", ",", "\n", "'captions'", ":", "captions", ",", "\n", "'image_inds'", ":", "image_indices", ",", "\n", "'scene_inds'", ":", "scene_indices", "\n", "}", "\n", "\n", "return", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.loader.region_collate_fn": [[231, 276], ["zip", "max", "torch.zeros().float", "torch.zeros().float", "torch.zeros().long", "torch.zeros().long", "range", "max", "torch.zeros().long", "torch.zeros().long", "range", "region_boxes[].size", "len", "region_boxes[].size", "len", "len", "range", "torch.Tensor", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.zeros", "torch.zeros", "len", "len", "len", "len", "region_boxes[].size", "len", "region_feats[].size", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "region_collate_fn", "(", "data", ")", ":", "\n", "    ", "sent_inds", ",", "captions", ",", "region_boxes", ",", "region_feats", ",", "region_clses", ",", "width", ",", "height", ",", "image_indices", ",", "scene_indices", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# regions", "\n", "lengths", "=", "[", "region_boxes", "[", "i", "]", ".", "size", "(", "0", ")", "for", "i", "in", "range", "(", "len", "(", "region_boxes", ")", ")", "]", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "\n", "new_region_boxes", "=", "torch", ".", "zeros", "(", "len", "(", "region_boxes", ")", ",", "max_length", ",", "region_boxes", "[", "0", "]", ".", "size", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "new_region_feats", "=", "torch", ".", "zeros", "(", "len", "(", "region_feats", ")", ",", "max_length", ",", "region_feats", "[", "0", "]", ".", "size", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "new_region_clses", "=", "torch", ".", "zeros", "(", "len", "(", "region_clses", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "new_region_masks", "=", "torch", ".", "zeros", "(", "len", "(", "region_clses", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "region_boxes", ")", ")", ":", "\n", "        ", "end", "=", "region_boxes", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "new_region_boxes", "[", "i", ",", ":", "end", "]", "=", "region_boxes", "[", "i", "]", "\n", "new_region_feats", "[", "i", ",", ":", "end", "]", "=", "region_feats", "[", "i", "]", "\n", "new_region_clses", "[", "i", ",", ":", "end", "]", "=", "region_clses", "[", "i", "]", "\n", "new_region_masks", "[", "i", ",", ":", "end", "]", "=", "1.0", "\n", "\n", "# captions", "\n", "", "lengths", "=", "[", "len", "(", "sent_inds", "[", "i", "]", "[", "j", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", "for", "j", "in", "range", "(", "len", "(", "sent_inds", "[", "0", "]", ")", ")", "]", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "new_sent_inds", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "len", "(", "sent_inds", "[", "0", "]", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "new_sent_msks", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "len", "(", "sent_inds", "[", "0", "]", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "sent_inds", "[", "0", "]", ")", ")", ":", "\n", "            ", "end", "=", "len", "(", "sent_inds", "[", "i", "]", "[", "j", "]", ")", "\n", "new_sent_inds", "[", "i", ",", "j", ",", ":", "end", "]", "=", "sent_inds", "[", "i", "]", "[", "j", "]", "\n", "new_sent_msks", "[", "i", ",", "j", ",", ":", "end", "]", "=", "1", "\n", "\n", "", "", "entry", "=", "{", "\n", "'region_boxes'", ":", "new_region_boxes", ",", "\n", "'region_feats'", ":", "new_region_feats", ",", "\n", "'region_masks'", ":", "new_region_masks", ",", "\n", "'region_clses'", ":", "new_region_clses", ",", "\n", "'sent_inds'", ":", "new_sent_inds", ",", "\n", "'sent_msks'", ":", "new_sent_msks", ",", "\n", "'captions'", ":", "captions", ",", "\n", "'widths'", ":", "width", ",", "\n", "'heights'", ":", "height", ",", "\n", "'image_inds'", ":", "image_indices", ",", "\n", "'scene_inds'", ":", "torch", ".", "Tensor", "(", "scene_indices", ")", "\n", "}", "\n", "\n", "return", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_model.ImageModel.__init__": [[18, 30], ["torch.Module.__init__", "modules.text_encoder.TextEncoder", "modules.image_encoder.ImageEncoder", "torch.GRU", "torch.GRU", "torch.GRU", "image_model.ImageModel.init_weights", "image_model.ImageModel.txt_enc.cuda", "image_model.ImageModel.ctx_enc.cuda", "image_model.ImageModel.img_enc.cuda"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ImageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "txt_enc", "=", "TextEncoder", "(", "self", ".", "cfg", ")", "\n", "self", ".", "img_enc", "=", "ImageEncoder", "(", "self", ".", "cfg", ")", "\n", "self", ".", "ctx_enc", "=", "nn", ".", "GRU", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_rnn_layers", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "if", "config", ".", "cuda", ":", "\n", "            ", "self", ".", "txt_enc", "=", "self", ".", "txt_enc", ".", "cuda", "(", ")", "\n", "self", ".", "ctx_enc", "=", "self", ".", "ctx_enc", ".", "cuda", "(", ")", "\n", "self", ".", "img_enc", "=", "self", ".", "img_enc", ".", "cuda", "(", ")", "\n", "# if self.cfg.parallel and torch.cuda.device_count() > 1:", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_model.ImageModel.init_weights": [[34, 40], ["image_model.ImageModel.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_model.ImageModel.forward": [[41, 63], ["sent_inds.size", "image_model.ImageModel.txt_enc", "sent_feats.view.view.view", "image_model.ImageModel.img_enc", "sent_inds.view", "sent_msks.view", "image_model.ImageModel.ctx_enc", "l2norm", "l2norm"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm"], ["", "", "", "def", "forward", "(", "self", ",", "sent_inds", ",", "sent_msks", ",", "src_images", ",", "tgt_images", ")", ":", "\n", "# encoding text", "\n", "        ", "bsize", ",", "nturns", ",", "nwords", "=", "sent_inds", ".", "size", "(", ")", "\n", "_", ",", "sent_feats", ",", "_", "=", "self", ".", "txt_enc", "(", "sent_inds", ".", "view", "(", "-", "1", ",", "nwords", ")", ",", "sent_msks", ".", "view", "(", "-", "1", ",", "nwords", ")", ")", "\n", "sent_feats", "=", "sent_feats", ".", "view", "(", "bsize", ",", "nturns", ",", "-", "1", ")", "\n", "\n", "# encoding image", "\n", "img_feats", "=", "self", ".", "img_enc", "(", "tgt_images", ")", "\n", "\n", "# encoding context", "\n", "# first_hidden = img_feats.new_zeros(self.cfg.n_rnn_layers, img_feats.size(0), self.cfg.n_feature_dim, requires_grad=True)", "\n", "# txt_feats, _ = self.ctx_enc(sent_feats, first_hidden)", "\n", "if", "self", ".", "cfg", ".", "use_txt_context", ":", "\n", "            ", "txt_feats", ",", "_", "=", "self", ".", "ctx_enc", "(", "sent_feats", ")", "\n", "", "else", ":", "\n", "            ", "txt_feats", "=", "sent_feats", "\n", "\n", "", "if", "self", ".", "cfg", ".", "l2_norm", ":", "\n", "            ", "txt_feats", "=", "l2norm", "(", "txt_feats", ")", "\n", "img_feats", "=", "l2norm", "(", "img_feats", ")", "\n", "\n", "", "return", "img_feats", ",", "txt_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNNCell.__init__": [[20, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_size", ",", "hidden_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "TIRGRNNCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "l4", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "l5", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "l6", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNNCell.flatten_parameters": [[31, 33], ["None"], "methods", ["None"], ["", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNNCell.forward": [[34, 42], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tirg_rnn.TIRGRNNCell.l1", "tirg_rnn.TIRGRNNCell.l2", "tirg_rnn.TIRGRNNCell.l3", "tirg_rnn.TIRGRNNCell.l4", "tirg_rnn.TIRGRNNCell.l5", "tirg_rnn.TIRGRNNCell.l6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ")", ":", "\n", "# x: [batch, input_size]", "\n", "# h: [batch, hidden_size]", "\n", "        ", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "l1", "(", "x", ")", "+", "self", ".", "l2", "(", "h", ")", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "l3", "(", "x", ")", "+", "self", ".", "l4", "(", "h", ")", ")", "\n", "n", "=", "torch", ".", "tanh", "(", "self", ".", "l5", "(", "x", ")", "+", "r", "*", "self", ".", "l6", "(", "h", ")", ")", "\n", "new_h", "=", "(", "1.0", "-", "z", ")", "*", "n", "+", "z", "*", "h", "\n", "return", "new_h", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.__init__": [[47, 62], ["torch.Module.__init__", "range", "tirg_rnn.TIRGRNN.init_weights", "tirg_rnn.TIRGRNNCell", "setattr", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_size", ",", "hidden_size", ",", "num_layers", ",", "bias", "=", "True", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TIRGRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "input_sizes", "=", "[", "input_size", "]", "+", "[", "hidden_size", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "self", ".", "hidden_sizes", "=", "[", "hidden_size", "]", "*", "num_layers", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout_p", "=", "dropout", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "cell", "=", "TIRGRNNCell", "(", "self", ".", "cfg", ",", "self", ".", "input_sizes", "[", "i", "]", ",", "self", ".", "hidden_sizes", "[", "i", "]", ",", "bias", ")", "\n", "setattr", "(", "self", ",", "'cell%02d'", "%", "i", ",", "cell", ")", "\n", "\n", "", "if", "self", ".", "dropout_p", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.init_weights": [[63, 69], ["tirg_rnn.TIRGRNN.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.flatten_parameters": [[70, 72], ["None"], "methods", ["None"], ["", "", "", "def", "flatten_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.forward": [[73, 100], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "all_hiddens_list.append", "current_layer_input.size", "layer_output_list.append", "getattr", "tirg_rnn.TIRGRNN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_var", ",", "prev_hidden", ")", ":", "\n", "# Inputs", "\n", "#   input_var: (#batch, #sequence, #input_size)", "\n", "#   prev_hidden: (#layers, #batch, #hidden_size)", "\n", "# Outputs", "\n", "#   last_layer_hiddens: (#batch, #sequence, #hidden_size)", "\n", "#   last_step_hiddens: (#layers, #batch, #hidden_size)", "\n", "#   all_hiddens: (#layers, #batch, #sequence, #hidden_size)", "\n", "        ", "all_hiddens_list", "=", "[", "]", "\n", "current_layer_input", "=", "input_var", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer_output_list", "=", "[", "]", "\n", "h", "=", "prev_hidden", "[", "layer", "]", "\n", "for", "step", "in", "range", "(", "current_layer_input", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "x", "=", "current_layer_input", "[", ":", ",", "step", ",", ":", "]", "\n", "h", "=", "getattr", "(", "self", ",", "'cell%02d'", "%", "layer", ")", "(", "x", ",", "h", ")", "\n", "if", "self", ".", "dropout_p", ">", "0", ":", "\n", "                    ", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "", "layer_output_list", ".", "append", "(", "h", ")", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "layer_output_list", ",", "dim", "=", "1", ")", "\n", "current_layer_input", "=", "layer_output", "\n", "all_hiddens_list", ".", "append", "(", "layer_output", ")", "\n", "", "last_layer_hiddens", "=", "all_hiddens_list", "[", "-", "1", "]", "\n", "all_hiddens", "=", "torch", ".", "stack", "(", "all_hiddens_list", ",", "dim", "=", "0", ")", "\n", "last_step_hiddens", "=", "all_hiddens", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "\n", "# return last_layer_hiddens, last_step_hiddens, all_hiddens", "\n", "return", "last_layer_hiddens", ",", "last_step_hiddens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.__init__": [[18, 23], ["torch.Module.__init__", "modules.image_model.ImageModel", "modules.contrastive_loss.ContrastiveLoss"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ImageHREDModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "net", "=", "ImageModel", "(", "self", ".", "cfg", ")", "\n", "self", ".", "criterion", "=", "ContrastiveLoss", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.forward": [[24, 26], ["image_hred_model.ImageHREDModel.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sent_inds", ",", "sent_msks", ",", "src_images", ",", "tgt_images", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "sent_inds", ",", "sent_msks", ",", "src_images", ",", "tgt_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.forward_loss": [[27, 33], ["txt_feats.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "image_hred_model.ImageHREDModel.criterion", "range"], "methods", ["None"], ["", "def", "forward_loss", "(", "self", ",", "img_feats", ",", "txt_feats", ")", ":", "\n", "        ", "bsize", ",", "nturn", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "losses", "=", "[", "self", ".", "criterion", "(", "txt_feats", "[", ":", ",", "i", "]", ",", "img_feats", ")", "for", "i", "in", "range", "(", "nturn", ")", "]", "\n", "losses", "=", "torch", ".", "stack", "(", "losses", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "losses", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.evaluate": [[34, 59], ["txt_feats.size", "img_feats.size", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "range", "image_hred_model.ImageHREDModel.evaluate_rankfusion", "gt_inds.cuda.cuda.cuda", "curr_txt_feats.mm", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "sorted_inds[].cpu().data.numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "ranks.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "numpy.array().astype().tolist", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "img_feats.t", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "numpy.floor", "ranks.cpu().data.numpy.cpu().data.numpy.mean", "len", "len", "len", "numpy.median", "numpy.array().astype", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "sorted_inds[].cpu", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "ranks.cpu().data.numpy.cpu().data.numpy.cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.evaluate_rankfusion"], ["", "def", "evaluate", "(", "self", ",", "img_feats", ",", "txt_feats", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "rank_fusion", ":", "\n", "            ", "return", "self", ".", "evaluate_rankfusion", "(", "img_feats", ",", "txt_feats", ")", "\n", "\n", "", "ssize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "ssize", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "gt_inds", "=", "torch", ".", "arange", "(", "0", ",", "ssize", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "gt_inds", "=", "gt_inds", ".", "cuda", "(", ")", "\n", "", "metrics", "=", "{", "}", "\n", "caches_results", "=", "{", "}", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "            ", "curr_txt_feats", "=", "txt_feats", "[", ":", ",", "turn", "]", "\n", "sim", "=", "curr_txt_feats", ".", "mm", "(", "img_feats", ".", "t", "(", ")", ")", "\n", "sorted_inds", "=", "torch", ".", "argsort", "(", "sim", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "caches_results", "[", "turn", "]", "=", "sorted_inds", "[", ":", ",", ":", "5", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "ranks", "=", "torch", ".", "argmax", "(", "torch", ".", "eq", "(", "sorted_inds", ",", "gt_inds", ")", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "ranks", "=", "ranks", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "ssize", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "meanr", "=", "ranks", ".", "mean", "(", ")", "+", "1", "\n", "metrics", "[", "turn", "]", "=", "(", "np", ".", "array", "(", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", ".", "tolist", "(", ")", "\n", "", "return", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.evaluate_rankfusion": [[60, 101], ["txt_feats.size", "img_feats.size", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "torch.arange().long().view", "range", "numpy.stack", "numpy.stack.copy", "range", "print", "range", "curr_txt_feats.mm", "numpy.zeros", "range", "numpy.stack.append", "print", "numpy.mean", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "sorted_inds[].cpu().data.numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "ranks.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "numpy.array().astype().tolist", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "img_feats.t", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "sorted_sim.cpu().data.numpy().flatten.cpu().data.numpy().flatten.cpu().data.numpy().flatten", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "numpy.floor", "ranks.cpu().data.numpy.cpu().data.numpy.mean", "len", "len", "len", "numpy.median", "numpy.array().astype", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "sorted_sim.cpu().data.numpy().flatten.cpu().data.numpy().flatten.cpu().data.numpy", "sorted_inds[].cpu", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "ranks.cpu().data.numpy.cpu().data.numpy.cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.array", "sorted_sim.cpu().data.numpy().flatten.cpu().data.numpy().flatten.cpu"], "methods", ["None"], ["", "def", "evaluate_rankfusion", "(", "self", ",", "img_feats", ",", "txt_feats", ")", ":", "\n", "        ", "ssize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "ssize", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "gt_inds", "=", "torch", ".", "arange", "(", "0", ",", "ssize", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# if self.cfg.cuda:", "\n", "#     gt_inds = gt_inds.cuda()", "\n", "metrics", "=", "{", "}", "\n", "caches_results", "=", "{", "}", "\n", "ranks_per_turns", "=", "[", "]", "\n", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "            ", "curr_txt_feats", "=", "txt_feats", "[", ":", ",", "turn", "]", "\n", "sim", "=", "curr_txt_feats", ".", "mm", "(", "img_feats", ".", "t", "(", ")", ")", "\n", "# sim = sim.cpu().data.numpy()", "\n", "# ranks = [np.array([stats.percentileofscore(sim[i], j) for j in sim[i]]) for i in range(len(sim))]", "\n", "ranks", "=", "np", ".", "zeros", "(", "(", "ssize", ",", "ssize", ")", ")", "\n", "for", "i", "in", "range", "(", "ssize", ")", ":", "\n", "                ", "sorted_sim", "=", "torch", ".", "argsort", "(", "sim", "[", "i", "]", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "sorted_sim", "=", "sorted_sim", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "for", "j", "in", "range", "(", "ssize", ")", ":", "\n", "                    ", "ranks", "[", "i", ",", "sorted_sim", "[", "j", "]", "]", "=", "j", "+", "1", "\n", "", "", "ranks_per_turns", ".", "append", "(", "ranks", ")", "\n", "print", "(", "'rank fusion: '", ",", "turn", ",", "ranks", ".", "shape", ")", "\n", "", "ranks_per_turns", "=", "np", ".", "stack", "(", "ranks_per_turns", ",", "-", "1", ")", "\n", "# rank fusion", "\n", "accu_ranks", "=", "ranks_per_turns", ".", "copy", "(", ")", "\n", "for", "turn", "in", "range", "(", "1", ",", "nturns", ")", ":", "\n", "            ", "accu_ranks", "[", ":", ",", ":", ",", "turn", "]", "=", "np", ".", "mean", "(", "ranks_per_turns", "[", ":", ",", ":", ",", ":", "(", "turn", "+", "1", ")", "]", ",", "-", "1", ")", "\n", "", "print", "(", "'accu_ranks.shape'", ",", "accu_ranks", ".", "shape", ")", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "            ", "sorted_inds", "=", "torch", ".", "argsort", "(", "torch", ".", "from_numpy", "(", "accu_ranks", "[", ":", ",", ":", ",", "turn", "]", ")", ",", "dim", "=", "1", ",", "descending", "=", "False", ")", "\n", "caches_results", "[", "turn", "]", "=", "sorted_inds", "[", ":", ",", ":", "5", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "ranks", "=", "torch", ".", "argmax", "(", "torch", ".", "eq", "(", "sorted_inds", ",", "gt_inds", ")", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "ranks", "=", "ranks", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "ssize", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "meanr", "=", "ranks", ".", "mean", "(", ")", "+", "1", "\n", "metrics", "[", "turn", "]", "=", "(", "np", ".", "array", "(", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", ".", "tolist", "(", ")", "\n", "", "return", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_model.ImageHREDModel.demo_step": [[102, 160], ["all_captions.append", "range", "max", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "image_hred_model.ImageHREDModel.net.txt_enc", "lang_feats.unsqueeze.unsqueeze.unsqueeze", "lang_feats.unsqueeze.unsqueeze.new_ones().float", "print", "print", "image_hred_model.ImageHREDModel.net.ctx_enc", "print", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "l2norm.mm", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "print", "print", "int", "top5_inds.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "range", "len", "word_inds.append", "sent_inds.cuda.cuda.append", "len", "len", "len", "sent_inds.cuda.cuda.cuda", "sent_msks.cuda.cuda.cuda", "lang_feats.unsqueeze.unsqueeze.size", "lang_feats.unsqueeze.new_ones().float.size", "l2norm.size", "l2norm", "gt_inds.cuda.cuda.cuda", "img_feats.t", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.argmax.size", "torch.argmax.size", "torch.argmax.size", "top5_inds.cpu().data.numpy.cpu().data.numpy.size", "len", "top5_img_inds.append", "db.lang_vocab", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lang_feats.unsqueeze.unsqueeze.new_ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "word_tokenize", "len", "len", "len", "numpy.array", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "top5_inds.cpu().data.numpy.cpu().data.numpy.cpu", "lang_feats.unsqueeze.unsqueeze.size"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm"], ["", "def", "demo_step", "(", "self", ",", "sentence", ",", "all_captions", ",", "img_feats", ",", "db", ",", "gt_ind", "=", "0", ")", ":", "\n", "        ", "all_captions", ".", "append", "(", "sentence", ")", "\n", "\n", "sent_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_captions", ")", ")", ":", "\n", "            ", "tokens", "=", "[", "w", "for", "w", "in", "word_tokenize", "(", "all_captions", "[", "i", "]", ")", "]", "\n", "word_inds", "=", "[", "db", ".", "lang_vocab", "(", "w", ")", "for", "w", "in", "tokens", "]", "\n", "word_inds", ".", "append", "(", "self", ".", "cfg", ".", "EOS_idx", ")", "\n", "sent_inds", ".", "append", "(", "torch", ".", "Tensor", "(", "word_inds", ")", ")", "\n", "\n", "# captions", "\n", "", "lengths", "=", "[", "len", "(", "sent_inds", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", "]", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "new_sent_inds", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "new_sent_msks", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "            ", "end", "=", "len", "(", "sent_inds", "[", "i", "]", ")", "\n", "new_sent_inds", "[", "i", ",", ":", "end", "]", "=", "sent_inds", "[", "i", "]", "\n", "new_sent_msks", "[", "i", ",", ":", "end", "]", "=", "1", "\n", "", "sent_inds", "=", "new_sent_inds", "\n", "sent_msks", "=", "new_sent_msks", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "sent_inds", "=", "sent_inds", ".", "cuda", "(", ")", "\n", "sent_msks", "=", "sent_msks", ".", "cuda", "(", ")", "\n", "", "_", ",", "lang_feats", ",", "_", "=", "self", ".", "net", ".", "txt_enc", "(", "sent_inds", ",", "sent_msks", ")", "\n", "lang_feats", "=", "lang_feats", ".", "unsqueeze", "(", "0", ")", "\n", "lang_masks", "=", "lang_feats", ".", "new_ones", "(", "(", "1", ",", "lang_feats", ".", "size", "(", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "print", "(", "'lang_feats'", ",", "lang_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'lang_masks'", ",", "lang_masks", ".", "size", "(", ")", ")", "\n", "txt_feats", ",", "_", "=", "self", ".", "net", ".", "ctx_enc", "(", "lang_feats", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "if", "self", ".", "cfg", ".", "l2_norm", ":", "\n", "            ", "txt_feats", "=", "l2norm", "(", "txt_feats", ")", "\n", "", "gt_inds", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "gt_ind", "]", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "gt_inds", "=", "gt_inds", ".", "cuda", "(", ")", "\n", "\n", "# last turn", "\n", "", "txt_feats", "=", "txt_feats", "[", ":", ",", "-", "1", "]", "\n", "sim", "=", "txt_feats", ".", "mm", "(", "img_feats", ".", "t", "(", ")", ")", "\n", "sorted_inds", "=", "torch", ".", "argsort", "(", "sim", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "top5_inds", "=", "sorted_inds", "[", "0", ",", ":", "5", "]", "\n", "ranks", "=", "torch", ".", "argmax", "(", "torch", ".", "eq", "(", "sorted_inds", ",", "gt_inds", ")", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "print", "(", "'ranks'", ",", "ranks", ".", "size", "(", ")", ")", "\n", "print", "(", "'top5_inds'", ",", "top5_inds", ".", "size", "(", ")", ")", "\n", "r", "=", "int", "(", "ranks", "[", "0", "]", ")", "\n", "top5_inds", "=", "top5_inds", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "top5_img_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "top5_inds", ")", ")", ":", "\n", "            ", "scene_idx", "=", "top5_inds", "[", "i", "]", "\n", "scene", "=", "db", ".", "scenedb", "[", "scene_idx", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "# cur_img = cv2.imread(db.color_path_from_index(image_index), cv2.IMREAD_COLOR)", "\n", "# cur_img, _, _ = create_squared_image(cur_img)", "\n", "# cur_img = cv2.resize(cur_img, (500, 500))", "\n", "top5_img_inds", ".", "append", "(", "image_index", ")", "\n", "", "return", "r", ",", "top5_img_inds", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.__init__": [[22, 27], ["torch.Module.__init__", "modules.region_model.RegionModel", "modules.grounding_loss.GroundingLoss"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RegionGroundingModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "net", "=", "RegionModel", "(", "self", ".", "cfg", ")", "\n", "self", ".", "criterion", "=", "GroundingLoss", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.forward": [[28, 33], ["region_grounding_model.RegionGroundingModel.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "\n", "src_region_feats", ",", "src_region_clses", ",", "src_region_masks", ",", "\n", "tgt_region_feats", ",", "tgt_region_clses", ",", "tgt_region_masks", ",", "\n", "sample_mode", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "src_region_feats", ",", "src_region_clses", ",", "src_region_masks", ",", "tgt_region_feats", ",", "tgt_region_clses", ",", "tgt_region_masks", ",", "sample_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.embedding_loss": [[34, 37], ["region_grounding_model.RegionGroundingModel.criterion.forward_loss"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss"], ["", "def", "embedding_loss", "(", "self", ",", "img_feats", ",", "masked_feats", ",", "img_masks", ",", "txt_feats", ",", "txt_masks", ")", ":", "\n", "        ", "tmp_feats", "=", "masked_feats", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", "else", "img_feats", "\n", "return", "self", ".", "criterion", ".", "forward_loss", "(", "tmp_feats", ",", "img_masks", ",", "txt_feats", ",", "txt_masks", ",", "self", ".", "cfg", ".", "loss_reduction_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.final_loss": [[38, 68], ["region_grounding_model.RegionGroundingModel.embedding_loss", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.embedding_loss"], ["", "def", "final_loss", "(", "self", ",", "img_feats", ",", "masked_feats", ",", "img_masks", ",", "txt_feats", ",", "txt_masks", ",", "sample_logits", ",", "sample_inds", ")", ":", "\n", "        ", "emb_loss", "=", "self", ".", "embedding_loss", "(", "img_feats", ",", "masked_feats", ",", "img_masks", ",", "txt_feats", ",", "txt_masks", ")", "\n", "tmp_feats", "=", "masked_feats", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", "else", "img_feats", "\n", "if", "self", ".", "cfg", ".", "final_loss_mode", "==", "0", ":", "\n", "            ", "return", "emb_loss", "\n", "", "elif", "self", ".", "cfg", ".", "final_loss_mode", "==", "1", ":", "\n", "            ", "return", "sample_logits", "\n", "", "elif", "self", ".", "cfg", ".", "final_loss_mode", "==", "2", ":", "\n", "            ", "bsize", ",", "nturns", ",", "ninsts", "=", "sample_logits", ".", "size", "(", ")", "\n", "sample_logits", "=", "torch", ".", "transpose", "(", "sample_logits", ",", "1", ",", "2", ")", "\n", "policy_loss", "=", "F", ".", "cross_entropy", "(", "\n", "sample_logits", "[", ":", ",", ":", ",", "self", ".", "cfg", ".", "instance_dim", ":", "]", ",", "\n", "sample_inds", "[", ":", ",", "self", ".", "cfg", ".", "instance_dim", ":", "]", ",", "\n", "reduction", "=", "'none'", ")", "\n", "policy_loss", "=", "torch", ".", "mean", "(", "policy_loss", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# policy_loss = torch.sum(policy_loss * txt_masks[:, self.cfg.instance_dim:], -1, keepdim=True)/(torch.sum(txt_masks[:, self.cfg.instance_dim:], -1, keepdim=True) + self.cfg.eps)", "\n", "return", "policy_loss", "\n", "# return F.cross_entropy(", "\n", "#     sample_logits[:, :, self.cfg.instance_dim:], ", "\n", "#     sample_inds[:, self.cfg.instance_dim:], ", "\n", "#     reduction='none')", "\n", "", "elif", "self", ".", "cfg", ".", "final_loss_mode", "==", "3", ":", "\n", "            ", "bsize", ",", "nturns", ",", "ninsts", "=", "sample_logits", ".", "size", "(", ")", "\n", "sample_logits", "=", "torch", ".", "transpose", "(", "sample_logits", ",", "1", ",", "2", ")", "\n", "policy_loss", "=", "F", ".", "cross_entropy", "(", "\n", "sample_logits", "[", ":", ",", ":", ",", "self", ".", "cfg", ".", "instance_dim", ":", "]", ",", "\n", "sample_inds", "[", ":", ",", "self", ".", "cfg", ".", "instance_dim", ":", "]", ",", "\n", "reduction", "=", "'none'", ")", "\n", "policy_loss", "=", "torch", ".", "mean", "(", "policy_loss", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "torch", ".", "mean", "(", "emb_loss", ",", "-", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "cfg", ".", "policy_weight", "*", "policy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate": [[69, 102], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "txt_feats.size", "gt_inds.cuda.cuda.cuda", "ranker.compute_rank_late_ranks_fusion", "ranker.compute_rank_late_ranks_fusion.size", "range", "ranker.compute_rank", "ranker.compute_rank_late_ranks_fusion.size", "range", "top5_inds.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ranks[].cpu().data.numpy", "numpy.array().astype().tolist", "ranks[].cpu().data.numpy", "numpy.array().astype().tolist", "numpy.array", "numpy.floor", "ranks[].cpu().data.numpy.mean", "numpy.floor", "ranks[].cpu().data.numpy.mean", "list", "len", "len", "len", "numpy.median", "numpy.array().astype", "len", "len", "len", "numpy.median", "numpy.array().astype", "top5_inds.cpu().data.numpy.cpu().data.numpy.cpu", "range", "ranks[].cpu", "ranks[].cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.array", "numpy.where", "numpy.where", "numpy.where", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.compute_rank_late_ranks_fusion", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.compute_rank"], ["", "", "def", "evaluate", "(", "self", ",", "img_feats", ",", "img_masks", ",", "txt_feats", ")", ":", "\n", "        ", "bsize", "=", "txt_feats", ".", "size", "(", ")", "[", "0", "]", "\n", "gt_inds", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "list", "(", "range", "(", "bsize", ")", ")", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "gt_inds", "=", "gt_inds", ".", "cuda", "(", ")", "\n", "", "ranker", "=", "self", ".", "net", ".", "ctx_enc", ".", "ranker", "\n", "if", "self", ".", "cfg", ".", "rank_fusion", ":", "\n", "            ", "ranks", "=", "ranker", ".", "compute_rank_late_ranks_fusion", "(", "txt_feats", ",", "img_feats", ",", "img_masks", ",", "gt_inds", ")", "\n", "ssize", ",", "nturns", "=", "ranks", ".", "size", "(", ")", "\n", "metrics", "=", "{", "}", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "                ", "ranks_np", "=", "ranks", "[", ":", ",", "turn", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "1", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "5", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "10", ")", "[", "0", "]", ")", "/", "ssize", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks_np", ")", ")", "+", "1", "\n", "meanr", "=", "ranks_np", ".", "mean", "(", ")", "+", "1", "\n", "metrics", "[", "turn", "]", "=", "(", "np", ".", "array", "(", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", ".", "tolist", "(", ")", "\n", "", "return", "metrics", ",", "None", "\n", "", "else", ":", "\n", "            ", "ranks", ",", "top5_inds", "=", "ranker", ".", "compute_rank", "(", "txt_feats", ",", "img_feats", ",", "img_masks", ",", "gt_inds", ")", "\n", "ssize", ",", "nturns", "=", "ranks", ".", "size", "(", ")", "\n", "metrics", "=", "{", "}", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "                ", "ranks_np", "=", "ranks", "[", ":", ",", "turn", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "1", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "5", ")", "[", "0", "]", ")", "/", "ssize", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks_np", "<", "10", ")", "[", "0", "]", ")", "/", "ssize", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks_np", ")", ")", "+", "1", "\n", "meanr", "=", "ranks_np", ".", "mean", "(", ")", "+", "1", "\n", "metrics", "[", "turn", "]", "=", "(", "np", ".", "array", "(", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", ".", "tolist", "(", ")", "\n", "", "top5_inds", "=", "top5_inds", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "return", "metrics", ",", "top5_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.demo_step": [[103, 189], ["all_captions.append", "range", "max", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "region_grounding_model.RegionGroundingModel.net.txt_enc", "lang_feats.unsqueeze.unsqueeze.unsqueeze", "lang_feats.unsqueeze.unsqueeze.new_ones().float", "print", "print", "region_grounding_model.RegionGroundingModel.net.ctx_enc.init_hidden", "region_grounding_model.RegionGroundingModel.net.ctx_enc", "print", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "ranker.compute_rank", "print", "print", "int", "top5_inds[].view().cpu().data.numpy", "range", "cv2.imread", "db.region_path_from_index", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "f1.mm", "scores.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "print", "range", "len", "word_inds.append", "sent_inds.cuda.cuda.append", "len", "len", "len", "sent_inds.cuda.cuda.cuda", "sent_msks.cuda.cuda.cuda", "lang_feats.unsqueeze.unsqueeze.size", "lang_feats.unsqueeze.new_ones().float.size", "l2norm.size", "l2norm", "gt_inds.cuda.cuda.cuda", "ranks.size", "top5_inds[].view().cpu().data.numpy.size", "len", "top5_img_inds.append", "db.color_path_from_index", "open", "pickle.load", "f2.t", "numpy.argsort", "copy.deepcopy", "cairo.ImageSurface.create_for_data", "cairo.Context", "range", "cv2.imwrite", "db.lang_vocab", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lang_feats.unsqueeze.unsqueeze.new_ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ones", "paint_box", "img[].copy", "nltk.tokenize.word_tokenize", "len", "len", "len", "numpy.array", "top5_inds[].view().cpu", "scores.cpu().data.numpy.cpu().data.numpy.cpu", "lang_feats.unsqueeze.unsqueeze.size", "top5_inds[].view"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.SoftContextEncoder.init_hidden", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.compute_rank", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.region_path_from_index", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.paint_box"], ["", "", "def", "demo_step", "(", "self", ",", "sentence", ",", "all_captions", ",", "img_feats", ",", "img_masks", ",", "db", ",", "gt_ind", "=", "0", ")", ":", "\n", "        ", "all_captions", ".", "append", "(", "sentence", ")", "\n", "\n", "sent_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_captions", ")", ")", ":", "\n", "            ", "tokens", "=", "[", "w", "for", "w", "in", "word_tokenize", "(", "all_captions", "[", "i", "]", ")", "]", "\n", "word_inds", "=", "[", "db", ".", "lang_vocab", "(", "w", ")", "for", "w", "in", "tokens", "]", "\n", "word_inds", ".", "append", "(", "self", ".", "cfg", ".", "EOS_idx", ")", "\n", "sent_inds", ".", "append", "(", "torch", ".", "Tensor", "(", "word_inds", ")", ")", "\n", "\n", "# captions", "\n", "", "lengths", "=", "[", "len", "(", "sent_inds", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", "]", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "new_sent_inds", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "new_sent_msks", "=", "torch", ".", "zeros", "(", "len", "(", "sent_inds", ")", ",", "max_length", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "            ", "end", "=", "len", "(", "sent_inds", "[", "i", "]", ")", "\n", "new_sent_inds", "[", "i", ",", ":", "end", "]", "=", "sent_inds", "[", "i", "]", "\n", "new_sent_msks", "[", "i", ",", ":", "end", "]", "=", "1", "\n", "", "sent_inds", "=", "new_sent_inds", "\n", "sent_msks", "=", "new_sent_msks", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "sent_inds", "=", "sent_inds", ".", "cuda", "(", ")", "\n", "sent_msks", "=", "sent_msks", ".", "cuda", "(", ")", "\n", "", "_", ",", "lang_feats", ",", "_", "=", "self", ".", "net", ".", "txt_enc", "(", "sent_inds", ",", "sent_msks", ")", "\n", "lang_feats", "=", "lang_feats", ".", "unsqueeze", "(", "0", ")", "\n", "lang_masks", "=", "lang_feats", ".", "new_ones", "(", "(", "1", ",", "lang_feats", ".", "size", "(", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "print", "(", "'lang_feats'", ",", "lang_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'lang_masks'", ",", "lang_masks", ".", "size", "(", ")", ")", "\n", "\n", "hidden", "=", "self", ".", "net", ".", "ctx_enc", ".", "init_hidden", "(", "1", ")", "\n", "txt_feats", ",", "_", ",", "_", ",", "_", "=", "self", ".", "net", ".", "ctx_enc", "(", "None", ",", "lang_feats", ",", "lang_masks", ",", "hidden", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ",", "self", ".", "cfg", ".", "explore_mode", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "l2_norm", ":", "\n", "            ", "txt_feats", "=", "l2norm", "(", "txt_feats", ")", "\n", "\n", "", "gt_inds", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "gt_ind", "]", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "gt_inds", "=", "gt_inds", ".", "cuda", "(", ")", "\n", "", "ranker", "=", "self", ".", "net", ".", "ctx_enc", ".", "ranker", "\n", "ranks", ",", "top5_inds", "=", "ranker", ".", "compute_rank", "(", "txt_feats", ",", "img_feats", ",", "img_masks", ",", "gt_inds", ")", "\n", "print", "(", "'ranks'", ",", "ranks", ".", "size", "(", ")", ")", "\n", "print", "(", "'top5_inds'", ",", "top5_inds", ".", "size", "(", ")", ")", "\n", "r", "=", "int", "(", "ranks", "[", "0", ",", "-", "1", "]", ")", "\n", "top5_inds", "=", "top5_inds", "[", "0", ",", "-", "1", "]", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "top5_img_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "top5_inds", ")", ")", ":", "\n", "            ", "scene_idx", "=", "top5_inds", "[", "i", "]", "\n", "scene", "=", "db", ".", "scenedb", "[", "scene_idx", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "# cur_img = cv2.imread(db.color_path_from_index(image_index), cv2.IMREAD_COLOR)", "\n", "# cur_img, _, _ = create_squared_image(cur_img)", "\n", "# cur_img = cv2.resize(cur_img, (500, 500))", "\n", "top5_img_inds", ".", "append", "(", "image_index", ")", "\n", "\n", "# top1 vis", "\n", "", "K", "=", "3", "\n", "top1_img", "=", "cv2", ".", "imread", "(", "db", ".", "color_path_from_index", "(", "top5_img_inds", "[", "0", "]", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "region_path", "=", "db", ".", "region_path_from_index", "(", "top5_img_inds", "[", "0", "]", ")", "\n", "with", "open", "(", "region_path", ",", "'rb'", ")", "as", "fid", ":", "\n", "            ", "regions", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'latin1'", ")", "\n", "", "region_boxes", "=", "torch", ".", "from_numpy", "(", "regions", "[", "'region_boxes'", "]", ")", ".", "float", "(", ")", "\n", "region_feats", "=", "img_feats", "[", "top5_inds", "[", "0", "]", "]", "\n", "f1", "=", "txt_feats", "[", "0", ",", "-", "1", "]", "\n", "f2", "=", "region_feats", "\n", "scores", "=", "f1", ".", "mm", "(", "f2", ".", "t", "(", ")", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "scores", ",", "-", "1", ")", "[", ":", ",", ":", "K", "]", "\n", "print", "(", "inds", ".", "shape", ",", "inds", ")", "\n", "color_map", "=", "[", "(", "238", ",", "34", ",", "12", ")", ",", "(", "97", ",", "216", ",", "54", ")", ",", "(", "0", ",", "162", ",", "255", ")", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "tmp_img", "=", "deepcopy", "(", "top1_img", ")", "\n", "img", "=", "255", "*", "np", ".", "ones", "(", "(", "tmp_img", ".", "shape", "[", "0", "]", ",", "tmp_img", ".", "shape", "[", "1", "]", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "[", ":", ",", ":", ",", ":", "3", "]", "=", "tmp_img", "\n", "surface", "=", "cairo", ".", "ImageSurface", ".", "create_for_data", "(", "img", ",", "cairo", ".", "FORMAT_ARGB32", ",", "tmp_img", ".", "shape", "[", "1", "]", ",", "tmp_img", ".", "shape", "[", "0", "]", ")", "\n", "ctx", "=", "cairo", ".", "Context", "(", "surface", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "xyxy", "=", "region_boxes", "[", "inds", "[", "i", ",", "j", "]", "]", "\n", "# xyxy = xywh_to_xyxy(xywh, tmp_img.shape[1], tmp_img.shape[0])", "\n", "paint_box", "(", "ctx", ",", "color_map", "[", "i", "]", ",", "xyxy", ")", "\n", "", "cv2", ".", "imwrite", "(", "'%d.png'", "%", "i", ",", "img", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "", "return", "r", ",", "top5_img_inds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.text_encoder.TextEncoder.__init__": [[13, 21], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "text_encoder.TextEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "cfg", ".", "vocab_size", ",", "self", ".", "cfg", ".", "n_embed", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "self", ".", "cfg", ".", "n_embed", ",", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_rnn_layers", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "self", ".", "cfg", ".", "bidirectional", ")", "\n", "# for param in self.parameters():", "\n", "#     param.requires_grad = (self.cfg.rl_finetune == 0) or (self.cfg.rl_finetune > 2)", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.text_encoder.TextEncoder.init_weights": [[22, 28], ["text_encoder.TextEncoder.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.text_encoder.TextEncoder.forward": [[29, 61], ["torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sum().clamp().long", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "text_encoder.TextEncoder.embed", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_encoder.TextEncoder.rnn.flatten_parameters", "text_encoder.TextEncoder.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.sum().clamp().long.view", "torch.sum().clamp().long.view", "torch.sum().clamp().long.view", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.sum().clamp().long.view.expand", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "input_msks.size", "feat_seq.size", "text_encoder.TextEncoder.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.flatten_parameters"], ["", "", "", "def", "forward", "(", "self", ",", "input_inds", ",", "input_msks", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - **input_inds**  (bsize, slen)\n            - **input_msks**  (bsize, slen)\n        Returns: \n            - **feat_seq**   (bsize, slen, hsize)\n            - **last_feat**  (bsize, hsize)\n            - **hidden** [list of](num_layers * num_directions, bsize, hsize)\n        \"\"\"", "\n", "# Embed word ids to vectors (hacky clamp)", "\n", "lengths", "=", "torch", ".", "sum", "(", "input_msks", ",", "-", "1", ")", ".", "clamp", "(", "min", "=", "1", ")", ".", "long", "(", ")", "\n", "sorted_lengths", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "lengths", ",", "descending", "=", "True", ")", "\n", "_", ",", "unsorted_indices", "=", "torch", ".", "sort", "(", "sorted_indices", ")", "\n", "\n", "x", "=", "self", ".", "embed", "(", "input_inds", "[", "sorted_indices", "]", ")", "\n", "packed", "=", "pack_padded_sequence", "(", "x", ",", "sorted_lengths", ",", "batch_first", "=", "True", ")", "\n", "# Forward propagate RNN", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "features", ",", "hiddens", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "# Reshape *final* output to (batch_size, hidden_size)", "\n", "feat_seq", ",", "_", "=", "pad_packed_sequence", "(", "features", ",", "batch_first", "=", "True", ",", "total_length", "=", "input_msks", ".", "size", "(", "1", ")", ")", "\n", "if", "self", ".", "cfg", ".", "bidirectional", ":", "\n", "            ", "N", "=", "feat_seq", ".", "size", "(", "2", ")", "//", "2", "\n", "feat_seq", "=", "(", "feat_seq", "[", ":", ",", ":", ",", ":", "N", "]", "+", "feat_seq", "[", ":", ",", ":", ",", "N", ":", "]", ")", "/", "2", "\n", "", "feat_seq", "=", "feat_seq", "[", "unsorted_indices", "]", "\n", "hiddens", "=", "hiddens", "[", ":", ",", "unsorted_indices", ",", ":", "]", "\n", "\n", "I", "=", "lengths", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "I", "=", "I", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "-", "1", "\n", "last_feat", "=", "torch", ".", "gather", "(", "feat_seq", ",", "1", ",", "I", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "feat_seq", ",", "last_feat", ",", "hiddens", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_model.RegionModel.__init__": [[19, 29], ["torch.Module.__init__", "modules.text_encoder.TextEncoder", "modules.region_encoder.RegionEncoder", "region_model.RegionModel.init_weights", "modules.context_encoder.SoftContextEncoder", "modules.context_encoder.ContextEncoder"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RegionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "txt_enc", "=", "TextEncoder", "(", "self", ".", "cfg", ")", "\n", "self", ".", "img_enc", "=", "RegionEncoder", "(", "self", ".", "cfg", ")", "\n", "if", "self", ".", "cfg", ".", "use_soft_ctx_encoder", ":", "\n", "            ", "self", ".", "ctx_enc", "=", "SoftContextEncoder", "(", "self", ".", "cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ctx_enc", "=", "ContextEncoder", "(", "self", ".", "cfg", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_model.RegionModel.init_weights": [[30, 38], ["region_model.RegionModel.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "param.dim", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "param", ".", "dim", "(", ")", "<", "2", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "param", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_model.RegionModel.forward": [[39, 79], ["region_model.RegionModel.img_enc", "sent_inds.size", "region_model.RegionModel.ctx_enc.init_hidden", "region_model.RegionModel.ctx_enc", "l2norm", "region_model.RegionModel.txt_enc", "region_model.RegionModel.txt_enc", "lang_feats.view.view.view", "lang_feats.view.view.new_ones", "lang_feats.view.view.size", "l2norm", "l2norm", "sent_msks[].detach", "sent_inds.view", "sent_msks.view"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.SoftContextEncoder.init_hidden", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm"], ["", "", "", "def", "forward", "(", "self", ",", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "\n", "src_region_feats", ",", "src_region_clses", ",", "src_region_masks", ",", "\n", "tgt_region_feats", ",", "tgt_region_clses", ",", "tgt_region_masks", ",", "\n", "sample_mode", ")", ":", "\n", "\n", "###########################################################################################", "\n", "# encoding image", "\n", "        ", "img_feats", ",", "masked_feats", ",", "subspace_masks", "=", "self", ".", "img_enc", "(", "tgt_region_feats", ",", "tgt_region_clses", ")", "\n", "if", "self", ".", "cfg", ".", "l2_norm", ":", "\n", "            ", "img_feats", "=", "l2norm", "(", "img_feats", ")", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "                ", "masked_feats", "=", "l2norm", "(", "masked_feats", ")", "\n", "###########################################################################################", "\n", "\n", "###########################################################################################", "\n", "# encoding text", "\n", "", "", "bsize", ",", "nturns", ",", "nwords", "=", "sent_inds", ".", "size", "(", ")", "\n", "if", "self", ".", "cfg", ".", "coco_mode", ">=", "0", ":", "\n", "            ", "lang_feats", ",", "_", ",", "_", "=", "self", ".", "txt_enc", "(", "sent_inds", "[", ":", ",", "self", ".", "cfg", ".", "coco_mode", "]", ",", "sent_msks", "[", ":", ",", "self", ".", "cfg", ".", "coco_mode", "]", ".", "detach", "(", ")", ")", "\n", "lang_masks", "=", "sent_msks", "[", ":", ",", "self", ".", "cfg", ".", "coco_mode", "]", "\n", "", "else", ":", "\n", "            ", "_", ",", "lang_feats", ",", "_", "=", "self", ".", "txt_enc", "(", "sent_inds", ".", "view", "(", "-", "1", ",", "nwords", ")", ",", "sent_msks", ".", "view", "(", "-", "1", ",", "nwords", ")", ")", "\n", "lang_feats", "=", "lang_feats", ".", "view", "(", "bsize", ",", "nturns", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "lang_masks", "=", "lang_feats", ".", "new_ones", "(", "bsize", ",", "nturns", ")", "\n", "###########################################################################################", "\n", "\n", "###########################################################################################", "\n", "# encoding context", "\n", "", "first_hidden", "=", "self", ".", "ctx_enc", ".", "init_hidden", "(", "lang_feats", ".", "size", "(", "0", ")", ")", "\n", "src_feats", "=", "None", "# Image Context, can be ignored as it does not help ", "\n", "tgt_feats", "=", "masked_feats", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", "else", "img_feats", "\n", "txt_feats", ",", "_", ",", "sample_logits", ",", "sample_indices", "=", "self", ".", "ctx_enc", "(", "scene_inds", ",", "lang_feats", ",", "lang_masks", ",", "first_hidden", ",", "\n", "src_feats", ",", "src_region_masks", ",", "\n", "tgt_feats", ",", "tgt_region_masks", ",", "\n", "sample_mode", ")", "\n", "if", "self", ".", "cfg", ".", "l2_norm", ":", "\n", "            ", "txt_feats", "=", "l2norm", "(", "txt_feats", ")", "\n", "\n", "", "return", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.__init__": [[17, 21], ["object.__init__", "modules.grounding_loss.GroundingLoss"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Ranker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "criterion", "=", "GroundingLoss", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.compute_rank": [[22, 81], ["img_feats.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "txt_feats.size", "txt_feats.size", "txt_feats[].unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "curr_img_feats.size", "ranker.Ranker.criterion.compute_pairwise_similarity", "ranker.Ranker.criterion.pairwise_similarity_to_score", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "reduce_similarities.clone().float", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "txt_feats[].unsqueeze.expand().contiguous", "txt_feats[].unsqueeze.expand().contiguous.view().contiguous", "txt_feats[].unsqueeze.expand().contiguous", "reduce_similarities.view", "reduce_similarities.new_ones", "range", "reduce_similarities", "range", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "min", "min", "min", "reduce_similarities.clone", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "txt_feats[].unsqueeze.expand", "txt_feats[].unsqueeze.expand().contiguous.view", "txt_feats[].unsqueeze.expand", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.reduce_similarities"], ["", "def", "compute_rank", "(", "self", ",", "txt_feats", ",", "img_feats", ",", "img_masks", ",", "gt_inds", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "src_bsize", ",", "nturns", ",", "ninsts", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "src_bsize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "", "tgt_bsize", ",", "nregions", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "# computing the rank of each query in one step is infeasible", "\n", "bsize", "=", "self", ".", "cfg", ".", "rank_batch_size", "\n", "nstep", "=", "tgt_bsize", "//", "bsize", "\n", "if", "tgt_bsize", "%", "bsize", ">", "0", ":", "\n", "            ", "nstep", "+=", "1", "\n", "\n", "", "all_ranks", ",", "all_top5_inds", "=", "[", "]", ",", "[", "]", "\n", "# compute the rank of each query", "\n", "for", "txt_id", "in", "range", "(", "src_bsize", ")", ":", "\n", "            ", "tmp_txt_feats", "=", "txt_feats", "[", "txt_id", "]", ".", "unsqueeze", "(", "0", ")", "\n", "sim_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "nstep", ")", ":", "\n", "                ", "curr_img_feats", "=", "img_feats", "[", "j", "*", "bsize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "bsize", ",", "tgt_bsize", ")", "]", "\n", "curr_img_masks", "=", "img_masks", "[", "j", "*", "bsize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "bsize", ",", "tgt_bsize", ")", "]", "\n", "csize", "=", "curr_img_feats", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "                    ", "curr_txt_feats", "=", "tmp_txt_feats", ".", "expand", "(", "csize", ",", "nturns", ",", "ninsts", ",", "fsize", ")", ".", "contiguous", "(", ")", "\n", "curr_txt_feats", "=", "curr_txt_feats", ".", "view", "(", "csize", ",", "nturns", "*", "ninsts", ",", "fsize", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                    ", "curr_txt_feats", "=", "tmp_txt_feats", ".", "expand", "(", "csize", ",", "nturns", ",", "fsize", ")", ".", "contiguous", "(", ")", "\n", "", "curr_step_sims", "=", "self", ".", "criterion", ".", "compute_pairwise_similarity", "(", "curr_img_feats", ",", "curr_img_masks", ",", "curr_txt_feats", ")", "\n", "curr_step_scores", "=", "self", ".", "criterion", ".", "pairwise_similarity_to_score", "(", "curr_step_sims", ",", "curr_img_masks", ")", "\n", "curr_step_sims", "=", "torch", ".", "sum", "(", "curr_step_sims", "*", "curr_step_scores", ",", "-", "1", ")", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "                    ", "curr_step_sims", "=", "curr_step_sims", ".", "view", "(", "csize", ",", "nturns", ",", "ninsts", ")", "\n", "curr_step_msks", "=", "curr_step_sims", ".", "new_ones", "(", "csize", ",", "nturns", ",", "ninsts", ")", "\n", "for", "iii", "in", "range", "(", "min", "(", "ninsts", "-", "1", ",", "nturns", "-", "1", ")", ")", ":", "\n", "                        ", "curr_step_msks", "[", ":", ",", "iii", ",", "(", "iii", "+", "1", ")", ":", "]", "=", "0.0", "\n", "", "curr_step_sims", "=", "reduce_similarities", "(", "curr_step_sims", ",", "curr_step_msks", ",", "self", ".", "cfg", ".", "sim_reduction_mode", ")", "\n", "\n", "", "curr_sims", "=", "curr_step_sims", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "cfg", ".", "loss_reduction_mode", "==", "2", ":", "\n", "                    ", "for", "k", "in", "range", "(", "1", ",", "nturns", ")", ":", "\n", "                        ", "curr_sims", "[", ":", ",", "k", "]", "=", "torch", ".", "mean", "(", "curr_step_sims", "[", ":", ",", ":", "(", "k", "+", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "", "del", "curr_step_sims", "\n", "sim_list", ".", "append", "(", "curr_sims", ")", "\n", "", "sim_list", "=", "torch", ".", "cat", "(", "sim_list", ",", "0", ")", "\n", "# sim_list: (tgt_size, nturns)", "\n", "ranks", ",", "top5_inds", "=", "[", "]", ",", "[", "]", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "                ", "sim", "=", "sim_list", "[", ":", ",", "turn", "]", "\n", "inds", "=", "torch", ".", "argsort", "(", "sim", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "r", "=", "torch", ".", "eq", "(", "inds", ",", "gt_inds", "[", "txt_id", "]", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "ranks", ".", "append", "(", "r", ")", "\n", "top5_inds", ".", "append", "(", "inds", "[", ":", "5", "]", ")", "\n", "", "ranks", "=", "torch", ".", "cat", "(", "ranks", ",", "0", ")", "\n", "top5_inds", "=", "torch", ".", "stack", "(", "top5_inds", ",", "0", ")", "\n", "all_ranks", ".", "append", "(", "ranks", ")", "\n", "all_top5_inds", ".", "append", "(", "top5_inds", ")", "\n", "", "all_ranks", "=", "torch", ".", "stack", "(", "all_ranks", ",", "0", ")", "\n", "all_top5_inds", "=", "torch", ".", "stack", "(", "all_top5_inds", ",", "0", ")", "\n", "return", "all_ranks", ",", "all_top5_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.ranker.Ranker.compute_rank_late_ranks_fusion": [[82, 136], ["txt_feats.size", "img_feats.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "print", "txt_feats[].unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.size", "torch.stack.size", "torch.stack.size", "curr_img_feats.size", "txt_feats[].unsqueeze.expand().contiguous", "ranker.Ranker.criterion.compute_pairwise_similarity", "ranker.Ranker.criterion.pairwise_similarity_to_score", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "sim.new_zeros", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.range().to", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "rank_scores[].view", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "min", "min", "txt_feats[].unsqueeze.expand", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score"], ["", "def", "compute_rank_late_ranks_fusion", "(", "self", ",", "txt_feats", ",", "img_feats", ",", "img_masks", ",", "gt_inds", ")", ":", "\n", "        ", "src_bsize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "tgt_bsize", ",", "nregions", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "# computing the rank of each query in one step is infeasible", "\n", "bsize", "=", "self", ".", "cfg", ".", "rank_batch_size", "\n", "nstep", "=", "tgt_bsize", "//", "bsize", "\n", "if", "tgt_bsize", "%", "bsize", ">", "0", ":", "\n", "            ", "nstep", "+=", "1", "\n", "\n", "", "all_ranks", "=", "[", "]", "\n", "# compute the rank of each query", "\n", "for", "txt_id", "in", "range", "(", "src_bsize", ")", ":", "\n", "            ", "tmp_txt_feats", "=", "txt_feats", "[", "txt_id", "]", ".", "unsqueeze", "(", "0", ")", "\n", "sim_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "nstep", ")", ":", "\n", "                ", "curr_img_feats", "=", "img_feats", "[", "j", "*", "bsize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "bsize", ",", "tgt_bsize", ")", "]", "\n", "curr_img_masks", "=", "img_masks", "[", "j", "*", "bsize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "bsize", ",", "tgt_bsize", ")", "]", "\n", "csize", "=", "curr_img_feats", ".", "size", "(", "0", ")", "\n", "curr_txt_feats", "=", "tmp_txt_feats", ".", "expand", "(", "csize", ",", "nturns", ",", "fsize", ")", ".", "contiguous", "(", ")", "\n", "curr_step_sims", "=", "self", ".", "criterion", ".", "compute_pairwise_similarity", "(", "curr_img_feats", ",", "curr_img_masks", ",", "curr_txt_feats", ")", "\n", "curr_step_scores", "=", "self", ".", "criterion", ".", "pairwise_similarity_to_score", "(", "curr_step_sims", ",", "curr_img_masks", ")", "\n", "curr_step_sims", "=", "torch", ".", "sum", "(", "curr_step_sims", "*", "curr_step_scores", ",", "-", "1", ")", "\n", "sim_list", ".", "append", "(", "curr_step_sims", ")", "\n", "", "sim_list", "=", "torch", ".", "cat", "(", "sim_list", ",", "0", ")", "\n", "# sim_list: (tgt_size, nturns)", "\n", "\n", "rank_scores", "=", "[", "]", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "                ", "sim", "=", "sim_list", "[", ":", ",", "turn", "]", "\n", "rank_inds", "=", "torch", ".", "argsort", "(", "sim", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "cur_scores", "=", "sim", ".", "new_zeros", "(", "(", "tgt_bsize", ",", ")", ")", "\n", "order_inds", "=", "torch", ".", "range", "(", "start", "=", "0", ",", "end", "=", "(", "tgt_bsize", "-", "1", ")", ")", ".", "to", "(", "cur_scores", ".", "device", ")", "+", "1", "\n", "cur_scores", "[", "rank_inds", "]", "=", "order_inds", "\n", "# for j in range(tgt_bsize):", "\n", "#     cur_scores[rank_inds[j]] = j+1", "\n", "rank_scores", ".", "append", "(", "cur_scores", ")", "\n", "", "rank_scores", "=", "torch", ".", "stack", "(", "rank_scores", ",", "0", ")", "\n", "# print('rank_scores', rank_scores.size())", "\n", "\n", "rank_per_turn", "=", "[", "]", "\n", "for", "turn", "in", "range", "(", "nturns", ")", ":", "\n", "                ", "if", "turn", ">", "0", ":", "\n", "                    ", "accu_scores", "=", "torch", ".", "mean", "(", "rank_scores", "[", ":", "(", "turn", "+", "1", ")", ",", ":", "]", ",", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "accu_scores", "=", "rank_scores", "[", "0", ",", ":", "]", ".", "view", "(", "-", "1", ")", "\n", "", "inds", "=", "torch", ".", "argsort", "(", "accu_scores", ",", "dim", "=", "-", "1", ",", "descending", "=", "False", ")", "\n", "r", "=", "torch", ".", "eq", "(", "inds", ",", "gt_inds", "[", "txt_id", "]", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "rank_per_turn", ".", "append", "(", "r", ")", "\n", "", "rank_per_turn", "=", "torch", ".", "cat", "(", "rank_per_turn", ",", "0", ")", "\n", "all_ranks", ".", "append", "(", "rank_per_turn", ")", "\n", "", "all_ranks", "=", "torch", ".", "stack", "(", "all_ranks", ",", "0", ")", "\n", "print", "(", "'all_ranks'", ",", "all_ranks", ".", "size", "(", ")", ")", "\n", "return", "all_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.PolicyNet.__init__": [[19, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ws.cuda.cuda.cuda", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ws.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PolicyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "if", "self", ".", "cfg", ".", "policy_mode", "==", "0", ":", "\n", "# 3 FC layers", "\n", "            ", "self", ".", "general", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "elif", "self", ".", "cfg", ".", "policy_mode", "==", "1", ":", "\n", "# Weird design, not sure why I came up with this", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Linear", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ",", "bias", "=", "False", ")", "\n", "ws", "=", "torch", ".", "rand", "(", "2", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "                ", "ws", "=", "ws", ".", "cuda", "(", ")", "\n", "", "self", ".", "ws", "=", "nn", ".", "Parameter", "(", "ws", ")", "\n", "", "elif", "self", ".", "cfg", ".", "policy_mode", "==", "2", ":", "\n", "# 3 FC layers + a thresholding", "\n", "            ", "self", ".", "general", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "ws", "=", "torch", ".", "rand", "(", "2", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "                ", "ws", "=", "ws", ".", "cuda", "(", ")", "\n", "", "self", ".", "ws", "=", "nn", ".", "Parameter", "(", "ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.PolicyNet.forward": [[52, 82], ["query.size", "states.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "context_encoder.PolicyNet.general().squeeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "context_encoder.PolicyNet.project", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.distributions.categorical.Categorical().sample", "torch.distributions.categorical.Categorical().sample", "torch.distributions.categorical.Categorical().sample", "query.expand", "context_encoder.PolicyNet.general", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "context_encoder.PolicyNet.general().squeeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "l2norm", "l2norm().transpose", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "query.expand", "context_encoder.PolicyNet.general", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "l2norm"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l2norm"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "states", ",", "sample_mode", ")", ":", "\n", "        ", "'''\n        - **query**: (bsize, 1, tgt_dim)\n        - **states** (bsize, src_len, src_dim)\n        - **sample_mode**\n                0: top1\n                1: multinomial sampling\n        '''", "\n", "bsize", ",", "_", ",", "tgt_dim", "=", "query", ".", "size", "(", ")", "\n", "bsize", ",", "src_len", ",", "src_dim", "=", "states", ".", "size", "(", ")", "\n", "# scores: (bsize, 1, src_len)", "\n", "if", "self", ".", "cfg", ".", "policy_mode", "==", "0", ":", "\n", "# inputs = torch.cat([l2norm(query).expand(bsize, src_len, tgt_dim), l2norm(states)], -1)", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "[", "query", ".", "expand", "(", "bsize", ",", "src_len", ",", "tgt_dim", ")", ",", "states", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "general", "(", "inputs", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "cfg", ".", "policy_mode", "==", "1", ":", "\n", "            ", "projected", "=", "self", ".", "project", "(", "query", ")", "\n", "scores", "=", "torch", ".", "bmm", "(", "l2norm", "(", "projected", ")", ",", "l2norm", "(", "states", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "logits", "=", "torch", ".", "pow", "(", "self", ".", "ws", "[", "0", "]", "*", "torch", ".", "abs", "(", "scores", ")", "-", "self", ".", "ws", "[", "1", "]", ",", "2", ")", "\n", "", "elif", "self", ".", "cfg", ".", "policy_mode", "==", "2", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "[", "query", ".", "expand", "(", "bsize", ",", "src_len", ",", "tgt_dim", ")", ",", "states", "]", ",", "-", "1", ")", "\n", "scores", "=", "self", ".", "general", "(", "inputs", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "logits", "=", "torch", ".", "pow", "(", "self", ".", "ws", "[", "0", "]", "*", "torch", ".", "abs", "(", "scores", ")", "-", "self", ".", "ws", "[", "1", "]", ",", "2", ")", "\n", "# logits: (bsize, src_len)", "\n", "", "log_probs", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "sample_mode", "==", "0", ":", "\n", "            ", "_", ",", "instance_inds", "=", "torch", ".", "max", "(", "log_probs", "+", "1.0", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "sample_mode", "==", "1", ":", "\n", "            ", "instance_inds", "=", "Categorical", "(", "logits", "=", "log_probs", ")", ".", "sample", "(", ")", "\n", "", "return", "instance_inds", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.__init__": [[85, 99], ["torch.Module.__init__", "modules.ranker.Ranker", "modules.grounding_loss.GroundingLoss", "modules.tirg_rnn.TIRGRNNCell", "torch.GRU", "torch.GRU", "torch.GRU", "context_encoder.PolicyNet"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ContextEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "ranker", "=", "Ranker", "(", "self", ".", "cfg", ")", "\n", "self", ".", "criterion", "=", "GroundingLoss", "(", "self", ".", "cfg", ")", "\n", "## Actually they are the same", "\n", "if", "self", ".", "cfg", ".", "tirg_rnn", ":", "\n", "            ", "self", ".", "updater", "=", "TIRGRNNCell", "(", "self", ".", "cfg", ",", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "updater", "=", "nn", ".", "GRU", "(", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ",", "1", ",", "batch_first", "=", "True", ")", "\n", "", "if", "self", ".", "cfg", ".", "use_txt_context", ":", "\n", "# Whether to use a context encoder", "\n", "            ", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "                ", "self", ".", "policy", "=", "PolicyNet", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.init_hidden": [[100, 108], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "vhs.cuda.cuda.cuda"], "methods", ["None"], ["", "", "", "def", "init_hidden", "(", "self", ",", "bsize", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "vhs", "=", "torch", ".", "zeros", "(", "bsize", ",", "self", ".", "cfg", ".", "instance_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "", "else", ":", "\n", "            ", "vhs", "=", "torch", ".", "zeros", "(", "bsize", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "vhs", "=", "vhs", ".", "cuda", "(", ")", "\n", "", "return", "vhs", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.forward": [[109, 223], ["input_feats.size", "context_encoder.ContextEncoder.updater.flatten_parameters", "context_encoder.ContextEncoder.updater", "input_feats.size", "hiddens.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "hiddens.unsqueeze", "input_feats[].unsqueeze", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "instance_inds.cuda.cuda.view().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "context_encoder.ContextEncoder.updater", "current_hiddens.clone", "current_hiddens.clone.scatter_", "torch.stack.append", "torch.stack.append", "torch.stack.append", "context_encoder.ContextEncoder.policy", "input_feats[].unsqueeze.detach", "current_hiddens.detach", "instance_inds.cuda.cuda.view", "instance_inds.cuda.cuda.new_ones().float", "context_encoder.ContextEncoder.policy", "context_encoder.ContextEncoder.rollout_search", "context_encoder.ContextEncoder.policy", "sample_rewards.append", "input_feats[].unsqueeze.new_zeros().long", "input_feats[].unsqueeze.detach", "current_hiddens.detach", "input_feats[].view().detach", "txt_masks[].view().detach", "current_hiddens.detach", "tgt_feats.detach", "tgt_masks.detach", "input_feats[].unsqueeze.detach", "current_hiddens.detach", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "instance_inds.cuda.cuda.new_ones", "input_feats[].unsqueeze.new_ones", "input_feats[].unsqueeze.new_zeros", "instance_inds.cuda.cuda.cuda", "input_feats[].unsqueeze.new_ones", "input_feats[].view", "txt_masks[].view", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.tirg_rnn.TIRGRNN.flatten_parameters", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.rollout_search"], ["", "def", "forward", "(", "self", ",", "scene_inds", ",", "\n", "txt_feats", ",", "txt_masks", ",", "hiddens", ",", "\n", "src_feats", ",", "src_masks", ",", "# in case we'd like to try using image contexts as input ", "\n", "tgt_feats", ",", "tgt_masks", ",", "\n", "sample_mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - **scene_inds** (bsize, )\n            - **txt_feats**  (bsize, nturns, n_feature_dim)\n            - **txt_masks**  (bsize, nturns)\n            - **hiddens**    (num_layers, bsize, n_feature_dim)\n            - **src_feats**  (bsize, nturns, nregions, n_feature_dim)\n            - **src_masks**  (bsize, nturns, nregions)\n            - **tgt_feats**  (bsize, nturns, nregions, n_feature_dim)\n            - **tgt_masks**  (bsize, nturns, nregions)\n            - **sample_mode**\n                0: top1\n                1: multinomial sampling\n                2: circular\n                3: fixed indices\n                4: random\n                5: rollout greedy search\n        Returns\n            - **output_feats** (bsize, nturns, (ninsts), n_feature_dim)\n            - **next_hiddens** (num_layers, bsize, n_feature_dim)\n            - **sample_logits** (bsize, nturns)\n            - **sample_indices** (bsize, nturns)\n        \"\"\"", "\n", "input_feats", "=", "txt_feats", "\n", "\n", "if", "not", "self", ".", "cfg", ".", "use_txt_context", ":", "\n", "#TODO: do NOT use updater?", "\n", "            ", "bsize", ",", "nturns", ",", "fsize", "=", "input_feats", ".", "size", "(", ")", "\n", "output_feats", "=", "input_feats", "# For paragraph model", "\n", "# output_feats = self.updater(input_feats, hiddens.view(bsize, 1, fsize).expand(bsize, nturns, fsize))", "\n", "return", "output_feats", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "instance_dim", "<", "2", ":", "\n", "# one dimensional context", "\n", "                ", "self", ".", "updater", ".", "flatten_parameters", "(", ")", "\n", "output_feats", ",", "next_hiddens", "=", "self", ".", "updater", "(", "input_feats", ",", "hiddens", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "output_feats", ",", "next_hiddens", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "# two dimensional context", "\n", "                ", "bsize", ",", "nturns", ",", "input_dim", "=", "input_feats", ".", "size", "(", ")", "\n", "bsize", ",", "ninsts", ",", "hidden_dim", "=", "hiddens", ".", "size", "(", ")", "\n", "current_hiddens", "=", "hiddens", "\n", "output_feats", ",", "sample_logits", ",", "sample_indices", ",", "sample_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "nturns", ")", ":", "\n", "#######################################################", "\n", "# search for the instance indices", "\n", "#######################################################", "\n", "                    ", "query_feats", "=", "input_feats", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "cfg", ".", "rl_finetune", ">", "0", ":", "\n", "#######################################################", "\n", "# Learnable policy", "\n", "#######################################################", "\n", "                        ", "if", "sample_mode", "<", "2", ":", "\n", "###################################################", "\n", "## Inference mode", "\n", "###################################################", "\n", "                            ", "if", "i", "<", "self", ".", "cfg", ".", "instance_dim", ":", "\n", "                                ", "instance_inds", "=", "(", "(", "i", "%", "self", ".", "cfg", ".", "instance_dim", ")", "*", "query_feats", ".", "new_ones", "(", "bsize", ")", ")", ".", "long", "(", ")", "\n", "logits", "=", "instance_inds", ".", "new_ones", "(", "bsize", ",", "self", ".", "cfg", ".", "instance_dim", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                                ", "instance_inds", ",", "logits", "=", "self", ".", "policy", "(", "query_feats", ".", "detach", "(", ")", ",", "current_hiddens", ".", "detach", "(", ")", ",", "sample_mode", ")", "\n", "", "", "elif", "sample_mode", "==", "5", ":", "\n", "###################################################", "\n", "# rollout greedy search", "\n", "###################################################", "\n", "                            ", "instance_inds", ",", "rewards", "=", "self", ".", "rollout_search", "(", "\n", "i", ",", "nturns", ",", "\n", "input_feats", "[", ":", ",", "i", ":", "]", ".", "view", "(", "bsize", ",", "nturns", "-", "i", ",", "input_dim", ")", ".", "detach", "(", ")", ",", "\n", "txt_masks", "[", ":", ",", "i", ":", "]", ".", "view", "(", "bsize", ",", "nturns", "-", "i", ")", ".", "detach", "(", ")", ",", "\n", "scene_inds", ",", "\n", "current_hiddens", ".", "detach", "(", ")", ",", "\n", "tgt_feats", ".", "detach", "(", ")", ",", "tgt_masks", ".", "detach", "(", ")", ",", "\n", "sample_mode", "=", "1", ")", "\n", "########################################################################", "\n", "# TODO: whether to backprop more", "\n", "########################################################################", "\n", "_", ",", "logits", "=", "self", ".", "policy", "(", "query_feats", ".", "detach", "(", ")", ",", "current_hiddens", ".", "detach", "(", ")", ",", "1", ")", "\n", "sample_rewards", ".", "append", "(", "rewards", ")", "\n", "", "", "else", ":", "\n", "#######################################################", "\n", "# Fixed policies", "\n", "#######################################################", "\n", "                        ", "if", "sample_mode", "==", "2", ":", "\n", "                            ", "instance_inds", "=", "(", "(", "i", "%", "self", ".", "cfg", ".", "instance_dim", ")", "*", "query_feats", ".", "new_ones", "(", "bsize", ")", ")", ".", "long", "(", ")", "\n", "", "elif", "sample_mode", "==", "3", ":", "\n", "                            ", "instance_inds", "=", "(", "query_feats", ".", "new_zeros", "(", "bsize", ")", ")", ".", "long", "(", ")", "\n", "", "elif", "sample_mode", "==", "4", ":", "\n", "                            ", "instance_inds", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "cfg", ".", "instance_dim", ",", "size", "=", "(", "bsize", ",", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "                                ", "instance_inds", "=", "instance_inds", ".", "cuda", "(", ")", "\n", "", "", "_", ",", "logits", "=", "self", ".", "policy", "(", "query_feats", ".", "detach", "(", ")", ",", "current_hiddens", ".", "detach", "(", ")", ",", "1", ")", "\n", "\n", "", "sample_indices", ".", "append", "(", "instance_inds", ")", "\n", "sample_logits", ".", "append", "(", "logits", ")", "\n", "#######################################################", "\n", "# update the hidden states using the instance indices", "\n", "#######################################################", "\n", "instance_inds", "=", "instance_inds", ".", "view", "(", "bsize", ",", "1", ",", "1", ")", ".", "expand", "(", "bsize", ",", "1", ",", "hidden_dim", ")", "\n", "sample_hiddens", "=", "torch", ".", "gather", "(", "current_hiddens", ",", "1", ",", "instance_inds", ")", "\n", "h", "=", "self", ".", "updater", "(", "query_feats", ",", "sample_hiddens", ")", "\n", "next_hiddens", "=", "current_hiddens", ".", "clone", "(", ")", "\n", "next_hiddens", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "instance_inds", ",", "src", "=", "h", ")", "\n", "output_feats", ".", "append", "(", "next_hiddens", ")", "\n", "current_hiddens", "=", "next_hiddens", "\n", "", "sample_indices", "=", "torch", ".", "stack", "(", "sample_indices", ",", "1", ")", "\n", "sample_logits", "=", "torch", ".", "stack", "(", "sample_logits", ",", "1", ")", "\n", "output_feats", "=", "torch", ".", "stack", "(", "output_feats", ",", "1", ")", "\n", "return", "output_feats", ",", "next_hiddens", ",", "sample_logits", ",", "sample_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.compute_similarity": [[224, 237], ["tgt_feats.size", "tgt_feats.new_ones", "src_feats.size", "context_encoder.ContextEncoder.criterion.compute_pairwise_similarity", "context_encoder.ContextEncoder.criterion.pairwise_similarity_to_score", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "reduce_similarities.view", "reduce_similarities", "tgt_feats.view"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.reduce_similarities"], ["", "", "", "def", "compute_similarity", "(", "self", ",", "tgt_feats", ",", "src_feats", ",", "src_masks", ")", ":", "\n", "        ", "bsize", ",", "nturns", ",", "ninsts", ",", "hidden_dim", "=", "tgt_feats", ".", "size", "(", ")", "\n", "tgt_masks", "=", "tgt_feats", ".", "new_ones", "(", "bsize", ",", "nturns", ",", "ninsts", ")", "\n", "bsize", ",", "nregions", ",", "_", "=", "src_feats", ".", "size", "(", ")", "\n", "sims", "=", "self", ".", "criterion", ".", "compute_pairwise_similarity", "(", "\n", "src_feats", ",", "src_masks", ",", "\n", "tgt_feats", ".", "view", "(", "bsize", ",", "nturns", "*", "ninsts", ",", "hidden_dim", ")", ")", "\n", "scores", "=", "self", ".", "criterion", ".", "pairwise_similarity_to_score", "(", "sims", ",", "src_masks", ")", "\n", "sims", "=", "torch", ".", "sum", "(", "sims", "*", "scores", ",", "-", "1", ")", "\n", "sims", "=", "sims", ".", "view", "(", "bsize", ",", "nturns", ",", "ninsts", ")", "\n", "sims", "=", "reduce_similarities", "(", "sims", ",", "tgt_masks", ",", "self", ".", "cfg", ".", "sim_reduction_mode", ")", "\n", "# sims: (bsize, nturns)", "\n", "return", "sims", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.rollout_search": [[238, 293], ["rest_feats.size", "states.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "context_encoder.ContextEncoder.compute_similarity", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "states.detach", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "trajectories.append", "states.view", "context_encoder.ContextEncoder.compute_similarity", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "rest_feats[].unsqueeze", "instance_inds.view().expand.view().expand.view().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "context_encoder.ContextEncoder.updater", "states.detach.clone", "states.detach.clone.scatter_", "torch.stack.append", "torch.stack.append", "torch.stack.append", "context_encoder.ContextEncoder.policy", "rest_feats[].unsqueeze.detach", "states.detach.detach", "instance_inds.view().expand.view().expand.view", "torch.stack.new_ones", "torch.stack.new_ones", "torch.stack.new_ones", "rest_feats.new_ones"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.compute_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.ContextEncoder.compute_similarity"], ["", "def", "rollout_search", "(", "self", ",", "current_turn", ",", "max_turns", ",", "\n", "rest_feats", ",", "rest_masks", ",", "rest_inds", ",", "\n", "states", ",", "src_feats", ",", "src_masks", ",", "sample_mode", ")", ":", "\n", "\n", "        ", "bsize", ",", "nturns", ",", "query_dim", "=", "rest_feats", ".", "size", "(", ")", "\n", "bsize", ",", "ninsts", ",", "hidden_dim", "=", "states", ".", "size", "(", ")", "\n", "assert", "(", "max_turns", "-", "current_turn", "==", "nturns", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "trajectories", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ninsts", ")", ":", "\n", "                ", "output_feats", "=", "[", "]", "\n", "current_hiddens", "=", "states", ".", "detach", "(", ")", "\n", "# nsteps = 1", "\n", "nsteps", "=", "nturns", "\n", "for", "j", "in", "range", "(", "nsteps", ")", ":", "\n", "                    ", "query_feats", "=", "rest_feats", "[", ":", ",", "j", "]", ".", "unsqueeze", "(", "1", ")", "\n", "if", "j", "==", "0", ":", "\n", "                        ", "instance_inds", "=", "(", "i", "*", "rest_feats", ".", "new_ones", "(", "bsize", ")", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                        ", "instance_inds", ",", "_", "=", "self", ".", "policy", "(", "query_feats", ".", "detach", "(", ")", ",", "current_hiddens", ".", "detach", "(", ")", ",", "sample_mode", ")", "\n", "#######################################################", "\n", "# update the hidden states using the instance indices", "\n", "#######################################################", "\n", "", "instance_inds", "=", "instance_inds", ".", "view", "(", "bsize", ",", "1", ",", "1", ")", ".", "expand", "(", "bsize", ",", "1", ",", "hidden_dim", ")", "\n", "sample_hiddens", "=", "torch", ".", "gather", "(", "current_hiddens", ",", "1", ",", "instance_inds", ")", "\n", "h", "=", "self", ".", "updater", "(", "query_feats", ",", "sample_hiddens", ")", "\n", "next_hiddens", "=", "current_hiddens", ".", "clone", "(", ")", "\n", "next_hiddens", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "instance_inds", ",", "src", "=", "h", ")", "\n", "output_feats", ".", "append", "(", "next_hiddens", ")", "\n", "current_hiddens", "=", "next_hiddens", "\n", "# output_feats: (bsize, 1, ninsts, hidden_dim)", "\n", "", "output_feats", "=", "torch", ".", "stack", "(", "output_feats", ",", "1", ")", "\n", "trajectories", ".", "append", "(", "output_feats", ")", "\n", "\n", "", "base_sims", "=", "self", ".", "compute_similarity", "(", "\n", "states", ".", "view", "(", "bsize", ",", "1", ",", "ninsts", ",", "hidden_dim", ")", ",", "\n", "src_feats", ",", "src_masks", ")", "\n", "rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ninsts", ")", ":", "\n", "                ", "curr_sims", "=", "self", ".", "compute_similarity", "(", "trajectories", "[", "i", "]", ",", "src_feats", ",", "src_masks", ")", "\n", "# base_sims: (bsize, 1)", "\n", "# curr_sims: (bsize, nturns)", "\n", "improvements", "=", "curr_sims", "-", "base_sims", "\n", "curr_rewards", "=", "torch", ".", "sum", "(", "improvements", ",", "-", "1", ")", "\n", "rewards", ".", "append", "(", "curr_rewards", ")", "\n", "", "rewards", "=", "torch", ".", "stack", "(", "rewards", ",", "-", "1", ")", "\n", "# rewards: (bsize, ninsts)", "\n", "rewards", ",", "instance_inds", "=", "torch", ".", "max", "(", "rewards", ",", "-", "1", ")", "\n", "\n", "# the first instance_dim steps always use empty states", "\n", "if", "current_turn", "<", "self", ".", "cfg", ".", "instance_dim", ":", "\n", "                ", "instance_inds", "=", "(", "current_turn", "*", "rewards", ".", "new_ones", "(", "bsize", ")", ")", ".", "long", "(", ")", "\n", "\n", "", "return", "instance_inds", ",", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.SoftContextEncoder.__init__": [[296, 332], ["torch.Module.__init__", "modules.ranker.Ranker", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "#########################################", "\n", "## Can be ignored, does not help", "\n", "#########################################", "\n", "        ", "super", "(", "SoftContextEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "ranker", "=", "Ranker", "(", "self", ".", "cfg", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "ConvTranspose1d", "(", "\n", "in_channels", "=", "self", ".", "cfg", ".", "n_feature_dim", ",", "\n", "out_channels", "=", "self", ".", "cfg", ".", "n_feature_dim", ",", "\n", "kernel_size", "=", "self", ".", "cfg", ".", "instance_dim", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "1", ")", "\n", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "d_model", "=", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "\n", "nhead", "=", "4", ",", "\n", "dim_feedforward", "=", "self", ".", "cfg", ".", "n_feature_dim", "\n", ")", "\n", "\n", "self", ".", "z_gate", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "TransformerEncoder", "(", "encoder_layer", "=", "encoder_layer", ",", "num_layers", "=", "1", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", ")", "\n", "self", ".", "r_gate", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "TransformerEncoder", "(", "encoder_layer", "=", "encoder_layer", ",", "num_layers", "=", "1", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", ")", "\n", "self", ".", "u_gate", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "TransformerEncoder", "(", "encoder_layer", "=", "encoder_layer", ",", "num_layers", "=", "1", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "cfg", ".", "n_feature_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.SoftContextEncoder.init_hidden": [[364, 372], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "vhs.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsize", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "vhs", "=", "torch", ".", "zeros", "(", "bsize", ",", "self", ".", "cfg", ".", "instance_dim", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "", "else", ":", "\n", "            ", "vhs", "=", "torch", ".", "zeros", "(", "bsize", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "vhs", "=", "vhs", ".", "cuda", "(", ")", "\n", "", "return", "vhs", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.context_encoder.SoftContextEncoder.forward": [[373, 424], ["txt_feats.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "txt_feats[].unsqueeze", "context_encoder.SoftContextEncoder.project", "projected_feats.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.stack.append", "torch.stack.append", "torch.stack.append", "context_encoder.SoftContextEncoder.z_gate", "context_encoder.SoftContextEncoder.r_gate", "context_encoder.SoftContextEncoder.u_gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scene_inds", ",", "\n", "txt_feats", ",", "txt_masks", ",", "hiddens", ",", "\n", "src_feats", ",", "src_masks", ",", "# in case we'd like to try using image contexts as input ", "\n", "tgt_feats", ",", "tgt_masks", ",", "\n", "sample_mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - **scene_inds** (bsize, )\n            - **txt_feats**  (bsize, nturns, n_feature_dim)\n            - **txt_masks**  (bsize, nturns)\n            - **hiddens**    (num_layers, bsize, n_feature_dim)\n            - **src_feats**  (bsize, nturns, nregions, n_feature_dim)\n            - **src_masks**  (bsize, nturns, nregions)\n            - **tgt_feats**  (bsize, nturns, nregions, n_feature_dim)\n            - **tgt_masks**  (bsize, nturns, nregions)\n            - **sample_mode**\n                0: top1\n                1: multinomial sampling\n                2: circular\n                3: fixed indices\n                4: random\n                5: rollout greedy search\n        Returns\n            - **output_feats** (bsize, nturns, (ninsts), n_feature_dim)\n            - **next_hiddens** (num_layers, bsize, n_feature_dim)\n            - **sample_logits** (bsize, nturns)\n            - **sample_indices** (bsize, nturns)\n        \"\"\"", "\n", "output_feats", "=", "[", "]", "\n", "bsize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "current_hiddens", "=", "hiddens", "\n", "for", "i", "in", "range", "(", "nturns", ")", ":", "\n", "            ", "query_feats", "=", "txt_feats", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "projected_feats", "=", "self", ".", "project", "(", "query_feats", ")", "\n", "projected_feats", "=", "projected_feats", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# projected_feats: (bsize, ninsts, fsize)", "\n", "prev_feats", "=", "torch", ".", "cat", "(", "[", "current_hiddens", ",", "projected_feats", "]", ",", "-", "1", ")", "\n", "# print(i, 'prev_feats.size()',prev_feats.size())", "\n", "z_t", "=", "torch", ".", "sigmoid", "(", "self", ".", "z_gate", "(", "prev_feats", ")", ")", "\n", "# print(i, 'z_t.size()',z_t.size())", "\n", "r_t", "=", "torch", ".", "sigmoid", "(", "self", ".", "r_gate", "(", "prev_feats", ")", ")", "\n", "# print(i, 'r_t.size()',r_t.size())", "\n", "hhat_t", "=", "torch", ".", "cat", "(", "[", "r_t", "*", "current_hiddens", ",", "projected_feats", "]", ",", "-", "1", ")", "\n", "# print(i, 'hhat_t.size()',hhat_t.size())", "\n", "hhat_t", "=", "torch", ".", "tanh", "(", "self", ".", "u_gate", "(", "hhat_t", ")", ")", "\n", "next_hiddens", "=", "(", "1", "-", "z_t", ")", "*", "current_hiddens", "+", "z_t", "*", "hhat_t", "\n", "output_feats", ".", "append", "(", "next_hiddens", ")", "\n", "current_hiddens", "=", "next_hiddens", "\n", "\n", "", "output_feats", "=", "torch", ".", "stack", "(", "output_feats", ",", "1", ")", "\n", "return", "output_feats", ",", "next_hiddens", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.__init__": [[87, 109], ["modules.image_hred_model.ImageHREDModel", "filter", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Optimizer", "print", "print", "image_hred_trainer.ImageHREDTrainer.net.named_parameters", "print", "print", "image_hred_trainer.ImageHREDTrainer.net.named_parameters", "image_hred_trainer.ImageHREDTrainer.net.parameters", "image_hred_trainer.ImageHREDTrainer.load_pretrained_net", "print", "param.size", "print", "param.size"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.load_pretrained_net"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "config", "\n", "self", ".", "net", "=", "ImageHREDModel", "(", "config", ")", "\n", "params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "raw_optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "cfg", ".", "lr", ")", "\n", "optimizer", "=", "Optimizer", "(", "raw_optimizer", ",", "max_grad_norm", "=", "self", ".", "cfg", ".", "grad_norm_clipping", ")", "\n", "# scheduler = optim.lr_scheduler.StepLR(optimizer.optimizer, step_size=self.cfg.n_epochs//2, gamma=0.1)", "\n", "# optimizer.set_scheduler(scheduler)", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "epoch", "=", "0", "\n", "if", "self", ".", "cfg", ".", "pretrained", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_pretrained_net", "(", "self", ".", "cfg", ".", "pretrained", ")", "\n", "\n", "", "print", "(", "'-------------------'", ")", "\n", "print", "(", "'All parameters'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "", "print", "(", "'-------------------'", ")", "\n", "print", "(", "'Trainable parameters'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.batch_data": [[110, 119], ["entry[].float", "entry[].long", "entry[].float", "sent_inds.cuda.cuda.cuda", "sent_msks.cuda.cuda.cuda", "images.cuda.cuda.cuda"], "methods", ["None"], ["", "", "", "def", "batch_data", "(", "self", ",", "entry", ")", ":", "\n", "        ", "images", "=", "entry", "[", "'images'", "]", ".", "float", "(", ")", "\n", "sent_inds", "=", "entry", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "entry", "[", "'sent_msks'", "]", ".", "float", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "sent_inds", "=", "sent_inds", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "sent_msks", "=", "sent_msks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "return", "images", ",", "sent_inds", ",", "sent_msks", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.train": [[120, 181], ["logz.configure_output_dir", "logz.save_config", "time.time.time", "datasets.loader.caption_loader", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "image_hred_trainer.ImageHREDTrainer.train_epoch", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "image_hred_trainer.ImageHREDTrainer.validate_epoch", "numpy.mean", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "numpy.zeros", "val_metrics.items", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.dump_tabular", "numpy.mean", "image_hred_trainer.ImageHREDTrainer.save_checkpoint", "time.time.time", "numpy.array", "open", "json.dump", "open", "pickle.dump", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.configure_output_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_config", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train_epoch", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.validate_epoch", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.dump_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.save_checkpoint"], ["", "def", "train", "(", "self", ",", "train_db", ",", "val_db", ",", "test_db", ")", ":", "\n", "##################################################################", "\n", "## LOG", "\n", "##################################################################", "\n", "        ", "logz", ".", "configure_output_dir", "(", "self", ".", "cfg", ".", "model_dir", ")", "\n", "logz", ".", "save_config", "(", "self", ".", "cfg", ")", "\n", "\n", "##################################################################", "\n", "## Main loop", "\n", "##################################################################", "\n", "start", "=", "time", "(", ")", "\n", "min_val_loss", "=", "10000.0", "\n", "train_loaddb", "=", "caption_loader", "(", "train_db", ")", "\n", "val_loaddb", "=", "caption_loader", "(", "val_db", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "caption_collate_fn", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ",", "self", ".", "cfg", ".", "n_epochs", ")", ":", "\n", "##################################################################", "\n", "## Training", "\n", "##################################################################", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "train_losses", "=", "self", ".", "train_epoch", "(", "train_loaddb", ",", "train_loader", ",", "epoch", ")", "\n", "\n", "##################################################################", "\n", "## Validation", "\n", "##################################################################", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "val_losses", ",", "val_metrics", ",", "caches_results", "=", "self", ".", "validate_epoch", "(", "val_loaddb", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "#################################################################", "\n", "# Logging", "\n", "#################################################################", "\n", "\n", "# update optim scheduler", "\n", "current_val_loss", "=", "np", ".", "mean", "(", "val_losses", ")", "\n", "# self.optimizer.update(current_val_loss, epoch)", "\n", "logz", ".", "log_tabular", "(", "\"Time\"", ",", "time", "(", ")", "-", "start", ")", "\n", "logz", ".", "log_tabular", "(", "\"Iteration\"", ",", "epoch", ")", "\n", "logz", ".", "log_tabular", "(", "\"TrainAverageLoss\"", ",", "np", ".", "mean", "(", "train_losses", ")", ")", "\n", "logz", ".", "log_tabular", "(", "\"ValAverageLoss\"", ",", "current_val_loss", ")", "\n", "mmm", "=", "np", ".", "zeros", "(", "(", "5", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "k", ",", "v", "in", "val_metrics", ".", "items", "(", ")", ":", "\n", "                ", "mmm", "=", "mmm", "+", "np", ".", "array", "(", "v", ")", "\n", "", "mmm", "/=", "self", ".", "cfg", ".", "max_turns", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R1\"", ",", "mmm", "[", "0", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R5\"", ",", "mmm", "[", "1", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R10\"", ",", "mmm", "[", "2", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_medr\"", ",", "mmm", "[", "3", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_meanr\"", ",", "mmm", "[", "4", "]", ")", "\n", "logz", ".", "dump_tabular", "(", ")", "\n", "##################################################################", "\n", "## Checkpoint", "\n", "##################################################################", "\n", "if", "min_val_loss", ">", "current_val_loss", ":", "\n", "                ", "min_val_loss", "=", "current_val_loss", "\n", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_metrics_%d.json'", "%", "epoch", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "                    ", "json", ".", "dump", "(", "val_metrics", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_top5_inds_%d.pkl'", "%", "epoch", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "                    ", "pickle", ".", "dump", "(", "caches_results", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.test": [[182, 244], ["logz.configure_output_dir", "logz.save_config", "time.time.time", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "image_hred_trainer.ImageHREDTrainer.net.eval", "enumerate", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "print", "image_hred_trainer.ImageHREDTrainer.net.evaluate", "image_hred_trainer.visualize", "image_hred_trainer.ImageHREDTrainer.batch_data", "numpy.array.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "open", "pickle.dump", "open", "json.dump", "open", "pickle.dump", "os.join", "os.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_hred_trainer.ImageHREDTrainer.net", "image_hred_trainer.ImageHREDTrainer.net.forward_loss", "image_hred_trainer.ImageHREDTrainer.cpu().data.item", "print", "numpy.stack", "print", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "numpy.mean", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "image_hred_trainer.ImageHREDTrainer.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.configure_output_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_config", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.visualize", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss"], ["", "", "", "", "def", "test", "(", "self", ",", "test_db", ")", ":", "\n", "##################################################################", "\n", "## LOG", "\n", "##################################################################", "\n", "        ", "logz", ".", "configure_output_dir", "(", "self", ".", "cfg", ".", "model_dir", ")", "\n", "logz", ".", "save_config", "(", "self", ".", "cfg", ")", "\n", "start", "=", "time", "(", ")", "\n", "test_loaddb", "=", "caption_loader", "(", "test_db", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "all_txt_feats", ",", "all_img_feats", ",", "losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "images", ",", "sent_inds", ",", "sent_msks", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Inference one step", "\n", "##################################################################   ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img_feats", ",", "txt_feats", "=", "self", ".", "net", "(", "sent_inds", ",", "sent_msks", ",", "None", ",", "images", ")", "\n", "loss", "=", "self", ".", "net", ".", "forward_loss", "(", "img_feats", ",", "txt_feats", ")", "\n", "", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "all_txt_feats", ".", "append", "(", "txt_feats", ")", "\n", "all_img_feats", ".", "append", "(", "img_feats", ")", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Iter %07d:'", "%", "(", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "all_img_feats", "=", "torch", ".", "cat", "(", "all_img_feats", ",", "0", ")", "\n", "all_txt_feats", "=", "torch", ".", "cat", "(", "all_txt_feats", ",", "0", ")", "\n", "\n", "\n", "# print('all_img_feats', all_img_feats.size())", "\n", "all_img_feats_np", "=", "all_img_feats", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'img_features_%d.pkl'", "%", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_img_feats_np", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "##################################################################", "\n", "## Evaluation", "\n", "##################################################################", "\n", "", "print", "(", "'Evaluating the per-turn performance, may take a while.'", ")", "\n", "metrics", ",", "caches_results", "=", "self", ".", "net", ".", "evaluate", "(", "all_img_feats", ",", "all_txt_feats", ")", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'test_metrics.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "metrics", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'test_caches.pkl'", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "caches_results", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "visualize", "(", "self", ".", "cfg", ".", "exp_name", ",", "metrics", ",", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'evaluation.png'", ")", ")", "\n", "\n", "return", "losses", ",", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.train_epoch": [[245, 277], ["image_hred_trainer.ImageHREDTrainer.net.train", "enumerate", "image_hred_trainer.ImageHREDTrainer.batch_data", "image_hred_trainer.ImageHREDTrainer.net", "image_hred_trainer.ImageHREDTrainer.net.forward_loss", "image_hred_trainer.ImageHREDTrainer.net.zero_grad", "image_hred_trainer.ImageHREDTrainer.backward", "image_hred_trainer.ImageHREDTrainer.optimizer.step", "losses.append", "image_hred_trainer.ImageHREDTrainer.cpu().data.item", "print", "numpy.stack", "print", "print", "numpy.mean", "image_hred_trainer.ImageHREDTrainer.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step"], ["", "def", "train_epoch", "(", "self", ",", "train_loaddb", ",", "train_loader", ",", "epoch", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "images", ",", "sent_inds", ",", "sent_msks", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Train one step", "\n", "##################################################################", "\n", "img_feats", ",", "txt_feats", "=", "self", ".", "net", "(", "sent_inds", ",", "sent_msks", ",", "None", ",", "images", ")", "\n", "loss", "=", "self", ".", "net", ".", "forward_loss", "(", "img_feats", ",", "txt_feats", ")", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "##################################################################", "\n", "## Collect info", "\n", "##################################################################", "\n", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch %03d, iter %07d:'", "%", "(", "epoch", ",", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.validate_epoch": [[278, 314], ["image_hred_trainer.ImageHREDTrainer.net.eval", "enumerate", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image_hred_trainer.ImageHREDTrainer.net.evaluate", "image_hred_trainer.ImageHREDTrainer.batch_data", "numpy.array.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_hred_trainer.ImageHREDTrainer.net", "image_hred_trainer.ImageHREDTrainer.net.forward_loss", "image_hred_trainer.ImageHREDTrainer.cpu().data.item", "print", "numpy.stack", "print", "print", "numpy.mean", "image_hred_trainer.ImageHREDTrainer.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss"], ["", "def", "validate_epoch", "(", "self", ",", "val_loaddb", ",", "val_loader", ",", "epoch", ")", ":", "\n", "        ", "all_txt_feats", ",", "all_img_feats", ",", "losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "images", ",", "sent_inds", ",", "sent_msks", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Inference one step", "\n", "##################################################################   ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img_feats", ",", "txt_feats", "=", "self", ".", "net", "(", "sent_inds", ",", "sent_msks", ",", "None", ",", "images", ")", "\n", "loss", "=", "self", ".", "net", ".", "forward_loss", "(", "img_feats", ",", "txt_feats", ")", "\n", "", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "all_txt_feats", ".", "append", "(", "txt_feats", ")", "\n", "all_img_feats", ".", "append", "(", "img_feats", ")", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Val Epoch %03d, iter %07d:'", "%", "(", "epoch", ",", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "\n", "", "", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "all_img_feats", "=", "torch", ".", "cat", "(", "all_img_feats", ",", "0", ")", "\n", "all_txt_feats", "=", "torch", ".", "cat", "(", "all_txt_feats", ",", "0", ")", "\n", "##################################################################", "\n", "## Evaluation", "\n", "##################################################################", "\n", "metrics", ",", "caches_results", "=", "self", ".", "net", ".", "evaluate", "(", "all_img_feats", ",", "all_txt_feats", ")", "\n", "\n", "return", "losses", ",", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.load_pretrained_net": [[315, 326], ["os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "image_hred_trainer.ImageHREDTrainer.net.load_state_dict", "image_hred_trainer.ImageHREDTrainer.optimizer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_pretrained_net", "(", "self", ",", "pretrained_name", ")", ":", "\n", "        ", "cache_dir", "=", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data_dir", ",", "'caches'", ")", "\n", "pretrained_path", "=", "osp", ".", "join", "(", "cache_dir", ",", "'image_ckpts'", ",", "pretrained_name", "+", "'.pkl'", ")", "\n", "assert", "osp", ".", "exists", "(", "pretrained_path", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "states", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "", "else", ":", "\n", "            ", "states", "=", "torch", ".", "load", "(", "pretrained_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "", "self", ".", "net", ".", "load_state_dict", "(", "states", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "optimizer", ".", "load_state_dict", "(", "states", "[", "'optimizer'", "]", ")", "\n", "self", ".", "epoch", "=", "states", "[", "'epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.ImageHREDTrainer.save_checkpoint": [[327, 339], ["print", "os.join", "os.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "image_hred_trainer.ImageHREDTrainer.net.state_dict", "image_hred_trainer.ImageHREDTrainer.optimizer.optimizer.state_dict", "os.join", "os.join"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "print", "(", "\" [*] Saving checkpoints...\"", ")", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'image_ckpts'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "# torch.save(states, osp.join(checkpoint_dir, \"ckpt-%03d.pkl\"%epoch))", "\n", "torch", ".", "save", "(", "states", ",", "osp", ".", "join", "(", "checkpoint_dir", ",", "\"best_ckpt.pkl\"", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_hred_trainer.visualize": [[35, 84], ["res.items", "pandas.DataFrame", "seaborn.set_palette", "seaborn.set", "seaborn.relplot", "matplotlib.savefig", "dataframe[].extend", "dataframe[].extend", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "int", "range", "range"], "function", ["None"], ["def", "visualize", "(", "method", ",", "res", ",", "vis_path", ")", ":", "\n", "    ", "dataframe", "=", "{", "'Turn'", ":", "[", "]", ",", "'Recall'", ":", "[", "]", ",", "'Metric'", ":", "[", "]", ",", "'Method'", ":", "[", "]", "}", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "        ", "dataframe", "[", "'Turn'", "]", ".", "extend", "(", "[", "int", "(", "k", ")", "+", "1", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "dataframe", "[", "'Method'", "]", ".", "extend", "(", "[", "method", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@1'", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "1", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@5'", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "2", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@10'", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "dataframe", ")", "\n", "flatui", "=", "[", "\"#6a2c70\"", "]", "\n", "sns", ".", "set_palette", "(", "flatui", ")", "\n", "dash_styles", "=", "[", "(", "4", ",", "1.0", ")", "]", "\n", "\n", "sns", ".", "set", "(", "style", "=", "\"darkgrid\"", ",", "font_scale", "=", "2.0", ")", "\n", "sns_plot", "=", "sns", ".", "relplot", "(", "\n", "x", "=", "'Turn'", ",", "\n", "y", "=", "'Recall'", ",", "\n", "hue", "=", "'Method'", ",", "\n", "size", "=", "None", ",", "\n", "style", "=", "'Method'", ",", "\n", "data", "=", "df", ",", "\n", "row", "=", "None", ",", "\n", "col", "=", "'Metric'", ",", "\n", "col_wrap", "=", "None", ",", "\n", "row_order", "=", "None", ",", "\n", "col_order", "=", "None", ",", "\n", "palette", "=", "flatui", ",", "\n", "hue_order", "=", "None", ",", "\n", "hue_norm", "=", "None", ",", "\n", "sizes", "=", "None", ",", "\n", "size_order", "=", "None", ",", "\n", "size_norm", "=", "None", ",", "\n", "markers", "=", "[", "\"v\"", ",", "\"^\"", ",", "\"<\"", ",", "\">\"", ",", "\"o\"", ",", "\"D\"", "]", ",", "\n", "dashes", "=", "dash_styles", ",", "\n", "style_order", "=", "None", ",", "\n", "legend", "=", "'brief'", ",", "\n", "kind", "=", "'line'", ",", "\n", "height", "=", "5", ",", "\n", "aspect", "=", "1", ",", "\n", "facet_kws", "=", "{", "'sharey'", ":", "True", ",", "'sharex'", ":", "True", ",", "'xlim'", ":", "(", "1", ",", "10", ")", ",", "'ylim'", ":", "(", "2.5", ",", "92.5", ")", "}", "\n", ")", "\n", "\n", "# plt.legend(loc='best').set_draggable(True)", "\n", "# plt.imshow(out)", "\n", "plt", ".", "savefig", "(", "vis_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_encoder.RegionEncoder.__init__": [[14, 21], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "region_encoder.RegionEncoder.init_weights", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RegionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "            ", "self", ".", "subspace_masking", "=", "nn", ".", "Sequential", "(", "nn", ".", "Embedding", "(", "self", ".", "cfg", ".", "n_categories", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ")", "\n", "", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_encoder.RegionEncoder.init_weights": [[22, 28], ["region_encoder.RegionEncoder.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_encoder.RegionEncoder.forward": [[29, 43], ["region_encoder.RegionEncoder.project", "region_encoder.RegionEncoder.subspace_masking", "torch.softmax", "torch.softmax", "torch.softmax", "l1norm"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.l1norm"], ["", "", "", "def", "forward", "(", "self", ",", "region_feats", ",", "region_clses", ")", ":", "\n", "        ", "img_feats", "=", "self", ".", "project", "(", "region_feats", ")", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "# The subspace alignment module is inspired by Conditional Similarity Net", "\n", "# But, can be ignored as it does not help", "\n", "            ", "masks", "=", "self", ".", "subspace_masking", "(", "region_clses", ")", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", "==", "1", ":", "\n", "                ", "masks", "=", "F", ".", "softmax", "(", "self", ".", "cfg", ".", "temperature_lambda", "*", "masks", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "masks", "=", "l1norm", "(", "masks", ")", "\n", "", "masked_feats", "=", "img_feats", "*", "masks", "\n", "return", "img_feats", ",", "masked_feats", ",", "masks", "\n", "", "else", ":", "\n", "            ", "return", "img_feats", ",", "None", ",", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GroundingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity": [[19, 26], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "src_masks.unsqueeze", "src_feats.transpose"], "methods", ["None"], ["", "def", "compute_pairwise_similarity", "(", "self", ",", "src_feats", ",", "src_masks", ",", "tgt_feats", ")", ":", "\n", "# src_feats: (bsize, src_len, feat_dim)", "\n", "# src_masks: (bsize, src_len)", "\n", "# tgt_feats: (bsize, tgt_len, feat_dim)", "\n", "# attn: (bsize, tgt_len, src_len)", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "tgt_feats", ",", "src_feats", ".", "transpose", "(", "1", ",", "2", ")", ")", "*", "src_masks", ".", "unsqueeze", "(", "1", ")", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score": [[27, 35], ["torch.softmax", "torch.softmax", "torch.softmax", "pairwise_similarities.clamp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "pairwise_similarity_to_score", "(", "self", ",", "pairwise_similarities", ",", "masks", ")", ":", "\n", "# pairwise_similarities: (bsize, tgt_len, nregions)", "\n", "# scores = pairwise_similarities - 1e11 * (1.0 - masks.unsqueeze(1))", "\n", "# scores = self.cfg.temperature_lambda * scores.clamp(min=-1e10)", "\n", "        ", "scores", "=", "self", ".", "cfg", ".", "temperature_lambda", "*", "pairwise_similarities", ".", "clamp", "(", "min", "=", "-", "1e10", ")", "\n", "scores", "=", "scores", "-", "torch", ".", "max", "(", "scores", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "scores", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_batch_mutual_similarity": [[36, 69], ["img_feats.size", "grounding_loss.GroundingLoss.compute_pairwise_similarity", "grounding_loss.GroundingLoss.pairwise_similarity_to_score", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "txt_feats.size", "txt_feats.view", "query_feats.view().contiguous.view().contiguous.expand().contiguous", "query_feats.view().contiguous.view().contiguous.view().contiguous", "txt_feats.size", "txt_feats.view", "query_feats.view().contiguous.view().contiguous.expand().contiguous", "query_feats.view().contiguous.view().contiguous.view().contiguous", "similarities.view.view.view", "similarities.view.view.new_ones", "range", "reduce_similarities", "similarities.view.view.view", "query_feats.view().contiguous.view().contiguous.expand", "query_feats.view().contiguous.view().contiguous.view", "query_feats.view().contiguous.view().contiguous.expand", "query_feats.view().contiguous.view().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.reduce_similarities"], ["", "def", "compute_batch_mutual_similarity", "(", "self", ",", "img_feats", ",", "img_masks", ",", "txt_feats", ")", ":", "\n", "# img_feats: (bsize, nregions, feat_dim)", "\n", "# img_masks: (bsize, nregions)", "\n", "# txt_feats: (bsize, nturns, (ninsts), feat_dim)", "\n", "        ", "bsize", ",", "nregions", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "bsize", ",", "nturns", ",", "ninsts", ",", "nchannels", "=", "txt_feats", ".", "size", "(", ")", "\n", "query_feats", "=", "txt_feats", ".", "view", "(", "1", ",", "bsize", ",", "nturns", ",", "ninsts", ",", "nchannels", ")", "\n", "query_feats", "=", "query_feats", ".", "expand", "(", "bsize", ",", "bsize", ",", "nturns", ",", "ninsts", ",", "nchannels", ")", ".", "contiguous", "(", ")", "\n", "query_feats", "=", "query_feats", ".", "view", "(", "bsize", ",", "bsize", "*", "nturns", "*", "ninsts", ",", "nchannels", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "bsize", ",", "nturns", ",", "nchannels", "=", "txt_feats", ".", "size", "(", ")", "\n", "query_feats", "=", "txt_feats", ".", "view", "(", "1", ",", "bsize", ",", "nturns", ",", "nchannels", ")", "\n", "query_feats", "=", "query_feats", ".", "expand", "(", "bsize", ",", "bsize", ",", "nturns", ",", "nchannels", ")", ".", "contiguous", "(", ")", "\n", "query_feats", "=", "query_feats", ".", "view", "(", "bsize", ",", "bsize", "*", "nturns", ",", "nchannels", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "similarities", "=", "self", ".", "compute_pairwise_similarity", "(", "img_feats", ",", "img_masks", ",", "query_feats", ")", "\n", "# similarities: (bsize, *, nregions)", "\n", "scores", "=", "self", ".", "pairwise_similarity_to_score", "(", "similarities", ",", "img_masks", ")", "\n", "similarities", "=", "torch", ".", "sum", "(", "similarities", "*", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# similarities: (bsize, *)", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "similarities", "=", "similarities", ".", "view", "(", "bsize", ",", "bsize", ",", "nturns", ",", "ninsts", ")", "\n", "sim_masks", "=", "similarities", ".", "new_ones", "(", "bsize", ",", "bsize", ",", "nturns", ",", "ninsts", ")", "\n", "for", "i", "in", "range", "(", "ninsts", "-", "1", ")", ":", "\n", "                ", "sim_masks", "[", ":", ",", ":", ",", "i", ",", "(", "i", "+", "1", ")", ":", "]", "=", "0.0", "\n", "", "similarities", "=", "reduce_similarities", "(", "similarities", ",", "sim_masks", ",", "self", ".", "cfg", ".", "sim_reduction_mode", ")", "\n", "", "else", ":", "\n", "            ", "similarities", "=", "similarities", ".", "view", "(", "bsize", ",", "bsize", ",", "nturns", ")", "\n", "\n", "", "return", "similarities", "# (bsize, bsize, nturns)", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.debug_compute_batch_mutual_similarity": [[70, 94], ["img_feats.size", "img_feats.new_zeros", "range", "txt_feats.size", "txt_feats.size", "range", "grounding_loss.GroundingLoss.compute_pairwise_similarity", "grounding_loss.GroundingLoss.pairwise_similarity_to_score", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "reduce_similarities.squeeze", "txt_feats[].view().unsqueeze", "txt_feats[].view", "img_feats[].unsqueeze", "img_masks[].unsqueeze", "img_masks[].unsqueeze", "reduce_similarities.view", "reduce_similarities.new_ones", "range", "reduce_similarities", "txt_feats[].view"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_pairwise_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.pairwise_similarity_to_score", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.reduce_similarities"], ["", "def", "debug_compute_batch_mutual_similarity", "(", "self", ",", "img_feats", ",", "img_masks", ",", "txt_feats", ")", ":", "\n", "        ", "bsize", ",", "nregions", ",", "fsize", "=", "img_feats", ".", "size", "(", ")", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "            ", "bsize", ",", "nturns", ",", "ninsts", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "bsize", ",", "nturns", ",", "fsize", "=", "txt_feats", ".", "size", "(", ")", "\n", "", "similarities", "=", "img_feats", ".", "new_zeros", "(", "bsize", ",", "bsize", ",", "nturns", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "bsize", ")", ":", "\n", "                ", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "                    ", "query", "=", "txt_feats", "[", "j", "]", ".", "view", "(", "nturns", "*", "ninsts", ",", "fsize", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "query", "=", "txt_feats", "[", "j", "]", ".", "view", "(", "1", ",", "nturns", ",", "fsize", ")", "\n", "", "cur_sims", "=", "self", ".", "compute_pairwise_similarity", "(", "img_feats", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "img_masks", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "query", ")", "\n", "scores", "=", "self", ".", "pairwise_similarity_to_score", "(", "cur_sims", ",", "img_masks", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "cur_sims", "=", "torch", ".", "sum", "(", "cur_sims", "*", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "cfg", ".", "instance_dim", ">", "1", ":", "\n", "                    ", "cur_sims", "=", "cur_sims", ".", "view", "(", "1", ",", "nturns", ",", "ninsts", ")", "\n", "cur_msks", "=", "cur_sims", ".", "new_ones", "(", "1", ",", "nturns", ",", "ninsts", ")", "\n", "for", "k", "in", "range", "(", "ninsts", "-", "1", ")", ":", "\n", "                        ", "cur_msks", "[", ":", ",", "k", ",", "(", "k", "+", "1", ")", ":", "]", "=", "0.0", "\n", "", "cur_sims", "=", "reduce_similarities", "(", "cur_sims", ",", "cur_msks", ",", "self", ".", "cfg", ".", "sim_reduction_mode", ")", "\n", "", "similarities", "[", "i", ",", "j", "]", "=", "cur_sims", ".", "squeeze", "(", "0", ")", "\n", "", "", "return", "similarities", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.contrastive_loss": [[95, 122], ["scores.size", "scores.diag().view", "scores.diag().view.expand_as", "scores.diag().view.t().expand_as", "cost_s.masked_fill_.masked_fill_.masked_fill_", "cost_im.masked_fill_.masked_fill_.masked_fill_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "I.cuda.cuda.cuda", "scores.diag", "scores.diag().view.t", "cost_s.masked_fill_.masked_fill_.max", "cost_im.masked_fill_.masked_fill_.max"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "scores", ")", ":", "\n", "# scores: (bsize, bsize)", "\n", "        ", "bsize", ",", "_", "=", "scores", ".", "size", "(", ")", "\n", "diagonal", "=", "scores", ".", "diag", "(", ")", ".", "view", "(", "bsize", ",", "1", ")", "\n", "d1", "=", "diagonal", ".", "expand_as", "(", "scores", ")", "\n", "d2", "=", "diagonal", ".", "t", "(", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "# compare every diagonal score to scores in its column", "\n", "# caption retrieval", "\n", "cost_s", "=", "(", "self", ".", "cfg", ".", "margin", "+", "scores", "-", "d1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "# compare every diagonal score to scores in its row", "\n", "# image retrieval", "\n", "cost_im", "=", "(", "self", ".", "cfg", ".", "margin", "+", "scores", "-", "d2", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "# clear diagonals", "\n", "I", "=", "torch", ".", "eye", "(", "bsize", ")", ">", ".5", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "cost_s", "=", "cost_s", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "cost_im", "=", "cost_im", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "\n", "# keep the maximum violating negative for each query", "\n", "if", "self", ".", "cfg", ".", "max_violation", ":", "\n", "            ", "cost_s", "=", "cost_s", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "cost_im", "=", "cost_im", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "\n", "", "return", "cost_s", "+", "cost_im", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss": [[123, 153], ["grounding_loss.GroundingLoss.compute_batch_mutual_similarity", "grounding_loss.GroundingLoss.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "grounding_loss.GroundingLoss.contrastive_loss", "grounding_loss.GroundingLoss.size", "torch.stack.append", "torch.stack.append", "torch.stack.append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "grounding_loss.GroundingLoss.contrastive_loss", "grounding_loss.GroundingLoss.contrastive_loss", "grounding_loss.GroundingLoss.size", "torch.stack.append", "torch.stack.append", "torch.stack.append", "grounding_loss.GroundingLoss.contrastive_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_batch_mutual_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.contrastive_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.contrastive_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.contrastive_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.contrastive_loss"], ["", "def", "forward_loss", "(", "self", ",", "img_feats", ",", "img_masks", ",", "txt_feats", ",", "txt_masks", ",", "reduce_mode", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - **img_feats** (bsize, nregions, n_feature_dim)\n            - **img_masks** (bsize, nregions)\n            - **txt_feats** (bsize, nturns, n_feature_dim)\n            - **txt_masks** (bsize, nturns)\n            - **reduce_mode**\n                1: per turn contrastive loss\n                2: accumulative contrastive loss\n        Returns\n            - loss\n        \"\"\"", "\n", "similarities", "=", "self", ".", "compute_batch_mutual_similarity", "(", "img_feats", ",", "img_masks", ",", "txt_feats", ")", "\n", "bsize", ",", "bsize", ",", "nturns", "=", "similarities", ".", "size", "(", ")", "\n", "# similarity_masks = txt_masks.unsqueeze(0).expand(bsize, bsize, nturns).contiguous()", "\n", "# similarities = similarities * similarity_masks", "\n", "\n", "if", "reduce_mode", "==", "1", ":", "\n", "            ", "losses", "=", "[", "self", ".", "contrastive_loss", "(", "similarities", "[", ":", ",", ":", ",", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "similarities", ".", "size", "(", "-", "1", ")", ")", ":", "\n", "                ", "losses", ".", "append", "(", "self", ".", "contrastive_loss", "(", "similarities", "[", ":", ",", ":", ",", "i", "]", ")", ")", "\n", "", "losses", "=", "torch", ".", "stack", "(", "losses", ",", "-", "1", ")", "\n", "return", "losses", "\n", "", "elif", "reduce_mode", "==", "2", ":", "\n", "            ", "losses", "=", "[", "self", ".", "contrastive_loss", "(", "similarities", "[", ":", ",", ":", ",", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "similarities", ".", "size", "(", "-", "1", ")", ")", ":", "\n", "                ", "losses", ".", "append", "(", "self", ".", "contrastive_loss", "(", "torch", ".", "mean", "(", "similarities", "[", ":", ",", ":", ",", ":", "(", "i", "+", "1", ")", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "", "losses", "=", "torch", ".", "stack", "(", "losses", ",", "-", "1", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward": [[154, 156], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.contrastive_loss.ContrastiveLoss.__init__": [[13, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "margin", "=", "self", ".", "cfg", ".", "margin", "\n", "self", ".", "sim", "=", "cosine_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.contrastive_loss.ContrastiveLoss.forward": [[19, 54], ["contrastive_loss.ContrastiveLoss.sim", "contrastive_loss.ContrastiveLoss.diag().view", "contrastive_loss.ContrastiveLoss.diag().view.expand_as", "contrastive_loss.ContrastiveLoss.diag().view.t().expand_as", "cost_s.masked_fill_.masked_fill_.masked_fill_", "cost_im.masked_fill_.masked_fill_.masked_fill_", "im.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "I.cuda.cuda.cuda", "cost_s.masked_fill_.masked_fill_.sum", "cost_im.masked_fill_.masked_fill_.sum", "contrastive_loss.ContrastiveLoss.diag", "contrastive_loss.ContrastiveLoss.diag().view.t", "contrastive_loss.ContrastiveLoss.size", "cost_s.masked_fill_.masked_fill_.max", "cost_im.masked_fill_.masked_fill_.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "im", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        Compute contrastive loss\n        Args:\n            - **im**  (bsize, fsize)\n            - **s**   (bsize, fsize)\n        Returns: \n            - **loss**   scalar\n        \"\"\"", "\n", "# compute image-sentence score matrix", "\n", "scores", "=", "self", ".", "sim", "(", "im", ",", "s", ")", "# (bsize, bsize)", "\n", "diagonal", "=", "scores", ".", "diag", "(", ")", ".", "view", "(", "im", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "d1", "=", "diagonal", ".", "expand_as", "(", "scores", ")", "\n", "d2", "=", "diagonal", ".", "t", "(", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "# compare every diagonal score to scores in its column", "\n", "# caption retrieval", "\n", "cost_s", "=", "(", "self", ".", "margin", "+", "scores", "-", "d1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "# compare every diagonal score to scores in its row", "\n", "# image retrieval", "\n", "cost_im", "=", "(", "self", ".", "margin", "+", "scores", "-", "d2", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "# clear diagonals", "\n", "I", "=", "torch", ".", "eye", "(", "scores", ".", "size", "(", "0", ")", ")", ">", ".5", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "cost_s", "=", "cost_s", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "cost_im", "=", "cost_im", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "\n", "# keep the maximum violating negative for each query", "\n", "if", "self", ".", "cfg", ".", "max_violation", ":", "\n", "            ", "cost_s", "=", "cost_s", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "cost_im", "=", "cost_im", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "\n", "", "return", "cost_s", ".", "sum", "(", ")", "+", "cost_im", ".", "sum", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.__init__": [[13, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "image_encoder.ImageEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "config", "\n", "# self.cnn = models.resnet152(pretrained=True)", "\n", "# # For efficient memory usage.", "\n", "# for param in self.cnn.parameters():", "\n", "#     param.requires_grad = self.cfg.finetune", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "cfg", ".", "n_feature_dim", ")", "\n", "# self.cnn.fc = nn.Sequential()", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.init_weights": [[24, 30], ["image_encoder.ImageEncoder.fc.weight.data.uniform_", "image_encoder.ImageEncoder.fc.bias.data.fill_", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Xavier initialization for the fully connected layer\n        \"\"\"", "\n", "r", "=", "np", ".", "sqrt", "(", "6.", ")", "/", "np", ".", "sqrt", "(", "self", ".", "fc", ".", "in_features", "+", "self", ".", "fc", ".", "out_features", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "r", ",", "r", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.image_encoder.ImageEncoder.forward": [[31, 41], ["image_encoder.ImageEncoder.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"Extract image feature vectors.\"\"\"", "\n", "# features = self.cnn(images)", "\n", "# normalization in the image embedding space", "\n", "# features = l2norm(features)", "\n", "# linear projection to the joint embedding space", "\n", "features", "=", "self", ".", "fc", "(", "images", ")", "\n", "# normalization in the joint embedding space", "\n", "# features = l2norm(features)", "\n", "return", "features", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.__init__": [[87, 112], ["modules.region_grounding_model.RegionGroundingModel", "filter", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Optimizer", "print", "print", "region_grounding_trainer.RegionGroundingTrainer.net.named_parameters", "print", "print", "region_grounding_trainer.RegionGroundingTrainer.net.named_parameters", "region_grounding_trainer.RegionGroundingTrainer.net.cuda", "region_grounding_trainer.RegionGroundingTrainer.net.parameters", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.Optimizer.set_scheduler", "region_grounding_trainer.RegionGroundingTrainer.load_pretrained_net", "print", "param.size", "print", "param.size"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.set_scheduler", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.load_pretrained_net"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "config", "\n", "self", ".", "net", "=", "RegionGroundingModel", "(", "config", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "self", ".", "net", "=", "self", ".", "net", ".", "cuda", "(", ")", "\n", "", "params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "raw_optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "cfg", ".", "lr", ")", "\n", "optimizer", "=", "Optimizer", "(", "raw_optimizer", ",", "max_grad_norm", "=", "self", ".", "cfg", ".", "grad_norm_clipping", ")", "\n", "if", "self", ".", "cfg", ".", "coco_mode", ">=", "0", ":", "\n", "            ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ".", "optimizer", ",", "step_size", "=", "75", ",", "gamma", "=", "0.1", ")", "\n", "optimizer", ".", "set_scheduler", "(", "scheduler", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "epoch", "=", "0", "\n", "if", "self", ".", "cfg", ".", "pretrained", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_pretrained_net", "(", "self", ".", "cfg", ".", "pretrained", ")", "\n", "\n", "", "print", "(", "'-------------------'", ")", "\n", "print", "(", "'All parameters'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "", "print", "(", "'-------------------'", ")", "\n", "print", "(", "'Trainable parameters'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data": [[113, 128], ["entry[].long().view", "entry[].long", "entry[].float", "entry[].float", "entry[].float", "entry[].long", "scene_inds.cuda.cuda.cuda", "sent_inds.cuda.cuda.cuda", "sent_msks.cuda.cuda.cuda", "region_feats.cuda.cuda.cuda", "region_masks.cuda.cuda.cuda", "region_clses.cuda.cuda.cuda", "entry[].long"], "methods", ["None"], ["", "", "", "def", "batch_data", "(", "self", ",", "entry", ")", ":", "\n", "        ", "scene_inds", "=", "entry", "[", "'scene_inds'", "]", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "sent_inds", "=", "entry", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "entry", "[", "'sent_msks'", "]", ".", "float", "(", ")", "\n", "region_feats", "=", "entry", "[", "'region_feats'", "]", ".", "float", "(", ")", "\n", "region_masks", "=", "entry", "[", "'region_masks'", "]", ".", "float", "(", ")", "\n", "region_clses", "=", "entry", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "scene_inds", "=", "scene_inds", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "sent_inds", "=", "sent_inds", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "sent_msks", "=", "sent_msks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "region_feats", "=", "region_feats", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "region_masks", "=", "region_masks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "region_clses", "=", "region_clses", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "return", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "region_feats", ",", "region_masks", ",", "region_clses", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train": [[129, 208], ["logz.configure_output_dir", "logz.save_config", "time.time.time", "datasets.loader.region_loader", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "region_grounding_trainer.RegionGroundingTrainer.train_epoch", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "region_grounding_trainer.RegionGroundingTrainer.validate_epoch", "numpy.mean", "region_grounding_trainer.RegionGroundingTrainer.optimizer.update", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "numpy.zeros", "val_metrics.items", "len", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.log_tabular", "logz.dump_tabular", "numpy.mean", "numpy.random.randint", "numpy.mean", "time.time.time", "numpy.array", "region_grounding_trainer.RegionGroundingTrainer.save_checkpoint", "region_grounding_trainer.RegionGroundingTrainer.save_checkpoint", "open", "json.dump", "open", "pickle.dump", "open", "json.dump", "open", "pickle.dump", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.configure_output_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_config", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train_epoch", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.validate_epoch", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.update", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.log_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.dump_tabular", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.save_checkpoint", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.save_checkpoint"], ["", "def", "train", "(", "self", ",", "train_db", ",", "val_db", ",", "test_db", ")", ":", "\n", "##################################################################", "\n", "## LOG", "\n", "##################################################################", "\n", "        ", "logz", ".", "configure_output_dir", "(", "self", ".", "cfg", ".", "model_dir", ")", "\n", "logz", ".", "save_config", "(", "self", ".", "cfg", ")", "\n", "\n", "##################################################################", "\n", "## Main loop", "\n", "##################################################################", "\n", "start", "=", "time", "(", ")", "\n", "min_val_loss", "=", "1000.0", "\n", "max_val_recall", "=", "-", "1.0", "\n", "train_loaddb", "=", "region_loader", "(", "train_db", ")", "\n", "val_loaddb", "=", "region_loader", "(", "val_db", ")", "\n", "#TODO", "\n", "train_loader", "=", "DataLoader", "(", "train_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ",", "self", ".", "cfg", ".", "n_epochs", ")", ":", "\n", "##################################################################", "\n", "## Training", "\n", "##################################################################", "\n", "            ", "if", "self", ".", "cfg", ".", "coco_mode", ">=", "0", ":", "\n", "                ", "self", ".", "cfg", ".", "coco_mode", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "cfg", ".", "max_turns", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "train_losses", "=", "self", ".", "train_epoch", "(", "train_loaddb", ",", "train_loader", ",", "epoch", ")", "\n", "\n", "##################################################################", "\n", "## Validation", "\n", "##################################################################", "\n", "if", "self", ".", "cfg", ".", "coco_mode", ">=", "0", ":", "\n", "                ", "self", ".", "cfg", ".", "coco_mode", "=", "0", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "val_losses", ",", "val_metrics", ",", "caches_results", "=", "self", ".", "validate_epoch", "(", "val_loaddb", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "#################################################################", "\n", "# Logging", "\n", "#################################################################", "\n", "\n", "# update optim scheduler", "\n", "current_val_loss", "=", "np", ".", "mean", "(", "val_losses", ")", "\n", "self", ".", "optimizer", ".", "update", "(", "current_val_loss", ",", "epoch", ")", "\n", "logz", ".", "log_tabular", "(", "\"Time\"", ",", "time", "(", ")", "-", "start", ")", "\n", "logz", ".", "log_tabular", "(", "\"Iteration\"", ",", "epoch", ")", "\n", "logz", ".", "log_tabular", "(", "\"TrainAverageLoss\"", ",", "np", ".", "mean", "(", "train_losses", ")", ")", "\n", "logz", ".", "log_tabular", "(", "\"ValAverageLoss\"", ",", "current_val_loss", ")", "\n", "\n", "mmm", "=", "np", ".", "zeros", "(", "(", "5", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "k", ",", "v", "in", "val_metrics", ".", "items", "(", ")", ":", "\n", "                ", "mmm", "=", "mmm", "+", "np", ".", "array", "(", "v", ")", "\n", "", "mmm", "/=", "len", "(", "val_metrics", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R1\"", ",", "mmm", "[", "0", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R5\"", ",", "mmm", "[", "1", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_R10\"", ",", "mmm", "[", "2", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_medr\"", ",", "mmm", "[", "3", "]", ")", "\n", "logz", ".", "log_tabular", "(", "\"t2i_meanr\"", ",", "mmm", "[", "4", "]", ")", "\n", "logz", ".", "dump_tabular", "(", ")", "\n", "current_val_recall", "=", "np", ".", "mean", "(", "mmm", "[", ":", "3", "]", ")", "\n", "\n", "##################################################################", "\n", "## Checkpoint", "\n", "##################################################################", "\n", "if", "self", ".", "cfg", ".", "rl_finetune", "==", "0", "and", "self", ".", "cfg", ".", "coco_mode", "<", "0", ":", "\n", "                ", "if", "min_val_loss", ">", "current_val_loss", ":", "\n", "                    ", "min_val_loss", "=", "current_val_loss", "\n", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_metrics_%d.json'", "%", "epoch", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "                        ", "json", ".", "dump", "(", "val_metrics", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_top5_inds_%d.pkl'", "%", "epoch", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "                        ", "pickle", ".", "dump", "(", "caches_results", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "max_val_recall", "<", "current_val_recall", ":", "\n", "                    ", "max_val_recall", "=", "current_val_recall", "\n", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_metrics_%d.json'", "%", "epoch", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "                        ", "json", ".", "dump", "(", "val_metrics", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'val_top5_inds_%d.pkl'", "%", "epoch", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "                        ", "pickle", ".", "dump", "(", "caches_results", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test": [[209, 282], ["logz.configure_output_dir", "logz.save_config", "time.time.time", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "region_grounding_trainer.RegionGroundingTrainer.net.eval", "enumerate", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_ones", "torch.cat.new_ones", "torch.cat.new_ones", "torch.cat.new_ones", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "torch.cat.cpu().data.numpy", "print", "region_grounding_trainer.RegionGroundingTrainer.net.evaluate", "region_grounding_trainer.visualize", "region_grounding_trainer.RegionGroundingTrainer.batch_data", "numpy.array.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "open", "pickle.dump", "open", "json.dump", "open", "pickle.dump", "os.join", "os.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "region_grounding_trainer.RegionGroundingTrainer.net", "txt_feats.new_ones", "region_grounding_trainer.RegionGroundingTrainer.net.final_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "print", "numpy.stack", "print", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "txt_feats.size", "txt_feats.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "numpy.mean", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.configure_output_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.logz.save_config", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.visualize", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.final_loss"], ["", "", "", "", "", "def", "test", "(", "self", ",", "test_db", ")", ":", "\n", "##################################################################", "\n", "## LOG", "\n", "##################################################################", "\n", "        ", "logz", ".", "configure_output_dir", "(", "self", ".", "cfg", ".", "model_dir", ")", "\n", "logz", ".", "save_config", "(", "self", ".", "cfg", ")", "\n", "start", "=", "time", "(", ")", "\n", "test_loaddb", "=", "region_loader", "(", "test_db", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_loaddb", ",", "batch_size", "=", "self", ".", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "cfg", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "sample_mode", "=", "0", "if", "self", ".", "cfg", ".", "rl_finetune", ">", "0", "else", "self", ".", "cfg", ".", "explore_mode", "\n", "all_txt_feats", ",", "all_img_feats", ",", "all_img_masks", ",", "losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "region_feats", ",", "region_masks", ",", "region_clses", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Inference one step", "\n", "##################################################################   ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "self", ".", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "None", ",", "None", ",", "None", ",", "region_feats", ",", "region_clses", ",", "region_masks", ",", "sample_mode", "=", "sample_mode", ")", "\n", "txt_masks", "=", "txt_feats", ".", "new_ones", "(", "txt_feats", ".", "size", "(", "0", ")", ",", "txt_feats", ".", "size", "(", "1", ")", ")", "\n", "batch_losses", "=", "self", ".", "net", ".", "final_loss", "(", "img_feats", ",", "masked_feats", ",", "region_masks", ",", "txt_feats", ",", "txt_masks", ",", "sample_logits", ",", "sample_indices", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "batch_losses", ",", "-", "1", ")", ")", "\n", "", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "all_txt_feats", ".", "append", "(", "txt_feats", ")", "\n", "all_img_masks", ".", "append", "(", "region_masks", ")", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "                ", "all_img_feats", ".", "append", "(", "masked_feats", ")", "\n", "", "else", ":", "\n", "                ", "all_img_feats", ".", "append", "(", "img_feats", ")", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Iter %07d:'", "%", "(", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "all_img_feats", "=", "torch", ".", "cat", "(", "all_img_feats", ",", "0", ")", "\n", "all_img_masks", "=", "torch", ".", "cat", "(", "all_img_masks", ",", "0", ")", "\n", "all_txt_feats", "=", "torch", ".", "cat", "(", "all_txt_feats", ",", "0", ")", "\n", "all_txt_masks", "=", "all_txt_feats", ".", "new_ones", "(", "all_txt_feats", ".", "size", "(", "0", ")", ",", "all_txt_feats", ".", "size", "(", "1", ")", ")", "\n", "\n", "\n", "# print('all_img_feats', all_img_feats.size())", "\n", "all_img_feats_np", "=", "all_img_feats", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "all_img_masks_np", "=", "all_img_masks", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'img_features_%d.pkl'", "%", "self", ".", "cfg", ".", "n_feature_dim", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'feats'", ":", "all_img_feats_np", ",", "'masks'", ":", "all_img_masks_np", "}", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "##################################################################", "\n", "## Evaluation", "\n", "##################################################################", "\n", "", "print", "(", "'Evaluating the per-turn performance, may take a while.'", ")", "\n", "metrics", ",", "caches_results", "=", "self", ".", "net", ".", "evaluate", "(", "all_img_feats", ",", "all_img_masks", ",", "all_txt_feats", ")", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'test_metrics.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "metrics", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'test_caches.pkl'", ")", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "caches_results", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "visualize", "(", "self", ".", "cfg", ".", "exp_name", ",", "metrics", ",", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'evaluation.png'", ")", ")", "\n", "\n", "return", "losses", ",", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train_epoch": [[283, 318], ["region_grounding_trainer.RegionGroundingTrainer.net.train", "enumerate", "region_grounding_trainer.RegionGroundingTrainer.batch_data", "region_grounding_trainer.RegionGroundingTrainer.net", "txt_feats.new_ones", "region_grounding_trainer.RegionGroundingTrainer.net.final_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "region_grounding_trainer.RegionGroundingTrainer.net.zero_grad", "torch.sum.backward", "torch.sum.backward", "torch.sum.backward", "torch.sum.backward", "region_grounding_trainer.RegionGroundingTrainer.optimizer.step", "losses.append", "txt_feats.size", "txt_feats.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "print", "numpy.stack", "print", "print", "numpy.mean", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.final_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.optim.Optimizer.step"], ["", "def", "train_epoch", "(", "self", ",", "train_loaddb", ",", "train_loader", ",", "epoch", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "self", ".", "net", ".", "train", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "region_feats", ",", "region_masks", ",", "region_clses", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Train one step", "\n", "##################################################################", "\n", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "self", ".", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "None", ",", "None", ",", "None", ",", "region_feats", ",", "region_clses", ",", "region_masks", ",", "sample_mode", "=", "self", ".", "cfg", ".", "explore_mode", ")", "\n", "txt_masks", "=", "txt_feats", ".", "new_ones", "(", "txt_feats", ".", "size", "(", "0", ")", ",", "txt_feats", ".", "size", "(", "1", ")", ")", "\n", "batch_losses", "=", "self", ".", "net", ".", "final_loss", "(", "img_feats", ",", "masked_feats", ",", "region_masks", ",", "txt_feats", ",", "txt_masks", ",", "sample_logits", ",", "sample_indices", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "batch_losses", ",", "-", "1", ")", ")", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "##################################################################", "\n", "## Collect info", "\n", "##################################################################", "\n", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch %03d, iter %07d:'", "%", "(", "epoch", ",", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.validate_epoch": [[319, 365], ["region_grounding_trainer.RegionGroundingTrainer.net.eval", "enumerate", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_ones", "torch.cat.new_ones", "torch.cat.new_ones", "torch.cat.new_ones", "region_grounding_trainer.RegionGroundingTrainer.net.evaluate", "region_grounding_trainer.RegionGroundingTrainer.batch_data", "numpy.array.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "region_grounding_trainer.RegionGroundingTrainer.net", "txt_feats.new_ones", "region_grounding_trainer.RegionGroundingTrainer.net.final_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.sum.cpu().data.item", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "print", "numpy.stack", "print", "print", "txt_feats.size", "txt_feats.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "numpy.mean", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.batch_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.final_loss"], ["", "def", "validate_epoch", "(", "self", ",", "val_loaddb", ",", "val_loader", ",", "epoch", ")", ":", "\n", "        ", "all_txt_feats", ",", "all_img_feats", ",", "all_img_masks", ",", "losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "sample_mode", "=", "0", "if", "self", ".", "cfg", ".", "rl_finetune", ">", "0", "else", "self", ".", "cfg", ".", "explore_mode", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "##################################################################", "\n", "## Batched data", "\n", "##################################################################", "\n", "            ", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "region_feats", ",", "region_masks", ",", "region_clses", "=", "self", ".", "batch_data", "(", "batched", ")", "\n", "\n", "##################################################################", "\n", "## Inference one step", "\n", "##################################################################   ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "self", ".", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "None", ",", "None", ",", "None", ",", "region_feats", ",", "region_clses", ",", "region_masks", ",", "sample_mode", "=", "sample_mode", ")", "\n", "txt_masks", "=", "txt_feats", ".", "new_ones", "(", "txt_feats", ".", "size", "(", "0", ")", ",", "txt_feats", ".", "size", "(", "1", ")", ")", "\n", "batch_losses", "=", "self", ".", "net", ".", "final_loss", "(", "img_feats", ",", "masked_feats", ",", "region_masks", ",", "txt_feats", ",", "txt_masks", ",", "sample_logits", ",", "sample_indices", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "batch_losses", ",", "-", "1", ")", ")", "\n", "", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "all_txt_feats", ".", "append", "(", "txt_feats", ")", "\n", "all_img_masks", ".", "append", "(", "region_masks", ")", "\n", "if", "self", ".", "cfg", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "                ", "all_img_feats", ".", "append", "(", "masked_feats", ")", "\n", "", "else", ":", "\n", "                ", "all_img_feats", ".", "append", "(", "img_feats", ")", "\n", "##################################################################", "\n", "## Print info", "\n", "##################################################################", "\n", "", "if", "cnt", "%", "self", ".", "cfg", ".", "log_per_steps", "==", "0", ":", "\n", "                ", "print", "(", "'Val Epoch %03d, iter %07d:'", "%", "(", "epoch", ",", "cnt", ")", ")", "\n", "tmp_losses", "=", "np", ".", "stack", "(", "losses", ",", "0", ")", "\n", "print", "(", "'mean loss: '", ",", "np", ".", "mean", "(", "tmp_losses", ")", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "\n", "", "", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "all_img_feats", "=", "torch", ".", "cat", "(", "all_img_feats", ",", "0", ")", "\n", "all_img_masks", "=", "torch", ".", "cat", "(", "all_img_masks", ",", "0", ")", "\n", "all_txt_feats", "=", "torch", ".", "cat", "(", "all_txt_feats", ",", "0", ")", "\n", "all_txt_masks", "=", "all_txt_feats", ".", "new_ones", "(", "all_txt_feats", ".", "size", "(", "0", ")", ",", "all_txt_feats", ".", "size", "(", "1", ")", ")", "\n", "##################################################################", "\n", "## Evaluation", "\n", "##################################################################", "\n", "metrics", ",", "caches_results", "=", "self", ".", "net", ".", "evaluate", "(", "all_img_feats", ",", "all_img_masks", ",", "all_txt_feats", ")", "\n", "\n", "return", "losses", ",", "metrics", ",", "caches_results", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.load_pretrained_net": [[366, 380], ["os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "region_grounding_trainer.RegionGroundingTrainer.net.load_state_dict", "region_grounding_trainer.RegionGroundingTrainer.net.load_state_dict", "region_grounding_trainer.RegionGroundingTrainer.optimizer.optimizer.load_state_dict"], "methods", ["None"], ["", "def", "load_pretrained_net", "(", "self", ",", "pretrained_name", ")", ":", "\n", "        ", "cache_dir", "=", "osp", ".", "join", "(", "self", ".", "cfg", ".", "data_dir", ",", "'caches'", ")", "\n", "pretrained_path", "=", "osp", ".", "join", "(", "cache_dir", ",", "'region_ckpts'", ",", "pretrained_name", "+", "'.pkl'", ")", "\n", "assert", "osp", ".", "exists", "(", "pretrained_path", ")", "\n", "if", "self", ".", "cfg", ".", "cuda", ":", "\n", "            ", "states", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "", "else", ":", "\n", "            ", "states", "=", "torch", ".", "load", "(", "pretrained_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "", "if", "self", ".", "cfg", ".", "rl_finetune", ">", "0", ":", "\n", "            ", "self", ".", "net", ".", "load_state_dict", "(", "states", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", ".", "load_state_dict", "(", "states", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "optimizer", ".", "load_state_dict", "(", "states", "[", "'optimizer'", "]", ")", "\n", "self", ".", "epoch", "=", "states", "[", "'epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.save_checkpoint": [[381, 393], ["print", "os.join", "os.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "region_grounding_trainer.RegionGroundingTrainer.net.state_dict", "region_grounding_trainer.RegionGroundingTrainer.optimizer.optimizer.state_dict", "os.join", "os.join"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "print", "(", "\" [*] Saving checkpoints...\"", ")", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "self", ".", "cfg", ".", "model_dir", ",", "'region_ckpts'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "# torch.save(states, osp.join(checkpoint_dir, \"ckpt-%03d.pkl\"%epoch))", "\n", "torch", ".", "save", "(", "states", ",", "osp", ".", "join", "(", "checkpoint_dir", ",", "\"best_ckpt.pkl\"", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.visualize": [[34, 83], ["res.items", "pandas.DataFrame", "seaborn.set_palette", "seaborn.set", "seaborn.relplot", "matplotlib.savefig", "dataframe[].extend", "dataframe[].extend", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "dataframe[].append", "int", "range", "range"], "function", ["None"], ["def", "visualize", "(", "method", ",", "res", ",", "vis_path", ")", ":", "\n", "    ", "dataframe", "=", "{", "'Turn'", ":", "[", "]", ",", "'Recall'", ":", "[", "]", ",", "'Metric'", ":", "[", "]", ",", "'Method'", ":", "[", "]", "}", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "        ", "dataframe", "[", "'Turn'", "]", ".", "extend", "(", "[", "int", "(", "k", ")", "+", "1", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "dataframe", "[", "'Method'", "]", ".", "extend", "(", "[", "method", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@1'", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "1", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@5'", ")", "\n", "dataframe", "[", "'Recall'", "]", ".", "append", "(", "v", "[", "2", "]", ")", "\n", "dataframe", "[", "'Metric'", "]", ".", "append", "(", "'R@10'", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "dataframe", ")", "\n", "flatui", "=", "[", "\"#6a2c70\"", "]", "\n", "sns", ".", "set_palette", "(", "flatui", ")", "\n", "dash_styles", "=", "[", "(", "4", ",", "1.0", ")", "]", "\n", "\n", "sns", ".", "set", "(", "style", "=", "\"darkgrid\"", ",", "font_scale", "=", "2.0", ")", "\n", "sns_plot", "=", "sns", ".", "relplot", "(", "\n", "x", "=", "'Turn'", ",", "\n", "y", "=", "'Recall'", ",", "\n", "hue", "=", "'Method'", ",", "\n", "size", "=", "None", ",", "\n", "style", "=", "'Method'", ",", "\n", "data", "=", "df", ",", "\n", "row", "=", "None", ",", "\n", "col", "=", "'Metric'", ",", "\n", "col_wrap", "=", "None", ",", "\n", "row_order", "=", "None", ",", "\n", "col_order", "=", "None", ",", "\n", "palette", "=", "flatui", ",", "\n", "hue_order", "=", "None", ",", "\n", "hue_norm", "=", "None", ",", "\n", "sizes", "=", "None", ",", "\n", "size_order", "=", "None", ",", "\n", "size_norm", "=", "None", ",", "\n", "markers", "=", "[", "\"v\"", ",", "\"^\"", ",", "\"<\"", ",", "\">\"", ",", "\"o\"", ",", "\"D\"", "]", ",", "\n", "dashes", "=", "dash_styles", ",", "\n", "style_order", "=", "None", ",", "\n", "legend", "=", "'brief'", ",", "\n", "kind", "=", "'line'", ",", "\n", "height", "=", "5", ",", "\n", "aspect", "=", "1", ",", "\n", "facet_kws", "=", "{", "'sharey'", ":", "True", ",", "'sharex'", ":", "True", ",", "'xlim'", ":", "(", "1", ",", "10", ")", ",", "'ylim'", ":", "(", "2.5", ",", "92.5", ")", "}", "\n", ")", "\n", "\n", "# plt.legend(loc='best').set_draggable(True)", "\n", "# plt.imshow(out)", "\n", "plt", ".", "savefig", "(", "vis_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Image.__init__": [[15, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "url", ",", "width", ",", "height", ",", "coco_id", ",", "flickr_id", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "url", "=", "url", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "coco_id", "=", "coco_id", "\n", "self", ".", "flickr_id", "=", "flickr_id", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Image.__str__": [[23, 30], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'id: %d, coco_id: %d, flickr_id: %d, width: %d, url: %s'", "%", "(", "self", ".", "id", ",", "-", "1", "\n", "if", "self", ".", "coco_id", "is", "None", "\n", "else", "self", ".", "coco_id", ",", "-", "1", "\n", "if", "self", ".", "flickr_id", "is", "None", "\n", "else", "self", ".", "flickr_id", ",", "self", ".", "width", ",", "self", ".", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Image.__repr__": [[31, 33], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Region.__init__": [[46, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "image", ",", "phrase", ",", "x", ",", "y", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "phrase", "=", "phrase", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Region.__str__": [[55, 61], ["stat_str.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "stat_str", "=", "'id: {0}, x: {1}, y: {2}, width: {3},'", "'height: {4}, phrase: {5}, image: {6}'", "\n", "return", "stat_str", ".", "format", "(", "self", ".", "id", ",", "self", ".", "x", ",", "self", ".", "y", ",", "\n", "self", ".", "width", ",", "self", ".", "height", ",", "self", ".", "phrase", ",", "\n", "self", ".", "image", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Region.__repr__": [[62, 64], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Graph.__init__": [[75, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image", ",", "objects", ",", "relationships", ",", "attributes", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "objects", "=", "objects", "\n", "self", ".", "relationships", "=", "relationships", "\n", "self", ".", "attributes", "=", "attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Object.__init__": [[94, 102], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "x", ",", "y", ",", "width", ",", "height", ",", "names", ",", "synsets", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "synsets", "=", "synsets", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Object.__str__": [[103, 106], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "names", "[", "0", "]", "if", "len", "(", "self", ".", "names", ")", "!=", "0", "else", "'None'", "\n", "return", "'%s'", "%", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Object.__repr__": [[107, 109], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Relationship.__init__": [[120, 126], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "subject", ",", "predicate", ",", "object", ",", "synset", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "subject", "=", "subject", "\n", "self", ".", "predicate", "=", "predicate", "\n", "self", ".", "object", "=", "object", "\n", "self", ".", "synset", "=", "synset", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Relationship.__str__": [[127, 130], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"{0}: {1} {2} {3}\"", ".", "format", "(", "self", ".", "id", ",", "self", ".", "subject", ",", "\n", "self", ".", "predicate", ",", "self", ".", "object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Relationship.__repr__": [[131, 133], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Attribute.__init__": [[143, 148], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "subject", ",", "attribute", ",", "synset", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "subject", "=", "subject", "\n", "self", ".", "attribute", "=", "attribute", "\n", "self", ".", "synset", "=", "synset", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Attribute.__str__": [[149, 151], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%d: %s is %s\"", "%", "(", "self", ".", "id", ",", "self", ".", "subject", ",", "self", ".", "attribute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Attribute.__repr__": [[152, 154], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.QA.__init__": [[167, 175], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "image", ",", "question", ",", "answer", ",", "\n", "question_objects", ",", "answer_objects", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "question", "=", "question", "\n", "self", ".", "answer", "=", "answer", "\n", "self", ".", "q_objects", "=", "question_objects", "\n", "self", ".", "a_objects", "=", "answer_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.QA.__str__": [[176, 179], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'id: %d, image: %d, question: %s, answer: %s'", "%", "(", "self", ".", "id", ",", "self", ".", "image", ".", "id", ",", "self", ".", "question", ",", "self", ".", "answer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.QA.__repr__": [[180, 182], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.QAObject.__init__": [[195, 200], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "start_idx", ",", "end_idx", ",", "name", ",", "synset", ")", ":", "\n", "        ", "self", ".", "start_idx", "=", "start_idx", "\n", "self", ".", "end_idx", "=", "end_idx", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "synset", "=", "synset", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.QAObject.__repr__": [[201, 203], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Synset.__init__": [[212, 215], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "definition", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "definition", "=", "definition", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Synset.__str__": [[216, 218], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{} - {}'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "definition", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.models.Synset.__repr__": [[219, 221], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_all_image_ids": [[5, 20], ["str", "visual_genome.retrieve_data", "ids.extend", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data"], ["def", "get_all_image_ids", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get all Image ids.\n    \"\"\"", "\n", "page", "=", "1", "\n", "next", "=", "'/api/v0/images/all?page='", "+", "str", "(", "page", ")", "\n", "ids", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "data", "=", "utils", ".", "retrieve_data", "(", "next", ")", "\n", "ids", ".", "extend", "(", "data", "[", "'results'", "]", ")", "\n", "if", "data", "[", "'next'", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "page", "+=", "1", "\n", "next", "=", "'/api/v0/images/all?page='", "+", "str", "(", "page", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_ids_in_range": [[22, 36], ["range", "visual_genome.retrieve_data", "ids.extend", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data"], ["", "def", "get_image_ids_in_range", "(", "start_index", "=", "0", ",", "end_index", "=", "99", ")", ":", "\n", "    ", "\"\"\"\n    Get Image ids from start_index to end_index.\n    \"\"\"", "\n", "ids_per_page", "=", "1000", "\n", "start_page", "=", "start_index", "/", "ids_per_page", "+", "1", "\n", "endPage", "=", "end_index", "/", "ids_per_page", "+", "1", "\n", "ids", "=", "[", "]", "\n", "for", "page", "in", "range", "(", "start_page", ",", "endPage", "+", "1", ")", ":", "\n", "        ", "data", "=", "utils", ".", "retrieve_data", "(", "'/api/v0/images/all?page='", "+", "str", "(", "page", ")", ")", "\n", "ids", ".", "extend", "(", "data", "[", "'results'", "]", ")", "\n", "", "ids", "=", "ids", "[", "start_index", "%", "100", ":", "]", "\n", "ids", "=", "ids", "[", ":", "end_index", "-", "start_index", "+", "1", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data": [[38, 47], ["visual_genome.retrieve_data", "visual_genome.parse_image_data", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_image_data"], ["", "def", "get_image_data", "(", "id", "=", "61512", ")", ":", "\n", "    ", "\"\"\"\n    Get data about an image.\n    \"\"\"", "\n", "data", "=", "utils", ".", "retrieve_data", "(", "'/api/v0/images/'", "+", "str", "(", "id", ")", ")", "\n", "if", "'detail'", "in", "data", "and", "data", "[", "'detail'", "]", "==", "'Not found.'", ":", "\n", "        ", "return", "None", "\n", "", "image", "=", "utils", ".", "parse_image_data", "(", "data", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_region_descriptions_of_image": [[49, 58], ["api.get_image_data", "visual_genome.retrieve_data", "visual_genome.parse_region_descriptions", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_region_descriptions"], ["", "def", "get_region_descriptions_of_image", "(", "id", "=", "61512", ")", ":", "\n", "    ", "\"\"\"\n    Get the region descriptions of an image.\n    \"\"\"", "\n", "image", "=", "get_image_data", "(", "id", "=", "id", ")", "\n", "data", "=", "utils", ".", "retrieve_data", "(", "'/api/v0/images/'", "+", "str", "(", "id", ")", "+", "'/regions'", ")", "\n", "if", "'detail'", "in", "data", "and", "data", "[", "'detail'", "]", "==", "'Not found.'", ":", "\n", "        ", "return", "None", "\n", "", "return", "utils", ".", "parse_region_descriptions", "(", "data", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_region_graph_of_region": [[60, 70], ["api.get_image_data", "visual_genome.retrieve_data", "visual_genome.parse_graph", "str", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_graph"], ["", "def", "get_region_graph_of_region", "(", "image_id", "=", "61512", ",", "region_id", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Get Region Graph of a particular Region in an image.\n    \"\"\"", "\n", "image", "=", "get_image_data", "(", "id", "=", "image_id", ")", "\n", "data", "=", "utils", ".", "retrieve_data", "(", "\n", "'/api/v0/images/'", "+", "str", "(", "image_id", ")", "+", "'/regions/'", "+", "str", "(", "region_id", ")", ")", "\n", "if", "'detail'", "in", "data", "and", "data", "[", "'detail'", "]", "==", "'Not found.'", ":", "\n", "        ", "return", "None", "\n", "", "return", "utils", ".", "parse_graph", "(", "data", "[", "0", "]", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_scene_graph_of_image": [[72, 81], ["api.get_image_data", "visual_genome.retrieve_data", "visual_genome.parse_graph", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_graph"], ["", "def", "get_scene_graph_of_image", "(", "id", "=", "61512", ")", ":", "\n", "    ", "\"\"\"\n    Get Scene Graph of an image.\n    \"\"\"", "\n", "image", "=", "get_image_data", "(", "id", "=", "id", ")", "\n", "data", "=", "utils", ".", "retrieve_data", "(", "'/api/v0/images/'", "+", "str", "(", "id", ")", "+", "'/graph'", ")", "\n", "if", "'detail'", "in", "data", "and", "data", "[", "'detail'", "]", "==", "'Not found.'", ":", "\n", "        ", "return", "None", "\n", "", "return", "utils", ".", "parse_graph", "(", "data", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_all_QAs": [[83, 106], ["str", "visual_genome.retrieve_data", "qas.extend", "visual_genome.parse_QA", "str", "api.get_image_data", "len"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_QA", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data"], ["", "def", "get_all_QAs", "(", "qtotal", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Gets all the QA from the dataset.\n    qtotal: int       total number of QAs to return.\n                      Set to None if all QAs should be returned\n    \"\"\"", "\n", "page", "=", "1", "\n", "next", "=", "'/api/v0/qa/all?page='", "+", "str", "(", "page", ")", "\n", "qas", "=", "[", "]", "\n", "image_map", "=", "{", "}", "\n", "while", "True", ":", "\n", "        ", "data", "=", "utils", ".", "retrieve_data", "(", "next", ")", "\n", "for", "d", "in", "data", "[", "'results'", "]", ":", "\n", "            ", "if", "d", "[", "'image'", "]", "not", "in", "image_map", ":", "\n", "                ", "image_map", "[", "d", "[", "'image'", "]", "]", "=", "get_image_data", "(", "id", "=", "d", "[", "'image'", "]", ")", "\n", "", "", "qas", ".", "extend", "(", "utils", ".", "parse_QA", "(", "data", "[", "'results'", "]", ",", "image_map", ")", ")", "\n", "if", "qtotal", "is", "not", "None", "and", "len", "(", "qas", ")", ">", "qtotal", ":", "\n", "            ", "return", "qas", "\n", "", "if", "data", "[", "'next'", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "page", "+=", "1", "\n", "next", "=", "'/api/v0/qa/all?page='", "+", "str", "(", "page", ")", "\n", "", "return", "qas", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_QA_of_type": [[108, 132], ["str", "visual_genome.retrieve_data", "qas.extend", "visual_genome.parse_QA", "str", "api.get_image_data", "len"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_QA", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data"], ["", "def", "get_QA_of_type", "(", "qtype", "=", "'why'", ",", "qtotal", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Get all QA's of a particular type - example, 'why'\n    qtype: string    possible values: what, where, when, why, who, how.\n    qtotal: int      total number of QAs to return.\n                     Set to None if all QAs should be returned\n    \"\"\"", "\n", "page", "=", "1", "\n", "next", "=", "'/api/v0/qa/'", "+", "qtype", "+", "'?page='", "+", "str", "(", "page", ")", "\n", "qas", "=", "[", "]", "\n", "image_map", "=", "{", "}", "\n", "while", "True", ":", "\n", "        ", "data", "=", "utils", ".", "retrieve_data", "(", "next", ")", "\n", "for", "d", "in", "data", "[", "'results'", "]", ":", "\n", "            ", "if", "d", "[", "'image'", "]", "not", "in", "image_map", ":", "\n", "                ", "image_map", "[", "d", "[", "'image'", "]", "]", "=", "get_image_data", "(", "id", "=", "d", "[", "'image'", "]", ")", "\n", "", "", "qas", ".", "extend", "(", "utils", ".", "parse_QA", "(", "data", "[", "'results'", "]", ",", "image_map", ")", ")", "\n", "if", "qtotal", "is", "not", "None", "and", "len", "(", "qas", ")", ">", "qtotal", ":", "\n", "            ", "return", "qas", "\n", "", "if", "data", "[", "'next'", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "page", "+=", "1", "\n", "next", "=", "'/api/v0/qa/'", "+", "qtype", "+", "'?page='", "+", "str", "(", "page", ")", "\n", "", "return", "qas", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_QA_of_image": [[134, 153], ["str", "visual_genome.retrieve_data", "qas.extend", "visual_genome.parse_QA", "str", "str", "api.get_image_data", "str"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_QA", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.api.get_image_data"], ["", "def", "get_QA_of_image", "(", "id", "=", "61512", ")", ":", "\n", "    ", "\"\"\"\n    Get all QAs for a particular image.\n    \"\"\"", "\n", "page", "=", "1", "\n", "next", "=", "'/api/v0/image/'", "+", "str", "(", "id", ")", "+", "'/qa?page='", "+", "str", "(", "page", ")", "\n", "qas", "=", "[", "]", "\n", "image_map", "=", "{", "}", "\n", "while", "True", ":", "\n", "        ", "data", "=", "utils", ".", "retrieve_data", "(", "next", ")", "\n", "for", "d", "in", "data", "[", "'results'", "]", ":", "\n", "            ", "if", "d", "[", "'image'", "]", "not", "in", "image_map", ":", "\n", "                ", "image_map", "[", "d", "[", "'image'", "]", "]", "=", "get_image_data", "(", "id", "=", "d", "[", "'image'", "]", ")", "\n", "", "", "qas", ".", "extend", "(", "utils", ".", "parse_QA", "(", "data", "[", "'results'", "]", ",", "image_map", ")", ")", "\n", "if", "data", "[", "'next'", "]", "is", "None", ":", "\n", "            ", "break", "\n", "", "page", "+=", "1", "\n", "next", "=", "'/api/v0/image/'", "+", "str", "(", "id", ")", "+", "'/qa?page='", "+", "str", "(", "page", ")", "\n", "", "return", "qas", "\n", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.get_data_dir": [[9, 15], ["os.path.join", "os.path.dirname", "os.path.realpath"], "function", ["None"], ["from", "time", "import", "time", "\n", "from", "datetime", "import", "datetime", "\n", "from", "collections", "import", "Counter", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "from", "config", "import", "get_config", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.retrieve_data": [[17, 29], ["requests.get().json", "requests.get"], "function", ["None"], ["import", "torch", ".", "nn", "as", "nn", "\n", "from", "nltk", ".", "tokenize", "import", "word_tokenize", "\n", "from", "nltk", ".", "corpus", "import", "stopwords", "\n", "\n", "\n", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n", "\n", "###########################################################", "\n", "## Directory", "\n", "###########################################################", "\n", "\n", "def", "maybe_create", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "dir_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_synset": [[31, 38], ["visual_genome.models.Synset", "len"], "function", ["None"], ["\n", "\n", "", "", "def", "prepare_directories", "(", "config", ")", ":", "\n", "    ", "postfix", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "model_name", "=", "'{}_{}'", ".", "format", "(", "config", ".", "exp_name", ",", "postfix", ")", "\n", "config", ".", "model_name", "=", "model_name", "\n", "config", ".", "model_dir", "=", "osp", ".", "join", "(", "config", ".", "log_dir", ",", "model_name", ")", "\n", "maybe_create", "(", "config", ".", "model_dir", ")", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_graph": [[40, 73], ["visual_genome.models.Graph", "objects.append", "relationships.append", "attributes.append", "names.append", "synsets.append", "visual_genome.models.Object", "visual_genome.models.Relationship", "visual_genome.models.Attribute", "utils.parse_synset", "utils.parse_synset", "utils.parse_synset"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_synset", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_synset", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_synset"], ["\n", "###########################################################", "\n", "## Vocabulary", "\n", "###########################################################", "\n", "", "import", "string", "\n", "punctuation_table", "=", "str", ".", "maketrans", "(", "''", ",", "''", ",", "string", ".", "punctuation", ")", "\n", "stop_words", "=", "set", "(", "stopwords", ".", "words", "(", "'english'", ")", ")", "\n", "# print('stop_words: ', stop_words)", "\n", "\n", "def", "further_token_process", "(", "tokens", ")", ":", "\n", "    ", "tokens", "=", "[", "w", ".", "translate", "(", "punctuation_table", ")", "for", "w", "in", "tokens", "]", "\n", "tokens", "=", "[", "w", "for", "w", "in", "tokens", "if", "w", ".", "isalpha", "(", ")", "]", "\n", "# TO-DO: determine if stop words should be removed", "\n", "# tokens = [w for w in tokens if not w in stop_words]", "\n", "return", "tokens", "\n", "\n", "\n", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n", "\n", "", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n", "\n", "", "def", "clamp_array", "(", "array", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "return", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "min_value", ",", "array", ")", ",", "max_value", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_image_data": [[75, 87], ["visual_genome.models.Image"], "function", ["None"], ["# bounding box representation: xyxy to xywh", "\n", "# box is not normalized", "\n", "    ", "x", "=", "box", "[", "0", "]", ";", "y", "=", "box", "[", "1", "]", "\n", "w", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", "\n", "h", "=", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", "\n", "\n", "ctx", ".", "set_source_rgb", "(", "color", "[", "0", "]", "/", "255.0", ",", "color", "[", "1", "]", "/", "255.0", ",", "color", "[", "2", "]", "/", "255.0", ")", "\n", "ctx", ".", "set_line_width", "(", "6", ")", "\n", "ctx", ".", "rectangle", "(", "x", ",", "y", ",", "w", ",", "h", ")", "\n", "ctx", ".", "stroke", "(", ")", "\n", "\n", "# ctx.set_operator(cairo.OPERATOR_ADD)", "\n", "# ctx.fill()", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_region_descriptions": [[89, 103], ["regions.append", "visual_genome.models.Region"], "function", ["None"], ["\n", "", "def", "paint_txt", "(", "ctx", ",", "txt", ",", "box", ")", ":", "\n", "# Color", "\n", "    ", "ctx", ".", "set_source_rgb", "(", "0", ",", "0", ",", "0", ")", "\n", "# Font", "\n", "font_option", "=", "cairo", ".", "FontOptions", "(", ")", "\n", "font_option", ".", "set_antialias", "(", "cairo", ".", "Antialias", ".", "SUBPIXEL", ")", "\n", "ctx", ".", "set_font_options", "(", "font_option", ")", "\n", "ctx", ".", "select_font_face", "(", "\"Purisa\"", ",", "cairo", ".", "FONT_SLANT_ITALIC", ",", "cairo", ".", "FONT_WEIGHT_BOLD", ")", "\n", "ctx", ".", "set_font_size", "(", "20", ")", "\n", "# ctx.set_operator(cairo.OPERATOR_ADD)", "\n", "# Position", "\n", "x", "=", "box", "[", "0", "]", ";", "y", "=", "box", "[", "1", "]", "+", "50", "\n", "# w = box[2] - box[0] + 1", "\n", "# h = box[3] - box[1] + 1", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_QA": [[105, 126], ["qas.append", "visual_genome.models.QA", "visual_genome.models.Synset", "qos.append", "visual_genome.models.Synset", "aos.append", "visual_genome.models.QAObject", "visual_genome.models.QAObject"], "function", ["None"], ["ctx", ".", "move_to", "(", "x", ",", "y", ")", "\n", "ctx", ".", "show_text", "(", "txt", ")", "\n", "\n", "\n", "", "def", "create_squared_image", "(", "img", ",", "pad_value", "=", "None", ")", ":", "\n", "# If pad value is not provided", "\n", "    ", "if", "pad_value", "is", "None", ":", "\n", "        ", "pad_value", "=", "np", ".", "array", "(", "[", "103.53", ",", "116.28", ",", "123.675", "]", ")", "\n", "\n", "", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "# largest length", "\n", "max_dim", "=", "np", ".", "maximum", "(", "width", ",", "height", ")", "\n", "# anchored at the left-bottom position", "\n", "offset_x", "=", "0", "#int(0.5 * (max_dim - width))", "\n", "offset_y", "=", "max_dim", "-", "height", "#int(0.5 * (max_dim - height))", "\n", "\n", "output_img", "=", "pad_value", ".", "reshape", "(", "1", ",", "1", ",", "img", ".", "shape", "[", "-", "1", "]", ")", "*", "np", ".", "ones", "(", "(", "max_dim", ",", "max_dim", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "output_img", "[", "offset_y", ":", "offset_y", "+", "height", ",", "offset_x", ":", "offset_x", "+", "width", ",", ":", "]", "=", "img", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_image_data": [[10, 19], ["os.path.join", "json.load", "visual_genome.get_data_dir", "open", "visual_genome.parse_image_data"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.get_data_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_image_data"], ["def", "get_all_image_data", "(", "data_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get Image ids from start_index to end_index.\n    \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "        ", "data_dir", "=", "utils", ".", "get_data_dir", "(", ")", "\n", "", "dataFile", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'image_data.json'", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "dataFile", ")", ")", "\n", "return", "[", "utils", ".", "parse_image_data", "(", "image", ")", "for", "image", "in", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_region_descriptions": [[21, 38], ["os.path.join", "local.get_all_image_data", "json.load", "visual_genome.get_data_dir", "open", "output.append", "visual_genome.parse_region_descriptions"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_image_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.get_data_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_region_descriptions"], ["", "def", "get_all_region_descriptions", "(", "data_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get all region descriptions.\n    \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "        ", "data_dir", "=", "utils", ".", "get_data_dir", "(", ")", "\n", "", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'region_descriptions.json'", ")", "\n", "image_data", "=", "get_all_image_data", "(", "data_dir", ")", "\n", "image_map", "=", "{", "}", "\n", "for", "d", "in", "image_data", ":", "\n", "        ", "image_map", "[", "d", ".", "id", "]", "=", "d", "\n", "", "images", "=", "json", ".", "load", "(", "open", "(", "data_file", ")", ")", "\n", "output", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "        ", "output", ".", "append", "(", "utils", ".", "parse_region_descriptions", "(", "\n", "image", "[", "'regions'", "]", ",", "image_map", "[", "image", "[", "'id'", "]", "]", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_qas": [[40, 56], ["os.path.join", "local.get_all_image_data", "json.load", "visual_genome.get_data_dir", "open", "output.append", "visual_genome.parse_QA"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_image_data", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.get_data_dir", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.utils.parse_QA"], ["", "def", "get_all_qas", "(", "data_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get all question answers.\n    \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "        ", "data_dir", "=", "utils", ".", "get_data_dir", "(", ")", "\n", "", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'question_answers.json'", ")", "\n", "image_data", "=", "get_all_image_data", "(", "data_dir", ")", "\n", "image_map", "=", "{", "}", "\n", "for", "d", "in", "image_data", ":", "\n", "        ", "image_map", "[", "d", ".", "id", "]", "=", "d", "\n", "", "images", "=", "json", ".", "load", "(", "open", "(", "data_file", ")", ")", "\n", "output", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "        ", "output", ".", "append", "(", "utils", ".", "parse_QA", "(", "image", "[", "'qas'", "]", ",", "image_map", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_scene_graph": [[62, 79], ["json.load", "local.parse_graph_local", "local.init_synsets", "type", "str", "open", "local.get_all_image_data"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.parse_graph_local", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.init_synsets", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_image_data"], ["", "def", "get_scene_graph", "(", "image_id", ",", "images", "=", "'data/'", ",", "\n", "image_data_dir", "=", "'data/by-id/'", ",", "\n", "synset_file", "=", "'data/synsets.json'", ")", ":", "\n", "    ", "\"\"\"\n    Load a single scene graph from a .json file.\n    \"\"\"", "\n", "if", "type", "(", "images", ")", "is", "str", ":", "\n", "# Instead of a string, we can pass this dict as the argument `images`", "\n", "        ", "images", "=", "{", "img", ".", "id", ":", "img", "for", "img", "in", "get_all_image_data", "(", "images", ")", "}", "\n", "\n", "", "fname", "=", "str", "(", "image_id", ")", "+", "'.json'", "\n", "image", "=", "images", "[", "image_id", "]", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "image_data_dir", "+", "fname", ",", "'r'", ")", ")", "\n", "\n", "scene_graph", "=", "parse_graph_local", "(", "data", ",", "image", ")", "\n", "scene_graph", "=", "init_synsets", "(", "scene_graph", ",", "synset_file", ")", "\n", "return", "scene_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_scene_graphs": [[81, 112], ["os.listdir", "len", "int", "local.get_scene_graph", "len", "local.get_all_image_data", "scene_graphs.append", "fname.split"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_scene_graph", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_all_image_data"], ["", "def", "get_scene_graphs", "(", "start_index", "=", "0", ",", "end_index", "=", "-", "1", ",", "\n", "data_dir", "=", "'data/'", ",", "image_data_dir", "=", "'data/by-id/'", ",", "\n", "min_rels", "=", "0", ",", "max_rels", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Get scene graphs given locally stored .json files;\n    requires `save_scene_graphs_by_id`.\n\n    start_index, end_index : get scene graphs listed by image,\n                           from start_index through end_index\n    data_dir : directory with `image_data.json` and `synsets.json`\n    image_data_dir : directory of scene graph jsons saved by image id\n                   (see `save_scene_graphs_by_id`)\n    min_rels, max_rels: only get scene graphs with at least / less\n                      than this number of relationships\n    \"\"\"", "\n", "images", "=", "{", "img", ".", "id", ":", "img", "for", "img", "in", "get_all_image_data", "(", "data_dir", ")", "}", "\n", "scene_graphs", "=", "[", "]", "\n", "\n", "img_fnames", "=", "os", ".", "listdir", "(", "image_data_dir", ")", "\n", "if", "(", "end_index", "<", "1", ")", ":", "\n", "        ", "end_index", "=", "len", "(", "img_fnames", ")", "\n", "\n", "", "for", "fname", "in", "img_fnames", "[", "start_index", ":", "end_index", "]", ":", "\n", "        ", "image_id", "=", "int", "(", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "scene_graph", "=", "get_scene_graph", "(", "\n", "image_id", ",", "images", ",", "image_data_dir", ",", "data_dir", "+", "'synsets.json'", ")", "\n", "n_rels", "=", "len", "(", "scene_graph", ".", "relationships", ")", "\n", "if", "(", "min_rels", "<=", "n_rels", "<=", "max_rels", ")", ":", "\n", "            ", "scene_graphs", ".", "append", "(", "scene_graph", ")", "\n", "\n", "", "", "return", "scene_graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.map_object": [[114, 145], ["visual_genome.models.Object"], "function", ["None"], ["", "def", "map_object", "(", "object_map", ",", "obj", ")", ":", "\n", "    ", "\"\"\"\n    Use object ids as hashes to `visual_genome.models.Object` instances.\n    If item not in table, create new `Object`. Used when building\n    scene graphs from json.\n    \"\"\"", "\n", "\n", "oid", "=", "obj", "[", "'object_id'", "]", "\n", "obj", "[", "'id'", "]", "=", "oid", "\n", "del", "obj", "[", "'object_id'", "]", "\n", "\n", "if", "oid", "in", "object_map", ":", "\n", "        ", "object_", "=", "object_map", "[", "oid", "]", "\n", "\n", "", "else", ":", "\n", "        ", "if", "'attributes'", "in", "obj", ":", "\n", "            ", "attrs", "=", "obj", "[", "'attributes'", "]", "\n", "del", "obj", "[", "'attributes'", "]", "\n", "", "else", ":", "\n", "            ", "attrs", "=", "[", "]", "\n", "", "if", "'w'", "in", "obj", ":", "\n", "            ", "obj", "[", "'width'", "]", "=", "obj", "[", "'w'", "]", "\n", "obj", "[", "'height'", "]", "=", "obj", "[", "'h'", "]", "\n", "del", "obj", "[", "'w'", "]", ",", "obj", "[", "'h'", "]", "\n", "\n", "", "object_", "=", "Object", "(", "**", "obj", ")", "\n", "\n", "object_", ".", "attributes", "=", "attrs", "\n", "object_map", "[", "oid", "]", "=", "object_", "\n", "\n", "", "return", "object_map", ",", "object_", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.parse_graph_local": [[151, 192], ["visual_genome.models.Graph", "local.map_object", "objects.append", "print", "local.map_object", "local.map_object", "relationships.append", "visual_genome.models.Relationship", "attributes.append", "visual_genome.models.Attribute", "visual_genome.models.Object"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.map_object", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.map_object", "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.map_object"], ["def", "parse_graph_local", "(", "data", ",", "image", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Modified version of `utils.ParseGraph`.\n    \"\"\"", "\n", "global", "count_skips", "\n", "objects", "=", "[", "]", "\n", "object_map", "=", "{", "}", "\n", "relationships", "=", "[", "]", "\n", "attributes", "=", "[", "]", "\n", "\n", "for", "obj", "in", "data", "[", "'objects'", "]", ":", "\n", "        ", "object_map", ",", "o_", "=", "map_object", "(", "object_map", ",", "obj", ")", "\n", "objects", ".", "append", "(", "o_", ")", "\n", "", "for", "rel", "in", "data", "[", "'relationships'", "]", ":", "\n", "        ", "if", "rel", "[", "'subject_id'", "]", "in", "object_map", "and", "rel", "[", "'object_id'", "]", "in", "object_map", ":", "\n", "            ", "object_map", ",", "s", "=", "map_object", "(", "\n", "object_map", ",", "{", "'object_id'", ":", "rel", "[", "'subject_id'", "]", "}", ")", "\n", "v", "=", "rel", "[", "'predicate'", "]", "\n", "object_map", ",", "o", "=", "map_object", "(", "\n", "object_map", ",", "{", "'object_id'", ":", "rel", "[", "'object_id'", "]", "}", ")", "\n", "rid", "=", "rel", "[", "'relationship_id'", "]", "\n", "relationships", ".", "append", "(", "Relationship", "(", "rid", ",", "s", ",", "v", ",", "o", ",", "rel", "[", "'synsets'", "]", ")", ")", "\n", "", "else", ":", "\n", "# Skip this relationship if we don't have the subject and object in", "\n", "# the object_map for this scene graph. Some data is missing in this", "\n", "# way.", "\n", "            ", "count_skips", "[", "0", "]", "+=", "1", "\n", "", "", "if", "'attributes'", "in", "data", ":", "\n", "        ", "for", "attr", "in", "data", "[", "'attributes'", "]", ":", "\n", "            ", "a", "=", "attr", "[", "'attribute'", "]", "\n", "if", "a", "[", "'object_id'", "]", "in", "object_map", ":", "\n", "                ", "attributes", ".", "append", "(", "Attribute", "(", "attr", "[", "'attribute_id'", "]", ",", "\n", "Object", "(", "a", "[", "'object_id'", "]", ",", "a", "[", "'x'", "]", ",", "\n", "a", "[", "'y'", "]", ",", "a", "[", "'w'", "]", ",", "a", "[", "'h'", "]", ",", "\n", "a", "[", "'names'", "]", ",", "a", "[", "'synsets'", "]", ")", ",", "\n", "a", "[", "'attributes'", "]", ",", "a", "[", "'synsets'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "count_skips", "[", "1", "]", "+=", "1", "\n", "", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Skipped {} rels, {} attrs total'", ".", "format", "(", "*", "count_skips", ")", ")", "\n", "", "return", "Graph", "(", "image", ",", "objects", ",", "relationships", ",", "attributes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.init_synsets": [[194, 210], ["json.load", "open", "visual_genome.models.Synset"], "function", ["None"], ["", "def", "init_synsets", "(", "scene_graph", ",", "synset_file", ")", ":", "\n", "    ", "\"\"\"\n    Convert synsets in a scene graph from strings to Synset objects.\n    \"\"\"", "\n", "syn_data", "=", "json", ".", "load", "(", "open", "(", "synset_file", ",", "'r'", ")", ")", "\n", "syn_class", "=", "{", "s", "[", "'synset_name'", "]", ":", "Synset", "(", "\n", "s", "[", "'synset_name'", "]", ",", "s", "[", "'synset_definition'", "]", ")", "for", "s", "in", "syn_data", "}", "\n", "\n", "for", "obj", "in", "scene_graph", ".", "objects", ":", "\n", "        ", "obj", ".", "synsets", "=", "[", "syn_class", "[", "sn", "]", "for", "sn", "in", "obj", ".", "synsets", "]", "\n", "", "for", "rel", "in", "scene_graph", ".", "relationships", ":", "\n", "        ", "rel", ".", "synset", "=", "[", "syn_class", "[", "sn", "]", "for", "sn", "in", "rel", ".", "synset", "]", "\n", "", "for", "attr", "in", "scene_graph", ".", "attributes", ":", "\n", "        ", "obj", ".", "synset", "=", "[", "syn_class", "[", "sn", "]", "for", "sn", "in", "attr", ".", "synset", "]", "\n", "\n", "", "return", "scene_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.save_scene_graphs_by_id": [[218, 245], ["json.load", "gc.collect", "os.path.exists", "os.mkdir", "open", "os.path.join", "str", "open", "json.dump", "os.path.join"], "function", ["None"], ["", "def", "save_scene_graphs_by_id", "(", "data_dir", "=", "'data/'", ",", "image_data_dir", "=", "'data/by-id/'", ")", ":", "\n", "    ", "\"\"\"\n    Save a separate .json file for each image id in `image_data_dir`.\n\n    Notes\n    -----\n    - If we don't save .json's by id, `scene_graphs.json` is >6G in RAM\n    - Separated .json files are ~1.1G on disk\n    - Run `add_attrs_to_scene_graphs` before `parse_graph_local` will work\n    - Attributes are only present in objects, and do not have synset info\n\n    Each output .json has the following keys:\n      - \"id\"\n      - \"objects\"\n      - \"relationships\"\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_data_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "image_data_dir", ")", "\n", "\n", "", "all_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'scene_graphs.json'", ")", ")", ")", "\n", "for", "sg_data", "in", "all_data", ":", "\n", "        ", "img_fname", "=", "str", "(", "sg_data", "[", "'image_id'", "]", ")", "+", "'.json'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "image_data_dir", ",", "img_fname", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "sg_data", ",", "f", ")", "\n", "\n", "", "", "del", "all_data", "\n", "gc", ".", "collect", "(", ")", "# clear memory", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.add_attrs_to_scene_graphs": [[247, 275], ["json.load", "gc.collect", "open", "open", "open", "json.dump", "os.path.join", "os.path.join", "img_attrs.copy", "attrs.append", "os.path.join", "sg_dict.values", "json.load"], "function", ["None"], ["", "def", "add_attrs_to_scene_graphs", "(", "data_dir", "=", "'data/'", ")", ":", "\n", "    ", "\"\"\"\n    Add attributes to `scene_graph.json`, extracted from `attributes.json`.\n\n    This also adds a unique id to each attribute, and separates individual\n    attibutes for each object (these are grouped in `attributes.json`).\n    \"\"\"", "\n", "attr_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'attributes.json'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'scene_graphs.json'", ")", ")", "as", "f", ":", "\n", "        ", "sg_dict", "=", "{", "sg", "[", "'image_id'", "]", ":", "sg", "for", "sg", "in", "json", ".", "load", "(", "f", ")", "}", "\n", "\n", "", "id_count", "=", "0", "\n", "for", "img_attrs", "in", "attr_data", ":", "\n", "        ", "attrs", "=", "[", "]", "\n", "for", "attribute", "in", "img_attrs", "[", "'attributes'", "]", ":", "\n", "            ", "a", "=", "img_attrs", ".", "copy", "(", ")", "\n", "del", "a", "[", "'attributes'", "]", "\n", "a", "[", "'attribute'", "]", "=", "attribute", "\n", "a", "[", "'attribute_id'", "]", "=", "id_count", "\n", "attrs", ".", "append", "(", "a", ")", "\n", "id_count", "+=", "1", "\n", "", "iid", "=", "img_attrs", "[", "'image_id'", "]", "\n", "sg_dict", "[", "iid", "]", "[", "'attributes'", "]", "=", "attrs", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'scene_graphs.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "sg_dict", ".", "values", "(", ")", ",", "f", ")", "\n", "", "del", "attr_data", ",", "sg_dict", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.get_scene_graphs_VRD": [[281, 291], ["open", "json.load", "local.parse_graph_VRD"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.parse_graph_VRD"], ["", "def", "get_scene_graphs_VRD", "(", "json_file", "=", "'data/vrd/json/test.json'", ")", ":", "\n", "    ", "\"\"\"\n    Load VRD dataset into scene graph format.\n    \"\"\"", "\n", "scene_graphs", "=", "[", "]", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "D", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "scene_graphs", "=", "[", "parse_graph_VRD", "(", "d", ")", "for", "d", "in", "D", "]", "\n", "return", "scene_graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.visual_genome.local.parse_graph_VRD": [[293, 318], ["visual_genome.models.Image", "enumerate", "enumerate", "visual_genome.models.Graph", "visual_genome.models.Object", "objs.append", "enumerate", "rels.append", "atrs.append", "visual_genome.models.Relationship", "visual_genome.models.Attribute"], "function", ["None"], ["", "def", "parse_graph_VRD", "(", "d", ")", ":", "\n", "    ", "image", "=", "Image", "(", "d", "[", "'photo_id'", "]", ",", "d", "[", "'filename'", "]", ",", "d", "[", "\n", "'width'", "]", ",", "d", "[", "'height'", "]", ",", "''", ",", "''", ")", "\n", "\n", "id2obj", "=", "{", "}", "\n", "objs", "=", "[", "]", "\n", "rels", "=", "[", "]", "\n", "atrs", "=", "[", "]", "\n", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "d", "[", "'objects'", "]", ")", ":", "\n", "        ", "b", "=", "o", "[", "'bbox'", "]", "\n", "obj", "=", "Object", "(", "i", ",", "b", "[", "'x'", "]", ",", "b", "[", "'y'", "]", ",", "b", "[", "'w'", "]", ",", "b", "[", "'h'", "]", ",", "o", "[", "'names'", "]", ",", "[", "]", ")", "\n", "id2obj", "[", "i", "]", "=", "obj", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "for", "j", ",", "a", "in", "enumerate", "(", "o", "[", "'attributes'", "]", ")", ":", "\n", "            ", "atrs", ".", "append", "(", "Attribute", "(", "j", ",", "obj", ",", "a", "[", "'attribute'", "]", ",", "[", "]", ")", ")", "\n", "\n", "", "", "for", "i", ",", "r", "in", "enumerate", "(", "d", "[", "'relationships'", "]", ")", ":", "\n", "        ", "s", "=", "id2obj", "[", "r", "[", "'objects'", "]", "[", "0", "]", "]", "\n", "o", "=", "id2obj", "[", "r", "[", "'objects'", "]", "[", "1", "]", "]", "\n", "v", "=", "r", "[", "'relationship'", "]", "\n", "rels", ".", "append", "(", "Relationship", "(", "i", ",", "s", ",", "v", ",", "o", ",", "[", "]", ")", ")", "\n", "\n", "", "return", "Graph", "(", "image", ",", "objs", ",", "rels", ",", "atrs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.eval_region.test_model": [[28, 32], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "modules.region_grounding_trainer.RegionGroundingTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["def", "test_model", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "testdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.demo.main_rl": [[27, 66], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "torch.from_numpy().float", "torch.from_numpy().float", "print", "print", "open", "pickle.load", "all_img_feats.cuda.cuda", "all_img_masks.cuda.cuda", "all_img_feats.cuda.size", "all_img_masks.cuda.size", "print", "input", "modules.region_grounding_trainer.RegionGroundingTrainer.net.demo_step", "matplotlib.figure", "matplotlib.suptitle", "range", "matplotlib.show", "print", "os.join", "torch.from_numpy", "torch.from_numpy", "cv2.imread", "create_squared_image", "cv2.resize", "top5_imgs.append", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "datasets.vg.vg.color_path_from_index", "cur_img[].astype"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.demo_step", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["def", "main_rl", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "testdb", ".", "cache_dir", ",", "'img_features/vg_rl_128_i3_img_features.pkl'", ")", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "data_", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "all_img_feats", "=", "data_", "[", "'feats'", "]", "\n", "all_img_masks", "=", "data_", "[", "'masks'", "]", "\n", "\n", "", "all_img_feats", "=", "torch", ".", "from_numpy", "(", "all_img_feats", ")", ".", "float", "(", ")", "\n", "all_img_masks", "=", "torch", ".", "from_numpy", "(", "all_img_masks", ")", ".", "float", "(", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "all_img_feats", "=", "all_img_feats", ".", "cuda", "(", ")", "\n", "all_img_masks", "=", "all_img_masks", ".", "cuda", "(", ")", "\n", "", "print", "(", "'all_img_feats'", ",", "all_img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'all_img_masks'", ",", "all_img_masks", ".", "size", "(", ")", ")", "\n", "\n", "\n", "count", "=", "0", "\n", "all_captions", "=", "[", "]", "\n", "while", "count", "<", "10", ":", "\n", "        ", "print", "(", "'Please input the query:\\n'", ")", "\n", "query", "=", "input", "(", ")", "\n", "r", ",", "top5_img_inds", "=", "trainer", ".", "net", ".", "demo_step", "(", "query", ",", "all_captions", ",", "all_img_feats", ",", "all_img_masks", ",", "testdb", ")", "\n", "top5_imgs", "=", "[", "]", "\n", "for", "x", "in", "top5_img_inds", ":", "\n", "            ", "cur_img", "=", "cv2", ".", "imread", "(", "testdb", ".", "color_path_from_index", "(", "x", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "cur_img", ",", "_", ",", "_", "=", "create_squared_image", "(", "cur_img", ")", "\n", "cur_img", "=", "cv2", ".", "resize", "(", "cur_img", ",", "(", "500", ",", "500", ")", ")", "\n", "top5_imgs", ".", "append", "(", "cur_img", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "8", ")", ")", "\n", "plt", ".", "suptitle", "(", "query", ",", "fontsize", "=", "20", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "top5_imgs", ")", ")", ":", "\n", "            ", "cur_img", "=", "top5_imgs", "[", "i", "]", "\n", "plt", ".", "subplot", "(", "1", ",", "5", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "cur_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "count", "+=", "1", "\n", "print", "(", "'turn:'", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.demo.main_rnn": [[68, 107], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "torch.from_numpy().float", "torch.from_numpy().float", "print", "print", "open", "pickle.load", "all_img_feats.cuda.cuda", "all_img_masks.cuda.cuda", "all_img_feats.cuda.size", "all_img_masks.cuda.size", "print", "input", "modules.region_grounding_trainer.RegionGroundingTrainer.net.demo_step", "matplotlib.figure", "matplotlib.suptitle", "range", "matplotlib.show", "print", "os.join", "torch.from_numpy", "torch.from_numpy", "cv2.imread", "create_squared_image", "cv2.resize", "top5_imgs.append", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "datasets.vg.vg.color_path_from_index", "cur_img[].astype"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.demo_step", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["", "", "def", "main_rnn", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "testdb", ".", "cache_dir", ",", "'img_features/vg_rnn_1280_img_features.pkl'", ")", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "data_", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "all_img_feats", "=", "data_", "[", "'feats'", "]", "\n", "all_img_masks", "=", "data_", "[", "'masks'", "]", "\n", "\n", "", "all_img_feats", "=", "torch", ".", "from_numpy", "(", "all_img_feats", ")", ".", "float", "(", ")", "\n", "all_img_masks", "=", "torch", ".", "from_numpy", "(", "all_img_masks", ")", ".", "float", "(", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "all_img_feats", "=", "all_img_feats", ".", "cuda", "(", ")", "\n", "all_img_masks", "=", "all_img_masks", ".", "cuda", "(", ")", "\n", "", "print", "(", "'all_img_feats'", ",", "all_img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'all_img_masks'", ",", "all_img_masks", ".", "size", "(", ")", ")", "\n", "\n", "\n", "count", "=", "0", "\n", "all_captions", "=", "[", "]", "\n", "while", "count", "<", "10", ":", "\n", "        ", "print", "(", "'Please input the query:\\n'", ")", "\n", "query", "=", "input", "(", ")", "\n", "r", ",", "top5_img_inds", "=", "trainer", ".", "net", ".", "demo_step", "(", "query", ",", "all_captions", ",", "all_img_feats", ",", "all_img_masks", ",", "testdb", ")", "\n", "top5_imgs", "=", "[", "]", "\n", "for", "x", "in", "top5_img_inds", ":", "\n", "            ", "cur_img", "=", "cv2", ".", "imread", "(", "testdb", ".", "color_path_from_index", "(", "x", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "cur_img", ",", "_", ",", "_", "=", "create_squared_image", "(", "cur_img", ")", "\n", "cur_img", "=", "cv2", ".", "resize", "(", "cur_img", ",", "(", "500", ",", "500", ")", ")", "\n", "top5_imgs", ".", "append", "(", "cur_img", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "8", ")", ")", "\n", "plt", ".", "suptitle", "(", "query", ",", "fontsize", "=", "20", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "top5_imgs", ")", ")", ":", "\n", "            ", "cur_img", "=", "top5_imgs", "[", "i", "]", "\n", "plt", ".", "subplot", "(", "1", ",", "5", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "cur_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "count", "+=", "1", "\n", "print", "(", "'turn:'", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.demo.main_hred": [[109, 142], ["datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "torch.from_numpy().float", "print", "open", "pickle.load", "all_img_feats.cuda.cuda", "all_img_feats.cuda.size", "print", "input", "modules.image_hred_trainer.ImageHREDTrainer.net.demo_step", "matplotlib.figure", "matplotlib.suptitle", "range", "matplotlib.show", "print", "os.join", "torch.from_numpy", "cv2.imread", "create_squared_image", "cv2.resize", "top5_imgs.append", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "datasets.vg.vg.color_path_from_index", "cur_img[].astype"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.demo_step", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["", "", "def", "main_hred", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "testdb", ".", "cache_dir", ",", "'img_features/vg_image_hred_1280_img_features.pkl'", ")", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "all_img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "\n", "", "all_img_feats", "=", "torch", ".", "from_numpy", "(", "all_img_feats", ")", ".", "float", "(", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "all_img_feats", "=", "all_img_feats", ".", "cuda", "(", ")", "\n", "", "print", "(", "'all_img_feats'", ",", "all_img_feats", ".", "size", "(", ")", ")", "\n", "\n", "count", "=", "0", "\n", "all_captions", "=", "[", "]", "\n", "while", "count", "<", "10", ":", "\n", "        ", "print", "(", "'Please input the query:\\n'", ")", "\n", "query", "=", "input", "(", ")", "\n", "r", ",", "top5_img_inds", "=", "trainer", ".", "net", ".", "demo_step", "(", "query", ",", "all_captions", ",", "all_img_feats", ",", "testdb", ")", "\n", "top5_imgs", "=", "[", "]", "\n", "for", "x", "in", "top5_img_inds", ":", "\n", "            ", "cur_img", "=", "cv2", ".", "imread", "(", "testdb", ".", "color_path_from_index", "(", "x", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "cur_img", ",", "_", ",", "_", "=", "create_squared_image", "(", "cur_img", ")", "\n", "cur_img", "=", "cv2", ".", "resize", "(", "cur_img", ",", "(", "500", ",", "500", ")", ")", "\n", "top5_imgs", ".", "append", "(", "cur_img", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "8", ")", ")", "\n", "plt", ".", "suptitle", "(", "query", ",", "fontsize", "=", "20", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "top5_imgs", ")", ")", ":", "\n", "            ", "cur_img", "=", "top5_imgs", "[", "i", "]", "\n", "plt", ".", "subplot", "(", "1", ",", "5", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "cur_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "count", "+=", "1", "\n", "print", "(", "'turn:'", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_image_features.dump_image_features": [[28, 50], ["os.join", "maybe_create", "datasets.vg.vg", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "modules.image_encoder.ImageEncoder", "net.cuda.eval", "enumerate", "net.cuda.cuda", "batched[].float", "int", "os.join", "net.cuda.squeeze().cpu().data.numpy", "pickle_save", "print", "images.cuda.cuda", "len", "str().zfill", "net.cuda.squeeze().cpu", "str", "net.cuda.squeeze", "net.cuda."], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.pickle_save"], ["def", "dump_image_features", "(", "config", ")", ":", "\n", "    ", "output_dir", "=", "osp", ".", "join", "(", "config", ".", "data_dir", ",", "'vg'", ",", "'global_features'", ")", "\n", "maybe_create", "(", "output_dir", ")", "\n", "\n", "db", "=", "vg", "(", "config", ")", "\n", "loaddb", "=", "caption_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "collate_fn", "=", "caption_collate_fn", ")", "\n", "net", "=", "ImageEncoder", "(", "config", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "net", "=", "net", ".", "cuda", "(", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "images", "=", "batched", "[", "'images'", "]", ".", "float", "(", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "", "indices", "=", "batched", "[", "'image_inds'", "]", "\n", "image_index", "=", "int", "(", "indices", "[", "0", "]", ")", "\n", "output_path", "=", "osp", ".", "join", "(", "output_dir", ",", "str", "(", "image_index", ")", ".", "zfill", "(", "12", ")", "+", "'.npy'", ")", "\n", "features", "=", "net", "(", "images", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "assert", "(", "len", "(", "features", ")", "==", "2048", ")", "\n", "pickle_save", "(", "output_path", ",", "features", ")", "\n", "print", "(", "cnt", ",", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.create_html.create_html_per_image": [[25, 48], ["datasets.vg.vg", "maybe_create", "range", "len", "html_writer.HTML", "html_writer.HTML.table", "r.td", "r.td.img", "r.td", "range", "open", "print", "open.close", "print", "len", "r.td.p", "os.join", "sorted", "list", "scene[].keys"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create"], ["def", "create_html_per_image", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "image_folder_name", "=", "'test_image_htmls'", "\n", "maybe_create", "(", "image_folder_name", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testdb", ".", "scenedb", ")", ")", ":", "\n", "        ", "scene", "=", "testdb", ".", "scenedb", "[", "i", "]", "\n", "all_meta_regions", "=", "[", "scene", "[", "'regions'", "]", "[", "x", "]", "for", "x", "in", "sorted", "(", "list", "(", "scene", "[", "'regions'", "]", ".", "keys", "(", ")", ")", ")", "]", "\n", "captions", "=", "[", "x", "[", "'caption'", "]", "for", "x", "in", "all_meta_regions", "[", ":", "config", ".", "max_turns", "]", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "text", "=", "'\\n'", ".", "join", "(", "captions", ")", "\n", "path", "=", "\"http://www.cs.virginia.edu/~ft3ex/data/vg/VG_100K/%d.jpg\"", "%", "image_index", "\n", "config_html", "=", "HTML", "(", ")", "\n", "config_table", "=", "config_html", ".", "table", "(", "border", "=", "'1'", ")", "\n", "r", "=", "config_table", ".", "tr", "\n", "c1", "=", "r", ".", "td", "(", ")", "\n", "c1", ".", "img", "(", "src", "=", "'%s'", "%", "path", ",", "height", "=", "'700'", ")", "\n", "c2", "=", "r", ".", "td", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "captions", ")", ")", ":", "\n", "            ", "c2", ".", "p", "(", "captions", "[", "j", "]", ")", "\n", "", "html_file", "=", "open", "(", "osp", ".", "join", "(", "image_folder_name", ",", "'%d.html'", "%", "image_index", ")", ",", "'w'", ")", "\n", "print", "(", "config_table", ",", "file", "=", "html_file", ")", "\n", "html_file", ".", "close", "(", ")", "\n", "print", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.create_html.create_text_reference_html": [[50, 64], ["html_writer.HTML", "html_writer.HTML.table", "datasets.vg.vg", "range", "open", "print", "open.close", "len", "r.td", "r.td.a"], "function", ["None"], ["", "", "def", "create_text_reference_html", "(", "config", ")", ":", "\n", "    ", "config_html", "=", "HTML", "(", ")", "\n", "config_table", "=", "config_html", ".", "table", "(", "border", "=", "'1'", ")", "\n", "testdb", "=", "vg", "(", "config", ",", "'val'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testdb", ".", "scenedb", ")", ")", ":", "\n", "        ", "scene", "=", "testdb", ".", "scenedb", "[", "i", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "path", "=", "\"http://www.cs.virginia.edu/~ft3ex/data/language_vision/val_image_htmls/%d.html\"", "%", "image_index", "\n", "r", "=", "config_table", ".", "tr", "\n", "c", "=", "r", ".", "td", "(", ")", "\n", "c", ".", "a", "(", "'%04d'", "%", "i", ",", "href", "=", "'%s'", "%", "path", ")", "\n", "", "html_file", "=", "open", "(", "'reference.html'", ",", "'w'", ")", "\n", "print", "(", "config_table", ",", "file", "=", "html_file", ")", "\n", "html_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.create_html.create_img_reference_html": [[66, 81], ["html_writer.HTML", "html_writer.HTML.table", "datasets.vg.vg", "range", "open", "print", "open.close", "len", "c.a", "c.a.img"], "function", ["None"], ["", "def", "create_img_reference_html", "(", "config", ")", ":", "\n", "    ", "config_html", "=", "HTML", "(", ")", "\n", "config_table", "=", "config_html", ".", "table", "(", "border", "=", "'1'", ")", "\n", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testdb", ".", "scenedb", ")", ")", ":", "\n", "        ", "scene", "=", "testdb", ".", "scenedb", "[", "i", "]", "\n", "image_index", "=", "scene", "[", "'image_index'", "]", "\n", "img_path", "=", "\"http://www.cs.virginia.edu/~ft3ex/data/vg/VG_100K/%d.jpg\"", "%", "image_index", "\n", "html_path", "=", "\"http://www.cs.virginia.edu/~ft3ex/data/language_vision/test_image_htmls/%d.html\"", "%", "image_index", "\n", "c", "=", "config_table", ".", "tr", "\n", "a", "=", "c", ".", "a", "(", "href", "=", "'%s'", "%", "html_path", ")", "\n", "a", ".", "img", "(", "src", "=", "'%s'", "%", "img_path", ",", "height", "=", "'150'", ")", "\n", "", "html_file", "=", "open", "(", "'img_reference.html'", ",", "'w'", ")", "\n", "print", "(", "config_table", ",", "file", "=", "html_file", ")", "\n", "html_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__init__": [[255, 271], ["html_writer.HTML.text"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "text", "=", "None", ",", "stack", "=", "None", ",", "newlines", "=", "True", ",", "\n", "escape", "=", "True", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_content", "=", "[", "]", "\n", "self", ".", "_attrs", "=", "{", "}", "\n", "# insert newlines between content?", "\n", "if", "stack", "is", "None", ":", "\n", "            ", "stack", "=", "[", "self", "]", "\n", "self", ".", "_top", "=", "True", "\n", "self", ".", "_newlines", "=", "newlines", "\n", "", "else", ":", "\n", "            ", "self", ".", "_top", "=", "False", "\n", "self", ".", "_newlines", "=", "name", "in", "self", ".", "newline_default_on", "\n", "", "self", ".", "_stack", "=", "stack", "\n", "if", "text", "is", "not", "None", ":", "\n", "            ", "self", ".", "text", "(", "text", ",", "escape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__getattr__": [[272, 283], ["html_writer.HTML.__class__", "html_writer.HTML._stack[]._content.append", "html_writer.HTML._content.append"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "# adding a new tag or newline", "\n", "        ", "if", "name", "==", "'newline'", ":", "\n", "            ", "e", "=", "'\\n'", "\n", "", "else", ":", "\n", "            ", "e", "=", "self", ".", "__class__", "(", "name", ",", "stack", "=", "self", ".", "_stack", ")", "\n", "", "if", "self", ".", "_top", ":", "\n", "            ", "self", ".", "_stack", "[", "-", "1", "]", ".", "_content", ".", "append", "(", "e", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_content", ".", "append", "(", "e", ")", "\n", "", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__iadd__": [[284, 290], ["html_writer.HTML._stack[]._content.append", "html_writer.HTML._content.append"], "methods", ["None"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "self", ".", "_top", ":", "\n", "            ", "self", ".", "_stack", "[", "-", "1", "]", ".", "_content", ".", "append", "(", "other", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_content", ".", "append", "(", "other", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text": [[291, 302], ["cgi.escape", "html_writer.HTML._stack[]._content.append", "html_writer.HTML._content.append"], "methods", ["None"], ["", "def", "text", "(", "self", ",", "text", ",", "escape", "=", "True", ")", ":", "\n", "        ", "'''Add text to the document. If \"escape\" is True any characters\n        special to HTML will be escaped.\n        '''", "\n", "if", "escape", ":", "\n", "            ", "text", "=", "cgi", ".", "escape", "(", "text", ")", "\n", "# adding text", "\n", "", "if", "self", ".", "_top", ":", "\n", "            ", "self", ".", "_stack", "[", "-", "1", "]", ".", "_content", ".", "append", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_content", ".", "append", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.raw_text": [[303, 308], ["html_writer.HTML.text"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["", "", "def", "raw_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "'''Add raw, unescaped text to the document. This is useful for\n        explicitly adding HTML code or entities.\n        '''", "\n", "return", "self", ".", "text", "(", "text", ",", "escape", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__call__": [[309, 334], ["kw.pop", "kw.pop", "isinstance", "TypeError", "list", "cgi.escape", "cgi.escape", "len", "len", "TypeError", "map"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "content", ",", "**", "kw", ")", ":", "\n", "        ", "if", "self", ".", "_name", "==", "'read'", ":", "\n", "            ", "if", "len", "(", "content", ")", "==", "1", "and", "isinstance", "(", "content", "[", "0", "]", ",", "int", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'you appear to be calling read(%d) on '", "\n", "'a HTML instance'", "%", "content", ")", "\n", "", "elif", "len", "(", "content", ")", "==", "0", ":", "\n", "                ", "raise", "TypeError", "(", "'you appear to be calling read() on a '", "\n", "'HTML instance'", ")", "\n", "\n", "# customising a tag with content or attributes", "\n", "", "", "escape", "=", "kw", ".", "pop", "(", "'escape'", ",", "True", ")", "\n", "if", "content", ":", "\n", "            ", "if", "escape", ":", "\n", "                ", "self", ".", "_content", "=", "list", "(", "map", "(", "cgi", ".", "escape", ",", "content", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_content", "=", "content", "\n", "", "", "if", "'newlines'", "in", "kw", ":", "\n", "# special-case to allow control over newlines", "\n", "            ", "self", ".", "_newlines", "=", "kw", ".", "pop", "(", "'newlines'", ")", "\n", "", "for", "k", "in", "kw", ":", "\n", "            ", "if", "k", "==", "'klass'", ":", "\n", "                ", "self", ".", "_attrs", "[", "'class'", "]", "=", "cgi", ".", "escape", "(", "kw", "[", "k", "]", ",", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_attrs", "[", "k", "]", "=", "cgi", ".", "escape", "(", "kw", "[", "k", "]", ",", "True", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__enter__": [[335, 339], ["html_writer.HTML._stack.append"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "# we're now adding tags to me!", "\n", "        ", "self", ".", "_stack", ".", "append", "(", "self", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__exit__": [[340, 343], ["html_writer.HTML._stack.pop"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "# we're done adding tags to me!", "\n", "        ", "self", ".", "_stack", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__repr__": [[344, 346], ["id"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'<HTML %s 0x%x>'", "%", "(", "self", ".", "_name", ",", "id", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML._stringify": [[347, 359], ["join.join", "join.join", "map", "html_writer.HTML._attrs.items", "map"], "methods", ["None"], ["", "def", "_stringify", "(", "self", ",", "str_type", ")", ":", "\n", "# turn me and my content into text", "\n", "        ", "join", "=", "'\\n'", "if", "self", ".", "_newlines", "else", "''", "\n", "if", "self", ".", "_name", "is", "None", ":", "\n", "            ", "return", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "", "a", "=", "[", "'%s=\"%s\"'", "%", "i", "for", "i", "in", "self", ".", "_attrs", ".", "items", "(", ")", "]", "\n", "l", "=", "[", "self", ".", "_name", "]", "+", "a", "\n", "s", "=", "'<%s>%s'", "%", "(", "' '", ".", "join", "(", "l", ")", ",", "join", ")", "\n", "if", "self", ".", "_content", ":", "\n", "            ", "s", "+=", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "s", "+=", "join", "+", "'</%s>'", "%", "self", ".", "_name", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__str__": [[360, 362], ["html_writer.HTML._stringify"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.XML._stringify"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stringify", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__unicode__": [[363, 365], ["html_writer.HTML._stringify"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.XML._stringify"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stringify", "(", "unicode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.__iter__": [[366, 368], ["iter", "str"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "[", "str", "(", "self", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.XHTML._stringify": [[376, 391], ["join.join", "join.join", "map", "html_writer.XHTML._attrs.items", "map", "html_writer.XHTML._name.lower"], "methods", ["None"], ["def", "_stringify", "(", "self", ",", "str_type", ")", ":", "\n", "# turn me and my content into text", "\n", "# honor empty and non-empty elements", "\n", "        ", "join", "=", "'\\n'", "if", "self", ".", "_newlines", "else", "''", "\n", "if", "self", ".", "_name", "is", "None", ":", "\n", "            ", "return", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "", "a", "=", "[", "'%s=\"%s\"'", "%", "i", "for", "i", "in", "self", ".", "_attrs", ".", "items", "(", ")", "]", "\n", "l", "=", "[", "self", ".", "_name", "]", "+", "a", "\n", "s", "=", "'<%s>%s'", "%", "(", "' '", ".", "join", "(", "l", ")", ",", "join", ")", "\n", "if", "self", ".", "_content", "or", "not", "(", "self", ".", "_name", ".", "lower", "(", ")", "in", "self", ".", "empty_elements", ")", ":", "\n", "            ", "s", "+=", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "s", "+=", "join", "+", "'</%s>'", "%", "self", ".", "_name", "\n", "", "else", ":", "\n", "            ", "s", "=", "'<%s />%s'", "%", "(", "' '", ".", "join", "(", "l", ")", ",", "join", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.XML._stringify": [[400, 415], ["join.join", "join.join", "map", "html_writer.XML._attrs.items", "map"], "methods", ["None"], ["def", "_stringify", "(", "self", ",", "str_type", ")", ":", "\n", "# turn me and my content into text", "\n", "# honor empty and non-empty elements", "\n", "        ", "join", "=", "'\\n'", "if", "self", ".", "_newlines", "else", "''", "\n", "if", "self", ".", "_name", "is", "None", ":", "\n", "            ", "return", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "", "a", "=", "[", "'%s=\"%s\"'", "%", "i", "for", "i", "in", "self", ".", "_attrs", ".", "items", "(", ")", "]", "\n", "l", "=", "[", "self", ".", "_name", "]", "+", "a", "\n", "s", "=", "'<%s>%s'", "%", "(", "' '", ".", "join", "(", "l", ")", ",", "join", ")", "\n", "if", "self", ".", "_content", ":", "\n", "            ", "s", "+=", "join", ".", "join", "(", "map", "(", "str_type", ",", "self", ".", "_content", ")", ")", "\n", "s", "+=", "join", "+", "'</%s>'", "%", "self", ".", "_name", "\n", "", "else", ":", "\n", "            ", "s", "=", "'<%s />%s'", "%", "(", "' '", ".", "join", "(", "l", ")", ",", "join", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_empty_tag": [[418, 421], ["html_writer.TestCase.assertEquals", "str", "html_writer.HTML"], "methods", ["None"], ["    ", "def", "test_empty_tag", "(", "self", ")", ":", "\n", "        ", "'generation of an empty HTML tag'", "\n", "self", ".", "assertEquals", "(", "str", "(", "HTML", "(", ")", ".", "br", ")", ",", "'<br>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_empty_tag_xml": [[422, 425], ["html_writer.TestCase.assertEquals", "str", "html_writer.XHTML"], "methods", ["None"], ["", "def", "test_empty_tag_xml", "(", "self", ")", ":", "\n", "        ", "'generation of an empty XHTML tag'", "\n", "self", ".", "assertEquals", "(", "str", "(", "XHTML", "(", ")", ".", "br", ")", ",", "'<br />'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_tag_add": [[426, 429], ["html_writer.TestCase.assertEquals", "str", "html_writer.HTML"], "methods", ["None"], ["", "def", "test_tag_add", "(", "self", ")", ":", "\n", "        ", "'test top-level tag creation'", "\n", "self", ".", "assertEquals", "(", "str", "(", "HTML", "(", "'html'", ",", "'text'", ")", ")", ",", "'<html>\\ntext\\n</html>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_tag_add_no_newline": [[430, 434], ["html_writer.TestCase.assertEquals", "str", "html_writer.HTML"], "methods", ["None"], ["", "def", "test_tag_add_no_newline", "(", "self", ")", ":", "\n", "        ", "'test top-level tag creation'", "\n", "self", ".", "assertEquals", "(", "str", "(", "HTML", "(", "'html'", ",", "'text'", ",", "newlines", "=", "False", ")", ")", ",", "\n", "'<html>text</html>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_iadd_tag": [[435, 442], ["html_writer.XML", "html_writer.XML", "html_writer.XML", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_iadd_tag", "(", "self", ")", ":", "\n", "        ", "\"test iadd'ing a tag\"", "\n", "h", "=", "XML", "(", "'xml'", ")", "\n", "h", "+=", "XML", "(", "'some-tag'", ",", "'spam'", ",", "newlines", "=", "False", ")", "\n", "h", "+=", "XML", "(", "'text'", ",", "'spam'", ",", "newlines", "=", "False", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "\n", "'<xml>\\n<some-tag>spam</some-tag>\\n<text>spam</text>\\n</xml>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_iadd_text": [[443, 449], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_iadd_text", "(", "self", ")", ":", "\n", "        ", "\"test iadd'ing text\"", "\n", "h", "=", "HTML", "(", "'html'", ",", "newlines", "=", "False", ")", "\n", "h", "+=", "'text'", "\n", "h", "+=", "'text'", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<html>texttext</html>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_xhtml_match_tag": [[450, 453], ["html_writer.TestCase.assertEquals", "str", "html_writer.XHTML"], "methods", ["None"], ["", "def", "test_xhtml_match_tag", "(", "self", ")", ":", "\n", "        ", "'check forced generation of matching tag when empty'", "\n", "self", ".", "assertEquals", "(", "str", "(", "XHTML", "(", ")", ".", "p", ")", ",", "'<p></p>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_just_tag": [[467, 470], ["html_writer.TestCase.assertEquals", "str", "html_writer.HTML"], "methods", ["None"], ["", "", "def", "test_just_tag", "(", "self", ")", ":", "\n", "        ", "'generate HTML for just one tag'", "\n", "self", ".", "assertEquals", "(", "str", "(", "HTML", "(", ")", ".", "br", ")", ",", "'<br>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_just_tag_xhtml": [[471, 474], ["html_writer.TestCase.assertEquals", "str", "html_writer.XHTML"], "methods", ["None"], ["", "def", "test_just_tag_xhtml", "(", "self", ")", ":", "\n", "        ", "'generate XHTML for just one tag'", "\n", "self", ".", "assertEquals", "(", "str", "(", "XHTML", "(", ")", ".", "br", ")", ",", "'<br />'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_xml": [[475, 480], ["html_writer.TestCase.assertEquals", "html_writer.TestCase.assertEquals", "html_writer.TestCase.assertEquals", "str", "str", "str", "XML().br", "html_writer.XML", "html_writer.XML", "html_writer.XML"], "methods", ["None"], ["", "def", "test_xml", "(", "self", ")", ":", "\n", "        ", "'generate XML'", "\n", "self", ".", "assertEquals", "(", "str", "(", "XML", "(", ")", ".", "br", ")", ",", "'<br />'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "XML", "(", ")", ".", "p", ")", ",", "'<p />'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "XML", "(", ")", ".", "br", "(", "'text'", ")", ")", ",", "'<br>text</br>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_para_tag": [[481, 486], ["html_writer.HTML", "HTML.p", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_para_tag", "(", "self", ")", ":", "\n", "        ", "'generation of a tag with contents'", "\n", "h", "=", "HTML", "(", ")", "\n", "h", ".", "p", "(", "'hello'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<p>hello</p>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_escape": [[487, 492], ["html_writer.HTML", "html_writer.HTML.text", "html_writer.TestCase.assertEquals", "str"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["", "def", "test_escape", "(", "self", ")", ":", "\n", "        ", "'escaping of special HTML characters in text'", "\n", "h", "=", "HTML", "(", ")", "\n", "h", ".", "text", "(", "'<>&'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'&lt;&gt;&amp;'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_no_escape": [[493, 498], ["html_writer.HTML", "html_writer.HTML.text", "html_writer.TestCase.assertEquals", "str"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["", "def", "test_no_escape", "(", "self", ")", ":", "\n", "        ", "'no escaping of special HTML characters in text'", "\n", "h", "=", "HTML", "(", ")", "\n", "h", ".", "text", "(", "'<>&'", ",", "False", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<>&'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_escape_attr": [[499, 504], ["html_writer.HTML", "HTML.br", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_escape_attr", "(", "self", ")", ":", "\n", "        ", "'escaping of special HTML characters in attributes'", "\n", "h", "=", "HTML", "(", ")", "\n", "h", ".", "br", "(", "id", "=", "'<>&\"'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<br id=\"&lt;&gt;&amp;&quot;\">'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_subtag_context": [[505, 512], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "HTML.li", "HTML.li", "str"], "methods", ["None"], ["", "def", "test_subtag_context", "(", "self", ")", ":", "\n", "        ", "'generation of sub-tags using \"with\" context'", "\n", "h", "=", "HTML", "(", ")", "\n", "with", "h", ".", "ol", ":", "\n", "            ", "h", ".", "li", "(", "'foo'", ")", "\n", "h", ".", "li", "(", "'bar'", ")", "\n", "", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<ol>\\n<li>foo</li>\\n<li>bar</li>\\n</ol>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_subtag_direct": [[513, 521], ["html_writer.HTML", "l.li", "l.li.b", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_subtag_direct", "(", "self", ")", ":", "\n", "        ", "'generation of sub-tags directly on the parent tag'", "\n", "h", "=", "HTML", "(", ")", "\n", "l", "=", "h", ".", "ol", "\n", "l", ".", "li", "(", "'foo'", ")", "\n", "l", ".", "li", ".", "b", "(", "'bar'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "\n", "'<ol>\\n<li>foo</li>\\n<li><b>bar</b></li>\\n</ol>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_subtag_direct_context": [[522, 530], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "l.li", "l.li.b", "str"], "methods", ["None"], ["", "def", "test_subtag_direct_context", "(", "self", ")", ":", "\n", "        ", "'generation of sub-tags directly on the parent tag in \"with\" context'", "\n", "h", "=", "HTML", "(", ")", "\n", "with", "h", ".", "ol", "as", "l", ":", "\n", "            ", "l", ".", "li", "(", "'foo'", ")", "\n", "l", ".", "li", ".", "b", "(", "'bar'", ")", "\n", "", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "\n", "'<ol>\\n<li>foo</li>\\n<li><b>bar</b></li>\\n</ol>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_subtag_no_newlines": [[531, 538], ["html_writer.HTML", "HTML.ol", "HTML.ol.li", "HTML.ol.li", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_subtag_no_newlines", "(", "self", ")", ":", "\n", "        ", "'prevent generation of newlines against default'", "\n", "h", "=", "HTML", "(", ")", "\n", "l", "=", "h", ".", "ol", "(", "newlines", "=", "False", ")", "\n", "l", ".", "li", "(", "'foo'", ")", "\n", "l", ".", "li", "(", "'bar'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<ol><li>foo</li><li>bar</li></ol>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_add_text": [[539, 545], ["html_writer.HTML", "HTML.p", "HTML.p.text", "html_writer.TestCase.assertEquals", "str"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["", "def", "test_add_text", "(", "self", ")", ":", "\n", "        ", "'add text to a tag'", "\n", "h", "=", "HTML", "(", ")", "\n", "p", "=", "h", ".", "p", "(", "'hello, world!\\n'", ")", "\n", "p", ".", "text", "(", "'more text'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<p>hello, world!\\nmore text</p>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_add_text_newlines": [[546, 552], ["html_writer.HTML", "HTML.p", "HTML.p.text", "html_writer.TestCase.assertEquals", "str"], "methods", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.HTML.text"], ["", "def", "test_add_text_newlines", "(", "self", ")", ":", "\n", "        ", "'add text to a tag with newlines for prettiness'", "\n", "h", "=", "HTML", "(", ")", "\n", "p", "=", "h", ".", "p", "(", "'hello, world!'", ",", "newlines", "=", "True", ")", "\n", "p", ".", "text", "(", "'more text'", ")", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<p>\\nhello, world!\\nmore text\\n</p>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_doc_newlines": [[553, 559], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_doc_newlines", "(", "self", ")", ":", "\n", "        ", "'default document adding newlines between tags'", "\n", "h", "=", "HTML", "(", ")", "\n", "h", ".", "br", "\n", "h", ".", "br", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<br>\\n<br>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_doc_no_newlines": [[560, 566], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "str"], "methods", ["None"], ["", "def", "test_doc_no_newlines", "(", "self", ")", ":", "\n", "        ", "'prevent document adding newlines between tags'", "\n", "h", "=", "HTML", "(", "newlines", "=", "False", ")", "\n", "h", ".", "br", "\n", "h", ".", "br", "\n", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'<br><br>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_unicode": [[567, 579], ["html_writer.HTML", "HTML.p", "html_writer.TestCase.assertEquals", "unicode"], "methods", ["None"], ["", "def", "test_unicode", "(", "self", ")", ":", "\n", "        ", "'make sure unicode input works and results in unicode output'", "\n", "h", "=", "HTML", "(", "newlines", "=", "False", ")", "\n", "# Python 3 compat", "\n", "try", ":", "\n", "            ", "unicode", "=", "unicode", "\n", "TEST", "=", "'euro \\xe2\\x82\\xac'", ".", "decode", "(", "'utf8'", ")", "\n", "", "except", ":", "\n", "            ", "unicode", "=", "str", "\n", "TEST", "=", "'euro \u20ac'", "\n", "", "h", ".", "p", "(", "TEST", ")", "\n", "self", ".", "assertEquals", "(", "unicode", "(", "h", ")", ",", "'<p>%s</p>'", "%", "TEST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.html_writer.TestCase.test_table": [[580, 592], ["html_writer.HTML", "html_writer.TestCase.assertEquals", "HTML.table", "range", "str", "HTML.td", "HTML.td"], "methods", ["None"], ["", "def", "test_table", "(", "self", ")", ":", "\n", "        ", "'multiple \"with\" context blocks'", "\n", "h", "=", "HTML", "(", ")", "\n", "with", "h", ".", "table", "(", "border", "=", "'1'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "with", "h", ".", "tr", ":", "\n", "                    ", "h", ".", "td", "(", "'column 1'", ")", "\n", "h", ".", "td", "(", "'column 2'", ")", "\n", "", "", "", "self", ".", "assertEquals", "(", "str", "(", "h", ")", ",", "'''<table border=\"1\">\n<tr><td>column 1</td><td>column 2</td></tr>\n<tr><td>column 1</td><td>column 2</td></tr>\n</table>'''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_1": [[26, 33], ["len", "numpy.random.permutation", "range"], "function", ["None"], ["def", "caption_1", "(", "obj_candidate", ",", "target_scene", ")", ":", "\n", "    ", "n", "=", "len", "(", "obj_candidate", "[", "'regs'", "]", ")", "\n", "if", "n", ">", "0", ":", "\n", "        ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "n", ")", ")", "\n", "reg_id", "=", "obj_candidate", "[", "'regs'", "]", "[", "indices", "[", "0", "]", "]", "\n", "return", "target_scene", "[", "'regions'", "]", "[", "reg_id", "]", "[", "'caption'", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_2": [[34, 41], ["len", "numpy.random.permutation", "range"], "function", ["None"], ["", "def", "caption_2", "(", "obj_candidate", ",", "target_scene", ")", ":", "\n", "    ", "n", "=", "len", "(", "obj_candidate", "[", "'atts'", "]", ")", "\n", "if", "n", ">", "0", ":", "\n", "        ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "n", ")", ")", "\n", "att", "=", "obj_candidate", "[", "'atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "return", "'%s should be %s.'", "%", "(", "obj_candidate", "[", "'name'", "]", ",", "att", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_3": [[42, 60], ["len", "list", "numpy.random.permutation", "len", "len", "obj_candidate[].keys", "range", "numpy.random.permutation", "numpy.random.permutation", "range", "range"], "function", ["None"], ["", "def", "caption_3", "(", "obj_candidate", ",", "target_scene", ")", ":", "\n", "    ", "n", "=", "len", "(", "obj_candidate", "[", "'positive_rels'", "]", ")", "\n", "if", "n", ">", "0", ":", "\n", "        ", "keys", "=", "list", "(", "obj_candidate", "[", "'positive_rels'", "]", ".", "keys", "(", ")", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "n", ")", ")", "\n", "rel", "=", "obj_candidate", "[", "'positive_rels'", "]", "[", "keys", "[", "indices", "[", "0", "]", "]", "]", "\n", "att1", "=", "' '", "\n", "att2", "=", "' '", "\n", "m", "=", "len", "(", "rel", "[", "'subject_atts'", "]", ")", "\n", "if", "m", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "m", ")", ")", "\n", "att1", "=", "rel", "[", "'subject_atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "", "m", "=", "len", "(", "rel", "[", "'object_atts'", "]", ")", "\n", "if", "m", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "m", ")", ")", "\n", "att2", "=", "rel", "[", "'object_atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "", "return", "'%s %s is %s %s %s.'", "%", "(", "att1", ",", "rel", "[", "'subject_name'", "]", ",", "rel", "[", "'predicate'", "]", ",", "att2", ",", "rel", "[", "'object_name'", "]", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_4": [[62, 69], ["len", "numpy.random.permutation", "range"], "function", ["None"], ["", "def", "caption_4", "(", "obj_candidate", ",", "target_scene", ")", ":", "\n", "    ", "n", "=", "len", "(", "obj_candidate", "[", "'negative_atts'", "]", ")", "\n", "if", "n", ">", "0", ":", "\n", "        ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "n", ")", ")", "\n", "att", "=", "obj_candidate", "[", "'negative_atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "return", "'%s should not be %s.'", "%", "(", "obj_candidate", "[", "'name'", "]", ",", "att", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_5": [[71, 89], ["len", "list", "numpy.random.permutation", "len", "len", "obj_candidate[].keys", "range", "numpy.random.permutation", "numpy.random.permutation", "range", "range"], "function", ["None"], ["", "def", "caption_5", "(", "obj_candidate", ",", "target_scene", ")", ":", "\n", "    ", "n", "=", "len", "(", "obj_candidate", "[", "'negative_rels'", "]", ")", "\n", "if", "n", ">", "0", ":", "\n", "        ", "keys", "=", "list", "(", "obj_candidate", "[", "'negative_rels'", "]", ".", "keys", "(", ")", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "n", ")", ")", "\n", "rel", "=", "obj_candidate", "[", "'negative_rels'", "]", "[", "keys", "[", "indices", "[", "0", "]", "]", "]", "\n", "att1", "=", "' '", "\n", "att2", "=", "' '", "\n", "m", "=", "len", "(", "rel", "[", "'subject_atts'", "]", ")", "\n", "if", "m", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "m", ")", ")", "\n", "att1", "=", "rel", "[", "'subject_atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "", "m", "=", "len", "(", "rel", "[", "'object_atts'", "]", ")", "\n", "if", "m", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "m", ")", ")", "\n", "att2", "=", "rel", "[", "'object_atts'", "]", "[", "indices", "[", "0", "]", "]", "\n", "", "return", "'There is no %s %s %s %s %s.'", "%", "(", "att1", ",", "rel", "[", "'subject_name'", "]", ",", "rel", "[", "'predicate'", "]", ",", "att2", ",", "rel", "[", "'object_name'", "]", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.test_response_gen": [[92, 165], ["time.time", "datasets.vg.vg", "maybe_create", "datasets.relative_captioner.RelativeCaptioner", "json.load.items", "open", "json.load", "datasets.relative_captioner.RelativeCaptioner.collect_unmentioned_candidates", "datasets.relative_captioner.RelativeCaptioner.collect_mentioned_candidates", "html_writer.HTML", "html_writer.HTML.table", "r1.td", "range", "r1.td", "r1.td.img", "r1.td", "range", "range", "open", "print", "open.close", "print", "len", "test_relative_captioning.caption_1", "test_relative_captioning.caption_2", "test_relative_captioning.caption_3", "len", "test_relative_captioning.caption_1", "test_relative_captioning.caption_2", "test_relative_captioning.caption_3", "test_relative_captioning.caption_4", "test_relative_captioning.caption_5", "len", "r1.td.p", "len", "r1.td.p", "r2.td", "r2.td.img", "os.join", "captions_1.append", "captions_1.append", "captions_1.append", "captions_2.append", "captions_2.append", "captions_2.append", "captions_2.append", "captions_2.append", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_1", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_2", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_3", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_1", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_2", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_3", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_4", "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_relative_captioning.caption_5"], ["", "def", "test_response_gen", "(", "config", ")", ":", "\n", "    ", "s", "=", "time", "(", ")", "\n", "db", "=", "vg", "(", "config", ")", "\n", "html_folder_name", "=", "'template_htmls'", "\n", "maybe_create", "(", "html_folder_name", ")", "\n", "\n", "with", "open", "(", "'candidates.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "candidates", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "captioner", "=", "RelativeCaptioner", "(", "db", ")", "\n", "\n", "for", "k", ",", "v", "in", "candidates", ".", "items", "(", ")", ":", "\n", "        ", "target_scene", "=", "db", ".", "scenedb", "[", "v", "[", "'src'", "]", "]", "\n", "decoy_scenes", "=", "[", "db", ".", "scenedb", "[", "x", "]", "for", "x", "in", "v", "[", "'top5'", "]", "]", "\n", "unmention_candidates", "=", "captioner", ".", "collect_unmentioned_candidates", "(", "target_scene", ",", "decoy_scenes", ")", "\n", "captions_1", "=", "[", "]", "\n", "if", "len", "(", "unmention_candidates", ")", ">", "0", ":", "\n", "            ", "cap1", "=", "caption_1", "(", "unmention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "unmention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap1", "is", "not", "None", ":", "\n", "                ", "captions_1", ".", "append", "(", "cap1", ")", "\n", "", "cap2", "=", "caption_2", "(", "unmention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "unmention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap2", "is", "not", "None", ":", "\n", "                ", "captions_1", ".", "append", "(", "cap2", ")", "\n", "", "cap3", "=", "caption_3", "(", "unmention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "unmention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap3", "is", "not", "None", ":", "\n", "                ", "captions_1", ".", "append", "(", "cap3", ")", "\n", "# print(cap3)", "\n", "", "", "captions_2", "=", "[", "]", "\n", "mention_candidates", "=", "captioner", ".", "collect_mentioned_candidates", "(", "target_scene", ",", "decoy_scenes", ")", "\n", "if", "len", "(", "mention_candidates", ")", ">", "0", ":", "\n", "            ", "cap1", "=", "caption_1", "(", "mention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "mention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap1", "is", "not", "None", ":", "\n", "                ", "captions_2", ".", "append", "(", "cap1", ")", "\n", "", "cap2", "=", "caption_2", "(", "mention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "mention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap2", "is", "not", "None", ":", "\n", "                ", "captions_2", ".", "append", "(", "cap2", ")", "\n", "", "cap3", "=", "caption_3", "(", "mention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "mention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap3", "is", "not", "None", ":", "\n", "                ", "captions_2", ".", "append", "(", "cap3", ")", "\n", "# print(cap3)", "\n", "", "cap4", "=", "caption_4", "(", "mention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "mention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap4", "is", "not", "None", ":", "\n", "                ", "captions_2", ".", "append", "(", "cap4", ")", "\n", "", "cap5", "=", "caption_5", "(", "mention_candidates", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "mention_candidates", ")", ")", "]", ",", "target_scene", ")", "\n", "if", "cap5", "is", "not", "None", ":", "\n", "                ", "captions_2", ".", "append", "(", "cap5", ")", "\n", "# print(cap5)", "\n", "# query_path = \"http://www.cs.virginia.edu/~ft3ex/data/vg/VG_100K/%d.jpg\"%v['src']", "\n", "# top5_paths = [\"http://www.cs.virginia.edu/~ft3ex/data/vg/VG_100K/%d.jpg\"%x for x in v['top5']]", "\n", "", "", "query_path", "=", "\"file:///Users/fuwentan/datasets/vg/VG_100K/%d.jpg\"", "%", "v", "[", "'src'", "]", "\n", "top5_paths", "=", "[", "\"file:///Users/fuwentan/datasets/vg/VG_100K/%d.jpg\"", "%", "x", "for", "x", "in", "v", "[", "'top5'", "]", "]", "\n", "\n", "config_html", "=", "HTML", "(", ")", "\n", "config_table", "=", "config_html", ".", "table", "(", "border", "=", "'1'", ")", "\n", "r1", "=", "config_table", ".", "tr", "\n", "c1", "=", "r1", ".", "td", "(", "colspan", "=", "\"2\"", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "captions_1", ")", ")", ":", "\n", "            ", "c1", ".", "p", "(", "captions_1", "[", "j", "]", ")", "\n", "", "c2", "=", "r1", ".", "td", "(", ")", "\n", "c2", ".", "img", "(", "src", "=", "'%s'", "%", "query_path", ",", "height", "=", "'200'", ")", "\n", "c3", "=", "r1", ".", "td", "(", "colspan", "=", "\"2\"", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "captions_2", ")", ")", ":", "\n", "            ", "c3", ".", "p", "(", "captions_2", "[", "j", "]", ")", "\n", "\n", "", "r2", "=", "config_table", ".", "tr", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "            ", "c2_r2_c", "=", "r2", ".", "td", "(", ")", "\n", "c2_r2_c", ".", "img", "(", "src", "=", "'%s'", "%", "top5_paths", "[", "j", "]", ",", "height", "=", "'200'", ")", "\n", "\n", "", "html_file", "=", "open", "(", "osp", ".", "join", "(", "html_folder_name", ",", "'%d_%d.html'", "%", "(", "v", "[", "'src'", "]", ",", "v", "[", "'turn'", "]", ")", ")", ",", "'w'", ")", "\n", "print", "(", "config_table", ",", "file", "=", "html_file", ")", "\n", "html_file", ".", "close", "(", ")", "\n", "print", "(", "k", ")", "\n", "# break", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.eval_image.test_model": [[27, 31], ["datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "modules.image_hred_trainer.ImageHREDTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["def", "test_model", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "testdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create": [[8, 11], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "maybe_create", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools._init_paths.add_path": [[6, 9], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_image.train_model": [[27, 32], ["datasets.vg.vg", "datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "modules.image_hred_trainer.ImageHREDTrainer.train"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train"], ["def", "train_model", "(", "config", ")", ":", "\n", "    ", "traindb", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "valdb", "=", "vg", "(", "config", ",", "'val'", ")", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "trainer", ".", "train", "(", "traindb", ",", "valdb", ",", "valdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_image.overfit_model": [[34, 39], ["datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "modules.image_hred_trainer.ImageHREDTrainer.train"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train"], ["", "def", "overfit_model", "(", "config", ")", ":", "\n", "    ", "valdb", "=", "vg", "(", "config", ",", "'val'", ")", "\n", "valdb", ".", "scenedb", "=", "valdb", ".", "scenedb", "[", ":", "31", "]", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "trainer", ".", "train", "(", "valdb", ",", "valdb", ",", "valdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_image.test_model": [[41, 45], ["datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "modules.image_hred_trainer.ImageHREDTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["", "def", "test_model", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "testdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_image.dump_trained_features": [[47, 51], ["datasets.vg.vg", "modules.image_hred_trainer.ImageHREDTrainer", "modules.image_hred_trainer.ImageHREDTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["", "def", "dump_trained_features", "(", "config", ")", ":", "\n", "    ", "traindb", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "trainer", "=", "ImageHREDTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "traindb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.test_vg_dataset": [[29, 32], ["time.time", "datasets.vg.vg"], "function", ["None"], ["def", "test_vg_dataset", "(", "config", ")", ":", "\n", "    ", "s", "=", "time", "(", ")", "\n", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.test_caption_loader": [[34, 70], ["datasets.vg.vg", "datasets.loader.caption_loader", "os.join", "maybe_create", "torch.utils.data.DataLoader", "time.time", "matplotlib.switch_backend", "enumerate", "print", "batched[].long", "batched[].long", "batched[].float", "print", "print", "print", "range", "print", "batched[].long.size", "batched[].long.size", "batched[].float.size", "cv2.imread", "os.join", "matplotlib.figure", "range", "plt.figure.savefig", "matplotlib.close", "time.time", "datasets.vg.vg.color_path_from_index", "min", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "str", "x.data.item", "str", "x.data.item"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["", "def", "test_caption_loader", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "# db = coco(config, 'train')", "\n", "loaddb", "=", "caption_loader", "(", "db", ")", "\n", "output_dir", "=", "osp", ".", "join", "(", "config", ".", "model_dir", ",", "'test_caption_dataloader'", ")", "\n", "maybe_create", "(", "output_dir", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "start", "=", "time", "(", ")", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "images", "=", "batched", "[", "'images'", "]", ".", "float", "(", ")", "\n", "captions", "=", "batched", "[", "'captions'", "]", "\n", "print", "(", "'sent_inds'", ",", "sent_inds", ".", "size", "(", ")", ")", "\n", "print", "(", "'sent_msks'", ",", "sent_msks", ".", "size", "(", ")", ")", "\n", "print", "(", "'images'", ",", "images", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "            ", "color", "=", "cv2", ".", "imread", "(", "db", ".", "color_path_from_index", "(", "batched", "[", "'image_inds'", "]", "[", "i", "]", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "out_path", "=", "osp", ".", "join", "(", "output_dir", ",", "'%d.png'", "%", "batched", "[", "'image_inds'", "]", "[", "i", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "16", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "config", ".", "max_turns", ",", "10", ")", ")", ":", "\n", "                ", "plt", ".", "subplot", "(", "2", ",", "5", ",", "j", "+", "1", ")", "\n", "plt", ".", "title", "(", "captions", "[", "i", "]", "[", "j", "]", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_inds", "[", "i", ",", "j", "]", "]", ")", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_msks", "[", "i", ",", "j", "]", "]", ")", ")", "\n", "plt", ".", "imshow", "(", "color", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "fig", ".", "savefig", "(", "out_path", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "", "print", "(", "'------------------'", ")", "\n", "if", "cnt", "==", "2", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "\"Time\"", ",", "time", "(", ")", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.test_region_loader": [[72, 142], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "os.join", "maybe_create", "time.time", "matplotlib.switch_backend", "enumerate", "print", "print", "batched[].long", "batched[].long", "batched[].float", "batched[].float", "batched[].long", "batched[].long", "print", "print", "print", "print", "print", "print", "print", "print", "print", "range", "print", "batched[].long.size", "batched[].long.size", "batched[].float.size", "batched[].float.size", "batched[].long.size", "batched[].long.size", "torch.min", "torch.max", "len", "torch.sum", "xyxys_to_xywhs", "cv2.imread", "create_squared_image", "os.join", "datasets.vg.vg.render_regions_as_output", "matplotlib.figure", "range", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "plt.figure.savefig", "matplotlib.close", "time.time", "region_boxes[].cpu().data.numpy", "datasets.vg.vg.color_path_from_index", "min", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "len", "matplotlib.title", "layouts[].astype", "cv2.resize", "region_boxes[].cpu", "str", "x.data.item", "str", "x.data.item"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xyxys_to_xywhs", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.render_regions_as_output", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["", "def", "test_region_loader", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "# db = coco(config, 'train')", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "output_dir", "=", "osp", ".", "join", "(", "config", ".", "model_dir", ",", "'test_region_loader'", ")", "\n", "maybe_create", "(", "output_dir", ")", "\n", "\n", "\n", "start", "=", "time", "(", ")", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "print", "(", "'scene_inds'", ",", "batched", "[", "'scene_inds'", "]", ")", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "widths", "=", "batched", "[", "'widths'", "]", "\n", "heights", "=", "batched", "[", "'heights'", "]", "\n", "\n", "captions", "=", "batched", "[", "'captions'", "]", "\n", "region_boxes", "=", "batched", "[", "'region_boxes'", "]", ".", "float", "(", ")", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "long", "(", ")", "\n", "\n", "print", "(", "'sent_inds'", ",", "sent_inds", ".", "size", "(", ")", ")", "\n", "print", "(", "'sent_msks'", ",", "sent_msks", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_boxes'", ",", "region_boxes", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_feats'", ",", "region_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_clses'", ",", "region_clses", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_masks'", ",", "region_masks", ".", "size", "(", ")", ")", "\n", "print", "(", "'clses'", ",", "torch", ".", "min", "(", "region_clses", ")", ",", "torch", ".", "max", "(", "region_clses", ")", ")", "\n", "print", "(", "'widths'", ",", "widths", ")", "\n", "print", "(", "'heights'", ",", "heights", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "# print('####')", "\n", "# print(len(captions), len(captions[0]))", "\n", "            ", "entry", "=", "{", "}", "\n", "image_index", "=", "batched", "[", "'image_inds'", "]", "[", "i", "]", "\n", "entry", "[", "'width'", "]", "=", "widths", "[", "i", "]", "\n", "entry", "[", "'height'", "]", "=", "heights", "[", "i", "]", "\n", "nr", "=", "torch", ".", "sum", "(", "region_masks", "[", "i", "]", ")", "\n", "entry", "[", "'region_boxes'", "]", "=", "xyxys_to_xywhs", "(", "region_boxes", "[", "i", ",", ":", "nr", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "color", "=", "cv2", ".", "imread", "(", "db", ".", "color_path_from_index", "(", "image_index", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "color", ",", "_", ",", "_", "=", "create_squared_image", "(", "color", ")", "\n", "\n", "out_path", "=", "osp", ".", "join", "(", "output_dir", ",", "'%d.png'", "%", "image_index", ")", "\n", "layouts", "=", "db", ".", "render_regions_as_output", "(", "entry", ",", "bg", "=", "cv2", ".", "resize", "(", "color", ",", "(", "config", ".", "visu_size", "[", "0", "]", ",", "config", ".", "visu_size", "[", "0", "]", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "16", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "14", ",", "len", "(", "layouts", ")", ")", ")", ":", "\n", "                ", "plt", ".", "subplot", "(", "3", ",", "5", ",", "j", "+", "1", ")", "\n", "if", "j", "<", "config", ".", "max_turns", ":", "\n", "                    ", "plt", ".", "title", "(", "captions", "[", "i", "]", "[", "j", "]", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_inds", "[", "i", ",", "j", "]", "]", ")", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_msks", "[", "i", ",", "j", "]", "]", ")", ")", "\n", "", "plt", ".", "imshow", "(", "layouts", "[", "j", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "subplot", "(", "3", ",", "5", ",", "15", ")", "\n", "plt", ".", "imshow", "(", "color", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "savefig", "(", "out_path", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "print", "(", "'------------------'", ")", "\n", "if", "cnt", "==", "2", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "\"Time\"", ",", "time", "(", ")", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.test_paragraph_loader": [[144, 215], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "os.join", "maybe_create", "time.time", "matplotlib.switch_backend", "enumerate", "print", "print", "batched[].long", "batched[].long", "batched[].float", "batched[].float", "batched[].long", "batched[].long", "print", "print", "print", "print", "print", "print", "print", "print", "print", "range", "print", "batched[].long.size", "batched[].long.size", "batched[].float.size", "batched[].float.size", "batched[].long.size", "batched[].long.size", "torch.min", "torch.max", "len", "torch.sum", "xyxys_to_xywhs", "cv2.imread", "create_squared_image", "os.join", "datasets.vg.vg.render_regions_as_output", "matplotlib.figure", "range", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "plt.figure.savefig", "matplotlib.close", "time.time", "region_boxes[].cpu().data.numpy", "datasets.vg.vg.color_path_from_index", "min", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "len", "matplotlib.title", "layouts[].astype", "cv2.resize", "region_boxes[].cpu", "str", "x.data.item", "str", "x.data.item"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.xyxys_to_xywhs", "home.repos.pwc.inspect_result.uvavision_DrillDown.lib.utils.create_squared_image", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.render_regions_as_output", "home.repos.pwc.inspect_result.uvavision_DrillDown.datasets.vg.vg.color_path_from_index"], ["", "def", "test_paragraph_loader", "(", "config", ")", ":", "\n", "    ", "config", ".", "paragraph_model", "=", "True", "\n", "\n", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "# db = coco(config, 'train')", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "output_dir", "=", "osp", ".", "join", "(", "config", ".", "model_dir", ",", "'test_region_loader'", ")", "\n", "maybe_create", "(", "output_dir", ")", "\n", "\n", "start", "=", "time", "(", ")", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "print", "(", "'scene_inds'", ",", "batched", "[", "'scene_inds'", "]", ")", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "widths", "=", "batched", "[", "'widths'", "]", "\n", "heights", "=", "batched", "[", "'heights'", "]", "\n", "\n", "captions", "=", "batched", "[", "'captions'", "]", "\n", "region_boxes", "=", "batched", "[", "'region_boxes'", "]", ".", "float", "(", ")", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "long", "(", ")", "\n", "\n", "print", "(", "'sent_inds'", ",", "sent_inds", ".", "size", "(", ")", ")", "\n", "print", "(", "'sent_msks'", ",", "sent_msks", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_boxes'", ",", "region_boxes", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_feats'", ",", "region_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_clses'", ",", "region_clses", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_masks'", ",", "region_masks", ".", "size", "(", ")", ")", "\n", "print", "(", "'clses'", ",", "torch", ".", "min", "(", "region_clses", ")", ",", "torch", ".", "max", "(", "region_clses", ")", ")", "\n", "print", "(", "'widths'", ",", "widths", ")", "\n", "print", "(", "'heights'", ",", "heights", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sent_inds", ")", ")", ":", "\n", "# print('####')", "\n", "# print(len(captions), len(captions[0]))", "\n", "            ", "entry", "=", "{", "}", "\n", "image_index", "=", "batched", "[", "'image_inds'", "]", "[", "i", "]", "\n", "entry", "[", "'width'", "]", "=", "widths", "[", "i", "]", "\n", "entry", "[", "'height'", "]", "=", "heights", "[", "i", "]", "\n", "nr", "=", "torch", ".", "sum", "(", "region_masks", "[", "i", "]", ")", "\n", "entry", "[", "'region_boxes'", "]", "=", "xyxys_to_xywhs", "(", "region_boxes", "[", "i", ",", ":", "nr", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "color", "=", "cv2", ".", "imread", "(", "db", ".", "color_path_from_index", "(", "image_index", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "color", ",", "_", ",", "_", "=", "create_squared_image", "(", "color", ")", "\n", "\n", "out_path", "=", "osp", ".", "join", "(", "output_dir", ",", "'%d.png'", "%", "image_index", ")", "\n", "layouts", "=", "db", ".", "render_regions_as_output", "(", "entry", ",", "bg", "=", "cv2", ".", "resize", "(", "color", ",", "(", "config", ".", "visu_size", "[", "0", "]", ",", "config", ".", "visu_size", "[", "0", "]", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "16", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "14", ",", "len", "(", "layouts", ")", ")", ")", ":", "\n", "                ", "plt", ".", "subplot", "(", "3", ",", "5", ",", "j", "+", "1", ")", "\n", "if", "j", "<", "config", ".", "max_turns", ":", "\n", "                    ", "plt", ".", "title", "(", "captions", "[", "i", "]", "[", "j", "]", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_inds", "[", "i", ",", "j", "]", "]", ")", "+", "'\\n'", "+", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "data", ".", "item", "(", ")", ")", "for", "x", "in", "sent_msks", "[", "i", ",", "j", "]", "]", ")", ")", "\n", "", "plt", ".", "imshow", "(", "layouts", "[", "j", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "subplot", "(", "3", ",", "5", ",", "15", ")", "\n", "plt", ".", "imshow", "(", "color", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "savefig", "(", "out_path", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "print", "(", "'------------------'", ")", "\n", "if", "cnt", "==", "2", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "\"Time\"", ",", "time", "(", ")", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.save_region_graphs_by_id": [[217, 233], ["time.time", "maybe_create", "os.join", "print", "enumerate", "gc.collect", "print", "open", "json.load", "len", "str", "open", "json.dump", "print", "time.time", "os.join"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.tools.save_region_features.maybe_create"], ["", "def", "save_region_graphs_by_id", "(", "input_dir", "=", "'../data/vg/'", ",", "output_dir", "=", "'../data/vg/rg_jsons'", ")", ":", "\n", "    ", "s", "=", "time", "(", ")", "\n", "maybe_create", "(", "output_dir", ")", "\n", "file_path", "=", "osp", ".", "join", "(", "input_dir", ",", "'region_graphs.json'", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "all_data", "=", "json", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "len", "(", "all_data", ")", ")", "\n", "for", "i", ",", "sg_data", "in", "enumerate", "(", "all_data", ")", ":", "\n", "        ", "img_fname", "=", "str", "(", "sg_data", "[", "'image_id'", "]", ")", "+", "'.json'", "\n", "with", "open", "(", "osp", ".", "join", "(", "output_dir", ",", "img_fname", ")", ",", "'w'", ")", "as", "fid", ":", "\n", "            ", "json", ".", "dump", "(", "sg_data", ",", "fid", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "if", "i", "%", "1000", ":", "\n", "            ", "print", "(", "i", ",", "sg_data", "[", "'image_id'", "]", ")", "\n", "", "", "del", "all_data", "\n", "gc", ".", "collect", "(", ")", "# clear memory", "\n", "print", "(", "'time: '", ",", "time", "(", ")", "-", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_dataset.check_region_clses": [[235, 252], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "enumerate", "print", "print", "batched[].long", "min", "max", "torch.min().item", "torch.max().item", "print", "torch.min", "torch.max"], "function", ["None"], ["", "def", "check_region_clses", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "min_index", "=", "1000000", "\n", "max_index", "=", "-", "1", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "min_index", "=", "min", "(", "min_index", ",", "torch", ".", "min", "(", "region_clses", ")", ".", "item", "(", ")", ")", "\n", "max_index", "=", "max", "(", "max_index", ",", "torch", ".", "max", "(", "region_clses", ")", ".", "item", "(", ")", ")", "\n", "if", "cnt", "%", "1000", ":", "\n", "            ", "print", "(", "'iter:'", ",", "cnt", ")", "\n", "", "", "print", "(", "'min_index'", ",", "min_index", ")", "\n", "print", "(", "'max_index'", ",", "max_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_region.train_model": [[27, 32], ["datasets.vg.vg", "datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "modules.region_grounding_trainer.RegionGroundingTrainer.train"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train"], ["def", "train_model", "(", "config", ")", ":", "\n", "    ", "traindb", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "valdb", "=", "vg", "(", "config", ",", "'val'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "trainer", ".", "train", "(", "traindb", ",", "valdb", ",", "valdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_region.overfit_model": [[34, 39], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "modules.region_grounding_trainer.RegionGroundingTrainer.train"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train"], ["", "def", "overfit_model", "(", "config", ")", ":", "\n", "    ", "valdb", "=", "vg", "(", "config", ",", "'val'", ")", "\n", "valdb", ".", "scenedb", "=", "valdb", ".", "scenedb", "[", ":", "31", "]", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "trainer", ".", "train", "(", "valdb", ",", "valdb", ",", "valdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_region.test_model": [[41, 45], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "modules.region_grounding_trainer.RegionGroundingTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["", "def", "test_model", "(", "config", ")", ":", "\n", "    ", "testdb", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "testdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.train_region.dump_trained_features": [[47, 51], ["datasets.vg.vg", "modules.region_grounding_trainer.RegionGroundingTrainer", "modules.region_grounding_trainer.RegionGroundingTrainer.test"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.test"], ["", "def", "dump_trained_features", "(", "config", ")", ":", "\n", "    ", "traindb", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "trainer", "=", "RegionGroundingTrainer", "(", "config", ")", "\n", "trainer", ".", "test", "(", "traindb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_attention": [[45, 52], ["modules.attention.Attention", "torch.randn", "torch.randn", "torch.randn().random_", "modules.attention.Attention.", "print", "context.size", "scores.size", "torch.randn"], "function", ["None"], ["def", "test_attention", "(", "config", ")", ":", "\n", "    ", "attention", "=", "Attention", "(", "config", ",", "config", ".", "attn_type", ",", "1024", ",", "1024", ")", "\n", "h_s", "=", "torch", ".", "randn", "(", "7", ",", "36", ",", "1024", ")", "\n", "h_t", "=", "torch", ".", "randn", "(", "7", ",", "5", ",", "1024", ")", "\n", "m_s", "=", "torch", ".", "randn", "(", "7", ",", "36", ")", ".", "random_", "(", "0", ",", "2", ")", "\n", "context", ",", "scores", "=", "attention", "(", "h_t", ",", "h_s", ",", "m_s", ")", "\n", "print", "(", "context", ".", "size", "(", ")", ",", "scores", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_tirg_rnn": [[54, 63], ["modules.tirg_rnn.TIRGRNN", "numpy.random.randn", "numpy.random.randn", "torch.from_numpy().float", "torch.from_numpy().float", "modules.tirg_rnn.TIRGRNN.", "print", "print", "last_layer_hiddens.size", "last_step_hiddens.size", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "test_tirg_rnn", "(", "config", ")", ":", "\n", "    ", "net", "=", "TIRGRNN", "(", "config", ",", "config", ".", "n_feature_dim", ",", "config", ".", "n_feature_dim", ",", "config", ".", "n_rnn_layers", ",", "dropout", "=", "0.1", ")", "\n", "input_var", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "config", ".", "n_feature_dim", ")", "\n", "prev_hidden", "=", "np", ".", "random", ".", "randn", "(", "config", ".", "n_rnn_layers", ",", "2", ",", "config", ".", "n_feature_dim", ")", "\n", "input_var_th", "=", "torch", ".", "from_numpy", "(", "input_var", ")", ".", "float", "(", ")", "\n", "prev_hidden_th", "=", "torch", ".", "from_numpy", "(", "prev_hidden", ")", ".", "float", "(", ")", "\n", "last_layer_hiddens", ",", "last_step_hiddens", "=", "net", "(", "input_var_th", ",", "prev_hidden_th", ")", "\n", "print", "(", "'last_layer_hiddens.size()'", ",", "last_layer_hiddens", ".", "size", "(", ")", ")", "\n", "print", "(", "'last_step_hiddens.size()'", ",", "last_step_hiddens", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_region_encoder": [[65, 84], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "modules.region_encoder.RegionEncoder", "enumerate", "batched[].float", "batched[].long", "print", "print", "modules.region_encoder.RegionEncoder.", "print", "batched[].float.size", "batched[].long.size", "img_feats.size", "print", "print", "masked_feats.size", "mm.size"], "function", ["None"], ["", "def", "test_region_encoder", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "net", "=", "RegionEncoder", "(", "config", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "print", "(", "'region_feats'", ",", "region_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_clses'", ",", "region_clses", ".", "size", "(", ")", ")", "\n", "img_feats", ",", "masked_feats", ",", "mm", "=", "net", "(", "region_feats", ",", "region_clses", ")", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "if", "config", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "            ", "print", "(", "'masked_feats'", ",", "masked_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'mm'", ",", "mm", ".", "size", "(", ")", ")", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_image_encoder": [[86, 100], ["datasets.vg.vg", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "modules.image_encoder.ImageEncoder", "enumerate", "batched[].float", "print", "modules.image_encoder.ImageEncoder.", "print", "batched[].float.size", "net.size"], "function", ["None"], ["", "", "def", "test_image_encoder", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "caption_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "net", "=", "ImageEncoder", "(", "config", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "images", "=", "batched", "[", "'images'", "]", ".", "float", "(", ")", "\n", "print", "(", "'images'", ",", "images", ".", "size", "(", ")", ")", "\n", "feats", "=", "net", "(", "images", ")", "\n", "print", "(", "'features'", ",", "feats", ".", "size", "(", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_text_encoder": [[102, 119], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "modules.text_encoder.TextEncoder", "enumerate", "batched[].long", "batched[].float", "batched[].long.size", "print", "print", "modules.text_encoder.TextEncoder.", "print", "batched[].long.size", "batched[].float.size", "batched[].long.view", "batched[].float.view", "f1.size", "f2.size", "h.size"], "function", ["None"], ["", "", "def", "test_text_encoder", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "net", "=", "TextEncoder", "(", "config", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "float", "(", ")", "\n", "bsize", ",", "slen", ",", "fsize", "=", "sent_inds", ".", "size", "(", ")", "\n", "print", "(", "'sent_inds'", ",", "sent_inds", ".", "size", "(", ")", ")", "\n", "print", "(", "'sent_msks'", ",", "sent_msks", ".", "size", "(", ")", ")", "\n", "f1", ",", "f2", ",", "h", "=", "net", "(", "sent_inds", ".", "view", "(", "bsize", "*", "slen", ",", "fsize", ")", ",", "sent_msks", ".", "view", "(", "bsize", "*", "slen", ",", "fsize", ")", ")", "\n", "print", "(", "f1", ".", "size", "(", ")", ",", "f2", ".", "size", "(", ")", ",", "h", ".", "size", "(", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_image_model": [[121, 138], ["datasets.vg.vg", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "modules.image_model.ImageModel", "enumerate", "batched[].float", "batched[].long", "batched[].long", "modules.image_model.ImageModel.", "print", "print", "print", "batched[].float.size", "img_feats.size", "txt_feats.size"], "function", ["None"], ["", "", "def", "test_image_model", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "caption_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "net", "=", "ImageModel", "(", "config", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "images", "=", "batched", "[", "'images'", "]", ".", "float", "(", ")", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "img_feats", ",", "txt_feats", "=", "net", "(", "sent_inds", ",", "sent_msks", ",", "None", ",", "images", ")", "\n", "print", "(", "'images'", ",", "images", ".", "size", "(", ")", ")", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_grounding_loss": [[140, 175], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "modules.region_model.RegionModel", "modules.grounding_loss.GroundingLoss", "enumerate", "modules.region_model.RegionModel.", "modules.grounding_loss.GroundingLoss.compute_batch_mutual_similarity", "modules.grounding_loss.GroundingLoss.debug_compute_batch_mutual_similarity", "print", "print", "print", "txt_feats.new_ones", "modules.grounding_loss.GroundingLoss.forward_loss", "print", "batched[].long", "batched[].long", "batched[].long", "batched[].float", "batched[].long", "batched[].float", "batched[].float", "batched[].long", "batched[].float", "criterion.compute_batch_mutual_similarity.size", "criterion.debug_compute_batch_mutual_similarity.size", "torch.sum", "txt_feats.size", "txt_feats.size", "criterion.forward_loss.size", "torch.abs"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.compute_batch_mutual_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.debug_compute_batch_mutual_similarity", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss"], ["", "", "def", "test_grounding_loss", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "net", "=", "RegionModel", "(", "config", ")", "\n", "criterion", "=", "GroundingLoss", "(", "config", ")", "\n", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "scene_inds", "=", "batched", "[", "'scene_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "src_region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "src_region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "src_region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "\n", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "\n", "src_region_feats", ",", "src_region_clses", ",", "src_region_masks", ",", "\n", "region_feats", ",", "region_clses", ",", "region_masks", ",", "\n", "config", ".", "explore_mode", ")", "\n", "masked_feats", "=", "img_feats", "\n", "sim1", "=", "criterion", ".", "compute_batch_mutual_similarity", "(", "masked_feats", ",", "region_masks", ",", "txt_feats", ")", "\n", "sim2", "=", "criterion", ".", "debug_compute_batch_mutual_similarity", "(", "masked_feats", ",", "region_masks", ",", "txt_feats", ")", "\n", "print", "(", "'sim1'", ",", "sim1", ".", "size", "(", ")", ")", "\n", "print", "(", "'sim2'", ",", "sim2", ".", "size", "(", ")", ")", "\n", "print", "(", "'diff'", ",", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "sim1", "-", "sim2", ")", ")", ")", "\n", "txt_masks", "=", "txt_feats", ".", "new_ones", "(", "txt_feats", ".", "size", "(", "0", ")", ",", "txt_feats", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "criterion", ".", "forward_loss", "(", "masked_feats", ",", "region_masks", ",", "txt_feats", ",", "txt_masks", ",", "config", ".", "loss_reduction_mode", ")", "\n", "print", "(", "'losses'", ",", "losses", ".", "size", "(", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_paragraph_model": [[177, 215], ["datasets.vg.vg", "datasets.loader.paragraph_loader", "torch.utils.data.DataLoader", "modules.paragraph_model.ParagraphModel", "modules.paragraph_model.ParagraphModel.train", "modules.paragraph_model.ParagraphModel.named_parameters", "enumerate", "print", "time.time", "modules.paragraph_model.ParagraphModel.", "modules.paragraph_model.ParagraphModel.loss", "print", "modules.paragraph_model.ParagraphModel.evaluate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "param.size", "batched[].long", "batched[].long", "batched[].long", "batched[].float", "batched[].long", "batched[].float", "txt_feats.unsqueeze", "net.loss.size", "torch.mean", "txt_feats.unsqueeze", "sent_inds.size", "sent_msks.size", "region_feats.size", "region_clses.size", "region_masks.size", "img_feats.size", "txt_feats.size", "time.time"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate"], ["", "", "def", "test_paragraph_model", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "paragraph_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "paragraph_collate_fn", ")", "\n", "\n", "net", "=", "ParagraphModel", "(", "config", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n", "", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "start", "=", "time", "(", ")", "\n", "scene_inds", "=", "batched", "[", "'scene_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "\n", "img_feats", ",", "txt_feats", "=", "net", "(", "sent_inds", ",", "sent_msks", ",", "region_feats", ",", "region_clses", ",", "region_masks", ")", "\n", "losses", "=", "net", ".", "loss", "(", "img_feats", ",", "region_masks", ",", "txt_feats", ".", "unsqueeze", "(", "1", ")", ")", "\n", "print", "(", "'losses'", ",", "losses", ".", "size", "(", ")", ",", "torch", ".", "mean", "(", "losses", ")", ")", "\n", "metrics", ",", "cache_results", "=", "net", ".", "evaluate", "(", "img_feats", ",", "region_masks", ",", "txt_feats", ".", "unsqueeze", "(", "1", ")", ")", "\n", "print", "(", "'metrics'", ",", "metrics", ")", "\n", "\n", "print", "(", "'sent_inds'", ",", "sent_inds", ".", "size", "(", ")", ")", "\n", "print", "(", "'sent_msks'", ",", "sent_msks", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_feats'", ",", "region_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_clses'", ",", "region_clses", ".", "size", "(", ")", ")", "\n", "print", "(", "'region_masks'", ",", "region_masks", ".", "size", "(", ")", ")", "\n", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'time:'", ",", "time", "(", ")", "-", "start", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_region_model": [[217, 257], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "modules.region_model.RegionModel", "modules.region_model.RegionModel.train", "modules.region_model.RegionModel.named_parameters", "enumerate", "print", "time.time", "modules.region_model.RegionModel.", "print", "print", "print", "param.size", "batched[].long", "batched[].long", "batched[].long", "batched[].float", "batched[].long", "batched[].float", "batched[].float", "batched[].long", "batched[].float", "img_feats.size", "txt_feats.size", "print", "print", "print", "print", "masked_feats.size", "subspace_masks.size", "sample_logits.size", "sample_indices.size", "time.time"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train"], ["", "", "def", "test_region_model", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "net", "=", "RegionModel", "(", "config", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n", "", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "start", "=", "time", "(", ")", "\n", "scene_inds", "=", "batched", "[", "'scene_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "[", ":", "config", ".", "batch_size", "]", "\n", "src_region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "src_region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "src_region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "[", "config", ".", "batch_size", ":", "2", "*", "config", ".", "batch_size", "]", "\n", "\n", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "\n", "src_region_feats", ",", "src_region_clses", ",", "src_region_masks", ",", "\n", "region_feats", ",", "region_clses", ",", "region_masks", ",", "\n", "config", ".", "explore_mode", ")", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "if", "config", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "            ", "print", "(", "'masked_feats'", ",", "masked_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'subspace_masks'", ",", "subspace_masks", ".", "size", "(", ")", ")", "\n", "", "if", "config", ".", "instance_dim", ">", "1", ":", "\n", "            ", "print", "(", "'sample_logits'", ",", "sample_logits", ".", "size", "(", ")", ")", "\n", "print", "(", "'sample_indices'", ",", "sample_indices", ".", "size", "(", ")", ")", "\n", "", "print", "(", "'time:'", ",", "time", "(", ")", "-", "start", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_image_hred_model": [[259, 284], ["datasets.vg.vg", "datasets.loader.caption_loader", "torch.utils.data.DataLoader", "modules.image_hred_model.ImageHREDModel", "modules.image_hred_model.ImageHREDModel.train", "modules.image_hred_model.ImageHREDModel.named_parameters", "enumerate", "print", "batched[].float", "batched[].long", "batched[].long", "modules.image_hred_model.ImageHREDModel.", "print", "print", "print", "modules.image_hred_model.ImageHREDModel.forward_loss", "print", "modules.image_hred_model.ImageHREDModel.evaluate", "print", "param.size", "batched[].float.size", "img_feats.size", "txt_feats.size"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.grounding_loss.GroundingLoss.forward_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate"], ["", "", "def", "test_image_hred_model", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'train'", ")", "\n", "loaddb", "=", "caption_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "caption_collate_fn", ")", "\n", "\n", "net", "=", "ImageHREDModel", "(", "config", ")", "\n", "net", ".", "train", "(", ")", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n", "", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "images", "=", "batched", "[", "'images'", "]", ".", "float", "(", ")", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "img_feats", ",", "txt_feats", "=", "net", "(", "sent_inds", ",", "sent_msks", ",", "None", ",", "images", ")", "\n", "print", "(", "'images'", ",", "images", ".", "size", "(", ")", ")", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "loss", "=", "net", ".", "forward_loss", "(", "img_feats", ",", "txt_feats", ")", "\n", "print", "(", "loss", ")", "\n", "metrics", ",", "caches", "=", "net", ".", "evaluate", "(", "img_feats", ",", "txt_feats", ")", "\n", "print", "(", "metrics", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uvavision_DrillDown.tools.test_modules.test_region_grounding_model": [[286, 328], ["datasets.vg.vg", "datasets.loader.region_loader", "torch.utils.data.DataLoader", "modules.region_grounding_model.RegionGroundingModel", "modules.region_grounding_model.RegionGroundingModel.train", "modules.region_grounding_model.RegionGroundingModel.named_parameters", "enumerate", "os.join", "torch.load", "modules.region_grounding_model.RegionGroundingModel.load_state_dict", "print", "batched[].long", "batched[].long", "batched[].long", "batched[].float", "batched[].long", "batched[].float", "modules.region_grounding_model.RegionGroundingModel.", "txt_feats.new_ones", "modules.region_grounding_model.RegionGroundingModel.final_loss", "print", "print", "print", "print", "param.size", "print", "txt_feats.size", "txt_feats.size", "net.final_loss.size", "torch.mean", "modules.region_grounding_model.RegionGroundingModel.evaluate", "modules.region_grounding_model.RegionGroundingModel.evaluate", "txt_feats.size", "img_feats.size"], "function", ["home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_trainer.RegionGroundingTrainer.train", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.final_loss", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate", "home.repos.pwc.inspect_result.uvavision_DrillDown.modules.region_grounding_model.RegionGroundingModel.evaluate"], ["", "", "def", "test_region_grounding_model", "(", "config", ")", ":", "\n", "    ", "db", "=", "vg", "(", "config", ",", "'test'", ")", "\n", "loaddb", "=", "region_loader", "(", "db", ")", "\n", "loader", "=", "DataLoader", "(", "loaddb", ",", "batch_size", "=", "3", "*", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "collate_fn", "=", "region_collate_fn", ")", "\n", "\n", "net", "=", "RegionGroundingModel", "(", "config", ")", "\n", "if", "config", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "pretrained_path", "=", "osp", ".", "join", "(", "config", ".", "data_dir", ",", "'caches/region_grounding_ckpts'", ",", "config", ".", "pretrained", "+", "'.pkl'", ")", "\n", "states", "=", "torch", ".", "load", "(", "pretrained_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "net", ".", "load_state_dict", "(", "states", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "net", ".", "train", "(", ")", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n", "", "for", "cnt", ",", "batched", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "scene_inds", "=", "batched", "[", "'scene_inds'", "]", ".", "long", "(", ")", "\n", "sent_inds", "=", "batched", "[", "'sent_inds'", "]", ".", "long", "(", ")", "\n", "sent_msks", "=", "batched", "[", "'sent_msks'", "]", ".", "long", "(", ")", "\n", "region_feats", "=", "batched", "[", "'region_feats'", "]", ".", "float", "(", ")", "\n", "region_clses", "=", "batched", "[", "'region_clses'", "]", ".", "long", "(", ")", "\n", "region_masks", "=", "batched", "[", "'region_masks'", "]", ".", "float", "(", ")", "\n", "img_feats", ",", "masked_feats", ",", "txt_feats", ",", "subspace_masks", ",", "sample_logits", ",", "sample_indices", "=", "net", "(", "scene_inds", ",", "sent_inds", ",", "sent_msks", ",", "None", ",", "None", ",", "None", ",", "region_feats", ",", "region_clses", ",", "region_masks", ",", "config", ".", "explore_mode", ")", "\n", "if", "config", ".", "instance_dim", ">", "1", ":", "\n", "            ", "print", "(", "sample_indices", "[", "0", "]", ")", "\n", "# print('sample_logits', sample_logits.size())", "\n", "# print('sample_indices', sample_indices.size())", "\n", "", "txt_masks", "=", "txt_feats", ".", "new_ones", "(", "txt_feats", ".", "size", "(", "0", ")", ",", "txt_feats", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "net", ".", "final_loss", "(", "img_feats", ",", "masked_feats", ",", "region_masks", ",", "txt_feats", ",", "txt_masks", ",", "sample_logits", ",", "sample_indices", ")", "\n", "print", "(", "'losses'", ",", "losses", ".", "size", "(", ")", ",", "torch", ".", "mean", "(", "losses", ")", ")", "\n", "\n", "if", "config", ".", "subspace_alignment_mode", ">", "0", ":", "\n", "            ", "metrics", ",", "cache_results", "=", "net", ".", "evaluate", "(", "masked_feats", ",", "region_masks", ",", "txt_feats", ")", "\n", "", "else", ":", "\n", "            ", "metrics", ",", "cache_results", "=", "net", ".", "evaluate", "(", "img_feats", ",", "region_masks", ",", "txt_feats", ")", "\n", "", "print", "(", "'metrics'", ",", "metrics", ")", "\n", "print", "(", "'txt_feats'", ",", "txt_feats", ".", "size", "(", ")", ")", "\n", "print", "(", "'img_feats'", ",", "img_feats", ".", "size", "(", ")", ")", "\n", "\n", "break", "\n", "\n"]]}