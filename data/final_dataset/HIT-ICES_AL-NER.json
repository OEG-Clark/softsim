{"home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.__init__": [[9, 75], ["time.strftime", "os.path.join", "logging.config.dictConfig", "logging.getLogger", "os.path.join", "config.param", "config.param", "config.param", "config.param", "config.param", "os.path.join", "os.path.isdir", "os.makedirs", "time.localtime", "os.getcwd", "list", "time.time", "logger_name.split", "filter"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param"], ["    ", "def", "__init__", "(", "self", ",", "logger_name", "=", "__name__", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Configure log through LOGGING_DIC\n        it supports printing to terminals and files\n        \"\"\"", "\n", "standard_format", "=", "'[%(asctime)s][%(message)s]'", "\n", "simple_format", "=", "'[%(levelname)s][%(asctime)s]%(message)s'", "\n", "\n", "if", "config", "is", "None", ":", "\n", "            ", "logfile_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "logger_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "logdir_prefix", "=", "config", ".", "param", "(", "\"LOGGER\"", ",", "\"logdir_prefix\"", ",", "type", "=", "\"dirpath\"", ")", "\n", "\n", "word_embedding", "=", "config", ".", "param", "(", "\"WORDEMBEDDING\"", ",", "\"method\"", ")", "\n", "corpus_name", "=", "config", ".", "param", "(", "word_embedding", ",", "\"courpus_name\"", ",", "type", "=", "\"string\"", ")", "\n", "model_train", "=", "config", ".", "param", "(", "\"MODELTRAIN\"", ",", "\"method\"", ")", "\n", "al_strategy", "=", "config", ".", "param", "(", "\"ActiveStrategy\"", ",", "\"strategy\"", ",", "required", "=", "False", ")", "\n", "\n", "method", "=", "'_'", ".", "join", "(", "list", "(", "filter", "(", "None", ",", "[", "word_embedding", ",", "model_train", ",", "al_strategy", "]", ")", ")", ")", "\n", "logfile_dir", "=", "os", ".", "path", ".", "join", "(", "logdir_prefix", ",", "corpus_name", ",", "method", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "logfile_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "logfile_dir", ")", "\n", "\n", "", "logfile_prefix", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "logfile_path", "=", "os", ".", "path", ".", "join", "(", "logfile_dir", ",", "logfile_prefix", "+", "\".log\"", ")", "\n", "\n", "LOGGING_DIC", "=", "{", "\n", "'version'", ":", "1", ",", "\n", "'disable_existing_loggers'", ":", "False", ",", "\n", "'formatters'", ":", "{", "\n", "'standard'", ":", "{", "\n", "'format'", ":", "standard_format", "\n", "}", ",", "\n", "'simple'", ":", "{", "\n", "'format'", ":", "simple_format", "\n", "}", ",", "\n", "}", ",", "\n", "'filters'", ":", "{", "}", ",", "\n", "'handlers'", ":", "{", "\n", "'console'", ":", "{", "\n", "'level'", ":", "'DEBUG'", ",", "\n", "'class'", ":", "'logging.StreamHandler'", ",", "\n", "'formatter'", ":", "'simple'", "\n", "}", ",", "\n", "'default'", ":", "{", "\n", "'level'", ":", "'DEBUG'", ",", "\n", "'class'", ":", "'logging.handlers.RotatingFileHandler'", ",", "\n", "'formatter'", ":", "'standard'", ",", "\n", "'filename'", ":", "logfile_path", ",", "\n", "'maxBytes'", ":", "1024", "*", "1024", "*", "5", ",", "\n", "'backupCount'", ":", "5", ",", "\n", "'encoding'", ":", "'utf-8'", ",", "\n", "}", ",", "\n", "}", ",", "\n", "'loggers'", ":", "{", "\n", "''", ":", "{", "\n", "'handlers'", ":", "[", "'default'", ",", "'console'", "]", ",", "\n", "'level'", ":", "'DEBUG'", ",", "\n", "'propagate'", ":", "True", ",", "\n", "}", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "logging", ".", "config", ".", "dictConfig", "(", "LOGGING_DIC", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.debug": [[76, 83], ["logger.Logger.logger.debug", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.debug"], ["", "def", "debug", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        Defines the color of the output: debug--white\n        :param msg:Text for log output\n        :return:\n        \"\"\"", "\n", "self", ".", "logger", ".", "debug", "(", "Fore", ".", "WHITE", "+", "\"DEBUG - \"", "+", "str", "(", "msg", ")", "+", "Style", ".", "RESET_ALL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info": [[84, 91], ["logger.Logger.logger.info", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info"], ["", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        Defines the color of the output: info--green\n        :param msg:Text for log output\n        :return:\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "Fore", ".", "GREEN", "+", "\"[INFO] - \"", "+", "str", "(", "msg", ")", "+", "Style", ".", "RESET_ALL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.warning": [[92, 99], ["logger.Logger.logger.warning", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.warning"], ["", "def", "warning", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        Defines the color of the output: warning--red\n        :param msg:Text for log output\n        :return:\n        \"\"\"", "\n", "self", ".", "logger", ".", "warning", "(", "Fore", ".", "RED", "+", "\"[WARNING] - \"", "+", "str", "(", "msg", ")", "+", "Style", ".", "RESET_ALL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error": [[100, 107], ["logger.Logger.logger.error", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error"], ["", "def", "error", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        Defines the color of the output: error--red\n        :param msg:Text for log output\n        :return:\n        \"\"\"", "\n", "self", ".", "logger", ".", "error", "(", "Fore", ".", "RED", "+", "\"[ERROR] - \"", "+", "str", "(", "msg", ")", "+", "Style", ".", "RESET_ALL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.critical": [[108, 115], ["logger.Logger.logger.critical", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.critical"], ["", "def", "critical", "(", "self", ",", "msg", ")", ":", "\n", "        ", "\"\"\"\n        Defines the color of the output: critical--red\n        :param msg:Text for log output\n        :return:\n        \"\"\"", "\n", "self", ".", "logger", ".", "critical", "(", "Fore", ".", "RED", "+", "\"[CRITICAL] - \"", "+", "str", "(", "msg", ")", "+", "Style", ".", "RESET_ALL", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.arg_parser.get_pipeline_arg_parser": [[6, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.FileType"], "function", ["None"], ["def", "get_pipeline_arg_parser", "(", "epilog", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "epilog", "=", "epilog", ",", "conflict_handler", "=", "'resolve'", ")", "\n", "\n", "# Common options for all pipelines", "\n", "argparser", ".", "add_argument", "(", "\"--help\"", ",", "help", "=", "\"show detailed description of pipeline and steps\"", ",", "action", "=", "\"store_true\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "help", "=", "\"config INI-style list of files; config parameters are overwritten based on files order\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "argparse", ".", "FileType", "(", "mode", "=", "\"r\"", ")", ")", "\n", "argparser", ".", "add_argument", "(", "\"-t\"", ",", "\"--tasks\"", ",", "help", "=", "\"task range e.g. '1-5', '3,6,7', '2,4-8'\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"-l\"", ",", "\"--log\"", ",", "help", "=", "\"log level (default: info)\"", ",", "choices", "=", "[", "\"debug\"", ",", "\"info\"", ",", "\"warning\"", ",", "\"error\"", ",", "\"critical\"", "]", ",", "default", "=", "\"info\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--project\"", ",", "help", "=", "\"project name of current run\"", ")", "\n", "return", "argparser", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.create_dir_if_not_exits": [[5, 22], ["os.path.exists", "logger.info", "os.makedirs", "os.path.isdir", "logger.error", "ValueError"], "function", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error"], ["def", "create_dir_if_not_exits", "(", "dir_path", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    confirm whether dir_path is a directory\n    If it is a file, an error is reported.\n    If the directory does not exist, create a new one\n    :param dir_path\n    :param logger\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "            ", "error_tips", "=", "f\"Path: {dir_path} exits, but is not a directory!\"", "\n", "logger", ".", "error", "(", "error_tips", ")", "\n", "raise", "ValueError", "(", "error_tips", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "", "logger", ".", "info", "(", "\"Complete the confirmation of the output folder.\\n\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.flatten_lists": [[24, 35], ["type", "flatten_list.append"], "function", ["None"], ["", "def", "flatten_lists", "(", "lists", ")", ":", "\n", "    ", "\"\"\"\n    flatten lists to 1d\n    \"\"\"", "\n", "flatten_list", "=", "[", "]", "\n", "for", "temp", "in", "lists", ":", "\n", "        ", "if", "type", "(", "temp", ")", "==", "list", ":", "\n", "            ", "flatten_list", "+=", "temp", "\n", "", "else", ":", "\n", "            ", "flatten_list", ".", "append", "(", "temp", ")", "\n", "", "", "return", "flatten_list", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.vec_to_tags": [[37, 49], ["tags.append", "enumerate", "idx_to_tag.get"], "function", ["None"], ["", "def", "vec_to_tags", "(", "tags", ",", "vecs", ",", "max_seq_len", "=", "64", ")", ":", "\n", "    ", "\"\"\"\n    change vector to tags\n    \"\"\"", "\n", "idx_to_tag", "=", "{", "key", ":", "idx", "for", "key", ",", "idx", "in", "enumerate", "(", "tags", ")", "}", "\n", "tags", "=", "[", "]", "\n", "\n", "for", "vec", "in", "vecs", ":", "\n", "        ", "tag", "=", "[", "idx_to_tag", ".", "get", "(", "idx", ")", "for", "idx", "in", "vec", "[", ":", "max_seq_len", "]", "if", "idx", ">", "0", "]", "\n", "tags", ".", "append", "(", "tag", ")", "\n", "\n", "", "return", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.tagseq_to_entityseq": [[50, 80], ["enumerate", "tag.startswith", "tag.startswith", "entity_seq.append", "entity_seq.append", "entity_seq.append"], "function", ["None"], ["", "def", "tagseq_to_entityseq", "(", "tags", ":", "list", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Convert tags format:\n    [ \"B-LOC\", \"I-LOC\", \"O\", B-PER\"] -> [(0, 2, \"LOC\"), (3, 4, \"PER\")]\n    \"\"\"", "\n", "entity_seq", "=", "[", "]", "\n", "tag_name", "=", "\"\"", "\n", "start", ",", "end", "=", "0", ",", "0", "\n", "for", "index", ",", "tag", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "if", "tag", ".", "startswith", "(", "\"B-\"", ")", ":", "\n", "            ", "if", "tag_name", "!=", "\"\"", ":", "\n", "                ", "end", "=", "index", "\n", "entity_seq", ".", "append", "(", "(", "start", ",", "end", ",", "tag_name", ")", ")", "\n", "", "tag_name", "=", "tag", "[", "2", ":", "]", "\n", "start", "=", "index", "\n", "", "elif", "tag", ".", "startswith", "(", "\"I-\"", ")", ":", "\n", "            ", "if", "tag_name", "==", "\"\"", "or", "tag_name", "==", "tag", "[", "2", ":", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "end", "=", "index", "\n", "entity_seq", ".", "append", "(", "(", "start", ",", "end", ",", "tag_name", ")", ")", "\n", "tag_name", "=", "\"\"", "\n", "", "", "else", ":", "# \"O\"", "\n", "            ", "if", "tag_name", "==", "\"\"", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "end", "=", "index", "\n", "entity_seq", ".", "append", "(", "(", "start", ",", "end", ",", "tag_name", ")", ")", "\n", "tag_name", "=", "\"\"", "\n", "", "", "", "return", "entity_seq", "\n", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.evalindexTest.MyTestCase.setUp": [[10, 12], ["modules.assessment.eval_index.EvaluationIndex", "utils.logger.Logger"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "evaluator", "=", "EvaluationIndex", "(", "Logger", "(", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.evalindexTest.MyTestCase.test_sentence_level_accuracy": [[13, 18], ["evalindexTest.MyTestCase.evaluator.sentence_level_accuracy", "evalindexTest.MyTestCase.assertEqual"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.sentence_level_accuracy"], ["", "def", "test_sentence_level_accuracy", "(", "self", ")", ":", "\n", "        ", "y_true", "=", "[", "[", "\"a\"", ",", "\"b\"", "]", ",", "[", "\"a\"", ",", "\"c\"", "]", "]", "\n", "y_pred", "=", "[", "[", "\"a\"", ",", "\"b\"", "]", ",", "[", "\"a\"", ",", "\"a\"", "]", "]", "\n", "score", "=", "self", ".", "evaluator", ".", "sentence_level_accuracy", "(", "y_true", ",", "y_pred", ")", "\n", "self", ".", "assertEqual", "(", "0.5", ",", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.setUp": [[8, 14], ["modules.data_preprocess.DataPool.DataPool", "random.choices", "random.choices", "random.choices", "range", "list", "random.choices", "range", "list", "list", "len", "list", "len"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "annotated_texts", "=", "[", "''", ".", "join", "(", "random", ".", "choices", "(", "list", "(", "\"abcdefghijklmn\"", ")", ",", "k", "=", "10", ")", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "self", ".", "annotated_labels", "=", "[", "random", ".", "choices", "(", "list", "(", "\"BIO\"", ")", ",", "k", "=", "len", "(", "text", ")", ")", "for", "text", "in", "self", ".", "annotated_texts", "]", "\n", "self", ".", "unannotated_texts", "=", "[", "''", ".", "join", "(", "random", ".", "choices", "(", "list", "(", "\"abcdefghijklmn\"", ")", ",", "k", "=", "10", ")", ")", "for", "i", "in", "range", "(", "20", ")", "]", "\n", "self", ".", "unannotated_labels", "=", "[", "random", ".", "choices", "(", "list", "(", "\"BIO\"", ")", ",", "k", "=", "len", "(", "text", ")", ")", "for", "text", "in", "self", ".", "unannotated_texts", "]", "\n", "self", ".", "data_pool", "=", "DataPool", "(", "self", ".", "annotated_texts", ",", "self", ".", "annotated_labels", ",", "self", ".", "unannotated_texts", ",", "self", ".", "unannotated_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_get_annotated_data": [[15, 19], ["DataPoolTest.DataPoolTestCase.data_pool.get_annotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "DataPoolTest.DataPoolTestCase.assertListEqual", "obtained_texts.tolist", "obtained_labels.tolist"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data"], ["", "def", "test_get_annotated_data", "(", "self", ")", ":", "\n", "        ", "obtained_texts", ",", "obtained_labels", "=", "self", ".", "data_pool", ".", "get_annotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "self", ".", "annotated_texts", ",", "obtained_texts", ".", "tolist", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "self", ".", "annotated_labels", ",", "obtained_labels", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_get_unannotated_text": [[20, 24], ["DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "DataPoolTest.DataPoolTestCase.assertListEqual", "obtained_texts.tolist", "obtained_labels.tolist"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data"], ["", "def", "test_get_unannotated_text", "(", "self", ")", ":", "\n", "        ", "obtained_texts", ",", "obtained_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "self", ".", "unannotated_texts", ",", "obtained_texts", ".", "tolist", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "self", ".", "unannotated_labels", ",", "obtained_labels", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_append_annotated_update": [[25, 34], ["DataPoolTest.DataPoolTestCase.data_pool.get_annotated_data", "numpy.concatenate", "numpy.concatenate", "DataPoolTest.DataPoolTestCase.data_pool.update", "DataPoolTest.DataPoolTestCase.data_pool.get_annotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "random.choices", "numpy.concatenate.tolist", "actucal_texts.tolist", "random.choices", "range", "list", "numpy.array", "numpy.array", "list", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data"], ["", "def", "test_append_annotated_update", "(", "self", ")", ":", "\n", "        ", "texts", "=", "[", "''", ".", "join", "(", "random", ".", "choices", "(", "list", "(", "\"abcdefghijklmn\"", ")", ",", "k", "=", "10", ")", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "labels", "=", "[", "random", ".", "choices", "(", "list", "(", "\"BIO\"", ")", ",", "k", "=", "len", "(", "text", ")", ")", "for", "text", "in", "texts", "]", "\n", "expected_texts", ",", "expected_labels", "=", "self", ".", "data_pool", ".", "get_annotated_data", "(", ")", "\n", "expected_texts", "=", "np", ".", "concatenate", "(", "(", "expected_texts", ",", "np", ".", "array", "(", "texts", ")", ")", ")", "\n", "expected_labels", "=", "np", ".", "concatenate", "(", "(", "expected_labels", ",", "np", ".", "array", "(", "labels", ")", ")", ")", "\n", "self", ".", "data_pool", ".", "update", "(", "mode", "=", "\"append_annotated\"", ",", "annotated_texts", "=", "texts", ",", "annotated_labels", "=", "labels", ")", "\n", "actucal_texts", ",", "actucal_labels", "=", "self", ".", "data_pool", ".", "get_annotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "expected_texts", ".", "tolist", "(", ")", ",", "actucal_texts", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_append_unannotated_update_1": [[35, 46], ["DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "numpy.concatenate", "numpy.array.tolist", "numpy.array.extend", "numpy.array", "DataPoolTest.DataPoolTestCase.data_pool.update", "DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "numpy.concatenate.tolist", "actucal_texts.tolist", "random.choices", "range", "numpy.array", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data"], ["", "def", "test_append_unannotated_update_1", "(", "self", ")", ":", "\n", "        ", "texts", "=", "[", "''", ".", "join", "(", "random", ".", "choices", "(", "list", "(", "\"abcdefghijklmn\"", ")", ",", "k", "=", "10", ")", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "expected_texts", ",", "expected_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "expected_texts", "=", "np", ".", "concatenate", "(", "(", "expected_texts", ",", "np", ".", "array", "(", "texts", ")", ")", ")", "\n", "labels", "=", "[", "[", "'O'", "for", "j", "in", "range", "(", "len", "(", "i", ")", ")", "]", "for", "i", "in", "texts", "]", "\n", "expected_labels", "=", "expected_labels", ".", "tolist", "(", ")", "\n", "expected_labels", ".", "extend", "(", "labels", ")", "\n", "expected_labels", "=", "np", ".", "array", "(", "expected_labels", ")", "\n", "self", ".", "data_pool", ".", "update", "(", "mode", "=", "\"append_unannotated\"", ",", "unannotated_texts", "=", "texts", ",", "unannotated_labels", "=", "None", ")", "\n", "actucal_texts", ",", "actucal_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "expected_texts", ".", "tolist", "(", ")", ",", "actucal_texts", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_append_unannotated_update_2": [[47, 56], ["DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "numpy.concatenate", "numpy.concatenate", "DataPoolTest.DataPoolTestCase.data_pool.update", "DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "random.choices", "numpy.concatenate.tolist", "actucal_texts.tolist", "random.choices", "range", "list", "numpy.array", "numpy.array", "list", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data"], ["", "def", "test_append_unannotated_update_2", "(", "self", ")", ":", "\n", "        ", "texts", "=", "[", "''", ".", "join", "(", "random", ".", "choices", "(", "list", "(", "\"abcdefghijklmn\"", ")", ",", "k", "=", "10", ")", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "labels", "=", "[", "random", ".", "choices", "(", "list", "(", "\"BIO\"", ")", ",", "k", "=", "len", "(", "text", ")", ")", "for", "text", "in", "texts", "]", "\n", "expected_texts", ",", "expected_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "expected_texts", "=", "np", ".", "concatenate", "(", "(", "expected_texts", ",", "np", ".", "array", "(", "texts", ")", ")", ")", "\n", "expected_labels", "=", "np", ".", "concatenate", "(", "(", "expected_labels", ",", "np", ".", "array", "(", "labels", ")", ")", ")", "\n", "self", ".", "data_pool", ".", "update", "(", "mode", "=", "\"append_unannotated\"", ",", "unannotated_texts", "=", "texts", ",", "unannotated_labels", "=", "labels", ")", "\n", "actucal_texts", ",", "actucal_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "expected_texts", ".", "tolist", "(", ")", ",", "actucal_texts", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_internal_exchange_u2a": [[57, 75], ["DataPoolTest.DataPoolTestCase.data_pool.get_annotated_data", "DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "DataPoolTest.DataPoolTestCase.data_pool.update", "DataPoolTest.DataPoolTestCase.data_pool.get_annotated_data", "DataPoolTest.DataPoolTestCase.data_pool.get_unannotated_data", "DataPoolTest.DataPoolTestCase.assertListEqual", "DataPoolTest.DataPoolTestCase.assertListEqual", "DataPoolTest.DataPoolTestCase.assertListEqual", "DataPoolTest.DataPoolTestCase.assertListEqual", "annotated_texts.tolist", "annotated_labels.tolist", "unannotated_texts.tolist", "unannotated_labels.tolist", "annotated_texts.append", "annotated_labels.append", "actucal_anno_texts.tolist", "actucal_unan_texts.tolist", "actucal_anno_labels.tolist", "actucal_unan_labels.tolist", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data"], ["", "def", "test_internal_exchange_u2a", "(", "self", ")", ":", "\n", "        ", "annotated_texts", ",", "annotated_labels", "=", "self", ".", "data_pool", ".", "get_annotated_data", "(", ")", "\n", "unannotated_texts", ",", "unannotated_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "annotated_texts", ",", "annotated_labels", "=", "annotated_texts", ".", "tolist", "(", ")", ",", "annotated_labels", ".", "tolist", "(", ")", "\n", "unannotated_texts", ",", "unannotated_labels", "=", "unannotated_texts", ".", "tolist", "(", ")", ",", "unannotated_labels", ".", "tolist", "(", ")", "\n", "selected_idx", "=", "[", "1", ",", "3", ",", "0", "]", "\n", "for", "idx", "in", "selected_idx", ":", "\n", "            ", "annotated_texts", ".", "append", "(", "unannotated_texts", "[", "idx", "]", ")", "\n", "annotated_labels", ".", "append", "(", "unannotated_labels", "[", "idx", "]", ")", "\n", "", "unannotated_texts", "=", "[", "x", "for", "idx", ",", "x", "in", "enumerate", "(", "unannotated_texts", ")", "if", "idx", "not", "in", "selected_idx", "]", "\n", "unannotated_labels", "=", "[", "x", "for", "idx", ",", "x", "in", "enumerate", "(", "unannotated_labels", ")", "if", "idx", "not", "in", "selected_idx", "]", "\n", "self", ".", "data_pool", ".", "update", "(", "mode", "=", "\"internal_exchange_u2a\"", ",", "selected_idx", "=", "selected_idx", ")", "\n", "actucal_anno_texts", ",", "actucal_anno_labels", "=", "self", ".", "data_pool", ".", "get_annotated_data", "(", ")", "\n", "actucal_unan_texts", ",", "actucal_unan_labels", "=", "self", ".", "data_pool", ".", "get_unannotated_data", "(", ")", "\n", "self", ".", "assertListEqual", "(", "annotated_texts", ",", "actucal_anno_texts", ".", "tolist", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "unannotated_texts", ",", "actucal_unan_texts", ".", "tolist", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "annotated_labels", ",", "actucal_anno_labels", ".", "tolist", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "unannotated_labels", ",", "actucal_unan_labels", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.test.DataPoolTest.DataPoolTestCase.test_a2u_2": [[76, 80], ["modules.data_preprocess.DataPool.DataPool", "modules.data_preprocess.DataPool.DataPool.update", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update"], ["", "def", "test_a2u_2", "(", "self", ")", ":", "\n", "        ", "data_pool", "=", "DataPool", "(", "annotated_texts", "=", "self", ".", "annotated_texts", ",", "annotated_labels", "=", "self", ".", "annotated_labels", ",", "\n", "unannotated_texts", "=", "[", "[", "]", "]", ",", "unannotated_labels", "=", "[", "[", "]", "]", ")", "\n", "data_pool", ".", "update", "(", "mode", "=", "\"internal_exchange_a2u\"", ",", "selected_idx", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.__init__": [[8, 23], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "crf.CRF", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "tag_to_ix", ",", "embedding_dim", ",", "hidden_dim", ",", "pre_word_embed", "=", "None", ",", "num_rnn_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "BiLSTMCRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "tag_to_ix", "=", "tag_to_ix", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_dim", ")", "\n", "if", "pre_word_embed", "is", "not", "None", ":", "\n", "            ", "self", ".", "pre_word_embed", "=", "True", "\n", "self", ".", "word_embedding", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "pre_word_embed", ")", ")", "\n", "\n", "", "self", ".", "bilstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", "//", "2", ",", "num_layers", "=", "num_rnn_layers", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "crf", "=", "CRF", "(", "hidden_dim", ",", "self", ".", "tag_to_ix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.__build_features": [[24, 37], ["sentences.gt", "bilstm_crf.BiLSTMCRF.word_embedding", "sentences.gt.sum", "sentences.gt.sum.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "bilstm_crf.BiLSTMCRF.bilstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "perm_idx.sort", "sentences.long"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.word_embedding"], ["", "def", "__build_features", "(", "self", ",", "sentences", ")", ":", "\n", "        ", "masks", "=", "sentences", ".", "gt", "(", "0", ")", "\n", "embeds", "=", "self", ".", "word_embedding", "(", "sentences", ".", "long", "(", ")", ")", "\n", "seq_length", "=", "masks", ".", "sum", "(", "1", ")", "\n", "sorted_seq_length", ",", "perm_idx", "=", "seq_length", ".", "sort", "(", "descending", "=", "True", ")", "\n", "embeds", "=", "embeds", "[", "perm_idx", ",", ":", "]", "\n", "\n", "pack_sequence", "=", "pack_padded_sequence", "(", "embeds", ",", "lengths", "=", "sorted_seq_length", ",", "batch_first", "=", "True", ")", "\n", "packed_output", ",", "_", "=", "self", ".", "bilstm", "(", "pack_sequence", ")", "\n", "lstm_out", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "_", ",", "unperm_idx", "=", "perm_idx", ".", "sort", "(", ")", "\n", "lstm_out", "=", "lstm_out", "[", "unperm_idx", ",", ":", "]", "\n", "return", "lstm_out", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.loss": [[38, 42], ["bilstm_crf.BiLSTMCRF.__build_features", "bilstm_crf.BiLSTMCRF.crf.loss"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.__build_features", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.loss"], ["", "def", "loss", "(", "self", ",", "xs", ",", "tags", ")", ":", "\n", "        ", "features", ",", "masks", "=", "self", ".", "__build_features", "(", "xs", ")", "\n", "loss", "=", "self", ".", "crf", ".", "loss", "(", "features", ",", "tags", ",", "masks", "=", "masks", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.forward": [[43, 48], ["bilstm_crf.BiLSTMCRF.__build_features", "bilstm_crf.BiLSTMCRF.crf"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.bilstm_crf.BiLSTMCRF.__build_features"], ["", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "# Get the emission scores from the BiLSTM", "\n", "        ", "features", ",", "masks", "=", "self", ".", "__build_features", "(", "xs", ")", "\n", "scores", ",", "tag_seq", ",", "probs", "=", "self", ".", "crf", "(", "features", ",", "masks", ")", "\n", "return", "scores", ",", "tag_seq", ",", "probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__init__": [[26, 40], ["torch.Module.__init__", "len", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ":", "int", ",", "tag_to_ix", ":", "dict", ")", ":", "\n", "        ", "\"\"\"\n        :param in_features: number of features for the input\n        :param tag_to_ix: number of tags. Including [CLS] and [SEP], DO NOT Include START, STOP\n        \"\"\"", "\n", "super", "(", "CRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_tags", "=", "len", "(", "tag_to_ix", ")", "\n", "self", ".", "start_idx", "=", "tag_to_ix", "[", "'[CLS]'", "]", "\n", "self", ".", "stop_idx", "=", "tag_to_ix", "[", "'[SEP]'", "]", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", ",", "self", ".", "num_tags", ")", "# fully connected layer.", "\n", "# transition matrix. T_{i,j} means the probability of transition from j to i", "\n", "self", ".", "transitions", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_tags", ",", "self", ".", "num_tags", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "transitions", ".", "data", "[", "self", ".", "start_idx", ",", ":", "]", "=", "IMPOSSIBLE", "\n", "self", ".", "transitions", ".", "data", "[", ":", ",", "self", ".", "stop_idx", "]", "=", "IMPOSSIBLE", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.forward": [[41, 55], ["crf.CRF.fc", "crf.CRF.__viterbi_decode", "masks[].float", "features.size"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__viterbi_decode"], ["", "def", "forward", "(", "self", ",", "features", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n        Decode tags.\n\n        :param features: [B, L, C], batch of unary scores\n        :param masks: [B, L] masks\n        :return: (best_score, best_path, probs)\n            best_score: [B]\n            best_path: [B, L]\n            probs: [B, L, C]\n        \"\"\"", "\n", "probs", "=", "self", ".", "fc", "(", "features", ")", "\n", "best_score", ",", "best_path", "=", "self", ".", "__viterbi_decode", "(", "probs", ",", "masks", "[", ":", ",", ":", "features", ".", "size", "(", "1", ")", "]", ".", "float", "(", ")", ")", "\n", "return", "best_score", ",", "best_path", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.loss": [[57, 75], ["crf.CRF.fc", "crf.CRF.size", "masks[].float", "crf.CRF.__forward_algorithm", "crf.CRF.__score_sentence", "ys[].long"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__forward_algorithm", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__score_sentence"], ["", "def", "loss", "(", "self", ",", "features", ",", "ys", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n        negative log likelihood loss\n        B: batch size, L: sequence length, D: dimension\n\n        :param features: [B, L, D]\n        :param ys: tags, [B, L]\n        :param masks: masks for padding, [B, L]\n        :return: loss\n        \"\"\"", "\n", "features", "=", "self", ".", "fc", "(", "features", ")", "\n", "L", "=", "features", ".", "size", "(", "1", ")", "\n", "masks_", "=", "masks", "[", ":", ",", ":", "L", "]", ".", "float", "(", ")", "\n", "\n", "forward_score", "=", "self", ".", "__forward_algorithm", "(", "features", ",", "masks_", ")", "\n", "gold_score", "=", "self", ".", "__score_sentence", "(", "features", ",", "ys", "[", ":", ",", ":", "L", "]", ".", "long", "(", ")", ",", "masks_", ")", "\n", "loss", "=", "(", "forward_score", "-", "gold_score", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__score_sentence": [[76, 99], ["features.gather().squeeze", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.gather().squeeze", "torch.cat.gather().squeeze", "features.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "masks.sum().long().unsqueeze", "masks.sum().long", "masks.sum"], "methods", ["None"], ["", "def", "__score_sentence", "(", "self", ",", "features", ",", "tags", ",", "masks", ")", ":", "\n", "        ", "\"\"\"Gives the score of a provided tag sequence\n        :param features: [B, L, C]\n        :param tags: [B, L]\n        :param masks: [B, L]\n        :return: [B] score in the log space\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "features", ".", "shape", "\n", "\n", "# emission score", "\n", "emit_scores", "=", "features", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "tags", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# transition score", "\n", "start_tag", "=", "torch", ".", "full", "(", "(", "B", ",", "1", ")", ",", "self", ".", "start_idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "tags", ".", "device", ")", "\n", "tags", "=", "torch", ".", "cat", "(", "[", "start_tag", ",", "tags", "]", ",", "dim", "=", "1", ")", "# [B, L+1]", "\n", "trans_scores", "=", "self", ".", "transitions", "[", "tags", "[", ":", ",", "1", ":", "]", ",", "tags", "[", ":", ",", ":", "-", "1", "]", "]", "\n", "\n", "# last transition score to STOP tag", "\n", "last_tag", "=", "tags", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "masks", ".", "sum", "(", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "# [B]", "\n", "last_score", "=", "self", ".", "transitions", "[", "self", ".", "stop_idx", ",", "last_tag", "]", "\n", "\n", "score", "=", "(", "(", "trans_scores", "+", "emit_scores", ")", "*", "masks", ")", ".", "sum", "(", "1", ")", "+", "last_score", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__viterbi_decode": [[100, 145], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.full", "torch.full", "torch.full", "torch.full", "range", "torch.full.max", "torch.full.max", "bps.cpu().numpy.cpu().numpy.cpu().numpy", "range", "masks[].unsqueeze", "acc_score_t.max", "best_tag[].item", "int", "reversed", "best_paths.append", "torch.full.unsqueeze", "torch.full.unsqueeze", "bps.cpu().numpy.cpu().numpy.cpu", "masks[].sum().item", "best_path.append", "masks[].sum"], "methods", ["None"], ["", "def", "__viterbi_decode", "(", "self", ",", "features", ",", "masks", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"decode to tags using viterbi algorithm\n        :param features: [B, L, C], batch of unary scores\n        :param masks: [B, L] masks\n        :return: (best_score, best_paths)\n            best_score: [B]\n            best_paths: [B, L]\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "features", ".", "shape", "\n", "\n", "bps", "=", "torch", ".", "zeros", "(", "B", ",", "L", ",", "C", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "features", ".", "device", ")", "# back pointers", "\n", "\n", "# Initialize the viterbi variables in log space", "\n", "max_score", "=", "torch", ".", "full", "(", "(", "B", ",", "C", ")", ",", "IMPOSSIBLE", ",", "device", "=", "features", ".", "device", ")", "# [B, C]", "\n", "max_score", "[", ":", ",", "self", ".", "start_idx", "]", "=", "0", "\n", "\n", "for", "t", "in", "range", "(", "L", ")", ":", "\n", "            ", "mask_t", "=", "masks", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "# [B, 1]", "\n", "emit_score_t", "=", "features", "[", ":", ",", "t", "]", "# [B, C]", "\n", "\n", "# [B, 1, C] + [C, C]", "\n", "acc_score_t", "=", "max_score", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "transitions", "# [B, C, C]", "\n", "acc_score_t", ",", "bps", "[", ":", ",", "t", ",", ":", "]", "=", "acc_score_t", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "acc_score_t", "+=", "emit_score_t", "\n", "max_score", "=", "acc_score_t", "*", "mask_t", "+", "max_score", "*", "(", "1", "-", "mask_t", ")", "# max_score or acc_score_t", "\n", "\n", "# Transition to STOP_TAG", "\n", "", "max_score", "+=", "self", ".", "transitions", "[", "self", ".", "stop_idx", "]", "\n", "best_score", ",", "best_tag", "=", "max_score", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "# Follow the back pointers to decode the best path.", "\n", "best_paths", "=", "[", "]", "\n", "bps", "=", "bps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "best_tag_b", "=", "best_tag", "[", "b", "]", ".", "item", "(", ")", "\n", "seq_len", "=", "int", "(", "masks", "[", "b", ",", ":", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "best_path", "=", "[", "best_tag_b", "]", "\n", "for", "bps_t", "in", "reversed", "(", "bps", "[", "b", ",", ":", "seq_len", "]", ")", ":", "\n", "                ", "best_tag_b", "=", "bps_t", "[", "best_tag_b", "]", "\n", "best_path", ".", "append", "(", "best_tag_b", ")", "\n", "# drop the last tag and reverse the left", "\n", "", "best_paths", ".", "append", "(", "best_path", "[", "-", "2", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "return", "best_score", ",", "best_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.__forward_algorithm": [[146, 169], ["torch.full", "torch.full", "torch.full", "torch.full", "crf.CRF.transitions.unsqueeze", "range", "crf.log_sum_exp", "features[].unsqueeze", "crf.log_sum_exp", "masks[].unsqueeze", "log_sum_exp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.log_sum_exp", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.log_sum_exp"], ["", "def", "__forward_algorithm", "(", "self", ",", "features", ",", "masks", ")", ":", "\n", "        ", "\"\"\"calculate the partition function with forward algorithm.\n        TRICK: log_sum_exp([x1, x2, x3, x4, ...]) = log_sum_exp([log_sum_exp([x1, x2]), log_sum_exp([x3, x4]), ...])\n        :param features: features. [B, L, C]\n        :param masks: [B, L] masks\n        :return:    [B], score in the log space\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "features", ".", "shape", "\n", "\n", "scores", "=", "torch", ".", "full", "(", "(", "B", ",", "C", ")", ",", "IMPOSSIBLE", ",", "device", "=", "features", ".", "device", ")", "# [B, C]", "\n", "scores", "[", ":", ",", "self", ".", "start_idx", "]", "=", "0.", "\n", "trans", "=", "self", ".", "transitions", ".", "unsqueeze", "(", "0", ")", "# [1, C, C]", "\n", "\n", "# Iterate through the sentence", "\n", "for", "t", "in", "range", "(", "L", ")", ":", "\n", "            ", "emit_score_t", "=", "features", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "2", ")", "# [B, C, 1]", "\n", "score_t", "=", "scores", ".", "unsqueeze", "(", "1", ")", "+", "trans", "+", "emit_score_t", "# [B, 1, C] + [1, C, C] + [B, C, 1] => [B, C, C]", "\n", "score_t", "=", "log_sum_exp", "(", "score_t", ")", "# [B, C]", "\n", "\n", "mask_t", "=", "masks", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "# [B, 1]", "\n", "scores", "=", "score_t", "*", "mask_t", "+", "scores", "*", "(", "1", "-", "mask_t", ")", "\n", "", "scores", "=", "log_sum_exp", "(", "scores", "+", "self", ".", "transitions", "[", "self", ".", "stop_idx", "]", ")", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.log_sum_exp": [[5, 14], ["x.max", "max_score.unsqueeze"], "function", ["None"], ["def", "log_sum_exp", "(", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    calculate\n\n    .. math:: \\log(\\sum(\\exp(x))) = \\max(x) + \\log(\\sum(\\exp(x - \\max(x))))\n\n    \"\"\"", "\n", "max_score", "=", "x", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "return", "max_score", "+", "(", "x", "-", "max_score", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.Model.Model.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.Model.Model.train": [[8, 10], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "config_file", ",", "x", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.Model.Model.evaluate": [[11, 13], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "config_file", ",", "x", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.Model.Model.predict": [[14, 16], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "config_file", ",", "x", "=", "None", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.train_bilstm.train": [[25, 66], ["pickle.load", "list", "modules.data_preprocess.data_loader.Preprocessor", "numpy.random.uniform", "modules.model_train.bilstm_crf.BiLSTMCRF", "modules.model_train.bilstm_crf.BiLSTMCRF.to", "modules.data_preprocess.data_loader.Preprocessor.load_dataset", "datapool.get_annotated_data", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.utils.data.DataLoader", "torch.Adam", "range", "torch.save", "torch.save", "line.strip", "open", "pickle.load.keys", "numpy.sqrt", "os.path.join", "torch.utils.data.TensorDataset", "modules.model_train.bilstm_crf.BiLSTMCRF.parameters", "modules.model_train.bilstm_crf.BiLSTMCRF.train", "tqdm.tqdm", "enumerate", "modules.model_train.bilstm_crf.BiLSTMCRF.state_dict", "open().readlines", "numpy.sqrt", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "modules.model_train.bilstm_crf.BiLSTMCRF.zero_grad", "modules.model_train.bilstm_crf.BiLSTMCRF.loss", "model.loss.backward", "optim.Adam.step", "tqdm.tqdm.set_description", "xb.to", "yb.to", "open"], "function", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.load_dataset", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.train_bilstm.train", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.loss"], ["def", "train", "(", ")", ":", "\n", "    ", "embedding_dim", "=", "EMBEDDING_DIM", "\n", "tags", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "TAGS_FILE", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", ".", "readlines", "(", ")", "]", "\n", "all_words_embeds", "=", "pickle", ".", "load", "(", "open", "(", "ALL_WORD_EMBEDING_PATH", ",", "'rb'", ")", ")", "\n", "\n", "vocab", "=", "list", "(", "all_words_embeds", ".", "keys", "(", ")", ")", "\n", "preprocessor", "=", "Preprocessor", "(", "vocab", "=", "vocab", ",", "tags", "=", "tags", ")", "\n", "\n", "word_embeds", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "sqrt", "(", "0.06", ")", ",", "np", ".", "sqrt", "(", "0.06", ")", ",", "(", "len", "(", "preprocessor", ".", "vocab", ")", ",", "embedding_dim", ")", ")", "\n", "\n", "for", "word", "in", "all_words_embeds", ":", "\n", "        ", "word_embeds", "[", "preprocessor", ".", "word_to_idx", "[", "word", "]", "]", "=", "all_words_embeds", "[", "word", "]", "\n", "\n", "", "model", "=", "BiLSTMCRF", "(", "vocab_size", "=", "len", "(", "preprocessor", ".", "vocab", ")", ",", "\n", "tag_to_ix", "=", "preprocessor", ".", "tag_to_idx", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "hidden_dim", "=", "HIDDEN_DIM", ",", "\n", "pre_word_embed", "=", "word_embeds", ",", "\n", "num_rnn_layers", "=", "1", ",", "\n", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "datapool", ",", "eval_xs", ",", "eval_ys", "=", "preprocessor", ".", "load_dataset", "(", "COURPUS_FILE", ",", "\"BosonNLP_NER_6C\"", ",", "6", ",", "64", ",", "\n", "os", ".", "path", ".", "join", "(", "COURPUS_FILE", ",", "\"statistics.csv\"", ")", ")", "\n", "train_xs", ",", "train_ys", "=", "datapool", ".", "get_annotated_data", "(", ")", "\n", "train_xs", "=", "torch", ".", "from_numpy", "(", "train_xs", ")", ".", "int", "(", ")", "\n", "train_ys", "=", "torch", ".", "from_numpy", "(", "train_ys", ")", ".", "int", "(", ")", "\n", "train_dl", "=", "DataLoader", "(", "TensorDataset", "(", "train_xs", ",", "train_ys", ")", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "LEARNING_RATE", ",", "weight_decay", "=", "0", ")", "\n", "for", "epoch", "in", "range", "(", "NUM_EPOCH", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "bar", "=", "tqdm", "(", "train_dl", ")", "\n", "for", "bi", ",", "(", "xb", ",", "yb", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "            ", "model", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "model", ".", "loss", "(", "xb", ".", "to", "(", "device", ")", ",", "yb", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "bar", ".", "set_description", "(", "\"{:2d}/{} loss: {:5.2f}\"", ".", "format", "(", "epoch", "+", "1", ",", "NUM_EPOCH", ",", "loss", ")", ")", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'../../model/BosonNLP_NER_6C_full.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.ActiveLearningStrategy.select_idx": [[8, 18], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "@", "abstractmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        probs: [B, L, C]\n        scores: [B]\n        best_path: [B, L]\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.RandomStrategy.select_idx": [[21, 35], ["numpy.random.choice", "numpy.arange"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Random Select Strategy\n        This method you can directly pass candidate_number: int\n\n        .. Note:: Random Select does not require to predict on the unannotated samples!!\n        \"\"\"", "\n", "if", "\"candidate_number\"", "in", "kwargs", ":", "\n", "            ", "candidate_number", "=", "kwargs", "[", "\"candidate_number\"", "]", "\n", "", "else", ":", "\n", "            ", "candidate_number", "=", "scores", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "candidate_number", ")", ",", "size", "=", "choices_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.LongStrategy.select_idx": [[37, 42], ["numpy.array", "numpy.argpartition", "len"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "length", "=", "np", ".", "array", "(", "[", "-", "len", "(", "path", ")", "for", "path", "in", "best_path", "]", ")", "\n", "return", "np", ".", "argpartition", "(", "length", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.LeastConfidenceStrategy.select_idx": [[44, 54], ["len", "numpy.argpartition"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Least Confidence Strategy\n\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "idx", "=", "np", ".", "argpartition", "(", "-", "scores", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.NormalizedLeastConfidenceStrategy.select_idx": [[57, 68], ["numpy.array", "len", "numpy.argpartition", "len"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Normalized Least Confidence Strategy\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "normalized_frac", "=", "np", ".", "array", "(", "[", "len", "(", "path", ")", "for", "path", "in", "best_path", "]", ")", "\n", "scores", "=", "scores", "/", "normalized_frac", "\n", "idx", "=", "np", ".", "argpartition", "(", "-", "scores", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.LeastTokenProbabilityStrategy.select_idx": [[71, 84], ["zip", "len", "numpy.take", "ltp_scores.append", "numpy.argpartition", "numpy.min"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Least Token Probability Strategy\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "ltp_scores", "=", "[", "]", "\n", "for", "prob", ",", "path", "in", "zip", "(", "probs", ",", "best_path", ")", ":", "\n", "            ", "prob", "=", "np", ".", "take", "(", "prob", ",", "path", ")", "\n", "ltp_scores", ".", "append", "(", "np", ".", "min", "(", "prob", ")", ")", "\n", "", "idx", "=", "np", ".", "argpartition", "(", "ltp_scores", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.MinimumTokenProbabilityStrategy.select_idx": [[87, 102], ["zip", "len", "numpy.max", "mtp_socres.append", "numpy.argpartition", "numpy.exp", "numpy.sum", "numpy.min", "len", "numpy.exp", "numpy.max", "len"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Minimum Token Probability Strategy\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "mtp_socres", "=", "[", "]", "\n", "for", "prob", ",", "path", "in", "zip", "(", "probs", ",", "best_path", ")", ":", "\n", "            ", "prob", "=", "prob", "[", ":", "len", "(", "path", ")", "]", "\n", "prob", "-=", "np", ".", "max", "(", "prob", ")", "\n", "prob", "=", "np", ".", "exp", "(", "prob", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "prob", ")", ")", "\n", "mtp_socres", ".", "append", "(", "np", ".", "min", "(", "np", ".", "max", "(", "prob", "[", ":", "len", "(", "path", ")", "]", ",", "axis", "=", "1", ")", ")", ")", "\n", "", "idx", "=", "np", ".", "argpartition", "(", "mtp_socres", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.MaximumTokenEntropyStrategy.select_idx": [[109, 124], ["zip", "len", "numpy.max", "mte_socres.append", "numpy.argpartition", "numpy.exp", "numpy.sum", "numpy.sum", "len", "numpy.exp", "numpy.log"], "methods", ["None"], ["@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Maximum Token Entropy\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "mte_socres", "=", "[", "]", "\n", "for", "prob", ",", "path", "in", "zip", "(", "probs", ",", "best_path", ")", ":", "\n", "            ", "prob", "=", "prob", "[", ":", "len", "(", "path", ")", "]", "\n", "prob", "-=", "np", ".", "max", "(", "prob", ")", "\n", "prob_softmax", "=", "np", ".", "exp", "(", "prob", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "prob", ")", ")", "\n", "mte_socres", ".", "append", "(", "np", ".", "sum", "(", "prob_softmax", "*", "np", ".", "log", "(", "prob_softmax", ")", ")", ")", "\n", "", "idx", "=", "np", ".", "argpartition", "(", "mte_socres", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.TokenEntropyStrategy.select_idx": [[131, 146], ["zip", "len", "numpy.max", "mte_socres.append", "numpy.argpartition", "numpy.exp", "numpy.sum", "numpy.mean", "len", "numpy.exp", "numpy.log"], "methods", ["None"], ["@", "classmethod", "\n", "def", "select_idx", "(", "cls", ",", "choices_number", ":", "int", ",", "probs", ":", "np", ".", "ndarray", "=", "None", ",", "scores", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "best_path", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Maximum Token Entropy\n        \"\"\"", "\n", "assert", "probs", ".", "shape", "[", "0", "]", "==", "scores", ".", "shape", "[", "0", "]", "==", "len", "(", "best_path", ")", "\n", "mte_socres", "=", "[", "]", "\n", "for", "prob", ",", "path", "in", "zip", "(", "probs", ",", "best_path", ")", ":", "\n", "            ", "prob", "=", "prob", "[", ":", "len", "(", "path", ")", "]", "\n", "prob", "-=", "np", ".", "max", "(", "prob", ")", "\n", "prob_softmax", "=", "np", ".", "exp", "(", "prob", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "prob", ")", ")", "\n", "mte_socres", ".", "append", "(", "np", ".", "mean", "(", "prob_softmax", "*", "np", ".", "log", "(", "prob_softmax", ")", ")", ")", "\n", "", "idx", "=", "np", ".", "argpartition", "(", "mte_socres", ",", "choices_number", ")", "[", ":", "choices_number", "]", "\n", "return", "idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.__init__": [[6, 19], ["data_loader.Preprocessor.vocab.insert", "data_loader.Preprocessor.vocab.append", "data_loader.Preprocessor.vocab.append", "data_loader.Preprocessor.vocab.append", "len", "enumerate", "enumerate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "tags", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab", ".", "insert", "(", "0", ",", "\"[PAD]\"", ")", "\n", "if", "'[CLS]'", "not", "in", "self", ".", "vocab", ":", "\n", "            ", "self", ".", "vocab", ".", "append", "(", "'[CLS]'", ")", "\n", "", "if", "'[SEP]'", "not", "in", "self", ".", "vocab", ":", "\n", "            ", "self", ".", "vocab", ".", "append", "(", "'[SEP]'", ")", "\n", "", "self", ".", "vocab", ".", "append", "(", "\"[OOV]\"", ")", "\n", "self", ".", "tags", "=", "tags", "\n", "self", ".", "PAD_IDX", "=", "0", "\n", "self", ".", "OOV_IDX", "=", "len", "(", "self", ".", "vocab", ")", "-", "1", "\n", "self", ".", "word_to_idx", "=", "{", "key", ":", "idx", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "vocab", ")", "}", "\n", "self", ".", "tag_to_idx", "=", "{", "key", ":", "idx", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "tags", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._entity_number": [[20, 25], ["sum", "label.startswith"], "methods", ["None"], ["", "def", "_entity_number", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Calculate how many enities in a sentence.\n        \"\"\"", "\n", "return", "sum", "(", "[", "1", "for", "label", "in", "labels", "if", "label", ".", "startswith", "(", "'B-'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.update_statistics": [[26, 40], ["len", "len", "len", "data_loader.Preprocessor._entity_number"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._entity_number"], ["", "def", "update_statistics", "(", "self", ",", "statistics", ":", "dict", ",", "annotated_label", ":", "list", ")", "->", "dict", ":", "\n", "        ", "statistics", "[", "\"#S\"", "]", "+=", "1", "\n", "statistics", "[", "\"#T\"", "]", "+=", "len", "(", "annotated_label", ")", "\n", "statistics", "[", "\"ASL\"", "]", "+=", "len", "(", "annotated_label", ")", "\n", "positive_tags_num", "=", "len", "(", "[", "label", "for", "label", "in", "annotated_label", "if", "label", "!=", "'O'", "]", ")", "\n", "statistics", "[", "\"AEL\"", "]", "+=", "positive_tags_num", "\n", "statistics", "[", "\"%PT\"", "]", "+=", "positive_tags_num", "\n", "entity_number", "=", "self", ".", "_entity_number", "(", "annotated_label", ")", "\n", "statistics", "[", "\"TE\"", "]", "+=", "entity_number", "\n", "if", "entity_number", ">=", "1", ":", "\n", "            ", "statistics", "[", "'%AC'", "]", "+=", "1", "\n", "", "if", "entity_number", ">=", "2", ":", "\n", "            ", "statistics", "[", "'%DAC'", "]", "+=", "1", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.formatter_statistics": [[41, 49], ["statistics.pop", "statistics.items"], "methods", ["None"], ["", "def", "formatter_statistics", "(", "slef", ",", "statistics", ":", "dict", ")", "->", "str", ":", "\n", "        ", "statistics", "[", "\"ASL\"", "]", "/=", "statistics", "[", "\"#S\"", "]", "\n", "statistics", "[", "\"AEL\"", "]", "/=", "statistics", "[", "\"TE\"", "]", "\n", "statistics", "[", "\"%PT\"", "]", "/=", "statistics", "[", "\"#T\"", "]", "\n", "statistics", "[", "\"%AC\"", "]", "/=", "statistics", "[", "\"#S\"", "]", "\n", "statistics", "[", "\"%DAC\"", "]", "/=", "statistics", "[", "\"#S\"", "]", "\n", "statistics", ".", "pop", "(", "\"TE\"", ")", "\n", "return", "'\\t'", ".", "join", "(", "[", "f'{key}:{value}'", "for", "key", ",", "value", "in", "statistics", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.load_dataset": [[50, 74], ["os.path.join", "os.path.join", "data_loader.Preprocessor._load_from_file", "data_loader.Preprocessor._load_from_file", "DataPool.DataPool.DataPool"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._load_from_file", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._load_from_file"], ["", "def", "load_dataset", "(", "self", ",", "corpus_dir", ",", "name", ":", "str", ",", "entity_type", ":", "int", ",", "max_seq_len", "=", "64", ",", "\n", "statistics_report", ":", "str", "=", "None", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"Loads dataset from corpus_dir and returns a tuple\n        :param corpus_dir: directory of corpus\n        :param name: dataset name\n        :param entity_type: the number of the entity type\n        :param statistics_report: write statistics information to file or not\n        :return: (DataPool, evaluation_xs, evaluation_ys)\n        \"\"\"", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"train.txt\"", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"test.txt\"", ")", "\n", "\n", "annotated_labels", ",", "train_statistics", ",", "annotated_texts", "=", "self", ".", "_load_from_file", "(", "entity_type", ",", "name", "+", "\"-train\"", ",", "\n", "train_path", ",", "max_seq_len", ")", "\n", "eval_labels", ",", "eval_statistics", ",", "eval_texts", "=", "self", ".", "_load_from_file", "(", "entity_type", ",", "name", "+", "\"-test\"", ",", "test_path", ",", "\n", "max_seq_len", ")", "\n", "datapool", "=", "DataPool", "(", "annotated_texts", "=", "annotated_texts", ",", "annotated_labels", "=", "annotated_labels", ",", "\n", "unannotated_texts", "=", "[", "]", ",", "unannotated_labels", "=", "[", "]", ")", "\n", "# append statistics report to file.", "\n", "# if statistics_report is not None:", "\n", "# with open(statistics_report, 'a', encoding='utf8') as wf:", "\n", "# wf.write(f'{self.formatter_statistics(train_statistics)}\\n')", "\n", "# wf.write(f'{self.formatter_statistics(eval_statistics)}\\n')", "\n", "return", "datapool", ",", "eval_texts", ",", "eval_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._load_from_file": [[75, 95], ["open().readlines", "line.strip().split", "text.append", "label.append", "open", "len", "texts.append", "labels.append", "data_loader.Preprocessor.update_statistics", "len", "data_loader.Preprocessor.sentences_to_vec", "data_loader.Preprocessor.tags_to_vec", "line.strip"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.update_statistics", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.sentences_to_vec", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.tags_to_vec"], ["", "def", "_load_from_file", "(", "self", ",", "entity_type", ",", "name", ",", "train_path", ",", "max_seq_len", ")", ":", "\n", "        ", "lines", "=", "open", "(", "train_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", ".", "readlines", "(", ")", "\n", "texts", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "text", ",", "label", "=", "[", "]", ",", "[", "]", "\n", "statistics", "=", "{", "\"corpus_name\"", ":", "name", ",", "\"#E\"", ":", "entity_type", ",", "\"#S\"", ":", "0", ",", "\"#T\"", ":", "0", ",", "\n", "\"ASL\"", ":", "0", ",", "\"AEL\"", ":", "0", ",", "\"%PT\"", ":", "0", ",", "\"%AC\"", ":", "0", ",", "\"%DAC\"", ":", "0", ",", "\"TE\"", ":", "0", "}", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "<", "2", ":", "\n", "                ", "if", "len", "(", "text", ")", "<", "2", ":", "# To avoid empty lines", "\n", "                    ", "text", ",", "label", "=", "[", "]", ",", "[", "]", "\n", "continue", "\n", "", "texts", ".", "append", "(", "self", ".", "sentences_to_vec", "(", "text", ",", "max_seq_len", ")", ")", "\n", "labels", ".", "append", "(", "self", ".", "tags_to_vec", "(", "label", ",", "max_seq_len", ")", ")", "\n", "statistics", "=", "self", ".", "update_statistics", "(", "statistics", ",", "label", ")", "\n", "text", ",", "label", "=", "[", "]", ",", "[", "]", "\n", "continue", "\n", "", "char", ",", "tag", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "text", ".", "append", "(", "char", ")", "\n", "label", ".", "append", "(", "tag", ")", "\n", "", "return", "labels", ",", "statistics", ",", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.sentences_to_vec": [[96, 99], ["data_loader.Preprocessor.word_to_idx.get", "len"], "methods", ["None"], ["", "def", "sentences_to_vec", "(", "self", ",", "sentence", ",", "max_seq_len", "=", "64", ")", ":", "\n", "        ", "vec", "=", "[", "self", ".", "word_to_idx", ".", "get", "(", "word", ",", "self", ".", "OOV_IDX", ")", "for", "word", "in", "sentence", "[", ":", "max_seq_len", "]", "]", "\n", "return", "vec", "+", "[", "0", "]", "*", "(", "max_seq_len", "-", "len", "(", "vec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.tags_to_vec": [[100, 103], ["data_loader.Preprocessor.tag_to_idx.get", "len"], "methods", ["None"], ["", "def", "tags_to_vec", "(", "self", ",", "tags", ",", "max_seq_len", "=", "64", ")", ":", "\n", "        ", "vec", "=", "[", "self", ".", "tag_to_idx", ".", "get", "(", "tag", ")", "for", "tag", "in", "tags", "[", ":", "max_seq_len", "]", "]", "\n", "return", "vec", "+", "[", "0", "]", "*", "(", "max_seq_len", "-", "len", "(", "vec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.load_dataset_init": [[104, 130], ["os.path.join", "os.path.join", "data_loader.Preprocessor._load_from_file", "data_loader.Preprocessor._load_from_file", "numpy.random.choice", "DataPool.DataPool.DataPool", "numpy.arange", "set", "set", "len", "int", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._load_from_file", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor._load_from_file"], ["", "def", "load_dataset_init", "(", "self", ",", "corpus_dir", ",", "name", ":", "str", ",", "entity_type", ":", "int", ",", "choose_fraction", ":", "float", ",", "max_seq_len", "=", "64", ",", "\n", "statistics_report", ":", "str", "=", "None", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"Loads dataset from corpus_dir and returns a tuple\n        :param corpus_dir: directory of corpus\n        :param name: dataset name\n        :param entity_type: the number of the entity type\n        :param statistics_report: write statistics information to file or not\n        :return: (DataPool, evaluation_xs, evaluation_ys)\n        \"\"\"", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"train.txt\"", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "corpus_dir", ",", "\"test.txt\"", ")", "\n", "\n", "labels", ",", "train_statistics", ",", "texts", "=", "self", ".", "_load_from_file", "(", "entity_type", ",", "name", "+", "\"-train\"", ",", "\n", "train_path", ",", "max_seq_len", ")", "\n", "eval_labels", ",", "eval_statistics", ",", "eval_texts", "=", "self", ".", "_load_from_file", "(", "entity_type", ",", "name", "+", "\"-test\"", ",", "test_path", ",", "\n", "max_seq_len", ")", "\n", "annotated_idx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "size", "=", "int", "(", "choose_fraction", "*", "len", "(", "labels", ")", ")", ")", "\n", "un_annotated_idx", "=", "set", "(", "range", "(", "len", "(", "labels", ")", ")", ")", "-", "set", "(", "annotated_idx", ")", "\n", "\n", "datapool", "=", "DataPool", "(", "annotated_texts", "=", "[", "texts", "[", "idx", "]", "for", "idx", "in", "annotated_idx", "]", ",", "\n", "annotated_labels", "=", "[", "labels", "[", "idx", "]", "for", "idx", "in", "annotated_idx", "]", ",", "\n", "unannotated_texts", "=", "[", "texts", "[", "idx", "]", "for", "idx", "in", "un_annotated_idx", "]", ",", "\n", "unannotated_labels", "=", "[", "labels", "[", "idx", "]", "for", "idx", "in", "un_annotated_idx", "]", ")", "\n", "\n", "# append statistics report to file.", "\n", "return", "datapool", ",", "eval_texts", ",", "eval_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.__init__": [[11, 33], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "ValueError", "len", "len", "ValueError", "len", "len", "range", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "annotated_texts", ":", "list", ",", "annotated_labels", ":", "list", ",", "\n", "unannotated_texts", ":", "list", ",", "unannotated_labels", ":", "list", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        initialize DataPool object\n        :param annotated_texts: annotated samples' text, must equal to annotated_labels\n        :param annotated_labels: annotated samples' label, must equal to annotated_texts\n        :param unannotated_texts: unannotated samples' text, must equal to unannotated_labels if unannotated labels is not None\n        :param unannotated_labels: unannotated samples' label\n        \"\"\"", "\n", "if", "len", "(", "annotated_texts", ")", "!=", "len", "(", "annotated_labels", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"unequal of texts-{len(annotated_texts)} and labels-{len(annotated_labels)}\"", ")", "\n", "\n", "", "if", "unannotated_labels", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "unannotated_texts", ")", "!=", "len", "(", "unannotated_labels", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"unequal of texts-{len(unannotated_texts)} and labels-{len(annotated_labels)}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "unannotated_labels", "=", "[", "[", "\"O\"", "for", "j", "in", "range", "(", "len", "(", "i", ")", ")", "]", "for", "i", "in", "unannotated_texts", "]", "# make sure they have same length", "\n", "\n", "", "self", ".", "annotated_texts", "=", "np", ".", "array", "(", "annotated_texts", ")", "\n", "self", ".", "annotated_labels", "=", "np", ".", "array", "(", "annotated_labels", ")", "\n", "self", ".", "unannotated_texts", "=", "np", ".", "array", "(", "unannotated_texts", ")", "\n", "self", ".", "unannotated_labels", "=", "np", ".", "array", "(", "unannotated_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data": [[34, 40], ["None"], "methods", ["None"], ["", "def", "get_annotated_data", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        obtain all annotated data\n        :return: annotated_texts and corresponding labels\n        \"\"\"", "\n", "return", "self", ".", "annotated_texts", ",", "self", ".", "annotated_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data": [[41, 47], ["None"], "methods", ["None"], ["", "def", "get_unannotated_data", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        obtain all unannotated data\n        :return: unannotated_texts and corresponding laebls\n        \"\"\"", "\n", "return", "self", ".", "unannotated_texts", ",", "self", ".", "unannotated_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update": [[48, 136], ["ValueError", "ValueError", "len", "len", "ValueError", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.array", "ValueError", "len", "len", "ValueError", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.delete", "numpy.delete", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.delete", "numpy.delete", "numpy.array", "numpy.array", "numpy.concatenate", "range", "len", "len", "ValueError", "numpy.concatenate", "numpy.array", "numpy.concatenate", "len", "numpy.array"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "mode", ":", "str", ",", "annotated_texts", "=", "None", ",", "annotated_labels", "=", "None", ",", "\n", "unannotated_texts", "=", "None", ",", "unannotated_labels", "=", "None", ",", "selected_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Update the data in the data pool.\n\n        .. Example:\n        >>> texts =[''.join(random.choices(list(\"abcdefghijklmn\"), k=10)) for i in range(5)]\n        >>> labels = [random.choices(list(\"BIO\"), k=len(text)) for text in texts]\n        >>> data_pool.update(mode=\"append_annotated\", annotated_texts=texts, annotated_labels=labels)\n\n\n        :param mode: operation mode one of (\"append_annotated\", \"append_unannotated\", \"replace_annotated\",\n            \"replace_unannotated\", \"internal_exchange_a2u\", \"internal_exchange_u2a\")\n        :param annotated_texts: annotated samples' text, only works when `mode` is \"append_annotated\" and\n            \"replace_annotated\"\n        :param annotated_labels: annotated samples' label, only works when `mode` is \"append_annotated\",\n            \"replace_annotated\" and \"internal_exchange_a2u\"\n        :param unannotated_texts: unannotated samples' text, only works when `mode` is \"append_unannotated\" and\n            \"replace_unannotated\"\n        :param unannotated_labels: annotated samples' label, only works when `mode` is \"append_unannotated\",\n            \"replace_unannotated\" and \"internal_exchange_u2a\"\n        :param selected_idx: selected in-pool samples' idx, only works when `mode` is \"internal_exchange_u2a\" and\n            \"internal_exchange_a2u\"\n        :raise ValueError: when params length are not correct.\n        \"\"\"", "\n", "predefined_modes", "=", "(", "\"append_annotated\"", ",", "\"append_unannotated\"", ",", "\"replace_annotated\"", ",", "\n", "\"replace_unannotated\"", ",", "\"internal_exchange_a2u\"", ",", "\"internal_exchange_u2a\"", ")", "\n", "if", "mode", "not", "in", "predefined_modes", ":", "\n", "            ", "raise", "ValueError", "(", "f\"mode value must be one of {predefined_modes}\"", ")", "\n", "\n", "", "if", "mode", "==", "\"append_annotated\"", "or", "mode", "==", "\"replace_annotated\"", ":", "\n", "            ", "if", "annotated_texts", "is", "None", "or", "annotated_labels", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"In {mode} mode, annotated_texts and annotated_labels cannot be None\"", ")", "\n", "", "if", "len", "(", "annotated_texts", ")", "!=", "len", "(", "annotated_labels", ")", ":", "# make sure they have same length", "\n", "                ", "raise", "ValueError", "(", "\"annotated_labels and annotated_texts must have same length\"", ")", "\n", "", "self", ".", "annotated_texts", "=", "np", ".", "concatenate", "(", "(", "self", ".", "annotated_texts", ",", "np", ".", "array", "(", "annotated_texts", ")", ")", ")", "if", "mode", "==", "\"append_annotated\"", "else", "np", ".", "array", "(", "annotated_texts", ")", "\n", "\n", "self", ".", "annotated_labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "annotated_labels", ",", "np", ".", "array", "(", "annotated_labels", ")", ")", ")", "if", "mode", "==", "\"append_annotated\"", "else", "np", ".", "array", "(", "annotated_labels", ")", "\n", "\n", "", "elif", "mode", "==", "\"append_unannotated\"", "or", "mode", "==", "\"replace_unannotated\"", ":", "\n", "            ", "if", "unannotated_texts", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"In {mode} mode, unannotated_texts cannot be None\"", ")", "\n", "", "if", "unannotated_labels", "is", "None", ":", "\n", "                ", "unannotated_labels", "=", "[", "[", "\"O\"", "for", "j", "in", "range", "(", "len", "(", "i", ")", ")", "]", "for", "i", "in", "unannotated_texts", "]", "\n", "", "if", "len", "(", "unannotated_texts", ")", "!=", "len", "(", "unannotated_labels", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"unannotated_labels and unannotated_texts must have same length\"", ")", "\n", "\n", "", "self", ".", "unannotated_texts", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unannotated_texts", ",", "np", ".", "array", "(", "unannotated_texts", ")", ")", ")", "if", "mode", "==", "\"append_unannotated\"", "else", "np", ".", "array", "(", "unannotated_texts", ")", "\n", "self", ".", "unannotated_labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unannotated_labels", ",", "np", ".", "array", "(", "unannotated_labels", ")", ")", ")", "if", "mode", "==", "\"append_unannotated\"", "else", "np", ".", "array", "(", "unannotated_labels", ")", "\n", "\n", "", "elif", "mode", "==", "\"internal_exchange_a2u\"", ":", "\n", "# move samples from annotated database to unannotated database", "\n", "            ", "if", "self", ".", "unannotated_texts", ".", "shape", "[", "-", "1", "]", "!=", "0", ":", "\n", "                ", "self", ".", "unannotated_texts", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unannotated_texts", ",", "self", ".", "annotated_texts", "[", "selected_idx", "]", ")", ")", "\n", "self", ".", "unannotated_labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unannotated_labels", ",", "self", ".", "annotated_labels", "[", "selected_idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "unannotated_texts", "=", "self", ".", "annotated_texts", "[", "selected_idx", "]", "\n", "self", ".", "unannotated_labels", "=", "self", ".", "annotated_labels", "[", "selected_idx", "]", "\n", "# delete selected samples from annotated database", "\n", "", "self", ".", "annotated_texts", "=", "np", ".", "delete", "(", "self", ".", "annotated_texts", ",", "selected_idx", ",", "axis", "=", "0", ")", "\n", "self", ".", "annotated_labels", "=", "np", ".", "delete", "(", "self", ".", "annotated_labels", ",", "selected_idx", ",", "axis", "=", "0", ")", "\n", "\n", "", "elif", "mode", "==", "\"internal_exchange_u2a\"", ":", "\n", "            ", "if", "unannotated_labels", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "unannotated_labels", ")", "!=", "len", "(", "selected_idx", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"In {mode} mode, if unannotated_labels is not None, they must\"", "\n", "f\" have the same length as the selected_idx\"", ")", "\n", "", "if", "self", ".", "annotated_labels", ".", "shape", "[", "-", "1", "]", "!=", "0", ":", "\n", "                    ", "self", ".", "annotated_labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "annotated_labels", ",", "np", ".", "array", "(", "unannotated_labels", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "annotated_labels", "=", "np", ".", "array", "(", "unannotated_labels", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "annotated_labels", ".", "shape", "[", "-", "1", "]", "!=", "0", ":", "\n", "                    ", "self", ".", "annotated_labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "annotated_labels", ",", "self", ".", "unannotated_labels", "[", "selected_idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "annotated_labels", "=", "self", ".", "unannotated_labels", "[", "selected_idx", "]", "\n", "", "", "if", "self", ".", "annotated_labels", ".", "shape", "[", "-", "1", "]", "!=", "0", ":", "\n", "                ", "self", ".", "annotated_texts", "=", "np", ".", "concatenate", "(", "(", "self", ".", "annotated_texts", ",", "self", ".", "unannotated_texts", "[", "selected_idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "annotated_texts", "=", "self", ".", "unannotated_texts", "[", "selected_idx", "]", "\n", "# delete samples form unannotated database", "\n", "", "self", ".", "unannotated_texts", "=", "np", ".", "delete", "(", "self", ".", "unannotated_texts", ",", "selected_idx", ",", "axis", "=", "0", ")", "\n", "self", ".", "unannotated_labels", "=", "np", ".", "delete", "(", "self", ".", "unannotated_labels", ",", "selected_idx", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_total_number": [[137, 142], ["len", "len"], "methods", ["None"], ["", "", "def", "get_total_number", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Get total number of samples.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "annotated_texts", ")", "+", "len", "(", "self", ".", "unannotated_texts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.Reports.DatasetStatistics.statistics": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "statistics", "(", "self", ",", "texts", ",", "labels", ",", "func", ":", "Callable", "[", "[", "Any", ",", "Any", "]", ",", "dict", "]", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.entity_level_f1": [[17, 31], ["seqeval.metrics.f1_score", "seqeval.metrics.classification_report", "eval_index.EvaluationIndex.logger.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info"], ["", "def", "entity_level_f1", "(", "self", ",", "y_true", ",", "y_pred", ",", "digits", "=", "2", ",", "return_report", "=", "False", ",", "average", "=", "\"micro\"", ")", ":", "\n", "        ", "\"\"\"\n        entity-level-f1\n        :params golden_tags Tags given manually\n        :params predict_tags Prediction tags given by the model\n        :return f1 score\n        \"\"\"", "\n", "assert", "len", "(", "y_true", ")", "==", "len", "(", "y_pred", ")", "\n", "score", "=", "entity_metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "average", ")", "\n", "report", "=", "entity_metrics", ".", "classification_report", "(", "y_true", ",", "y_pred", ",", "digits", "=", "digits", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Classification report(Entity level):\\n{report}\"", ")", "\n", "if", "return_report", ":", "\n", "            ", "return", "score", ",", "report", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.sentence_level_accuracy": [[32, 43], ["sklearn.metrics.accuracy_score", "eval_index.EvaluationIndex.logger.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info"], ["", "def", "sentence_level_accuracy", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"\n        sentence-level accuracy:\n        :param y_true: golden_tags given manually\n        :param y_pred: predicted_tags given by the model\n        \"\"\"", "\n", "assert", "len", "(", "y_true", ")", "==", "len", "(", "y_pred", ")", "\n", "y_true", ",", "y_pred", "=", "[", "' '", ".", "join", "(", "y", ")", "for", "y", "in", "y_true", "]", ",", "[", "' '", ".", "join", "(", "y", ")", "for", "y", "in", "y_pred", "]", "\n", "score", "=", "sk_metrics", ".", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Sentence-level Accuracy: {score}\"", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._reading_cost": [[6, 13], ["numpy.mean", "float", "len"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "_reading_cost", "(", "cls", ",", "selected_samples", ":", "list", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        calculate average reading cost of selected samples\n        \"\"\"", "\n", "avg_reading_cost", "=", "np", ".", "mean", "(", "[", "len", "(", "sample", ")", "for", "sample", "in", "selected_samples", "]", ")", "\n", "return", "float", "(", "avg_reading_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._percentage_wrong_selection": [[14, 25], ["len", "sum", "len", "len", "zip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_percentage_wrong_selection", "(", "cls", ",", "y_true", ":", "list", ",", "y_pred", ":", "list", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Calculate percentage of unannotation needed samples\n        :param y_true: [B, L]\n        :param y_pred: [B, L]\n        \"\"\"", "\n", "assert", "len", "(", "y_pred", ")", "==", "len", "(", "y_true", ")", "\n", "choice_number", "=", "len", "(", "y_true", ")", "\n", "wrong_number", "=", "sum", "(", "1", "for", "t", ",", "p", "in", "zip", "(", "y_true", ",", "y_pred", ")", "if", "' '", ".", "join", "(", "t", ")", "!=", "' '", ".", "join", "(", "p", ")", ")", "\n", "return", "wrong_number", "/", "choice_number", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._annotation_cost": [[26, 38], ["zip", "len", "len", "len", "set", "set", "len", "len", "utils.utils.tagseq_to_entityseq", "utils.utils.tagseq_to_entityseq"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.tagseq_to_entityseq", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.tagseq_to_entityseq"], ["", "@", "classmethod", "\n", "def", "_annotation_cost", "(", "cls", ",", "y_true", ":", "list", ",", "y_pred", ":", "list", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Calculate the average annotation cost of seleced samples\n        \"\"\"", "\n", "assert", "len", "(", "y_true", ")", "==", "len", "(", "y_pred", ")", "\n", "annotation_cost", "=", "0", "\n", "for", "t", ",", "p", "in", "zip", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "t_set", ",", "p_set", "=", "set", "(", "tagseq_to_entityseq", "(", "t", ")", ")", ",", "set", "(", "tagseq_to_entityseq", "(", "p", ")", ")", "\n", "cost", "=", "len", "(", "t_set", "|", "p_set", ")", "-", "len", "(", "t_set", "&", "p_set", ")", "\n", "annotation_cost", "+=", "cost", "\n", "", "return", "annotation_cost", "/", "len", "(", "y_true", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.__init__": [[30, 45], ["modules.data_preprocess.data_loader.Preprocessor", "core.pipeline.Pipeline.__init__"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "preprocessor", "=", "Preprocessor", "(", "vocab", "=", "[", "]", ",", "tags", "=", "[", "]", ")", "\n", "self", ".", "datapool", "=", "None", "\n", "# TODO: Complete", "\n", "self", ".", "strategy", "=", "{", "\n", "\"RANDOM\"", ":", "RandomStrategy", ",", "\n", "\"LC\"", ":", "LeastConfidenceStrategy", ",", "\n", "\"NLC\"", ":", "NormalizedLeastConfidenceStrategy", ",", "\n", "\"LTP\"", ":", "LeastTokenProbabilityStrategy", ",", "\n", "\"MTP\"", ":", "MinimumTokenProbabilityStrategy", ",", "\n", "\"MTE\"", ":", "MaximumTokenEntropyStrategy", ",", "\n", "\"LONG\"", ":", "LongStrategy", ",", "\n", "\"TE\"", ":", "TokenEntropyStrategy", ",", "\n", "}", "\n", "super", "(", "Word2VecBiLSTMCRFALPipeline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.word_embedding": [[46, 83], ["Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "pickle.load", "list", "modules.data_preprocess.data_loader.Preprocessor", "numpy.random.uniform", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.preprocessor.load_dataset_init", "utils.utils.vec_to_tags", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "line.strip", "open", "pickle.load.keys", "numpy.sqrt", "os.path.join", "open().readlines", "numpy.sqrt", "len", "open"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.data_loader.Preprocessor.load_dataset_init", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.vec_to_tags", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info"], ["", "def", "word_embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Step 01\n        Embedding with word2vec.\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Step01 Begin: word embedding.\\n\"", ")", "\n", "\n", "all_word_embedding_path", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"all_word_embedding_path\"", ",", "type", "=", "\"filepath\"", ")", "\n", "courpus_file", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"courpus_file\"", ",", "type", "=", "\"dirpath\"", ")", "\n", "courpus_name", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"courpus_name\"", ",", "type", "=", "\"string\"", ")", "\n", "choose_fraction", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"choose_fraction\"", ",", "type", "=", "\"float\"", ")", "\n", "embedding_dim", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"embedding_dim\"", ",", "type", "=", "\"int\"", ")", "\n", "entity_type", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"entity_type\"", ",", "type", "=", "\"int\"", ")", "\n", "max_seq_len", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"max_seq_len\"", ",", "type", "=", "\"int\"", ")", "\n", "tags_file", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"tags_file\"", ",", "type", "=", "\"filepath\"", ")", "\n", "\n", "self", ".", "tags", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "tags_file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", ".", "readlines", "(", ")", "]", "\n", "self", ".", "labels", "=", "[", "label", "for", "label", "in", "self", ".", "tags", "if", "label", "not", "in", "[", "'O'", ",", "'[PAD]'", ",", "'[CLS]'", ",", "'[SEP]'", ",", "'X'", "]", "]", "\n", "all_words_embeds", "=", "pickle", ".", "load", "(", "open", "(", "all_word_embedding_path", ",", "'rb'", ")", ")", "\n", "vocab", "=", "list", "(", "all_words_embeds", ".", "keys", "(", ")", ")", "\n", "self", ".", "preprocessor", "=", "Preprocessor", "(", "vocab", "=", "vocab", ",", "tags", "=", "self", ".", "tags", ")", "\n", "\n", "self", ".", "word_embeds", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "sqrt", "(", "0.06", ")", ",", "np", ".", "sqrt", "(", "0.06", ")", ",", "\n", "(", "len", "(", "self", ".", "preprocessor", ".", "vocab", ")", ",", "embedding_dim", ")", ")", "\n", "\n", "for", "word", "in", "all_words_embeds", ":", "\n", "            ", "self", ".", "word_embeds", "[", "self", ".", "preprocessor", ".", "word_to_idx", "[", "word", "]", "]", "=", "all_words_embeds", "[", "word", "]", "\n", "\n", "", "self", ".", "datapool", ",", "self", ".", "eval_xs", ",", "self", ".", "eval_ys", "=", "self", ".", "preprocessor", ".", "load_dataset_init", "(", "courpus_file", ",", "courpus_name", ",", "\n", "entity_type", ",", "choose_fraction", ",", "\n", "max_seq_len", ",", "\n", "os", ".", "path", ".", "join", "(", "courpus_file", ",", "\n", "\"statistics.csv\"", ")", ")", "\n", "\n", "self", ".", "eval_ys", "=", "vec_to_tags", "(", "self", ".", "tags", ",", "self", ".", "eval_ys", ",", "max_seq_len", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Step01 Finish: word embedding.\\n\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.build_bilstm_crf": [[84, 133], ["Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.datapool.get_annotated_data", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "modules.model_train.bilstm_crf.BiLSTMCRF", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.to", "torch.Adam", "torch.Adam", "range", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.parameters", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.train", "tqdm.tqdm.tqdm", "enumerate", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.zero_grad", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.loss", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.backward", "torch.Adam.step", "tqdm.tqdm.tqdm.set_description", "xb.to", "yb.to"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_annotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.train_bilstm.train", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.model_train.crf.CRF.loss"], ["", "def", "build_bilstm_crf", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Step 02\n        Build BiLSTM+CRF Model.\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Step02 Begin: build bilstm crf.\\n\"", ")", "\n", "\n", "batch_size", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"batch_size\"", ",", "type", "=", "\"int\"", ")", "\n", "device", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"device\"", ",", "type", "=", "\"string\"", ")", "\n", "embedding_dim", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"embedding_dim\"", ",", "type", "=", "\"int\"", ")", "\n", "hidden_dim", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"hidden_dim\"", ",", "type", "=", "\"int\"", ")", "\n", "learning_rate", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"learning_rate\"", ",", "type", "=", "\"float\"", ")", "\n", "model_path_prefix", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"model_path_prefix\"", ",", "type", "=", "\"string\"", ")", "\n", "num_rnn_layers", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"num_rnn_layers\"", ",", "type", "=", "\"int\"", ")", "\n", "num_epoch", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"num_epoch\"", ",", "type", "=", "\"int\"", ")", "\n", "\n", "pre_step_name", "=", "'word_embedding'", "\n", "\n", "train_xs", ",", "train_ys", "=", "self", ".", "datapool", ".", "get_annotated_data", "(", ")", "\n", "train_xs", "=", "torch", ".", "from_numpy", "(", "train_xs", ")", ".", "int", "(", ")", "\n", "train_ys", "=", "torch", ".", "from_numpy", "(", "train_ys", ")", ".", "int", "(", ")", "\n", "train_dl", "=", "DataLoader", "(", "TensorDataset", "(", "train_xs", ",", "train_ys", ")", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "self", ".", "model", "=", "BiLSTMCRF", "(", "vocab_size", "=", "len", "(", "self", ".", "preprocessor", ".", "vocab", ")", ",", "\n", "tag_to_ix", "=", "self", ".", "preprocessor", ".", "tag_to_idx", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "pre_word_embed", "=", "self", ".", "word_embeds", ",", "\n", "num_rnn_layers", "=", "num_rnn_layers", ",", "\n", ")", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "weight_decay", "=", "0", ")", "\n", "info", "=", "\"\"", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "bar", "=", "tqdm", "(", "train_dl", ")", "\n", "for", "bi", ",", "(", "xb", ",", "yb", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "loss", "(", "xb", ".", "to", "(", "device", ")", ",", "yb", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "bar", ".", "set_description", "(", "f\"{epoch + 1:2d}/{num_epoch} loss: {loss:5.2f}\"", ")", "\n", "", "info", "+=", "f\"{epoch + 1:2d}/{num_epoch} loss: {loss:5.2f}\\n\"", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"{info}\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "model_path_prefix", "+", "\".pth\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Step02 Finish: bilstm crf.\\n\"", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.predict_eval": [[134, 175], ["Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.eval", "torch.from_numpy().int().to", "torch.from_numpy().int().to", "torch.from_numpy().int().to", "torch.from_numpy().int().to", "utils.utils.vec_to_tags", "modules.assessment.eval_index.EvaluationIndex", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "modules.assessment.eval_index.EvaluationIndex.sentence_level_accuracy", "print", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model", "modules.assessment.eval_index.EvaluationIndex.entity_level_f1", "print", "modules.assessment.eval_index.EvaluationIndex.entity_level_f1", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.eval", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.vec_to_tags", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.sentence_level_accuracy", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.entity_level_f1", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.eval_index.EvaluationIndex.entity_level_f1"], ["", "def", "predict_eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Step 03\n        Use training model to predict and evaluate\n        entity-level-F1\n        sentence-level-accuracy\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Step03 Begin: Predicting and evaluation.\\n\"", ")", "\n", "device", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"device\"", ",", "type", "=", "\"string\"", ")", "\n", "max_seq_len", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"max_seq_len\"", ",", "type", "=", "\"int\"", ")", "\n", "entity_digits", "=", "self", ".", "config", ".", "param", "(", "\"ENTITYLEVELF1\"", ",", "\"digits\"", ",", "type", "=", "\"int\"", ")", "\n", "entity_return_report", "=", "self", ".", "config", ".", "param", "(", "\"ENTITYLEVELF1\"", ",", "\"return_report\"", ",", "type", "=", "\"boolean\"", ")", "\n", "entity_average", "=", "self", ".", "config", ".", "param", "(", "\"ENTITYLEVELF1\"", ",", "\"average\"", ",", "type", "=", "\"string\"", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "eval_dl", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "eval_xs", ")", ")", ".", "int", "(", ")", ".", "to", "(", "device", ")", "\n", "scores", ",", "tag_seq", ",", "probs", "=", "None", ",", "None", ",", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "scores", ",", "tag_seq", ",", "probs", "=", "self", ".", "model", "(", "self", ".", "eval_dl", ")", "\n", "", "tag_seq", "=", "vec_to_tags", "(", "self", ".", "tags", ",", "tag_seq", ",", "max_seq_len", ")", "\n", "\n", "eval", "=", "EvaluationIndex", "(", "self", ".", "logger", ")", "\n", "\n", "if", "entity_return_report", ":", "\n", "            ", "entity_f1_score", ",", "entity_return_report", "=", "eval", ".", "entity_level_f1", "(", "self", ".", "eval_ys", ",", "tag_seq", ",", "\n", "entity_digits", ",", "entity_return_report", ",", "\n", "entity_average", ")", "\n", "print", "(", "f\"Classification report(Entity level):\\n{entity_return_report}\"", ")", "\n", "", "else", ":", "\n", "            ", "entity_f1_score", "=", "eval", ".", "entity_level_f1", "(", "self", ".", "eval_ys", ",", "tag_seq", ",", "entity_digits", ",", "\n", "entity_return_report", ",", "entity_average", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"Entity-level F1: {entity_f1_score}\"", ")", "\n", "\n", "sentence_ac_score", "=", "eval", ".", "sentence_level_accuracy", "(", "self", ".", "eval_ys", ",", "tag_seq", ")", "\n", "print", "(", "f\"Sentence-level Accuracy: {sentence_ac_score}\"", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"Step03 Finish: Predicting and evaluation.\\n\"", ")", "\n", "\n", "return", "entity_f1_score", ",", "sentence_ac_score", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.eval": [[176, 205], ["Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.datapool.get_unannotated_data", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.from_numpy().int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model.eval", "numpy.array", "numpy.array", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.model", "tag_seq_l.extend", "numpy.array.extend", "numpy.array.extend", "tag_seq_str.extend", "xs.to", "score.cpu().detach().numpy", "prob.cpu().detach().numpy", "score.tolist", "prob.tolist", "utils.utils.vec_to_tags", "score.cpu().detach", "prob.cpu().detach", "score.cpu", "prob.cpu"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.eval", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.vec_to_tags"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Step 03\n        Use training model to predict and evaluate\n        entity-level-F1\n        sentence-level-accuracy\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Step03 Begin: Predicting and evaluation.\\n\"", ")", "\n", "device", "=", "self", ".", "config", ".", "param", "(", "\"BiLSTMCRF\"", ",", "\"device\"", ",", "type", "=", "\"string\"", ")", "\n", "max_seq_len", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"max_seq_len\"", ",", "type", "=", "\"int\"", ")", "\n", "\n", "unannotated_texts", ",", "unannotated_labels", "=", "self", ".", "datapool", ".", "get_unannotated_data", "(", ")", "\n", "unannotated_texts", "=", "torch", ".", "from_numpy", "(", "unannotated_texts", ")", ".", "int", "(", ")", "\n", "unannotated_labels", "=", "torch", ".", "from_numpy", "(", "unannotated_labels", ")", ".", "int", "(", ")", "\n", "eval_dl", "=", "DataLoader", "(", "TensorDataset", "(", "unannotated_texts", ",", "unannotated_labels", ")", ",", "64", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "scores", ",", "tag_seq_l", ",", "probs", ",", "tag_seq_str", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "bar", "=", "tqdm", "(", "eval_dl", ")", "\n", "for", "bi", ",", "(", "xs", ",", "ys", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "                ", "score", ",", "tag_seq", ",", "prob", "=", "self", ".", "model", "(", "xs", ".", "to", "(", "device", ")", ")", "\n", "score", ",", "prob", "=", "score", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "prob", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tag_seq_l", ".", "extend", "(", "tag_seq", ")", "\n", "scores", ".", "extend", "(", "score", ".", "tolist", "(", ")", ")", "\n", "probs", ".", "extend", "(", "prob", ".", "tolist", "(", ")", ")", "\n", "tag_seq_str", ".", "extend", "(", "vec_to_tags", "(", "self", ".", "tags", ",", "tag_seq", ",", "max_seq_len", ")", ")", "\n", "", "", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "return", "scores", ",", "tag_seq_l", ",", "probs", ",", "tag_seq_str", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.active_learning": [[206, 237], ["Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.lower", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.config.param", "int", "range", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.build_bilstm_crf", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.predict_eval", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.eval", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.datapool.get_unannotated_data", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.select_idx", "utils.utils.vec_to_tags", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.datapool.update", "modules.assessment.sample_metrics.SampleMetrics._reading_cost", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "modules.assessment.sample_metrics.SampleMetrics._annotation_cost", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "modules.assessment.sample_metrics.SampleMetrics._percentage_wrong_selection", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.datapool.get_total_number", "utils.utils.vec_to_tags.tolist"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.build_bilstm_crf", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.predict_eval", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.eval", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_unannotated_data", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.select_strategy.ALStrategy.TokenEntropyStrategy.select_idx", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.utils.vec_to_tags", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._reading_cost", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._annotation_cost", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.assessment.sample_metrics.SampleMetrics._percentage_wrong_selection", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.info", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.get_total_number"], ["", "def", "active_learning", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "\"Begin active_learning.\"", ")", "\n", "strategy", "=", "self", ".", "config", ".", "param", "(", "\"ActiveStrategy\"", ",", "\"strategy\"", ",", "type", "=", "\"string\"", ")", "\n", "strategy_name", "=", "strategy", ".", "lower", "(", ")", "\n", "stop_echo", "=", "self", ".", "config", ".", "param", "(", "\"ActiveStrategy\"", ",", "\"stop_echo\"", ",", "type", "=", "\"int\"", ")", "\n", "query_batch_fraction", "=", "self", ".", "config", ".", "param", "(", "\"ActiveStrategy\"", ",", "\"query_batch_fraction\"", ",", "type", "=", "\"float\"", ")", "\n", "max_seq_len", "=", "self", ".", "config", ".", "param", "(", "\"WORD2VEC\"", ",", "\"max_seq_len\"", ",", "type", "=", "\"int\"", ")", "\n", "choice_number", "=", "int", "(", "self", ".", "datapool", ".", "get_total_number", "(", ")", "*", "query_batch_fraction", ")", "\n", "strategy", "=", "self", ".", "strategy", "[", "strategy", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "stop_echo", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "f\"[No. {i + 1}/{stop_echo}] ActiveStrategy:{strategy}, BatchFraction: {query_batch_fraction}\\n\"", ")", "\n", "self", ".", "build_bilstm_crf", "(", ")", "\n", "entity_f1_score", ",", "sentence_ac_score", "=", "self", ".", "predict_eval", "(", ")", "\n", "scores", ",", "tag_seq", ",", "probs", ",", "tag_seq_str", "=", "self", ".", "eval", "(", ")", "\n", "_", ",", "unannotated_labels", "=", "self", ".", "datapool", ".", "get_unannotated_data", "(", ")", "\n", "idx", "=", "strategy", ".", "select_idx", "(", "choices_number", "=", "choice_number", ",", "probs", "=", "probs", ",", "scores", "=", "scores", ",", "best_path", "=", "tag_seq", ")", "\n", "selected_samples", "=", "unannotated_labels", "[", "idx", "]", "\n", "selected_samples", "=", "vec_to_tags", "(", "self", ".", "tags", ",", "selected_samples", ".", "tolist", "(", ")", ",", "max_seq_len", ")", "\n", "tag_seq_str", "=", "[", "tag_seq_str", "[", "id", "]", "for", "id", "in", "idx", "]", "\n", "# update datapool", "\n", "self", ".", "datapool", ".", "update", "(", "mode", "=", "\"internal_exchange_u2a\"", ",", "selected_idx", "=", "idx", ")", "\n", "_reading_cost", "=", "SampleMetrics", ".", "_reading_cost", "(", "selected_samples", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Reading Cost is {_reading_cost}\"", ")", "\n", "_annotation_cost", "=", "SampleMetrics", ".", "_annotation_cost", "(", "selected_samples", ",", "tag_seq_str", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Annotation Cost is {_annotation_cost}\"", ")", "\n", "_wrong_select", "=", "SampleMetrics", ".", "_percentage_wrong_selection", "(", "selected_samples", ",", "tag_seq_str", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Wrong Selected percentage: {_wrong_select}\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{strategy_name},{i},{entity_f1_score},{sentence_ac_score},{_reading_cost},{_annotation_cost},{_wrong_select}\"", ")", "\n", "del", "self", ".", "model", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.pipelines.Word2VecBiLSTMCRFALPipeline.Word2VecBiLSTMCRFALPipeline.tasks": [[238, 243], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "tasks", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "word_embedding", ",", "\n", "self", ".", "active_learning", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.__init__": [[6, 8], ["configparser.SafeConfigParser.__init__"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "configparser", ".", "SafeConfigParser", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.parse_files": [[9, 19], ["config.Config.read_file"], "methods", ["None"], ["", "def", "parse_files", "(", "self", ",", "config_files", ")", ":", "\n", "        ", "\"\"\"\n        Parse configuration file\n        :params config_files:\n        \"\"\"", "\n", "self", ".", "optionxform", "=", "str", "\n", "for", "config_file", "in", "config_files", ":", "\n", "            ", "self", ".", "read_file", "(", "config_file", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.param": [[20, 63], ["config.Config.has_option", "config.Config.has_section", "Exception", "config.Config.getint", "Exception", "config.Config.getfloat", "config.Config.getboolean", "config.Config.get", "os.path.expandvars", "os.path.isfile", "config.Config.get", "Exception", "os.path.expandvars", "os.path.isdir", "Exception", "config.Config.get", "Exception"], "methods", ["None"], ["", "def", "param", "(", "self", ",", "section", ",", "option", ",", "required", "=", "True", ",", "type", "=", "'string'", ")", ":", "\n", "        ", "\"\"\"\n        Parse the value of the option under the given section\n        :param section\n        :param option\n        :param required:default True\n        :param type:default string (It may need to be improved)\n        \"\"\"", "\n", "section_choose", "=", "section", "\n", "\n", "if", "not", "self", ".", "has_section", "(", "section", ")", ":", "\n", "            ", "section", "=", "'DEFAULT'", "\n", "\n", "", "if", "self", ".", "has_option", "(", "section", ",", "option", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "type", "==", "'int'", ":", "\n", "                    ", "return", "self", ".", "getint", "(", "section", ",", "option", ")", "\n", "", "elif", "type", "==", "'float'", ":", "\n", "                    ", "return", "self", ".", "getfloat", "(", "section", ",", "option", ")", "\n", "", "elif", "type", "==", "'boolean'", ":", "\n", "                    ", "return", "self", ".", "getboolean", "(", "section", ",", "option", ")", "\n", "", "elif", "type", "==", "'string'", ":", "\n", "                    ", "return", "self", ".", "get", "(", "section", ",", "option", ")", "\n", "", "elif", "type", "==", "'filepath'", ":", "\n", "                    ", "value", "=", "os", ".", "path", ".", "expandvars", "(", "self", ".", "get", "(", "section", ",", "option", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "value", ")", ":", "\n", "                        ", "return", "value", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "f'[config.py]--[ERROR]: File path: \\\"{value}\\\" does not exist or is not a valid regular file!'", ")", "\n", "", "", "elif", "type", "==", "'dirpath'", ":", "\n", "                    ", "value", "=", "os", ".", "path", ".", "expandvars", "(", "self", ".", "get", "(", "section", ",", "option", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "value", ")", ":", "\n", "                        ", "return", "value", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "f'[config.py]--[ERROR]: Directory path:\\\"{value}\\\" does not exist or is not a valid directory!'", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"Unknown parameter type '\"", "+", "type", "+", "\"'\"", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "f'parameter \\\"{section}.{option}\\\" is invalid !\\n'", ")", "\n", "", "", "elif", "required", ":", "\n", "            ", "raise", "Exception", "(", "f'parameter \\\"{section_choose}.{option}\\\" is not defined in config file(s)!'", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.__init__": [[20, 76], ["datetime.datetime.now().strftime", "pipeline.Pipeline.argparser.parse_args", "core.config.Config", "print", "pipeline.Pipeline._argparser.exit", "datetime.datetime.now", "pipeline.Pipeline.config.parse_files", "utils.logger.Logger", "pipeline.Pipeline.argparser.error", "core.task.Task", "re.search", "pipeline.Pipeline.logger.error", "Exception", "pipeline.Pipeline.logger.warning", "task_choose.submit_task", "pipeline.Pipeline.logger.error", "Exception", "pipeline.Pipeline.args.project.isdigit", "pipeline.Pipeline.logger.error", "Exception", "pipeline.Pipeline._argparser.format_help", "textwrap.dedent", "pipeline.parse_task_range", "enumerate", "textwrap.dedent", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.config.Config.parse_files", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.warning", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.submit_task", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error", "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.parse_task_range"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%dT%H:%M:%S\"", ")", "\n", "self", ".", "_args", "=", "self", ".", "argparser", ".", "parse_args", "(", ")", "\n", "self", ".", "_config", "=", "Config", "(", ")", "\n", "if", "self", ".", "args", ".", "help", ":", "\n", "            ", "print", "(", "\"\"\"\\\n[TOC]\n\n{pipeline_doc}\n\nUsage\n-----\n```\n#!text\n\n{help}\n```\n{task_doc}\n\"\"\"", ".", "format", "(", "\n", "pipeline_doc", "=", "textwrap", ".", "dedent", "(", "self", ".", "__doc__", ")", "if", "self", ".", "__doc__", "else", "\"\"", ",", "\n", "help", "=", "self", ".", "_argparser", ".", "format_help", "(", ")", ",", "\n", "task_doc", "=", "\"\\n\"", ".", "join", "(", "[", "str", "(", "idx", "+", "1", ")", "+", "\"- \"", "+", "task", ".", "__name__", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "str", "(", "idx", "+", "1", ")", "+", "\"- \"", "+", "task", ".", "__name__", ")", "+", "(", "textwrap", ".", "dedent", "(", "task", ".", "__doc__", ")", "if", "task", ".", "__doc__", "else", "\"\"", ")", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", "]", ")", "\n", ")", ")", "\n", "self", ".", "_argparser", ".", "exit", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "config", ":", "\n", "                ", "self", ".", "config", ".", "parse_files", "(", "self", ".", "args", ".", "config", ")", "\n", "self", ".", "logger", "=", "Logger", "(", "__name__", ",", "config", "=", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "argparser", ".", "error", "(", "\"argument -c/--config is required!\"", ")", "\n", "\n", "", "self", ".", "_task_list", "=", "[", "Task", "(", "task", ",", "self", ".", "logger", ")", "for", "task", "in", "self", ".", "tasks", "]", "\n", "\n", "if", "self", ".", "args", ".", "tasks", ":", "\n", "                ", "if", "re", ".", "search", "(", "\"^\\d+([,-]\\d+)*$\"", ",", "self", ".", "args", ".", "tasks", ")", ":", "\n", "                    ", "self", ".", "_task_range", "=", "[", "self", ".", "task_list", "[", "i", "-", "1", "]", "for", "i", "in", "parse_task_range", "(", "self", ".", "args", ".", "tasks", ")", "]", "\n", "", "else", ":", "\n", "                    ", "error_tips", "=", "f\"[pipeline.py]--[ERROR]: task range \\\" {self.args.tasks} \\\" is invalid (should match \\d+([,-]\\d+)*)!\"", "\n", "self", ".", "logger", ".", "error", "(", "error_tips", ")", "\n", "raise", "Exception", "(", "error_tips", ")", "\n", "", "", "else", ":", "\n", "                ", "error_tips", "=", "\"[pipeline.py]--[ERROR]: argument -t/--tasks is required!\"", "\n", "self", ".", "logger", ".", "error", "(", "error_tips", ")", "\n", "raise", "Exception", "(", "error_tips", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "project", ":", "\n", "                ", "if", "not", "self", ".", "args", ".", "project", ".", "isdigit", "(", ")", ":", "\n", "                    ", "error_tips", "=", "f\"[pipeline.py]--[ERROR]: project id \\\" {self.args.project} \\\" is invalid (should be 5 bit int)!\"", "\n", "self", ".", "logger", ".", "error", "(", "error_tips", ")", "\n", "raise", "Exception", "(", "error_tips", ")", "\n", "", "self", ".", "project", "=", "self", ".", "args", ".", "project", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"[pipeline.py]--[WARNING]: argument --project is not given!\"", ")", "\n", "\n", "", "for", "task_choose", "in", "self", ".", "task_range", ":", "\n", "                ", "task_choose", ".", "submit_task", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.argparser": [[77, 88], ["hasattr", "utils.arg_parser.get_pipeline_arg_parser", "enumerate", "str"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.arg_parser.get_pipeline_arg_parser"], ["", "", "", "@", "property", "\n", "def", "argparser", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_argparser\"", ")", ":", "\n", "            ", "epilog", "=", "\"\"\"\\\nTasks:\n------\n{tasks}\n\"\"\"", ".", "format", "(", "tasks", "=", "\"\\n\"", ".", "join", "(", "[", "str", "(", "idx", "+", "1", ")", "+", "\"- \"", "+", "task", ".", "__name__", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", "]", ")", ")", "\n", "\n", "self", ".", "_argparser", "=", "get_pipeline_arg_parser", "(", "epilog", ")", "\n", "return", "self", ".", "_argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.config": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.args": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_args", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.timestamp": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "timestamp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.tasks": [[107, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tasks", "(", "self", ")", ":", "\n", "# Needs to be defined in pipeline child class", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.task_list": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "task_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_task_list", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.Pipeline.task_range": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "task_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_task_range", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.pipeline.parse_task_range": [[121, 132], ["set", "task_range.split", "sorted", "part.split", "set.update", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.data_preprocess.DataPool.DataPool.update"], ["", "", "def", "parse_task_range", "(", "task_range", ")", ":", "\n", "    ", "'''\n    Return a range list given a string.\n    :param astr:The value of the parameter: -s\n    e.g. parse_task_range('1,3,5-7') returns [1, 3, 5, 6, 7]\n    '''", "\n", "result", "=", "set", "(", ")", "\n", "for", "part", "in", "task_range", ".", "split", "(", "','", ")", ":", "\n", "        ", "x", "=", "part", ".", "split", "(", "'-'", ")", "\n", "result", ".", "update", "(", "range", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "-", "1", "]", ")", "+", "1", ")", ")", "\n", "", "return", "sorted", "(", "result", ")", "", "", ""]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.__init__": [[5, 16], ["re.search", "logger.error", "Exception"], "methods", ["home.repos.pwc.inspect_result.HIT-ICES_AL-NER.utils.logger.Logger.error"], ["    ", "def", "__init__", "(", "self", ",", "task_def", ",", "logger", ")", ":", "\n", "        ", "task_name", "=", "task_def", ".", "__name__", "\n", "if", "re", ".", "search", "(", "\"^[a-zA-Z]\\w+$\"", ",", "task_name", ")", ":", "\n", "            ", "self", ".", "_name", "=", "task_name", "\n", "", "else", ":", "\n", "            ", "error_tips", "=", "f\"[task.py]--[ERROR]: task name \\\" {task_name} \\\" is invalid (should match [a-zA-Z][a-zA-Z0-9_]+)!\"", "\n", "logger", ".", "error", "(", "error_tips", ")", "\n", "raise", "Exception", "(", "error_tips", ")", "\n", "\n", "", "self", ".", "_name", "=", "task_name", "\n", "self", ".", "_task_def", "=", "task_def", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.name": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.HIT-ICES_AL-NER.core.task.Task.submit_task": [[21, 24], ["task.Task._task_def"], "methods", ["None"], ["", "def", "submit_task", "(", "self", ")", ":", "\n", "        ", "self", ".", "_task_def", "(", ")", "\n", "return", "\n", "", "", ""]]}