{"home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender.__init__": [[47, 75], ["torch.device", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "n_iter", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "l2", "=", "None", ",", "\n", "neg_samples", "=", "None", ",", "\n", "learning_rate", "=", "None", ",", "\n", "use_cuda", "=", "False", ",", "\n", "checkpoint", "=", "None", ",", "\n", "model_args", "=", "None", ")", ":", "\n", "\n", "# model related", "\n", "        ", "self", ".", "_num_items", "=", "None", "\n", "self", ".", "_num_users", "=", "None", "\n", "self", ".", "_net", "=", "None", "\n", "self", ".", "model_args", "=", "model_args", "\n", "\n", "# learning related", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_n_iter", "=", "n_iter", "\n", "self", ".", "_learning_rate", "=", "learning_rate", "\n", "self", ".", "_l2", "=", "l2", "\n", "self", ".", "_neg_samples", "=", "neg_samples", "\n", "self", ".", "_device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "\n", "# rank evaluation related", "\n", "self", ".", "test_sequence", "=", "None", "\n", "self", ".", "_candidate", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._initialized": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_net", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._initialize": [[80, 94], ["caser.Caser", "torch.Adam", "train_caser.Recommender._net.parameters"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ",", "interactions", ")", ":", "\n", "        ", "self", ".", "_num_items", "=", "interactions", ".", "num_items", "\n", "self", ".", "_num_users", "=", "interactions", ".", "num_users", "\n", "\n", "self", ".", "test_sequence", "=", "interactions", ".", "test_sequences", "\n", "\n", "self", ".", "_net", "=", "Caser", "(", "self", ".", "_num_users", ",", "\n", "self", ".", "_num_items", ",", "\n", "self", ".", "model_args", ")", "\n", "\n", "self", ".", "_optimizer", "=", "optim", ".", "Adam", "(", "\n", "self", ".", "_net", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "_l2", ",", "\n", "lr", "=", "self", ".", "_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender.fit": [[95, 218], ["train.sequences.user_ids.reshape", "print", "print", "range", "train_caser._save_checkpoint", "train_caser.Recommender._initialize", "print", "torch.load", "train_caser.Recommender._net.load_state_dict", "train_caser.Recommender._optimizer.load_state_dict", "print", "time.time.time", "train_caser.Recommender._net.train", "train_caser.Recommender._net.to", "utils.shuffle", "train_caser.Recommender._generate_negative_samples", "enumerate", "time.time.time", "utils.compute_model_size", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "users.to", "sequences.to", "targets.to", "negatives.to", "utils.minibatch", "torch.cat", "train_caser.Recommender._net", "torch.split", "train_caser.Recommender._optimizer.zero_grad", "losses.sigmoid_log_loss", "losses.sigmoid_log_loss.item", "losses.sigmoid_log_loss.backward", "train_caser.Recommender._optimizer.step", "evaluation.evaluate_ranking", "print", "print", "train_caser.Recommender._net.state_dict", "train_caser.Recommender._optimizer.state_dict", "tuple", "tuple", "tuple", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "batch_targets.size", "batch_negatives.size", "np.mean", "np.mean", "np.mean", "time.time.time", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser._save_checkpoint", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._initialize", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.shuffle", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._generate_negative_samples", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.compute_model_size", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.minibatch", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.losses.sigmoid_log_loss", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation.evaluate_ranking"], ["", "def", "fit", "(", "self", ",", "train", ",", "test", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The general training loop to fit the model\n\n        Parameters\n        ----------\n\n        train: :class:`interactions.Interactions`\n            training instances, also contains test sequences\n        test: :class:`interactions.Interactions`\n            only contains targets for test sequences\n        verbose: bool, optional\n            print the logs\n        \"\"\"", "\n", "\n", "# convert sequences, targets and users to numpy arrays", "\n", "sequences_np", "=", "train", ".", "sequences", ".", "sequences", "\n", "targets_np", "=", "train", ".", "sequences", ".", "targets", "\n", "users_np", "=", "train", ".", "sequences", ".", "user_ids", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "L", ",", "T", "=", "train", ".", "sequences", ".", "L", ",", "train", ".", "sequences", ".", "T", "\n", "\n", "n_train", "=", "sequences_np", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "'total training instances: %d'", "%", "n_train", ")", "\n", "\n", "if", "not", "self", ".", "_initialized", ":", "\n", "            ", "self", ".", "_initialize", "(", "train", ")", "\n", "\n", "", "start_epoch", "=", "1", "\n", "if", "self", ".", "checkpoint", ":", "\n", "            ", "print", "(", "\"loading checkpoint from %s\"", "%", "self", ".", "checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "checkpoint", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch_num'", "]", "\n", "self", ".", "_net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"loaded checkpoint %s (epoch %d)\"", "%", "(", "self", ".", "checkpoint", ",", "start_epoch", ")", ")", "\n", "\n", "# compute number of parameters", "\n", "", "print", "(", "\"Number of params: %d\"", "%", "compute_model_size", "(", "self", ".", "_net", ")", ")", "\n", "\n", "for", "epoch_num", "in", "range", "(", "start_epoch", ",", "self", ".", "_n_iter", "+", "1", ")", ":", "\n", "\n", "            ", "t1", "=", "time", "(", ")", "\n", "\n", "# set model to training model and move it to the corresponding devices", "\n", "self", ".", "_net", ".", "train", "(", ")", "\n", "self", ".", "_net", "=", "self", ".", "_net", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "users_np", ",", "sequences_np", ",", "targets_np", "=", "shuffle", "(", "users_np", ",", "\n", "sequences_np", ",", "\n", "targets_np", ")", "\n", "\n", "negatives_np", "=", "self", ".", "_generate_negative_samples", "(", "users_np", ",", "train", ",", "n", "=", "self", ".", "_neg_samples", ")", "\n", "\n", "# convert numpy arrays to PyTorch tensors and move it to the corresponding devices", "\n", "users", ",", "sequences", ",", "targets", ",", "negatives", "=", "(", "torch", ".", "from_numpy", "(", "users_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "sequences_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "targets_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "negatives_np", ")", ".", "long", "(", ")", ")", "\n", "\n", "users", ",", "sequences", ",", "targets", ",", "negatives", "=", "(", "users", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "sequences", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "targets", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "negatives", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "\n", "for", "(", "minibatch_num", ",", "\n", "(", "batch_users", ",", "\n", "batch_sequences", ",", "\n", "batch_targets", ",", "\n", "batch_negatives", ")", ")", "in", "enumerate", "(", "minibatch", "(", "users", ",", "\n", "sequences", ",", "\n", "targets", ",", "\n", "negatives", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ")", ")", ":", "\n", "# concatenate all variables to get predictions in one run", "\n", "                ", "items_to_predict", "=", "torch", ".", "cat", "(", "(", "batch_targets", ",", "batch_negatives", ")", ",", "1", ")", "\n", "items_prediction", "=", "self", ".", "_net", "(", "batch_sequences", ",", "\n", "batch_users", ",", "\n", "items_to_predict", ")", "\n", "\n", "(", "targets_prediction", ",", "\n", "negatives_prediction", ")", "=", "torch", ".", "split", "(", "items_prediction", ",", "[", "batch_targets", ".", "size", "(", "1", ")", ",", "\n", "batch_negatives", ".", "size", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "# compute the binary cross-entropy loss", "\n", "loss", "=", "sigmoid_log_loss", "(", "targets_prediction", ",", "negatives_prediction", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "/=", "minibatch_num", "+", "1", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "if", "verbose", "and", "epoch_num", "%", "10", "==", "0", ":", "\n", "                ", "precision", ",", "recall", ",", "ndcg", ",", "mean_aps", "=", "evaluate_ranking", "(", "self", ",", "test", ",", "train", ",", "k", "=", "[", "3", ",", "5", ",", "10", "]", ")", "\n", "str_precs", "=", "\"precisions=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "precision", "]", ")", "\n", "str_recalls", "=", "\"recalls=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "recall", "]", ")", "\n", "str_ndcgs", "=", "\"ndcgs=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "ndcg", "]", ")", "\n", "\n", "output_str", "=", "\"Epoch %d [%.1f s]\\tloss=%.4f, \"", "\"map=%.4f, %s, %s, %s[%.1f s]\"", "%", "(", "epoch_num", ",", "t2", "-", "t1", ",", "\n", "epoch_loss", ",", "\n", "mean_aps", ",", "str_precs", ",", "str_recalls", ",", "str_ndcgs", ",", "\n", "time", "(", ")", "-", "t2", ")", "\n", "print", "(", "output_str", ")", "\n", "", "else", ":", "\n", "                ", "output_str", "=", "\"Epoch %d [%.1f s]\\tloss=%.4f [%.1f s]\"", "%", "(", "epoch_num", ",", "\n", "t2", "-", "t1", ",", "\n", "epoch_loss", ",", "\n", "time", "(", ")", "-", "t2", ")", "\n", "print", "(", "output_str", ")", "\n", "\n", "", "", "_save_checkpoint", "(", "{", "\n", "'epoch_num'", ":", "epoch_num", ",", "\n", "'state_dict'", ":", "self", ".", "_net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "'checkpoints/gowalla-caser-dim=%d.pth.tar'", "%", "self", ".", "model_args", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._generate_negative_samples": [[219, 251], ["users.squeeze", "np.zeros", "enumerate", "interactions.tocsr", "enumerate", "range", "np.arange", "list", "set", "set", "np.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocsr"], ["", "def", "_generate_negative_samples", "(", "self", ",", "users", ",", "interactions", ",", "n", ")", ":", "\n", "        ", "\"\"\"\n        Sample negative from a candidate set of each user. The\n        candidate set of each user is defined by:\n        {All Items} \\ {Items Rated by User}\n\n        Parameters\n        ----------\n\n        users: array of np.int64\n            sequence users\n        interactions: :class:`interactions.Interactions`\n            training instances, used for generate candidates\n        n: int\n            total number of negatives to sample for each sequence\n        \"\"\"", "\n", "\n", "users_", "=", "users", ".", "squeeze", "(", ")", "\n", "negative_samples", "=", "np", ".", "zeros", "(", "(", "users_", ".", "shape", "[", "0", "]", ",", "n", ")", ",", "np", ".", "int64", ")", "\n", "if", "not", "self", ".", "_candidate", ":", "\n", "            ", "all_items", "=", "np", ".", "arange", "(", "interactions", ".", "num_items", "-", "1", ")", "+", "1", "# 0 for padding", "\n", "train", "=", "interactions", ".", "tocsr", "(", ")", "\n", "for", "user", ",", "row", "in", "enumerate", "(", "train", ")", ":", "\n", "                ", "self", ".", "_candidate", "[", "user", "]", "=", "list", "(", "set", "(", "all_items", ")", "-", "set", "(", "row", ".", "indices", ")", ")", "\n", "\n", "", "", "for", "i", ",", "u", "in", "enumerate", "(", "users_", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "x", "=", "self", ".", "_candidate", "[", "u", "]", "\n", "negative_samples", "[", "i", ",", "j", "]", "=", "x", "[", "\n", "np", ".", "random", ".", "randint", "(", "len", "(", "x", ")", ")", "]", "\n", "\n", "", "", "return", "negative_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender.predict": [[252, 297], ["model.eval", "ValueError", "torch.no_grad", "np.atleast_2d", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model", "utils.cpu().numpy().flatten", "np.arange().reshape", "np.atleast_2d.astype().reshape", "np.arange().reshape.astype", "np.array().astype", "torch.from_numpy.to", "torch.from_numpy.to", "np.arange().reshape.to", "utils.cpu().numpy", "np.arange", "np.atleast_2d.astype", "np.array", "utils.cpu"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.cpu"], ["", "def", "predict", "(", "self", ",", "user_id", ",", "item_ids", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Make predictions for evaluation: given a user id, it will\n        first retrieve the test sequence associated with that user\n        and compute the recommendation scores for items.\n\n        Parameters\n        ----------\n\n        user_id: int\n           users id for which prediction scores needed.\n        item_ids: array, optional\n            Array containing the item ids for which prediction scores\n            are desired. If not supplied, predictions for all items\n            will be computed.\n        \"\"\"", "\n", "\n", "if", "self", ".", "test_sequence", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Missing test sequences, cannot make predictions'", ")", "\n", "", "if", "model", "is", "None", ":", "\n", "            ", "model", "=", "self", ".", "_net", "\n", "\n", "# set model to evaluation model", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sequences_np", "=", "self", ".", "test_sequence", ".", "sequences", "[", "user_id", ",", ":", "]", "\n", "sequences_np", "=", "np", ".", "atleast_2d", "(", "sequences_np", ")", "\n", "\n", "if", "item_ids", "is", "None", ":", "\n", "                ", "item_ids", "=", "np", ".", "arange", "(", "self", ".", "_num_items", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "sequences", "=", "torch", ".", "from_numpy", "(", "sequences_np", ".", "astype", "(", "np", ".", "int64", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "item_ids", "=", "torch", ".", "from_numpy", "(", "item_ids", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "user_id", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "user_id", "]", "]", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "\n", "user", ",", "sequences", ",", "items", "=", "(", "user_id", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "sequences", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "item_ids", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "\n", "out", "=", "model", "(", "sequences", ",", "\n", "user", ",", "\n", "items", ",", "\n", "for_pred", "=", "True", ")", "\n", "\n", "return", "cpu", "(", "out", ".", "data", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser._save_checkpoint": [[13, 16], ["print", "torch.save"], "function", ["None"], ["def", "_save_checkpoint", "(", "state", ",", "filename", ")", ":", "\n", "    ", "print", "(", "\"Saving checkpoint to %s.\"", "%", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender.__init__": [[65, 117], ["torch.device", "torch.device", "torch.device", "torch.device", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "n_iter", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "l2", "=", "None", ",", "\n", "neg_samples", "=", "None", ",", "\n", "learning_rate", "=", "None", ",", "\n", "use_cuda", "=", "False", ",", "\n", "teacher_model_path", "=", "None", ",", "\n", "teacher_topk_path", "=", "None", ",", "\n", "lamda", "=", "None", ",", "\n", "mu", "=", "None", ",", "\n", "num_dynamic_samples", "=", "None", ",", "\n", "dynamic_start_epoch", "=", "None", ",", "\n", "K", "=", "None", ",", "\n", "teach_alpha", "=", "None", ",", "\n", "student_model_args", "=", "None", ",", "\n", "teacher_model_args", "=", "None", ")", ":", "\n", "\n", "# data related", "\n", "        ", "self", ".", "L", "=", "None", "\n", "self", ".", "T", "=", "None", "\n", "\n", "# model related", "\n", "self", ".", "_num_items", "=", "None", "\n", "self", ".", "_num_users", "=", "None", "\n", "self", ".", "_teacher_net", "=", "None", "# teacher model", "\n", "self", ".", "_student_net", "=", "None", "# student model", "\n", "self", ".", "_student_model_args", "=", "student_model_args", "\n", "self", ".", "_teacher_model_args", "=", "teacher_model_args", "\n", "\n", "# learning related", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_n_iter", "=", "n_iter", "\n", "self", ".", "_learning_rate", "=", "learning_rate", "\n", "self", ".", "_l2", "=", "l2", "\n", "self", ".", "_neg_samples", "=", "neg_samples", "\n", "self", ".", "_device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "# ranking distillation related", "\n", "self", ".", "_teach_alpha", "=", "teach_alpha", "\n", "self", ".", "_lambda", "=", "lamda", "\n", "self", ".", "_mu", "=", "mu", "\n", "self", ".", "_num_dynamic_samples", "=", "num_dynamic_samples", "\n", "self", ".", "_dynamic_start_epoch", "=", "dynamic_start_epoch", "\n", "self", ".", "_K", "=", "K", "\n", "self", ".", "_teacher_model_path", "=", "teacher_model_path", "\n", "self", ".", "_teacher_topk_path", "=", "teacher_topk_path", "\n", "self", ".", "_weight_renormalize", "=", "False", "\n", "\n", "# rank evaluation related", "\n", "self", ".", "test_sequence", "=", "None", "\n", "self", ".", "_candidate", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._teacher_initialized": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_teacher_initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_teacher_net", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._initialize_teacher": [[122, 145], ["caser.Caser", "os.path.isfile", "distill_caser.DistilledRecommender._teacher_net.eval", "print", "torch.load", "torch.load", "torch.load", "torch.load", "distill_caser.DistilledRecommender._teacher_net.load_state_dict", "print", "print"], "methods", ["None"], ["", "def", "_initialize_teacher", "(", "self", ",", "interactions", ")", ":", "\n", "# initialize teacher model", "\n", "        ", "self", ".", "_num_items", "=", "interactions", ".", "num_items", "\n", "self", ".", "_num_users", "=", "interactions", ".", "num_users", "\n", "\n", "self", ".", "_teacher_net", "=", "Caser", "(", "self", ".", "_num_users", ",", "\n", "self", ".", "_num_items", ",", "\n", "self", ".", "_teacher_model_args", ")", "\n", "# load teacher model", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "_teacher_model_path", ")", ":", "\n", "            ", "output_str", "=", "(", "\"loading teacher model from %s\"", "%", "self", ".", "_teacher_model_path", ")", "\n", "print", "(", "output_str", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "_teacher_model_path", ")", "\n", "self", ".", "_teacher_net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "output_str", "=", "\"loaded model %s (epoch %d)\"", "%", "(", "self", ".", "_teacher_model_path", ",", "checkpoint", "[", "'epoch_num'", "]", ")", "\n", "print", "(", "output_str", ")", "\n", "", "else", ":", "\n", "            ", "output_str", "=", "\"no model found at %s\"", "%", "self", ".", "_teacher_model_path", "\n", "print", "(", "output_str", ")", "\n", "\n", "# set teacher model to evaluation mode", "\n", "", "self", ".", "_teacher_net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._student_initialized": [[146, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_student_initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_student_net", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._initialize_student": [[150, 163], ["caser.Caser", "torch.Adam", "torch.Adam", "distill_caser.DistilledRecommender._student_net.parameters"], "methods", ["None"], ["", "def", "_initialize_student", "(", "self", ",", "interactions", ")", ":", "\n", "        ", "self", ".", "_num_items", "=", "interactions", ".", "num_items", "\n", "self", ".", "_num_users", "=", "interactions", ".", "num_users", "\n", "\n", "self", ".", "test_sequence", "=", "interactions", ".", "test_sequences", "\n", "\n", "self", ".", "_student_net", "=", "Caser", "(", "self", ".", "_num_users", ",", "\n", "self", ".", "_num_items", ",", "\n", "self", ".", "_student_model_args", ")", "\n", "\n", "self", ".", "_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "_student_net", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "_l2", ",", "\n", "lr", "=", "self", ".", "_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender.fit": [[164, 357], ["train.sequences.user_ids.reshape", "print", "os.path.isfile", "numpy.array", "numpy.exp", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "weight_static.unsqueeze.unsqueeze.unsqueeze", "print", "print", "numpy.arange", "range", "distill_caser.DistilledRecommender._initialize_teacher", "distill_caser.DistilledRecommender._initialize_student", "print", "numpy.load", "print", "distill_caser.DistilledRecommender._get_teacher_topk", "range", "numpy.sum", "time.time.time", "distill_caser.DistilledRecommender._teacher_net.eval", "distill_caser.DistilledRecommender._teacher_net.to", "distill_caser.DistilledRecommender._student_net.train", "distill_caser.DistilledRecommender._student_net.to", "utils.shuffle", "distill_caser.DistilledRecommender._generate_negative_samples", "distill_caser.DistilledRecommender._generate_negative_samples", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "enumerate", "time.time.time", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.compute_model_size", "utils.compute_model_size", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "users.to", "sequences.to", "targets.to", "negatives.to", "utils.minibatch", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "distill_caser.DistilledRecommender._student_net", "torch.split", "torch.split", "torch.split", "torch.split", "distill_caser.DistilledRecommender._optimizer.zero_grad", "F.normalize.detach", "losses.weighted_sigmoid_log_loss", "loss.item", "regular_loss.item", "loss.backward", "distill_caser.DistilledRecommender._optimizer.step", "evaluation.evaluate_ranking", "print", "print", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "list", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "tuple", "tuple", "tuple", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "batch_targets.size", "batch_negatives.size", "torch.from_numpy().long().to.size", "torch.from_numpy().long().to.size", "batch_dynamics.size", "candidates_prediction[].unsqueeze", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "list.append", "F.normalize", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.mean", "numpy.mean", "numpy.mean", "time.time.time", "time.time.time", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._initialize_teacher", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._initialize_student", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._get_teacher_topk", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.shuffle", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._generate_negative_samples", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.train_caser.Recommender._generate_negative_samples", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.compute_model_size", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.compute_model_size", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.minibatch", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.losses.weighted_sigmoid_log_loss", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation.evaluate_ranking"], ["", "def", "fit", "(", "self", ",", "train", ",", "test", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The general training loop to fit the model\n\n        Parameters\n        ----------\n\n        train: :class:`interactions.Interactions`\n            training instances, also contains test sequences\n        test: :class:`interactions.Interactions`\n            only contains targets for test sequences\n        verbose: bool, optional\n            print the logs\n        \"\"\"", "\n", "\n", "# convert sequences, targets and users to numpy arrays", "\n", "sequences_np", "=", "train", ".", "sequences", ".", "sequences", "\n", "targets_np", "=", "train", ".", "sequences", ".", "targets", "\n", "users_np", "=", "train", ".", "sequences", ".", "user_ids", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "L", ",", "self", ".", "T", "=", "train", ".", "sequences", ".", "L", ",", "train", ".", "sequences", ".", "T", "\n", "\n", "n_train", "=", "sequences_np", ".", "shape", "[", "0", "]", "\n", "\n", "output_str", "=", "'total training instances: %d'", "%", "n_train", "\n", "print", "(", "output_str", ")", "\n", "\n", "if", "not", "self", ".", "_teacher_initialized", ":", "\n", "            ", "self", ".", "_initialize_teacher", "(", "train", ")", "\n", "", "if", "not", "self", ".", "_student_initialized", ":", "\n", "            ", "self", ".", "_initialize_student", "(", "train", ")", "\n", "\n", "# here we compute teacher top-K ranking for each training instance in advance for faster training speed", "\n", "# while we have to compute the top-K ranking on the fly if it is too large to keep in memory", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "_teacher_topk_path", ")", ":", "\n", "            ", "print", "(", "'found teacher topk file, loading..'", ")", "\n", "teacher_ranking", "=", "np", ".", "load", "(", "self", ".", "_teacher_topk_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'teacher topk file not found, generating.. '", ")", "\n", "teacher_ranking", "=", "self", ".", "_get_teacher_topk", "(", "sequences_np", ",", "users_np", ",", "targets_np", ",", "k", "=", "self", ".", "_K", ")", "\n", "\n", "# initialize static weight (position importance weight)", "\n", "", "weight_static", "=", "np", ".", "array", "(", "range", "(", "1", ",", "self", ".", "_K", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight_static", "=", "np", ".", "exp", "(", "-", "weight_static", "/", "self", ".", "_lambda", ")", "\n", "weight_static", "=", "weight_static", "/", "np", ".", "sum", "(", "weight_static", ")", "\n", "\n", "weight_static", "=", "torch", ".", "from_numpy", "(", "weight_static", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "weight_static", "=", "weight_static", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# initialize dynamic weight (ranking discrepancy weight)", "\n", "weight_dynamic", "=", "None", "\n", "\n", "# count number of parameters", "\n", "print", "(", "\"Number of params in teacher model: %d\"", "%", "compute_model_size", "(", "self", ".", "_teacher_net", ")", ")", "\n", "print", "(", "\"Number of params in student model: %d\"", "%", "compute_model_size", "(", "self", ".", "_student_net", ")", ")", "\n", "\n", "indices", "=", "np", ".", "arange", "(", "n_train", ")", "\n", "start_epoch", "=", "1", "\n", "\n", "for", "epoch_num", "in", "range", "(", "start_epoch", ",", "self", ".", "_n_iter", "+", "1", ")", ":", "\n", "\n", "            ", "t1", "=", "time", "(", ")", "\n", "# set teacher model to evaluation mode and move it to the corresponding devices", "\n", "self", ".", "_teacher_net", ".", "eval", "(", ")", "\n", "self", ".", "_teacher_net", "=", "self", ".", "_teacher_net", ".", "to", "(", "self", ".", "_device", ")", "\n", "# set student model to training mode and move it to the corresponding devices", "\n", "self", ".", "_student_net", ".", "train", "(", ")", "\n", "self", ".", "_student_net", "=", "self", ".", "_student_net", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "(", "users_np", ",", "sequences_np", ",", "targets_np", ")", ",", "shuffle_indices", "=", "shuffle", "(", "users_np", ",", "\n", "sequences_np", ",", "\n", "targets_np", ",", "\n", "indices", "=", "True", ")", "\n", "\n", "indices", "=", "indices", "[", "shuffle_indices", "]", "# keep indices for retrieval teacher's top-K ranking from cache", "\n", "\n", "negatives_np", "=", "self", ".", "_generate_negative_samples", "(", "users_np", ",", "train", ",", "n", "=", "self", ".", "_neg_samples", ")", "\n", "\n", "dynamic_samples_np", "=", "self", ".", "_generate_negative_samples", "(", "users_np", ",", "train", ",", "n", "=", "self", ".", "_num_dynamic_samples", ")", "\n", "\n", "# convert numpy arrays to PyTorch tensors and move it to the corresponding devices", "\n", "users", ",", "sequences", ",", "targets", ",", "negatives", "=", "(", "torch", ".", "from_numpy", "(", "users_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "sequences_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "targets_np", ")", ".", "long", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "negatives_np", ")", ".", "long", "(", ")", ")", "\n", "\n", "users", ",", "sequences", ",", "targets", ",", "negatives", "=", "(", "users", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "sequences", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "targets", ".", "to", "(", "self", ".", "_device", ")", ",", "\n", "negatives", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "\n", "dynamic_samples", "=", "torch", ".", "from_numpy", "(", "dynamic_samples_np", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "epoch_regular_loss", "=", "0.0", "\n", "\n", "for", "(", "minibatch_num", ",", "\n", "(", "batch_indices", ",", "\n", "batch_users", ",", "\n", "batch_sequences", ",", "\n", "batch_targets", ",", "\n", "batch_negatives", ",", "\n", "batch_dynamics", ")", ")", "in", "enumerate", "(", "minibatch", "(", "indices", ",", "\n", "users", ",", "\n", "sequences", ",", "\n", "targets", ",", "\n", "negatives", ",", "\n", "dynamic_samples", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ")", ")", ":", "\n", "\n", "# retrieval teacher top-K ranking given indices", "\n", "                ", "batch_candidates", "=", "torch", ".", "from_numpy", "(", "teacher_ranking", "[", "batch_indices", ",", ":", "]", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "# concatenate all variables to get predictions in one run", "\n", "items_to_predict", "=", "torch", ".", "cat", "(", "(", "batch_targets", ",", "batch_negatives", ",", "\n", "batch_candidates", ",", "batch_dynamics", ")", ",", "1", ")", "\n", "\n", "items_prediction", "=", "self", ".", "_student_net", "(", "batch_sequences", ",", "\n", "batch_users", ",", "\n", "items_to_predict", ")", "\n", "\n", "(", "targets_prediction", ",", "\n", "negatives_prediction", ",", "\n", "candidates_prediction", ",", "\n", "dynamics_prediction", ")", "=", "torch", ".", "split", "(", "items_prediction", ",", "[", "batch_targets", ".", "size", "(", "1", ")", ",", "\n", "batch_negatives", ".", "size", "(", "1", ")", ",", "\n", "batch_candidates", ".", "size", "(", "1", ")", ",", "\n", "batch_dynamics", ".", "size", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "epoch_num", ">", "self", ".", "_dynamic_start_epoch", ":", "\n", "# compute dynamic weight", "\n", "                    ", "dynamic_weights", "=", "list", "(", ")", "\n", "for", "col", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "                        ", "col_prediction", "=", "candidates_prediction", "[", ":", ",", "col", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "num_smaller_than", "=", "torch", ".", "sum", "(", "col_prediction", "<", "dynamics_prediction", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "relative_rank", "=", "num_smaller_than", "/", "self", ".", "_num_dynamic_samples", "\n", "predicted_rank", "=", "torch", ".", "floor", "(", "(", "self", ".", "_num_items", "-", "1", ")", "*", "relative_rank", ")", "\n", "\n", "dynamic_weight", "=", "torch", ".", "tanh", "(", "self", ".", "_mu", "*", "(", "predicted_rank", "-", "col", ")", ")", "\n", "dynamic_weight", "=", "torch", ".", "clamp", "(", "dynamic_weight", ",", "min", "=", "0.0", ")", "\n", "\n", "dynamic_weights", ".", "append", "(", "dynamic_weight", ")", "\n", "", "weight_dynamic", "=", "torch", ".", "stack", "(", "dynamic_weights", ",", "1", ")", "\n", "\n", "# hybrid two weights", "\n", "weight", "=", "weight_dynamic", "*", "weight_static", "\n", "if", "self", ".", "_weight_renormalize", ":", "\n", "                        ", "weight", "=", "F", ".", "normalize", "(", "weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "weight", "=", "weight_static", "\n", "\n", "# detach the weight to stop the gradient flow to the weight", "\n", "", "weight", "=", "weight", ".", "detach", "(", ")", "\n", "\n", "loss", ",", "regular_loss", "=", "weighted_sigmoid_log_loss", "(", "targets_prediction", ",", "\n", "negatives_prediction", ",", "\n", "candidates_prediction", ",", "\n", "weight", ",", "self", ".", "_teach_alpha", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_regular_loss", "+=", "regular_loss", ".", "item", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# assert False", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "/=", "minibatch_num", "+", "1", "\n", "epoch_regular_loss", "/=", "minibatch_num", "+", "1", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "\n", "if", "verbose", "and", "epoch_num", "%", "10", "==", "0", ":", "\n", "                ", "precision", ",", "recall", ",", "ndcg", ",", "mean_aps", "=", "evaluate_ranking", "(", "self", ",", "test", ",", "train", ",", "k", "=", "[", "3", ",", "5", ",", "10", "]", ")", "\n", "\n", "str_precs", "=", "\"precisions=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "precision", "]", ")", "\n", "str_recalls", "=", "\"recalls=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "recall", "]", ")", "\n", "str_ndcgs", "=", "\"ndcgs=%.4f,%.4f,%.4f\"", "%", "tuple", "(", "[", "np", ".", "mean", "(", "a", ")", "for", "a", "in", "ndcg", "]", ")", "\n", "\n", "output_str", "=", "\"Epoch %d [%.1f s]\\tloss=%.4f, regular_loss=%.4f, \"", "\"map=%.4f, %s, %s, %s[%.1f s]\"", "%", "(", "epoch_num", ",", "t2", "-", "t1", ",", "\n", "epoch_loss", ",", "epoch_regular_loss", ",", "\n", "mean_aps", ",", "str_precs", ",", "str_recalls", ",", "str_ndcgs", ",", "\n", "time", "(", ")", "-", "t2", ")", "\n", "print", "(", "output_str", ")", "\n", "", "else", ":", "\n", "                ", "output_str", "=", "\"Epoch %d [%.1f s]\\tloss=%.4f, regular_loss=%.4f[%.1f s]\"", "%", "(", "epoch_num", ",", "t2", "-", "t1", ",", "\n", "epoch_loss", ",", "\n", "epoch_regular_loss", ",", "\n", "time", "(", ")", "-", "t2", ")", "\n", "print", "(", "output_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender._get_teacher_topk": [[358, 418], ["numpy.arange", "numpy.zeros", "utils.minibatch", "numpy.save", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.arange().repeat().long", "torch.arange().repeat().long", "torch.arange().repeat().long", "torch.arange().repeat().long", "distill_caser.DistilledRecommender._teacher_net().detach", "distill_caser.DistilledRecommender.topk", "tops.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.concatenate", "numpy.zeros", "enumerate", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "distill_caser.DistilledRecommender._teacher_net", "tops.cpu().numpy.cpu().numpy.cpu", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "numpy.sort", "numpy.sort"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.minibatch", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.cpu"], ["", "", "", "def", "_get_teacher_topk", "(", "self", ",", "sequences", ",", "users", ",", "targets", ",", "k", ")", ":", "\n", "        ", "\"\"\"\n        Pre-compute and cache teacher's top-K ranking for each training instance.\n        By doing this we can make training with distillation much faster.\n\n        Parameters\n        ----------\n\n        sequences: array of np.int64\n            sequencces of items\n        users: array of np.int64\n            users associated with each sequence\n        targets: array of np.int64\n            target item that user interact with given the sequence\n        k: int\n            length of teacher's exemplary ranking\n        \"\"\"", "\n", "with_targets", "=", "False", "\n", "\n", "n_train", "=", "sequences", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "arange", "(", "n_train", ")", "\n", "\n", "users", ",", "sequences", "=", "torch", ".", "from_numpy", "(", "users", ")", ".", "long", "(", ")", ",", "torch", ".", "from_numpy", "(", "sequences", ")", ".", "long", "(", ")", "\n", "\n", "# teacher topk results", "\n", "teacher_topk", "=", "np", ".", "zeros", "(", "(", "n_train", ",", "k", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "for", "(", "batch_indices", ",", "\n", "batch_users", ",", "\n", "batch_sequences", ",", "\n", "batch_targets", ")", "in", "minibatch", "(", "indices", ",", "\n", "users", ",", "\n", "sequences", ",", "\n", "targets", ",", "\n", "batch_size", "=", "16", ")", ":", "\n", "\n", "            ", "cur_batch_size", "=", "batch_users", ".", "shape", "[", "0", "]", "\n", "all_items", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "self", ".", "_num_items", ")", ".", "repeat", "(", "cur_batch_size", ",", "1", ")", ".", "long", "(", ")", "\n", "\n", "teacher_prediction", "=", "self", ".", "_teacher_net", "(", "batch_sequences", ",", "\n", "batch_users", ",", "\n", "all_items", ")", ".", "detach", "(", ")", "\n", "\n", "_", ",", "tops", "=", "teacher_prediction", ".", "topk", "(", "k", "*", "2", ",", "dim", "=", "1", ")", "# return the topk by column", "\n", "tops", "=", "tops", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "new_tops", "=", "np", ".", "concatenate", "(", "(", "batch_targets", ",", "tops", ")", ",", "axis", "=", "1", ")", "\n", "topks", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "k", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "new_tops", ")", ":", "\n", "                ", "_", ",", "idx", "=", "np", ".", "unique", "(", "row", ",", "return_index", "=", "True", ")", "\n", "# whether teacher's top-k ranking consider target items", "\n", "if", "with_targets", ":", "\n", "                    ", "topk", "=", "row", "[", "np", ".", "sort", "(", "idx", ")", "]", "[", ":", "k", "]", "\n", "", "else", ":", "\n", "                    ", "topk", "=", "row", "[", "np", ".", "sort", "(", "idx", ")", "]", "[", "self", ".", "T", ":", "k", "+", "self", ".", "T", "]", "\n", "", "topks", "[", "i", ",", ":", "]", "=", "topk", "\n", "", "teacher_topk", "[", "batch_indices", ",", ":", "]", "=", "topks", "\n", "", "np", ".", "save", "(", "'gowalla-teacher-dim=%d-top=%d.npy'", "%", "(", "self", ".", "_teacher_model_args", ".", "d", ",", "k", ")", ",", "teacher_topk", ")", "\n", "return", "teacher_topk", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender.predict": [[419, 422], ["super().predict"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender.predict"], ["", "def", "predict", "(", "self", ",", "user_id", ",", "item_ids", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "DistilledRecommender", ",", "self", ")", ".", "predict", "(", "user_id", ",", "item_ids", ",", "\n", "model", "=", "self", ".", "_student_net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.gpu": [[15, 21], ["tensor.cuda"], "function", ["None"], ["def", "gpu", "(", "tensor", ",", "gpu", "=", "False", ")", ":", "\n", "\n", "    ", "if", "gpu", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.cpu": [[23, 29], ["tensor.cpu"], "function", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.cpu"], ["", "", "def", "cpu", "(", "tensor", ")", ":", "\n", "\n", "    ", "if", "tensor", ".", "is_cuda", ":", "\n", "        ", "return", "tensor", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.minibatch": [[31, 42], ["kwargs.get", "len", "range", "range", "len", "len", "tuple"], "function", ["None"], ["", "", "def", "minibatch", "(", "*", "tensors", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "batch_size", "=", "kwargs", ".", "get", "(", "'batch_size'", ",", "128", ")", "\n", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "tensor", "=", "tensors", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tensor", ")", ",", "batch_size", ")", ":", "\n", "            ", "yield", "tensor", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tensors", "[", "0", "]", ")", ",", "batch_size", ")", ":", "\n", "            ", "yield", "tuple", "(", "x", "[", "i", ":", "i", "+", "batch_size", "]", "for", "x", "in", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.shuffle": [[44, 64], ["kwargs.get", "numpy.arange", "numpy.random.shuffle", "len", "ValueError", "len", "len", "tuple", "set", "len"], "function", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.shuffle"], ["", "", "", "def", "shuffle", "(", "*", "arrays", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "require_indices", "=", "kwargs", ".", "get", "(", "'indices'", ",", "False", ")", "\n", "\n", "if", "len", "(", "set", "(", "len", "(", "x", ")", "for", "x", "in", "arrays", ")", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'All inputs to shuffle must have '", "\n", "'the same length.'", ")", "\n", "\n", "", "shuffle_indices", "=", "np", ".", "arange", "(", "len", "(", "arrays", "[", "0", "]", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffle_indices", ")", "\n", "\n", "if", "len", "(", "arrays", ")", "==", "1", ":", "\n", "        ", "result", "=", "arrays", "[", "0", "]", "[", "shuffle_indices", "]", "\n", "", "else", ":", "\n", "        ", "result", "=", "tuple", "(", "x", "[", "shuffle_indices", "]", "for", "x", "in", "arrays", ")", "\n", "\n", "", "if", "require_indices", ":", "\n", "        ", "return", "result", ",", "shuffle_indices", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.assert_no_grad": [[66, 71], ["ValueError"], "function", ["None"], ["", "", "def", "assert_no_grad", "(", "variable", ")", ":", "\n", "\n", "    ", "if", "variable", ".", "requires_grad", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\n", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.set_seed": [[75, 83], ["numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "", "def", "set_seed", "(", "seed", ",", "cuda", "=", "False", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.compute_model_size": [[85, 91], ["model.parameters", "param.view().size", "param.view"], "function", ["None"], ["", "", "def", "compute_model_size", "(", "model", ")", ":", "\n", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "[", "0", "]", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.utils.str2bool": [[93, 95], ["v.lower"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ")", "", "", ""]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.__init__": [[52, 99], ["list", "list", "numpy.array", "numpy.array", "dict", "dict", "len", "len", "open", "line.strip().split", "numpy.array.append", "numpy.array.append", "line.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_path", ",", "\n", "user_map", "=", "None", ",", "\n", "item_map", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "user_map", "and", "not", "item_map", ":", "\n", "            ", "user_map", "=", "dict", "(", ")", "\n", "item_map", "=", "dict", "(", ")", "\n", "\n", "num_user", "=", "0", "\n", "num_item", "=", "0", "\n", "", "else", ":", "\n", "            ", "num_user", "=", "len", "(", "user_map", ")", "\n", "num_item", "=", "len", "(", "item_map", ")", "\n", "\n", "", "user_ids", "=", "list", "(", ")", "\n", "item_ids", "=", "list", "(", ")", "\n", "# read users and items from file", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "u", ",", "i", ",", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "user_ids", ".", "append", "(", "u", ")", "\n", "item_ids", ".", "append", "(", "i", ")", "\n", "\n", "# update user and item mapping", "\n", "", "", "for", "u", "in", "user_ids", ":", "\n", "            ", "if", "u", "not", "in", "user_map", ":", "\n", "                ", "user_map", "[", "u", "]", "=", "num_user", "\n", "num_user", "+=", "1", "\n", "", "", "for", "i", "in", "item_ids", ":", "\n", "            ", "if", "i", "not", "in", "item_map", ":", "\n", "                ", "item_map", "[", "i", "]", "=", "num_item", "\n", "num_item", "+=", "1", "\n", "\n", "", "", "user_ids", "=", "np", ".", "array", "(", "[", "user_map", "[", "u", "]", "for", "u", "in", "user_ids", "]", ")", "\n", "item_ids", "=", "np", ".", "array", "(", "[", "item_map", "[", "i", "]", "for", "i", "in", "item_ids", "]", ")", "\n", "\n", "self", ".", "num_users", "=", "num_user", "\n", "self", ".", "num_items", "=", "num_item", "\n", "\n", "self", ".", "user_ids", "=", "user_ids", "\n", "self", ".", "item_ids", "=", "item_ids", "\n", "\n", "self", ".", "user_map", "=", "user_map", "\n", "self", ".", "item_map", "=", "item_map", "\n", "\n", "self", ".", "sequences", "=", "None", "\n", "self", ".", "test_sequences", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.__len__": [[100, 103], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "len", "(", "self", ".", "user_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocoo": [[104, 115], ["numpy.ones", "scipy.coo_matrix", "len"], "methods", ["None"], ["", "def", "tocoo", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Transform to a scipy.sparse COO matrix.\n        \"\"\"", "\n", "\n", "row", "=", "self", ".", "user_ids", "\n", "col", "=", "self", ".", "item_ids", "\n", "data", "=", "np", ".", "ones", "(", "len", "(", "self", ")", ")", "\n", "\n", "return", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocsr": [[116, 122], ["interactions.Interactions.tocoo().tocsr", "interactions.Interactions.tocoo"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocsr", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocoo"], ["", "def", "tocsr", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Transform to a scipy.sparse CSR matrix.\n        \"\"\"", "\n", "\n", "return", "self", ".", "tocoo", "(", ")", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.to_sequence": [[123, 206], ["interactions.Interactions.item_map.items", "numpy.lexsort", "numpy.unique", "sum", "numpy.zeros", "numpy.zeros", "numpy.empty", "numpy.zeros", "numpy.empty", "enumerate", "interactions.SequenceInteractions", "interactions.SequenceInteractions", "interactions._generate_sequences"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions._generate_sequences"], ["", "def", "to_sequence", "(", "self", ",", "sequence_length", "=", "5", ",", "target_length", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Transform to sequence form.\n\n        Valid subsequences of users' interactions are returned. For\n        example, if a user interacted with items [1, 2, 3, 4, 5, 6, 7, 8, 9], the\n        returned interactions matrix at sequence length 5 and target length 3\n        will be be given by:\n\n        sequences:\n\n           [[1, 2, 3, 4, 5],\n            [2, 3, 4, 5, 6],\n            [3, 4, 5, 6, 7]]\n\n        targets:\n\n           [[6, 7],\n            [7, 8],\n            [8, 9]]\n\n        sequence for test (the last 'sequence_length' items of each user's sequence):\n\n        [[5, 6, 7, 8, 9]]\n\n        Parameters\n        ----------\n\n        sequence_length: int\n            Sequence length. Subsequences shorter than this\n            will be left-padded with zeros.\n        target_length: int\n            Sequence target length.\n        \"\"\"", "\n", "\n", "# change the item index start from 1 as 0 is used for padding in sequences", "\n", "for", "k", ",", "v", "in", "self", ".", "item_map", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "item_map", "[", "k", "]", "=", "v", "+", "1", "\n", "", "self", ".", "item_ids", "=", "self", ".", "item_ids", "+", "1", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n", "max_sequence_length", "=", "sequence_length", "+", "target_length", "\n", "\n", "# Sort first by user id", "\n", "sort_indices", "=", "np", ".", "lexsort", "(", "(", "self", ".", "user_ids", ",", ")", ")", "\n", "\n", "user_ids", "=", "self", ".", "user_ids", "[", "sort_indices", "]", "\n", "item_ids", "=", "self", ".", "item_ids", "[", "sort_indices", "]", "\n", "\n", "user_ids", ",", "indices", ",", "counts", "=", "np", ".", "unique", "(", "user_ids", ",", "\n", "return_index", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "\n", "num_subsequences", "=", "sum", "(", "[", "c", "-", "max_sequence_length", "+", "1", "if", "c", ">=", "max_sequence_length", "else", "1", "for", "c", "in", "counts", "]", ")", "\n", "\n", "sequences", "=", "np", ".", "zeros", "(", "(", "num_subsequences", ",", "sequence_length", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "sequences_targets", "=", "np", ".", "zeros", "(", "(", "num_subsequences", ",", "target_length", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "sequence_users", "=", "np", ".", "empty", "(", "num_subsequences", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "test_sequences", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_users", ",", "sequence_length", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "test_users", "=", "np", ".", "empty", "(", "self", ".", "num_users", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "_uid", "=", "None", "\n", "for", "i", ",", "(", "uid", ",", "\n", "item_seq", ")", "in", "enumerate", "(", "_generate_sequences", "(", "user_ids", ",", "\n", "item_ids", ",", "\n", "indices", ",", "\n", "max_sequence_length", ")", ")", ":", "\n", "            ", "if", "uid", "!=", "_uid", ":", "\n", "                ", "test_sequences", "[", "uid", "]", "[", ":", "]", "=", "item_seq", "[", "-", "sequence_length", ":", "]", "\n", "test_users", "[", "uid", "]", "=", "uid", "\n", "_uid", "=", "uid", "\n", "", "sequences_targets", "[", "i", "]", "[", ":", "]", "=", "item_seq", "[", "-", "target_length", ":", "]", "\n", "sequences", "[", "i", "]", "[", ":", "]", "=", "item_seq", "[", ":", "sequence_length", "]", "\n", "sequence_users", "[", "i", "]", "=", "uid", "\n", "\n", "", "self", ".", "sequences", "=", "SequenceInteractions", "(", "sequence_users", ",", "sequences", ",", "sequences_targets", ")", "\n", "self", ".", "test_sequences", "=", "SequenceInteractions", "(", "test_users", ",", "test_sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.SequenceInteractions.__init__": [[223, 235], ["numpy.any"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "user_ids", ",", "\n", "sequences", ",", "\n", "targets", "=", "None", ")", ":", "\n", "        ", "self", ".", "user_ids", "=", "user_ids", "\n", "self", ".", "sequences", "=", "sequences", "\n", "self", ".", "targets", "=", "targets", "\n", "\n", "self", ".", "L", "=", "sequences", ".", "shape", "[", "1", "]", "\n", "self", ".", "T", "=", "None", "\n", "if", "np", ".", "any", "(", "targets", ")", ":", "\n", "            ", "self", ".", "T", "=", "targets", ".", "shape", "[", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions._sliding_window": [[11, 20], ["range", "len", "len"], "function", ["None"], ["def", "_sliding_window", "(", "tensor", ",", "window_size", ",", "step_size", "=", "1", ")", ":", "\n", "    ", "if", "len", "(", "tensor", ")", "-", "window_size", ">=", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "tensor", ")", ",", "0", ",", "-", "step_size", ")", ":", "\n", "            ", "if", "i", "-", "window_size", ">=", "0", ":", "\n", "                ", "yield", "tensor", "[", "i", "-", "window_size", ":", "i", "]", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "", "else", ":", "\n", "        ", "yield", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions._generate_sequences": [[22, 37], ["range", "len", "interactions._sliding_window", "len"], "function", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions._sliding_window"], ["", "", "def", "_generate_sequences", "(", "user_ids", ",", "item_ids", ",", "\n", "indices", ",", "\n", "max_sequence_length", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", ":", "\n", "\n", "        ", "start_idx", "=", "indices", "[", "i", "]", "\n", "\n", "if", "i", ">=", "len", "(", "indices", ")", "-", "1", ":", "\n", "            ", "stop_idx", "=", "None", "\n", "", "else", ":", "\n", "            ", "stop_idx", "=", "indices", "[", "i", "+", "1", "]", "\n", "\n", "", "for", "seq", "in", "_sliding_window", "(", "item_ids", "[", "start_idx", ":", "stop_idx", "]", ",", "\n", "max_sequence_length", ")", ":", "\n", "            ", "yield", "(", "user_ids", "[", "i", "]", ",", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_apk": [[7, 24], ["enumerate", "len", "list", "min", "len"], "function", ["None"], ["def", "_compute_apk", "(", "targets", ",", "predictions", ",", "k", ")", ":", "\n", "\n", "    ", "if", "len", "(", "predictions", ")", ">", "k", ":", "\n", "        ", "predictions", "=", "predictions", "[", ":", "k", "]", "\n", "\n", "", "score", "=", "0.0", "\n", "num_hits", "=", "0.0", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "if", "p", "in", "targets", "and", "p", "not", "in", "predictions", "[", ":", "i", "]", ":", "\n", "            ", "num_hits", "+=", "1.0", "\n", "score", "+=", "num_hits", "/", "(", "i", "+", "1.0", ")", "\n", "\n", "", "", "if", "not", "list", "(", "targets", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "return", "score", "/", "min", "(", "len", "(", "targets", ")", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_precision_recall": [[26, 33], ["len", "set().intersection", "float", "len", "float", "len", "set", "set"], "function", ["None"], ["", "def", "_compute_precision_recall", "(", "targets", ",", "predictions", ",", "k", ")", ":", "\n", "\n", "    ", "pred", "=", "predictions", "[", ":", "k", "]", "\n", "num_hit", "=", "len", "(", "set", "(", "pred", ")", ".", "intersection", "(", "set", "(", "targets", ")", ")", ")", "\n", "precision", "=", "float", "(", "num_hit", ")", "/", "len", "(", "pred", ")", "\n", "recall", "=", "float", "(", "num_hit", ")", "/", "len", "(", "targets", ")", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_ndcg": [[35, 50], ["min", "numpy.sum", "enumerate", "len", "len", "numpy.log2", "numpy.arange", "numpy.log2"], "function", ["None"], ["", "def", "_compute_ndcg", "(", "targets", ",", "predictions", ",", "k", ")", ":", "\n", "    ", "k", "=", "min", "(", "len", "(", "targets", ")", ",", "k", ")", "\n", "\n", "if", "len", "(", "predictions", ")", ">", "k", ":", "\n", "        ", "predictions", "=", "predictions", "[", ":", "k", "]", "\n", "\n", "# compute idcg", "\n", "", "idcg", "=", "np", ".", "sum", "(", "1", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", ")", "\n", "dcg", "=", "0.0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "if", "p", "in", "targets", ":", "\n", "            ", "dcg", "+=", "1", "/", "np", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "", "ndcg", "=", "dcg", "/", "idcg", "\n", "\n", "return", "ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation.evaluate_ranking": [[52, 126], ["test.tocsr.tocsr", "list", "enumerate", "numpy.mean", "train.tocsr.tocsr", "isinstance", "list", "list", "list", "predictions.argsort.argsort", "enumerate", "list.append", "numpy.array", "numpy.array", "isinstance", "range", "range", "range", "len", "model.predict", "set", "evaluation._compute_precision_recall", "precisions[].append", "recalls[].append", "evaluation._compute_ndcg", "ndcgs[].append", "evaluation._compute_apk", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocsr", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.interactions.Interactions.tocsr", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.distill_caser.DistilledRecommender.predict", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_precision_recall", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_ndcg", "home.repos.pwc.inspect_result.graytowne_rank_distill.None.evaluation._compute_apk"], ["", "def", "evaluate_ranking", "(", "model", ",", "test", ",", "train", "=", "None", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Compute Precision@k, Recall@k scores, nDCG@k and average precision (AP).\n    One score is given for every user with interactions in the test\n    set, representing the AP, Precision@k, Recall@k and nDCG@k of all their\n    test items.\n\n    Parameters\n    ----------\n\n    model: fitted instance of a recommender model\n        The model to evaluate.\n    test:\n        Test interactions.\n    train:\n        Train interactions. If supplied, rated items in\n        interactions will be excluded.\n    k: int or array of int,\n        The maximum number of predicted items\n    \"\"\"", "\n", "\n", "test", "=", "test", ".", "tocsr", "(", ")", "\n", "\n", "if", "train", "is", "not", "None", ":", "\n", "        ", "train", "=", "train", ".", "tocsr", "(", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "k", ",", "list", ")", ":", "\n", "        ", "ks", "=", "[", "k", "]", "\n", "", "else", ":", "\n", "        ", "ks", "=", "k", "\n", "\n", "", "precisions", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "len", "(", "ks", ")", ")", "]", "\n", "recalls", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "len", "(", "ks", ")", ")", "]", "\n", "ndcgs", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "len", "(", "ks", ")", ")", "]", "\n", "apks", "=", "list", "(", ")", "\n", "\n", "for", "user_id", ",", "row", "in", "enumerate", "(", "test", ")", ":", "\n", "\n", "        ", "if", "not", "len", "(", "row", ".", "indices", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "predictions", "=", "-", "model", ".", "predict", "(", "user_id", ")", "\n", "predictions", "=", "predictions", ".", "argsort", "(", ")", "\n", "\n", "if", "train", "is", "not", "None", ":", "\n", "            ", "rated", "=", "set", "(", "train", "[", "user_id", "]", ".", "indices", ")", "\n", "", "else", ":", "\n", "            ", "rated", "=", "[", "]", "\n", "\n", "", "predictions", "=", "[", "p", "for", "p", "in", "predictions", "if", "p", "not", "in", "rated", "]", "\n", "\n", "targets", "=", "row", ".", "indices", "\n", "\n", "for", "i", ",", "_k", "in", "enumerate", "(", "ks", ")", ":", "\n", "            ", "precision", ",", "recall", "=", "_compute_precision_recall", "(", "targets", ",", "predictions", ",", "_k", ")", "\n", "precisions", "[", "i", "]", ".", "append", "(", "precision", ")", "\n", "recalls", "[", "i", "]", ".", "append", "(", "recall", ")", "\n", "\n", "ndcg", "=", "_compute_ndcg", "(", "targets", ",", "predictions", ",", "_k", ")", "\n", "ndcgs", "[", "i", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "apks", ".", "append", "(", "_compute_apk", "(", "targets", ",", "predictions", ",", "k", "=", "np", ".", "inf", ")", ")", "\n", "\n", "", "precisions", "=", "[", "np", ".", "array", "(", "i", ")", "for", "i", "in", "precisions", "]", "\n", "recalls", "=", "[", "np", ".", "array", "(", "i", ")", "for", "i", "in", "recalls", "]", "\n", "\n", "if", "not", "isinstance", "(", "k", ",", "list", ")", ":", "\n", "        ", "precisions", "=", "precisions", "[", "0", "]", "\n", "recalls", "=", "recalls", "[", "0", "]", "\n", "ndcgs", "=", "ndcgs", "[", "0", "]", "\n", "\n", "", "mean_aps", "=", "np", ".", "mean", "(", "apks", ")", "\n", "\n", "return", "precisions", ",", "recalls", ",", "ndcgs", ",", "mean_aps", "\n", "", ""]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.losses.sigmoid_log_loss": [[8, 31], ["torch.sum", "torch.sum.mean", "torch.log", "torch.log", "torch.cat", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["def", "sigmoid_log_loss", "(", "positive_predictions", ",", "negative_predictions", ")", ":", "\n", "    ", "\"\"\"\n    The point-wise log loss (binary cross-entropy) function.\n\n    Parameters\n    ----------\n\n    positive_predictions: tensor\n        Tensor containing predictions for known positive items.\n    negative_predictions: tensor\n        Tensor containing predictions for sampled negative items.\n    Returns\n    -------\n    loss, float\n        The mean value of the loss function.\n    \"\"\"", "\n", "loss1", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "positive_predictions", ")", ")", "\n", "loss0", "=", "-", "torch", ".", "log", "(", "1", "-", "torch", ".", "sigmoid", "(", "negative_predictions", ")", ")", "\n", "\n", "# loss = torch.cat((loss1.view(-1), loss0.view(-1))).mean()", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "(", "loss1", ",", "loss0", ")", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.losses.weighted_sigmoid_log_loss": [[33, 72], ["torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.cat", "torch.cat", "torch.sum.mean", "torch.sum.mean", "torch.sigmoid", "torch.sigmoid", "weight.expand_as", "torch.sigmoid"], "function", ["None"], ["", "def", "weighted_sigmoid_log_loss", "(", "positive_predictions", ",", "negative_predictions", ",", "candidate_predictions", ",", "weight", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    The weighted point-wise log loss (binary cross-entropy) function used for ranking distillation.\n\n    Parameters\n    ----------\n\n    positive_predictions: tensor\n        Tensor containing predictions for known positive items.\n    negative_predictions: tensor\n        Tensor containing predictions for sampled negative items.\n    candidate_predictions:\n        Tensor containing predictions for teacher's top-k ranked items.\n    weight:\n        Tensor containing weight for every loss term.\n    alpha: float, optional\n        Weight for balancing ranking loss and distillation loss.\n    Returns\n    -------\n    loss, float\n        The mean value of the loss function.\n    reg_loss, float\n        The mean value of regular point-wise loss function (i.e., without distillation loss).\n    \"\"\"", "\n", "loss1", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "positive_predictions", ")", ")", "\n", "loss0", "=", "-", "torch", ".", "log", "(", "1", "-", "torch", ".", "sigmoid", "(", "negative_predictions", ")", ")", "\n", "\n", "loss_cand", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "candidate_predictions", ")", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "loss_cand", "=", "loss_cand", "*", "weight", ".", "expand_as", "(", "loss_cand", ")", "\n", "\n", "", "if", "alpha", "is", "not", "None", ":", "\n", "        ", "loss_cand", "=", "loss_cand", "*", "alpha", "\n", "\n", "", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "(", "loss1", ",", "loss0", ",", "loss_cand", ")", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "reg_loss", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "(", "loss1", ",", "loss0", ")", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", ",", "reg_loss", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.caser.Caser.__init__": [[26, 68], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "caser.Caser.user_embeddings.weight.data.normal_", "caser.Caser.item_embeddings.weight.data.normal_", "caser.Caser.W2.weight.data.normal_", "caser.Caser.b2.weight.data.zero_", "len", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.graytowne_rank_distill.None.caser.Caser.__init__"], ["def", "__init__", "(", "self", ",", "num_users", ",", "num_items", ",", "model_args", ")", ":", "\n", "        ", "super", "(", "Caser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "model_args", "\n", "\n", "# init args", "\n", "L", "=", "self", ".", "args", ".", "L", "\n", "dims", "=", "self", ".", "args", ".", "d", "\n", "self", ".", "n_h", "=", "self", ".", "args", ".", "nh", "\n", "self", ".", "n_v", "=", "self", ".", "args", ".", "nv", "\n", "self", ".", "drop_ratio", "=", "self", ".", "args", ".", "drop", "\n", "self", ".", "ac_conv", "=", "activation_getter", "[", "self", ".", "args", ".", "ac_conv", "]", "\n", "self", ".", "ac_fc", "=", "activation_getter", "[", "self", ".", "args", ".", "ac_fc", "]", "\n", "\n", "# user and item embeddings", "\n", "self", ".", "user_embeddings", "=", "nn", ".", "Embedding", "(", "num_users", ",", "dims", ")", "\n", "self", ".", "item_embeddings", "=", "nn", ".", "Embedding", "(", "num_items", ",", "dims", ")", "\n", "\n", "# vertical conv layer", "\n", "self", ".", "conv_v", "=", "nn", ".", "Conv2d", "(", "1", ",", "self", ".", "n_v", ",", "(", "L", ",", "1", ")", ")", "\n", "\n", "# horizontal conv layer", "\n", "lengths", "=", "[", "i", "+", "1", "for", "i", "in", "range", "(", "L", ")", "]", "\n", "self", ".", "conv_h", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "1", ",", "self", ".", "n_h", ",", "(", "i", ",", "dims", ")", ")", "for", "i", "in", "lengths", "]", ")", "\n", "\n", "# fully-connected layer", "\n", "self", ".", "fc1_dim_v", "=", "self", ".", "n_v", "*", "dims", "\n", "self", ".", "fc1_dim_h", "=", "self", ".", "n_h", "*", "len", "(", "lengths", ")", "\n", "fc1_dim_in", "=", "self", ".", "fc1_dim_v", "+", "self", ".", "fc1_dim_h", "\n", "# W1, b1 can be encoded with nn.Linear", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "fc1_dim_in", ",", "dims", ")", "\n", "# W2, b2 are encoded with nn.Embedding, as we don't need to compute scores for all items", "\n", "self", ".", "W2", "=", "nn", ".", "Embedding", "(", "num_items", ",", "dims", "+", "dims", ")", "\n", "self", ".", "b2", "=", "nn", ".", "Embedding", "(", "num_items", ",", "1", ")", "\n", "\n", "# dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_ratio", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "user_embeddings", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1.0", "/", "self", ".", "user_embeddings", ".", "embedding_dim", ")", "\n", "self", ".", "item_embeddings", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1.0", "/", "self", ".", "item_embeddings", ".", "embedding_dim", ")", "\n", "self", ".", "W2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1.0", "/", "self", ".", "W2", ".", "embedding_dim", ")", "\n", "self", ".", "b2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.graytowne_rank_distill.None.caser.Caser.forward": [[69, 132], ["caser.Caser.item_embeddings().unsqueeze", "caser.Caser.user_embeddings().squeeze", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "caser.Caser.dropout", "caser.Caser.ac_fc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "caser.Caser.W2", "caser.Caser.b2", "caser.Caser.conv_v().squeeze", "out_v.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "caser.Caser.fc1", "w2.squeeze.squeeze.squeeze", "b2.squeeze.squeeze.squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "torch.baddbmm().squeeze", "caser.Caser.item_embeddings", "caser.Caser.user_embeddings", "caser.Caser.ac_conv", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "list.append", "caser.Caser.conv_v", "conv().squeeze", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "conv", "caser.Caser.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq_var", ",", "user_var", ",", "item_var", ",", "for_pred", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The forward propagation used to get recommendation scores, given\n        triplet (user, sequence, targets). Note that we can cache 'x' to\n        save computation for negative predictions. Because when computing\n        negatives, the (user, sequence) are the same, thus 'x' will be the\n        same as well.\n\n        Parameters\n        ----------\n\n        seq_var: torch.autograd.Variable\n            a batch of sequence\n        user_var: torch.autograd.Variable\n            a batch of user\n        item_var: torch.autograd.Variable\n            a batch of items\n        use_cache: boolean, optional\n            Use cache of x. Set to True when computing negatives.\n        for_pred: boolean, optional\n            Train or Prediction. Set to True when evaluation.\n        \"\"\"", "\n", "\n", "# Embedding Look-up", "\n", "item_embs", "=", "self", ".", "item_embeddings", "(", "seq_var", ")", ".", "unsqueeze", "(", "1", ")", "# use unsqueeze() to get 4-D", "\n", "user_emb", "=", "self", ".", "user_embeddings", "(", "user_var", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Convolutional Layers", "\n", "out", ",", "out_h", ",", "out_v", "=", "None", ",", "None", ",", "None", "\n", "# vertical conv layer", "\n", "if", "self", ".", "n_v", ":", "\n", "            ", "out_v", "=", "self", ".", "conv_v", "(", "item_embs", ")", ".", "squeeze", "(", "2", ")", "\n", "out_v", "=", "out_v", ".", "view", "(", "-", "1", ",", "self", ".", "fc1_dim_v", ")", "# prepare for fully connect", "\n", "\n", "# horizontal conv layer", "\n", "", "out_hs", "=", "list", "(", ")", "\n", "if", "self", ".", "n_h", ":", "\n", "            ", "for", "conv", "in", "self", ".", "conv_h", ":", "\n", "                ", "conv_out", "=", "self", ".", "ac_conv", "(", "conv", "(", "item_embs", ")", ".", "squeeze", "(", "3", ")", ")", "\n", "pool_out", "=", "F", ".", "max_pool1d", "(", "conv_out", ",", "conv_out", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "out_hs", ".", "append", "(", "pool_out", ")", "\n", "", "out_h", "=", "torch", ".", "cat", "(", "out_hs", ",", "1", ")", "# prepare for fully connect", "\n", "\n", "# Fully-connected Layers", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "out_v", ",", "out_h", "]", ",", "1", ")", "\n", "# apply dropout", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "\n", "# fully-connected layer", "\n", "z", "=", "self", ".", "ac_fc", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "z", ",", "user_emb", "]", ",", "1", ")", "\n", "\n", "w2", "=", "self", ".", "W2", "(", "item_var", ")", "\n", "b2", "=", "self", ".", "b2", "(", "item_var", ")", "\n", "\n", "if", "for_pred", ":", "\n", "            ", "w2", "=", "w2", ".", "squeeze", "(", ")", "\n", "b2", "=", "b2", ".", "squeeze", "(", ")", "\n", "res", "=", "(", "x", "*", "w2", ")", ".", "sum", "(", "1", ")", "+", "b2", "\n", "", "else", ":", "\n", "            ", "res", "=", "torch", ".", "baddbmm", "(", "b2", ",", "w2", ",", "x", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "res", "\n", "\n"]]}